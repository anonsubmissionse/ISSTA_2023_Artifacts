/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 19:03:22 GMT 2022
 */

package org.apache.commons.pool2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import java.lang.ref.ReferenceQueue;
import java.lang.ref.SoftReference;
import java.net.URI;
import java.time.Duration;
import java.time.Instant;
import java.util.ArrayDeque;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.pool2.PooledObject;
import org.apache.commons.pool2.PooledObjectState;
import org.apache.commons.pool2.impl.DefaultPooledObject;
import org.apache.commons.pool2.impl.PooledSoftReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PooledObject_ESTest extends PooledObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PooledSoftReference<PooledSoftReference<String>> pooledSoftReference0 = new PooledSoftReference<PooledSoftReference<String>>((SoftReference<PooledSoftReference<String>>) null);
      pooledSoftReference0.getIdleTime();
      pooledSoftReference0.startEvictionTest();
      PooledSoftReference<PooledSoftReference<String>> pooledSoftReference1 = new PooledSoftReference<PooledSoftReference<String>>((SoftReference<PooledSoftReference<String>>) null);
      Instant instant0 = pooledSoftReference1.getLastBorrowInstant();
      pooledSoftReference0.compareTo((PooledObject<PooledSoftReference<String>>) pooledSoftReference1);
      pooledSoftReference0.allocate();
      pooledSoftReference0.markAbandoned();
      Integer integer0 = new Integer(1);
      DefaultPooledObject<Integer> defaultPooledObject0 = new DefaultPooledObject<Integer>(integer0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("@2lex$g=");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      Locale locale0 = new Locale("4]plT#5LJ9|!)+J9", "b4kq^N P&Pv[", "b4kq^N P&Pv[");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) objectOutputStream0;
      objectArray0[1] = (Object) instant0;
      objectArray0[2] = (Object) "4]plT#5LJ9|!)+J9";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "4]plT#5LJ9|!)+J9", objectArray0);
      defaultPooledObject0.printStackTrace(printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultPooledObject<Integer> defaultPooledObject0 = new DefaultPooledObject<Integer>((Integer) null);
      SoftReference<String> softReference0 = new SoftReference<String>("");
      PooledSoftReference<String> pooledSoftReference0 = new PooledSoftReference<String>(softReference0);
      DefaultPooledObject<PooledSoftReference<String>> defaultPooledObject1 = new DefaultPooledObject<PooledSoftReference<String>>(pooledSoftReference0);
      defaultPooledObject1.getIdleTime();
      defaultPooledObject1.invalidate();
      Duration duration0 = pooledSoftReference0.getIdleTime();
      PooledSoftReference<String> pooledSoftReference1 = new PooledSoftReference<String>(softReference0);
      pooledSoftReference0.toString();
      pooledSoftReference0.startEvictionTest();
      pooledSoftReference1.invalidate();
      pooledSoftReference1.setRequireFullStackTrace(true);
      pooledSoftReference1.startEvictionTest();
      pooledSoftReference0.compareTo((PooledObject<String>) pooledSoftReference1);
      pooledSoftReference0.getIdleTimeMillis();
      DefaultPooledObject<Object> defaultPooledObject2 = new DefaultPooledObject<Object>((Object) null);
      defaultPooledObject2.getIdleTime();
      defaultPooledObject2.getCreateTime();
      pooledSoftReference1.getLastUsedTime();
      defaultPooledObject2.allocate();
      ReferenceQueue<PooledObject<String>> referenceQueue0 = new ReferenceQueue<PooledObject<String>>();
      SoftReference<PooledObject<String>> softReference1 = new SoftReference<PooledObject<String>>(pooledSoftReference0, referenceQueue0);
      PooledSoftReference<PooledObject<String>> pooledSoftReference2 = new PooledSoftReference<PooledObject<String>>(softReference1);
      pooledSoftReference2.deallocate();
      pooledSoftReference2.markAbandoned();
      defaultPooledObject2.getLastReturnInstant();
      pooledSoftReference2.setRequireFullStackTrace(false);
      Duration duration1 = defaultPooledObject2.getActiveDuration();
      assertSame(duration1, duration0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-1206));
      DefaultPooledObject<Integer> defaultPooledObject0 = new DefaultPooledObject<Integer>(integer0);
      defaultPooledObject0.getLastBorrowTime();
      SoftReference<String> softReference0 = null;
      PooledSoftReference<String> pooledSoftReference0 = new PooledSoftReference<String>((SoftReference<String>) null);
      DefaultPooledObject<PooledObject<String>> defaultPooledObject1 = new DefaultPooledObject<PooledObject<String>>(pooledSoftReference0);
      defaultPooledObject1.getIdleDuration();
      DefaultPooledObject<Object> defaultPooledObject2 = new DefaultPooledObject<Object>(defaultPooledObject1);
      defaultPooledObject2.deallocate();
      SoftReference<Object> softReference1 = new SoftReference<Object>("");
      PooledSoftReference<Object> pooledSoftReference1 = new PooledSoftReference<Object>(softReference1);
      // Undeclared exception!
      try { 
        pooledSoftReference0.compareTo((PooledObject<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.DefaultPooledObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultPooledObject<String> defaultPooledObject0 = new DefaultPooledObject<String>((String) null);
      defaultPooledObject0.getLastReturnTime();
      defaultPooledObject0.markAbandoned();
      // Undeclared exception!
      try { 
        defaultPooledObject0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer((-122));
      SoftReference<Integer> softReference0 = new SoftReference<Integer>(integer0, (ReferenceQueue<? super Integer>) null);
      PooledSoftReference<Integer> pooledSoftReference0 = new PooledSoftReference<Integer>(softReference0);
      SoftReference<PooledSoftReference<Integer>> softReference1 = new SoftReference<PooledSoftReference<Integer>>(pooledSoftReference0);
      PooledSoftReference<Integer> pooledSoftReference1 = softReference1.get();
      PooledSoftReference<PooledSoftReference<Integer>> pooledSoftReference2 = new PooledSoftReference<PooledSoftReference<Integer>>(softReference1);
      pooledSoftReference1.toString();
      DefaultPooledObject<Object> defaultPooledObject0 = new DefaultPooledObject<Object>((Object) null);
      ArrayDeque<PooledObject<Object>> arrayDeque0 = new ArrayDeque<PooledObject<Object>>();
      boolean boolean0 = defaultPooledObject0.endEvictionTest(arrayDeque0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SoftReference<String> softReference0 = new SoftReference<String>("", (ReferenceQueue<? super String>) null);
      PooledSoftReference<String> pooledSoftReference0 = new PooledSoftReference<String>(softReference0);
      long long0 = pooledSoftReference0.getLastReturnTime();
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SoftReference<String> softReference0 = new SoftReference<String>("o}W=cIol+%<ZP'ae");
      PooledSoftReference<String> pooledSoftReference0 = new PooledSoftReference<String>(softReference0);
      DefaultPooledObject<PooledSoftReference<String>> defaultPooledObject0 = new DefaultPooledObject<PooledSoftReference<String>>(pooledSoftReference0);
      defaultPooledObject0.markAbandoned();
      Integer integer0 = new Integer(406);
      DefaultPooledObject<Integer> defaultPooledObject1 = new DefaultPooledObject<Integer>(integer0);
      Duration duration0 = defaultPooledObject1.getIdleDuration();
      assertNotNull(duration0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultPooledObject<Object> defaultPooledObject0 = new DefaultPooledObject<Object>("cJ($%Jc53Q6#eM");
      ReferenceQueue<Object> referenceQueue0 = new ReferenceQueue<Object>();
      SoftReference<DefaultPooledObject<Object>> softReference0 = new SoftReference<DefaultPooledObject<Object>>(defaultPooledObject0, referenceQueue0);
      PooledSoftReference<DefaultPooledObject<Object>> pooledSoftReference0 = new PooledSoftReference<DefaultPooledObject<Object>>(softReference0);
      Duration duration0 = pooledSoftReference0.getActiveDuration();
      assertNotNull(duration0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SoftReference<Object> softReference0 = new SoftReference<Object>("uOV~$K~\"G");
      PooledSoftReference<Object> pooledSoftReference0 = new PooledSoftReference<Object>(softReference0);
      Duration duration0 = pooledSoftReference0.getIdleTime();
      assertNotNull(duration0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(2116);
      ReferenceQueue<Object> referenceQueue0 = new ReferenceQueue<Object>();
      SoftReference<Integer> softReference0 = new SoftReference<Integer>(integer0, referenceQueue0);
      PooledSoftReference<Integer> pooledSoftReference0 = new PooledSoftReference<Integer>(softReference0);
      LinkedList<PooledObject<Integer>> linkedList0 = new LinkedList<PooledObject<Integer>>();
      pooledSoftReference0.endEvictionTest(linkedList0);
      DefaultPooledObject<Integer> defaultPooledObject0 = new DefaultPooledObject<Integer>(integer0);
      int int0 = pooledSoftReference0.compareTo((PooledObject<Integer>) defaultPooledObject0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      DefaultPooledObject<Object> defaultPooledObject0 = new DefaultPooledObject<Object>(object0);
      defaultPooledObject0.getActiveTimeMillis();
      defaultPooledObject0.getIdleTime();
      DefaultPooledObject<String> defaultPooledObject1 = new DefaultPooledObject<String>((String) null);
      defaultPooledObject1.getIdleTimeMillis();
      DefaultPooledObject<DefaultPooledObject<String>> defaultPooledObject2 = new DefaultPooledObject<DefaultPooledObject<String>>(defaultPooledObject1);
      defaultPooledObject1.invalidate();
      defaultPooledObject2.invalidate();
      defaultPooledObject2.getObject();
      Instant instant0 = defaultPooledObject0.getLastReturnInstant();
      DefaultPooledObject<PooledObject<String>> defaultPooledObject3 = new DefaultPooledObject<PooledObject<String>>(defaultPooledObject1);
      Instant instant1 = defaultPooledObject3.getLastUsedInstant();
      assertNotSame(instant1, instant0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SoftReference<String> softReference0 = new SoftReference<String>("");
      softReference0.get();
      PooledSoftReference<String> pooledSoftReference0 = new PooledSoftReference<String>(softReference0);
      pooledSoftReference0.getLastUsedTime();
      DefaultPooledObject<PooledObject<String>> defaultPooledObject0 = new DefaultPooledObject<PooledObject<String>>(pooledSoftReference0);
      defaultPooledObject0.getLastUsedTime();
      ArrayDeque<PooledObject<PooledObject<String>>> arrayDeque0 = new ArrayDeque<PooledObject<PooledObject<String>>>();
      defaultPooledObject0.endEvictionTest(arrayDeque0);
      Integer integer0 = new Integer(0);
      DefaultPooledObject<Integer> defaultPooledObject1 = new DefaultPooledObject<Integer>(integer0);
      Integer integer1 = new Integer(0);
      pooledSoftReference0.invalidate();
      defaultPooledObject1.equals(integer1);
      DefaultPooledObject<DefaultPooledObject<PooledObject<String>>> defaultPooledObject2 = new DefaultPooledObject<DefaultPooledObject<PooledObject<String>>>(defaultPooledObject0);
      defaultPooledObject2.use();
      pooledSoftReference0.getLastBorrowTime();
      defaultPooledObject0.use();
      SoftReference<DefaultPooledObject<String>> softReference1 = new SoftReference<DefaultPooledObject<String>>(pooledSoftReference0);
      PooledSoftReference<DefaultPooledObject<String>> pooledSoftReference1 = new PooledSoftReference<DefaultPooledObject<String>>(softReference1);
      boolean boolean0 = pooledSoftReference1.allocate();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = new Object();
      SoftReference<Object> softReference0 = new SoftReference<Object>(object0);
      PooledSoftReference<Object> pooledSoftReference0 = new PooledSoftReference<Object>(softReference0);
      pooledSoftReference0.getBorrowedCount();
      SoftReference<String> softReference1 = new SoftReference<String>("");
      PooledSoftReference<String> pooledSoftReference1 = new PooledSoftReference<String>(softReference1);
      pooledSoftReference1.setRequireFullStackTrace(false);
      Integer integer0 = new Integer((-1197));
      DefaultPooledObject<Integer> defaultPooledObject0 = new DefaultPooledObject<Integer>(integer0);
      Duration duration0 = defaultPooledObject0.getActiveTime();
      assertNotNull(duration0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer((-1193));
      DefaultPooledObject<Integer> defaultPooledObject0 = new DefaultPooledObject<Integer>(integer0);
      defaultPooledObject0.getActiveTimeMillis();
      defaultPooledObject0.getIdleDuration();
      DefaultPooledObject<Object> defaultPooledObject1 = new DefaultPooledObject<Object>(integer0);
      ReferenceQueue<Object> referenceQueue0 = new ReferenceQueue<Object>();
      try { 
        referenceQueue0.remove((long) (-1193));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative timeout value
         //
         verifyException("java.lang.ref.ReferenceQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SoftReference<Object> softReference0 = new SoftReference<Object>((Object) null);
      PooledSoftReference<Object> pooledSoftReference0 = new PooledSoftReference<Object>(softReference0);
      pooledSoftReference0.getLastUsedTime();
      softReference0.get();
      softReference0.clear();
      softReference0.get();
      softReference0.get();
      pooledSoftReference0.getLastUsedInstant();
      pooledSoftReference0.use();
      PooledSoftReference<Integer> pooledSoftReference1 = new PooledSoftReference<Integer>((SoftReference<Integer>) null);
      pooledSoftReference1.startEvictionTest();
      pooledSoftReference1.getLastUsedInstant();
      pooledSoftReference1.markAbandoned();
      pooledSoftReference1.getCreateInstant();
      pooledSoftReference1.getCreateInstant();
      pooledSoftReference1.markReturning();
      SoftReference<String> softReference1 = new SoftReference<String>((String) null, (ReferenceQueue<? super String>) null);
      PooledSoftReference<String> pooledSoftReference2 = new PooledSoftReference<String>(softReference1);
      pooledSoftReference2.getIdleTime();
      PooledSoftReference<Integer> pooledSoftReference3 = new PooledSoftReference<Integer>((SoftReference<Integer>) null);
      pooledSoftReference3.getCreateTime();
      pooledSoftReference1.compareTo((PooledObject<Integer>) pooledSoftReference3);
      pooledSoftReference2.getLastReturnInstant();
      // Undeclared exception!
      try { 
        pooledSoftReference3.getObject();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.PooledSoftReference", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer((-9));
      DefaultPooledObject<Integer> defaultPooledObject0 = new DefaultPooledObject<Integer>(integer0);
      ReferenceQueue<Object> referenceQueue0 = new ReferenceQueue<Object>();
      defaultPooledObject0.getCreateInstant();
      SoftReference<DefaultPooledObject<Integer>> softReference0 = new SoftReference<DefaultPooledObject<Integer>>(defaultPooledObject0, referenceQueue0);
      defaultPooledObject0.invalidate();
      softReference0.enqueue();
      PooledSoftReference<DefaultPooledObject<Integer>> pooledSoftReference0 = new PooledSoftReference<DefaultPooledObject<Integer>>(softReference0);
      long long0 = pooledSoftReference0.getCreateTime();
      pooledSoftReference0.use();
      ReferenceQueue<Object> referenceQueue1 = new ReferenceQueue<Object>();
      SoftReference<String> softReference1 = new SoftReference<String>("", referenceQueue1);
      PooledSoftReference<String> pooledSoftReference1 = new PooledSoftReference<String>(softReference1);
      pooledSoftReference1.allocate();
      defaultPooledObject0.setRequireFullStackTrace(true);
      DefaultPooledObject<PooledObject<String>> defaultPooledObject1 = new DefaultPooledObject<PooledObject<String>>(pooledSoftReference1);
      pooledSoftReference1.use();
      Object object0 = defaultPooledObject1.getObject();
      softReference1.clear();
      defaultPooledObject1.getLastReturnInstant();
      SoftReference<Object> softReference2 = new SoftReference<Object>(object0, referenceQueue1);
      PooledSoftReference<Object> pooledSoftReference2 = new PooledSoftReference<Object>(softReference2);
      softReference2.get();
      LinkedList<PooledObject<Object>> linkedList0 = new LinkedList<PooledObject<Object>>();
      pooledSoftReference2.endEvictionTest(linkedList0);
      SoftReference<PooledSoftReference<String>> softReference3 = new SoftReference<PooledSoftReference<String>>(pooledSoftReference1);
      PooledSoftReference<PooledSoftReference<String>> pooledSoftReference3 = new PooledSoftReference<PooledSoftReference<String>>(softReference3);
      long long1 = pooledSoftReference3.getCreateTime();
      assertTrue(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultPooledObject<String> defaultPooledObject0 = new DefaultPooledObject<String>("t>8-^HC$j");
      ReferenceQueue<PooledObject<String>> referenceQueue0 = new ReferenceQueue<PooledObject<String>>();
      defaultPooledObject0.allocate();
      SoftReference<PooledObject<String>> softReference0 = new SoftReference<PooledObject<String>>(defaultPooledObject0, referenceQueue0);
      softReference0.enqueue();
      PooledSoftReference<PooledObject<String>> pooledSoftReference0 = new PooledSoftReference<PooledObject<String>>(softReference0);
      pooledSoftReference0.setReference(softReference0);
      referenceQueue0.remove();
      Integer integer0 = new Integer(0);
      DefaultPooledObject<Integer> defaultPooledObject1 = new DefaultPooledObject<Integer>(integer0);
      defaultPooledObject1.markReturning();
      SoftReference<Object> softReference1 = new SoftReference<Object>(referenceQueue0);
      PooledSoftReference<Object> pooledSoftReference1 = new PooledSoftReference<Object>(softReference1);
      pooledSoftReference0.getIdleDuration();
      pooledSoftReference1.toString();
      pooledSoftReference0.getIdleTime();
      long long0 = pooledSoftReference1.getLastBorrowTime();
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultPooledObject<String> defaultPooledObject0 = new DefaultPooledObject<String>("VALIDATION_RETURN_TO_HEAD");
      DefaultPooledObject<Object> defaultPooledObject1 = new DefaultPooledObject<Object>(defaultPooledObject0);
      defaultPooledObject1.deallocate();
      defaultPooledObject1.getLastReturnTime();
      SoftReference<Object> softReference0 = new SoftReference<Object>("VALIDATION_RETURN_TO_HEAD");
      PooledSoftReference<Object> pooledSoftReference0 = new PooledSoftReference<Object>(softReference0);
      DefaultPooledObject<PooledSoftReference<Object>> defaultPooledObject2 = new DefaultPooledObject<PooledSoftReference<Object>>(pooledSoftReference0);
      defaultPooledObject2.getState();
      defaultPooledObject2.markAbandoned();
      Integer integer0 = new Integer(1257);
      defaultPooledObject1.compareTo((PooledObject<Object>) pooledSoftReference0);
      SoftReference<Integer> softReference1 = new SoftReference<Integer>(integer0);
      defaultPooledObject0.toString();
      softReference0.get();
      softReference1.clear();
      PooledSoftReference<Integer> pooledSoftReference1 = new PooledSoftReference<Integer>(softReference1);
      DefaultPooledObject<PooledObject<Integer>> defaultPooledObject3 = new DefaultPooledObject<PooledObject<Integer>>(pooledSoftReference1);
      Instant instant0 = pooledSoftReference0.getLastBorrowInstant();
      defaultPooledObject0.markAbandoned();
      defaultPooledObject3.allocate();
      defaultPooledObject1.toString();
      defaultPooledObject2.getLastReturnInstant();
      pooledSoftReference1.setLogAbandoned(false);
      defaultPooledObject0.allocate();
      SoftReference<DefaultPooledObject<Object>> softReference2 = new SoftReference<DefaultPooledObject<Object>>(defaultPooledObject1);
      PooledSoftReference<DefaultPooledObject<Object>> pooledSoftReference2 = new PooledSoftReference<DefaultPooledObject<Object>>(softReference2);
      LinkedList<PooledObject<DefaultPooledObject<Object>>> linkedList0 = new LinkedList<PooledObject<DefaultPooledObject<Object>>>();
      pooledSoftReference2.endEvictionTest(linkedList0);
      Instant instant1 = pooledSoftReference2.getCreateInstant();
      assertNotSame(instant1, instant0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = new Integer(823);
      DefaultPooledObject<Integer> defaultPooledObject0 = new DefaultPooledObject<Integer>(integer0);
      defaultPooledObject0.allocate();
      SoftReference<Object> softReference0 = new SoftReference<Object>(defaultPooledObject0);
      PooledSoftReference<Object> pooledSoftReference0 = new PooledSoftReference<Object>(softReference0);
      pooledSoftReference0.toString();
      softReference0.get();
      ReferenceQueue<Object> referenceQueue0 = new ReferenceQueue<Object>();
      SoftReference<DefaultPooledObject<Object>> softReference1 = new SoftReference<DefaultPooledObject<Object>>(pooledSoftReference0, referenceQueue0);
      defaultPooledObject0.setRequireFullStackTrace(false);
      PooledSoftReference<DefaultPooledObject<Object>> pooledSoftReference1 = new PooledSoftReference<DefaultPooledObject<Object>>(softReference1);
      pooledSoftReference1.deallocate();
      PooledObject<String> pooledObject0 = (PooledObject<String>) mock(PooledObject.class, CALLS_REAL_METHODS);
      SoftReference<PooledObject<String>> softReference2 = new SoftReference<PooledObject<String>>(pooledObject0);
      PooledSoftReference<PooledObject<String>> pooledSoftReference2 = new PooledSoftReference<PooledObject<String>>(softReference2);
      DefaultPooledObject<DefaultPooledObject<PooledObject<String>>> defaultPooledObject1 = new DefaultPooledObject<DefaultPooledObject<PooledObject<String>>>(pooledSoftReference2);
      defaultPooledObject1.markReturning();
      pooledSoftReference2.toString();
      defaultPooledObject0.getLastReturnTime();
      pooledSoftReference0.getLastBorrowInstant();
      defaultPooledObject0.printStackTrace((PrintWriter) null);
      assertEquals(PooledObjectState.ALLOCATED, defaultPooledObject0.getState());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultPooledObject<String> defaultPooledObject0 = new DefaultPooledObject<String>("");
      defaultPooledObject0.getLastReturnInstant();
      Integer integer0 = new Integer(0);
      SoftReference<Integer> softReference0 = new SoftReference<Integer>(integer0);
      defaultPooledObject0.setRequireFullStackTrace(false);
      PooledSoftReference<Integer> pooledSoftReference0 = new PooledSoftReference<Integer>(softReference0);
      DefaultPooledObject<DefaultPooledObject<Integer>> defaultPooledObject1 = new DefaultPooledObject<DefaultPooledObject<Integer>>(pooledSoftReference0);
      defaultPooledObject1.getCreateInstant();
      defaultPooledObject0.getLastBorrowInstant();
      defaultPooledObject0.setRequireFullStackTrace(false);
      PooledSoftReference<Integer> pooledSoftReference1 = new PooledSoftReference<Integer>(softReference0);
      DefaultPooledObject<PooledSoftReference<Integer>> defaultPooledObject2 = new DefaultPooledObject<PooledSoftReference<Integer>>(pooledSoftReference1);
      defaultPooledObject2.getIdleDuration();
      pooledSoftReference1.getLastUsedInstant();
      defaultPooledObject2.allocate();
      pooledSoftReference0.invalidate();
      pooledSoftReference0.setLogAbandoned(false);
      Object object0 = new Object();
      SoftReference<Object> softReference1 = new SoftReference<Object>(object0, (ReferenceQueue<? super Object>) null);
      PooledSoftReference<Object> pooledSoftReference2 = new PooledSoftReference<Object>(softReference1);
      DefaultPooledObject<PooledSoftReference<Object>> defaultPooledObject3 = new DefaultPooledObject<PooledSoftReference<Object>>(pooledSoftReference2);
      defaultPooledObject3.getLastUsedInstant();
      pooledSoftReference1.getIdleDuration();
      defaultPooledObject0.getActiveTimeMillis();
      pooledSoftReference2.markAbandoned();
      pooledSoftReference2.getLastBorrowInstant();
      pooledSoftReference0.invalidate();
      DefaultPooledObject<PooledObject<String>> defaultPooledObject4 = new DefaultPooledObject<PooledObject<String>>(defaultPooledObject0);
      defaultPooledObject4.getState();
      SoftReference<PooledObject<String>> softReference2 = new SoftReference<PooledObject<String>>(defaultPooledObject0, (ReferenceQueue<? super PooledObject<String>>) null);
      PooledSoftReference<PooledObject<String>> pooledSoftReference3 = new PooledSoftReference<PooledObject<String>>(softReference2);
      pooledSoftReference3.setReference(softReference2);
      assertEquals(0L, pooledSoftReference3.getBorrowedCount());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultPooledObject<String> defaultPooledObject0 = new DefaultPooledObject<String>("Y4jeP&8`4~(7!g~X");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Integer integer0 = new Integer(236);
      ReferenceQueue<Integer> referenceQueue0 = new ReferenceQueue<Integer>();
      referenceQueue0.remove((long) 236);
      SoftReference<Integer> softReference0 = new SoftReference<Integer>(integer0, referenceQueue0);
      referenceQueue0.remove((long) 236);
      PooledSoftReference<Integer> pooledSoftReference0 = new PooledSoftReference<Integer>(softReference0);
      pooledSoftReference0.invalidate();
      pooledSoftReference0.startEvictionTest();
      DefaultPooledObject<String> defaultPooledObject0 = new DefaultPooledObject<String>("");
      SoftReference<PooledObject<String>> softReference1 = new SoftReference<PooledObject<String>>(defaultPooledObject0);
      PooledSoftReference<PooledObject<String>> pooledSoftReference1 = new PooledSoftReference<PooledObject<String>>(softReference1);
      pooledSoftReference1.toString();
      DefaultPooledObject<Object> defaultPooledObject1 = new DefaultPooledObject<Object>(softReference1);
      defaultPooledObject1.markReturning();
      DefaultPooledObject<PooledObject<Object>> defaultPooledObject2 = new DefaultPooledObject<PooledObject<Object>>(defaultPooledObject1);
      defaultPooledObject2.markAbandoned();
      DefaultPooledObject<Object> defaultPooledObject3 = new DefaultPooledObject<Object>(softReference0);
      SoftReference<DefaultPooledObject<Object>> softReference2 = new SoftReference<DefaultPooledObject<Object>>(defaultPooledObject3);
      PooledSoftReference<DefaultPooledObject<Object>> pooledSoftReference2 = new PooledSoftReference<DefaultPooledObject<Object>>(softReference2);
      Instant instant0 = pooledSoftReference2.getLastUsedInstant();
      assertNotNull(instant0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultPooledObject<String> defaultPooledObject0 = new DefaultPooledObject<String>("2");
      defaultPooledObject0.getLastUsedInstant();
      ReferenceQueue<PooledObject<String>> referenceQueue0 = new ReferenceQueue<PooledObject<String>>();
      SoftReference<PooledObject<String>> softReference0 = new SoftReference<PooledObject<String>>(defaultPooledObject0, referenceQueue0);
      PooledSoftReference<PooledObject<String>> pooledSoftReference0 = new PooledSoftReference<PooledObject<String>>(softReference0);
      PooledSoftReference<PooledObject<String>> pooledSoftReference1 = new PooledSoftReference<PooledObject<String>>(softReference0);
      int int0 = pooledSoftReference0.compareTo((PooledObject<PooledObject<String>>) pooledSoftReference1);
      assertEquals((-1), int0);
  }
}
