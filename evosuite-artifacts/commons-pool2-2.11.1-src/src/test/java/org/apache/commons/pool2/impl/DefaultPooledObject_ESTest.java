/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 18:57:48 GMT 2022
 */

package org.apache.commons.pool2.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.lang.ref.ReferenceQueue;
import java.lang.ref.SoftReference;
import java.time.Duration;
import java.time.Instant;
import java.util.LinkedList;
import org.apache.commons.pool2.PooledObject;
import org.apache.commons.pool2.PooledObjectState;
import org.apache.commons.pool2.impl.DefaultPooledObject;
import org.apache.commons.pool2.impl.PooledSoftReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultPooledObject_ESTest extends DefaultPooledObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultPooledObject<Object> defaultPooledObject0 = new DefaultPooledObject<Object>((Object) null);
      Object object0 = defaultPooledObject0.getObject();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      DefaultPooledObject<String> defaultPooledObject0 = new DefaultPooledObject<String>("P|BXTS^O}1hp:+g/");
      long long0 = defaultPooledObject0.getLastUsedTime();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      System.setCurrentTimeMillis((-10L));
      DefaultPooledObject<String> defaultPooledObject0 = new DefaultPooledObject<String>("P|BXTS^O}1hp:+g/");
      long long0 = defaultPooledObject0.getLastUsedTime();
      assertEquals((-10L), long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      DefaultPooledObject<String> defaultPooledObject0 = new DefaultPooledObject<String>("P|BXTS^O}1hp:+g/");
      long long0 = defaultPooledObject0.getLastReturnTime();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      System.setCurrentTimeMillis((-10L));
      DefaultPooledObject<String> defaultPooledObject0 = new DefaultPooledObject<String>("P|BXTS^O}1hp:+g/");
      long long0 = defaultPooledObject0.getLastReturnTime();
      assertEquals((-10L), long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      SoftReference<Object> softReference0 = new SoftReference<Object>("h=*&4]=q&hzMMp");
      PooledSoftReference<Object> pooledSoftReference0 = new PooledSoftReference<Object>(softReference0);
      DefaultPooledObject<DefaultPooledObject<Object>> defaultPooledObject0 = new DefaultPooledObject<DefaultPooledObject<Object>>(pooledSoftReference0);
      long long0 = defaultPooledObject0.getLastBorrowTime();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      System.setCurrentTimeMillis((-769L));
      DefaultPooledObject<String> defaultPooledObject0 = new DefaultPooledObject<String>("[n");
      long long0 = defaultPooledObject0.getLastBorrowTime();
      assertEquals((-769L), long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      SoftReference<Object> softReference0 = new SoftReference<Object>("h=*&4]=q&hzMMp");
      PooledSoftReference<Object> pooledSoftReference0 = new PooledSoftReference<Object>(softReference0);
      DefaultPooledObject<DefaultPooledObject<Object>> defaultPooledObject0 = new DefaultPooledObject<DefaultPooledObject<Object>>(pooledSoftReference0);
      long long0 = defaultPooledObject0.getCreateTime();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      System.setCurrentTimeMillis((-769L));
      DefaultPooledObject<String> defaultPooledObject0 = new DefaultPooledObject<String>("[n");
      long long0 = defaultPooledObject0.getCreateTime();
      assertEquals((-769L), long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(0);
      SoftReference<Integer> softReference0 = new SoftReference<Integer>(integer0);
      ReferenceQueue<Object> referenceQueue0 = new ReferenceQueue<Object>();
      SoftReference<Object> softReference1 = new SoftReference<Object>(softReference0, referenceQueue0);
      PooledSoftReference<Object> pooledSoftReference0 = new PooledSoftReference<Object>(softReference1);
      System.setCurrentTimeMillis(0L);
      long long0 = pooledSoftReference0.getActiveTimeMillis();
      assertEquals((-1392409281320L), long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultPooledObject<String> defaultPooledObject0 = new DefaultPooledObject<String>("");
      DefaultPooledObject<String> defaultPooledObject1 = new DefaultPooledObject<String>("");
      int int0 = defaultPooledObject0.compareTo((PooledObject<String>) defaultPooledObject1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      SoftReference<Object> softReference0 = new SoftReference<Object>(object0);
      softReference0.clear();
      PooledSoftReference<Object> pooledSoftReference0 = new PooledSoftReference<Object>(softReference0);
      // Undeclared exception!
      try { 
        pooledSoftReference0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PooledSoftReference<PooledSoftReference<Object>> pooledSoftReference0 = new PooledSoftReference<PooledSoftReference<Object>>((SoftReference<PooledSoftReference<Object>>) null);
      // Undeclared exception!
      try { 
        pooledSoftReference0.getObject();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.PooledSoftReference", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(1122);
      SoftReference<Integer> softReference0 = new SoftReference<Integer>(integer0);
      PooledSoftReference<Integer> pooledSoftReference0 = new PooledSoftReference<Integer>(softReference0);
      // Undeclared exception!
      try { 
        pooledSoftReference0.compareTo((PooledObject<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.DefaultPooledObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultPooledObject<DefaultPooledObject<Integer>> defaultPooledObject0 = new DefaultPooledObject<DefaultPooledObject<Integer>>((DefaultPooledObject<Integer>) null);
      SoftReference<Object> softReference0 = new SoftReference<Object>(defaultPooledObject0);
      PooledSoftReference<Object> pooledSoftReference0 = new PooledSoftReference<Object>(softReference0);
      Instant instant0 = pooledSoftReference0.getLastUsedInstant();
      assertNotNull(instant0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer(2206);
      SoftReference<Integer> softReference0 = new SoftReference<Integer>(integer0);
      PooledSoftReference<Integer> pooledSoftReference0 = new PooledSoftReference<Integer>(softReference0);
      Duration duration0 = pooledSoftReference0.getIdleDuration();
      assertNotNull(duration0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SoftReference<PooledObject<Integer>> softReference0 = new SoftReference<PooledObject<Integer>>((PooledObject<Integer>) null);
      PooledSoftReference<PooledObject<Integer>> pooledSoftReference0 = new PooledSoftReference<PooledObject<Integer>>(softReference0);
      DefaultPooledObject<PooledObject<PooledObject<Integer>>> defaultPooledObject0 = new DefaultPooledObject<PooledObject<PooledObject<Integer>>>(pooledSoftReference0);
      DefaultPooledObject<Object> defaultPooledObject1 = new DefaultPooledObject<Object>(defaultPooledObject0);
      Instant instant0 = defaultPooledObject1.getLastReturnInstant();
      assertNotNull(instant0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultPooledObject<String> defaultPooledObject0 = new DefaultPooledObject<String>("xsD_+B$Vocd3 C");
      defaultPooledObject0.markAbandoned();
      boolean boolean0 = defaultPooledObject0.startEvictionTest();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SoftReference<Integer> softReference0 = new SoftReference<Integer>((Integer) null);
      PooledSoftReference<Integer> pooledSoftReference0 = new PooledSoftReference<Integer>(softReference0);
      DefaultPooledObject<Object> defaultPooledObject0 = new DefaultPooledObject<Object>(pooledSoftReference0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      defaultPooledObject0.printStackTrace(mockPrintWriter0);
      assertEquals(0L, defaultPooledObject0.getBorrowedCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultPooledObject<Integer> defaultPooledObject0 = new DefaultPooledObject<Integer>((Integer) null);
      DefaultPooledObject<Object> defaultPooledObject1 = new DefaultPooledObject<Object>(defaultPooledObject0);
      System.setCurrentTimeMillis((-769L));
      Duration duration0 = defaultPooledObject1.getIdleDuration();
      assertNotNull(duration0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultPooledObject<String> defaultPooledObject0 = new DefaultPooledObject<String>("org.apache.commons.pool2.impl.DefaultPooledObject");
      LinkedList<PooledObject<String>> linkedList0 = new LinkedList<PooledObject<String>>();
      boolean boolean0 = defaultPooledObject0.endEvictionTest(linkedList0);
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SoftReference<PooledObject<Integer>> softReference0 = new SoftReference<PooledObject<Integer>>((PooledObject<Integer>) null);
      PooledSoftReference<PooledObject<Integer>> pooledSoftReference0 = new PooledSoftReference<PooledObject<Integer>>(softReference0);
      DefaultPooledObject<PooledObject<PooledObject<Integer>>> defaultPooledObject0 = new DefaultPooledObject<PooledObject<PooledObject<Integer>>>(pooledSoftReference0);
      DefaultPooledObject<Object> defaultPooledObject1 = new DefaultPooledObject<Object>(defaultPooledObject0);
      boolean boolean0 = defaultPooledObject1.deallocate();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ReferenceQueue<Object> referenceQueue0 = new ReferenceQueue<Object>();
      SoftReference<Integer> softReference0 = new SoftReference<Integer>(integer0, referenceQueue0);
      PooledSoftReference<Integer> pooledSoftReference0 = new PooledSoftReference<Integer>(softReference0);
      DefaultPooledObject<PooledObject<Integer>> defaultPooledObject0 = new DefaultPooledObject<PooledObject<Integer>>(pooledSoftReference0);
      defaultPooledObject0.allocate();
      boolean boolean0 = defaultPooledObject0.deallocate();
      assertEquals(1L, defaultPooledObject0.getBorrowedCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Integer integer0 = new Integer((-671));
      DefaultPooledObject<Integer> defaultPooledObject0 = new DefaultPooledObject<Integer>(integer0);
      System.setCurrentTimeMillis(0L);
      DefaultPooledObject<Integer> defaultPooledObject1 = new DefaultPooledObject<Integer>(integer0);
      int int0 = defaultPooledObject0.compareTo((PooledObject<Integer>) defaultPooledObject1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SoftReference<Integer> softReference0 = new SoftReference<Integer>((Integer) null);
      PooledSoftReference<Integer> pooledSoftReference0 = new PooledSoftReference<Integer>(softReference0);
      pooledSoftReference0.startEvictionTest();
      boolean boolean0 = pooledSoftReference0.allocate();
      assertEquals(PooledObjectState.EVICTION_RETURN_TO_HEAD, pooledSoftReference0.getState());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SoftReference<Object> softReference0 = new SoftReference<Object>("org.apache.commons.pool2.impl.DefaultPooledObject");
      PooledSoftReference<Object> pooledSoftReference0 = new PooledSoftReference<Object>(softReference0);
      pooledSoftReference0.setLogAbandoned(true);
      boolean boolean0 = pooledSoftReference0.allocate();
      assertEquals(PooledObjectState.ALLOCATED, pooledSoftReference0.getState());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultPooledObject<Integer> defaultPooledObject0 = new DefaultPooledObject<Integer>((Integer) null);
      defaultPooledObject0.allocate();
      long long0 = defaultPooledObject0.getBorrowedCount();
      assertEquals(PooledObjectState.ALLOCATED, defaultPooledObject0.getState());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultPooledObject<String> defaultPooledObject0 = new DefaultPooledObject<String>("xsD_+B$Vocd3 C");
      defaultPooledObject0.markAbandoned();
      boolean boolean0 = defaultPooledObject0.allocate();
      assertEquals(PooledObjectState.ABANDONED, defaultPooledObject0.getState());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultPooledObject<Integer> defaultPooledObject0 = new DefaultPooledObject<Integer>((Integer) null);
      SoftReference<PooledObject<Integer>> softReference0 = new SoftReference<PooledObject<Integer>>(defaultPooledObject0);
      PooledSoftReference<PooledObject<Integer>> pooledSoftReference0 = new PooledSoftReference<PooledObject<Integer>>(softReference0);
      DefaultPooledObject<PooledSoftReference<PooledObject<Integer>>> defaultPooledObject1 = new DefaultPooledObject<PooledSoftReference<PooledObject<Integer>>>(pooledSoftReference0);
      long long0 = defaultPooledObject1.getLastReturnTime();
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultPooledObject<String> defaultPooledObject0 = new DefaultPooledObject<String>("");
      String string0 = defaultPooledObject0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultPooledObject<Integer> defaultPooledObject0 = new DefaultPooledObject<Integer>((Integer) null);
      long long0 = defaultPooledObject0.getBorrowedCount();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ReferenceQueue<Object> referenceQueue0 = new ReferenceQueue<Object>();
      Object object0 = new Object();
      DefaultPooledObject<Object> defaultPooledObject0 = new DefaultPooledObject<Object>(object0);
      SoftReference<DefaultPooledObject<Object>> softReference0 = new SoftReference<DefaultPooledObject<Object>>(defaultPooledObject0, referenceQueue0);
      PooledSoftReference<DefaultPooledObject<Object>> pooledSoftReference0 = new PooledSoftReference<DefaultPooledObject<Object>>(softReference0);
      long long0 = pooledSoftReference0.getActiveTimeMillis();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PooledSoftReference<PooledObject<Object>> pooledSoftReference0 = new PooledSoftReference<PooledObject<Object>>((SoftReference<PooledObject<Object>>) null);
      long long0 = pooledSoftReference0.getLastUsedTime();
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultPooledObject<Integer> defaultPooledObject0 = new DefaultPooledObject<Integer>((Integer) null);
      Duration duration0 = defaultPooledObject0.getIdleTime();
      assertNotNull(duration0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultPooledObject<Integer> defaultPooledObject0 = new DefaultPooledObject<Integer>((Integer) null);
      defaultPooledObject0.setRequireFullStackTrace(false);
      assertEquals(PooledObjectState.IDLE, defaultPooledObject0.getState());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultPooledObject<Integer> defaultPooledObject0 = new DefaultPooledObject<Integer>((Integer) null);
      SoftReference<PooledObject<Integer>> softReference0 = new SoftReference<PooledObject<Integer>>(defaultPooledObject0);
      PooledSoftReference<PooledObject<Integer>> pooledSoftReference0 = new PooledSoftReference<PooledObject<Integer>>(softReference0);
      DefaultPooledObject<PooledSoftReference<PooledObject<Integer>>> defaultPooledObject1 = new DefaultPooledObject<PooledSoftReference<PooledObject<Integer>>>(pooledSoftReference0);
      defaultPooledObject1.use();
      assertEquals(0L, defaultPooledObject1.getBorrowedCount());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultPooledObject<Integer> defaultPooledObject0 = new DefaultPooledObject<Integer>((Integer) null);
      DefaultPooledObject<Object> defaultPooledObject1 = new DefaultPooledObject<Object>(defaultPooledObject0);
      PooledObjectState pooledObjectState0 = defaultPooledObject1.getState();
      assertEquals(PooledObjectState.IDLE, pooledObjectState0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SoftReference<Integer> softReference0 = new SoftReference<Integer>((Integer) null);
      PooledSoftReference<Integer> pooledSoftReference0 = new PooledSoftReference<Integer>(softReference0);
      DefaultPooledObject<PooledObject<Integer>> defaultPooledObject0 = new DefaultPooledObject<PooledObject<Integer>>(pooledSoftReference0);
      PooledObject<Integer> pooledObject0 = defaultPooledObject0.getObject();
      assertEquals(PooledObjectState.IDLE, pooledObject0.getState());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultPooledObject<Integer> defaultPooledObject0 = new DefaultPooledObject<Integer>((Integer) null);
      DefaultPooledObject<Object> defaultPooledObject1 = new DefaultPooledObject<Object>(defaultPooledObject0);
      DefaultPooledObject<DefaultPooledObject<Object>> defaultPooledObject2 = new DefaultPooledObject<DefaultPooledObject<Object>>(defaultPooledObject1);
      long long0 = defaultPooledObject2.getLastBorrowTime();
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultPooledObject<String> defaultPooledObject0 = new DefaultPooledObject<String>("");
      Instant instant0 = defaultPooledObject0.getLastBorrowInstant();
      assertNotNull(instant0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultPooledObject<Object> defaultPooledObject0 = new DefaultPooledObject<Object>((Object) null);
      long long0 = defaultPooledObject0.getIdleTimeMillis();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultPooledObject<Integer> defaultPooledObject0 = new DefaultPooledObject<Integer>((Integer) null);
      DefaultPooledObject<Object> defaultPooledObject1 = new DefaultPooledObject<Object>(defaultPooledObject0);
      DefaultPooledObject<DefaultPooledObject<Object>> defaultPooledObject2 = new DefaultPooledObject<DefaultPooledObject<Object>>(defaultPooledObject1);
      Instant instant0 = defaultPooledObject2.getCreateInstant();
      assertNotNull(instant0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PooledSoftReference<String> pooledSoftReference0 = new PooledSoftReference<String>((SoftReference<String>) null);
      int int0 = pooledSoftReference0.compareTo((PooledObject<String>) pooledSoftReference0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultPooledObject<Integer> defaultPooledObject0 = new DefaultPooledObject<Integer>((Integer) null);
      DefaultPooledObject<Object> defaultPooledObject1 = new DefaultPooledObject<Object>(defaultPooledObject0);
      long long0 = defaultPooledObject1.getCreateTime();
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ReferenceQueue<Object> referenceQueue0 = new ReferenceQueue<Object>();
      SoftReference<PooledSoftReference<String>> softReference0 = new SoftReference<PooledSoftReference<String>>((PooledSoftReference<String>) null, referenceQueue0);
      PooledSoftReference<PooledSoftReference<String>> pooledSoftReference0 = new PooledSoftReference<PooledSoftReference<String>>(softReference0);
      pooledSoftReference0.markReturning();
      assertEquals(PooledObjectState.RETURNING, pooledSoftReference0.getState());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PooledSoftReference<String> pooledSoftReference0 = new PooledSoftReference<String>((SoftReference<String>) null);
      pooledSoftReference0.invalidate();
      assertEquals(PooledObjectState.INVALID, pooledSoftReference0.getState());
  }
}
