/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 19:09:30 GMT 2022
 */

package org.apache.commons.pool2.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.ref.ReferenceQueue;
import java.lang.ref.SoftReference;
import org.apache.commons.pool2.PooledObject;
import org.apache.commons.pool2.impl.DefaultPooledObject;
import org.apache.commons.pool2.impl.DefaultPooledObjectInfo;
import org.apache.commons.pool2.impl.PooledSoftReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultPooledObjectInfo_ESTest extends DefaultPooledObjectInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer((-521));
      SoftReference<Object> softReference0 = new SoftReference<Object>(integer0, (ReferenceQueue<? super Object>) null);
      PooledSoftReference<Object> pooledSoftReference0 = new PooledSoftReference<Object>(softReference0);
      DefaultPooledObjectInfo defaultPooledObjectInfo0 = new DefaultPooledObjectInfo(pooledSoftReference0);
      String string0 = defaultPooledObjectInfo0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultPooledObject<String> defaultPooledObject0 = new DefaultPooledObject<String>("a-A");
      defaultPooledObject0.setRequireFullStackTrace(false);
      DefaultPooledObjectInfo defaultPooledObjectInfo0 = new DefaultPooledObjectInfo(defaultPooledObject0);
      defaultPooledObject0.setLogAbandoned(true);
      defaultPooledObject0.allocate();
      String string0 = defaultPooledObjectInfo0.getLastBorrowTrace();
      //  // Unstable assertion: assertEquals("Pooled object created 2014-02-14 20:21:21 +0000 by the following code has not been returned to the pool:\nclass org.apache.commons.pool2.impl.SecurityManagerCallStack$PrivateSecurityManager\nclass org.apache.commons.pool2.impl.SecurityManagerCallStack$PrivateSecurityManager\nclass org.apache.commons.pool2.impl.SecurityManagerCallStack\nclass org.apache.commons.pool2.impl.DefaultPooledObject\nclass org.evosuite.testcase.statements.MethodStatement$1\nclass org.evosuite.testcase.statements.AbstractStatement\nclass org.evosuite.testcase.statements.MethodStatement\nclass org.evosuite.testcase.execution.TestRunnable\nclass org.evosuite.testcase.execution.TestRunnable\nclass org.evosuite.testcase.execution.TestRunnable\nclass java.util.concurrent.FutureTask\nclass java.util.concurrent.ThreadPoolExecutor\nclass java.util.concurrent.ThreadPoolExecutor$Worker\nclass java.lang.Thread\n", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      ReferenceQueue<Object> referenceQueue0 = new ReferenceQueue<Object>();
      SoftReference<Object> softReference0 = new SoftReference<Object>(object0, referenceQueue0);
      PooledSoftReference<Object> pooledSoftReference0 = new PooledSoftReference<Object>(softReference0);
      DefaultPooledObjectInfo defaultPooledObjectInfo0 = new DefaultPooledObjectInfo(pooledSoftReference0);
      pooledSoftReference0.allocate();
      long long0 = defaultPooledObjectInfo0.getBorrowedCount();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(1594);
      SoftReference<Object> softReference0 = new SoftReference<Object>(integer0);
      PooledSoftReference<Object> pooledSoftReference0 = new PooledSoftReference<Object>(softReference0);
      DefaultPooledObjectInfo defaultPooledObjectInfo0 = new DefaultPooledObjectInfo(pooledSoftReference0);
      softReference0.clear();
      // Undeclared exception!
      try { 
        defaultPooledObjectInfo0.getPooledObjectType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.DefaultPooledObjectInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ReferenceQueue<Object> referenceQueue0 = new ReferenceQueue<Object>();
      SoftReference<String> softReference0 = new SoftReference<String>("#1X/PX3< E)53.`5OQ", referenceQueue0);
      softReference0.clear();
      PooledSoftReference<String> pooledSoftReference0 = new PooledSoftReference<String>(softReference0);
      DefaultPooledObjectInfo defaultPooledObjectInfo0 = new DefaultPooledObjectInfo(pooledSoftReference0);
      // Undeclared exception!
      try { 
        defaultPooledObjectInfo0.getPooledObjectToString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultPooledObjectInfo defaultPooledObjectInfo0 = new DefaultPooledObjectInfo((PooledObject<?>) null);
      // Undeclared exception!
      try { 
        defaultPooledObjectInfo0.getLastReturnTimeFormatted();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.DefaultPooledObjectInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultPooledObjectInfo defaultPooledObjectInfo0 = new DefaultPooledObjectInfo((PooledObject<?>) null);
      // Undeclared exception!
      try { 
        defaultPooledObjectInfo0.getLastReturnTime();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.DefaultPooledObjectInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultPooledObjectInfo defaultPooledObjectInfo0 = new DefaultPooledObjectInfo((PooledObject<?>) null);
      // Undeclared exception!
      try { 
        defaultPooledObjectInfo0.getLastBorrowTrace();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.DefaultPooledObjectInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultPooledObjectInfo defaultPooledObjectInfo0 = new DefaultPooledObjectInfo((PooledObject<?>) null);
      // Undeclared exception!
      try { 
        defaultPooledObjectInfo0.getLastBorrowTimeFormatted();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.DefaultPooledObjectInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultPooledObjectInfo defaultPooledObjectInfo0 = new DefaultPooledObjectInfo((PooledObject<?>) null);
      // Undeclared exception!
      try { 
        defaultPooledObjectInfo0.getLastBorrowTime();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.DefaultPooledObjectInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultPooledObjectInfo defaultPooledObjectInfo0 = new DefaultPooledObjectInfo((PooledObject<?>) null);
      // Undeclared exception!
      try { 
        defaultPooledObjectInfo0.getCreateTimeFormatted();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.DefaultPooledObjectInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultPooledObjectInfo defaultPooledObjectInfo0 = new DefaultPooledObjectInfo((PooledObject<?>) null);
      // Undeclared exception!
      try { 
        defaultPooledObjectInfo0.getCreateTime();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.DefaultPooledObjectInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer((-521));
      SoftReference<Object> softReference0 = new SoftReference<Object>(integer0, (ReferenceQueue<? super Object>) null);
      PooledSoftReference<Object> pooledSoftReference0 = new PooledSoftReference<Object>(softReference0);
      DefaultPooledObjectInfo defaultPooledObjectInfo0 = new DefaultPooledObjectInfo(pooledSoftReference0);
      long long0 = defaultPooledObjectInfo0.getCreateTime();
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer((-521));
      SoftReference<Object> softReference0 = new SoftReference<Object>(integer0, (ReferenceQueue<? super Object>) null);
      PooledSoftReference<Object> pooledSoftReference0 = new PooledSoftReference<Object>(softReference0);
      DefaultPooledObjectInfo defaultPooledObjectInfo0 = new DefaultPooledObjectInfo(pooledSoftReference0);
      long long0 = defaultPooledObjectInfo0.getLastReturnTime();
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultPooledObject<String> defaultPooledObject0 = new DefaultPooledObject<String>("a-A");
      DefaultPooledObjectInfo defaultPooledObjectInfo0 = new DefaultPooledObjectInfo(defaultPooledObject0);
      long long0 = defaultPooledObjectInfo0.getLastBorrowTime();
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultPooledObject<String> defaultPooledObject0 = new DefaultPooledObject<String>("a-A");
      DefaultPooledObjectInfo defaultPooledObjectInfo0 = new DefaultPooledObjectInfo(defaultPooledObject0);
      String string0 = defaultPooledObjectInfo0.getPooledObjectType();
      assertEquals("java.lang.String", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultPooledObject<String> defaultPooledObject0 = new DefaultPooledObject<String>("a-A");
      DefaultPooledObjectInfo defaultPooledObjectInfo0 = new DefaultPooledObjectInfo(defaultPooledObject0);
      String string0 = defaultPooledObjectInfo0.getLastBorrowTrace();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultPooledObject<String> defaultPooledObject0 = new DefaultPooledObject<String>("a-A");
      DefaultPooledObjectInfo defaultPooledObjectInfo0 = new DefaultPooledObjectInfo(defaultPooledObject0);
      String string0 = defaultPooledObjectInfo0.getCreateTimeFormatted();
      assertEquals("2014-02-14 20:21:21 +0000", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultPooledObject<String> defaultPooledObject0 = new DefaultPooledObject<String>("=d<_");
      DefaultPooledObjectInfo defaultPooledObjectInfo0 = new DefaultPooledObjectInfo(defaultPooledObject0);
      long long0 = defaultPooledObjectInfo0.getBorrowedCount();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultPooledObject<String> defaultPooledObject0 = new DefaultPooledObject<String>("=d<_");
      DefaultPooledObjectInfo defaultPooledObjectInfo0 = new DefaultPooledObjectInfo(defaultPooledObject0);
      String string0 = defaultPooledObjectInfo0.getPooledObjectToString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultPooledObject<Object> defaultPooledObject0 = new DefaultPooledObject<Object>((Object) null);
      DefaultPooledObjectInfo defaultPooledObjectInfo0 = new DefaultPooledObjectInfo(defaultPooledObject0);
      String string0 = defaultPooledObjectInfo0.getLastReturnTimeFormatted();
      assertEquals("2014-02-14 20:21:21 +0000", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultPooledObject<Object> defaultPooledObject0 = new DefaultPooledObject<Object>((Object) null);
      DefaultPooledObjectInfo defaultPooledObjectInfo0 = new DefaultPooledObjectInfo(defaultPooledObject0);
      // Undeclared exception!
      try { 
        defaultPooledObjectInfo0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultPooledObject<Object> defaultPooledObject0 = new DefaultPooledObject<Object>((Object) null);
      DefaultPooledObjectInfo defaultPooledObjectInfo0 = new DefaultPooledObjectInfo(defaultPooledObject0);
      String string0 = defaultPooledObjectInfo0.getLastBorrowTimeFormatted();
      assertEquals("2014-02-14 20:21:21 +0000", string0);
  }
}
