/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Tue Oct 11 05:37:13 GMT 2022
 */

package org.apache.commons.vfs2.libcheck;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

@EvoSuiteClassExclude
public class SftpCheck_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.vfs2.libcheck.SftpCheck"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
    java.lang.System.setProperty("user.country", "US"); 
    java.lang.System.setProperty("user.dir", "/home/ISSTA_USER/Documents/toga-evaluation/toga-eval-issta-2023/artifacts/commons-vfs-2.9.0/commons-vfs2-examples"); 
    java.lang.System.setProperty("user.home", "/home/ISSTA_USER"); 
    java.lang.System.setProperty("user.language", "en"); 
    java.lang.System.setProperty("user.name", "ISSTA_USER"); 
    java.lang.System.setProperty("user.timezone", "America/New_York"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(SftpCheck_ESTest_scaffolding.class.getClassLoader() ,
      "com.jcraft.jsch.JSchPartialAuthException",
      "com.jcraft.jsch.Channel",
      "com.jcraft.jsch.ChannelSftp$LsEntry",
      "com.jcraft.jsch.ChannelSftp$LsEntrySelector",
      "com.jcraft.jsch.SocketFactory",
      "com.jcraft.jsch.ChannelForwardedTCPIP$Config",
      "com.jcraft.jsch.SftpProgressMonitor",
      "com.jcraft.jsch.SftpException",
      "com.jcraft.jsch.Random",
      "com.jcraft.jsch.Channel$PassiveOutputStream",
      "com.jcraft.jsch.ChannelSftp$2",
      "com.jcraft.jsch.ChannelSftp$1",
      "com.jcraft.jsch.Logger",
      "com.jcraft.jsch.ChannelExec",
      "com.jcraft.jsch.Channel$1",
      "com.jcraft.jsch.RequestPtyReq",
      "com.jcraft.jsch.Proxy",
      "com.jcraft.jsch.SftpATTRS",
      "com.jcraft.jsch.jce.Random",
      "com.jcraft.jsch.IdentityRepository",
      "com.jcraft.jsch.MAC",
      "com.jcraft.jsch.LocalIdentityRepository",
      "com.jcraft.jsch.ConfigRepository",
      "com.jcraft.jsch.UserInfo",
      "com.jcraft.jsch.Session",
      "com.jcraft.jsch.Channel$PassiveInputStream",
      "org.apache.commons.vfs2.libcheck.SftpCheck",
      "com.jcraft.jsch.Identity",
      "com.jcraft.jsch.SignatureRSA",
      "com.jcraft.jsch.JSchException",
      "com.jcraft.jsch.Session$1",
      "com.jcraft.jsch.JSchAuthCancelException",
      "com.jcraft.jsch.Channel$MyPipedInputStream",
      "com.jcraft.jsch.SftpStatVFS",
      "com.jcraft.jsch.ConfigRepository$1",
      "com.jcraft.jsch.ConfigRepository$2",
      "com.jcraft.jsch.RequestShell",
      "com.jcraft.jsch.JSch",
      "com.jcraft.jsch.KeyExchange",
      "com.jcraft.jsch.RequestWindowChange",
      "com.jcraft.jsch.Request",
      "com.jcraft.jsch.RequestX11",
      "com.jcraft.jsch.ChannelDirectTCPIP",
      "com.jcraft.jsch.ChannelAgentForwarding",
      "com.jcraft.jsch.Packet",
      "com.jcraft.jsch.ServerSocketFactory",
      "com.jcraft.jsch.ChannelForwardedTCPIP$ConfigLHost",
      "com.jcraft.jsch.ChannelSftp$RequestQueue",
      "com.jcraft.jsch.PortWatcher",
      "com.jcraft.jsch.ChannelForwardedTCPIP$ConfigDaemon",
      "com.jcraft.jsch.ChannelSftp$Header",
      "com.jcraft.jsch.RequestSftp",
      "com.jcraft.jsch.Signature",
      "com.jcraft.jsch.RequestExec",
      "com.jcraft.jsch.Session$Forwarding",
      "com.jcraft.jsch.Buffer",
      "com.jcraft.jsch.ChannelSftp",
      "com.jcraft.jsch.ChannelForwardedTCPIP",
      "com.jcraft.jsch.RequestAgentForwarding",
      "com.jcraft.jsch.ChannelX11",
      "com.jcraft.jsch.HostKey",
      "com.jcraft.jsch.RequestEnv",
      "com.jcraft.jsch.Session$GlobalRequestReply",
      "com.jcraft.jsch.ChannelSftp$RequestQueue$OutOfOrderException",
      "com.jcraft.jsch.ConfigRepository$Config",
      "com.jcraft.jsch.HASH",
      "com.jcraft.jsch.ChannelSftp$RequestQueue$Request",
      "org.apache.commons.vfs2.libcheck.SftpCheck$1",
      "com.jcraft.jsch.ChannelShell",
      "com.jcraft.jsch.ChannelSubsystem",
      "com.jcraft.jsch.IO",
      "com.jcraft.jsch.Cipher",
      "com.jcraft.jsch.Util",
      "com.jcraft.jsch.HostKeyRepository",
      "com.jcraft.jsch.ChannelSession",
      "com.jcraft.jsch.JSch$1"
    );
  } 

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(SftpCheck_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "org.apache.commons.vfs2.libcheck.SftpCheck",
      "org.apache.commons.vfs2.libcheck.SftpCheck$1",
      "com.jcraft.jsch.JSch$1",
      "com.jcraft.jsch.JSch",
      "com.jcraft.jsch.LocalIdentityRepository",
      "com.jcraft.jsch.Util",
      "com.jcraft.jsch.Session",
      "com.jcraft.jsch.Session$GlobalRequestReply",
      "com.jcraft.jsch.Buffer",
      "com.jcraft.jsch.Packet",
      "com.jcraft.jsch.IO",
      "com.jcraft.jsch.jce.Random",
      "com.jcraft.jsch.JSchException",
      "com.jcraft.jsch.Channel",
      "com.jcraft.jsch.PortWatcher",
      "com.jcraft.jsch.ChannelForwardedTCPIP",
      "com.jcraft.jsch.ChannelX11"
    );
  }
}
