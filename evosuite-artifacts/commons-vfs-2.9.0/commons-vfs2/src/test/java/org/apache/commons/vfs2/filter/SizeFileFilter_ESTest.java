/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 04:27:07 GMT 2022
 */

package org.apache.commons.vfs2.filter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.vfs2.FileContent;
import org.apache.commons.vfs2.FileObject;
import org.apache.commons.vfs2.FileSelectInfo;
import org.apache.commons.vfs2.filter.SizeFileFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SizeFileFilter_ESTest extends SizeFileFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SizeFileFilter sizeFileFilter0 = new SizeFileFilter(0L);
      FileContent fileContent0 = mock(FileContent.class, new ViolatedAssumptionAnswer());
      doReturn(4500L).when(fileContent0).getSize();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(fileObject0).exists();
      doReturn(fileContent0).when(fileObject0).getContent();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      boolean boolean0 = sizeFileFilter0.accept(fileSelectInfo0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SizeFileFilter sizeFileFilter0 = new SizeFileFilter(1L);
      // Undeclared exception!
      try { 
        sizeFileFilter0.accept((FileSelectInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.filter.SizeFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SizeFileFilter sizeFileFilter0 = null;
      try {
        sizeFileFilter0 = new SizeFileFilter((-1L), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The size must be non-negative
         //
         verifyException("org.apache.commons.vfs2.filter.SizeFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SizeFileFilter sizeFileFilter0 = new SizeFileFilter(938L);
      String string0 = sizeFileFilter0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SizeFileFilter sizeFileFilter0 = new SizeFileFilter(1203L, false);
      String string0 = sizeFileFilter0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SizeFileFilter sizeFileFilter0 = new SizeFileFilter(0L);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn((FileObject) null).when(fileSelectInfo0).getFile();
      // Undeclared exception!
      try { 
        sizeFileFilter0.accept(fileSelectInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.filter.SizeFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SizeFileFilter sizeFileFilter0 = new SizeFileFilter(938L);
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(fileObject0).exists();
      doReturn((FileContent) null).when(fileObject0).getContent();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      // Undeclared exception!
      try { 
        sizeFileFilter0.accept(fileSelectInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.filter.SizeFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SizeFileFilter sizeFileFilter0 = new SizeFileFilter(1266L);
      FileContent fileContent0 = mock(FileContent.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(fileContent0).getSize();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(fileObject0).exists();
      doReturn(fileContent0).when(fileObject0).getContent();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      boolean boolean0 = sizeFileFilter0.accept(fileSelectInfo0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SizeFileFilter sizeFileFilter0 = new SizeFileFilter(702L, true);
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(fileObject0).exists();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      boolean boolean0 = sizeFileFilter0.accept(fileSelectInfo0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SizeFileFilter sizeFileFilter0 = new SizeFileFilter(0L);
      FileContent fileContent0 = mock(FileContent.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(fileContent0).getSize();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(fileObject0).exists();
      doReturn(fileContent0).when(fileObject0).getContent();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      boolean boolean0 = sizeFileFilter0.accept(fileSelectInfo0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SizeFileFilter sizeFileFilter0 = null;
      try {
        sizeFileFilter0 = new SizeFileFilter((-1390L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The size must be non-negative
         //
         verifyException("org.apache.commons.vfs2.filter.SizeFileFilter", e);
      }
  }
}
