/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 04:44:51 GMT 2022
 */

package org.apache.commons.vfs2.filter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import org.apache.commons.vfs2.FileName;
import org.apache.commons.vfs2.FileObject;
import org.apache.commons.vfs2.FileSelectInfo;
import org.apache.commons.vfs2.filter.IOCase;
import org.apache.commons.vfs2.filter.SuffixFileFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SuffixFileFilter_ESTest extends SuffixFileFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      SuffixFileFilter suffixFileFilter0 = null;
      try {
        suffixFileFilter0 = new SuffixFileFilter(iOCase0, (String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of suffixes must not be null
         //
         verifyException("org.apache.commons.vfs2.filter.SuffixFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      SuffixFileFilter suffixFileFilter0 = null;
      try {
        suffixFileFilter0 = new SuffixFileFilter(iOCase0, (List<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The list of suffixes must not be null
         //
         verifyException("org.apache.commons.vfs2.filter.SuffixFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[2];
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter(stringArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter(stack0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      String[] stringArray0 = new String[3];
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter(iOCase0, stringArray0);
      String string0 = suffixFileFilter0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "<C3p!KGv-H;4k";
      stringArray0[1] = "<C3p!KGv-H;4k";
      stringArray0[2] = ")";
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter(iOCase0, stringArray0);
      FileName fileName0 = mock(FileName.class, new ViolatedAssumptionAnswer());
      doReturn(")").when(fileName0).getBaseName();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileName0).when(fileObject0).getName();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      boolean boolean0 = suffixFileFilter0.accept(fileSelectInfo0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "<C3p!KGv-H;4k";
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter(iOCase0, stringArray0);
      FileName fileName0 = mock(FileName.class, new ViolatedAssumptionAnswer());
      doReturn(")").when(fileName0).getBaseName();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileName0).when(fileObject0).getName();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      // Undeclared exception!
      try { 
        suffixFileFilter0.accept(fileSelectInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.filter.IOCase", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[14];
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter((IOCase) null, stringArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter((IOCase) null, linkedList0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter(iOCase0, linkedList0);
      FileName fileName0 = mock(FileName.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(fileName0).getBaseName();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileName0).when(fileObject0).getName();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      boolean boolean0 = suffixFileFilter0.accept(fileSelectInfo0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SuffixFileFilter suffixFileFilter0 = null;
      try {
        suffixFileFilter0 = new SuffixFileFilter((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of suffixes must not be null
         //
         verifyException("org.apache.commons.vfs2.filter.SuffixFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SuffixFileFilter suffixFileFilter0 = null;
      try {
        suffixFileFilter0 = new SuffixFileFilter((List<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The list of suffixes must not be null
         //
         verifyException("org.apache.commons.vfs2.filter.SuffixFileFilter", e);
      }
  }
}
