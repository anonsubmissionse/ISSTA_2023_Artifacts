/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 05:10:21 GMT 2022
 */

package org.apache.commons.vfs2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.vfs2.FileSelectInfo;
import org.apache.commons.vfs2.FileSelector;
import org.apache.commons.vfs2.InvertIncludeFileSelector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InvertIncludeFileSelector_ESTest extends InvertIncludeFileSelector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FileSelector fileSelector0 = mock(FileSelector.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(fileSelector0).traverseDescendents(any(org.apache.commons.vfs2.FileSelectInfo.class));
      InvertIncludeFileSelector invertIncludeFileSelector0 = new InvertIncludeFileSelector(fileSelector0);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = invertIncludeFileSelector0.traverseDescendents(fileSelectInfo0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      InvertIncludeFileSelector invertIncludeFileSelector0 = null;
      try {
        invertIncludeFileSelector0 = new InvertIncludeFileSelector((FileSelector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delegateFileSelector
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FileSelector fileSelector0 = mock(FileSelector.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(fileSelector0).includeFile(any(org.apache.commons.vfs2.FileSelectInfo.class));
      InvertIncludeFileSelector invertIncludeFileSelector0 = new InvertIncludeFileSelector(fileSelector0);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = invertIncludeFileSelector0.includeFile(fileSelectInfo0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FileSelector fileSelector0 = mock(FileSelector.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(fileSelector0).includeFile(any(org.apache.commons.vfs2.FileSelectInfo.class));
      InvertIncludeFileSelector invertIncludeFileSelector0 = new InvertIncludeFileSelector(fileSelector0);
      InvertIncludeFileSelector invertIncludeFileSelector1 = new InvertIncludeFileSelector(invertIncludeFileSelector0);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = invertIncludeFileSelector1.includeFile(fileSelectInfo0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FileSelector fileSelector0 = mock(FileSelector.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(fileSelector0).traverseDescendents(any(org.apache.commons.vfs2.FileSelectInfo.class));
      InvertIncludeFileSelector invertIncludeFileSelector0 = new InvertIncludeFileSelector(fileSelector0);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = invertIncludeFileSelector0.traverseDescendents(fileSelectInfo0);
      assertFalse(boolean0);
  }
}
