/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 04:48:20 GMT 2022
 */

package org.apache.commons.vfs2.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import javax.crypto.IllegalBlockSizeException;
import org.apache.commons.vfs2.util.DefaultCryptor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultCryptor_ESTest extends DefaultCryptor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DefaultCryptor defaultCryptor0 = new DefaultCryptor();
      try { 
        defaultCryptor0.decrypt("4:\"|]mWO*m1Rrgmj");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Character : at position 1 is not a valid hexidecimal character
         //
         verifyException("org.apache.commons.vfs2.util.DefaultCryptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DefaultCryptor defaultCryptor0 = new DefaultCryptor();
      try { 
        defaultCryptor0.decrypt("ACwB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Character w at position 2 is not a valid hexidecimal character
         //
         verifyException("org.apache.commons.vfs2.util.DefaultCryptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DefaultCryptor defaultCryptor0 = new DefaultCryptor();
      String string0 = defaultCryptor0.decrypt("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DefaultCryptor defaultCryptor0 = new DefaultCryptor();
      try { 
        defaultCryptor0.encrypt((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.util.DefaultCryptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DefaultCryptor defaultCryptor0 = new DefaultCryptor();
      try { 
        defaultCryptor0.decrypt("93");
        fail("Expecting exception: IllegalBlockSizeException");
      
      } catch(IllegalBlockSizeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DefaultCryptor defaultCryptor0 = new DefaultCryptor();
      try { 
        defaultCryptor0.decrypt((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.util.DefaultCryptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DefaultCryptor defaultCryptor0 = new DefaultCryptor();
      try { 
        defaultCryptor0.decrypt("574");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The given string must have even number of hex chars.
         //
         verifyException("org.apache.commons.vfs2.util.DefaultCryptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DefaultCryptor defaultCryptor0 = new DefaultCryptor();
      String string0 = defaultCryptor0.decrypt("51EC5276F1A499CB677BE7419530CD60A453E1379286CB06D13C155FBC78A74F1CB1C12EDF88EFBC21F13347EBFC435A");
      assertEquals(" is not a valid hexidecimal character", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DefaultCryptor defaultCryptor0 = new DefaultCryptor();
      String string0 = defaultCryptor0.encrypt("Crbz");
      assertEquals("130F723616927437FCE472E5BA53101F", string0);
  }
}
