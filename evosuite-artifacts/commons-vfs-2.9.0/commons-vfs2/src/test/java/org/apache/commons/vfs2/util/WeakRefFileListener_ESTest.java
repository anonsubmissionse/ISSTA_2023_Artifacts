/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 04:49:10 GMT 2022
 */

package org.apache.commons.vfs2.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import org.apache.commons.vfs2.FileChangeEvent;
import org.apache.commons.vfs2.FileListener;
import org.apache.commons.vfs2.FileObject;
import org.apache.commons.vfs2.FileSystemManager;
import org.apache.commons.vfs2.FileSystemOptions;
import org.apache.commons.vfs2.FileType;
import org.apache.commons.vfs2.FilesCache;
import org.apache.commons.vfs2.impl.SynchronizedFileObject;
import org.apache.commons.vfs2.impl.VirtualFileName;
import org.apache.commons.vfs2.provider.AbstractFileObject;
import org.apache.commons.vfs2.provider.DelegateFileObject;
import org.apache.commons.vfs2.provider.GenericURLFileName;
import org.apache.commons.vfs2.provider.LayeredFileName;
import org.apache.commons.vfs2.provider.VfsComponentContext;
import org.apache.commons.vfs2.provider.ftp.FtpClient;
import org.apache.commons.vfs2.provider.ftp.FtpFileSystem;
import org.apache.commons.vfs2.provider.ftps.FtpsFileSystem;
import org.apache.commons.vfs2.util.WeakRefFileListener;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class WeakRefFileListener_ESTest extends WeakRefFileListener_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileType fileType0 = FileType.FILE;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("P#Xuz", "Renaming file ", 1, 1, "P#Xuz", "fi=1%mw#7#KQd", "", fileType0, "nQ@Q7y `b_oe&EH");
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpsFileSystem ftpsFileSystem0 = new FtpsFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>(genericURLFileName0, ftpsFileSystem0, (FileObject) null);
      WeakRefFileListener weakRefFileListener0 = new WeakRefFileListener(delegateFileObject0, delegateFileObject0);
      DelegateFileObject delegateFileObject1 = (DelegateFileObject)weakRefFileListener0.getListener();
      assertEquals(8192, AbstractFileObject.DEFAULT_BUFFER_SIZE);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SynchronizedFileObject synchronizedFileObject0 = new SynchronizedFileObject((FileObject) null);
      FileType fileType0 = FileType.IMAGINARY;
      VirtualFileName virtualFileName0 = new VirtualFileName("", "Ud4g(", fileType0);
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("", "Ud4g(", (-590), (-590), "", "", "", fileType0, "");
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpsFileSystem ftpsFileSystem0 = new FtpsFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>(virtualFileName0, ftpsFileSystem0, (FileObject) null);
      // Undeclared exception!
      try { 
        WeakRefFileListener.installListener(synchronizedFileObject0, delegateFileObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DecoratedFileObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileType fileType0 = FileType.IMAGINARY;
      VirtualFileName virtualFileName0 = new VirtualFileName("@@", "@@", fileType0);
      LayeredFileName layeredFileName0 = new LayeredFileName("@@", virtualFileName0, "@@", fileType0);
      GenericURLFileName genericURLFileName0 = new GenericURLFileName((String) null, "Za]q", 0, 0, "", "PAUSED {}", "", fileType0, (String) null);
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpsFileSystem ftpsFileSystem0 = new FtpsFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>(layeredFileName0, ftpsFileSystem0, (FileObject) null);
      WeakRefFileListener weakRefFileListener0 = new WeakRefFileListener(delegateFileObject0, (FileListener) null);
      try { 
        weakRefFileListener0.getListener();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incorrect file system URI \"@@:@@@@!/\" in name \"@@:@@@@!@@\", was expecting \"null://Za]q/\".
         //
         verifyException("org.apache.commons.vfs2.provider.AbstractFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileType fileType0 = FileType.FILE;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("`Te]-", "`Te]-", (-1329), (-1329), "`Te]-", "`Te]-", "`Te]-", fileType0, "`Te]-");
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpFileSystem ftpFileSystem0 = new FtpFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>(genericURLFileName0, ftpFileSystem0, (FileObject) null);
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn((FilesCache) null).when(fileSystemManager0).getFilesCache();
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      doReturn(fileSystemManager0).when(vfsComponentContext0).getFileSystemManager();
      ftpFileSystem0.setContext(vfsComponentContext0);
      WeakRefFileListener weakRefFileListener0 = new WeakRefFileListener(delegateFileObject0, (FileListener) null);
      try { 
        weakRefFileListener0.getListener();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No files-cache implementation set.
         //
         verifyException("org.apache.commons.vfs2.provider.AbstractFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileType fileType0 = FileType.FILE;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("P#Xuz", "P#Xuz", 1, 1, "P#Xuz", "P#Xuz", "P#Xuz", fileType0, "P#Xuz");
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpsFileSystem ftpsFileSystem0 = new FtpsFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>(genericURLFileName0, ftpsFileSystem0, (FileObject) null);
      WeakRefFileListener weakRefFileListener0 = new WeakRefFileListener(delegateFileObject0, (FileListener) null);
      try { 
        weakRefFileListener0.getListener();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.provider.AbstractFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileType fileType0 = FileType.FILE;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("PXu", "Renaming file ", 1, 1, "PXu", "fi=1%mw#7#KQd", "", fileType0, "");
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpsFileSystem ftpsFileSystem0 = new FtpsFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>(genericURLFileName0, ftpsFileSystem0, (FileObject) null);
      WeakRefFileListener weakRefFileListener0 = new WeakRefFileListener(delegateFileObject0, delegateFileObject0);
      try { 
        weakRefFileListener0.fileDeleted((FileChangeEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.provider.DelegateFileObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileType fileType0 = FileType.FILE_OR_FOLDER;
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      VirtualFileName virtualFileName0 = new VirtualFileName("org.apache.commons.compress.archivers.tar.TarArchiveStructSparse", ":7vyil15nRpg+", fileType0);
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("org.apache.commons.compress.archivers.tar.TarArchiveStructSparse", ":7vyil15nRpg+", 4765, 4765, "", "", "Yv4&jJq", fileType0, "");
      FtpFileSystem ftpFileSystem0 = new FtpFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>(virtualFileName0, ftpFileSystem0, (FileObject) null);
      WeakRefFileListener weakRefFileListener0 = new WeakRefFileListener(delegateFileObject0, (FileListener) null);
      FileChangeEvent fileChangeEvent0 = new FileChangeEvent((FileObject) null);
      try { 
        weakRefFileListener0.fileCreated(fileChangeEvent0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incorrect file system URI \"org.apache.commons.compress.archivers.tar.TarArchiveStructSparse/\" in name \"org.apache.commons.compress.archivers.tar.TarArchiveStructSparse:7vyil15nRpg+\", was expecting \"org.apache.commons.compress.archivers.tar.TarArchiveStructSparse://:7vyil15nRpg+Yv4&jJq?\".
         //
         verifyException("org.apache.commons.vfs2.provider.AbstractFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileType fileType0 = FileType.FILE;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("P#Xuz", "Renaming file ", 1, 1, "P#Xuz", "fi=1%mw#7#KQd", "", fileType0, "");
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpsFileSystem ftpsFileSystem0 = new FtpsFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>(genericURLFileName0, ftpsFileSystem0, (FileObject) null);
      WeakRefFileListener weakRefFileListener0 = new WeakRefFileListener(delegateFileObject0, delegateFileObject0);
      try { 
        weakRefFileListener0.fileCreated((FileChangeEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.provider.DelegateFileObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileType fileType0 = FileType.FILE_OR_FOLDER;
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      VirtualFileName virtualFileName0 = new VirtualFileName("org.apache.commons.compress.archivers.tar.TarArchiveStructSparse", ":7vyil15nRpg+", fileType0);
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("org.apache.commons.compress.archivers.tar.TarArchiveStructSparse", ":7vyil15nRpg+", 4765, 4765, "", "", "Yv4&jJq", fileType0, "");
      FtpFileSystem ftpFileSystem0 = new FtpFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>(virtualFileName0, ftpFileSystem0, (FileObject) null);
      WeakRefFileListener weakRefFileListener0 = new WeakRefFileListener(delegateFileObject0, (FileListener) null);
      FileChangeEvent fileChangeEvent0 = new FileChangeEvent((FileObject) null);
      try { 
        weakRefFileListener0.fileChanged(fileChangeEvent0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incorrect file system URI \"org.apache.commons.compress.archivers.tar.TarArchiveStructSparse/\" in name \"org.apache.commons.compress.archivers.tar.TarArchiveStructSparse:7vyil15nRpg+\", was expecting \"org.apache.commons.compress.archivers.tar.TarArchiveStructSparse://:7vyil15nRpg+Yv4&jJq?\".
         //
         verifyException("org.apache.commons.vfs2.provider.AbstractFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileType fileType0 = FileType.FILE;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("P#Xuz", "P#Xuz", 1, 1, "P#Xuz", "P#Xuz", "", fileType0, "");
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpsFileSystem ftpsFileSystem0 = new FtpsFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>(genericURLFileName0, ftpsFileSystem0, (FileObject) null);
      WeakRefFileListener weakRefFileListener0 = new WeakRefFileListener(delegateFileObject0, (FileListener) null);
      FileChangeEvent fileChangeEvent0 = new FileChangeEvent(delegateFileObject0);
      try { 
        weakRefFileListener0.fileChanged(fileChangeEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.provider.AbstractFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("z@Xuk", "z@Xuk", 492, 492, "z@Xuk", "z@Xuk", "z@Xuk", fileType0, "z@Xuk");
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpsFileSystem ftpsFileSystem0 = new FtpsFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>(genericURLFileName0, ftpsFileSystem0, (FileObject) null);
      WeakRefFileListener weakRefFileListener0 = new WeakRefFileListener(delegateFileObject0, delegateFileObject0);
      FileChangeEvent fileChangeEvent0 = new FileChangeEvent(delegateFileObject0);
      weakRefFileListener0.fileDeleted(fileChangeEvent0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("z@Xuk", "z@Xuk", 492, 492, "z@Xuk", "z@Xuk", "z@Xuk", fileType0, "z@Xuk");
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpsFileSystem ftpsFileSystem0 = new FtpsFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>(genericURLFileName0, ftpsFileSystem0, (FileObject) null);
      WeakRefFileListener weakRefFileListener0 = new WeakRefFileListener(delegateFileObject0, delegateFileObject0);
      FileChangeEvent fileChangeEvent0 = new FileChangeEvent(delegateFileObject0);
      weakRefFileListener0.fileCreated(fileChangeEvent0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FileType fileType0 = FileType.IMAGINARY;
      VirtualFileName virtualFileName0 = new VirtualFileName("GS|V", "org.aache.ommons.vfs2.til.WeakRefFileListener", fileType0);
      GenericURLFileName genericURLFileName0 = new GenericURLFileName((String) null, ";", (-1361), 0, "org.apache.commons.vfs2.util.WeakRefFileListener", ".EBR,", "org.aache.ommons.vfs2.til.WeakRefFileListener", fileType0, (String) null);
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FtpFileSystem ftpFileSystem0 = new FtpFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>(virtualFileName0, ftpFileSystem0, (FileObject) null);
      WeakRefFileListener weakRefFileListener0 = new WeakRefFileListener(delegateFileObject0, (FileListener) null);
      FileChangeEvent fileChangeEvent0 = new FileChangeEvent((FileObject) null);
      try { 
        weakRefFileListener0.fileDeleted(fileChangeEvent0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incorrect file system URI \"GS|V/\" in name \"GS|Vorg.aache.ommons.vfs2.til.WeakRefFileListener\", was expecting \"null://org.apache.commons.vfs2.util.WeakRefFileListener:***@;org.aache.ommons.vfs2.til.WeakRefFileListener\".
         //
         verifyException("org.apache.commons.vfs2.provider.AbstractFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("z@Xuk", "z@Xuk", 492, 492, "z@Xuk", "z@Xuk", "z@Xuk", fileType0, "z@Xuk");
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpsFileSystem ftpsFileSystem0 = new FtpsFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>(genericURLFileName0, ftpsFileSystem0, (FileObject) null);
      WeakRefFileListener weakRefFileListener0 = new WeakRefFileListener(delegateFileObject0, delegateFileObject0);
      FileChangeEvent fileChangeEvent0 = new FileChangeEvent(delegateFileObject0);
      weakRefFileListener0.fileChanged(fileChangeEvent0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("z@Xuk", "z@Xuk", 492, 492, "z@Xuk", "z@Xuk", "z@Xuk", fileType0, "z@Xuk");
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpsFileSystem ftpsFileSystem0 = new FtpsFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>(genericURLFileName0, ftpsFileSystem0, (FileObject) null);
      WeakRefFileListener.installListener(delegateFileObject0, delegateFileObject0);
      assertFalse(delegateFileObject0.isContentOpen());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileType fileType0 = FileType.FOLDER;
      VirtualFileName virtualFileName0 = new VirtualFileName("r>X#\"C2p4~3<}N(}Q", "r>X#\"C2p4~3<}N(}Q", fileType0);
      LayeredFileName layeredFileName0 = new LayeredFileName("r>X#\"C2p4~3<}N(}Q", virtualFileName0, (String) null, fileType0);
      GenericURLFileName genericURLFileName0 = new GenericURLFileName((String) null, (String) null, (-310), 499, "org.apache.commons.vfs2.util.WeakRefFileListener", "org.apache.commons.vfs2.util.WeakRefFileListener", "&", fileType0, "&");
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpsFileSystem ftpsFileSystem0 = new FtpsFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>(layeredFileName0, ftpsFileSystem0, (FileObject) null);
      WeakRefFileListener weakRefFileListener0 = null;
      try {
        weakRefFileListener0 = new WeakRefFileListener((FileObject) null, delegateFileObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.util.WeakRefFileListener", e);
      }
  }
}
