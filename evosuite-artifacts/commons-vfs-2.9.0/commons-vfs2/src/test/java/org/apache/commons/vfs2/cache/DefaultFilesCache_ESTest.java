/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 05:00:25 GMT 2022
 */

package org.apache.commons.vfs2.cache;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.vfs2.FileName;
import org.apache.commons.vfs2.FileObject;
import org.apache.commons.vfs2.FileSystem;
import org.apache.commons.vfs2.FileSystemOptions;
import org.apache.commons.vfs2.FileType;
import org.apache.commons.vfs2.cache.DefaultFilesCache;
import org.apache.commons.vfs2.impl.VirtualFileName;
import org.apache.commons.vfs2.impl.VirtualFileSystem;
import org.apache.commons.vfs2.provider.GenericURLFileName;
import org.apache.commons.vfs2.provider.ftp.FtpClient;
import org.apache.commons.vfs2.provider.ftp.FtpFileSystem;
import org.apache.commons.vfs2.provider.local.LocalFileSystem;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultFilesCache_ESTest extends DefaultFilesCache_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultFilesCache defaultFilesCache0 = new DefaultFilesCache();
      FileType fileType0 = FileType.FILE;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("[1$*xaYBRpzeI", "", 0, 0, (String) null, "l/QZ", "l/QZ", fileType0, "uF");
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, fileSystemOptions0);
      defaultFilesCache0.getOrCreateFilesystemCache(virtualFileSystem0);
      // Undeclared exception!
      try { 
        defaultFilesCache0.removeFile(virtualFileSystem0, (FileName) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultFilesCache defaultFilesCache0 = new DefaultFilesCache();
      // Undeclared exception!
      try { 
        defaultFilesCache0.putFileIfAbsent((FileObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.cache.DefaultFilesCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultFilesCache defaultFilesCache0 = new DefaultFilesCache();
      // Undeclared exception!
      try { 
        defaultFilesCache0.getOrCreateFilesystemCache((FileSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultFilesCache defaultFilesCache0 = new DefaultFilesCache();
      // Undeclared exception!
      try { 
        defaultFilesCache0.getFile((FileSystem) null, (FileName) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultFilesCache defaultFilesCache0 = new DefaultFilesCache();
      // Undeclared exception!
      try { 
        defaultFilesCache0.clear((FileSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultFilesCache defaultFilesCache0 = new DefaultFilesCache();
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("", "", 5, 5, "", "", "", fileType0, "");
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpFileSystem ftpFileSystem0 = new FtpFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      defaultFilesCache0.getOrCreateFilesystemCache(ftpFileSystem0);
      defaultFilesCache0.removeFile(ftpFileSystem0, genericURLFileName0);
      assertEquals("", genericURLFileName0.getHostName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultFilesCache defaultFilesCache0 = new DefaultFilesCache();
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("", "", 5, 5, "", "", "", fileType0, "");
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpFileSystem ftpFileSystem0 = new FtpFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      defaultFilesCache0.removeFile(ftpFileSystem0, genericURLFileName0);
      assertEquals(FileType.IMAGINARY, genericURLFileName0.getType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultFilesCache defaultFilesCache0 = new DefaultFilesCache();
      FileType fileType0 = FileType.FILE_OR_FOLDER;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("++ f)%~K{Q7-`6", "++ f)%~K{Q7-`6", 3783, 3783, "++ f)%~K{Q7-`6", "++ f)%~K{Q7-`6", "++ f)%~K{Q7-`6", fileType0, "++ f)%~K{Q7-`6");
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      LocalFileSystem localFileSystem0 = new LocalFileSystem(genericURLFileName0, "++ f)%~K{Q7-`6", fileSystemOptions0);
      defaultFilesCache0.getOrCreateFilesystemCache(localFileSystem0);
      defaultFilesCache0.clear(localFileSystem0);
      assertEquals(0.0, localFileSystem0.getLastModTimeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultFilesCache defaultFilesCache0 = new DefaultFilesCache();
      FileType fileType0 = FileType.FOLDER;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("|]", "|]", (-7), (-7), "|]", "|]", "|]", fileType0, "|]");
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpFileSystem ftpFileSystem0 = new FtpFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      defaultFilesCache0.clear(ftpFileSystem0);
      assertEquals("|]://|]:|]@|]|]?|]", ftpFileSystem0.getRootURI());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultFilesCache defaultFilesCache0 = new DefaultFilesCache();
      FileType fileType0 = FileType.FOLDER;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("|]", "|]", (-7), (-7), "|]", "|]", "|]", fileType0, "|]");
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpFileSystem ftpFileSystem0 = new FtpFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      FileObject fileObject0 = defaultFilesCache0.getFile(ftpFileSystem0, genericURLFileName0);
      assertNull(fileObject0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultFilesCache defaultFilesCache0 = new DefaultFilesCache();
      FileType fileType0 = FileType.FILE;
      VirtualFileName virtualFileName0 = new VirtualFileName("zB@%}Mk", "zB@%}Mk", fileType0);
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      LocalFileSystem localFileSystem0 = new LocalFileSystem(virtualFileName0, "zB@%}Mk", fileSystemOptions0);
      defaultFilesCache0.getOrCreateFilesystemCache(localFileSystem0);
      FileObject fileObject0 = defaultFilesCache0.getFile(localFileSystem0, virtualFileName0);
      assertNull(fileObject0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultFilesCache defaultFilesCache0 = new DefaultFilesCache();
      defaultFilesCache0.close();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultFilesCache defaultFilesCache0 = new DefaultFilesCache();
      // Undeclared exception!
      try { 
        defaultFilesCache0.putFile((FileObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.cache.DefaultFilesCache", e);
      }
  }
}
