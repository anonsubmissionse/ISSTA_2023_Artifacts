/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 05:15:31 GMT 2022
 */

package org.apache.commons.vfs2.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import org.apache.commons.vfs2.FileName;
import org.apache.commons.vfs2.FileObject;
import org.apache.commons.vfs2.FileSystemManager;
import org.apache.commons.vfs2.FileSystemOptions;
import org.apache.commons.vfs2.impl.DefaultFileSystemManager;
import org.apache.commons.vfs2.impl.DefaultVfsComponentContext;
import org.apache.commons.vfs2.provider.FileReplicator;
import org.apache.commons.vfs2.provider.TemporaryFileStore;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultVfsComponentContext_ESTest extends DefaultVfsComponentContext_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = mock(DefaultFileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn((FileObject) null).when(defaultFileSystemManager0).toFileObject(any(java.io.File.class));
      DefaultVfsComponentContext defaultVfsComponentContext0 = new DefaultVfsComponentContext(defaultFileSystemManager0);
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      defaultVfsComponentContext0.toFileObject(file0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = mock(DefaultFileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn((FileName) null).when(defaultFileSystemManager0).resolveURI(anyString());
      DefaultVfsComponentContext defaultVfsComponentContext0 = new DefaultVfsComponentContext(defaultFileSystemManager0);
      FileName fileName0 = defaultVfsComponentContext0.parseURI(";*5g8Uan)wpI {");
      assertNull(fileName0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TemporaryFileStore temporaryFileStore0 = mock(TemporaryFileStore.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(temporaryFileStore0).toString();
      DefaultFileSystemManager defaultFileSystemManager0 = mock(DefaultFileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn(temporaryFileStore0).when(defaultFileSystemManager0).getTemporaryFileStore();
      DefaultVfsComponentContext defaultVfsComponentContext0 = new DefaultVfsComponentContext(defaultFileSystemManager0);
      TemporaryFileStore temporaryFileStore1 = defaultVfsComponentContext0.getTemporaryFileStore();
      assertSame(temporaryFileStore1, temporaryFileStore0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = mock(DefaultFileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn((FileReplicator) null).when(defaultFileSystemManager0).getReplicator();
      DefaultVfsComponentContext defaultVfsComponentContext0 = new DefaultVfsComponentContext(defaultFileSystemManager0);
      FileReplicator fileReplicator0 = defaultVfsComponentContext0.getReplicator();
      assertNull(fileReplicator0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileReplicator fileReplicator0 = mock(FileReplicator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(fileReplicator0).toString();
      DefaultFileSystemManager defaultFileSystemManager0 = mock(DefaultFileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn(fileReplicator0).when(defaultFileSystemManager0).getReplicator();
      DefaultVfsComponentContext defaultVfsComponentContext0 = new DefaultVfsComponentContext(defaultFileSystemManager0);
      FileReplicator fileReplicator1 = defaultVfsComponentContext0.getReplicator();
      assertSame(fileReplicator1, fileReplicator0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = mock(DefaultFileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultFileSystemManager0).toString();
      DefaultVfsComponentContext defaultVfsComponentContext0 = new DefaultVfsComponentContext(defaultFileSystemManager0);
      FileSystemManager fileSystemManager0 = defaultVfsComponentContext0.getFileSystemManager();
      assertNull(fileSystemManager0.getCacheStrategy());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultVfsComponentContext defaultVfsComponentContext0 = new DefaultVfsComponentContext((DefaultFileSystemManager) null);
      // Undeclared exception!
      try { 
        defaultVfsComponentContext0.getTemporaryFileStore();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DefaultVfsComponentContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultVfsComponentContext defaultVfsComponentContext0 = new DefaultVfsComponentContext((DefaultFileSystemManager) null);
      // Undeclared exception!
      try { 
        defaultVfsComponentContext0.parseURI("5sh");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DefaultVfsComponentContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultVfsComponentContext defaultVfsComponentContext0 = new DefaultVfsComponentContext((DefaultFileSystemManager) null);
      FileSystemOptions fileSystemOptions0 = mock(FileSystemOptions.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultVfsComponentContext0.resolveFile((FileObject) null, "", fileSystemOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DefaultVfsComponentContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultVfsComponentContext defaultVfsComponentContext0 = new DefaultVfsComponentContext((DefaultFileSystemManager) null);
      // Undeclared exception!
      try { 
        defaultVfsComponentContext0.getReplicator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DefaultVfsComponentContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = mock(DefaultFileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn((TemporaryFileStore) null).when(defaultFileSystemManager0).getTemporaryFileStore();
      DefaultVfsComponentContext defaultVfsComponentContext0 = new DefaultVfsComponentContext(defaultFileSystemManager0);
      TemporaryFileStore temporaryFileStore0 = defaultVfsComponentContext0.getTemporaryFileStore();
      assertNull(temporaryFileStore0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultVfsComponentContext defaultVfsComponentContext0 = new DefaultVfsComponentContext((DefaultFileSystemManager) null);
      FileSystemOptions fileSystemOptions0 = mock(FileSystemOptions.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultVfsComponentContext0.resolveFile("w", fileSystemOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DefaultVfsComponentContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultVfsComponentContext defaultVfsComponentContext0 = new DefaultVfsComponentContext((DefaultFileSystemManager) null);
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultVfsComponentContext0.toFileObject(file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DefaultVfsComponentContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultVfsComponentContext defaultVfsComponentContext0 = new DefaultVfsComponentContext((DefaultFileSystemManager) null);
      FileSystemManager fileSystemManager0 = defaultVfsComponentContext0.getFileSystemManager();
      assertNull(fileSystemManager0);
  }
}
