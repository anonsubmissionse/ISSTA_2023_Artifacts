/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 04:52:49 GMT 2022
 */

package org.apache.commons.vfs2.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import org.apache.commons.logging.impl.Log4JLogger;
import org.apache.commons.vfs2.FileObject;
import org.apache.commons.vfs2.FileSystemOptions;
import org.apache.commons.vfs2.FileType;
import org.apache.commons.vfs2.PatternFileSelector;
import org.apache.commons.vfs2.impl.DefaultFileReplicator;
import org.apache.commons.vfs2.impl.DefaultFileSystemManager;
import org.apache.commons.vfs2.impl.DefaultVfsComponentContext;
import org.apache.commons.vfs2.impl.VirtualFileSystem;
import org.apache.commons.vfs2.provider.GenericURLFileName;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultFileReplicator_ESTest extends DefaultFileReplicator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      File file0 = MockFile.createTempFile("\",K", (String) null, (File) null);
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      DefaultVfsComponentContext defaultVfsComponentContext0 = new DefaultVfsComponentContext(defaultFileSystemManager0);
      defaultFileReplicator0.setContext(defaultVfsComponentContext0);
      defaultFileReplicator0.deleteFile(file0);
      assertEquals(0L, file0.getUsableSpace());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      DefaultVfsComponentContext defaultVfsComponentContext0 = new DefaultVfsComponentContext(defaultFileSystemManager0);
      defaultFileReplicator0.setContext(defaultVfsComponentContext0);
      defaultFileReplicator0.createAndAddFile((File) null, "\",K");
      defaultFileReplicator0.close();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      defaultFileReplicator0.addFile((Object) null);
      Object object0 = defaultFileReplicator0.removeFile();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      defaultFileReplicator0.init();
      defaultFileReplicator0.init();
      long long0 = defaultFileReplicator0.getFilecount();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      File file0 = MockFile.createTempFile("com.google.common.hash.Hashing$ConcatenatedHashFunction", "w@\"fi|/dx5N");
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator(file0);
      String string0 = defaultFileReplicator0.createFilename("w@\"fi|/dx5N");
      assertEquals("tmp_0_w@_22fi_7c_2fdx5N", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("_+vHuGq#XlCm|/_+vHuGq#XlCm|/_+vHuGq#XlCm|");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      MockFile mockFile0 = new MockFile("_+vHuGq#XlCm|", "_+vHuGq#XlCm|");
      File file0 = defaultFileReplicator0.createFile(mockFile0, "_+vHuGq#XlCm|");
      assertEquals(0L, file0.getFreeSpace());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      System.setCurrentTimeMillis((-1914L));
      File file0 = MockFile.createTempFile("echo $$", "echo $$");
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator(file0);
      File file1 = defaultFileReplicator0.createFile(file0, "");
      assertEquals(0L, file1.length());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      MockFile mockFile0 = new MockFile("~C$");
      File file0 = defaultFileReplicator0.createFile(mockFile0, ".7Aq]wh=");
      assertFalse(file0.canExecute());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator((File) null);
      File file0 = defaultFileReplicator0.createFile((File) null, "");
      assertTrue(file0.canExecute());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator((File) null);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Xk8H)rm:");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      File file0 = defaultFileReplicator0.createAndAddFile((File) null, "Xk8H)rm:/");
      assertEquals(1L, file0.length());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      System.setCurrentTimeMillis((-3007L));
      File file0 = MockFile.createTempFile("vfs.impl/temp-dir.debug", "vfs.impl/temp-dir.debug");
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator(file0);
      File file1 = defaultFileReplicator0.createAndAddFile(file0, "");
      assertNotSame(file1, file0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFile mockFile0 = new MockFile("tmp_");
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator(mockFile0);
      File file0 = defaultFileReplicator0.createAndAddFile(mockFile0, ".a6P*F'6tp");
      assertTrue(file0.isHidden());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      MockFile mockFile0 = new MockFile("");
      File file0 = defaultFileReplicator0.createAndAddFile(mockFile0, "");
      assertNotSame(file0, mockFile0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/vfs_cache/tmp_0_hadoop.tokens");
      FileSystemHandling.createFolder(evoSuiteFile0);
      defaultFileReplicator0.init();
      File file0 = defaultFileReplicator0.allocateFile("hadoop.tokens");
      assertEquals("/tmp/vfs_cache/tmp_0_hadoop.tokens", file0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/vfs_cache/tmp_0_hadoop.tokens");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "\",K");
      defaultFileReplicator0.init();
      File file0 = defaultFileReplicator0.allocateFile("hadoop.tokens");
      assertEquals(3L, file0.length());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      DefaultVfsComponentContext defaultVfsComponentContext0 = new DefaultVfsComponentContext(defaultFileSystemManager0);
      defaultFileReplicator0.setContext(defaultVfsComponentContext0);
      FileType fileType0 = FileType.FILE_OR_FOLDER;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("_", "9lW", (-4), (-4), "\",K", "hadoop.tokens", " $Nt]'/", fileType0, ">fill {}");
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, fileSystemOptions0);
      FileObject fileObject0 = virtualFileSystem0.createFile(genericURLFileName0);
      PatternFileSelector patternFileSelector0 = new PatternFileSelector("", (-4));
      try { 
        defaultFileReplicator0.replicateFile(fileObject0, patternFileSelector0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find a file provider which can handle local files.
         //
         verifyException("org.apache.commons.vfs2.FileSystemException", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      // Undeclared exception!
      try { 
        defaultFileReplicator0.removeFile();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator((File) null);
      Log4JLogger log4JLogger0 = new Log4JLogger();
      defaultFileReplicator0.setLogger(log4JLogger0);
      // Undeclared exception!
      try { 
        defaultFileReplicator0.init();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.log4j.CategoryKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      File file0 = MockFile.createTempFile("com.google.common.hash.Hashing$ConcatenatedHashFunction", "w@\"fi|/dx5N");
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator(file0);
      // Undeclared exception!
      try { 
        defaultFileReplicator0.deleteFile(file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DefaultFileReplicator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      File file0 = MockFile.createTempFile("mi[O<  ]", "mi[O<  ]");
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator(file0);
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      DefaultVfsComponentContext defaultVfsComponentContext0 = new DefaultVfsComponentContext(defaultFileSystemManager0);
      defaultFileReplicator0.setContext(defaultVfsComponentContext0);
      Log4JLogger log4JLogger0 = new Log4JLogger();
      defaultFileReplicator0.setLogger(log4JLogger0);
      // Undeclared exception!
      try { 
        defaultFileReplicator0.deleteFile(file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.log4j.CategoryKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      // Undeclared exception!
      try { 
        defaultFileReplicator0.createFilename((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DefaultFileReplicator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".c o\"&%hBxT");
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator(mockFile0);
      try { 
        defaultFileReplicator0.createFile(mockFile0, ".c o\"&%hBxT");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid URI escape sequence \"%hB\".
         //
         verifyException("org.apache.commons.vfs2.provider.UriParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      // Undeclared exception!
      try { 
        defaultFileReplicator0.createFile((File) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      try { 
        defaultFileReplicator0.createAndAddFile((File) null, "\"XDU^f%LwK8Uo:W");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid URI escape sequence \"%Lw\".
         //
         verifyException("org.apache.commons.vfs2.provider.UriParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      File file0 = MockFile.createTempFile("\",K", (String) null, (File) null);
      // Undeclared exception!
      try { 
        defaultFileReplicator0.createAndAddFile(file0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      defaultFileReplicator0.addFile(defaultFileReplicator0);
      // Undeclared exception!
      try { 
        defaultFileReplicator0.close();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.vfs2.impl.DefaultFileReplicator cannot be cast to java.io.File
         //
         verifyException("org.apache.commons.vfs2.impl.DefaultFileReplicator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      // Undeclared exception!
      try { 
        defaultFileReplicator0.allocateFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DefaultFileReplicator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator(mockFile0);
      defaultFileReplicator0.close();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator(mockFile0);
      defaultFileReplicator0.close();
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      File file0 = MockFile.createTempFile("com.google.common.hash.Hashing$ConcatenatedHashFunction", "w@\"fi|/dx5N");
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator(file0);
      defaultFileReplicator0.close();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      defaultFileReplicator0.init();
      defaultFileReplicator0.close();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      FileType fileType0 = FileType.FILE_OR_FOLDER;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("_", "9lW", (-4), (-4), "\",K", "hadoop.tokens", " $Nt]'/", fileType0, ">fill {}");
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, fileSystemOptions0);
      FileObject fileObject0 = virtualFileSystem0.createFile(genericURLFileName0);
      PatternFileSelector patternFileSelector0 = new PatternFileSelector("", (-4));
      // Undeclared exception!
      try { 
        defaultFileReplicator0.replicateFile(fileObject0, patternFileSelector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DefaultFileReplicator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator((File) null);
      defaultFileReplicator0.addFile((Object) null);
      // Undeclared exception!
      try { 
        defaultFileReplicator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DefaultFileReplicator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      File file0 = defaultFileReplicator0.allocateFile("hadoop.tokens");
      assertEquals("tmp_0_hadoop.tokens", file0.getName());
      assertNotNull(file0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      long long0 = defaultFileReplicator0.getFilecount();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      defaultFileReplicator0.createAndAddFile((File) null, "\",K");
      MockFile mockFile0 = (MockFile)defaultFileReplicator0.removeFile();
      assertFalse(mockFile0.isHidden());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      defaultFileReplicator0.removeFile("\",K");
  }
}
