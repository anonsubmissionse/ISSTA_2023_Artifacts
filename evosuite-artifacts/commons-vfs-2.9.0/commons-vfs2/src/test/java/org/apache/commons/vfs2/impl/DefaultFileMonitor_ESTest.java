/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 04:21:20 GMT 2022
 */

package org.apache.commons.vfs2.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import org.apache.commons.vfs2.FileListener;
import org.apache.commons.vfs2.FileObject;
import org.apache.commons.vfs2.FileSystemOptions;
import org.apache.commons.vfs2.FileType;
import org.apache.commons.vfs2.cache.OnCallRefreshFileObject;
import org.apache.commons.vfs2.impl.DefaultFileMonitor;
import org.apache.commons.vfs2.impl.DefaultFileSystemManager;
import org.apache.commons.vfs2.impl.VirtualFileName;
import org.apache.commons.vfs2.impl.VirtualFileSystem;
import org.apache.commons.vfs2.provider.AbstractFileObject;
import org.apache.commons.vfs2.provider.DelegateFileObject;
import org.apache.commons.vfs2.provider.GenericURLFileName;
import org.apache.commons.vfs2.provider.LayeredFileName;
import org.apache.commons.vfs2.provider.http.HttpFileSystem;
import org.apache.commons.vfs2.provider.local.DefaultLocalFileProvider;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultFileMonitor_ESTest extends DefaultFileMonitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      assertEquals(1000L, defaultFileMonitor0.getDelay());
      assertFalse(defaultFileMonitor0.isRecursive());
      assertEquals(1000, defaultFileMonitor0.getChecksPerRun());
      assertNotNull(defaultFileMonitor0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("", "", 3830, 3830, "=$oPj:P2", "PJ:EGuUKePv*`2:", "=$oPj:P2", fileType0, "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      genericURLFileName0.getBaseName();
      FileObject fileObject0 = virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.setChecksPerRun((-1703));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fjDwME86yH`+Ys");
      defaultFileMonitor0.addFile(fileObject0);
      defaultFileMonitor0.getChecksPerRun();
      defaultFileMonitor0.stop();
      // Undeclared exception!
      try { 
        defaultFileMonitor0.removeFile(fileObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.provider.AbstractFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("", "", 3830, 3830, "=$oPj:P2", "PJ:EGuUKePv*`2:", "=$oPj:P2", fileType0, "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      genericURLFileName0.getBaseName();
      FileObject fileObject0 = virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(fileObject0);
      defaultFileMonitor0.getChecksPerRun();
      defaultFileMonitor0.stop();
      defaultFileMonitor0.addFile(fileObject0);
      // Undeclared exception!
      try { 
        defaultFileMonitor0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DefaultFileMonitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("", "", 3830, 3830, "=$oPj:P2", "PJ:EGuUKePv*`2:", "=$oPj:P2", fileType0, "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      genericURLFileName0.getBaseName();
      FileObject fileObject0 = virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(fileObject0);
      defaultFileMonitor0.getChecksPerRun();
      defaultFileMonitor0.stop();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.stop();
      defaultFileMonitor0.start();
      defaultFileMonitor0.run();
      long long0 = defaultFileMonitor0.getDelay();
      long long1 = 1000L;
      defaultFileMonitor0.setDelay(long1);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      defaultFileMonitor0.setDelay(long0);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.setRecursive(boolean0);
      defaultFileMonitor0.stop();
      int int0 = 1000;
      defaultFileMonitor0.setChecksPerRun(int0);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.getChecksPerRun();
      defaultFileMonitor0.getChecksPerRun();
      defaultFileMonitor0.getDelay();
      defaultFileMonitor0.getDelay();
      defaultFileMonitor0.isRecursive();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      String string0 = "";
      FileObject fileObject0 = null;
      defaultFileMonitor0.queueAddFile((FileObject) null);
      FileType fileType0 = FileType.FOLDER;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("", "", (-4376), (-4376), "bYbC)", "bYbC)", "bYbC)", fileType0, "");
      FileType fileType1 = FileType.FOLDER;
      LayeredFileName layeredFileName0 = new LayeredFileName("", genericURLFileName0, "", fileType1);
      HttpFileSystem httpFileSystem0 = mock(HttpFileSystem.class, new ViolatedAssumptionAnswer());
      DefaultLocalFileProvider defaultLocalFileProvider0 = new DefaultLocalFileProvider();
      String string1 = "}\"'T{J,%I9}=";
      URI uRI0 = MockURI.URI("com.jcraft.jsch.JSch");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.stop();
      defaultFileMonitor0.start();
      defaultFileMonitor0.run();
      long long0 = defaultFileMonitor0.getDelay();
      long long1 = 1000L;
      defaultFileMonitor0.setDelay(long1);
      defaultFileMonitor0.setDelay(long0);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.stop();
      int int0 = 1000;
      defaultFileMonitor0.setChecksPerRun(int0);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.getChecksPerRun();
      defaultFileMonitor0.getChecksPerRun();
      defaultFileMonitor0.getDelay();
      defaultFileMonitor0.getDelay();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay((-40L));
      defaultFileMonitor0.setRecursive(false);
      // Undeclared exception!
      try { 
        defaultFileMonitor0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DefaultFileMonitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.stop();
      defaultFileMonitor0.start();
      defaultFileMonitor0.getDelay();
      defaultFileMonitor0.setDelay(1000L);
      defaultFileMonitor0.setDelay(1000L);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.stop();
      defaultFileMonitor0.setChecksPerRun(1000);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.getChecksPerRun();
      defaultFileMonitor0.getChecksPerRun();
      defaultFileMonitor0.getDelay();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.isRecursive();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.stop();
      defaultFileMonitor0.start();
      defaultFileMonitor0.getDelay();
      defaultFileMonitor0.setDelay(1000L);
      // Undeclared exception!
      try { 
        defaultFileMonitor0.start();
        fail("Expecting exception: IllegalThreadStateException");
      
      } catch(IllegalThreadStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      assertFalse(defaultFileMonitor0.isRecursive());
      assertEquals(1000, defaultFileMonitor0.getChecksPerRun());
      assertEquals(1000L, defaultFileMonitor0.getDelay());
      assertNotNull(defaultFileMonitor0);
      
      OnCallRefreshFileObject onCallRefreshFileObject0 = new OnCallRefreshFileObject((FileObject) null);
      assertNotNull(onCallRefreshFileObject0);
      
      defaultFileMonitor0.start();
      assertFalse(defaultFileMonitor0.isRecursive());
      assertEquals(1000, defaultFileMonitor0.getChecksPerRun());
      assertEquals(1000L, defaultFileMonitor0.getDelay());
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        defaultFileMonitor0.start();
        fail("Expecting exception: IllegalThreadStateException");
      
      } catch(IllegalThreadStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      assertEquals(1000, defaultFileMonitor0.getChecksPerRun());
      assertFalse(defaultFileMonitor0.isRecursive());
      assertEquals(1000L, defaultFileMonitor0.getDelay());
      assertNotNull(defaultFileMonitor0);
      
      defaultFileMonitor0.stop();
      assertEquals(1000, defaultFileMonitor0.getChecksPerRun());
      assertFalse(defaultFileMonitor0.isRecursive());
      assertEquals(1000L, defaultFileMonitor0.getDelay());
      
      defaultFileMonitor0.setDelay(1565L);
      assertEquals(1000, defaultFileMonitor0.getChecksPerRun());
      assertFalse(defaultFileMonitor0.isRecursive());
      assertEquals(1565L, defaultFileMonitor0.getDelay());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      assertFalse(defaultFileMonitor0.isRecursive());
      assertEquals(1000L, defaultFileMonitor0.getDelay());
      assertEquals(1000, defaultFileMonitor0.getChecksPerRun());
      assertNotNull(defaultFileMonitor0);
      
      defaultFileMonitor0.start();
      assertFalse(defaultFileMonitor0.isRecursive());
      assertEquals(1000L, defaultFileMonitor0.getDelay());
      assertEquals(1000, defaultFileMonitor0.getChecksPerRun());
      
      defaultFileMonitor0.stop();
      assertFalse(defaultFileMonitor0.isRecursive());
      assertEquals(1000L, defaultFileMonitor0.getDelay());
      assertEquals(1000, defaultFileMonitor0.getChecksPerRun());
      
      defaultFileMonitor0.setChecksPerRun((-508));
      assertFalse(defaultFileMonitor0.isRecursive());
      assertEquals(1000L, defaultFileMonitor0.getDelay());
      assertEquals((-508), defaultFileMonitor0.getChecksPerRun());
      
      defaultFileMonitor0.setChecksPerRun((-508));
      assertFalse(defaultFileMonitor0.isRecursive());
      assertEquals(1000L, defaultFileMonitor0.getDelay());
      assertEquals((-508), defaultFileMonitor0.getChecksPerRun());
      
      defaultFileMonitor0.start();
      assertFalse(defaultFileMonitor0.isRecursive());
      assertEquals(1000L, defaultFileMonitor0.getDelay());
      assertEquals((-508), defaultFileMonitor0.getChecksPerRun());
      
      FileObject fileObject0 = null;
      defaultFileMonitor0.queueRemoveFile((FileObject) null);
      assertFalse(defaultFileMonitor0.isRecursive());
      assertEquals(1000L, defaultFileMonitor0.getDelay());
      assertEquals((-508), defaultFileMonitor0.getChecksPerRun());
      
      // Undeclared exception!
      try { 
        defaultFileMonitor0.removeFile((FileObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DefaultFileMonitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      assertEquals(1000, defaultFileMonitor0.getChecksPerRun());
      assertEquals(1000L, defaultFileMonitor0.getDelay());
      assertFalse(defaultFileMonitor0.isRecursive());
      assertNotNull(defaultFileMonitor0);
      
      defaultFileMonitor0.stop();
      assertEquals(1000, defaultFileMonitor0.getChecksPerRun());
      assertEquals(1000L, defaultFileMonitor0.getDelay());
      assertFalse(defaultFileMonitor0.isRecursive());
      
      defaultFileMonitor0.start();
      assertEquals(1000, defaultFileMonitor0.getChecksPerRun());
      assertEquals(1000L, defaultFileMonitor0.getDelay());
      assertFalse(defaultFileMonitor0.isRecursive());
      
      FileObject fileObject0 = null;
      // Undeclared exception!
      try { 
        defaultFileMonitor0.removeFile((FileObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DefaultFileMonitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      assertEquals(1000, defaultFileMonitor0.getChecksPerRun());
      assertEquals(1000L, defaultFileMonitor0.getDelay());
      assertFalse(defaultFileMonitor0.isRecursive());
      assertNotNull(defaultFileMonitor0);
      
      // Undeclared exception!
      try { 
        defaultFileMonitor0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DefaultFileMonitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      assertEquals(1000L, defaultFileMonitor0.getDelay());
      assertEquals(1000, defaultFileMonitor0.getChecksPerRun());
      assertFalse(defaultFileMonitor0.isRecursive());
      assertNotNull(defaultFileMonitor0);
      
      defaultFileMonitor0.setDelay(0L);
      assertEquals(1000L, defaultFileMonitor0.getDelay());
      assertEquals(1000, defaultFileMonitor0.getChecksPerRun());
      assertFalse(defaultFileMonitor0.isRecursive());
      
      defaultFileMonitor0.setRecursive(false);
      assertEquals(1000L, defaultFileMonitor0.getDelay());
      assertEquals(1000, defaultFileMonitor0.getChecksPerRun());
      assertFalse(defaultFileMonitor0.isRecursive());
      
      // Undeclared exception!
      try { 
        defaultFileMonitor0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DefaultFileMonitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      assertFalse(defaultFileMonitor0.isRecursive());
      assertEquals(1000L, defaultFileMonitor0.getDelay());
      assertEquals(1000, defaultFileMonitor0.getChecksPerRun());
      assertNotNull(defaultFileMonitor0);
      
      // Undeclared exception!
      try { 
        defaultFileMonitor0.addFile((FileObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DefaultFileMonitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      assertEquals(1000L, defaultFileMonitor0.getDelay());
      assertFalse(defaultFileMonitor0.isRecursive());
      assertEquals(1000, defaultFileMonitor0.getChecksPerRun());
      assertNotNull(defaultFileMonitor0);
      
      defaultFileMonitor0.stop();
      assertEquals(1000L, defaultFileMonitor0.getDelay());
      assertFalse(defaultFileMonitor0.isRecursive());
      assertEquals(1000, defaultFileMonitor0.getChecksPerRun());
      
      defaultFileMonitor0.setChecksPerRun(0);
      assertEquals(0, defaultFileMonitor0.getChecksPerRun());
      assertEquals(1000L, defaultFileMonitor0.getDelay());
      assertFalse(defaultFileMonitor0.isRecursive());
      
      defaultFileMonitor0.stop();
      assertEquals(0, defaultFileMonitor0.getChecksPerRun());
      assertEquals(1000L, defaultFileMonitor0.getDelay());
      assertFalse(defaultFileMonitor0.isRecursive());
      
      FileListener fileListener0 = defaultFileMonitor0.getFileListener();
      assertEquals(0, defaultFileMonitor0.getChecksPerRun());
      assertEquals(1000L, defaultFileMonitor0.getDelay());
      assertFalse(defaultFileMonitor0.isRecursive());
      assertNull(fileListener0);
      
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      assertNull(defaultFileSystemManager0.getCacheStrategy());
      assertNotNull(defaultFileSystemManager0);
      
      URI uRI0 = MockURI.aFileURI;
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("file", uRI0.getScheme());
      assertNotNull(uRI0);
      
      try { 
        defaultFileSystemManager0.resolveFile(uRI0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find file with URI \"file:///tmp/foo.bar\" because it is a relative path, and no base URI was provided.
         //
         verifyException("org.apache.commons.vfs2.FileSystemException", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      assertEquals(1000, defaultFileMonitor0.getChecksPerRun());
      assertFalse(defaultFileMonitor0.isRecursive());
      assertEquals(1000L, defaultFileMonitor0.getDelay());
      assertNotNull(defaultFileMonitor0);
      
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("", "", 3830, 3830, "=$oPj:P2", "PJ:EGuUKePv*`2:", "=$oPj:P2", fileType0, "");
      assertEquals("=$oPj:P2", genericURLFileName0.getUserName());
      assertEquals(3830, genericURLFileName0.getPort());
      assertEquals(FileType.IMAGINARY, genericURLFileName0.getType());
      assertEquals("", genericURLFileName0.getScheme());
      assertEquals("PJ:EGuUKePv*`2:", genericURLFileName0.getPassword());
      assertEquals(3830, genericURLFileName0.getDefaultPort());
      assertEquals("", genericURLFileName0.getHostName());
      assertEquals("", genericURLFileName0.getQueryString());
      assertNotNull(genericURLFileName0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean0);
      
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      assertEquals("=$oPj:P2", genericURLFileName0.getUserName());
      assertEquals(3830, genericURLFileName0.getPort());
      assertEquals(FileType.IMAGINARY, genericURLFileName0.getType());
      assertEquals("", genericURLFileName0.getScheme());
      assertEquals("PJ:EGuUKePv*`2:", genericURLFileName0.getPassword());
      assertEquals(3830, genericURLFileName0.getDefaultPort());
      assertEquals("", genericURLFileName0.getHostName());
      assertEquals("", genericURLFileName0.getQueryString());
      assertEquals("://=$oPj%3aP2:PJ:EGuUKePv*`2:@=$oPj:P2?", virtualFileSystem0.getRootURI());
      assertFalse(virtualFileSystem0.isOpen());
      assertEquals(0.0, virtualFileSystem0.getLastModTimeAccuracy(), 0.01);
      assertTrue(virtualFileSystem0.isReleaseable());
      assertNotNull(virtualFileSystem0);
      
      String string0 = genericURLFileName0.getBaseName();
      assertEquals("=$oPj:P2", genericURLFileName0.getUserName());
      assertEquals(3830, genericURLFileName0.getPort());
      assertEquals(FileType.IMAGINARY, genericURLFileName0.getType());
      assertEquals("", genericURLFileName0.getScheme());
      assertEquals("PJ:EGuUKePv*`2:", genericURLFileName0.getPassword());
      assertEquals(3830, genericURLFileName0.getDefaultPort());
      assertEquals("", genericURLFileName0.getHostName());
      assertEquals("", genericURLFileName0.getQueryString());
      assertEquals("=$oPj:P2", string0);
      assertNotNull(string0);
      
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      assertEquals("=$oPj:P2", genericURLFileName0.getUserName());
      assertEquals(3830, genericURLFileName0.getPort());
      assertEquals(FileType.IMAGINARY, genericURLFileName0.getType());
      assertEquals("", genericURLFileName0.getScheme());
      assertEquals("PJ:EGuUKePv*`2:", genericURLFileName0.getPassword());
      assertEquals(3830, genericURLFileName0.getDefaultPort());
      assertEquals("", genericURLFileName0.getHostName());
      assertEquals("", genericURLFileName0.getQueryString());
      assertEquals("://=$oPj%3aP2:PJ:EGuUKePv*`2:@=$oPj:P2?", virtualFileSystem0.getRootURI());
      assertFalse(virtualFileSystem0.isReleaseable());
      assertFalse(virtualFileSystem0.isOpen());
      assertEquals(0.0, virtualFileSystem0.getLastModTimeAccuracy(), 0.01);
      assertFalse(delegateFileObject0.isAttached());
      assertFalse(delegateFileObject0.isContentOpen());
      assertEquals(8192, AbstractFileObject.DEFAULT_BUFFER_SIZE);
      assertNotNull(delegateFileObject0);
      
      defaultFileMonitor0.addFile(delegateFileObject0);
      assertEquals(1000, defaultFileMonitor0.getChecksPerRun());
      assertFalse(defaultFileMonitor0.isRecursive());
      assertEquals(1000L, defaultFileMonitor0.getDelay());
      assertEquals("=$oPj:P2", genericURLFileName0.getUserName());
      assertEquals(3830, genericURLFileName0.getPort());
      assertEquals(FileType.IMAGINARY, genericURLFileName0.getType());
      assertEquals("", genericURLFileName0.getScheme());
      assertEquals("PJ:EGuUKePv*`2:", genericURLFileName0.getPassword());
      assertEquals(3830, genericURLFileName0.getDefaultPort());
      assertEquals("", genericURLFileName0.getHostName());
      assertEquals("", genericURLFileName0.getQueryString());
      assertEquals("://=$oPj%3aP2:PJ:EGuUKePv*`2:@=$oPj:P2?", virtualFileSystem0.getRootURI());
      assertFalse(virtualFileSystem0.isReleaseable());
      assertFalse(virtualFileSystem0.isOpen());
      assertEquals(0.0, virtualFileSystem0.getLastModTimeAccuracy(), 0.01);
      assertFalse(delegateFileObject0.isContentOpen());
      assertTrue(delegateFileObject0.isAttached());
      assertEquals(8192, AbstractFileObject.DEFAULT_BUFFER_SIZE);
      
      int int0 = defaultFileMonitor0.getChecksPerRun();
      assertEquals(1000, defaultFileMonitor0.getChecksPerRun());
      assertFalse(defaultFileMonitor0.isRecursive());
      assertEquals(1000L, defaultFileMonitor0.getDelay());
      assertEquals(1000, int0);
      
      defaultFileMonitor0.stop();
      assertEquals(1000, defaultFileMonitor0.getChecksPerRun());
      assertFalse(defaultFileMonitor0.isRecursive());
      assertEquals(1000L, defaultFileMonitor0.getDelay());
      
      // Undeclared exception!
      try { 
        defaultFileMonitor0.removeFile(delegateFileObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.provider.AbstractFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      assertEquals(1000, defaultFileMonitor0.getChecksPerRun());
      assertFalse(defaultFileMonitor0.isRecursive());
      assertEquals(1000L, defaultFileMonitor0.getDelay());
      assertNotNull(defaultFileMonitor0);
      
      defaultFileMonitor0.setDelay(1611L);
      assertEquals(1000, defaultFileMonitor0.getChecksPerRun());
      assertFalse(defaultFileMonitor0.isRecursive());
      assertEquals(1611L, defaultFileMonitor0.getDelay());
      
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("", "", 3830, 3830, "=$oPj:P2", "=$oPj:P2", "=$oPj:P2", fileType0, "=$oPj:P2");
      assertEquals("", genericURLFileName0.getHostName());
      assertEquals("=$oPj:P2", genericURLFileName0.getQueryString());
      assertEquals("", genericURLFileName0.getScheme());
      assertEquals("=$oPj:P2", genericURLFileName0.getUserName());
      assertEquals(FileType.IMAGINARY, genericURLFileName0.getType());
      assertEquals(3830, genericURLFileName0.getPort());
      assertEquals("=$oPj:P2", genericURLFileName0.getPassword());
      assertEquals(3830, genericURLFileName0.getDefaultPort());
      assertNotNull(genericURLFileName0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean0);
      
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      assertEquals("", genericURLFileName0.getHostName());
      assertEquals("=$oPj:P2", genericURLFileName0.getQueryString());
      assertEquals("", genericURLFileName0.getScheme());
      assertEquals("=$oPj:P2", genericURLFileName0.getUserName());
      assertEquals(FileType.IMAGINARY, genericURLFileName0.getType());
      assertEquals(3830, genericURLFileName0.getPort());
      assertEquals("=$oPj:P2", genericURLFileName0.getPassword());
      assertEquals(3830, genericURLFileName0.getDefaultPort());
      assertFalse(virtualFileSystem0.isOpen());
      assertEquals("://=$oPj%3aP2:=$oPj:P2@=$oPj:P2?=$oPj:P2", virtualFileSystem0.getRootURI());
      assertEquals(0.0, virtualFileSystem0.getLastModTimeAccuracy(), 0.01);
      assertTrue(virtualFileSystem0.isReleaseable());
      assertNotNull(virtualFileSystem0);
      
      String string0 = genericURLFileName0.getBaseName();
      assertEquals("", genericURLFileName0.getHostName());
      assertEquals("=$oPj:P2", genericURLFileName0.getQueryString());
      assertEquals("", genericURLFileName0.getScheme());
      assertEquals("=$oPj:P2", genericURLFileName0.getUserName());
      assertEquals(FileType.IMAGINARY, genericURLFileName0.getType());
      assertEquals(3830, genericURLFileName0.getPort());
      assertEquals("=$oPj:P2", genericURLFileName0.getPassword());
      assertEquals(3830, genericURLFileName0.getDefaultPort());
      assertEquals("=$oPj:P2", string0);
      assertNotNull(string0);
      
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      assertEquals("", genericURLFileName0.getHostName());
      assertEquals("=$oPj:P2", genericURLFileName0.getQueryString());
      assertEquals("", genericURLFileName0.getScheme());
      assertEquals("=$oPj:P2", genericURLFileName0.getUserName());
      assertEquals(FileType.IMAGINARY, genericURLFileName0.getType());
      assertEquals(3830, genericURLFileName0.getPort());
      assertEquals("=$oPj:P2", genericURLFileName0.getPassword());
      assertEquals(3830, genericURLFileName0.getDefaultPort());
      assertFalse(virtualFileSystem0.isReleaseable());
      assertFalse(virtualFileSystem0.isOpen());
      assertEquals("://=$oPj%3aP2:=$oPj:P2@=$oPj:P2?=$oPj:P2", virtualFileSystem0.getRootURI());
      assertEquals(0.0, virtualFileSystem0.getLastModTimeAccuracy(), 0.01);
      assertFalse(delegateFileObject0.isAttached());
      assertFalse(delegateFileObject0.isContentOpen());
      assertEquals(8192, AbstractFileObject.DEFAULT_BUFFER_SIZE);
      assertNotNull(delegateFileObject0);
      
      defaultFileMonitor0.addFile(delegateFileObject0);
      assertEquals(1000, defaultFileMonitor0.getChecksPerRun());
      assertFalse(defaultFileMonitor0.isRecursive());
      assertEquals(1611L, defaultFileMonitor0.getDelay());
      assertEquals("", genericURLFileName0.getHostName());
      assertEquals("=$oPj:P2", genericURLFileName0.getQueryString());
      assertEquals("", genericURLFileName0.getScheme());
      assertEquals("=$oPj:P2", genericURLFileName0.getUserName());
      assertEquals(FileType.IMAGINARY, genericURLFileName0.getType());
      assertEquals(3830, genericURLFileName0.getPort());
      assertEquals("=$oPj:P2", genericURLFileName0.getPassword());
      assertEquals(3830, genericURLFileName0.getDefaultPort());
      assertFalse(virtualFileSystem0.isReleaseable());
      assertFalse(virtualFileSystem0.isOpen());
      assertEquals("://=$oPj%3aP2:=$oPj:P2@=$oPj:P2?=$oPj:P2", virtualFileSystem0.getRootURI());
      assertEquals(0.0, virtualFileSystem0.getLastModTimeAccuracy(), 0.01);
      assertTrue(delegateFileObject0.isAttached());
      assertFalse(delegateFileObject0.isContentOpen());
      assertEquals(8192, AbstractFileObject.DEFAULT_BUFFER_SIZE);
      
      int int0 = defaultFileMonitor0.getChecksPerRun();
      assertEquals(1000, defaultFileMonitor0.getChecksPerRun());
      assertFalse(defaultFileMonitor0.isRecursive());
      assertEquals(1611L, defaultFileMonitor0.getDelay());
      assertEquals(1000, int0);
      
      defaultFileMonitor0.stop();
      assertEquals(1000, defaultFileMonitor0.getChecksPerRun());
      assertFalse(defaultFileMonitor0.isRecursive());
      assertEquals(1611L, defaultFileMonitor0.getDelay());
      
      defaultFileMonitor0.addFile(delegateFileObject0);
      assertEquals(1000, defaultFileMonitor0.getChecksPerRun());
      assertFalse(defaultFileMonitor0.isRecursive());
      assertEquals(1611L, defaultFileMonitor0.getDelay());
      assertEquals("", genericURLFileName0.getHostName());
      assertEquals("=$oPj:P2", genericURLFileName0.getQueryString());
      assertEquals("", genericURLFileName0.getScheme());
      assertEquals("=$oPj:P2", genericURLFileName0.getUserName());
      assertEquals(FileType.IMAGINARY, genericURLFileName0.getType());
      assertEquals(3830, genericURLFileName0.getPort());
      assertEquals("=$oPj:P2", genericURLFileName0.getPassword());
      assertEquals(3830, genericURLFileName0.getDefaultPort());
      assertFalse(virtualFileSystem0.isReleaseable());
      assertFalse(virtualFileSystem0.isOpen());
      assertEquals("://=$oPj%3aP2:=$oPj:P2@=$oPj:P2?=$oPj:P2", virtualFileSystem0.getRootURI());
      assertEquals(0.0, virtualFileSystem0.getLastModTimeAccuracy(), 0.01);
      assertTrue(delegateFileObject0.isAttached());
      assertFalse(delegateFileObject0.isContentOpen());
      assertEquals(8192, AbstractFileObject.DEFAULT_BUFFER_SIZE);
      
      // Undeclared exception!
      try { 
        defaultFileMonitor0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DefaultFileMonitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      assertFalse(defaultFileMonitor0.isRecursive());
      assertEquals(1000, defaultFileMonitor0.getChecksPerRun());
      assertEquals(1000L, defaultFileMonitor0.getDelay());
      assertNotNull(defaultFileMonitor0);
      
      defaultFileMonitor0.stop();
      assertFalse(defaultFileMonitor0.isRecursive());
      assertEquals(1000, defaultFileMonitor0.getChecksPerRun());
      assertEquals(1000L, defaultFileMonitor0.getDelay());
      
      defaultFileMonitor0.stop();
      assertFalse(defaultFileMonitor0.isRecursive());
      assertEquals(1000, defaultFileMonitor0.getChecksPerRun());
      assertEquals(1000L, defaultFileMonitor0.getDelay());
      
      defaultFileMonitor0.start();
      assertFalse(defaultFileMonitor0.isRecursive());
      assertEquals(1000, defaultFileMonitor0.getChecksPerRun());
      assertEquals(1000L, defaultFileMonitor0.getDelay());
      
      defaultFileMonitor0.run();
      defaultFileMonitor0.getDelay();
      defaultFileMonitor0.setDelay(1000L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      defaultFileMonitor0.setDelay(1000L);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.setRecursive(true);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.getChecksPerRun();
      defaultFileMonitor0.getChecksPerRun();
      defaultFileMonitor0.getDelay();
      Integer integer0 = new Integer(1000);
      defaultFileMonitor0.isRecursive();
      defaultFileMonitor0.getChecksPerRun();
      FileType fileType0 = FileType.FOLDER;
      VirtualFileName virtualFileName0 = new VirtualFileName((String) null, "", fileType0);
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(virtualFileName0, fileSystemOptions0);
      FileObject fileObject0 = virtualFileSystem0.createFile(virtualFileName0);
      defaultFileMonitor0.removeFile(fileObject0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      assertEquals(1000, defaultFileMonitor0.getChecksPerRun());
      assertEquals(1000L, defaultFileMonitor0.getDelay());
      assertFalse(defaultFileMonitor0.isRecursive());
      assertNotNull(defaultFileMonitor0);
      
      defaultFileMonitor0.start();
      assertEquals(1000, defaultFileMonitor0.getChecksPerRun());
      assertEquals(1000L, defaultFileMonitor0.getDelay());
      assertFalse(defaultFileMonitor0.isRecursive());
      
      // Undeclared exception!
      try { 
        defaultFileMonitor0.start();
        fail("Expecting exception: IllegalThreadStateException");
      
      } catch(IllegalThreadStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.stop();
      defaultFileMonitor0.start();
      long long0 = defaultFileMonitor0.getDelay();
      assertEquals(1000L, long0);
      
      defaultFileMonitor0.run();
      defaultFileMonitor0.queueAddFile((FileObject) null);
      defaultFileMonitor0.setDelay(1000L);
      defaultFileMonitor0.stop();
      assertEquals(1000, defaultFileMonitor0.getChecksPerRun());
      
      defaultFileMonitor0.setChecksPerRun(1000);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.getChecksPerRun();
      defaultFileMonitor0.getChecksPerRun();
      long long1 = defaultFileMonitor0.getDelay();
      assertEquals(1000L, long1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HttpFileSystem httpFileSystem0 = mock(HttpFileSystem.class, new ViolatedAssumptionAnswer());
      DefaultLocalFileProvider defaultLocalFileProvider0 = new DefaultLocalFileProvider();
      // Undeclared exception!
      try { 
        defaultLocalFileProvider0.findLocalFile((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.provider.local.DefaultLocalFileProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(0L);
      defaultFileMonitor0.getFileListener();
      defaultFileMonitor0.setRecursive(false);
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      try { 
        defaultFileSystemManager0.resolveFile("%", fileSystemOptions0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid URI escape sequence \"%\".
         //
         verifyException("org.apache.commons.vfs2.provider.UriParser", e);
      }
  }
}
