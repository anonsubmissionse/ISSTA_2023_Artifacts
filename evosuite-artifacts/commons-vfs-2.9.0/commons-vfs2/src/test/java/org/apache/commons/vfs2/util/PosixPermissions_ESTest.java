/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 04:35:25 GMT 2022
 */

package org.apache.commons.vfs2.util;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.vfs2.util.PosixPermissions;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PosixPermissions_ESTest extends PosixPermissions_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(32, true, false);
      Integer integer0 = posixPermissions0.makeWritable(true, false);
      assertEquals(178, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions((-1528), false, false);
      Integer integer0 = posixPermissions0.makeReadable(true, false);
      assertFalse(posixPermissions0.isExecutable());
      assertEquals((-1236), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions((-1723), true, true);
      int int0 = posixPermissions0.makeExecutable(true, false);
      assertTrue(posixPermissions0.isExecutable());
      assertEquals((-1715), int0);
      assertEquals((-1723), posixPermissions0.getPermissions());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(0, false, false);
      Integer integer0 = posixPermissions0.makeWritable(false, false);
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions((-578), true, true);
      Integer integer0 = posixPermissions0.makeWritable(true, true);
      assertFalse(posixPermissions0.isExecutable());
      assertEquals((-578), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(4, false, true);
      Integer integer0 = posixPermissions0.makeReadable(false, true);
      assertFalse(posixPermissions0.isReadable());
      assertEquals(4, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(0, false, false);
      Integer integer0 = posixPermissions0.makeReadable(false, false);
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(0, false, true);
      int int0 = posixPermissions0.makeExecutable(false, true);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(0, false, true);
      int int0 = posixPermissions0.getPermissions();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(3, true, true);
      int int0 = posixPermissions0.getPermissions();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PosixPermissions.Type posixPermissions_Type0 = PosixPermissions.Type.GroupReadable;
      int int0 = posixPermissions_Type0.getMask();
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(32, true, true);
      Integer integer0 = posixPermissions0.makeWritable(false, false);
      assertEquals(32, (int)integer0);
      assertFalse(posixPermissions0.isReadable());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions((-57), false, false);
      Integer integer0 = posixPermissions0.makeReadable(false, false);
      assertTrue(posixPermissions0.isExecutable());
      assertEquals((-317), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(128, false, true);
      boolean boolean0 = posixPermissions0.isWritable();
      assertEquals(128, posixPermissions0.getPermissions());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(128, true, true);
      boolean boolean0 = posixPermissions0.isWritable();
      assertEquals(128, posixPermissions0.getPermissions());
      assertTrue(boolean0);
      assertFalse(posixPermissions0.isExecutable());
      assertFalse(posixPermissions0.isReadable());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions((-57), false, false);
      boolean boolean0 = posixPermissions0.isWritable();
      assertTrue(posixPermissions0.isExecutable());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(128, false, true);
      boolean boolean0 = posixPermissions0.isReadable();
      assertFalse(posixPermissions0.isWritable());
      assertEquals(128, posixPermissions0.getPermissions());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions((-57), false, false);
      boolean boolean0 = posixPermissions0.isReadable();
      assertTrue(posixPermissions0.isExecutable());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(128, false, true);
      boolean boolean0 = posixPermissions0.isExecutable();
      assertEquals(128, posixPermissions0.getPermissions());
      assertFalse(posixPermissions0.isWritable());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(32, true, true);
      boolean boolean0 = posixPermissions0.isExecutable();
      assertFalse(posixPermissions0.isReadable());
      assertEquals(32, posixPermissions0.getPermissions());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions((-57), false, false);
      boolean boolean0 = posixPermissions0.isExecutable();
      assertTrue(boolean0);
      assertTrue(posixPermissions0.isWritable());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(128, true, true);
      boolean boolean0 = posixPermissions0.isReadable();
      assertFalse(posixPermissions0.isExecutable());
      assertFalse(boolean0);
      assertTrue(posixPermissions0.isWritable());
      assertEquals(128, posixPermissions0.getPermissions());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(128, true, true);
      int int0 = posixPermissions0.makeExecutable(true, true);
      assertEquals(192, int0);
      assertTrue(posixPermissions0.isWritable());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions((-57), false, false);
      int int0 = posixPermissions0.getPermissions();
      assertEquals((-57), int0);
      assertTrue(posixPermissions0.isWritable());
  }
}
