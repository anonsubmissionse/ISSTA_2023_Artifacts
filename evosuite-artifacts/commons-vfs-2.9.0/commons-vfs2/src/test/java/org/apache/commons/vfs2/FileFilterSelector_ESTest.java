/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 05:04:30 GMT 2022
 */

package org.apache.commons.vfs2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.vfs2.FileFilter;
import org.apache.commons.vfs2.FileFilterSelector;
import org.apache.commons.vfs2.FileObject;
import org.apache.commons.vfs2.FileSelectInfo;
import org.apache.commons.vfs2.filter.AndFileFilter;
import org.apache.commons.vfs2.filter.FalseFileFilter;
import org.apache.commons.vfs2.filter.IOCase;
import org.apache.commons.vfs2.filter.NameFileFilter;
import org.apache.commons.vfs2.filter.OrFileFilter;
import org.apache.commons.vfs2.filter.TrueFileFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileFilterSelector_ESTest extends FileFilterSelector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TrueFileFilter trueFileFilter0 = (TrueFileFilter)TrueFileFilter.TRUE;
      FileFilterSelector fileFilterSelector0 = new FileFilterSelector(trueFileFilter0);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = fileFilterSelector0.accept(fileSelectInfo0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FalseFileFilter falseFileFilter0 = (FalseFileFilter)FalseFileFilter.FALSE;
      FileFilterSelector fileFilterSelector0 = new FileFilterSelector(falseFileFilter0);
      try { 
        fileFilterSelector0.includeFile((FileSelectInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.FileDepthSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OrFileFilter orFileFilter0 = new OrFileFilter();
      FileFilterSelector fileFilterSelector0 = new FileFilterSelector(orFileFilter0);
      FileFilter[] fileFilterArray0 = new FileFilter[4];
      fileFilterArray0[0] = (FileFilter) orFileFilter0;
      fileFilterArray0[1] = (FileFilter) orFileFilter0;
      fileFilterArray0[2] = (FileFilter) orFileFilter0;
      fileFilterArray0[3] = (FileFilter) orFileFilter0;
      AndFileFilter andFileFilter0 = new AndFileFilter(fileFilterArray0);
      orFileFilter0.addFileFilter(andFileFilter0);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        fileFilterSelector0.accept(fileSelectInfo0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      String[] stringArray0 = new String[4];
      NameFileFilter nameFileFilter0 = new NameFileFilter(iOCase0, stringArray0);
      FileFilterSelector fileFilterSelector0 = new FileFilterSelector(nameFileFilter0);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn((FileObject) null).when(fileSelectInfo0).getFile();
      try { 
        fileFilterSelector0.accept(fileSelectInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.filter.NameFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FalseFileFilter falseFileFilter0 = (FalseFileFilter)FalseFileFilter.FALSE;
      FileFilterSelector fileFilterSelector0 = new FileFilterSelector(falseFileFilter0);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = fileFilterSelector0.accept(fileSelectInfo0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FileFilterSelector fileFilterSelector0 = new FileFilterSelector();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      try { 
        fileFilterSelector0.accept(fileSelectInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Configure a fileFilter or override accept().
         //
         verifyException("org.apache.commons.vfs2.FileFilterSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TrueFileFilter trueFileFilter0 = (TrueFileFilter)TrueFileFilter.TRUE;
      FileFilterSelector fileFilterSelector0 = new FileFilterSelector(trueFileFilter0);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(fileSelectInfo0).getDepth();
      boolean boolean0 = fileFilterSelector0.includeFile(fileSelectInfo0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FalseFileFilter falseFileFilter0 = (FalseFileFilter)FalseFileFilter.FALSE;
      FileFilterSelector fileFilterSelector0 = new FileFilterSelector(falseFileFilter0);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(fileSelectInfo0).getDepth();
      boolean boolean0 = fileFilterSelector0.includeFile(fileSelectInfo0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      FileFilterSelector fileFilterSelector0 = new FileFilterSelector();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(fileSelectInfo0).getDepth();
      try { 
        fileFilterSelector0.includeFile(fileSelectInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Configure a fileFilter or override accept().
         //
         verifyException("org.apache.commons.vfs2.FileFilterSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      FalseFileFilter falseFileFilter0 = (FalseFileFilter)FalseFileFilter.FALSE;
      FileFilterSelector fileFilterSelector0 = new FileFilterSelector(falseFileFilter0);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(fileSelectInfo0).getDepth();
      boolean boolean0 = fileFilterSelector0.includeFile(fileSelectInfo0);
      assertFalse(boolean0);
  }
}
