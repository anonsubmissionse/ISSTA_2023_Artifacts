/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 05:19:32 GMT 2022
 */

package org.apache.commons.vfs2.operations.vcs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.util.Calendar;
import org.apache.commons.vfs2.operations.vcs.VcsLogEntry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VcsLogEntry_ESTest extends VcsLogEntry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry("/gF,l?B9&S:sQ", 0L, "", (Calendar) null, "/gF,l?B9&S:sQ");
      vcsLogEntry0.getRevision();
      assertEquals("/gF,l?B9&S:sQ", vcsLogEntry0.getPath());
      assertEquals("/gF,l?B9&S:sQ", vcsLogEntry0.getAuthor());
      assertEquals("", vcsLogEntry0.getMessage());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry("org.apache.log4j.RollingCalendar", (-1523L), "zqJDT]%KGWf1S", (Calendar) null, "zqJDT]%KGWf1S");
      long long0 = vcsLogEntry0.getRevision();
      assertEquals((-1523L), long0);
      assertEquals("zqJDT]%KGWf1S", vcsLogEntry0.getPath());
      assertEquals("zqJDT]%KGWf1S", vcsLogEntry0.getMessage());
      assertEquals("org.apache.log4j.RollingCalendar", vcsLogEntry0.getAuthor());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry((String) null, 0L, (String) null, (Calendar) null, (String) null);
      String string0 = vcsLogEntry0.getPath();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry("", 1L, "", (Calendar) null, "");
      vcsLogEntry0.getPath();
      assertEquals(1L, vcsLogEntry0.getRevision());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry((String) null, 0L, (String) null, (Calendar) null, (String) null);
      String string0 = vcsLogEntry0.getMessage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry("/gF,l?B9&S:sQ", 0L, "", (Calendar) null, "/gF,l?B9&S:sQ");
      String string0 = vcsLogEntry0.getMessage();
      assertEquals("", string0);
      assertEquals("/gF,l?B9&S:sQ", vcsLogEntry0.getAuthor());
      assertEquals("/gF,l?B9&S:sQ", vcsLogEntry0.getPath());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry("org.apache.log4j.RollingCalendar", (-1523L), "zqJDT]%KGWf1S", (Calendar) null, "zqJDT]%KGWf1S");
      vcsLogEntry0.getDate();
      assertEquals((-1523L), vcsLogEntry0.getRevision());
      assertEquals("org.apache.log4j.RollingCalendar", vcsLogEntry0.getAuthor());
      assertEquals("zqJDT]%KGWf1S", vcsLogEntry0.getMessage());
      assertEquals("zqJDT]%KGWf1S", vcsLogEntry0.getPath());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry((String) null, 0L, (String) null, (Calendar) null, (String) null);
      String string0 = vcsLogEntry0.getAuthor();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry("", 1L, "", (Calendar) null, "");
      vcsLogEntry0.getAuthor();
      assertEquals(1L, vcsLogEntry0.getRevision());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Calendar calendar0 = mock(Calendar.class, new ViolatedAssumptionAnswer());
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry("Unknown periodicity type.", 42L, "Unknown periodicity type.", calendar0, "Unknown periodicity type.");
      vcsLogEntry0.getAuthor();
      assertEquals(42L, vcsLogEntry0.getRevision());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Calendar calendar0 = mock(Calendar.class, new ViolatedAssumptionAnswer());
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry("Unknown periodicity type.", 42L, "Unknown periodicity type.", calendar0, "Unknown periodicity type.");
      long long0 = vcsLogEntry0.getRevision();
      assertEquals(42L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Calendar calendar0 = mock(Calendar.class, new ViolatedAssumptionAnswer());
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry("Unknown periodicity type.", 42L, "Unknown periodicity type.", calendar0, "Unknown periodicity type.");
      vcsLogEntry0.getPath();
      assertEquals(42L, vcsLogEntry0.getRevision());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Calendar calendar0 = mock(Calendar.class, new ViolatedAssumptionAnswer());
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry("Unknown periodicity type.", 42L, "Unknown periodicity type.", calendar0, "Unknown periodicity type.");
      vcsLogEntry0.getMessage();
      assertEquals(42L, vcsLogEntry0.getRevision());
  }
}
