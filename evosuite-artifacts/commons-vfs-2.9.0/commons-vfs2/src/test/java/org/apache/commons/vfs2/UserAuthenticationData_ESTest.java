/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 05:10:33 GMT 2022
 */

package org.apache.commons.vfs2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.vfs2.UserAuthenticationData;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UserAuthenticationData_ESTest extends UserAuthenticationData_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UserAuthenticationData userAuthenticationData0 = new UserAuthenticationData();
      int int0 = userAuthenticationData0.USERNAME.compareTo(userAuthenticationData0.DOMAIN);
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UserAuthenticationData userAuthenticationData0 = new UserAuthenticationData();
      char[] charArray0 = userAuthenticationData0.getData(userAuthenticationData0.PASSWORD);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UserAuthenticationData.Type userAuthenticationData_Type0 = UserAuthenticationData.USERNAME;
      UserAuthenticationData userAuthenticationData0 = new UserAuthenticationData();
      char[] charArray0 = new char[2];
      userAuthenticationData0.setData(userAuthenticationData_Type0, charArray0);
      char[] charArray1 = userAuthenticationData0.getData(userAuthenticationData_Type0);
      assertSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UserAuthenticationData.Type userAuthenticationData_Type0 = new UserAuthenticationData.Type("~P");
      UserAuthenticationData userAuthenticationData0 = new UserAuthenticationData();
      char[] charArray0 = new char[0];
      userAuthenticationData0.setData(userAuthenticationData_Type0, charArray0);
      char[] charArray1 = userAuthenticationData0.getData(userAuthenticationData_Type0);
      assertArrayEquals(new char[] {}, charArray1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UserAuthenticationData userAuthenticationData0 = new UserAuthenticationData();
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        userAuthenticationData0.setData((UserAuthenticationData.Type) null, charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UserAuthenticationData.Type userAuthenticationData_Type0 = new UserAuthenticationData.Type("");
      UserAuthenticationData userAuthenticationData0 = new UserAuthenticationData();
      char[] charArray0 = new char[5];
      userAuthenticationData0.setData(userAuthenticationData_Type0, charArray0);
      userAuthenticationData0.cleanup();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UserAuthenticationData userAuthenticationData0 = new UserAuthenticationData();
      userAuthenticationData0.setData(userAuthenticationData0.DOMAIN, (char[]) null);
      userAuthenticationData0.cleanup();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UserAuthenticationData.Type userAuthenticationData_Type0 = new UserAuthenticationData.Type("H");
      UserAuthenticationData userAuthenticationData0 = new UserAuthenticationData();
      boolean boolean0 = userAuthenticationData0.DOMAIN.equals(userAuthenticationData_Type0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UserAuthenticationData.Type userAuthenticationData_Type0 = new UserAuthenticationData.Type("");
      boolean boolean0 = userAuthenticationData_Type0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UserAuthenticationData.Type userAuthenticationData_Type0 = UserAuthenticationData.DOMAIN;
      boolean boolean0 = userAuthenticationData_Type0.equals(userAuthenticationData_Type0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UserAuthenticationData.Type userAuthenticationData_Type0 = new UserAuthenticationData.Type("H");
      boolean boolean0 = userAuthenticationData_Type0.equals("H");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UserAuthenticationData.Type userAuthenticationData_Type0 = new UserAuthenticationData.Type("H");
      String string0 = userAuthenticationData_Type0.toString();
      assertEquals("H", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UserAuthenticationData userAuthenticationData0 = new UserAuthenticationData();
      // Undeclared exception!
      try { 
        userAuthenticationData0.getData((UserAuthenticationData.Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }
}
