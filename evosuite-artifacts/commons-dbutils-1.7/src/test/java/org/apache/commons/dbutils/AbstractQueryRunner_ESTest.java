/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 15:13:16 GMT 2022
 */

package org.apache.commons.dbutils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.beans.PropertyDescriptor;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ParameterMetaData;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import javax.sql.DataSource;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.dbutils.AsyncQueryRunner;
import org.apache.commons.dbutils.BasicRowProcessor;
import org.apache.commons.dbutils.QueryRunner;
import org.apache.commons.dbutils.ResultSetHandler;
import org.apache.commons.dbutils.StatementConfiguration;
import org.apache.commons.dbutils.handlers.BeanHandler;
import org.apache.commons.dbutils.handlers.ScalarHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractQueryRunner_ESTest extends AbstractQueryRunner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, true);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("").when(resultSet0).toString();
      queryRunner0.wrap(resultSet0);
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(313).when(parameterMetaData0).getParameterCount();
      CallableStatement callableStatement0 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      doReturn("class", "class", "", "").when(callableStatement0).toString();
      doReturn(0).when(callableStatement0).executeUpdate();
      doReturn(parameterMetaData0).when(callableStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement0).when(connection0).prepareCall(anyString());
      CallableStatement callableStatement1 = queryRunner0.prepareCall(connection0, "ekjf 1");
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement1).when(connection1).prepareStatement(anyString());
      PreparedStatement preparedStatement0 = queryRunner0.prepareStatement(connection1, "org.apache.commons.dbutils.AbstractQueryRunner");
      Connection connection2 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn("").when(connection2).toString();
      doReturn(preparedStatement0, preparedStatement0).when(connection2).prepareStatement(anyString());
      DataSource dataSource1 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn("class", "class").when(dataSource1).toString();
      doReturn(connection2).when(dataSource1).getConnection();
      QueryRunner queryRunner1 = new QueryRunner(dataSource1, false);
      Connection connection3 = queryRunner1.prepareConnection();
      Integer integer0 = new Integer((-1461000438));
      queryRunner0.update(connection3, "We*MOw$<*PVkWdn ", (Object) integer0);
      Class<String> class0 = String.class;
      BeanHandler<String> beanHandler0 = new BeanHandler<String>(class0);
      try { 
        queryRunner1.query(connection3, "3,S}9", (ResultSetHandler<String>) beanHandler0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Wrong number of parameters: expected 313, was given 0 Query: 3,S}9 Parameters: []
         //
         verifyException("org.apache.commons.dbutils.AbstractQueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, true);
      Integer integer0 = new Integer((-1461000438));
      PropertyDescriptor[] propertyDescriptorArray0 = new PropertyDescriptor[0];
      queryRunner0.fillStatementWithBean((PreparedStatement) null, (Object) integer0, propertyDescriptorArray0);
      assertTrue(queryRunner0.isPmdKnownBroken());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      QueryRunner queryRunner0 = new QueryRunner();
      queryRunner0.close((Statement) null);
      assertFalse(queryRunner0.isPmdKnownBroken());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      QueryRunner queryRunner0 = new QueryRunner();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      ResultSet resultSet1 = queryRunner0.wrap(resultSet0);
      queryRunner0.close(resultSet1);
      assertFalse(queryRunner0.isPmdKnownBroken());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      int int0 = (-114);
      Integer integer0 = new Integer((-114));
      Integer integer1 = new Integer(108);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer0, integer0, integer0, integer1);
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, true, statementConfiguration0);
      PreparedStatement preparedStatement0 = null;
      String[] stringArray0 = new String[0];
      queryRunner0.fillStatementWithBean((PreparedStatement) null, (Object) "6", stringArray0);
      boolean boolean0 = true;
      BasicRowProcessor basicRowProcessor0 = new BasicRowProcessor();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer((-2700));
      Integer integer1 = new Integer(13);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer0, integer0, integer0, integer1);
      QueryRunner queryRunner0 = new QueryRunner(statementConfiguration0);
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer1, integer0, integer0, integer0);
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, statementConfiguration0);
      queryRunner0.close((Connection) null);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0);
      AsyncQueryRunner asyncQueryRunner0 = new AsyncQueryRunner(scheduledThreadPoolExecutor0, queryRunner0);
      String string0 = "QueryRunner requires a DataSource to be invoked in this way, or a Connection should be passed in";
      ScalarHandler<Integer> scalarHandler0 = new ScalarHandler<Integer>("QueryRunner requires a DataSource to be invoked in this way, or a Connection should be passed in");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AsyncQueryRunner asyncQueryRunner0 = new AsyncQueryRunner((ExecutorService) null);
      ResultSet resultSet0 = asyncQueryRunner0.wrap((ResultSet) null);
      assertNull(resultSet0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(connection0).toString();
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(dataSource0).toString();
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Connection connection1 = queryRunner0.prepareConnection();
      queryRunner0.prepareStatement(connection1, "");
      assertFalse(queryRunner0.isPmdKnownBroken());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(dataSource0).toString();
      doReturn((Connection) null).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, false);
      Connection connection0 = queryRunner0.prepareConnection();
      assertNull(connection0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer((-2700));
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer0, integer0, integer0, integer0);
      QueryRunner queryRunner0 = new QueryRunner(statementConfiguration0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((CallableStatement) null).when(connection0).prepareCall(anyString());
      queryRunner0.prepareCall(connection0, "warnings");
      assertFalse(queryRunner0.isPmdKnownBroken());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(4);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer0, integer0, integer0, integer0);
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, true, statementConfiguration0);
      boolean boolean0 = queryRunner0.isPmdKnownBroken();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      QueryRunner queryRunner0 = new QueryRunner();
      queryRunner0.getDataSource();
      assertFalse(queryRunner0.isPmdKnownBroken());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      QueryRunner queryRunner0 = new QueryRunner();
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        queryRunner0.rethrow((SQLException) null, "3Q31}O", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.dbutils.AbstractQueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      // Undeclared exception!
      try { 
        queryRunner0.prepareStatement((Connection) null, "org.apache.commons.dbutils.handlers.BeanHandler", 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.dbutils.AbstractQueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(5, threadFactory0);
      AsyncQueryRunner asyncQueryRunner0 = new AsyncQueryRunner(scheduledThreadPoolExecutor0);
      try { 
        asyncQueryRunner0.prepareConnection();
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // QueryRunner requires a DataSource to be invoked in this way, or a Connection should be passed in
         //
         verifyException("org.apache.commons.dbutils.AbstractQueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(connection0).toString();
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(dataSource0).toString();
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Connection connection1 = queryRunner0.prepareConnection();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "8L{sZo";
      // Undeclared exception!
      try { 
        queryRunner0.fillStatementWithBean((PreparedStatement) null, (Object) connection1, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't find bean property: class codegen.java.sql.Connection$MockitoMock$1690925045 8L{sZo
         //
         verifyException("org.apache.commons.dbutils.AbstractQueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, false, (StatementConfiguration) null);
      PropertyDescriptor[] propertyDescriptorArray0 = new PropertyDescriptor[0];
      // Undeclared exception!
      try { 
        queryRunner0.fillStatementWithBean((PreparedStatement) null, (Object) "*w{2>e:~?]{'B]", propertyDescriptorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.dbutils.AbstractQueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, true);
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(parameterMetaData0).getParameterCount();
      CallableStatement callableStatement0 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(callableStatement0).toString();
      doReturn(parameterMetaData0).when(callableStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement0).when(connection0).prepareCall(anyString());
      CallableStatement callableStatement1 = queryRunner0.prepareCall(connection0, "ekjf 1");
      DataSource dataSource1 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      QueryRunner queryRunner1 = new QueryRunner(dataSource1, false);
      Object[] objectArray0 = new Object[4];
      try { 
        queryRunner1.fillStatement(callableStatement1, objectArray0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Wrong number of parameters: expected 0, was given 4
         //
         verifyException("org.apache.commons.dbutils.AbstractQueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-767));
      Integer integer1 = new Integer(2353);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer0, (Integer) null, (Integer) null, integer1);
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, true, statementConfiguration0);
      MockThrowable mockThrowable0 = new MockThrowable("U,`1!F$#g");
      SQLException sQLException0 = new SQLException("U,`1!F$#g", mockThrowable0);
      Object[] objectArray0 = new Object[4];
      objectArray0[3] = (Object) "U,`1!F$#g";
      try { 
        queryRunner0.rethrow(sQLException0, "Couldn't invoke method with 0 arguments: ", objectArray0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // U,`1!F$#g Query: Couldn't invoke method with 0 arguments:  Parameters: [null, null, null, U,`1!F$#g]
         //
         verifyException("org.apache.commons.dbutils.AbstractQueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(connection1).toString();
      DataSource dataSource1 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(dataSource1).toString();
      doReturn(connection1).when(dataSource1).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource1, true);
      Connection connection2 = queryRunner0.prepareConnection();
      String string0 = "i=+a%RZ4Zb`+}";
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) connection2;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) queryRunner0;
      // Undeclared exception!
      try { 
        queryRunner0.fillStatement((PreparedStatement) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.dbutils.AbstractQueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, true);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      queryRunner0.wrap(resultSet0);
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(preparedStatement0).toString();
      doReturn((ParameterMetaData) null).when(preparedStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      PreparedStatement preparedStatement1 = queryRunner0.prepareStatement(connection0, "");
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement1).when(connection1).prepareStatement(anyString());
      PreparedStatement preparedStatement2 = queryRunner0.prepareStatement(connection1, "org.apache.commons.dbutils.AbstractQueryRunner");
      Connection connection2 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(connection2).toString();
      DataSource dataSource1 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(dataSource1).toString();
      doReturn(connection2).when(dataSource1).getConnection();
      QueryRunner queryRunner1 = new QueryRunner(dataSource1, false);
      queryRunner1.prepareConnection();
      Object[] objectArray0 = new Object[4];
      queryRunner1.fillStatement(preparedStatement2, objectArray0);
      Class<String> class0 = String.class;
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      QueryRunner queryRunner0 = new QueryRunner(false);
      Object[] objectArray0 = null;
      // Undeclared exception!
      try { 
        queryRunner0.fillStatement((PreparedStatement) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.dbutils.AbstractQueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dataSource0).toString();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      queryRunner0.getDataSource();
      Object[] objectArray0 = new Object[0];
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AsyncQueryRunner asyncQueryRunner0 = new AsyncQueryRunner((ExecutorService) null);
      SQLException sQLException0 = new SQLException();
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) null;
      try { 
        asyncQueryRunner0.rethrow(sQLException0, "$Ax>\"EDT}QG=+5", objectArray0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         //  Query: $Ax>\"EDT}QG=+5 Parameters: [null, null, null, null, null]
         //
         verifyException("org.apache.commons.dbutils.AbstractQueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(connection0).toString();
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(dataSource0).toString();
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Connection connection1 = queryRunner0.prepareConnection();
      PreparedStatement preparedStatement0 = null;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "8L{Z";
      stringArray0[0] = "closed";
      // Undeclared exception!
      try { 
        queryRunner0.fillStatementWithBean((PreparedStatement) null, (Object) connection1, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // propertyName can't be null: 1
         //
         verifyException("org.apache.commons.dbutils.AbstractQueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-1796932778)).when(parameterMetaData0).getParameterCount();
      CallableStatement callableStatement0 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(callableStatement0).toString();
      doReturn(0).when(callableStatement0).executeUpdate();
      doReturn(parameterMetaData0).when(callableStatement0).getParameterMetaData();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement0).when(connection0).prepareCall(anyString());
      CallableStatement callableStatement1 = queryRunner0.prepareCall(connection0, "ekjf 1");
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement1).when(connection1).prepareStatement(anyString());
      PreparedStatement preparedStatement0 = queryRunner0.prepareStatement(connection1, "");
      Connection connection2 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection2).prepareStatement(anyString());
      PreparedStatement preparedStatement1 = queryRunner0.prepareStatement(connection2, "org.apache.commons.dbutils.AbstractQueryRunner");
      Connection connection3 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(connection3).toString();
      doReturn(preparedStatement1).when(connection3).prepareStatement(anyString());
      DataSource dataSource1 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(dataSource1).toString();
      doReturn(connection3).when(dataSource1).getConnection();
      QueryRunner queryRunner1 = new QueryRunner(dataSource1, false);
      Connection connection4 = queryRunner1.prepareConnection();
      Integer integer0 = new Integer((-1461000438));
      queryRunner0.update(connection4, "We*MOw$<*PVkWdn ", (Object) integer0);
      PropertyDescriptor[] propertyDescriptorArray0 = new PropertyDescriptor[0];
      try { 
        queryRunner1.fillStatementWithBean((PreparedStatement) callableStatement1, (Object) integer0, propertyDescriptorArray0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Wrong number of parameters: expected -1796932778, was given 0
         //
         verifyException("org.apache.commons.dbutils.AbstractQueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(resultSet0).toString();
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true).when(resultSet0).next();
      ResultSet resultSet1 = queryRunner0.wrap(resultSet0);
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(parameterMetaData0).getParameterCount();
      CallableStatement callableStatement0 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(callableStatement0).toString();
      doReturn(resultSet1).when(callableStatement0).executeQuery();
      doReturn(0).when(callableStatement0).executeUpdate();
      doReturn(parameterMetaData0).when(callableStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement0).when(connection0).prepareCall(anyString());
      CallableStatement callableStatement1 = queryRunner0.prepareCall(connection0, "ekjf 1");
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(connection1).toString();
      doReturn(callableStatement1, callableStatement1).when(connection1).prepareStatement(anyString());
      DataSource dataSource1 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(dataSource1).toString();
      doReturn(connection1).when(dataSource1).getConnection();
      QueryRunner queryRunner1 = new QueryRunner(dataSource1, false);
      Connection connection2 = queryRunner1.prepareConnection();
      Class<String> class0 = String.class;
      BeanHandler<String> beanHandler0 = new BeanHandler<String>(class0);
      queryRunner0.update(connection2, "org.apache.commons.dbutils.AbstractQueryRunner", (Object) null);
      queryRunner1.query(connection2, "3,S}9", (ResultSetHandler<String>) beanHandler0);
      assertFalse(queryRunner1.isPmdKnownBroken());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-1));
      StatementConfiguration statementConfiguration0 = mock(StatementConfiguration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(statementConfiguration0).isFetchDirectionSet();
      doReturn(false).when(statementConfiguration0).isFetchSizeSet();
      doReturn(false).when(statementConfiguration0).isMaxFieldSizeSet();
      doReturn(false).when(statementConfiguration0).isMaxRowsSet();
      doReturn(false).when(statementConfiguration0).isQueryTimeoutSet();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, statementConfiguration0);
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.commons.dbutils.AsyncQueryRunner$16").when(preparedStatement0).toString();
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection1).prepareStatement(anyString() , anyInt());
      queryRunner0.prepareStatement(connection1, "4kxSMxHal6|;RM6fh.", (-1));
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "4kxSMxHal6|;RM6fh.";
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer((-1));
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer1, integer0, integer0, integer1, integer0);
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, statementConfiguration0);
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.commons.dbutils.AsyncQueryRunner$16").when(preparedStatement0).toString();
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection1).prepareStatement(anyString() , anyInt());
      queryRunner0.prepareStatement(connection1, "4kxSMxHal6|;RM6fh.", 7);
      Connection connection2 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Object[][] objectArray0 = new Object[8][2];
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration((Integer) null, (Integer) null, integer0, integer0, integer1);
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, false, statementConfiguration0);
      queryRunner0.close((Connection) null);
      // Undeclared exception!
      try { 
        queryRunner0.prepareStatement((Connection) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.dbutils.AbstractQueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "org.apache.commons.dbutils.AbstractQueryRunner";
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString() , anyInt());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      String string1 = "org.apache.commons.dbutils.handlers.BeanHandler";
      queryRunner0.isPmdKnownBroken();
      queryRunner0.prepareStatement(connection0, "Null connection", 21);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      String string0 = "";
      Connection connection0 = null;
      // Undeclared exception!
      try { 
        queryRunner0.prepareCall((Connection) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.dbutils.AbstractQueryRunner", e);
      }
  }
}
