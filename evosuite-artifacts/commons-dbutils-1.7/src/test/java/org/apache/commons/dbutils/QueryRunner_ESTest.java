/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 15:13:03 GMT 2022
 */

package org.apache.commons.dbutils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.annotation.Annotation;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ParameterMetaData;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import javax.sql.DataSource;
import org.apache.commons.dbutils.BasicRowProcessor;
import org.apache.commons.dbutils.BeanProcessor;
import org.apache.commons.dbutils.OutParameter;
import org.apache.commons.dbutils.QueryRunner;
import org.apache.commons.dbutils.ResultSetHandler;
import org.apache.commons.dbutils.StatementConfiguration;
import org.apache.commons.dbutils.handlers.BeanHandler;
import org.apache.commons.dbutils.handlers.ScalarHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class QueryRunner_ESTest extends QueryRunner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(13).when(parameterMetaData0).getParameterCount();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(parameterMetaData0).when(preparedStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Connection connection1 = queryRunner0.prepareConnection();
      try { 
        queryRunner0.update(connection1, ", javaType=");
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Wrong number of parameters: expected 13, was given 0 Query: , javaType= Parameters: []
         //
         verifyException("org.apache.commons.dbutils.AbstractQueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSet) null).when(preparedStatement0).executeQuery();
      doReturn((ParameterMetaData) null).when(preparedStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      Integer integer0 = new Integer(0);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration((Integer) null, (Integer) null, integer0, integer0, (Integer) null);
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, statementConfiguration0);
      Class<String> class0 = String.class;
      BeanHandler<String> beanHandler0 = new BeanHandler<String>(class0);
      // Undeclared exception!
      try { 
        queryRunner0.query("org.apache.commons.dbutils.QueryRunner", (Object) statementConfiguration0, (ResultSetHandler<String>) beanHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.dbutils.handlers.BeanHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, true, (StatementConfiguration) null);
      ScalarHandler<String> scalarHandler0 = new ScalarHandler<String>((-1468));
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        queryRunner0.query("", (ResultSetHandler<String>) scalarHandler0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.dbutils.QueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(parameterMetaData0).getParameterCount();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(parameterMetaData0).when(preparedStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString() , anyInt());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, false);
      Class<Integer> class0 = Integer.class;
      BeanHandler<Object> beanHandler0 = new BeanHandler<Object>(class0);
      Object[][] objectArray0 = new Object[1][3];
      try { 
        queryRunner0.insertBatch("mPet&P>lVteo(b&NQ", (ResultSetHandler<Object>) beanHandler0, objectArray0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Wrong number of parameters: expected 0, was given 3 Query: mPet&P>lVteo(b&NQ Parameters: [[null, null, null]]
         //
         verifyException("org.apache.commons.dbutils.AbstractQueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(parameterMetaData0).getParameterCount();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(parameterMetaData0).when(preparedStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString() , anyInt());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      ScalarHandler<Object> scalarHandler0 = new ScalarHandler<Object>();
      Object[] objectArray0 = new Object[9];
      try { 
        queryRunner0.insert("`\"6G{ZgI[", (ResultSetHandler<Object>) scalarHandler0, objectArray0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Wrong number of parameters: expected 0, was given 9 Query: `\"6G{ZgI[ Parameters: [null, null, null, null, null, null, null, null, null]
         //
         verifyException("org.apache.commons.dbutils.AbstractQueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      QueryRunner queryRunner0 = new QueryRunner();
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(parameterMetaData0).getParameterCount();
      CallableStatement callableStatement0 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      doReturn(parameterMetaData0).when(callableStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement0).when(connection0).prepareCall(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      Integer integer0 = new Integer(0);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer0, (Integer) null, integer0, integer0);
      QueryRunner queryRunner1 = new QueryRunner(dataSource0, false, statementConfiguration0);
      Connection connection1 = queryRunner1.prepareConnection();
      Object[] objectArray0 = new Object[8];
      try { 
        queryRunner0.execute(connection1, "k`c", objectArray0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Wrong number of parameters: expected 0, was given 8 Query: k`c Parameters: [null, null, null, null, null, null, null, null]
         //
         verifyException("org.apache.commons.dbutils.AbstractQueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-4617)).when(parameterMetaData0).getParameterCount();
      CallableStatement callableStatement0 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      doReturn(parameterMetaData0).when(callableStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement0).when(connection0).prepareCall(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Object[] objectArray0 = new Object[0];
      Connection connection1 = queryRunner0.prepareConnection();
      ScalarHandler<Integer> scalarHandler0 = new ScalarHandler<Integer>("[");
      try { 
        queryRunner0.execute(connection1, "[", (ResultSetHandler<Integer>) scalarHandler0, objectArray0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Wrong number of parameters: expected -4617, was given 0 Query: [ Parameters: []
         //
         verifyException("org.apache.commons.dbutils.AbstractQueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      QueryRunner queryRunner0 = new QueryRunner();
      CallableStatement callableStatement0 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(callableStatement0).executeUpdate();
      doReturn((ParameterMetaData) null).when(callableStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement0).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner1 = new QueryRunner(dataSource0);
      Object[] objectArray0 = new Object[0];
      Connection connection1 = queryRunner1.prepareConnection();
      int int0 = queryRunner0.update(connection1, "", objectArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(parameterMetaData0).getParameterCount();
      QueryRunner queryRunner0 = new QueryRunner();
      CallableStatement callableStatement0 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      doReturn(3355).when(callableStatement0).executeUpdate();
      doReturn(parameterMetaData0).when(callableStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement0).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner1 = new QueryRunner(dataSource0);
      Object[] objectArray0 = new Object[0];
      Connection connection1 = queryRunner1.prepareConnection();
      int int0 = queryRunner0.update(connection1, "", objectArray0);
      assertEquals(3355, int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn((-481)).when(preparedStatement0).executeUpdate();
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, true);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      DataSource dataSource1 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource1).getConnection();
      QueryRunner queryRunner1 = new QueryRunner(dataSource1);
      Connection connection1 = queryRunner1.prepareConnection();
      Object[] objectArray0 = new Object[4];
      int int0 = queryRunner0.update(connection1, "]d:?`[YsbKGGaAz", objectArray0);
      assertEquals((-481), int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(4).when(preparedStatement0).executeUpdate();
      doReturn((ParameterMetaData) null).when(preparedStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Connection connection1 = queryRunner0.prepareConnection();
      int int0 = queryRunner0.update(connection1, "OutParameter{sqlType=", (Object) queryRunner0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn((-845)).when(preparedStatement0).executeUpdate();
      doReturn((ParameterMetaData) null).when(preparedStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Connection connection1 = queryRunner0.prepareConnection();
      int int0 = queryRunner0.update(connection1, "OutParameter{sqlType=", (Object) queryRunner0);
      assertEquals((-845), int0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(preparedStatement0).executeUpdate();
      doReturn((ParameterMetaData) null).when(preparedStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Connection connection1 = queryRunner0.prepareConnection();
      int int0 = queryRunner0.update(connection1, ", javaType=");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(parameterMetaData0).getParameterCount();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn((-53)).when(preparedStatement0).executeUpdate();
      doReturn(parameterMetaData0).when(preparedStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Connection connection1 = queryRunner0.prepareConnection();
      int int0 = queryRunner0.update(connection1, ", javaType=");
      assertEquals((-53), int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(preparedStatement0).executeUpdate();
      doReturn((ParameterMetaData) null).when(preparedStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      int int0 = queryRunner0.update("", (Object[]) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(parameterMetaData0).getParameterCount();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(preparedStatement0).executeUpdate();
      doReturn(parameterMetaData0).when(preparedStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      int int0 = queryRunner0.update("", (Object[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CallableStatement callableStatement0 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(callableStatement0).executeUpdate();
      doReturn((ParameterMetaData) null).when(callableStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement0).when(connection1).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0, connection1).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      queryRunner0.prepareConnection();
      ScalarHandler<Integer> scalarHandler0 = new ScalarHandler<Integer>("{");
      int int0 = queryRunner0.update("{", (Object) scalarHandler0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      CallableStatement callableStatement0 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(callableStatement0).executeUpdate();
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement0).when(connection1).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0, connection1).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, true, (StatementConfiguration) null);
      queryRunner0.prepareConnection();
      int int0 = queryRunner0.update("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Integer integer0 = new Integer(2640);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer0, integer0, integer0, integer0);
      QueryRunner queryRunner0 = new QueryRunner(statementConfiguration0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).next();
      ResultSet resultSet1 = queryRunner0.wrap(resultSet0);
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(preparedStatement0).executeUpdate();
      doReturn((ParameterMetaData) null).when(preparedStatement0).getParameterMetaData();
      doReturn(resultSet1).when(preparedStatement0).getGeneratedKeys();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString() , anyInt());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner1 = new QueryRunner(dataSource0, false);
      Connection connection1 = queryRunner1.prepareConnection();
      ScalarHandler<Integer> scalarHandler0 = new ScalarHandler<Integer>();
      Integer integer1 = queryRunner0.insert(connection1, "Null ResultSetHandler", (ResultSetHandler<Integer>) scalarHandler0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Integer integer0 = new Integer(2640);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer0, integer0, integer0, integer0);
      QueryRunner queryRunner0 = new QueryRunner(statementConfiguration0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).next();
      ResultSet resultSet1 = queryRunner0.wrap(resultSet0);
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(preparedStatement0).executeUpdate();
      doReturn((ParameterMetaData) null).when(preparedStatement0).getParameterMetaData();
      doReturn(resultSet1).when(preparedStatement0).getGeneratedKeys();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString() , anyInt());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner1 = new QueryRunner(dataSource0, false);
      ScalarHandler<Annotation> scalarHandler0 = new ScalarHandler<Annotation>();
      Annotation annotation0 = queryRunner1.insert("4Oh-ya", (ResultSetHandler<Annotation>) scalarHandler0);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CallableStatement callableStatement0 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(callableStatement0).execute();
      doReturn(1658).when(callableStatement0).getUpdateCount();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement0).when(connection0).prepareCall(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, true, (StatementConfiguration) null);
      Object[] objectArray0 = new Object[0];
      Connection connection1 = queryRunner0.prepareConnection();
      int int0 = queryRunner0.execute(connection1, "", objectArray0);
      assertEquals(1658, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(parameterMetaData0).getParameterCount();
      CallableStatement callableStatement0 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(callableStatement0).execute();
      doReturn(parameterMetaData0).when(callableStatement0).getParameterMetaData();
      doReturn((-1144)).when(callableStatement0).getUpdateCount();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement0).when(connection0).prepareCall(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, false);
      Connection connection1 = queryRunner0.prepareConnection();
      int int0 = queryRunner0.execute(connection1, "", (Object[]) null);
      assertEquals((-1144), int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(parameterMetaData0).getParameterCount();
      QueryRunner queryRunner0 = new QueryRunner();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).next();
      ResultSet resultSet1 = queryRunner0.wrap(resultSet0);
      CallableStatement callableStatement0 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(callableStatement0).execute();
      doReturn(parameterMetaData0).when(callableStatement0).getParameterMetaData();
      doReturn(false).when(callableStatement0).getMoreResults();
      doReturn(resultSet1).when(callableStatement0).getResultSet();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement0).when(connection0).prepareCall(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner1 = new QueryRunner(dataSource0);
      Object[] objectArray0 = new Object[0];
      Connection connection1 = queryRunner1.prepareConnection();
      ScalarHandler<Integer> scalarHandler0 = new ScalarHandler<Integer>("{");
      List<Integer> list0 = queryRunner1.execute(connection1, "", (ResultSetHandler<Integer>) scalarHandler0, objectArray0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      QueryRunner queryRunner0 = new QueryRunner(false);
      CallableStatement callableStatement0 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(callableStatement0).execute();
      doReturn(1).when(callableStatement0).getUpdateCount();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement0).when(connection0).prepareCall(anyString());
      CallableStatement callableStatement1 = queryRunner0.prepareCall(connection0, "");
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement1).when(connection1).prepareCall(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection1).when(dataSource0).getConnection();
      QueryRunner queryRunner1 = new QueryRunner(dataSource0, true);
      Object[] objectArray0 = new Object[6];
      int int0 = queryRunner1.execute("", objectArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      QueryRunner queryRunner0 = new QueryRunner(false);
      CallableStatement callableStatement0 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(callableStatement0).execute();
      doReturn((-2897)).when(callableStatement0).getUpdateCount();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement0).when(connection0).prepareCall(anyString());
      CallableStatement callableStatement1 = queryRunner0.prepareCall(connection0, "");
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement1).when(connection1).prepareCall(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection1).when(dataSource0).getConnection();
      QueryRunner queryRunner1 = new QueryRunner(dataSource0, true);
      Object[] objectArray0 = new Object[6];
      int int0 = queryRunner1.execute("", objectArray0);
      assertEquals((-2897), int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      QueryRunner queryRunner0 = new QueryRunner((DataSource) null);
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn((ParameterMetaData) null).when(preparedStatement0).getParameterMetaData();
      doReturn((int[]) null).when(preparedStatement0).executeBatch();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString() , anyInt());
      PreparedStatement preparedStatement1 = queryRunner0.prepareStatement(connection0, "g.2", 439);
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement1).when(connection1).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection1).when(dataSource0).getConnection();
      QueryRunner queryRunner1 = new QueryRunner(dataSource0);
      Connection connection2 = queryRunner1.prepareConnection();
      Object[][] objectArray0 = new Object[3][6];
      queryRunner1.batch(connection2, ">#Y$)X`jJ[n", objectArray0);
      assertTrue(queryRunner1.isPmdKnownBroken());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      QueryRunner queryRunner0 = new QueryRunner((DataSource) null);
      int[] intArray0 = new int[0];
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn((ParameterMetaData) null).when(preparedStatement0).getParameterMetaData();
      doReturn(intArray0).when(preparedStatement0).executeBatch();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString() , anyInt());
      PreparedStatement preparedStatement1 = queryRunner0.prepareStatement(connection0, "g.2", 439);
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement1).when(connection1).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection1).when(dataSource0).getConnection();
      QueryRunner queryRunner1 = new QueryRunner(dataSource0);
      Connection connection2 = queryRunner1.prepareConnection();
      Object[][] objectArray0 = new Object[3][6];
      queryRunner1.batch(connection2, ">#Y$)X`jJ[n", objectArray0);
      assertTrue(queryRunner1.isPmdKnownBroken());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      QueryRunner queryRunner0 = new QueryRunner((DataSource) null);
      int[] intArray0 = new int[4];
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn((ParameterMetaData) null).when(preparedStatement0).getParameterMetaData();
      doReturn(intArray0).when(preparedStatement0).executeBatch();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString() , anyInt());
      PreparedStatement preparedStatement1 = queryRunner0.prepareStatement(connection0, "g.2", 439);
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement1).when(connection1).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection1).when(dataSource0).getConnection();
      QueryRunner queryRunner1 = new QueryRunner(dataSource0);
      Object[][] objectArray0 = new Object[3][6];
      queryRunner1.batch(">o", objectArray0);
      assertTrue(queryRunner1.isPmdKnownBroken());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, false, (StatementConfiguration) null);
      Connection connection1 = queryRunner0.prepareConnection();
      Object[] objectArray0 = new Object[6];
      // Undeclared exception!
      try { 
        queryRunner0.update(connection1, "s^JD{GZ\bAZuqkYgmG!", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.dbutils.AbstractQueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-3087));
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer0, integer0, integer0, integer0);
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, false, statementConfiguration0);
      try { 
        queryRunner0.update((Connection) null, "A9&0}uFuT.xb", (Object) integer0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Null connection
         //
         verifyException("org.apache.commons.dbutils.QueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, false);
      Connection connection1 = queryRunner0.prepareConnection();
      // Undeclared exception!
      try { 
        queryRunner0.update(connection1, "gJw0':e.s6FWgm_M?xg", (Object) "gJw0':e.s6FWgm_M?xg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.dbutils.AbstractQueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      // Undeclared exception!
      try { 
        queryRunner0.update("", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.dbutils.AbstractQueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      ScalarHandler<Object> scalarHandler0 = new ScalarHandler<Object>("Null SQL statement");
      // Undeclared exception!
      try { 
        queryRunner0.update("", (Object) scalarHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.dbutils.AbstractQueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(0);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration((Integer) null, (Integer) null, integer0, (Integer) null, integer0);
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, statementConfiguration0);
      Object[] objectArray0 = new Object[0];
      ScalarHandler<Object> scalarHandler0 = new ScalarHandler<Object>();
      try { 
        queryRunner0.query((Connection) null, "<YeLD;Q>rOWmNIr|", objectArray0, (ResultSetHandler<Object>) scalarHandler0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Null connection
         //
         verifyException("org.apache.commons.dbutils.QueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      Integer integer0 = new Integer(315);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer0, integer0, (Integer) null, integer0);
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, true, statementConfiguration0);
      Connection connection1 = queryRunner0.prepareConnection();
      ScalarHandler<OutParameter<Object>> scalarHandler0 = new ScalarHandler<OutParameter<Object>>();
      // Undeclared exception!
      try { 
        queryRunner0.query(connection1, "org.apache.commons.dbutils.BasicRowProcessor", (ResultSetHandler<OutParameter<Object>>) scalarHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.dbutils.AbstractQueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, true);
      Connection connection1 = queryRunner0.prepareConnection();
      ScalarHandler<Object> scalarHandler0 = new ScalarHandler<Object>();
      // Undeclared exception!
      try { 
        queryRunner0.query(connection1, ", javaType=", (Object) "+EZK", (ResultSetHandler<Object>) scalarHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.dbutils.AbstractQueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Object[] objectArray0 = new Object[4];
      Class<Integer> class0 = Integer.class;
      BeanProcessor beanProcessor0 = new BeanProcessor();
      BasicRowProcessor basicRowProcessor0 = new BasicRowProcessor(beanProcessor0);
      BeanHandler<Integer> beanHandler0 = new BeanHandler<Integer>(class0, basicRowProcessor0);
      // Undeclared exception!
      try { 
        queryRunner0.query("ukE\"J-yOrMPOyrm$", objectArray0, (ResultSetHandler<Integer>) beanHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.dbutils.AbstractQueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, true);
      Object[] objectArray0 = new Object[3];
      try { 
        queryRunner0.query("", (ResultSetHandler<Integer>) null, objectArray0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Null ResultSetHandler
         //
         verifyException("org.apache.commons.dbutils.QueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      Integer integer0 = new Integer(1);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer0, integer0, integer0, integer0);
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, statementConfiguration0);
      ScalarHandler<Integer> scalarHandler0 = new ScalarHandler<Integer>("S5`dgc4>~d0%83oo}Mp");
      // Undeclared exception!
      try { 
        queryRunner0.query("[7T,-@}B~X?b", (ResultSetHandler<Integer>) scalarHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.dbutils.AbstractQueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(0);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer0, integer0, integer0, integer0);
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, true, statementConfiguration0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString() , anyInt());
      DataSource dataSource1 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource1).getConnection();
      QueryRunner queryRunner1 = new QueryRunner(dataSource1, statementConfiguration0);
      Connection connection1 = queryRunner1.prepareConnection();
      ScalarHandler<String> scalarHandler0 = new ScalarHandler<String>("Null ResultSetHandler");
      // Undeclared exception!
      try { 
        queryRunner0.insert(connection1, " ", (ResultSetHandler<String>) scalarHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.dbutils.QueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString() , anyInt());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Object[] objectArray0 = new Object[6];
      ScalarHandler<Object> scalarHandler0 = new ScalarHandler<Object>("");
      // Undeclared exception!
      try { 
        queryRunner0.insert("", (ResultSetHandler<Object>) scalarHandler0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.dbutils.AbstractQueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(parameterMetaData0).getParameterCount();
      QueryRunner queryRunner0 = new QueryRunner();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).next();
      ResultSet resultSet1 = queryRunner0.wrap(resultSet0);
      CallableStatement callableStatement0 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(callableStatement0).execute();
      doReturn(parameterMetaData0).when(callableStatement0).getParameterMetaData();
      doReturn(true).when(callableStatement0).getMoreResults();
      doReturn(resultSet1, (ResultSet) null).when(callableStatement0).getResultSet();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement0).when(connection0).prepareCall(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner1 = new QueryRunner(dataSource0);
      String string0 = "";
      Object[] objectArray0 = new Object[0];
      Class<String> class0 = String.class;
      BeanProcessor beanProcessor0 = new BeanProcessor();
      BasicRowProcessor basicRowProcessor0 = new BasicRowProcessor(beanProcessor0);
      BeanHandler<String> beanHandler0 = new BeanHandler<String>(class0, basicRowProcessor0);
      Connection connection1 = queryRunner1.prepareConnection();
      ScalarHandler<Integer> scalarHandler0 = new ScalarHandler<Integer>("{");
      // Undeclared exception!
      try { 
        queryRunner1.execute(connection1, "", (ResultSetHandler<Integer>) scalarHandler0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.dbutils.handlers.ScalarHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, false);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(resultSet0).getObject(anyInt());
      doReturn(true).when(resultSet0).next();
      ResultSet resultSet1 = queryRunner0.wrap(resultSet0);
      CallableStatement callableStatement0 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(callableStatement0).execute();
      doReturn(true).when(callableStatement0).getMoreResults();
      doReturn(resultSet1, (ResultSet) null).when(callableStatement0).getResultSet();
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement0).when(connection1).prepareCall(anyString());
      DataSource dataSource1 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection1).when(dataSource1).getConnection();
      QueryRunner queryRunner1 = new QueryRunner(dataSource1, true, (StatementConfiguration) null);
      int int0 = (-1468);
      Object[] objectArray0 = new Object[0];
      String string0 = "";
      ScalarHandler<Integer> scalarHandler0 = new ScalarHandler<Integer>();
      // Undeclared exception!
      try { 
        queryRunner1.execute("", (ResultSetHandler<Integer>) scalarHandler0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.dbutils.handlers.ScalarHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Connection connection1 = queryRunner0.prepareConnection();
      Object[][] objectArray0 = new Object[3][6];
      // Undeclared exception!
      try { 
        queryRunner0.batch(connection1, ">#Y$)X`jJ[n", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.dbutils.AbstractQueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CallableStatement callableStatement0 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(callableStatement0).execute();
      doReturn(0).when(callableStatement0).getUpdateCount();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement0).when(connection0).prepareCall(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, true, (StatementConfiguration) null);
      Connection connection1 = queryRunner0.prepareConnection();
      int int0 = queryRunner0.execute(connection1, "", (Object[]) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, false);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).next();
      ResultSet resultSet1 = queryRunner0.wrap(resultSet0);
      CallableStatement callableStatement0 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(callableStatement0).execute();
      doReturn(false).when(callableStatement0).getMoreResults();
      doReturn(resultSet1).when(callableStatement0).getResultSet();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement0).when(connection0).prepareCall(anyString());
      DataSource dataSource1 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource1).getConnection();
      QueryRunner queryRunner1 = new QueryRunner(dataSource1, true, (StatementConfiguration) null);
      Object[] objectArray0 = new Object[0];
      ScalarHandler<Integer> scalarHandler0 = new ScalarHandler<Integer>();
      List<Integer> list0 = queryRunner1.execute("", (ResultSetHandler<Integer>) scalarHandler0, objectArray0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Object[] objectArray0 = new Object[2];
      try { 
        queryRunner0.execute("g,52hi]T]&69", (ResultSetHandler<OutParameter<String>>) null, objectArray0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Null ResultSetHandler
         //
         verifyException("org.apache.commons.dbutils.QueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, false);
      Connection connection1 = queryRunner0.prepareConnection();
      try { 
        queryRunner0.execute(connection1, "", (ResultSetHandler<Object>) null, (Object[]) null);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Null ResultSetHandler
         //
         verifyException("org.apache.commons.dbutils.QueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[7];
      QueryRunner queryRunner0 = new QueryRunner((DataSource) null);
      ScalarHandler<Object> scalarHandler0 = new ScalarHandler<Object>();
      try { 
        queryRunner0.execute(connection0, (String) null, (ResultSetHandler<Object>) scalarHandler0, objectArray0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Null SQL statement
         //
         verifyException("org.apache.commons.dbutils.QueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, false);
      ScalarHandler<Integer> scalarHandler0 = new ScalarHandler<Integer>(1392);
      try { 
        queryRunner0.execute((String) null, (ResultSetHandler<Integer>) scalarHandler0, (Object[]) null);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Null SQL statement
         //
         verifyException("org.apache.commons.dbutils.QueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      Integer integer0 = Integer.valueOf(444);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer0, integer0, integer0, integer0);
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, true, statementConfiguration0);
      Class<Object> class0 = Object.class;
      BeanHandler<Object> beanHandler0 = new BeanHandler<Object>(class0);
      Object[] objectArray0 = new Object[5];
      try { 
        queryRunner0.execute((Connection) null, "ng0U|<n=@<'7-LZ{", (ResultSetHandler<Object>) beanHandler0, objectArray0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Null connection
         //
         verifyException("org.apache.commons.dbutils.QueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((CallableStatement) null).when(connection0).prepareCall(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, true);
      Object[] objectArray0 = new Object[6];
      // Undeclared exception!
      try { 
        queryRunner0.execute("", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.dbutils.AbstractQueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((CallableStatement) null).when(connection0).prepareCall(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, true);
      Connection connection1 = queryRunner0.prepareConnection();
      // Undeclared exception!
      try { 
        queryRunner0.execute(connection1, "", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.dbutils.QueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      QueryRunner queryRunner0 = new QueryRunner(false);
      CallableStatement callableStatement0 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(callableStatement0).execute();
      doReturn(0).when(callableStatement0).getUpdateCount();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement0).when(connection0).prepareCall(anyString());
      CallableStatement callableStatement1 = queryRunner0.prepareCall(connection0, "");
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement1).when(connection1).prepareCall(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection1).when(dataSource0).getConnection();
      QueryRunner queryRunner1 = new QueryRunner(dataSource0, true);
      Object[] objectArray0 = new Object[6];
      int int0 = queryRunner1.execute("", objectArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, true, (StatementConfiguration) null);
      Connection connection1 = queryRunner0.prepareConnection();
      try { 
        queryRunner0.execute(connection1, (String) null, (Object[]) null);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Null SQL statement
         //
         verifyException("org.apache.commons.dbutils.QueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      try { 
        queryRunner0.execute((String) null, (Object[]) null);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Null SQL statement
         //
         verifyException("org.apache.commons.dbutils.QueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(1);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer0, integer0, (Integer) null, integer0);
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, false, statementConfiguration0);
      Object[] objectArray0 = new Object[6];
      try { 
        queryRunner0.execute((Connection) null, "-l&|K", objectArray0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Null connection
         //
         verifyException("org.apache.commons.dbutils.QueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((CallableStatement) null).when(connection0).prepareStatement(anyString() , anyInt());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Object[][] objectArray0 = new Object[1][6];
      // Undeclared exception!
      try { 
        queryRunner0.insertBatch("", (ResultSetHandler<String>) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.dbutils.AbstractQueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Integer integer0 = new Integer(2640);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer0, integer0, integer0, integer0);
      QueryRunner queryRunner0 = new QueryRunner(statementConfiguration0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).next();
      ResultSet resultSet1 = queryRunner0.wrap(resultSet0);
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn((ParameterMetaData) null).when(preparedStatement0).getParameterMetaData();
      doReturn((int[]) null).when(preparedStatement0).executeBatch();
      doReturn(resultSet1).when(preparedStatement0).getGeneratedKeys();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString() , anyInt());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner1 = new QueryRunner(dataSource0, false);
      Class<Integer> class0 = Integer.class;
      BeanHandler<Object> beanHandler0 = new BeanHandler<Object>(class0);
      Object[][] objectArray0 = new Object[1][3];
      Connection connection1 = queryRunner1.prepareConnection();
      queryRunner1.insertBatch(connection1, "mPet&P>lVteo(b&NQ", (ResultSetHandler<Object>) beanHandler0, objectArray0);
      assertTrue(queryRunner1.isPmdKnownBroken());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Integer integer0 = new Integer(2640);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer0, integer0, integer0, integer0);
      QueryRunner queryRunner0 = new QueryRunner(statementConfiguration0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).next();
      ResultSet resultSet1 = queryRunner0.wrap(resultSet0);
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn((ParameterMetaData) null).when(preparedStatement0).getParameterMetaData();
      doReturn((int[]) null).when(preparedStatement0).executeBatch();
      doReturn(resultSet1).when(preparedStatement0).getGeneratedKeys();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString() , anyInt());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner1 = new QueryRunner(dataSource0, false);
      Class<Integer> class0 = Integer.class;
      BeanHandler<Object> beanHandler0 = new BeanHandler<Object>(class0);
      Object[][] objectArray0 = new Object[1][3];
      queryRunner1.insertBatch("mPet&P>lVteo(b&NQ", (ResultSetHandler<Object>) beanHandler0, objectArray0);
      assertTrue(queryRunner1.isPmdKnownBroken());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      ScalarHandler<String> scalarHandler0 = new ScalarHandler<String>();
      try { 
        queryRunner0.insertBatch("Null parameters. If parameters aren't need, pass an empty array.", (ResultSetHandler<String>) scalarHandler0, (Object[][]) null);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Null parameters. If parameters aren't need, pass an empty array.
         //
         verifyException("org.apache.commons.dbutils.QueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Connection connection1 = queryRunner0.prepareConnection();
      ScalarHandler<Object> scalarHandler0 = new ScalarHandler<Object>("");
      try { 
        queryRunner0.insertBatch(connection1, "", (ResultSetHandler<Object>) scalarHandler0, (Object[][]) null);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Null parameters. If parameters aren't need, pass an empty array.
         //
         verifyException("org.apache.commons.dbutils.QueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Class<String> class0 = String.class;
      BeanProcessor beanProcessor0 = new BeanProcessor();
      BasicRowProcessor basicRowProcessor0 = new BasicRowProcessor(beanProcessor0);
      BeanHandler<String> beanHandler0 = new BeanHandler<String>(class0, basicRowProcessor0);
      Connection connection1 = queryRunner0.prepareConnection();
      Object[][] objectArray0 = new Object[3][7];
      try { 
        queryRunner0.insertBatch(connection1, (String) null, (ResultSetHandler<String>) beanHandler0, objectArray0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Null SQL statement
         //
         verifyException("org.apache.commons.dbutils.QueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      Integer integer0 = new Integer((-1));
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer0, integer0, integer0, integer0);
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, false, statementConfiguration0);
      ScalarHandler<Integer> scalarHandler0 = new ScalarHandler<Integer>();
      try { 
        queryRunner0.insertBatch((String) null, (ResultSetHandler<Integer>) scalarHandler0, (Object[][]) null);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Null SQL statement
         //
         verifyException("org.apache.commons.dbutils.QueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-740));
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer0, integer0, integer0, integer0);
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, true, statementConfiguration0);
      try { 
        queryRunner0.insertBatch((Connection) null, "c}2", (ResultSetHandler<OutParameter<Object>>) null, (Object[][]) null);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Null connection
         //
         verifyException("org.apache.commons.dbutils.QueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      QueryRunner queryRunner0 = new QueryRunner(false);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).next();
      ResultSet resultSet1 = queryRunner0.wrap(resultSet0);
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(preparedStatement0).executeUpdate();
      doReturn((ParameterMetaData) null).when(preparedStatement0).getParameterMetaData();
      doReturn(resultSet1).when(preparedStatement0).getGeneratedKeys();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString() , anyInt());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner1 = new QueryRunner(dataSource0);
      ScalarHandler<Object> scalarHandler0 = new ScalarHandler<Object>();
      Object[] objectArray0 = new Object[9];
      Object object0 = queryRunner1.insert("`\"6G{ZgI[", (ResultSetHandler<Object>) scalarHandler0, objectArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StatementConfiguration statementConfiguration0 = new StatementConfiguration((Integer) null, (Integer) null, (Integer) null, (Integer) null, (Integer) null);
      QueryRunner queryRunner0 = new QueryRunner(statementConfiguration0);
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(parameterMetaData0).getParameterCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).next();
      ResultSet resultSet1 = queryRunner0.wrap(resultSet0);
      CallableStatement callableStatement0 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(callableStatement0).executeUpdate();
      doReturn(parameterMetaData0).when(callableStatement0).getParameterMetaData();
      doReturn(resultSet1).when(callableStatement0).getGeneratedKeys();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement0).when(connection0).prepareCall(anyString());
      CallableStatement callableStatement1 = queryRunner0.prepareCall(connection0, "'zyR&cmYX");
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement1).when(connection1).prepareStatement(anyString() , anyInt());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection1).when(dataSource0).getConnection();
      QueryRunner queryRunner1 = new QueryRunner(dataSource0, false);
      Connection connection2 = queryRunner1.prepareConnection();
      ScalarHandler<Integer> scalarHandler0 = new ScalarHandler<Integer>();
      Integer integer0 = queryRunner1.insert(connection2, "N2}nFrw@wlQlOmk6~3+", (ResultSetHandler<Integer>) scalarHandler0, (Object[]) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Connection connection1 = queryRunner0.prepareConnection();
      try { 
        queryRunner0.insert(connection1, ": incompatible types, cannot convert ", (ResultSetHandler<Object>) null, (Object[]) null);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Null ResultSetHandler
         //
         verifyException("org.apache.commons.dbutils.QueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Class<String> class0 = String.class;
      BasicRowProcessor basicRowProcessor0 = new BasicRowProcessor();
      BeanHandler<Object> beanHandler0 = new BeanHandler<Object>(class0, basicRowProcessor0);
      try { 
        queryRunner0.insert((String) null, (ResultSetHandler<Object>) beanHandler0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Null SQL statement
         //
         verifyException("org.apache.commons.dbutils.QueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Integer integer0 = new Integer(1172);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, (Integer) null, (Integer) null, (Integer) null, integer0);
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn((Connection) null).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, statementConfiguration0);
      ScalarHandler<Object> scalarHandler0 = new ScalarHandler<Object>();
      try { 
        queryRunner0.insert("org.apache.commons.dbutils.QueryRunner", (ResultSetHandler<Object>) scalarHandler0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Null connection
         //
         verifyException("org.apache.commons.dbutils.QueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(parameterMetaData0).getParameterCount();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(125).when(preparedStatement0).executeUpdate();
      doReturn(parameterMetaData0).when(preparedStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection1).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0, connection1).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      queryRunner0.update("", (Object[]) null);
      Connection connection2 = queryRunner0.prepareConnection();
      // Undeclared exception!
      try { 
        queryRunner0.update(connection2, ", javaType=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.dbutils.AbstractQueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, true);
      try { 
        queryRunner0.update((String) null);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Null SQL statement
         //
         verifyException("org.apache.commons.dbutils.QueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Connection connection1 = queryRunner0.prepareConnection();
      Object[] objectArray0 = new Object[9];
      try { 
        queryRunner0.query(connection1, "", (ResultSetHandler<String>) null, objectArray0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Null ResultSetHandler
         //
         verifyException("org.apache.commons.dbutils.QueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      try { 
        queryRunner0.query("6", (Object) "6", (ResultSetHandler<Object>) null);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Null ResultSetHandler
         //
         verifyException("org.apache.commons.dbutils.QueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Object[] objectArray0 = new Object[3];
      ScalarHandler<Object> scalarHandler0 = new ScalarHandler<Object>((String) null);
      try { 
        queryRunner0.query((String) null, objectArray0, (ResultSetHandler<Object>) scalarHandler0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Null SQL statement
         //
         verifyException("org.apache.commons.dbutils.QueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Object[][] objectArray0 = new Object[1][6];
      // Undeclared exception!
      try { 
        queryRunner0.batch("OutParameter{sqlType=", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.dbutils.AbstractQueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      QueryRunner queryRunner0 = new QueryRunner((DataSource) null);
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(parameterMetaData0).getParameterCount();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(parameterMetaData0).when(preparedStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString() , anyInt());
      PreparedStatement preparedStatement1 = queryRunner0.prepareStatement(connection0, "g.2", 4469);
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement1).when(connection1).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection1).when(dataSource0).getConnection();
      QueryRunner queryRunner1 = new QueryRunner(dataSource0);
      Connection connection2 = queryRunner1.prepareConnection();
      Object[][] objectArray0 = new Object[3][6];
      try { 
        queryRunner1.batch(connection2, "", objectArray0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Wrong number of parameters: expected -1, was given 6 Query:  Parameters: [[null, null, null, null, null, null], [null, null, null, null, null, null], [null, null, null, null, null, null]]
         //
         verifyException("org.apache.commons.dbutils.AbstractQueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      QueryRunner queryRunner0 = new QueryRunner((DataSource) null);
      int[] intArray0 = new int[3];
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn((ParameterMetaData) null).when(preparedStatement0).getParameterMetaData();
      doReturn(intArray0).when(preparedStatement0).executeBatch();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString() , anyInt());
      PreparedStatement preparedStatement1 = queryRunner0.prepareStatement(connection0, "g.2", 439);
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement1).when(connection1).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection1).when(dataSource0).getConnection();
      QueryRunner queryRunner1 = new QueryRunner(dataSource0);
      Connection connection2 = queryRunner1.prepareConnection();
      Object[][] objectArray0 = new Object[3][6];
      queryRunner1.batch(connection2, ">#Y$)X`jJ[n", objectArray0);
      assertTrue(queryRunner1.isPmdKnownBroken());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      try { 
        queryRunner0.batch("", (Object[][]) null);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Null parameters. If parameters aren't need, pass an empty array.
         //
         verifyException("org.apache.commons.dbutils.QueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn((ParameterMetaData) null).when(preparedStatement0).getParameterMetaData();
      doReturn((int[]) null).when(preparedStatement0).executeBatch();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Object[][] objectArray0 = new Object[1][6];
      queryRunner0.batch("OutParameter{sqlType=", objectArray0);
      assertTrue(queryRunner0.isPmdKnownBroken());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, true);
      Connection connection1 = queryRunner0.prepareConnection();
      Object[][] objectArray0 = new Object[6][2];
      try { 
        queryRunner0.batch(connection1, (String) null, objectArray0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Null SQL statement
         //
         verifyException("org.apache.commons.dbutils.QueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Object[][] objectArray0 = new Object[6][6];
      try { 
        queryRunner0.batch((Connection) null, (String) null, objectArray0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Null connection
         //
         verifyException("org.apache.commons.dbutils.QueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString() , anyInt());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Class<Object> class0 = Object.class;
      BeanHandler<Object> beanHandler0 = new BeanHandler<Object>(class0);
      // Undeclared exception!
      try { 
        queryRunner0.insert("OutParameter{sqlType=", (ResultSetHandler<Object>) beanHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.dbutils.AbstractQueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Connection connection1 = queryRunner0.prepareConnection();
      // Undeclared exception!
      try { 
        queryRunner0.update(connection1, "OutParameter{sqlType=", (Object) queryRunner0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.dbutils.AbstractQueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      QueryRunner queryRunner0 = new QueryRunner();
      try { 
        queryRunner0.update("", (Object[]) null);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // QueryRunner requires a DataSource to be invoked in this way, or a Connection should be passed in
         //
         verifyException("org.apache.commons.dbutils.AbstractQueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Connection connection1 = queryRunner0.prepareConnection();
      ScalarHandler<Object> scalarHandler0 = new ScalarHandler<Object>();
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        queryRunner0.query(connection1, "", (ResultSetHandler<Object>) scalarHandler0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.dbutils.AbstractQueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, false);
      Object[] objectArray0 = new Object[8];
      Class<Integer> class0 = Integer.class;
      Connection connection1 = queryRunner0.prepareConnection();
      BeanHandler<Integer> beanHandler0 = new BeanHandler<Integer>(class0);
      // Undeclared exception!
      try { 
        queryRunner0.query(connection1, "mPet&P>lVteo(b&NQ", objectArray0, (ResultSetHandler<Integer>) beanHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.dbutils.AbstractQueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      Integer integer0 = new Integer(1194);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer0, integer0, integer0, integer0);
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, false, statementConfiguration0);
      Connection connection1 = queryRunner0.prepareConnection();
      ScalarHandler<Object> scalarHandler0 = new ScalarHandler<Object>();
      try { 
        queryRunner0.insert(connection1, (String) null, (ResultSetHandler<Object>) scalarHandler0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Null SQL statement
         //
         verifyException("org.apache.commons.dbutils.QueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      QueryRunner queryRunner0 = new QueryRunner();
      try { 
        queryRunner0.update("$DU>", (Object) "$DU>");
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // QueryRunner requires a DataSource to be invoked in this way, or a Connection should be passed in
         //
         verifyException("org.apache.commons.dbutils.AbstractQueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CallableStatement callableStatement0 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(callableStatement0).execute();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement0).when(connection0).prepareCall(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, true, (StatementConfiguration) null);
      Object[] objectArray0 = new Object[0];
      ScalarHandler<Integer> scalarHandler0 = new ScalarHandler<Integer>();
      List<Integer> list0 = queryRunner0.execute("", (ResultSetHandler<Integer>) scalarHandler0, objectArray0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString() , anyInt());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, true);
      Object[] objectArray0 = new Object[6];
      Connection connection1 = queryRunner0.prepareConnection();
      Class<Integer> class0 = Integer.class;
      BeanHandler<Integer> beanHandler0 = new BeanHandler<Integer>(class0);
      // Undeclared exception!
      try { 
        queryRunner0.insert(connection1, "i", (ResultSetHandler<Integer>) beanHandler0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.dbutils.AbstractQueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(parameterMetaData0).getParameterCount();
      CallableStatement callableStatement0 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(callableStatement0).execute();
      doReturn(parameterMetaData0).when(callableStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement0).when(connection0).prepareCall(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Object[] objectArray0 = new Object[0];
      Connection connection1 = queryRunner0.prepareConnection();
      ScalarHandler<Integer> scalarHandler0 = new ScalarHandler<Integer>("{");
      List<Integer> list0 = queryRunner0.execute(connection1, "", (ResultSetHandler<Integer>) scalarHandler0, objectArray0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[8];
      QueryRunner queryRunner0 = new QueryRunner();
      try { 
        queryRunner0.update(connection0, (String) null, objectArray0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Null SQL statement
         //
         verifyException("org.apache.commons.dbutils.QueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Connection connection1 = queryRunner0.prepareConnection();
      // Undeclared exception!
      try { 
        queryRunner0.update(connection1, ", javaType=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.dbutils.AbstractQueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Object[][] objectArray0 = new Object[9][4];
      try { 
        queryRunner0.batch((String) null, objectArray0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Null SQL statement
         //
         verifyException("org.apache.commons.dbutils.QueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      QueryRunner queryRunner0 = new QueryRunner();
      ScalarHandler<Integer> scalarHandler0 = new ScalarHandler<Integer>(1117);
      try { 
        queryRunner0.query("FN\"", (ResultSetHandler<Integer>) scalarHandler0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // QueryRunner requires a DataSource to be invoked in this way, or a Connection should be passed in
         //
         verifyException("org.apache.commons.dbutils.AbstractQueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      try { 
        queryRunner0.insert("connection_type", (ResultSetHandler<Object>) null, (Object[]) null);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Null ResultSetHandler
         //
         verifyException("org.apache.commons.dbutils.QueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      QueryRunner queryRunner0 = new QueryRunner();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString() , anyInt());
      Object[][] objectArray0 = new Object[1][6];
      Class<String> class0 = String.class;
      BeanHandler<String> beanHandler0 = new BeanHandler<String>(class0);
      // Undeclared exception!
      try { 
        queryRunner0.insertBatch(connection0, "OutParameter{sqlType=", (ResultSetHandler<String>) beanHandler0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.dbutils.AbstractQueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, true, (StatementConfiguration) null);
      // Undeclared exception!
      try { 
        queryRunner0.update("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.dbutils.QueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-1));
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer0, integer0, integer0, integer0);
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, false, statementConfiguration0);
      try { 
        queryRunner0.query(connection0, (String) null, (ResultSetHandler<String>) null);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Null SQL statement
         //
         verifyException("org.apache.commons.dbutils.QueryRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Connection connection1 = queryRunner0.prepareConnection();
      try { 
        queryRunner0.batch(connection1, "", (Object[][]) null);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Null parameters. If parameters aren't need, pass an empty array.
         //
         verifyException("org.apache.commons.dbutils.QueryRunner", e);
      }
  }
}
