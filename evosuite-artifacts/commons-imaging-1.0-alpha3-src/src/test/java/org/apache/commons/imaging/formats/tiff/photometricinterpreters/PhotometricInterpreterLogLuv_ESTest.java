/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 23:47:25 GMT 2022
 */

package org.apache.commons.imaging.formats.tiff.photometricinterpreters;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.common.ImageBuilder;
import org.apache.commons.imaging.formats.tiff.photometricinterpreters.PhotometricInterpreterLogLuv;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PhotometricInterpreterLogLuv_ESTest extends PhotometricInterpreterLogLuv_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[6];
      PhotometricInterpreterLogLuv photometricInterpreterLogLuv0 = new PhotometricInterpreterLogLuv(0, intArray0, (-1279), 0, 0);
      PhotometricInterpreterLogLuv.TristimulusValues photometricInterpreterLogLuv_TristimulusValues0 = photometricInterpreterLogLuv0.getTristimulusValues((-1084), (-1279), 0);
      assertNotNull(photometricInterpreterLogLuv_TristimulusValues0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[3];
      PhotometricInterpreterLogLuv photometricInterpreterLogLuv0 = new PhotometricInterpreterLogLuv(2, intArray0, 2, 2, 2);
      PhotometricInterpreterLogLuv.TristimulusValues photometricInterpreterLogLuv_TristimulusValues0 = photometricInterpreterLogLuv0.getTristimulusValues(2, (-1858), (-1858));
      PhotometricInterpreterLogLuv.RgbValues photometricInterpreterLogLuv_RgbValues0 = photometricInterpreterLogLuv0.getRgbValues(photometricInterpreterLogLuv_TristimulusValues0);
      assertNotNull(photometricInterpreterLogLuv_RgbValues0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[1];
      PhotometricInterpreterLogLuv photometricInterpreterLogLuv0 = new PhotometricInterpreterLogLuv(1070, intArray0, 1070, 1070, 1070);
      int[] intArray1 = new int[3];
      intArray1[1] = 1070;
      ImageBuilder imageBuilder0 = new ImageBuilder(1070, 950, true);
      // Undeclared exception!
      try { 
        photometricInterpreterLogLuv0.interpretPixel(imageBuilder0, intArray1, (-1696), (-944));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1011776
         //
         verifyException("org.apache.commons.imaging.common.ImageBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[1];
      PhotometricInterpreterLogLuv photometricInterpreterLogLuv0 = new PhotometricInterpreterLogLuv(245, intArray0, (-16777216), (-16777216), 245);
      try { 
        photometricInterpreterLogLuv0.interpretPixel((ImageBuilder) null, intArray0, 2132, 190);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid length of bits per sample (expected 3).
         //
         verifyException("org.apache.commons.imaging.formats.tiff.photometricinterpreters.PhotometricInterpreterLogLuv", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[3];
      PhotometricInterpreterLogLuv photometricInterpreterLogLuv0 = new PhotometricInterpreterLogLuv(2, intArray0, 2, 2, 2);
      // Undeclared exception!
      try { 
        photometricInterpreterLogLuv0.interpretPixel((ImageBuilder) null, intArray0, 2, 4702);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.photometricinterpreters.PhotometricInterpreterLogLuv", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[1];
      PhotometricInterpreterLogLuv photometricInterpreterLogLuv0 = new PhotometricInterpreterLogLuv((-31), intArray0, (-1482), 0, 0);
      // Undeclared exception!
      try { 
        photometricInterpreterLogLuv0.getRgbValues((PhotometricInterpreterLogLuv.TristimulusValues) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.photometricinterpreters.PhotometricInterpreterLogLuv", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[1];
      PhotometricInterpreterLogLuv photometricInterpreterLogLuv0 = new PhotometricInterpreterLogLuv(1070, intArray0, 1070, 1070, 1070);
      int[] intArray1 = new int[3];
      intArray1[0] = 1070;
      ImageBuilder imageBuilder0 = new ImageBuilder(1070, 950, true);
      // Undeclared exception!
      try { 
        photometricInterpreterLogLuv0.interpretPixel(imageBuilder0, intArray1, (-1696), (-944));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1011776
         //
         verifyException("org.apache.commons.imaging.common.ImageBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[1];
      PhotometricInterpreterLogLuv photometricInterpreterLogLuv0 = new PhotometricInterpreterLogLuv(1070, intArray0, 1070, 1070, 1070);
      PhotometricInterpreterLogLuv.TristimulusValues photometricInterpreterLogLuv_TristimulusValues0 = photometricInterpreterLogLuv0.getTristimulusValues(1070, 2371, 1070);
      PhotometricInterpreterLogLuv.RgbValues photometricInterpreterLogLuv_RgbValues0 = photometricInterpreterLogLuv0.getRgbValues(photometricInterpreterLogLuv_TristimulusValues0);
      assertNotNull(photometricInterpreterLogLuv_RgbValues0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[3];
      PhotometricInterpreterLogLuv photometricInterpreterLogLuv0 = new PhotometricInterpreterLogLuv(2, intArray0, 2, 2, (-2851));
      ImageBuilder imageBuilder0 = new ImageBuilder(16711680, 2, false);
      photometricInterpreterLogLuv0.interpretPixel(imageBuilder0, intArray0, 281, 16711680);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[6];
      PhotometricInterpreterLogLuv photometricInterpreterLogLuv0 = new PhotometricInterpreterLogLuv(0, intArray0, (-1279), 0, 0);
      ImageBuilder imageBuilder0 = new ImageBuilder(1421, 1860, true);
      try { 
        photometricInterpreterLogLuv0.interpretPixel(imageBuilder0, intArray0, 0, 0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid length of bits per sample (expected 3).
         //
         verifyException("org.apache.commons.imaging.formats.tiff.photometricinterpreters.PhotometricInterpreterLogLuv", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PhotometricInterpreterLogLuv.RgbValues photometricInterpreterLogLuv_RgbValues0 = new PhotometricInterpreterLogLuv.RgbValues();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PhotometricInterpreterLogLuv.TristimulusValues photometricInterpreterLogLuv_TristimulusValues0 = new PhotometricInterpreterLogLuv.TristimulusValues();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PhotometricInterpreterLogLuv photometricInterpreterLogLuv0 = new PhotometricInterpreterLogLuv(3200, (int[]) null, 3200, 3200, 3200);
      ImageBuilder imageBuilder0 = new ImageBuilder(3200, 3200, false);
      try { 
        photometricInterpreterLogLuv0.interpretPixel(imageBuilder0, (int[]) null, 3200, 3200);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid length of bits per sample (expected 3).
         //
         verifyException("org.apache.commons.imaging.formats.tiff.photometricinterpreters.PhotometricInterpreterLogLuv", e);
      }
  }
}
