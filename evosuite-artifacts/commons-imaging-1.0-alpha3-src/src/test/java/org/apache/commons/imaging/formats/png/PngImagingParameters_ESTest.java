/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 00:06:10 GMT 2022
 */

package org.apache.commons.imaging.formats.png;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.imaging.formats.png.PhysicalScale;
import org.apache.commons.imaging.formats.png.PngImagingParameters;
import org.apache.commons.imaging.formats.png.PngText;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PngImagingParameters_ESTest extends PngImagingParameters_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      assertFalse(pngImagingParameters0.isPredictorEnabled());
      
      pngImagingParameters0.setPredictorEnabled(true);
      boolean boolean0 = pngImagingParameters0.isPredictorEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      assertFalse(pngImagingParameters0.isForceIndexedColor());
      
      pngImagingParameters0.setForceIndexedColor(true);
      boolean boolean0 = pngImagingParameters0.isForceIndexedColor();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      PhysicalScale physicalScale0 = PhysicalScale.createFromRadians(0.0, 0.0);
      pngImagingParameters0.setPhysicalScale(physicalScale0);
      pngImagingParameters0.getPhysicalScale();
      assertEquals((byte)8, pngImagingParameters0.getBitDepth());
      assertFalse(pngImagingParameters0.isForceIndexedColor());
      assertFalse(pngImagingParameters0.isForceTrueColor());
      assertFalse(pngImagingParameters0.isPredictorEnabled());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      PhysicalScale physicalScale0 = PhysicalScale.createFromRadians((byte)8, (byte)8);
      pngImagingParameters0.setPhysicalScale(physicalScale0);
      pngImagingParameters0.getPhysicalScale();
      assertFalse(pngImagingParameters0.isForceTrueColor());
      assertEquals((byte)8, pngImagingParameters0.getBitDepth());
      assertFalse(pngImagingParameters0.isForceIndexedColor());
      assertFalse(pngImagingParameters0.isPredictorEnabled());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      PhysicalScale physicalScale0 = PhysicalScale.UNDEFINED;
      pngImagingParameters0.setPhysicalScale(physicalScale0);
      pngImagingParameters0.getPhysicalScale();
      assertFalse(pngImagingParameters0.isForceIndexedColor());
      assertEquals((byte)8, pngImagingParameters0.getBitDepth());
      assertFalse(pngImagingParameters0.isForceTrueColor());
      assertFalse(pngImagingParameters0.isPredictorEnabled());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      assertEquals((byte)8, pngImagingParameters0.getBitDepth());
      
      pngImagingParameters0.setBitDepth((byte)0);
      byte byte0 = pngImagingParameters0.getBitDepth();
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      pngImagingParameters0.setBitDepth((byte) (-103));
      byte byte0 = pngImagingParameters0.getBitDepth();
      assertEquals((byte) (-103), byte0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      // Undeclared exception!
      try { 
        pngImagingParameters0.setTextChunks((List<? extends PngText>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      pngImagingParameters0.getTextChunks();
      assertFalse(pngImagingParameters0.isPredictorEnabled());
      assertEquals((byte)8, pngImagingParameters0.getBitDepth());
      assertFalse(pngImagingParameters0.isForceTrueColor());
      assertFalse(pngImagingParameters0.isForceIndexedColor());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      LinkedList<PngText.Text> linkedList0 = new LinkedList<PngText.Text>();
      pngImagingParameters0.setTextChunks(linkedList0);
      List<? extends PngText> list0 = pngImagingParameters0.getTextChunks();
      assertFalse(pngImagingParameters0.isPredictorEnabled());
      assertFalse(pngImagingParameters0.isForceIndexedColor());
      assertEquals((byte)8, pngImagingParameters0.getBitDepth());
      assertNotNull(list0);
      assertFalse(pngImagingParameters0.isForceTrueColor());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      boolean boolean0 = pngImagingParameters0.isForceTrueColor();
      assertEquals((byte)8, pngImagingParameters0.getBitDepth());
      assertFalse(boolean0);
      assertFalse(pngImagingParameters0.isPredictorEnabled());
      assertFalse(pngImagingParameters0.isForceIndexedColor());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      boolean boolean0 = pngImagingParameters0.isPredictorEnabled();
      assertFalse(pngImagingParameters0.isForceIndexedColor());
      assertEquals((byte)8, pngImagingParameters0.getBitDepth());
      assertFalse(pngImagingParameters0.isForceTrueColor());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      assertFalse(pngImagingParameters0.isForceTrueColor());
      
      pngImagingParameters0.setForceTrueColor(true);
      boolean boolean0 = pngImagingParameters0.isForceTrueColor();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      boolean boolean0 = pngImagingParameters0.isForceIndexedColor();
      assertFalse(boolean0);
      assertEquals((byte)8, pngImagingParameters0.getBitDepth());
      assertFalse(pngImagingParameters0.isPredictorEnabled());
      assertFalse(pngImagingParameters0.isForceTrueColor());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      pngImagingParameters0.getPhysicalScale();
      assertFalse(pngImagingParameters0.isPredictorEnabled());
      assertFalse(pngImagingParameters0.isForceIndexedColor());
      assertEquals((byte)8, pngImagingParameters0.getBitDepth());
      assertFalse(pngImagingParameters0.isForceTrueColor());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      byte byte0 = pngImagingParameters0.getBitDepth();
      assertFalse(pngImagingParameters0.isPredictorEnabled());
      assertFalse(pngImagingParameters0.isForceTrueColor());
      assertEquals((byte)8, byte0);
      assertFalse(pngImagingParameters0.isForceIndexedColor());
  }
}
