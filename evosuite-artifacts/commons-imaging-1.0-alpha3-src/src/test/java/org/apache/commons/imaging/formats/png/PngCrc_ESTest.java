/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 23:56:42 GMT 2022
 */

package org.apache.commons.imaging.formats.png;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.formats.png.PngCrc;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PngCrc_ESTest extends PngCrc_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PngCrc pngCrc0 = new PngCrc();
      assertNotNull(pngCrc0);
      
      long long0 = 0L;
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)55;
      byteArray0[0] = (byte)55;
      long long1 = pngCrc0.start_partial_crc(byteArray0, 0);
      assertEquals(2504045949L, long1);
      assertFalse(long1 == long0);
      assertArrayEquals(new byte[] {(byte)55}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      byte[] byteArray1 = null;
      int int0 = 254;
      // Undeclared exception!
      try { 
        pngCrc0.start_partial_crc((byte[]) null, 254);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.png.PngCrc", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PngCrc pngCrc0 = new PngCrc();
      assertNotNull(pngCrc0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      long long0 = pngCrc0.continue_partial_crc(0L, byteArray0, (byte)0);
      assertEquals(0L, long0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PngCrc pngCrc0 = new PngCrc();
      assertNotNull(pngCrc0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)103;
      long long0 = pngCrc0.continue_partial_crc((-901L), byteArray0, (byte) (-102));
      assertEquals((-809641899L), long0);
      assertArrayEquals(new byte[] {(byte)23, (byte)0, (byte) (-102), (byte)41, (byte)103, (byte)103}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      long long1 = pngCrc0.finish_partial_crc(4294967295L);
      assertEquals(0L, long1);
      assertFalse(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PngCrc pngCrc0 = new PngCrc();
      assertNotNull(pngCrc0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)0;
      long long0 = pngCrc0.continue_partial_crc((-3430L), byteArray0, 512);
      assertEquals((-609783307L), long0);
      assertArrayEquals(new byte[] {(byte) (-79), (byte)76, (byte) (-1), (byte)9, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      long long1 = pngCrc0.finish_partial_crc((-3355L));
      assertEquals((-4294963942L), long1);
      assertFalse(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PngCrc pngCrc0 = new PngCrc();
      assertNotNull(pngCrc0);
      
      long long0 = pngCrc0.finish_partial_crc(0L);
      assertEquals(4294967295L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PngCrc pngCrc0 = new PngCrc();
      assertNotNull(pngCrc0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-42);
      long long0 = pngCrc0.continue_partial_crc(2985L, byteArray0, 8);
      assertEquals(376480591L, long0);
      assertArrayEquals(new byte[] {(byte) (-7), (byte) (-1), (byte)0, (byte) (-42)}, byteArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PngCrc pngCrc0 = new PngCrc();
      assertNotNull(pngCrc0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)0;
      int int0 = pngCrc0.crc(byteArray0, 0);
      assertEquals(1863707756, int0);
      assertArrayEquals(new byte[] {(byte)48, (byte)105, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PngCrc pngCrc0 = new PngCrc();
      assertNotNull(pngCrc0);
      
      long long0 = pngCrc0.finish_partial_crc(352L);
      assertEquals(4294966943L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PngCrc pngCrc0 = new PngCrc();
      assertNotNull(pngCrc0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte)0;
      long long0 = pngCrc0.continue_partial_crc((-2605L), byteArray0, (byte) (-72));
      assertEquals((-1523925659L), long0);
      assertArrayEquals(new byte[] {(byte) (-124), (byte) (-72), (byte) (-92), (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PngCrc pngCrc0 = new PngCrc();
      assertNotNull(pngCrc0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      long long0 = pngCrc0.continue_partial_crc((-3756L), byteArray0, 0);
      assertEquals((-963622232L), long0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1)}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PngCrc pngCrc0 = new PngCrc();
      assertNotNull(pngCrc0);
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)92;
      byteArray0[0] = (byte)92;
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte2 = (byte)0;
      int int0 = 0;
      long long0 = pngCrc0.start_partial_crc(byteArray0, 0);
      assertEquals(1696133433L, long0);
      assertArrayEquals(new byte[] {(byte)92, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      byteArray0[2] = (byte)0;
      int int1 = pngCrc0.crc(byteArray0, (-1));
      assertEquals((-1696133434), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)92, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      byte[] byteArray1 = null;
      // Undeclared exception!
      try { 
        pngCrc0.crc((byte[]) null, 167);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.png.PngCrc", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PngCrc pngCrc0 = new PngCrc();
      assertNotNull(pngCrc0);
      
      byte[] byteArray0 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        pngCrc0.continue_partial_crc((-551L), (byte[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.png.PngCrc", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PngCrc pngCrc0 = new PngCrc();
      assertNotNull(pngCrc0);
      
      byte[] byteArray0 = new byte[0];
      long long0 = pngCrc0.start_partial_crc(byteArray0, 563);
      assertEquals(4294967295L, long0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PngCrc pngCrc0 = new PngCrc();
      assertNotNull(pngCrc0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      int int0 = pngCrc0.crc(byteArray0, (byte)0);
      assertEquals((-771559539), int0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PngCrc pngCrc0 = new PngCrc();
      assertNotNull(pngCrc0);
      
      // Undeclared exception!
      try { 
        pngCrc0.continue_partial_crc(0L, (byte[]) null, 256);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.png.PngCrc", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PngCrc pngCrc0 = new PngCrc();
      assertNotNull(pngCrc0);
      
      byte[] byteArray0 = new byte[0];
      int int0 = pngCrc0.crc(byteArray0, (-127));
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PngCrc pngCrc0 = new PngCrc();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)111;
      int int0 = pngCrc0.crc(byteArray0, (byte)111);
      assertEquals((-1663799754), int0);
      
      pngCrc0.start_partial_crc(byteArray0, (byte)0);
      pngCrc0.continue_partial_crc(0L, byteArray0, (-1663799754));
      long long0 = pngCrc0.start_partial_crc(byteArray0, (byte)0);
      assertEquals(1663799753L, long0);
  }
}
