/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 00:11:06 GMT 2022
 */

package org.apache.commons.imaging.icc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.apache.commons.imaging.icc.CachingInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CachingInputStream_ESTest extends CachingInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      CachingInputStream cachingInputStream0 = new CachingInputStream(byteArrayInputStream0);
      int int0 = cachingInputStream0.read();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2, (byte)2);
      CachingInputStream cachingInputStream0 = new CachingInputStream(byteArrayInputStream0);
      int int0 = cachingInputStream0.read();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)1, (byte)1);
      CachingInputStream cachingInputStream0 = new CachingInputStream(byteArrayInputStream0);
      int int0 = cachingInputStream0.read();
      assertEquals((-1), int0);
      
      byte[] byteArray1 = cachingInputStream0.getCache();
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-793), 435);
      CachingInputStream cachingInputStream0 = new CachingInputStream(byteArrayInputStream0);
      int int0 = cachingInputStream0.available();
      assertEquals(435, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (-2033));
      CachingInputStream cachingInputStream0 = new CachingInputStream(byteArrayInputStream0);
      int int0 = cachingInputStream0.available();
      assertEquals((-2033), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CachingInputStream cachingInputStream0 = new CachingInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        cachingInputStream0.read();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.icc.CachingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      CachingInputStream cachingInputStream0 = new CachingInputStream(pipedInputStream0);
      try { 
        cachingInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CachingInputStream cachingInputStream0 = new CachingInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        cachingInputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.icc.CachingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      CachingInputStream cachingInputStream0 = new CachingInputStream(pushbackInputStream0);
      try { 
        cachingInputStream0.available();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      CachingInputStream cachingInputStream0 = new CachingInputStream(sequenceInputStream0);
      cachingInputStream0.close();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      CachingInputStream cachingInputStream0 = new CachingInputStream(sequenceInputStream0);
      int int0 = cachingInputStream0.available();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      CachingInputStream cachingInputStream0 = new CachingInputStream(sequenceInputStream0);
      byte[] byteArray0 = cachingInputStream0.getCache();
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CachingInputStream cachingInputStream0 = new CachingInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        cachingInputStream0.available();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.icc.CachingInputStream", e);
      }
  }
}
