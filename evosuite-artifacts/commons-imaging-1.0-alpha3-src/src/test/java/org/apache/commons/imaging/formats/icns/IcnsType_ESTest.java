/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 23:37:06 GMT 2022
 */

package org.apache.commons.imaging.formats.icns;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.formats.icns.IcnsType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IcnsType_ESTest extends IcnsType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = IcnsType.describeType((-1));
      assertEquals("\uFFFD\uFFFD\uFFFD\uFFFD", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = IcnsType.typeAsInt("icm#");
      assertEquals(1768123683, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        IcnsType.typeAsInt("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid ICNS type
         //
         verifyException("org.apache.commons.imaging.formats.icns.IcnsType", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IcnsType icnsType0 = IcnsType.ICNS_16x12_4BIT_IMAGE;
      IcnsType icnsType1 = IcnsType.find1BPPMaskType(icnsType0);
      assertEquals(16, icnsType1.getWidth());
      assertEquals(12, icnsType1.getHeight());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IcnsType icnsType0 = IcnsType.ICNS_32x32_8BIT_MASK;
      IcnsType icnsType1 = IcnsType.find8BPPMaskType(icnsType0);
      assertEquals(1815637355, icnsType1.getType());
      assertEquals(32, icnsType1.getHeight());
      assertEquals(32, icnsType1.getWidth());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IcnsType icnsType0 = IcnsType.findAnyType(1748528491);
      assertEquals(1748528491, icnsType0.getType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IcnsType icnsType0 = IcnsType.findAnyType(1768124469);
      assertEquals(32, icnsType0.getHeight());
      assertEquals(1768124469, icnsType0.getType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IcnsType[] icnsTypeArray0 = IcnsType.values();
      assertEquals(32, icnsTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IcnsType icnsType0 = IcnsType.valueOf("ICNS_32x32_8BIT_MASK");
      assertEquals(32, icnsType0.getHeight());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IcnsType icnsType0 = IcnsType.valueOf("ICNS_32x32_2x_32BIT_ARGB_IMAGE");
      assertFalse(icnsType0.hasMask());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = IcnsType.typeAsInt("\u0000\u0000\u0000\u0000");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IcnsType icnsType0 = IcnsType.ICNS_16x16_8BIT_IMAGE;
      IcnsType icnsType1 = IcnsType.find1BPPMaskType(icnsType0);
      boolean boolean0 = icnsType1.hasMask();
      assertEquals(1768125219, icnsType1.getType());
      assertEquals(16, icnsType1.getWidth());
      assertEquals(16, icnsType1.getHeight());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IcnsType icnsType0 = IcnsType.findImageType(1768123683);
      assertEquals(1768123683, icnsType0.getType());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        IcnsType.typeAsInt((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.icns.IcnsType", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        IcnsType.find8BPPMaskType((IcnsType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.icns.IcnsType", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        IcnsType.find1BPPMaskType((IcnsType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.icns.IcnsType", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IcnsType icnsType0 = IcnsType.ICNS_32x32_32BIT_IMAGE;
      int int0 = icnsType0.getWidth();
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IcnsType icnsType0 = IcnsType.ICNS_16x16_32BIT_ARGB_IMAGE;
      int int0 = icnsType0.getHeight();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IcnsType icnsType0 = IcnsType.ICNS_256x256_2x_32BIT_ARGB_IMAGE;
      int int0 = icnsType0.getBitsPerPixel();
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IcnsType icnsType0 = IcnsType.ICNS_256x256_32BIT_ARGB_IMAGE;
      int int0 = icnsType0.getType();
      assertEquals(1768108088, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        IcnsType.typeAsInt("org.apache.commons.imaging.formats.icns.IcnsType[width=16,height=12,bpp=8,hasMask=false]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid ICNS type
         //
         verifyException("org.apache.commons.imaging.formats.icns.IcnsType", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IcnsType icnsType0 = IcnsType.ICNS_16x16_32BIT_IMAGE;
      IcnsType icnsType1 = IcnsType.find8BPPMaskType(icnsType0);
      IcnsType icnsType2 = IcnsType.find1BPPMaskType(icnsType1);
      assertEquals(1933077867, icnsType1.getType());
      assertEquals(1768125219, icnsType2.getType());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IcnsType icnsType0 = IcnsType.findImageType(1768436530);
      assertEquals(1768436530, icnsType0.getType());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IcnsType.findImageType(33);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IcnsType icnsType0 = IcnsType.findAnyType(1815637355);
      assertEquals(1815637355, icnsType0.getType());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IcnsType icnsType0 = IcnsType.findAnyType(1768436530);
      assertEquals(1768436530, icnsType0.getType());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IcnsType icnsType0 = IcnsType.ICNS_16x12_8BIT_IMAGE;
      IcnsType.find8BPPMaskType(icnsType0);
      assertEquals(16, icnsType0.getWidth());
      assertEquals(8, icnsType0.getBitsPerPixel());
      assertEquals(12, icnsType0.getHeight());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IcnsType.findAnyType(512);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IcnsType icnsType0 = IcnsType.ICNS_16x16_32BIT_IMAGE;
      boolean boolean0 = icnsType0.hasMask();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IcnsType icnsType0 = IcnsType.ICNS_16x12_8BIT_IMAGE;
      String string0 = icnsType0.toString();
      assertEquals("org.apache.commons.imaging.formats.icns.IcnsType[width=16,height=12,bpp=8,hasMask=false]", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IcnsType icnsType0 = IcnsType.ICNS_1024x1024_32BIT_ARGB_IMAGE;
      IcnsType.find1BPPMaskType(icnsType0);
  }
}
