/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 23:18:49 GMT 2022
 */

package org.apache.commons.imaging.formats.tiff.datareaders;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.image.RasterFormatException;
import java.io.IOException;
import java.nio.ByteOrder;
import java.nio.CharBuffer;
import java.util.LinkedList;
import org.apache.commons.imaging.common.bytesource.ByteSourceFile;
import org.apache.commons.imaging.formats.tiff.TiffDirectory;
import org.apache.commons.imaging.formats.tiff.TiffElement;
import org.apache.commons.imaging.formats.tiff.TiffField;
import org.apache.commons.imaging.formats.tiff.TiffImageData;
import org.apache.commons.imaging.formats.tiff.TiffRasterData;
import org.apache.commons.imaging.formats.tiff.TiffRasterDataType;
import org.apache.commons.imaging.formats.tiff.constants.TiffPlanarConfiguration;
import org.apache.commons.imaging.formats.tiff.datareaders.DataReaderStrips;
import org.apache.commons.imaging.formats.tiff.photometricinterpreters.PhotometricInterpreter;
import org.apache.commons.imaging.formats.tiff.photometricinterpreters.PhotometricInterpreterBiLevel;
import org.apache.commons.imaging.formats.tiff.photometricinterpreters.PhotometricInterpreterCmyk;
import org.apache.commons.imaging.formats.tiff.photometricinterpreters.PhotometricInterpreterLogLuv;
import org.apache.commons.imaging.formats.tiff.photometricinterpreters.PhotometricInterpreterRgb;
import org.apache.commons.imaging.formats.tiff.photometricinterpreters.PhotometricInterpreterYCbCr;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DataReaderStrips_ESTest extends DataReaderStrips_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffDirectory tiffDirectory0 = new TiffDirectory(2600, linkedList0, 0L, 0L, byteOrder0);
      assertEquals(0L, tiffDirectory0.offset);
      assertEquals(0L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(2600, tiffDirectory0.type);
      assertNotNull(tiffDirectory0);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      
      int[] intArray0 = new int[1];
      TiffImageData.Strips tiffImageData_Strips0 = new TiffImageData.Strips((TiffElement.DataElement[]) null, (-1));
      assertEquals((-1), tiffImageData_Strips0.rowsPerStrip);
      assertNotNull(tiffImageData_Strips0);
      assertTrue(tiffImageData_Strips0.stripsNotTiles());
      
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertEquals(0.0, line2D_Double0.y1, 0.01);
      assertEquals(0.0, line2D_Double0.x2, 0.01);
      assertEquals(0.0, line2D_Double0.x1, 0.01);
      assertEquals(0.0, line2D_Double0.y2, 0.01);
      assertNotNull(line2D_Double0);
      
      Rectangle rectangle0 = line2D_Double0.getBounds();
      assertEquals(0.0, line2D_Double0.y1, 0.01);
      assertEquals(0.0, line2D_Double0.x2, 0.01);
      assertEquals(0.0, line2D_Double0.x1, 0.01);
      assertEquals(0.0, line2D_Double0.y2, 0.01);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertTrue(rectangle0.isEmpty());
      
      PhotometricInterpreterCmyk photometricInterpreterCmyk0 = new PhotometricInterpreterCmyk(1994, intArray0, (-1016), (-16777216), 6);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(photometricInterpreterCmyk0);
      assertEquals(1, intArray0.length);
      
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      rectangle0.translate(114, 83);
      assertEquals(0.0, line2D_Double0.y1, 0.01);
      assertEquals(0.0, line2D_Double0.x2, 0.01);
      assertEquals(0.0, line2D_Double0.x1, 0.01);
      assertEquals(0.0, line2D_Double0.y2, 0.01);
      assertEquals(83, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(114, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(83.0, rectangle0.getCenterY(), 0.01);
      assertEquals(83.0, rectangle0.getMinY(), 0.01);
      assertEquals(114.0, rectangle0.getCenterX(), 0.01);
      assertEquals(114.0, rectangle0.getX(), 0.01);
      assertEquals(83.0, rectangle0.getMaxY(), 0.01);
      assertEquals(83.0, rectangle0.getY(), 0.01);
      assertEquals(114.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(114.0, rectangle0.getMinX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      
      DataReaderStrips dataReaderStrips0 = new DataReaderStrips(tiffDirectory0, photometricInterpreterCmyk0, 114, intArray0, 83, 2600, 3, 83, 6, 83, tiffPlanarConfiguration0, byteOrder0, 8, tiffImageData_Strips0);
      assertEquals(0L, tiffDirectory0.offset);
      assertEquals(0L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(2600, tiffDirectory0.type);
      assertEquals((-1), tiffImageData_Strips0.rowsPerStrip);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(dataReaderStrips0);
      assertEquals(1, intArray0.length);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertTrue(tiffImageData_Strips0.stripsNotTiles());
      
      // Undeclared exception!
      try { 
        dataReaderStrips0.readRasterData(rectangle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffImageData$Strips", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      TiffDirectory tiffDirectory0 = new TiffDirectory(651, linkedList0, 651, 651, byteOrder0);
      assertEquals(651L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(651L, tiffDirectory0.offset);
      assertEquals(651, tiffDirectory0.type);
      assertEquals(6, tiffDirectory0.length);
      assertNotNull(tiffDirectory0);
      assertEquals(0, linkedList0.size());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      
      int[] intArray0 = new int[9];
      PhotometricInterpreterLogLuv photometricInterpreterLogLuv0 = new PhotometricInterpreterLogLuv(6, intArray0, 625, 651, 0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(photometricInterpreterLogLuv0);
      assertEquals(9, intArray0.length);
      
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      DataReaderStrips dataReaderStrips0 = new DataReaderStrips(tiffDirectory0, photometricInterpreterLogLuv0, 5, intArray0, 0, 6, 3, 651, 6, 0, tiffPlanarConfiguration0, byteOrder0, (-1), (TiffImageData.Strips) null);
      assertEquals(651L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(651L, tiffDirectory0.offset);
      assertEquals(651, tiffDirectory0.type);
      assertEquals(6, tiffDirectory0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(dataReaderStrips0);
      assertEquals(9, intArray0.length);
      assertEquals(0, linkedList0.size());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      
      Point2D.Double point2D_Double0 = new Point2D.Double(651L, 651);
      assertEquals(651.0, point2D_Double0.x, 0.01);
      assertEquals(651.0, point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      
      Line2D.Double line2D_Double0 = new Line2D.Double(point2D_Double0, point2D_Double0);
      assertEquals(651.0, point2D_Double0.x, 0.01);
      assertEquals(651.0, point2D_Double0.y, 0.01);
      assertEquals(651.0, line2D_Double0.x2, 0.01);
      assertEquals(651.0, line2D_Double0.y1, 0.01);
      assertEquals(651.0, line2D_Double0.x1, 0.01);
      assertEquals(651.0, line2D_Double0.y2, 0.01);
      assertNotNull(line2D_Double0);
      
      Rectangle rectangle0 = line2D_Double0.getBounds();
      assertEquals(651.0, point2D_Double0.x, 0.01);
      assertEquals(651.0, point2D_Double0.y, 0.01);
      assertEquals(651.0, line2D_Double0.x2, 0.01);
      assertEquals(651.0, line2D_Double0.y1, 0.01);
      assertEquals(651.0, line2D_Double0.x1, 0.01);
      assertEquals(651.0, line2D_Double0.y2, 0.01);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(651, rectangle0.y);
      assertEquals(651, rectangle0.x);
      assertNotNull(rectangle0);
      assertEquals(651.0, rectangle0.getX(), 0.01);
      assertEquals(651.0, rectangle0.getY(), 0.01);
      assertEquals(651.0, rectangle0.getCenterX(), 0.01);
      assertEquals(651.0, rectangle0.getMaxY(), 0.01);
      assertEquals(651.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(651.0, rectangle0.getMinY(), 0.01);
      assertEquals(651.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(651.0, rectangle0.getMinX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      
      // Undeclared exception!
      try { 
        dataReaderStrips0.readRasterData(rectangle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.DataReaderStrips", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffDirectory tiffDirectory0 = new TiffDirectory(3979, linkedList0, 3979, 3979, byteOrder0);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(3979, tiffDirectory0.type);
      assertEquals(3979L, tiffDirectory0.offset);
      assertEquals(3979L, tiffDirectory0.nextDirectoryOffset);
      assertNotNull(tiffDirectory0);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      
      int[] intArray0 = new int[1];
      PhotometricInterpreterBiLevel photometricInterpreterBiLevel0 = new PhotometricInterpreterBiLevel(6, intArray0, 1823, 0, 3979, true);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(photometricInterpreterBiLevel0);
      assertEquals(1, intArray0.length);
      
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      TiffElement.DataElement[] tiffElement_DataElementArray0 = new TiffElement.DataElement[1];
      TiffImageData.Strips tiffImageData_Strips0 = new TiffImageData.Strips(tiffElement_DataElementArray0, (-830));
      assertEquals((-830), tiffImageData_Strips0.rowsPerStrip);
      assertNotNull(tiffImageData_Strips0);
      assertEquals(1, tiffElement_DataElementArray0.length);
      assertTrue(tiffImageData_Strips0.stripsNotTiles());
      assertEquals(1, tiffImageData_Strips0.getImageDataLength());
      
      DataReaderStrips dataReaderStrips0 = new DataReaderStrips(tiffDirectory0, photometricInterpreterBiLevel0, 0, intArray0, 1496, 3, (-830), 1949, 1823, 3, tiffPlanarConfiguration0, byteOrder0, 3, tiffImageData_Strips0);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(3979, tiffDirectory0.type);
      assertEquals(3979L, tiffDirectory0.offset);
      assertEquals(3979L, tiffDirectory0.nextDirectoryOffset);
      assertEquals((-830), tiffImageData_Strips0.rowsPerStrip);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(dataReaderStrips0);
      assertEquals(1, intArray0.length);
      assertEquals(1, tiffElement_DataElementArray0.length);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertTrue(tiffImageData_Strips0.stripsNotTiles());
      assertEquals(1, tiffImageData_Strips0.getImageDataLength());
      
      Line2D.Double line2D_Double0 = new Line2D.Double(3, 1496, (byte) (-81), 3979);
      assertEquals(3979.0, line2D_Double0.y2, 0.01);
      assertEquals(3.0, line2D_Double0.x1, 0.01);
      assertEquals((-81.0), line2D_Double0.x2, 0.01);
      assertEquals(1496.0, line2D_Double0.y1, 0.01);
      assertNotNull(line2D_Double0);
      
      Rectangle rectangle0 = line2D_Double0.getBounds();
      assertEquals(3979.0, line2D_Double0.y2, 0.01);
      assertEquals(3.0, line2D_Double0.x1, 0.01);
      assertEquals((-81.0), line2D_Double0.x2, 0.01);
      assertEquals(1496.0, line2D_Double0.y1, 0.01);
      assertEquals((-81), rectangle0.x);
      assertEquals(84, rectangle0.width);
      assertEquals(2483, rectangle0.height);
      assertEquals(1496, rectangle0.y);
      assertNotNull(rectangle0);
      assertEquals(3.0, rectangle0.getMaxX(), 0.01);
      assertEquals((-81.0), rectangle0.getX(), 0.01);
      assertEquals(2483.0, rectangle0.getHeight(), 0.01);
      assertEquals(1496.0, rectangle0.getY(), 0.01);
      assertEquals(84.0, rectangle0.getWidth(), 0.01);
      assertEquals(1496.0, rectangle0.getMinY(), 0.01);
      assertEquals(3979.0, rectangle0.getMaxY(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals((-81.0), rectangle0.getMinX(), 0.01);
      assertEquals((-39.0), rectangle0.getCenterX(), 0.01);
      assertEquals(2737.5, rectangle0.getCenterY(), 0.01);
      
      // Undeclared exception!
      try { 
        dataReaderStrips0.readImageData(rectangle0, true, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 498
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffImageData$Strips", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffDirectory tiffDirectory0 = new TiffDirectory(1808, linkedList0, (-1741L), (-1741L), byteOrder0);
      assertEquals((-1741L), tiffDirectory0.nextDirectoryOffset);
      assertEquals((-1741L), tiffDirectory0.offset);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(1808, tiffDirectory0.type);
      assertNotNull(tiffDirectory0);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      
      int[] intArray0 = new int[4];
      PhotometricInterpreterLogLuv photometricInterpreterLogLuv0 = new PhotometricInterpreterLogLuv(1808, intArray0, 1808, 6, 6);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertNotNull(photometricInterpreterLogLuv0);
      assertEquals(4, intArray0.length);
      
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      TiffElement.DataElement[] tiffElement_DataElementArray0 = new TiffElement.DataElement[3];
      byte[] byteArray0 = new byte[8];
      TiffImageData.Data tiffImageData_Data0 = new TiffImageData.Data(0L, (-1892), byteArray0);
      assertEquals(0L, tiffImageData_Data0.offset);
      assertEquals((-1892), tiffImageData_Data0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(tiffImageData_Data0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, tiffImageData_Data0.getDataLength());
      
      tiffElement_DataElementArray0[0] = (TiffElement.DataElement) tiffImageData_Data0;
      TiffImageData.Strips tiffImageData_Strips0 = new TiffImageData.Strips(tiffElement_DataElementArray0, 8);
      assertEquals(8, tiffImageData_Strips0.rowsPerStrip);
      assertNotNull(tiffImageData_Strips0);
      assertEquals(3, tiffElement_DataElementArray0.length);
      assertTrue(tiffImageData_Strips0.stripsNotTiles());
      assertEquals(3, tiffImageData_Strips0.getImageDataLength());
      
      DataReaderStrips dataReaderStrips0 = new DataReaderStrips(tiffDirectory0, photometricInterpreterLogLuv0, 986, intArray0, 3788, 1808, 2, 1899, 1808, (-1892), tiffPlanarConfiguration0, byteOrder0, 1808, tiffImageData_Strips0);
      assertEquals((-1741L), tiffDirectory0.nextDirectoryOffset);
      assertEquals((-1741L), tiffDirectory0.offset);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(1808, tiffDirectory0.type);
      assertEquals(8, tiffImageData_Strips0.rowsPerStrip);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertNotNull(dataReaderStrips0);
      assertEquals(4, intArray0.length);
      assertEquals(3, tiffElement_DataElementArray0.length);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertTrue(tiffImageData_Strips0.stripsNotTiles());
      assertEquals(3, tiffImageData_Strips0.getImageDataLength());
      
      Rectangle rectangle0 = new Rectangle();
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertNotNull(rectangle0);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      
      try { 
        dataReaderStrips0.readRasterData(rectangle0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Tiff: unknown/unsupported compression: -1892
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.ImageDataReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffDirectory tiffDirectory0 = new TiffDirectory(1386, linkedList0, 1386, 1386, byteOrder0);
      assertEquals(1386L, tiffDirectory0.offset);
      assertEquals(1386, tiffDirectory0.type);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(1386L, tiffDirectory0.nextDirectoryOffset);
      assertNotNull(tiffDirectory0);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      
      int[] intArray0 = new int[5];
      PhotometricInterpreterRgb photometricInterpreterRgb0 = new PhotometricInterpreterRgb(1386, intArray0, (-80), 6, (-80));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertNotNull(photometricInterpreterRgb0);
      assertEquals(5, intArray0.length);
      
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      TiffElement.DataElement[] tiffElement_DataElementArray0 = new TiffElement.DataElement[8];
      MockFile mockFile0 = new MockFile("+s3umwb");
      assertNotNull(mockFile0);
      
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      assertNotNull(byteSourceFile0);
      assertFalse(mockFile0.exists());
      assertEquals("+s3umwb", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals("+s3umwb", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals("+s3umwb", byteSourceFile0.getFileName());
      assertEquals(0L, byteSourceFile0.getLength());
      
      TiffImageData.ByteSourceData tiffImageData_ByteSourceData0 = new TiffImageData.ByteSourceData(4294967295L, 3, byteSourceFile0);
      assertEquals(4294967295L, tiffImageData_ByteSourceData0.offset);
      assertEquals(3, tiffImageData_ByteSourceData0.length);
      assertNotNull(tiffImageData_ByteSourceData0);
      assertFalse(mockFile0.exists());
      assertEquals("+s3umwb", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals("+s3umwb", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals("+s3umwb", byteSourceFile0.getFileName());
      assertEquals(0L, byteSourceFile0.getLength());
      assertEquals(0, tiffImageData_ByteSourceData0.getDataLength());
      
      tiffElement_DataElementArray0[0] = (TiffElement.DataElement) tiffImageData_ByteSourceData0;
      TiffImageData.Strips tiffImageData_Strips0 = new TiffImageData.Strips(tiffElement_DataElementArray0, 6);
      assertEquals(6, tiffImageData_Strips0.rowsPerStrip);
      assertNotNull(tiffImageData_Strips0);
      assertEquals(8, tiffElement_DataElementArray0.length);
      assertEquals(8, tiffImageData_Strips0.getImageDataLength());
      assertTrue(tiffImageData_Strips0.stripsNotTiles());
      
      DataReaderStrips dataReaderStrips0 = new DataReaderStrips(tiffDirectory0, photometricInterpreterRgb0, 3, intArray0, 1386, 6, 3, 33447, 0, 3, tiffPlanarConfiguration0, byteOrder0, 1386, tiffImageData_Strips0);
      assertEquals(1386L, tiffDirectory0.offset);
      assertEquals(1386, tiffDirectory0.type);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(1386L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(6, tiffImageData_Strips0.rowsPerStrip);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertNotNull(dataReaderStrips0);
      assertEquals(5, intArray0.length);
      assertEquals(8, tiffElement_DataElementArray0.length);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertEquals(8, tiffImageData_Strips0.getImageDataLength());
      assertTrue(tiffImageData_Strips0.stripsNotTiles());
      
      Point point0 = new Point();
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertNotNull(point0);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      
      Dimension dimension0 = new Dimension();
      assertEquals(0, dimension0.width);
      assertEquals(0, dimension0.height);
      assertNotNull(dimension0);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      
      Rectangle rectangle0 = new Rectangle(point0, dimension0);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(0, dimension0.width);
      assertEquals(0, dimension0.height);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertNotNull(rectangle0);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertTrue(rectangle0.isEmpty());
      
      try { 
        dataReaderStrips0.readRasterData(rectangle0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Imaging does not support floating-point samples with 3 bits per sample
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.ImageDataReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffDirectory tiffDirectory0 = new TiffDirectory(2600, linkedList0, 0L, 0L, byteOrder0);
      assertEquals(0L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(2600, tiffDirectory0.type);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(0L, tiffDirectory0.offset);
      assertNotNull(tiffDirectory0);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      
      int[] intArray0 = new int[0];
      TiffImageData.Strips tiffImageData_Strips0 = new TiffImageData.Strips((TiffElement.DataElement[]) null, (-1));
      assertEquals((-1), tiffImageData_Strips0.rowsPerStrip);
      assertNotNull(tiffImageData_Strips0);
      assertTrue(tiffImageData_Strips0.stripsNotTiles());
      
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertEquals(0.0, line2D_Double0.y1, 0.01);
      assertEquals(0.0, line2D_Double0.x1, 0.01);
      assertEquals(0.0, line2D_Double0.y2, 0.01);
      assertEquals(0.0, line2D_Double0.x2, 0.01);
      assertNotNull(line2D_Double0);
      
      Rectangle rectangle0 = line2D_Double0.getBounds();
      assertEquals(0.0, line2D_Double0.y1, 0.01);
      assertEquals(0.0, line2D_Double0.x1, 0.01);
      assertEquals(0.0, line2D_Double0.y2, 0.01);
      assertEquals(0.0, line2D_Double0.x2, 0.01);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      
      PhotometricInterpreterCmyk photometricInterpreterCmyk0 = new PhotometricInterpreterCmyk(1994, intArray0, (-1045), (-16777216), 187);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(photometricInterpreterCmyk0);
      assertEquals(0, intArray0.length);
      
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      DataReaderStrips dataReaderStrips0 = new DataReaderStrips(tiffDirectory0, photometricInterpreterCmyk0, 114, intArray0, 0, 37389, 3, 32, 6, 83, tiffPlanarConfiguration0, (ByteOrder) null, 0, tiffImageData_Strips0);
      assertEquals(0L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(2600, tiffDirectory0.type);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(0L, tiffDirectory0.offset);
      assertEquals((-1), tiffImageData_Strips0.rowsPerStrip);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(dataReaderStrips0);
      assertEquals(0, intArray0.length);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertTrue(tiffImageData_Strips0.stripsNotTiles());
      
      // Undeclared exception!
      try { 
        dataReaderStrips0.readRasterData(rectangle0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.DataReaderStrips", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffDirectory tiffDirectory0 = new TiffDirectory(1425, linkedList0, 1425, 1425, byteOrder0);
      assertEquals(1425L, tiffDirectory0.offset);
      assertEquals(1425, tiffDirectory0.type);
      assertEquals(1425L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(6, tiffDirectory0.length);
      assertNotNull(tiffDirectory0);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      
      int[] intArray0 = new int[5];
      PhotometricInterpreterRgb photometricInterpreterRgb0 = new PhotometricInterpreterRgb(1425, intArray0, (-80), (-11), (-80));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertNotNull(photometricInterpreterRgb0);
      assertEquals(5, intArray0.length);
      
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      TiffElement.DataElement[] tiffElement_DataElementArray0 = new TiffElement.DataElement[8];
      MockFile mockFile0 = new MockFile("+s3umwb");
      assertNotNull(mockFile0);
      
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      assertNotNull(byteSourceFile0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals("+s3umwb", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("+s3umwb", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("+s3umwb", byteSourceFile0.getFileName());
      assertEquals(0L, byteSourceFile0.getLength());
      
      TiffImageData.ByteSourceData tiffImageData_ByteSourceData0 = new TiffImageData.ByteSourceData(4294967295L, 8, byteSourceFile0);
      assertEquals(8, tiffImageData_ByteSourceData0.length);
      assertEquals(4294967295L, tiffImageData_ByteSourceData0.offset);
      assertNotNull(tiffImageData_ByteSourceData0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals("+s3umwb", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("+s3umwb", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("+s3umwb", byteSourceFile0.getFileName());
      assertEquals(0L, byteSourceFile0.getLength());
      assertEquals(0, tiffImageData_ByteSourceData0.getDataLength());
      
      tiffElement_DataElementArray0[0] = (TiffElement.DataElement) tiffImageData_ByteSourceData0;
      TiffImageData.Strips tiffImageData_Strips0 = new TiffImageData.Strips(tiffElement_DataElementArray0, 6);
      assertEquals(6, tiffImageData_Strips0.rowsPerStrip);
      assertNotNull(tiffImageData_Strips0);
      assertEquals(8, tiffElement_DataElementArray0.length);
      assertTrue(tiffImageData_Strips0.stripsNotTiles());
      assertEquals(8, tiffImageData_Strips0.getImageDataLength());
      
      DataReaderStrips dataReaderStrips0 = new DataReaderStrips(tiffDirectory0, photometricInterpreterRgb0, 8, intArray0, 1425, 6, 1792, 33447, 6, 8, tiffPlanarConfiguration0, byteOrder0, 1425, tiffImageData_Strips0);
      assertEquals(1425L, tiffDirectory0.offset);
      assertEquals(1425, tiffDirectory0.type);
      assertEquals(1425L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(6, tiffImageData_Strips0.rowsPerStrip);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertNotNull(dataReaderStrips0);
      assertEquals(5, intArray0.length);
      assertEquals(8, tiffElement_DataElementArray0.length);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertTrue(tiffImageData_Strips0.stripsNotTiles());
      assertEquals(8, tiffImageData_Strips0.getImageDataLength());
      
      Rectangle rectangle0 = new Rectangle((-602), 0);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals((-602), rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals((-602.0), rectangle0.getMaxX(), 0.01);
      assertEquals((-301.0), rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals((-602.0), rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      
      // Undeclared exception!
      dataReaderStrips0.readImageData(rectangle0, false, true);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffDirectory tiffDirectory0 = new TiffDirectory((-2222), linkedList0, (-2222), 1L, byteOrder0);
      assertEquals((-2222L), tiffDirectory0.offset);
      assertEquals((-2222), tiffDirectory0.type);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(1L, tiffDirectory0.nextDirectoryOffset);
      assertNotNull(tiffDirectory0);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      
      int[] intArray0 = new int[1];
      PhotometricInterpreterYCbCr photometricInterpreterYCbCr0 = new PhotometricInterpreterYCbCr((-2222), intArray0, 1445, (-5), (-5));
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(photometricInterpreterYCbCr0);
      assertEquals(1, intArray0.length);
      
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      TiffElement.DataElement[] tiffElement_DataElementArray0 = new TiffElement.DataElement[9];
      TiffImageData.Strips tiffImageData_Strips0 = new TiffImageData.Strips(tiffElement_DataElementArray0, (-573));
      assertEquals((-573), tiffImageData_Strips0.rowsPerStrip);
      assertNotNull(tiffImageData_Strips0);
      assertEquals(9, tiffElement_DataElementArray0.length);
      assertTrue(tiffImageData_Strips0.stripsNotTiles());
      assertEquals(9, tiffImageData_Strips0.getImageDataLength());
      
      DataReaderStrips dataReaderStrips0 = new DataReaderStrips(tiffDirectory0, photometricInterpreterYCbCr0, (-2222), intArray0, (-2222), 1148, (-2222), 68, 73, (-3696), tiffPlanarConfiguration0, byteOrder0, 73, tiffImageData_Strips0);
      assertEquals((-2222L), tiffDirectory0.offset);
      assertEquals((-2222), tiffDirectory0.type);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(1L, tiffDirectory0.nextDirectoryOffset);
      assertEquals((-573), tiffImageData_Strips0.rowsPerStrip);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(dataReaderStrips0);
      assertEquals(1, intArray0.length);
      assertEquals(9, tiffElement_DataElementArray0.length);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertTrue(tiffImageData_Strips0.stripsNotTiles());
      assertEquals(9, tiffImageData_Strips0.getImageDataLength());
      
      Point point0 = new Point((byte) (-57), 0);
      assertEquals((-57), point0.x);
      assertEquals(0, point0.y);
      assertNotNull(point0);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals((-57.0), point0.getX(), 0.01);
      
      Rectangle rectangle0 = new Rectangle(point0);
      assertEquals((-57), point0.x);
      assertEquals(0, point0.y);
      assertEquals((-57), rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertNotNull(rectangle0);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals((-57.0), point0.getX(), 0.01);
      assertEquals((-57.0), rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals((-57.0), rectangle0.getCenterX(), 0.01);
      assertEquals((-57.0), rectangle0.getX(), 0.01);
      assertEquals((-57.0), rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      
      // Undeclared exception!
      try { 
        dataReaderStrips0.readImageData(rectangle0, true, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.DataReaderStrips", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffDirectory tiffDirectory0 = new TiffDirectory(1425, linkedList0, 1425, 1425, byteOrder0);
      assertEquals(1425, tiffDirectory0.type);
      assertEquals(1425L, tiffDirectory0.offset);
      assertEquals(1425L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(6, tiffDirectory0.length);
      assertNotNull(tiffDirectory0);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      
      int[] intArray0 = new int[9];
      PhotometricInterpreterRgb photometricInterpreterRgb0 = new PhotometricInterpreterRgb(1425, intArray0, (-80), 3, (-80));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(photometricInterpreterRgb0);
      assertEquals(9, intArray0.length);
      
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      TiffElement.DataElement[] tiffElement_DataElementArray0 = new TiffElement.DataElement[8];
      MockFile mockFile0 = new MockFile("+s3mwb");
      assertNotNull(mockFile0);
      
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      assertNotNull(byteSourceFile0);
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals("+s3mwb", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("+s3mwb", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, byteSourceFile0.getLength());
      assertEquals("+s3mwb", byteSourceFile0.getFileName());
      
      TiffImageData.ByteSourceData tiffImageData_ByteSourceData0 = new TiffImageData.ByteSourceData(8, 8, byteSourceFile0);
      assertEquals(8L, tiffImageData_ByteSourceData0.offset);
      assertEquals(8, tiffImageData_ByteSourceData0.length);
      assertNotNull(tiffImageData_ByteSourceData0);
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals("+s3mwb", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("+s3mwb", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, byteSourceFile0.getLength());
      assertEquals("+s3mwb", byteSourceFile0.getFileName());
      assertEquals(0, tiffImageData_ByteSourceData0.getDataLength());
      
      tiffElement_DataElementArray0[0] = (TiffElement.DataElement) tiffImageData_ByteSourceData0;
      TiffImageData.Strips tiffImageData_Strips0 = new TiffImageData.Strips(tiffElement_DataElementArray0, 0);
      assertEquals(0, tiffImageData_Strips0.rowsPerStrip);
      assertNotNull(tiffImageData_Strips0);
      assertEquals(8, tiffElement_DataElementArray0.length);
      assertTrue(tiffImageData_Strips0.stripsNotTiles());
      assertEquals(8, tiffImageData_Strips0.getImageDataLength());
      
      DataReaderStrips dataReaderStrips0 = new DataReaderStrips(tiffDirectory0, photometricInterpreterRgb0, 8, intArray0, 1425, 0, 3, 1386, 6, 8, tiffPlanarConfiguration0, byteOrder0, 1425, tiffImageData_Strips0);
      assertEquals(1425, tiffDirectory0.type);
      assertEquals(1425L, tiffDirectory0.offset);
      assertEquals(1425L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(0, tiffImageData_Strips0.rowsPerStrip);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(dataReaderStrips0);
      assertEquals(9, intArray0.length);
      assertEquals(8, tiffElement_DataElementArray0.length);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertTrue(tiffImageData_Strips0.stripsNotTiles());
      assertEquals(8, tiffImageData_Strips0.getImageDataLength());
      
      Rectangle rectangle0 = new Rectangle(0, (-614), (byte)0, 1425);
      assertEquals((-614), rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(1425, rectangle0.height);
      assertNotNull(rectangle0);
      assertEquals(811.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(1425.0, rectangle0.getHeight(), 0.01);
      assertEquals((-614.0), rectangle0.getMinY(), 0.01);
      assertEquals((-614.0), rectangle0.getY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(98.5, rectangle0.getCenterY(), 0.01);
      
      // Undeclared exception!
      try { 
        dataReaderStrips0.readImageData(rectangle0, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.ImageDataReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffDirectory tiffDirectory0 = new TiffDirectory(1469, linkedList0, (-808L), (-808L), byteOrder0);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(1469, tiffDirectory0.type);
      assertEquals((-808L), tiffDirectory0.offset);
      assertEquals((-808L), tiffDirectory0.nextDirectoryOffset);
      assertNotNull(tiffDirectory0);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      DataReaderStrips dataReaderStrips0 = null;
      try {
        dataReaderStrips0 = new DataReaderStrips(tiffDirectory0, (PhotometricInterpreter) null, 1469, (int[]) null, 4037, 1469, 3521, (-1420), 1469, 2499, tiffPlanarConfiguration0, byteOrder0, 0, (TiffImageData.Strips) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.ImageDataReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffDirectory tiffDirectory0 = new TiffDirectory((-1850), linkedList0, (-1850), 388L, byteOrder0);
      assertEquals(6, tiffDirectory0.length);
      assertEquals((-1850L), tiffDirectory0.offset);
      assertEquals(388L, tiffDirectory0.nextDirectoryOffset);
      assertEquals((-1850), tiffDirectory0.type);
      assertNotNull(tiffDirectory0);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      
      int[] intArray0 = new int[2];
      PhotometricInterpreterLogLuv photometricInterpreterLogLuv0 = new PhotometricInterpreterLogLuv((-1226), intArray0, 6, (-1850), (-573));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(photometricInterpreterLogLuv0);
      assertEquals(2, intArray0.length);
      
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      TiffElement.DataElement[] tiffElement_DataElementArray0 = new TiffElement.DataElement[0];
      TiffImageData.Strips tiffImageData_Strips0 = new TiffImageData.Strips(tiffElement_DataElementArray0, 0);
      assertEquals(0, tiffImageData_Strips0.rowsPerStrip);
      assertNotNull(tiffImageData_Strips0);
      assertEquals(0, tiffElement_DataElementArray0.length);
      assertTrue(tiffImageData_Strips0.stripsNotTiles());
      assertEquals(0, tiffImageData_Strips0.getImageDataLength());
      
      DataReaderStrips dataReaderStrips0 = null;
      try {
        dataReaderStrips0 = new DataReaderStrips(tiffDirectory0, photometricInterpreterLogLuv0, (-1226), intArray0, (-1850), (-1850), (-1226), 0, 0, (-3988), tiffPlanarConfiguration0, byteOrder0, 15, tiffImageData_Strips0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.ImageDataReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffDirectory tiffDirectory0 = new TiffDirectory(2, linkedList0, 2, 2, byteOrder0);
      assertEquals(2L, tiffDirectory0.offset);
      assertEquals(2, tiffDirectory0.type);
      assertEquals(2L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(6, tiffDirectory0.length);
      assertNotNull(tiffDirectory0);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Thumbnail", tiffDirectory0.description());
      
      int[] intArray0 = new int[5];
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      DataReaderStrips dataReaderStrips0 = new DataReaderStrips(tiffDirectory0, (PhotometricInterpreter) null, 2, intArray0, (-1445), 6, 2, 2, 6, 2, tiffPlanarConfiguration0, byteOrder0, 2, (TiffImageData.Strips) null);
      assertEquals(2L, tiffDirectory0.offset);
      assertEquals(2, tiffDirectory0.type);
      assertEquals(2L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(6, tiffDirectory0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertNotNull(dataReaderStrips0);
      assertEquals(5, intArray0.length);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Thumbnail", tiffDirectory0.description());
      
      Point point0 = new Point((-3191), (-1445));
      assertEquals((-1445), point0.y);
      assertEquals((-3191), point0.x);
      assertNotNull(point0);
      assertEquals((-1445.0), point0.getY(), 0.01);
      assertEquals((-3191.0), point0.getX(), 0.01);
      
      Dimension dimension0 = new Dimension();
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      assertNotNull(dimension0);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      
      Rectangle rectangle0 = new Rectangle(point0, dimension0);
      assertEquals((-1445), point0.y);
      assertEquals((-3191), point0.x);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      assertEquals(0, rectangle0.width);
      assertEquals((-3191), rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals((-1445), rectangle0.y);
      assertNotNull(rectangle0);
      assertEquals((-1445.0), point0.getY(), 0.01);
      assertEquals((-3191.0), point0.getX(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals((-1445.0), rectangle0.getMinY(), 0.01);
      assertEquals((-1445.0), rectangle0.getY(), 0.01);
      assertEquals((-1445.0), rectangle0.getMaxY(), 0.01);
      assertEquals((-3191.0), rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals((-3191.0), rectangle0.getMinX(), 0.01);
      assertEquals((-1445.0), rectangle0.getCenterY(), 0.01);
      assertEquals((-3191.0), rectangle0.getX(), 0.01);
      assertEquals((-3191.0), rectangle0.getCenterX(), 0.01);
      
      // Undeclared exception!
      try { 
        dataReaderStrips0.readRasterData(rectangle0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Raster dimensions less than or equal to zero are not supported
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffRasterData", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      TiffDirectory tiffDirectory0 = new TiffDirectory(350, linkedList0, 350, 350, byteOrder0);
      assertEquals(350L, tiffDirectory0.offset);
      assertEquals(350, tiffDirectory0.type);
      assertEquals(350L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(6, tiffDirectory0.length);
      assertNotNull(tiffDirectory0);
      assertEquals(0, linkedList0.size());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      
      int[] intArray0 = new int[5];
      PhotometricInterpreterRgb photometricInterpreterRgb0 = new PhotometricInterpreterRgb(6, intArray0, 350, 350, (-2322));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertNotNull(photometricInterpreterRgb0);
      assertEquals(5, intArray0.length);
      
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      TiffElement.DataElement[] tiffElement_DataElementArray0 = new TiffElement.DataElement[2];
      TiffImageData.Strips tiffImageData_Strips0 = new TiffImageData.Strips(tiffElement_DataElementArray0, 562);
      assertEquals(562, tiffImageData_Strips0.rowsPerStrip);
      assertNotNull(tiffImageData_Strips0);
      assertEquals(2, tiffElement_DataElementArray0.length);
      assertTrue(tiffImageData_Strips0.stripsNotTiles());
      assertEquals(2, tiffImageData_Strips0.getImageDataLength());
      
      DataReaderStrips dataReaderStrips0 = new DataReaderStrips(tiffDirectory0, photometricInterpreterRgb0, 2, intArray0, (-2991), 6, 2, (-2991), 651, 2, tiffPlanarConfiguration0, (ByteOrder) null, 1103, tiffImageData_Strips0);
      assertEquals(350L, tiffDirectory0.offset);
      assertEquals(350, tiffDirectory0.type);
      assertEquals(350L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(562, tiffImageData_Strips0.rowsPerStrip);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertNotNull(dataReaderStrips0);
      assertEquals(5, intArray0.length);
      assertEquals(2, tiffElement_DataElementArray0.length);
      assertEquals(0, linkedList0.size());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertTrue(tiffImageData_Strips0.stripsNotTiles());
      assertEquals(2, tiffImageData_Strips0.getImageDataLength());
      
      Point point0 = new Point((byte)82, (-1282));
      assertEquals((-1282), point0.y);
      assertEquals(82, point0.x);
      assertNotNull(point0);
      assertEquals(82.0, point0.getX(), 0.01);
      assertEquals((-1282.0), point0.getY(), 0.01);
      
      Dimension dimension0 = new Dimension(651, 24);
      assertEquals(24, dimension0.height);
      assertEquals(651, dimension0.width);
      assertNotNull(dimension0);
      assertEquals(651.0, dimension0.getWidth(), 0.01);
      assertEquals(24.0, dimension0.getHeight(), 0.01);
      
      Rectangle rectangle0 = new Rectangle(point0, dimension0);
      assertEquals((-1282), point0.y);
      assertEquals(82, point0.x);
      assertEquals(24, dimension0.height);
      assertEquals(651, dimension0.width);
      assertEquals(651, rectangle0.width);
      assertEquals(24, rectangle0.height);
      assertEquals((-1282), rectangle0.y);
      assertEquals(82, rectangle0.x);
      assertNotNull(rectangle0);
      assertEquals(82.0, point0.getX(), 0.01);
      assertEquals((-1282.0), point0.getY(), 0.01);
      assertEquals(651.0, dimension0.getWidth(), 0.01);
      assertEquals(24.0, dimension0.getHeight(), 0.01);
      assertEquals(733.0, rectangle0.getMaxX(), 0.01);
      assertEquals((-1282.0), rectangle0.getY(), 0.01);
      assertEquals(407.5, rectangle0.getCenterX(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals((-1270.0), rectangle0.getCenterY(), 0.01);
      assertEquals((-1282.0), rectangle0.getMinY(), 0.01);
      assertEquals(82.0, rectangle0.getX(), 0.01);
      assertEquals(82.0, rectangle0.getMinX(), 0.01);
      assertEquals(24.0, rectangle0.getHeight(), 0.01);
      assertEquals((-1258.0), rectangle0.getMaxY(), 0.01);
      assertEquals(651.0, rectangle0.getWidth(), 0.01);
      
      // Undeclared exception!
      try { 
        dataReaderStrips0.readRasterData(rectangle0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffImageData$Strips", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      TiffDirectory tiffDirectory0 = new TiffDirectory(651, linkedList0, 651, 651, byteOrder0);
      assertEquals(651, tiffDirectory0.type);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(651L, tiffDirectory0.offset);
      assertEquals(651L, tiffDirectory0.nextDirectoryOffset);
      assertNotNull(tiffDirectory0);
      assertEquals(0, linkedList0.size());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      
      int[] intArray0 = new int[9];
      PhotometricInterpreterLogLuv photometricInterpreterLogLuv0 = new PhotometricInterpreterLogLuv(6, intArray0, 625, 651, 0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(photometricInterpreterLogLuv0);
      assertEquals(9, intArray0.length);
      
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      DataReaderStrips dataReaderStrips0 = new DataReaderStrips(tiffDirectory0, photometricInterpreterLogLuv0, 0, intArray0, 0, 6, 3, 651, 6, 0, tiffPlanarConfiguration0, byteOrder0, (-1), (TiffImageData.Strips) null);
      assertEquals(651, tiffDirectory0.type);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(651L, tiffDirectory0.offset);
      assertEquals(651L, tiffDirectory0.nextDirectoryOffset);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(dataReaderStrips0);
      assertEquals(9, intArray0.length);
      assertEquals(0, linkedList0.size());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      
      TiffRasterData tiffRasterData0 = dataReaderStrips0.readRasterData((Rectangle) null);
      assertEquals(651, tiffDirectory0.type);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(651L, tiffDirectory0.offset);
      assertEquals(651L, tiffDirectory0.nextDirectoryOffset);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(tiffRasterData0);
      assertEquals(9, intArray0.length);
      assertEquals(0, linkedList0.size());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertEquals(6, tiffRasterData0.getHeight());
      assertEquals(TiffRasterDataType.FLOAT, tiffRasterData0.getDataType());
      assertEquals(651, tiffRasterData0.getWidth());
      assertEquals(6, tiffRasterData0.getSamplesPerPixel());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      TiffDirectory tiffDirectory0 = new TiffDirectory(1611, linkedList0, 1611, 1611, byteOrder0);
      assertEquals(1611L, tiffDirectory0.offset);
      assertEquals(1611L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(1611, tiffDirectory0.type);
      assertEquals(6, tiffDirectory0.length);
      assertNotNull(tiffDirectory0);
      assertEquals(0, linkedList0.size());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      
      int[] intArray0 = new int[3];
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      TiffElement.DataElement[] tiffElement_DataElementArray0 = new TiffElement.DataElement[0];
      TiffImageData.Strips tiffImageData_Strips0 = new TiffImageData.Strips(tiffElement_DataElementArray0, (-1141));
      assertEquals((-1141), tiffImageData_Strips0.rowsPerStrip);
      assertNotNull(tiffImageData_Strips0);
      assertEquals(0, tiffElement_DataElementArray0.length);
      assertTrue(tiffImageData_Strips0.stripsNotTiles());
      assertEquals(0, tiffImageData_Strips0.getImageDataLength());
      
      DataReaderStrips dataReaderStrips0 = new DataReaderStrips(tiffDirectory0, (PhotometricInterpreter) null, 1611, intArray0, 1611, 426, 0, 0, (-329), 8, tiffPlanarConfiguration0, byteOrder0, 1611, tiffImageData_Strips0);
      assertEquals(1611L, tiffDirectory0.offset);
      assertEquals(1611L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(1611, tiffDirectory0.type);
      assertEquals(6, tiffDirectory0.length);
      assertEquals((-1141), tiffImageData_Strips0.rowsPerStrip);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertNotNull(dataReaderStrips0);
      assertEquals(3, intArray0.length);
      assertEquals(0, tiffElement_DataElementArray0.length);
      assertEquals(0, linkedList0.size());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertTrue(tiffImageData_Strips0.stripsNotTiles());
      assertEquals(0, tiffImageData_Strips0.getImageDataLength());
      
      Rectangle rectangle0 = new Rectangle();
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      
      try { 
        dataReaderStrips0.readRasterData(rectangle0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unsupported sample format, value=0
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.DataReaderStrips", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      TiffDirectory tiffDirectory0 = new TiffDirectory(651, linkedList0, 651, 651, byteOrder0);
      assertEquals(651L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(651, tiffDirectory0.type);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(651L, tiffDirectory0.offset);
      assertNotNull(tiffDirectory0);
      assertEquals(0, linkedList0.size());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      
      int[] intArray0 = new int[9];
      PhotometricInterpreterLogLuv photometricInterpreterLogLuv0 = new PhotometricInterpreterLogLuv(6, intArray0, 625, 2, 651);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(photometricInterpreterLogLuv0);
      assertEquals(9, intArray0.length);
      
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      DataReaderStrips dataReaderStrips0 = new DataReaderStrips(tiffDirectory0, photometricInterpreterLogLuv0, 5, intArray0, 6, 12, 3, (-317), 6, 662, tiffPlanarConfiguration0, byteOrder0, 1886, (TiffImageData.Strips) null);
      assertEquals(651L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(651, tiffDirectory0.type);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(651L, tiffDirectory0.offset);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(dataReaderStrips0);
      assertEquals(9, intArray0.length);
      assertEquals(0, linkedList0.size());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      
      // Undeclared exception!
      try { 
        dataReaderStrips0.readRasterData((Rectangle) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.DataReaderStrips", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      TiffDirectory tiffDirectory0 = new TiffDirectory(2, linkedList0, 2, 2, byteOrder0);
      assertEquals(2L, tiffDirectory0.offset);
      assertEquals(2, tiffDirectory0.type);
      assertEquals(2L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(6, tiffDirectory0.length);
      assertNotNull(tiffDirectory0);
      assertEquals(0, linkedList0.size());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("Thumbnail", tiffDirectory0.description());
      
      int[] intArray0 = new int[2];
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      DataReaderStrips dataReaderStrips0 = new DataReaderStrips(tiffDirectory0, (PhotometricInterpreter) null, 2, intArray0, 2, 6, 2, 6, 6, 2, tiffPlanarConfiguration0, byteOrder0, 2, (TiffImageData.Strips) null);
      assertEquals(2L, tiffDirectory0.offset);
      assertEquals(2, tiffDirectory0.type);
      assertEquals(2L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(6, tiffDirectory0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(dataReaderStrips0);
      assertEquals(2, intArray0.length);
      assertEquals(0, linkedList0.size());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("Thumbnail", tiffDirectory0.description());
      
      // Undeclared exception!
      try { 
        dataReaderStrips0.readRasterData((Rectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.DataReaderStrips", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffDirectory tiffDirectory0 = new TiffDirectory(1386, linkedList0, 1386, 1386, byteOrder0);
      int[] intArray0 = new int[5];
      PhotometricInterpreterRgb photometricInterpreterRgb0 = new PhotometricInterpreterRgb(1386, intArray0, 1386, (-11), 1386);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      TiffElement.DataElement[] tiffElement_DataElementArray0 = new TiffElement.DataElement[8];
      MockFile mockFile0 = new MockFile("+s3umwb");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      TiffImageData.ByteSourceData tiffImageData_ByteSourceData0 = new TiffImageData.ByteSourceData(4294967295L, 3, byteSourceFile0);
      tiffElement_DataElementArray0[0] = (TiffElement.DataElement) tiffImageData_ByteSourceData0;
      TiffImageData.Strips tiffImageData_Strips0 = new TiffImageData.Strips(tiffElement_DataElementArray0, 6);
      DataReaderStrips dataReaderStrips0 = new DataReaderStrips(tiffDirectory0, photometricInterpreterRgb0, 3, intArray0, 1386, 6, 1792, 33447, 0, 3, tiffPlanarConfiguration0, byteOrder0, 1386, tiffImageData_Strips0);
      Rectangle rectangle0 = new Rectangle(33447, 1386);
      dataReaderStrips0.readImageData(rectangle0, false, true);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffDirectory tiffDirectory0 = new TiffDirectory(797, linkedList0, 797, 797, byteOrder0);
      int[] intArray0 = new int[2];
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      TiffElement.DataElement[] tiffElement_DataElementArray0 = new TiffElement.DataElement[3];
      TiffImageData.Strips tiffImageData_Strips0 = new TiffImageData.Strips(tiffElement_DataElementArray0, 797);
      DataReaderStrips dataReaderStrips0 = new DataReaderStrips(tiffDirectory0, (PhotometricInterpreter) null, 797, intArray0, (-665), 797, (-84), 533, (-893), 797, tiffPlanarConfiguration0, byteOrder0, (-84), tiffImageData_Strips0);
      Line2D.Double line2D_Double0 = new Line2D.Double(3161.592111726491, 0.0, 797L, 200.0);
      Rectangle rectangle0 = line2D_Double0.getBounds();
      // Undeclared exception!
      try { 
        dataReaderStrips0.readImageData(rectangle0, true, true);
        fail("Expecting exception: RasterFormatException");
      
      } catch(RasterFormatException e) {
         //
         // subimage x is outside raster
         //
         verifyException("org.apache.commons.imaging.common.ImageBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      CharBuffer charBuffer0 = CharBuffer.allocate(872);
      ByteOrder byteOrder0 = charBuffer0.order();
      TiffDirectory tiffDirectory0 = new TiffDirectory((-2636), linkedList0, 176L, 176L, byteOrder0);
      int[] intArray0 = new int[9];
      PhotometricInterpreterRgb photometricInterpreterRgb0 = new PhotometricInterpreterRgb((-2636), intArray0, (-2636), 0, 48256);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      TiffImageData.Strips tiffImageData_Strips0 = new TiffImageData.Strips((TiffElement.DataElement[]) null, 1511);
      DataReaderStrips dataReaderStrips0 = new DataReaderStrips(tiffDirectory0, photometricInterpreterRgb0, 6, intArray0, (-2636), 872, 6, 6, 872, 48256, tiffPlanarConfiguration0, byteOrder0, (-348), tiffImageData_Strips0);
      // Undeclared exception!
      try { 
        dataReaderStrips0.readImageData((Rectangle) null, true, true);
        fail("Expecting exception: RasterFormatException");
      
      } catch(RasterFormatException e) {
         //
         // subimage (y+height) is outside raster
         //
         verifyException("org.apache.commons.imaging.common.ImageBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffDirectory tiffDirectory0 = new TiffDirectory(1404, linkedList0, 1404, 1404, byteOrder0);
      int[] intArray0 = new int[5];
      PhotometricInterpreterRgb photometricInterpreterRgb0 = new PhotometricInterpreterRgb(1404, intArray0, 1404, 1404, 1404);
      int[] intArray1 = new int[0];
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      TiffElement.DataElement[] tiffElement_DataElementArray0 = new TiffElement.DataElement[7];
      MockFile mockFile0 = new MockFile("oX)B{4\"j", "");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      TiffImageData.ByteSourceData tiffImageData_ByteSourceData0 = new TiffImageData.ByteSourceData(1, 1, byteSourceFile0);
      tiffElement_DataElementArray0[0] = (TiffElement.DataElement) tiffImageData_ByteSourceData0;
      TiffImageData.Strips tiffImageData_Strips0 = new TiffImageData.Strips(tiffElement_DataElementArray0, 0);
      DataReaderStrips dataReaderStrips0 = new DataReaderStrips(tiffDirectory0, photometricInterpreterRgb0, 1, intArray1, 1404, 0, 1794, 1404, 1404, 1, tiffPlanarConfiguration0, byteOrder0, 1404, tiffImageData_Strips0);
      Rectangle rectangle0 = new Rectangle(1404, (-602), (byte)92, 1794);
      // Undeclared exception!
      try { 
        dataReaderStrips0.readImageData(rectangle0, false, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.imaging.formats.tiff.photometricinterpreters.PhotometricInterpreterRgb", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffDirectory tiffDirectory0 = new TiffDirectory(1425, linkedList0, 1425, 1425, byteOrder0);
      int[] intArray0 = new int[5];
      PhotometricInterpreterRgb photometricInterpreterRgb0 = new PhotometricInterpreterRgb(1425, intArray0, (-80), (-11), (-80));
      int[] intArray1 = new int[0];
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      TiffElement.DataElement[] tiffElement_DataElementArray0 = new TiffElement.DataElement[8];
      MockFile mockFile0 = new MockFile("+s3umwb");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      TiffImageData.ByteSourceData tiffImageData_ByteSourceData0 = new TiffImageData.ByteSourceData(4294967295L, 8, byteSourceFile0);
      tiffElement_DataElementArray0[0] = (TiffElement.DataElement) tiffImageData_ByteSourceData0;
      TiffImageData.Strips tiffImageData_Strips0 = new TiffImageData.Strips(tiffElement_DataElementArray0, 6);
      DataReaderStrips dataReaderStrips0 = new DataReaderStrips(tiffDirectory0, photometricInterpreterRgb0, 8, intArray1, 1425, 6, 1789, 33447, 6, 8, tiffPlanarConfiguration0, byteOrder0, 1425, tiffImageData_Strips0);
      Rectangle rectangle0 = new Rectangle((-602), (byte)55);
      // Undeclared exception!
      try { 
        dataReaderStrips0.readImageData(rectangle0, false, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.imaging.formats.tiff.photometricinterpreters.PhotometricInterpreterRgb", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffDirectory tiffDirectory0 = new TiffDirectory(1425, linkedList0, 1425, 1425, byteOrder0);
      int[] intArray0 = new int[9];
      PhotometricInterpreterRgb photometricInterpreterRgb0 = new PhotometricInterpreterRgb(1425, intArray0, (-80), 1, (-80));
      int[] intArray1 = new int[0];
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      TiffElement.DataElement[] tiffElement_DataElementArray0 = new TiffElement.DataElement[8];
      MockFile mockFile0 = new MockFile("+s3mwb");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      TiffImageData.ByteSourceData tiffImageData_ByteSourceData0 = new TiffImageData.ByteSourceData(8, 8, byteSourceFile0);
      tiffElement_DataElementArray0[0] = (TiffElement.DataElement) tiffImageData_ByteSourceData0;
      TiffImageData.Strips tiffImageData_Strips0 = new TiffImageData.Strips(tiffElement_DataElementArray0, 0);
      DataReaderStrips dataReaderStrips0 = new DataReaderStrips(tiffDirectory0, photometricInterpreterRgb0, 8, intArray1, 1425, 0, 1, 1386, 1425, 8, tiffPlanarConfiguration0, byteOrder0, 1425, tiffImageData_Strips0);
      Rectangle rectangle0 = new Rectangle(0, (-614), (byte)0, 1425);
      // Undeclared exception!
      try { 
        dataReaderStrips0.readImageData(rectangle0, false, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.imaging.formats.tiff.photometricinterpreters.PhotometricInterpreterRgb", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffDirectory tiffDirectory0 = new TiffDirectory(1425, linkedList0, 1425, 1425, byteOrder0);
      int[] intArray0 = new int[9];
      PhotometricInterpreterRgb photometricInterpreterRgb0 = new PhotometricInterpreterRgb(1425, intArray0, (-80), 1, (-80));
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      TiffElement.DataElement[] tiffElement_DataElementArray0 = new TiffElement.DataElement[8];
      MockFile mockFile0 = new MockFile("+s3mwb");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      TiffImageData.ByteSourceData tiffImageData_ByteSourceData0 = new TiffImageData.ByteSourceData(8, 8, byteSourceFile0);
      tiffElement_DataElementArray0[0] = (TiffElement.DataElement) tiffImageData_ByteSourceData0;
      TiffImageData.Strips tiffImageData_Strips0 = new TiffImageData.Strips(tiffElement_DataElementArray0, 0);
      DataReaderStrips dataReaderStrips0 = new DataReaderStrips(tiffDirectory0, photometricInterpreterRgb0, 8, intArray0, 1425, 0, 1, 1386, 1425, 8, tiffPlanarConfiguration0, byteOrder0, 1425, tiffImageData_Strips0);
      Rectangle rectangle0 = new Rectangle(0, (-614), (byte)0, 1425);
      try { 
        dataReaderStrips0.readImageData(rectangle0, false, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // BitInputStream: incomplete bit read
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffDirectory tiffDirectory0 = new TiffDirectory(1386, linkedList0, 1386, 1386, byteOrder0);
      int[] intArray0 = new int[5];
      PhotometricInterpreterRgb photometricInterpreterRgb0 = new PhotometricInterpreterRgb(1386, intArray0, 1386, (-11), 1386);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      TiffElement.DataElement[] tiffElement_DataElementArray0 = new TiffElement.DataElement[8];
      MockFile mockFile0 = new MockFile("+s3umwb");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      TiffImageData.ByteSourceData tiffImageData_ByteSourceData0 = new TiffImageData.ByteSourceData(0, 3, byteSourceFile0);
      tiffElement_DataElementArray0[0] = (TiffElement.DataElement) tiffImageData_ByteSourceData0;
      TiffImageData.Strips tiffImageData_Strips0 = new TiffImageData.Strips(tiffElement_DataElementArray0, 6);
      DataReaderStrips dataReaderStrips0 = new DataReaderStrips(tiffDirectory0, photometricInterpreterRgb0, 3, intArray0, 1386, 6, 3, 6, 0, 3, tiffPlanarConfiguration0, byteOrder0, 1386, tiffImageData_Strips0);
      Rectangle rectangle0 = new Rectangle(1386, (-602), 1386, 1386);
      try { 
        dataReaderStrips0.readImageData(rectangle0, false, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Imaging does not support floating-point samples with 3 bits per sample
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.ImageDataReader", e);
      }
  }
}
