/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 23:28:38 GMT 2022
 */

package org.apache.commons.imaging.formats.tiff.photometricinterpreters.floatingpoint;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import org.apache.commons.imaging.common.ImageBuilder;
import org.apache.commons.imaging.formats.tiff.photometricinterpreters.floatingpoint.PaletteEntry;
import org.apache.commons.imaging.formats.tiff.photometricinterpreters.floatingpoint.PaletteEntryForValue;
import org.apache.commons.imaging.formats.tiff.photometricinterpreters.floatingpoint.PhotometricInterpreterFloat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PhotometricInterpreterFloat_ESTest extends PhotometricInterpreterFloat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PhotometricInterpreterFloat photometricInterpreterFloat0 = new PhotometricInterpreterFloat(448.0037F, (-1184.8256F));
      photometricInterpreterFloat0.nFound = 3813;
      photometricInterpreterFloat0.sumFound = (double) 3813;
      float float0 = photometricInterpreterFloat0.getMeanFound();
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PhotometricInterpreterFloat photometricInterpreterFloat0 = new PhotometricInterpreterFloat(3069.4F, 2576.9F);
      photometricInterpreterFloat0.nFound = (-4089);
      float float0 = photometricInterpreterFloat0.getMeanFound();
      assertEquals(-0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PhotometricInterpreterFloat photometricInterpreterFloat0 = new PhotometricInterpreterFloat(0.0F, (-4160.0F));
      photometricInterpreterFloat0.xMax = 2;
      int[] intArray0 = photometricInterpreterFloat0.getMinXY();
      assertEquals(Float.NEGATIVE_INFINITY, photometricInterpreterFloat0.getMaxFound(), 0.01F);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(Float.POSITIVE_INFINITY, photometricInterpreterFloat0.getMinFound(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PhotometricInterpreterFloat photometricInterpreterFloat0 = new PhotometricInterpreterFloat((-90.18F), 835.7776F);
      photometricInterpreterFloat0.yMax = 3131;
      int[] intArray0 = photometricInterpreterFloat0.getMaxXY();
      assertEquals(Float.NEGATIVE_INFINITY, photometricInterpreterFloat0.getMaxFound(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, photometricInterpreterFloat0.getMinFound(), 0.01F);
      assertArrayEquals(new int[] {0, 3131}, intArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PhotometricInterpreterFloat photometricInterpreterFloat0 = new PhotometricInterpreterFloat((-90.18F), 835.7776F);
      photometricInterpreterFloat0.xMin = 0;
      photometricInterpreterFloat0.xMin = 32;
      int[] intArray0 = photometricInterpreterFloat0.getMaxXY();
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(Float.NEGATIVE_INFINITY, photometricInterpreterFloat0.getMaxFound(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, photometricInterpreterFloat0.getMinFound(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PhotometricInterpreterFloat photometricInterpreterFloat0 = new PhotometricInterpreterFloat((-2065.14F), 0.0F);
      ImageBuilder imageBuilder0 = new ImageBuilder(2, 2, true, true);
      int[] intArray0 = new int[7];
      photometricInterpreterFloat0.interpretPixel(imageBuilder0, intArray0, 1743, 2);
      photometricInterpreterFloat0.getMaxXY();
      assertEquals(0.0F, photometricInterpreterFloat0.getMinFound(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PhotometricInterpreterFloat photometricInterpreterFloat0 = new PhotometricInterpreterFloat((-439.11502F), 961.8942F);
      int[] intArray0 = new int[9];
      photometricInterpreterFloat0.maxFound = 961.8942F;
      // Undeclared exception!
      try { 
        photometricInterpreterFloat0.interpretPixel((ImageBuilder) null, intArray0, 1, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.photometricinterpreters.floatingpoint.PhotometricInterpreterFloat", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PhotometricInterpreterFloat photometricInterpreterFloat0 = new PhotometricInterpreterFloat(0.0F, (-0.4422989F));
      int[] intArray0 = photometricInterpreterFloat0.getMinXY();
      ImageBuilder imageBuilder0 = new ImageBuilder(910, 910, true);
      photometricInterpreterFloat0.interpretPixel(imageBuilder0, intArray0, 31, (-895));
      int[] intArray1 = photometricInterpreterFloat0.getMinXY();
      photometricInterpreterFloat0.interpretPixel(imageBuilder0, intArray1, (-895), 910);
      assertEquals(2.24E-44F, photometricInterpreterFloat0.getMeanFound(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PhotometricInterpreterFloat photometricInterpreterFloat0 = new PhotometricInterpreterFloat(0.0F, 2187.8853F);
      ArrayList<PaletteEntry> arrayList0 = photometricInterpreterFloat0.singleValuePaletteEntries;
      Color color0 = new Color(0, false);
      PaletteEntryForValue paletteEntryForValue0 = new PaletteEntryForValue(0, color0);
      arrayList0.add((PaletteEntry) paletteEntryForValue0);
      int[] intArray0 = photometricInterpreterFloat0.getMaxXY();
      // Undeclared exception!
      try { 
        photometricInterpreterFloat0.interpretPixel((ImageBuilder) null, intArray0, (-1767), 32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.photometricinterpreters.floatingpoint.PhotometricInterpreterFloat", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PhotometricInterpreterFloat photometricInterpreterFloat0 = new PhotometricInterpreterFloat(917.7205F, (-5518.116F));
      ImageBuilder imageBuilder0 = new ImageBuilder(1954, 635, true);
      int[] intArray0 = new int[3];
      photometricInterpreterFloat0.interpretPixel(imageBuilder0, intArray0, 201, 1);
      assertEquals(0.0F, photometricInterpreterFloat0.getMaxFound(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PhotometricInterpreterFloat photometricInterpreterFloat0 = new PhotometricInterpreterFloat(0.0F, 2170.3032F);
      ArrayList<PaletteEntry> arrayList0 = photometricInterpreterFloat0.singleValuePaletteEntries;
      Color color0 = Color.BLACK;
      PaletteEntryForValue paletteEntryForValue0 = new PaletteEntryForValue(0, color0);
      arrayList0.add((PaletteEntry) paletteEntryForValue0);
      assertEquals(1, arrayList0.size());
      
      int[] intArray0 = photometricInterpreterFloat0.getMaxXY();
      ImageBuilder imageBuilder0 = new ImageBuilder(4, 1659, true);
      photometricInterpreterFloat0.interpretPixel(imageBuilder0, intArray0, 0, 0);
      assertEquals(Float.POSITIVE_INFINITY, photometricInterpreterFloat0.getMinFound(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PhotometricInterpreterFloat photometricInterpreterFloat0 = new PhotometricInterpreterFloat(2187.8853F, 0.0F);
      assertEquals(Float.POSITIVE_INFINITY, photometricInterpreterFloat0.getMinFound(), 0.01F);
      
      photometricInterpreterFloat0.minFound = 0.0F;
      float float0 = photometricInterpreterFloat0.getMinFound();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PhotometricInterpreterFloat photometricInterpreterFloat0 = new PhotometricInterpreterFloat((-90.18F), 835.7776F);
      photometricInterpreterFloat0.minFound = (-1820.109F);
      float float0 = photometricInterpreterFloat0.getMinFound();
      assertEquals((-1820.109F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PhotometricInterpreterFloat photometricInterpreterFloat0 = new PhotometricInterpreterFloat(0.0F, (-0.4422989F));
      int[] intArray0 = photometricInterpreterFloat0.getMinXY();
      photometricInterpreterFloat0.sumFound = (double) Float.NEGATIVE_INFINITY;
      ImageBuilder imageBuilder0 = new ImageBuilder(910, 910, true);
      photometricInterpreterFloat0.interpretPixel(imageBuilder0, intArray0, 0, (-895));
      float float0 = photometricInterpreterFloat0.getMeanFound();
      assertEquals(0.0F, photometricInterpreterFloat0.getMinFound(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PhotometricInterpreterFloat photometricInterpreterFloat0 = new PhotometricInterpreterFloat(0.0F, (-0.4422989F));
      int[] intArray0 = photometricInterpreterFloat0.getMinXY();
      ImageBuilder imageBuilder0 = new ImageBuilder(910, 910, true);
      photometricInterpreterFloat0.interpretPixel(imageBuilder0, intArray0, 0, (-895));
      float float0 = photometricInterpreterFloat0.getMaxFound();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PhotometricInterpreterFloat photometricInterpreterFloat0 = new PhotometricInterpreterFloat(1.0F, 0.0F);
      photometricInterpreterFloat0.maxFound = 2833.0F;
      float float0 = photometricInterpreterFloat0.getMaxFound();
      assertEquals(2833.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PhotometricInterpreterFloat photometricInterpreterFloat0 = new PhotometricInterpreterFloat(0.0F, (-4160.0F));
      photometricInterpreterFloat0.rangePaletteEntries = null;
      // Undeclared exception!
      try { 
        photometricInterpreterFloat0.mapValueToARGB((-4761.0F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.photometricinterpreters.floatingpoint.PhotometricInterpreterFloat", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PhotometricInterpreterFloat photometricInterpreterFloat0 = new PhotometricInterpreterFloat((-3169.6943F), 1221.2F);
      ImageBuilder imageBuilder0 = new ImageBuilder(32, 791, false, true);
      int[] intArray0 = new int[9];
      // Undeclared exception!
      try { 
        photometricInterpreterFloat0.interpretPixel(imageBuilder0, intArray0, 2116416098, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2116416194
         //
         verifyException("org.apache.commons.imaging.common.ImageBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PhotometricInterpreterFloat photometricInterpreterFloat0 = new PhotometricInterpreterFloat(0.0F, (-1382.2761F));
      ArrayList<PaletteEntry> arrayList0 = photometricInterpreterFloat0.rangePaletteEntries;
      arrayList0.add((PaletteEntry) null);
      PhotometricInterpreterFloat photometricInterpreterFloat1 = null;
      try {
        photometricInterpreterFloat1 = new PhotometricInterpreterFloat(arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.photometricinterpreters.floatingpoint.PhotometricInterpreterFloat", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PhotometricInterpreterFloat photometricInterpreterFloat0 = null;
      try {
        photometricInterpreterFloat0 = new PhotometricInterpreterFloat(0.0F, 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Specified values must be v0<v1
         //
         verifyException("org.apache.commons.imaging.formats.tiff.photometricinterpreters.floatingpoint.PaletteEntryForRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PhotometricInterpreterFloat photometricInterpreterFloat0 = new PhotometricInterpreterFloat(448.0037F, (-1184.8256F));
      int int0 = photometricInterpreterFloat0.mapValueToARGB(148.2416F);
      assertEquals(Float.NEGATIVE_INFINITY, photometricInterpreterFloat0.getMaxFound(), 0.01F);
      assertEquals((-13684945), int0);
      assertEquals(Float.POSITIVE_INFINITY, photometricInterpreterFloat0.getMinFound(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PhotometricInterpreterFloat photometricInterpreterFloat0 = new PhotometricInterpreterFloat(0.0F, 2170.3032F);
      ArrayList<PaletteEntry> arrayList0 = photometricInterpreterFloat0.singleValuePaletteEntries;
      Color color0 = Color.BLACK;
      PaletteEntryForValue paletteEntryForValue0 = new PaletteEntryForValue(0, color0);
      arrayList0.add((PaletteEntry) paletteEntryForValue0);
      assertEquals(1, arrayList0.size());
      
      int int0 = photometricInterpreterFloat0.mapValueToARGB(0.0F);
      assertEquals((-16777216), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PhotometricInterpreterFloat photometricInterpreterFloat0 = new PhotometricInterpreterFloat(0.0F, (-0.4422989F));
      ArrayList<PaletteEntry> arrayList0 = photometricInterpreterFloat0.singleValuePaletteEntries;
      Color color0 = Color.gray;
      PaletteEntryForValue paletteEntryForValue0 = new PaletteEntryForValue(478.5516F, color0);
      arrayList0.add((PaletteEntry) paletteEntryForValue0);
      int int0 = photometricInterpreterFloat0.mapValueToARGB((-858.2747F));
      assertEquals(Float.POSITIVE_INFINITY, photometricInterpreterFloat0.getMinFound(), 0.01F);
      assertEquals(0, int0);
      assertEquals(Float.NEGATIVE_INFINITY, photometricInterpreterFloat0.getMaxFound(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PhotometricInterpreterFloat photometricInterpreterFloat0 = new PhotometricInterpreterFloat(0.0F, 2170.3032F);
      float float0 = photometricInterpreterFloat0.getMeanFound();
      assertEquals(Float.POSITIVE_INFINITY, photometricInterpreterFloat0.getMinFound(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, photometricInterpreterFloat0.getMaxFound(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PhotometricInterpreterFloat photometricInterpreterFloat0 = new PhotometricInterpreterFloat((-3.2593298F), Float.NEGATIVE_INFINITY);
      int[] intArray0 = new int[8];
      intArray0[0] = (-1086);
      photometricInterpreterFloat0.interpretPixel((ImageBuilder) null, intArray0, (-1086), 0);
      assertEquals(Float.POSITIVE_INFINITY, photometricInterpreterFloat0.getMinFound(), 0.01F);
      assertEquals(0.0F, photometricInterpreterFloat0.getMeanFound(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, photometricInterpreterFloat0.getMaxFound(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PhotometricInterpreterFloat photometricInterpreterFloat0 = new PhotometricInterpreterFloat(0.0F, (-3.08F));
      ArrayList<PaletteEntry> arrayList0 = photometricInterpreterFloat0.singleValuePaletteEntries;
      Color color0 = Color.lightGray;
      PaletteEntryForValue paletteEntryForValue0 = new PaletteEntryForValue(Float.NEGATIVE_INFINITY, color0);
      arrayList0.add((PaletteEntry) paletteEntryForValue0);
      int[] intArray0 = photometricInterpreterFloat0.getMinXY();
      ImageBuilder imageBuilder0 = new ImageBuilder(896, 896, true, true);
      photometricInterpreterFloat0.interpretPixel(imageBuilder0, intArray0, 896, 896);
      assertEquals(0.0F, photometricInterpreterFloat0.getMaxFound(), 0.01F);
      assertEquals(0.0F, photometricInterpreterFloat0.getMinFound(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PhotometricInterpreterFloat photometricInterpreterFloat0 = new PhotometricInterpreterFloat(0.0F, (-3.08F));
      int[] intArray0 = photometricInterpreterFloat0.getMinXY();
      ImageBuilder imageBuilder0 = new ImageBuilder(896, 896, true, true);
      photometricInterpreterFloat0.interpretPixel(imageBuilder0, intArray0, 896, 896);
      photometricInterpreterFloat0.interpretPixel(imageBuilder0, intArray0, 896, 896);
      assertEquals(0.0F, photometricInterpreterFloat0.getMinFound(), 0.01F);
      assertEquals(0.0F, photometricInterpreterFloat0.getMaxFound(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PhotometricInterpreterFloat photometricInterpreterFloat0 = new PhotometricInterpreterFloat(1212.0244F, (-17.378899F));
      ArrayList<PaletteEntry> arrayList0 = photometricInterpreterFloat0.rangePaletteEntries;
      assertEquals(1, arrayList0.size());
      
      PhotometricInterpreterFloat photometricInterpreterFloat1 = new PhotometricInterpreterFloat(arrayList0);
      assertEquals(Float.NEGATIVE_INFINITY, photometricInterpreterFloat1.getMaxFound(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, photometricInterpreterFloat0.getMaxFound(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, photometricInterpreterFloat0.getMinFound(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, photometricInterpreterFloat1.getMinFound(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PhotometricInterpreterFloat photometricInterpreterFloat0 = new PhotometricInterpreterFloat(0.0F, (-3.08F));
      ArrayList<PaletteEntry> arrayList0 = photometricInterpreterFloat0.singleValuePaletteEntries;
      Color color0 = Color.lightGray;
      PaletteEntryForValue paletteEntryForValue0 = new PaletteEntryForValue(Float.NEGATIVE_INFINITY, color0);
      arrayList0.add((PaletteEntry) paletteEntryForValue0);
      PhotometricInterpreterFloat photometricInterpreterFloat1 = new PhotometricInterpreterFloat(arrayList0);
      assertEquals(1, arrayList0.size());
      assertEquals(Float.POSITIVE_INFINITY, photometricInterpreterFloat1.getMinFound(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PhotometricInterpreterFloat photometricInterpreterFloat0 = new PhotometricInterpreterFloat(0.0F, (-3.08F));
      ArrayList<PaletteEntry> arrayList0 = photometricInterpreterFloat0.singleValuePaletteEntries;
      PhotometricInterpreterFloat photometricInterpreterFloat1 = null;
      try {
        photometricInterpreterFloat1 = new PhotometricInterpreterFloat(arrayList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Palette entries list must be non-null and non-empty
         //
         verifyException("org.apache.commons.imaging.formats.tiff.photometricinterpreters.floatingpoint.PhotometricInterpreterFloat", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PhotometricInterpreterFloat photometricInterpreterFloat0 = null;
      try {
        photometricInterpreterFloat0 = new PhotometricInterpreterFloat((List<PaletteEntry>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Palette entries list must be non-null and non-empty
         //
         verifyException("org.apache.commons.imaging.formats.tiff.photometricinterpreters.floatingpoint.PhotometricInterpreterFloat", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PhotometricInterpreterFloat photometricInterpreterFloat0 = new PhotometricInterpreterFloat(0.0F, 2170.3032F);
      float float0 = photometricInterpreterFloat0.getMinFound();
      assertEquals(Float.NEGATIVE_INFINITY, photometricInterpreterFloat0.getMaxFound(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PhotometricInterpreterFloat photometricInterpreterFloat0 = new PhotometricInterpreterFloat(0.0F, (-3.08F));
      float float0 = photometricInterpreterFloat0.getMaxFound();
      assertEquals(Float.POSITIVE_INFINITY, photometricInterpreterFloat0.getMinFound(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
  }
}
