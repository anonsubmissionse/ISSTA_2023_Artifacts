/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 23:42:21 GMT 2022
 */

package org.apache.commons.imaging.formats.pcx;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import java.io.PipedOutputStream;
import java.nio.ByteOrder;
import java.nio.CharBuffer;
import org.apache.commons.imaging.common.BinaryOutputStream;
import org.apache.commons.imaging.formats.pcx.RleWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RleWriter_ESTest extends RleWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RleWriter rleWriter0 = new RleWriter(false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      ByteOrder byteOrder0 = charBuffer0.order();
      BinaryOutputStream binaryOutputStream0 = new BinaryOutputStream(pipedOutputStream0, byteOrder0);
      byte[] byteArray0 = new byte[5];
      try { 
        rleWriter0.write(binaryOutputStream0, byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      RleWriter rleWriter0 = new RleWriter(true);
      rleWriter0.write((BinaryOutputStream) null, byteArray0);
      // Undeclared exception!
      try { 
        rleWriter0.flush((BinaryOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.pcx.RleWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RleWriter rleWriter0 = new RleWriter(true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(",nz{G#*h+jweLe+", true);
      BinaryOutputStream binaryOutputStream0 = new BinaryOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[5];
      rleWriter0.write(binaryOutputStream0, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        rleWriter0.flush(binaryOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RleWriter rleWriter0 = new RleWriter(true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(",nz{G#*h+jweLe+", true);
      BinaryOutputStream binaryOutputStream0 = new BinaryOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte)1;
      rleWriter0.write(binaryOutputStream0, byteArray0);
      rleWriter0.flush(binaryOutputStream0);
      assertEquals(4, binaryOutputStream0.getByteCount());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.imaging.formats.pcx.RleWriter");
      byte[] byteArray0 = new byte[8];
      byteArray0[7] = (byte) (-64);
      RleWriter rleWriter0 = new RleWriter(true);
      BinaryOutputStream binaryOutputStream0 = new BinaryOutputStream(mockPrintStream0);
      rleWriter0.write(binaryOutputStream0, byteArray0);
      rleWriter0.flush(binaryOutputStream0);
      assertEquals(4, binaryOutputStream0.getByteCount());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.imaging.formats.pcx.RleWriter");
      byte[] byteArray0 = new byte[8];
      byteArray0[5] = (byte) (-64);
      byteArray0[7] = (byte) (-64);
      RleWriter rleWriter0 = new RleWriter(true);
      BinaryOutputStream binaryOutputStream0 = new BinaryOutputStream(mockPrintStream0);
      rleWriter0.write(binaryOutputStream0, byteArray0);
      assertEquals(5, binaryOutputStream0.getByteCount());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[67];
      RleWriter rleWriter0 = new RleWriter(true);
      // Undeclared exception!
      try { 
        rleWriter0.write((BinaryOutputStream) null, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.pcx.RleWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      RleWriter rleWriter0 = new RleWriter(true);
      File file0 = MockFile.createTempFile("+H2L#`", "+H2L#`");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      BinaryOutputStream binaryOutputStream0 = new BinaryOutputStream(mockFileOutputStream0);
      rleWriter0.flush(binaryOutputStream0);
      assertEquals(0, binaryOutputStream0.getByteCount());
      assertEquals(0L, file0.length());
  }
}
