/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 22:58:37 GMT 2022
 */

package org.apache.commons.imaging.formats.pcx;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.awt.image.RescaleOp;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.util.Hashtable;
import javax.swing.DebugGraphics;
import org.apache.commons.imaging.PixelDensity;
import org.apache.commons.imaging.common.RgbBufferedImageFactory;
import org.apache.commons.imaging.formats.pcx.PcxImagingParameters;
import org.apache.commons.imaging.formats.pcx.PcxWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PcxWriter_ESTest extends PcxWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(12, 12, 12);
      PrintStream printStream0 = DebugGraphics.logStream();
      PcxImagingParameters pcxImagingParameters0 = new PcxImagingParameters();
      pcxImagingParameters0.setBitDepth(256);
      PcxWriter pcxWriter0 = new PcxWriter(pcxImagingParameters0);
      pcxWriter0.writeImage(bufferedImage0, printStream0);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PcxWriter pcxWriter0 = new PcxWriter((PcxImagingParameters) null);
      RgbBufferedImageFactory rgbBufferedImageFactory0 = new RgbBufferedImageFactory();
      BufferedImage bufferedImage0 = rgbBufferedImageFactory0.getColorBufferedImage(226, 13, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        pcxWriter0.writeImage(bufferedImage0, pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PcxWriter pcxWriter0 = new PcxWriter((PcxImagingParameters) null);
      Hashtable<RenderingHints.Key, DataInputStream> hashtable0 = new Hashtable<RenderingHints.Key, DataInputStream>();
      RenderingHints renderingHints0 = new RenderingHints(hashtable0);
      RescaleOp rescaleOp0 = new RescaleOp(389.2F, 389.2F, renderingHints0);
      RgbBufferedImageFactory rgbBufferedImageFactory0 = new RgbBufferedImageFactory();
      BufferedImage bufferedImage0 = rgbBufferedImageFactory0.getGrayscaleBufferedImage(13, 215, false);
      BufferedImage bufferedImage1 = rescaleOp0.filter(bufferedImage0, bufferedImage0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("O4f{cYX");
      pcxWriter0.writeImage(bufferedImage1, mockPrintStream0);
      assertEquals(0.5F, bufferedImage1.getAccelerationPriority(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PcxWriter pcxWriter0 = new PcxWriter((PcxImagingParameters) null);
      RgbBufferedImageFactory rgbBufferedImageFactory0 = new RgbBufferedImageFactory();
      BufferedImage bufferedImage0 = rgbBufferedImageFactory0.getColorBufferedImage(226, 13, true);
      bufferedImage0.setRGB(187, 0, (-426));
      // Undeclared exception!
      try { 
        pcxWriter0.writeImage(bufferedImage0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PcxWriter pcxWriter0 = new PcxWriter((PcxImagingParameters) null);
      Hashtable<RenderingHints.Key, DataInputStream> hashtable0 = new Hashtable<RenderingHints.Key, DataInputStream>();
      RenderingHints renderingHints0 = new RenderingHints(hashtable0);
      RescaleOp rescaleOp0 = new RescaleOp(389.2F, 389.2F, renderingHints0);
      RgbBufferedImageFactory rgbBufferedImageFactory0 = new RgbBufferedImageFactory();
      BufferedImage bufferedImage0 = rgbBufferedImageFactory0.getColorBufferedImage(226, 13, false);
      BufferedImage bufferedImage1 = rescaleOp0.filter(bufferedImage0, bufferedImage0);
      bufferedImage1.setRGB(187, 0, (-426));
      // Undeclared exception!
      try { 
        pcxWriter0.writeImage(bufferedImage0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(12, 12, 12);
      PrintStream printStream0 = DebugGraphics.logStream();
      PcxImagingParameters pcxImagingParameters0 = new PcxImagingParameters();
      pcxImagingParameters0.setBitDepth((byte)2);
      pcxImagingParameters0.setPlanes((byte)2);
      PcxWriter pcxWriter0 = new PcxWriter(pcxImagingParameters0);
      pcxWriter0.writeImage(bufferedImage0, printStream0);
      assertTrue(bufferedImage0.hasTileWriters());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(5, 5, 5);
      PrintStream printStream0 = DebugGraphics.logStream();
      PcxImagingParameters pcxImagingParameters0 = new PcxImagingParameters();
      pcxImagingParameters0.setBitDepth((byte)2);
      PcxWriter pcxWriter0 = new PcxWriter(pcxImagingParameters0);
      pcxWriter0.writeImage(bufferedImage0, printStream0);
      assertEquals(0, bufferedImage0.getMinTileX());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(12, 12, 12);
      PrintStream printStream0 = DebugGraphics.logStream();
      PcxImagingParameters pcxImagingParameters0 = new PcxImagingParameters();
      pcxImagingParameters0.setBitDepth((byte)3);
      PcxWriter pcxWriter0 = new PcxWriter(pcxImagingParameters0);
      pcxWriter0.writeImage(bufferedImage0, printStream0);
      assertEquals(12, bufferedImage0.getWidth());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(12, 12, 12);
      PrintStream printStream0 = DebugGraphics.logStream();
      PcxImagingParameters pcxImagingParameters0 = new PcxImagingParameters();
      pcxImagingParameters0.setPlanes(1);
      pcxImagingParameters0.setBitDepth((byte)4);
      PcxWriter pcxWriter0 = new PcxWriter(pcxImagingParameters0);
      pcxWriter0.writeImage(bufferedImage0, printStream0);
      assertTrue(bufferedImage0.hasTileWriters());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(12, 12, 12);
      PrintStream printStream0 = DebugGraphics.logStream();
      PcxImagingParameters pcxImagingParameters0 = new PcxImagingParameters();
      pcxImagingParameters0.setBitDepth((byte)4);
      PcxWriter pcxWriter0 = new PcxWriter(pcxImagingParameters0);
      pcxWriter0.writeImage(bufferedImage0, printStream0);
      assertEquals(1, bufferedImage0.getTransparency());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(6, 6, 6);
      PrintStream printStream0 = DebugGraphics.logStream();
      PcxImagingParameters pcxImagingParameters0 = new PcxImagingParameters();
      pcxImagingParameters0.setBitDepth(8);
      PcxWriter pcxWriter0 = new PcxWriter(pcxImagingParameters0);
      pcxWriter0.writeImage(bufferedImage0, printStream0);
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(8, 8, 8);
      PrintStream printStream0 = DebugGraphics.logStream();
      PcxImagingParameters pcxImagingParameters0 = new PcxImagingParameters();
      pcxImagingParameters0.setBitDepth((byte)32);
      PcxWriter pcxWriter0 = new PcxWriter(pcxImagingParameters0);
      pcxWriter0.writeImage(bufferedImage0, printStream0);
      assertEquals(0, bufferedImage0.getMinTileX());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(12, 12, 12);
      PrintStream printStream0 = DebugGraphics.logStream();
      PcxImagingParameters pcxImagingParameters0 = new PcxImagingParameters();
      pcxImagingParameters0.setBitDepth((byte)24);
      PcxWriter pcxWriter0 = new PcxWriter(pcxImagingParameters0);
      pcxWriter0.writeImage(bufferedImage0, printStream0);
      assertEquals(0, bufferedImage0.getMinY());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PcxImagingParameters pcxImagingParameters0 = new PcxImagingParameters();
      PixelDensity pixelDensity0 = PixelDensity.createFromPixelsPerCentimetre((-0.035083874933702075), (-0.035083874933702075));
      pcxImagingParameters0.setPixelDensity(pixelDensity0);
      PcxWriter pcxWriter0 = new PcxWriter(pcxImagingParameters0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PcxImagingParameters pcxImagingParameters0 = new PcxImagingParameters();
      pcxImagingParameters0.setCompression((byte)2);
      PcxWriter pcxWriter0 = new PcxWriter(pcxImagingParameters0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PcxImagingParameters pcxImagingParameters0 = new PcxImagingParameters();
      PcxWriter pcxWriter0 = new PcxWriter(pcxImagingParameters0);
      RgbBufferedImageFactory rgbBufferedImageFactory0 = new RgbBufferedImageFactory();
      BufferedImage bufferedImage0 = rgbBufferedImageFactory0.getColorBufferedImage(100, 100, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(100);
      // Undeclared exception!
      pcxWriter0.writeImage(bufferedImage0, byteArrayOutputStream0);
  }
}
