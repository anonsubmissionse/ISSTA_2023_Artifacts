/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 23:24:40 GMT 2022
 */

package org.apache.commons.imaging.formats.jpeg.segments;

import org.junit.Test;
import static org.junit.Assert.*;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import org.apache.commons.imaging.formats.jpeg.segments.App13Segment;
import org.apache.commons.imaging.formats.jpeg.segments.App14Segment;
import org.apache.commons.imaging.formats.jpeg.segments.App2Segment;
import org.apache.commons.imaging.formats.jpeg.segments.ComSegment;
import org.apache.commons.imaging.formats.jpeg.segments.DhtSegment;
import org.apache.commons.imaging.formats.jpeg.segments.DqtSegment;
import org.apache.commons.imaging.formats.jpeg.segments.SofnSegment;
import org.apache.commons.imaging.formats.jpeg.segments.UnknownSegment;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Segment_ESTest extends Segment_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      App13Segment app13Segment0 = new App13Segment(65523, byteArray0);
      String string0 = app13Segment0.getSegmentType();
      assertEquals("JPG19", string0);
      assertEquals(1, app13Segment0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      App14Segment app14Segment0 = new App14Segment(65471, 0, (InputStream) null);
      String string0 = app14Segment0.getSegmentType();
      assertEquals(0, app14Segment0.length);
      assertEquals(65471, app14Segment0.marker);
      assertEquals("Reserved", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      UnknownSegment unknownSegment0 = new UnknownSegment(65475, byteArray0);
      String string0 = unknownSegment0.getSegmentType();
      assertEquals("Start Of Frame, Lossless (sequential), Huffman coding", string0);
      assertEquals(0, unknownSegment0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      App14Segment app14Segment0 = new App14Segment(65478, 0, (InputStream) null);
      String string0 = app14Segment0.getSegmentType();
      assertEquals("Start Of Frame, Differential progressive Dct, Huffman coding", string0);
      assertEquals(0, app14Segment0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      App14Segment app14Segment0 = new App14Segment(65477, 0, (InputStream) null);
      String string0 = app14Segment0.getSegmentType();
      assertEquals(0, app14Segment0.length);
      assertEquals("Start Of Frame, Differential sequential Dct, Huffman coding", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ComSegment comSegment0 = new ComSegment(65490, byteArray0);
      String string0 = comSegment0.getSegmentType();
      assertEquals("Restart with modulo 8 count 2", string0);
      assertEquals(5, comSegment0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      App13Segment app13Segment0 = new App13Segment(65496, byteArray0);
      String string0 = app13Segment0.getSegmentType();
      assertEquals("Start of image", string0);
      assertEquals(1, app13Segment0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      App13Segment app13Segment0 = new App13Segment(65495, byteArray0);
      String string0 = app13Segment0.getSegmentType();
      assertEquals(1, app13Segment0.length);
      assertEquals("Restart with modulo 8 count 7", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      App14Segment app14Segment0 = new App14Segment(65484, 0, (InputStream) null);
      String string0 = app14Segment0.getSegmentType();
      assertEquals(0, app14Segment0.length);
      assertEquals("Define arithmetic coding conditioning(s)", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      App13Segment app13Segment0 = new App13Segment(65472, byteArray0);
      String string0 = app13Segment0.getSegmentType();
      assertEquals("Start Of Frame, Baseline Dct, Huffman coding", string0);
      assertEquals(1, app13Segment0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      App14Segment app14Segment0 = new App14Segment(65281, byteArray0);
      String string0 = app14Segment0.getSegmentType();
      assertEquals("For temporary private use in arithmetic coding", string0);
      assertEquals(2, app14Segment0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      App14Segment app14Segment0 = new App14Segment(65497, 0, (InputStream) null);
      String string0 = app14Segment0.getSegmentType();
      assertEquals(0, app14Segment0.length);
      assertEquals("End of image", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      App13Segment app13Segment0 = new App13Segment(65473, byteArray0);
      String string0 = app13Segment0.getSegmentType();
      assertEquals("Start Of Frame, Extended sequential Dct, Huffman coding", string0);
      assertEquals(1, app13Segment0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      App13Segment app13Segment0 = new App13Segment(65491, byteArray0);
      String string0 = app13Segment0.getSegmentType();
      assertEquals("Restart with modulo 8 count 3", string0);
      assertEquals(1, app13Segment0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      App14Segment app14Segment0 = new App14Segment(65485, 0, (InputStream) null);
      String string0 = app14Segment0.getSegmentType();
      assertEquals("Start Of Frame, Differential sequential Dct, arithmetic coding", string0);
      assertEquals(0, app14Segment0.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      App14Segment app14Segment0 = new App14Segment(65499, byteArray0);
      String string0 = app14Segment0.getSegmentType();
      assertEquals(0, app14Segment0.length);
      assertEquals("Define quantization table(s)", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      DqtSegment dqtSegment0 = new DqtSegment(65474, byteArray0);
      String string0 = dqtSegment0.getSegmentType();
      assertEquals("Start Of Frame, Progressive Dct, Huffman coding", string0);
      assertEquals(0, dqtSegment0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      App14Segment app14Segment0 = new App14Segment(65493, 0, (InputStream) null);
      String string0 = app14Segment0.getSegmentType();
      assertEquals("Restart with modulo 8 count 5", string0);
      assertEquals(0, app14Segment0.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ComSegment comSegment0 = new ComSegment(65481, byteArray0);
      String string0 = comSegment0.getSegmentType();
      assertEquals("Start Of Frame, Extended sequential Dct, arithmetic coding", string0);
      assertEquals(0, comSegment0.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      App13Segment app13Segment0 = new App13Segment(65540, byteArray0);
      app13Segment0.getSegmentType();
      assertEquals(65540, app13Segment0.marker);
      assertEquals(15, app13Segment0.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      App2Segment app2Segment0 = new App2Segment(65420, byteArray0);
      String string0 = app2Segment0.getDescription();
      assertEquals(5, app2Segment0.length);
      assertEquals("APPN (APP-84) (Reserved)", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DqtSegment dqtSegment0 = new DqtSegment(1, 0, (InputStream) null);
      dqtSegment0.getSegmentType();
      assertEquals(0, dqtSegment0.length);
      assertEquals(1, dqtSegment0.marker);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      DhtSegment dhtSegment0 = new DhtSegment(65518, byteArray0);
      String string0 = dhtSegment0.getSegmentType();
      assertEquals("APP14", string0);
      assertEquals(0, dhtSegment0.length);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      App13Segment app13Segment0 = new App13Segment(65534, byteArray0);
      String string0 = app13Segment0.getSegmentType();
      assertEquals(2, app13Segment0.length);
      assertEquals("Comment", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      App13Segment app13Segment0 = new App13Segment(65503, byteArray0);
      String string0 = app13Segment0.getSegmentType();
      assertEquals(1, app13Segment0.length);
      assertEquals("Expand reference component(s)", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      App14Segment app14Segment0 = new App14Segment(65502, 0, (InputStream) null);
      String string0 = app14Segment0.getSegmentType();
      assertEquals("Define hierarchical progression", string0);
      assertEquals(0, app14Segment0.length);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      App14Segment app14Segment0 = new App14Segment(65501, 0, (InputStream) null);
      String string0 = app14Segment0.getSegmentType();
      assertEquals("Define restart interval", string0);
      assertEquals(0, app14Segment0.length);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      App13Segment app13Segment0 = new App13Segment(65500, byteArray0);
      String string0 = app13Segment0.getSegmentType();
      assertEquals(1, app13Segment0.length);
      assertEquals("Define number of lines", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      App14Segment app14Segment0 = new App14Segment(65499, byteArray0);
      String string0 = app14Segment0.toString();
      assertEquals(0, app14Segment0.length);
      assertEquals("[Segment: APPN (APP-5) (Define quantization table(s))]", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      App13Segment app13Segment0 = new App13Segment(65498, byteArray0);
      String string0 = app13Segment0.getSegmentType();
      assertEquals("Start of scan", string0);
      assertEquals(1, app13Segment0.length);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      App13Segment app13Segment0 = new App13Segment(65494, byteArray0);
      String string0 = app13Segment0.getSegmentType();
      assertEquals("Restart with modulo 8 count 6", string0);
      assertEquals(1, app13Segment0.length);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      App14Segment app14Segment0 = new App14Segment(65492, 0, (InputStream) null);
      String string0 = app14Segment0.getSegmentType();
      assertEquals(0, app14Segment0.length);
      assertEquals("Restart with modulo 8 count 4", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SofnSegment sofnSegment0 = new SofnSegment(65489, (-3043), byteArrayInputStream0);
      String string0 = sofnSegment0.getSegmentType();
      assertEquals((-3043), sofnSegment0.length);
      assertEquals("Restart with modulo 8 count 1", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      App14Segment app14Segment0 = new App14Segment(65488, 0, (InputStream) null);
      String string0 = app14Segment0.getSegmentType();
      assertEquals("Restart with modulo 8 count 0", string0);
      assertEquals(0, app14Segment0.length);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      App14Segment app14Segment0 = new App14Segment(65487, 0, (InputStream) null);
      String string0 = app14Segment0.getSegmentType();
      assertEquals("Start Of Frame, Differential lossless (sequential), arithmetic coding", string0);
      assertEquals(0, app14Segment0.length);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      App13Segment app13Segment0 = new App13Segment(65486, byteArray0);
      String string0 = app13Segment0.getSegmentType();
      assertEquals(1, app13Segment0.length);
      assertEquals("Start Of Frame, Differential progressive Dct, arithmetic coding", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      App14Segment app14Segment0 = new App14Segment(65483, 0, (InputStream) null);
      String string0 = app14Segment0.getSegmentType();
      assertEquals("Start Of Frame, Lossless (sequential), arithmetic coding", string0);
      assertEquals(0, app14Segment0.length);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      App14Segment app14Segment0 = new App14Segment(65482, 0, (InputStream) null);
      String string0 = app14Segment0.getSegmentType();
      assertEquals("Start Of Frame, Progressive Dct, arithmetic coding", string0);
      assertEquals(0, app14Segment0.length);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      App13Segment app13Segment0 = new App13Segment(65480, byteArray0);
      String string0 = app13Segment0.getSegmentType();
      assertEquals("Start Of Frame, Reserved for JPEG extensions, arithmetic coding", string0);
      assertEquals(1, app13Segment0.length);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ComSegment comSegment0 = new ComSegment(65479, byteArray0);
      String string0 = comSegment0.getSegmentType();
      assertEquals("Start Of Frame, Differential lossless (sequential), Huffman coding", string0);
      assertEquals(2, comSegment0.length);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      DhtSegment dhtSegment0 = new DhtSegment(65518, byteArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<j =g");
      dhtSegment0.dump(mockPrintWriter0);
      assertEquals(0, dhtSegment0.length);
      assertEquals(65518, dhtSegment0.marker);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      App14Segment app14Segment0 = new App14Segment(65476, 0, (InputStream) null);
      String string0 = app14Segment0.getSegmentType();
      assertEquals("Define Huffman table(s)", string0);
      assertEquals(0, app14Segment0.length);
  }
}
