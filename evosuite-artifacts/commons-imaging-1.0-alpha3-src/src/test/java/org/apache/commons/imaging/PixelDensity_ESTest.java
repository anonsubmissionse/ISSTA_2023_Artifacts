/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 23:42:47 GMT 2022
 */

package org.apache.commons.imaging;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.imaging.PixelDensity;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PixelDensity_ESTest extends PixelDensity_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PixelDensity pixelDensity0 = PixelDensity.createFromPixelsPerMetre(0.0, 0.0);
      double double0 = pixelDensity0.verticalDensityMetres();
      assertTrue(pixelDensity0.isInMetres());
      assertEquals(0.0, pixelDensity0.getRawHorizontalDensity(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PixelDensity pixelDensity0 = PixelDensity.createFromPixelsPerCentimetre(739.2731325087, 739.2731325087);
      double double0 = pixelDensity0.verticalDensityMetres();
      assertEquals(73927.31325087, double0, 0.01);
      assertEquals(739.2731325087, pixelDensity0.horizontalDensityCentimetres(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PixelDensity pixelDensity0 = PixelDensity.createUnitless(16.84797294065, 453.082432003624);
      double double0 = pixelDensity0.verticalDensityInches();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(16.84797294065, pixelDensity0.getRawHorizontalDensity(), 0.01);
      assertEquals(453.082432003624, pixelDensity0.getRawVerticalDensity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PixelDensity pixelDensity0 = PixelDensity.createFromPixelsPerMetre(533.29516, 533.29516);
      double double0 = pixelDensity0.verticalDensityCentimetres();
      assertEquals(5.3329516, double0, 0.01);
      assertEquals(533.29516, pixelDensity0.getRawHorizontalDensity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PixelDensity pixelDensity0 = PixelDensity.createFromPixelsPerInch(0.0, (-1714.002421521));
      double double0 = pixelDensity0.horizontalDensityMetres();
      assertEquals(0.0, double0, 0.01);
      assertEquals((-67480.41029610237), pixelDensity0.verticalDensityMetres(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PixelDensity pixelDensity0 = PixelDensity.createUnitless((-2693.532795744246), (-2693.532795744246));
      double double0 = pixelDensity0.horizontalDensityMetres();
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      assertEquals((-2693.532795744246), pixelDensity0.getRawVerticalDensity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PixelDensity pixelDensity0 = PixelDensity.createFromPixelsPerMetre(0.0, 562.48);
      double double0 = pixelDensity0.horizontalDensityInches();
      assertEquals(0.0, double0, 0.01);
      assertEquals(14.286992000000001, pixelDensity0.verticalDensityInches(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PixelDensity pixelDensity0 = PixelDensity.createFromPixelsPerMetre(0.0, 1.0);
      double double0 = pixelDensity0.horizontalDensityCentimetres();
      assertEquals(0.01, pixelDensity0.verticalDensityCentimetres(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PixelDensity pixelDensity0 = PixelDensity.createFromPixelsPerCentimetre(0.0, 0.0);
      double double0 = pixelDensity0.getRawVerticalDensity();
      assertEquals(0.0, double0, 0.01);
      assertTrue(pixelDensity0.isInCentimetres());
      assertEquals(0.0, pixelDensity0.horizontalDensityCentimetres(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PixelDensity pixelDensity0 = PixelDensity.createFromPixelsPerMetre((-1665.68635695), 1.0);
      double double0 = pixelDensity0.getRawVerticalDensity();
      assertEquals((-1665.68635695), pixelDensity0.getRawHorizontalDensity(), 0.01);
      assertEquals(1.0, pixelDensity0.verticalDensityMetres(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PixelDensity pixelDensity0 = PixelDensity.createFromPixelsPerCentimetre(0.0, 0.0);
      double double0 = pixelDensity0.getRawHorizontalDensity();
      assertTrue(pixelDensity0.isInCentimetres());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, pixelDensity0.verticalDensityCentimetres(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PixelDensity pixelDensity0 = PixelDensity.createFromPixelsPerMetre(533.29516, 533.29516);
      double double0 = pixelDensity0.getRawHorizontalDensity();
      assertEquals(533.29516, double0, 0.01);
      assertEquals(13.545697064000002, pixelDensity0.verticalDensityInches(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PixelDensity pixelDensity0 = PixelDensity.createUnitless(0.0, 0.0);
      assertEquals(0.0, pixelDensity0.getRawHorizontalDensity(), 0.01);
      assertEquals(0.0, pixelDensity0.getRawVerticalDensity(), 0.01);
      assertTrue(pixelDensity0.isUnitless());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PixelDensity pixelDensity0 = PixelDensity.createFromPixelsPerMetre(0.0, 0.0);
      double double0 = pixelDensity0.verticalDensityInches();
      assertEquals(0.0, double0, 0.01);
      assertFalse(pixelDensity0.isInInches());
      assertEquals(0.0, pixelDensity0.getRawHorizontalDensity(), 0.01);
      assertTrue(pixelDensity0.isInMetres());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PixelDensity pixelDensity0 = PixelDensity.createFromPixelsPerMetre(0.0, (-3455.94));
      assertEquals(0.0, pixelDensity0.horizontalDensityInches(), 0.01);
      assertEquals((-87.780876), pixelDensity0.verticalDensityInches(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PixelDensity pixelDensity0 = PixelDensity.createFromPixelsPerInch(0.0, 0.0);
      double double0 = pixelDensity0.verticalDensityCentimetres();
      assertEquals(0.0, double0, 0.01);
      assertFalse(pixelDensity0.isInCentimetres());
      assertEquals(0.0, pixelDensity0.horizontalDensityMetres(), 0.01);
      assertTrue(pixelDensity0.isInInches());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PixelDensity pixelDensity0 = PixelDensity.createFromPixelsPerInch((-133779.52755905513), 10000.0);
      assertEquals(10000.0, pixelDensity0.getRawVerticalDensity(), 0.01);
      assertEquals((-52669.10533821068), pixelDensity0.horizontalDensityCentimetres(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PixelDensity pixelDensity0 = PixelDensity.createFromPixelsPerInch(9.92370061, (-628.456177760115));
      assertEquals((-628.456177760115), pixelDensity0.getRawVerticalDensity(), 0.01);
      assertEquals(9.92370061, pixelDensity0.horizontalDensityInches(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PixelDensity pixelDensity0 = PixelDensity.createFromPixelsPerCentimetre(0.0, 0.0);
      boolean boolean0 = pixelDensity0.isInMetres();
      assertFalse(boolean0);
      assertTrue(pixelDensity0.isInCentimetres());
      assertEquals(0.0, pixelDensity0.verticalDensityMetres(), 0.01);
      assertEquals(0.0, pixelDensity0.getRawHorizontalDensity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PixelDensity pixelDensity0 = PixelDensity.createFromPixelsPerMetre((-1186.0), (-1186.0));
      boolean boolean0 = pixelDensity0.isInMetres();
      assertTrue(boolean0);
      assertEquals((-11.86), pixelDensity0.verticalDensityCentimetres(), 0.01);
      assertEquals((-1186.0), pixelDensity0.getRawHorizontalDensity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PixelDensity pixelDensity0 = PixelDensity.createFromPixelsPerCentimetre(1.0, (-901.839));
      boolean boolean0 = pixelDensity0.isInCentimetres();
      assertEquals((-901.839), pixelDensity0.getRawVerticalDensity(), 0.01);
      assertEquals(1.0, pixelDensity0.getRawHorizontalDensity(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PixelDensity pixelDensity0 = PixelDensity.createUnitless(16.84797294065, 453.082432003624);
      boolean boolean0 = pixelDensity0.isInCentimetres();
      assertEquals(453.082432003624, pixelDensity0.getRawVerticalDensity(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, pixelDensity0.horizontalDensityCentimetres(), 0.01);
      assertEquals(16.84797294065, pixelDensity0.getRawHorizontalDensity(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PixelDensity pixelDensity0 = PixelDensity.createFromPixelsPerCentimetre(0.0, 0.0);
      boolean boolean0 = pixelDensity0.isInInches();
      assertFalse(boolean0);
      assertEquals(0.0, pixelDensity0.getRawHorizontalDensity(), 0.01);
      assertTrue(pixelDensity0.isInCentimetres());
      assertEquals(0.0, pixelDensity0.getRawVerticalDensity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PixelDensity pixelDensity0 = PixelDensity.createFromPixelsPerInch(0.0, (-1714.002421521));
      boolean boolean0 = pixelDensity0.isInInches();
      assertEquals((-1714.002421521), pixelDensity0.getRawVerticalDensity(), 0.01);
      assertTrue(boolean0);
      assertEquals(0.0, pixelDensity0.horizontalDensityCentimetres(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PixelDensity pixelDensity0 = PixelDensity.createFromPixelsPerCentimetre(1756.1788589260354, 1756.1788589260354);
      double double0 = pixelDensity0.horizontalDensityCentimetres();
      assertTrue(pixelDensity0.isInCentimetres());
      assertEquals(1756.1788589260354, double0, 0.01);
      assertEquals(1756.1788589260354, pixelDensity0.getRawVerticalDensity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PixelDensity pixelDensity0 = PixelDensity.createFromPixelsPerInch((-17.2005701622491), (-17.2005701622491));
      double double0 = pixelDensity0.horizontalDensityCentimetres();
      assertEquals((-6.771878016633504), double0, 0.01);
      assertEquals((-17.2005701622491), pixelDensity0.getRawVerticalDensity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PixelDensity pixelDensity0 = PixelDensity.createFromPixelsPerMetre(4460.694301672131, 4460.694301672131);
      double double0 = pixelDensity0.horizontalDensityMetres();
      assertEquals(4460.694301672131, pixelDensity0.getRawVerticalDensity(), 0.01);
      assertTrue(pixelDensity0.isInMetres());
      assertEquals(4460.694301672131, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PixelDensity pixelDensity0 = PixelDensity.createFromPixelsPerCentimetre(1756.1788589260354, 1756.1788589260354);
      double double0 = pixelDensity0.horizontalDensityMetres();
      assertEquals(175617.88589260355, double0, 0.01);
      assertEquals(1756.1788589260354, pixelDensity0.getRawVerticalDensity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PixelDensity pixelDensity0 = PixelDensity.createFromPixelsPerInch((-17.2005701622491), (-17.2005701622491));
      double double0 = pixelDensity0.verticalDensityInches();
      assertTrue(pixelDensity0.isInInches());
      assertEquals((-17.2005701622491), pixelDensity0.getRawHorizontalDensity(), 0.01);
      assertEquals((-17.2005701622491), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PixelDensity pixelDensity0 = PixelDensity.createFromPixelsPerMetre((-3038.4813238179563), (-3038.4813238179563));
      double double0 = pixelDensity0.verticalDensityInches();
      assertEquals((-77.17742562497608), double0, 0.01);
      assertEquals((-77.17742562497608), pixelDensity0.horizontalDensityInches(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PixelDensity pixelDensity0 = PixelDensity.createFromPixelsPerInch((-17.2005701622491), (-17.2005701622491));
      double double0 = pixelDensity0.verticalDensityMetres();
      assertEquals((-677.1878016633505), double0, 0.01);
      assertEquals((-17.2005701622491), pixelDensity0.getRawHorizontalDensity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PixelDensity pixelDensity0 = PixelDensity.createFromPixelsPerCentimetre((-11.77158225997451), (-11.77158225997451));
      double double0 = pixelDensity0.verticalDensityCentimetres();
      assertEquals((-11.77158225997451), double0, 0.01);
      assertTrue(pixelDensity0.isInCentimetres());
      assertEquals((-11.77158225997451), pixelDensity0.getRawHorizontalDensity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PixelDensity pixelDensity0 = PixelDensity.createFromPixelsPerInch((-17.2005701622491), (-17.2005701622491));
      double double0 = pixelDensity0.horizontalDensityInches();
      assertEquals((-17.2005701622491), pixelDensity0.getRawVerticalDensity(), 0.01);
      assertEquals((-17.2005701622491), double0, 0.01);
      assertTrue(pixelDensity0.isInInches());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PixelDensity pixelDensity0 = PixelDensity.createFromPixelsPerCentimetre(1756.1788589260354, 1756.1788589260354);
      double double0 = pixelDensity0.horizontalDensityInches();
      assertEquals(1756.1788589260354, pixelDensity0.getRawVerticalDensity(), 0.01);
      assertEquals(4460.694301672131, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PixelDensity pixelDensity0 = PixelDensity.createFromPixelsPerCentimetre((-11.77158225997451), (-11.77158225997451));
      boolean boolean0 = pixelDensity0.isUnitless();
      assertEquals((-11.77158225997451), pixelDensity0.getRawHorizontalDensity(), 0.01);
      assertEquals((-11.77158225997451), pixelDensity0.verticalDensityCentimetres(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PixelDensity pixelDensity0 = PixelDensity.createUnitless((-17.2005701622491), (-17.2005701622491));
      boolean boolean0 = pixelDensity0.isUnitless();
      assertEquals(Double.NEGATIVE_INFINITY, pixelDensity0.verticalDensityInches(), 0.01);
      assertTrue(boolean0);
      assertEquals((-17.2005701622491), pixelDensity0.getRawHorizontalDensity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PixelDensity pixelDensity0 = PixelDensity.createFromPixelsPerInch((-17.2005701622491), (-17.2005701622491));
      double double0 = pixelDensity0.getRawHorizontalDensity();
      assertEquals((-17.2005701622491), pixelDensity0.getRawVerticalDensity(), 0.01);
      assertEquals((-17.2005701622491), double0, 0.01);
      assertEquals((-6.771878016633504), pixelDensity0.horizontalDensityCentimetres(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PixelDensity pixelDensity0 = PixelDensity.createFromPixelsPerCentimetre((-11.77158225997451), (-11.77158225997451));
      double double0 = pixelDensity0.getRawVerticalDensity();
      assertEquals((-11.77158225997451), pixelDensity0.horizontalDensityCentimetres(), 0.01);
      assertEquals((-11.77158225997451), double0, 0.01);
  }
}
