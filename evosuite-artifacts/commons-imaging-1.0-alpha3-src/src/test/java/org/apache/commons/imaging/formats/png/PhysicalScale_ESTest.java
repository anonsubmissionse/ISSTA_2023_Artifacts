/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 00:03:32 GMT 2022
 */

package org.apache.commons.imaging.formats.png;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.imaging.formats.png.PhysicalScale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PhysicalScale_ESTest extends PhysicalScale_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PhysicalScale physicalScale0 = PhysicalScale.createFromMeters((-1353.1), 0.0);
      double double0 = physicalScale0.getVerticalUnitsPerPixel();
      assertEquals((-1353.1), physicalScale0.getHorizontalUnitsPerPixel(), 0.01);
      assertTrue(physicalScale0.isInMeters());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PhysicalScale physicalScale0 = PhysicalScale.createFromMeters(225.266218457049, 225.266218457049);
      double double0 = physicalScale0.getVerticalUnitsPerPixel();
      assertTrue(physicalScale0.isInMeters());
      assertEquals(225.266218457049, double0, 0.01);
      assertEquals(225.266218457049, physicalScale0.getHorizontalUnitsPerPixel(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PhysicalScale physicalScale0 = PhysicalScale.createFromMeters(1176.1814, 1176.1814);
      double double0 = physicalScale0.getHorizontalUnitsPerPixel();
      assertTrue(physicalScale0.isInMeters());
      assertEquals(1176.1814, physicalScale0.getVerticalUnitsPerPixel(), 0.01);
      assertEquals(1176.1814, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PhysicalScale physicalScale0 = PhysicalScale.createFromRadians(0.0, 0.0);
      double double0 = physicalScale0.getHorizontalUnitsPerPixel();
      assertTrue(physicalScale0.isInRadians());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, physicalScale0.getVerticalUnitsPerPixel(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PhysicalScale physicalScale0 = PhysicalScale.createFromRadians(0.0, (-2547.0));
      assertTrue(physicalScale0.isInRadians());
      assertEquals((-2547.0), physicalScale0.getVerticalUnitsPerPixel(), 0.01);
      assertEquals(0.0, physicalScale0.getHorizontalUnitsPerPixel(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PhysicalScale physicalScale0 = PhysicalScale.createFromRadians(1662.0, 1662.0);
      assertTrue(physicalScale0.isInRadians());
      assertEquals(1662.0, physicalScale0.getHorizontalUnitsPerPixel(), 0.01);
      assertEquals(1662.0, physicalScale0.getVerticalUnitsPerPixel(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PhysicalScale physicalScale0 = PhysicalScale.createFromMeters(0.0, 0.0);
      assertTrue(physicalScale0.isInMeters());
      assertEquals(0.0, physicalScale0.getVerticalUnitsPerPixel(), 0.01);
      assertEquals(0.0, physicalScale0.getHorizontalUnitsPerPixel(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PhysicalScale physicalScale0 = PhysicalScale.createFromRadians((-1.0), (-1.0));
      boolean boolean0 = physicalScale0.isInRadians();
      assertEquals((-1.0), physicalScale0.getHorizontalUnitsPerPixel(), 0.01);
      assertEquals((-1.0), physicalScale0.getVerticalUnitsPerPixel(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PhysicalScale physicalScale0 = PhysicalScale.createFromMeters((-1.0), (-1.0));
      boolean boolean0 = physicalScale0.isInRadians();
      assertEquals((-1.0), physicalScale0.getVerticalUnitsPerPixel(), 0.01);
      assertTrue(physicalScale0.isInMeters());
      assertFalse(boolean0);
      assertEquals((-1.0), physicalScale0.getHorizontalUnitsPerPixel(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PhysicalScale physicalScale0 = PhysicalScale.createFromRadians((-1.0), (-1.0));
      boolean boolean0 = physicalScale0.isInMeters();
      assertEquals((-1.0), physicalScale0.getHorizontalUnitsPerPixel(), 0.01);
      assertFalse(boolean0);
      assertTrue(physicalScale0.isInRadians());
      assertEquals((-1.0), physicalScale0.getVerticalUnitsPerPixel(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PhysicalScale physicalScale0 = PhysicalScale.createFromMeters((-1.0), (-1.0));
      boolean boolean0 = physicalScale0.isInMeters();
      assertTrue(boolean0);
      assertEquals((-1.0), physicalScale0.getHorizontalUnitsPerPixel(), 0.01);
      assertEquals((-1.0), physicalScale0.getVerticalUnitsPerPixel(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PhysicalScale physicalScale0 = PhysicalScale.createFromRadians((-1.0), (-1.0));
      double double0 = physicalScale0.getVerticalUnitsPerPixel();
      assertEquals((-1.0), double0, 0.01);
      assertTrue(physicalScale0.isInRadians());
      assertEquals((-1.0), physicalScale0.getHorizontalUnitsPerPixel(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PhysicalScale physicalScale0 = PhysicalScale.createFromRadians((-1.0), (-1.0));
      double double0 = physicalScale0.getHorizontalUnitsPerPixel();
      assertEquals((-1.0), physicalScale0.getVerticalUnitsPerPixel(), 0.01);
      assertEquals((-1.0), double0, 0.01);
      assertTrue(physicalScale0.isInRadians());
  }
}
