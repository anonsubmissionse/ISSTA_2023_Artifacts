/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 23:51:44 GMT 2022
 */

package org.apache.commons.imaging.color;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.imaging.color.ColorCmy;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ColorCmy_ESTest extends ColorCmy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ColorCmy colorCmy0 = new ColorCmy((-408.17827), (-408.17827), (-2959.229854817));
      colorCmy0.hashCode();
      assertEquals((-408.17827), colorCmy0.C, 0.01);
      assertEquals((-2959.229854817), colorCmy0.Y, 0.01);
      assertEquals((-408.17827), colorCmy0.M, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ColorCmy colorCmy0 = ColorCmy.CYAN;
      colorCmy0.hashCode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ColorCmy colorCmy0 = ColorCmy.BLUE;
      ColorCmy colorCmy1 = ColorCmy.BLACK;
      boolean boolean0 = colorCmy0.equals(colorCmy1);
      assertFalse(boolean0);
      assertFalse(colorCmy1.equals((Object)colorCmy0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ColorCmy colorCmy0 = ColorCmy.BLACK;
      ColorCmy colorCmy1 = ColorCmy.BLUE;
      boolean boolean0 = colorCmy0.equals(colorCmy1);
      assertFalse(boolean0);
      assertFalse(colorCmy1.equals((Object)colorCmy0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ColorCmy colorCmy0 = ColorCmy.BLACK;
      ColorCmy colorCmy1 = ColorCmy.GREEN;
      boolean boolean0 = colorCmy0.equals(colorCmy1);
      assertFalse(boolean0);
      assertFalse(colorCmy1.equals((Object)colorCmy0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ColorCmy colorCmy0 = ColorCmy.WHITE;
      ColorCmy colorCmy1 = ColorCmy.CYAN;
      boolean boolean0 = colorCmy0.equals(colorCmy1);
      assertFalse(colorCmy1.equals((Object)colorCmy0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ColorCmy colorCmy0 = ColorCmy.GREEN;
      ColorCmy colorCmy1 = ColorCmy.BLUE;
      boolean boolean0 = colorCmy0.equals(colorCmy1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ColorCmy colorCmy0 = ColorCmy.BLUE;
      ColorCmy colorCmy1 = new ColorCmy(0.0, 0.0, 100.0);
      boolean boolean0 = colorCmy0.equals(colorCmy1);
      assertEquals(0.0, colorCmy1.M, 0.01);
      assertFalse(boolean0);
      assertEquals(100.0, colorCmy1.Y, 0.01);
      assertEquals(0.0, colorCmy1.C, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ColorCmy colorCmy0 = ColorCmy.WHITE;
      ColorCmy colorCmy1 = new ColorCmy(0.0, 0.0, 0.0);
      boolean boolean0 = colorCmy0.equals(colorCmy1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ColorCmy colorCmy0 = ColorCmy.BLUE;
      boolean boolean0 = colorCmy0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ColorCmy colorCmy0 = ColorCmy.WHITE;
      boolean boolean0 = colorCmy0.equals(colorCmy0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ColorCmy colorCmy0 = ColorCmy.WHITE;
      boolean boolean0 = colorCmy0.equals("{C: 0.0, M: 0.0, Y: 0.0}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ColorCmy colorCmy0 = new ColorCmy(0.0, 0.0, 0.0);
      String string0 = colorCmy0.BLUE.toString();
      assertEquals("{C: 100.0, M: 100.0, Y: 0.0}", string0);
      assertEquals(0.0, colorCmy0.M, 0.01);
      assertEquals(0.0, colorCmy0.Y, 0.01);
      assertEquals(0.0, colorCmy0.C, 0.01);
  }
}
