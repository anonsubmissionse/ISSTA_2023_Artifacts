/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 23:23:24 GMT 2022
 */

package org.apache.commons.imaging.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.common.RationalNumber;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RationalNumber_ESTest extends RationalNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2.1474836676485972E9));
      assertEquals((-2.147483647E9), rationalNumber0.doubleValue(), 0.01);
      assertFalse(rationalNumber0.unsignedType);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(4294967295L);
      assertFalse(rationalNumber0.unsignedType);
      assertEquals(2.147483647E9, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber((-1784), (-1784), true);
      String string0 = rationalNumber0.toDisplayString();
      assertTrue(rationalNumber0.unsignedType);
      assertEquals("1", string0);
      assertEquals(4294965512L, rationalNumber0.divisor);
      assertEquals(4294965512L, rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(561L, 221L);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("2.538", string0);
      assertFalse(rationalNumber0.unsignedType);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1347.1208186);
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      String string0 = rationalNumber1.toString();
      assertFalse(rationalNumber1.unsignedType);
      assertEquals("-16390419/12167 (-1,347.121)", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2302L), 620L);
      String string0 = rationalNumber0.toString();
      assertEquals("1151/-310 (-3.713)", string0);
      assertFalse(rationalNumber0.unsignedType);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(4294963308L, 1L);
      assertFalse(rationalNumber0.unsignedType);
      assertEquals(1L, rationalNumber0.divisor);
      assertEquals((-3988.0), rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(0L, 4294967295L);
      assertFalse(rationalNumber0.unsignedType);
      assertEquals(1L, rationalNumber0.divisor);
      assertEquals(0.0F, rationalNumber0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483648L), 4294967295L);
      assertEquals(1073741824L, rationalNumber0.numerator);
      assertEquals((-0.5000000002328306), rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(4294967295L, (-4397877L));
      assertFalse(rationalNumber0.unsignedType);
      assertEquals(2147483647L, rationalNumber0.numerator);
      assertEquals((-976.5999179604346), rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(8976L, (-2147483648L));
      assertEquals((-4.179775714874268E-6), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-134217728L), rationalNumber0.divisor);
      assertFalse(rationalNumber0.unsignedType);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(2147483647L, 2147483647L);
      assertFalse(rationalNumber0.unsignedType);
      assertEquals(1L, rationalNumber0.divisor);
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber((-543), 2357, false);
      long long0 = rationalNumber0.longValue();
      assertEquals(0L, long0);
      assertEquals((-0.2303776F), rationalNumber0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2302L), 620L);
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      long long0 = rationalNumber1.longValue();
      assertEquals((-1151L), rationalNumber1.numerator);
      assertEquals(3L, long0);
      assertFalse(rationalNumber1.unsignedType);
      assertEquals((-310L), rationalNumber0.divisor);
      assertFalse(rationalNumber0.unsignedType);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.0);
      int int0 = rationalNumber0.intValue();
      assertEquals(0.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(0, int0);
      assertFalse(rationalNumber0.unsignedType);
      assertEquals(1L, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-1.0));
      int int0 = rationalNumber0.intValue();
      assertEquals((-1), int0);
      assertEquals(1L, rationalNumber0.divisor);
      assertFalse(rationalNumber0.unsignedType);
      assertEquals((-1.0F), rationalNumber0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.0);
      float float0 = rationalNumber0.floatValue();
      assertFalse(rationalNumber0.unsignedType);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(1L, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(3325.0);
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      float float0 = rationalNumber1.floatValue();
      assertFalse(rationalNumber0.unsignedType);
      assertFalse(rationalNumber1.unsignedType);
      assertEquals((-3325.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-1L), (-1L));
      double double0 = rationalNumber0.doubleValue();
      assertEquals(1L, rationalNumber0.divisor);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-310L), 0L);
      // Undeclared exception!
      try { 
        rationalNumber0.toDisplayString();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(0, 0);
      // Undeclared exception!
      try { 
        rationalNumber0.longValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(0, 0);
      // Undeclared exception!
      try { 
        rationalNumber0.intValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod(0L, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1716.7976012197178);
      assertFalse(rationalNumber0.unsignedType);
      assertEquals(83736803L, rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.0E-8);
      assertEquals(1.0E-8, rationalNumber0.doubleValue(), 0.01);
      assertFalse(rationalNumber0.unsignedType);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.0);
      double double0 = rationalNumber0.doubleValue();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1L, rationalNumber0.divisor);
      assertFalse(rationalNumber0.unsignedType);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.0);
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      String string0 = rationalNumber1.toString();
      assertFalse(rationalNumber1.unsignedType);
      assertEquals("-1", string0);
      assertEquals((-1.0), rationalNumber1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2.147483647E9));
      assertEquals((-2.147483647E9), rationalNumber0.doubleValue(), 0.01);
      assertFalse(rationalNumber0.unsignedType);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2147483647L);
      assertEquals(2.147483647E9, rationalNumber0.doubleValue(), 0.01);
      assertFalse(rationalNumber0.unsignedType);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-911));
      String string0 = rationalNumber0.toDisplayString();
      assertFalse(rationalNumber0.unsignedType);
      assertEquals("-911", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(1407L, (-101L));
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("-13.931", string0);
      assertEquals((-1407L), rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(66, 0);
      String string0 = rationalNumber0.toString();
      assertFalse(rationalNumber0.unsignedType);
      assertEquals("Invalid rational (1/0)", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber((-1784), (-1784), true);
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      assertFalse(rationalNumber1.unsignedType);
      assertEquals(4294965512L, rationalNumber0.divisor);
      assertEquals(1L, rationalNumber1.divisor);
      assertEquals((-1), rationalNumber1.intValue());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(0, 66, true);
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      assertFalse(rationalNumber1.unsignedType);
      assertEquals(66L, rationalNumber1.divisor);
      assertEquals(0L, rationalNumber1.numerator);
      assertTrue(rationalNumber0.unsignedType);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber((-911), 31, true);
      // Undeclared exception!
      try { 
        rationalNumber0.negate();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Unsigned numerator is too large to negate 4294966385
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod((-2147483649L), 0L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid value, numerator: -2147483649, divisor: 0
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(1L, (-2147483649L));
      assertFalse(rationalNumber0.unsignedType);
      assertEquals(1L, rationalNumber0.numerator);
      assertEquals(4.656612875245797E-10, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2.147483646578676E9));
      assertFalse(rationalNumber0.unsignedType);
      assertEquals((-2.147483647E9), rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(445, 445, false);
      String string0 = rationalNumber0.toString();
      assertEquals("1", string0);
      assertFalse(rationalNumber0.unsignedType);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2302L), 620L);
      long long0 = rationalNumber0.longValue();
      assertEquals((-3L), long0);
      assertFalse(rationalNumber0.unsignedType);
      assertEquals((-3.7129033F), rationalNumber0.floatValue(), 0.01F);
      assertEquals(1151L, rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber((-911), 31, true);
      int int0 = rationalNumber0.intValue();
      assertEquals(1.385473027419355E8, rationalNumber0.doubleValue(), 0.01);
      assertEquals(138547302, int0);
      assertTrue(rationalNumber0.unsignedType);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber((-911), 31, true);
      float float0 = rationalNumber0.floatValue();
      assertTrue(rationalNumber0.unsignedType);
      assertEquals(1.385473027419355E8, rationalNumber0.doubleValue(), 0.01);
      assertEquals(1.38547296E8F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-1.0));
      double double0 = rationalNumber0.doubleValue();
      assertEquals((-1.0), double0, 0.01);
      assertFalse(rationalNumber0.unsignedType);
      assertEquals(1L, rationalNumber0.divisor);
  }
}
