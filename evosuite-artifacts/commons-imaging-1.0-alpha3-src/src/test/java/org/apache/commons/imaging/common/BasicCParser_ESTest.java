/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 22:21:46 GMT 2022
 */

package org.apache.commons.imaging.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.time.ZoneId;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.imaging.common.BasicCParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BasicCParser_ESTest extends BasicCParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      try { 
        BasicCParser.unescapeString((StringBuilder) null, "\"\"\u0000");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing XPM file failed, string not surrounded by '\"'
         //
         verifyException("org.apache.commons.imaging.common.BasicCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      try { 
        BasicCParser.unescapeString((StringBuilder) null, " bw");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing XPM file failed, string not surrounded by '\"'
         //
         verifyException("org.apache.commons.imaging.common.BasicCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)34;
      byteArray0[4] = (byte)34;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringBuilder stringBuilder0 = new StringBuilder("AM");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      ByteArrayOutputStream byteArrayOutputStream0 = BasicCParser.preprocess(byteArrayInputStream0, stringBuilder0, map0);
      assertEquals("\"\u0000\u0000\u0000\"\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      
      ByteArrayOutputStream byteArrayOutputStream1 = BasicCParser.preprocess(byteArrayInputStream0, (StringBuilder) null, map0);
      assertEquals("", byteArrayOutputStream1.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        BasicCParser.tokenizeRow((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BasicCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        BasicCParser.preprocess((InputStream) null, stringBuilder0, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BasicCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-19), 37);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      // Undeclared exception!
      try { 
        BasicCParser.preprocess(pushbackInputStream0, (StringBuilder) null, map0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      try { 
        BasicCParser.preprocess(pipedInputStream0, (StringBuilder) null, map0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-124), (byte)3);
      BasicCParser basicCParser0 = new BasicCParser(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        basicCParser0.nextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BasicCParser basicCParser0 = new BasicCParser((ByteArrayInputStream) null);
      try { 
        basicCParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = BasicCParser.tokenizeRow(")dj$2j`fZ7zd.g");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      try { 
        BasicCParser.unescapeString((StringBuilder) null, "\"\"\u0000\"");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing XPM file failed, extra '\"' found in string
         //
         verifyException("org.apache.commons.imaging.common.BasicCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        BasicCParser.unescapeString((StringBuilder) null, "\"\u0000\u0000\"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BasicCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("up>C");
      try { 
        BasicCParser.unescapeString(stringBuilder0, "\"G, IUO2NfNvD.+3j");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing XPM file failed, string not surrounded by '\"'
         //
         verifyException("org.apache.commons.imaging.common.BasicCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BasicCParser.unescapeString((StringBuilder) null, "\"\"");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(";");
      try { 
        BasicCParser.unescapeString(stringBuilder0, ";");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing XPM file failed, string is too short
         //
         verifyException("org.apache.commons.imaging.common.BasicCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      try { 
        BasicCParser.unescapeString(stringBuilder0, "/?5WR");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing XPM file failed, string not surrounded by '\"'
         //
         verifyException("org.apache.commons.imaging.common.BasicCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = BasicCParser.tokenizeRow("");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0);
      StringBuilder stringBuilder0 = new StringBuilder();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      ByteArrayOutputStream byteArrayOutputStream0 = BasicCParser.preprocess(bufferedInputStream0, stringBuilder0, map0);
      assertEquals(7, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)13;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringBuilder stringBuilder0 = new StringBuilder("5L5WMf{3<");
      HashMap<String, String> hashMap0 = new HashMap<String, String>((byte)87);
      ByteArrayOutputStream byteArrayOutputStream0 = BasicCParser.preprocess(byteArrayInputStream0, stringBuilder0, hashMap0);
      assertEquals("\u0000\r\u0000\u0000", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte)9;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringBuilder stringBuilder0 = new StringBuilder("R{.ylb4@");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ByteArrayOutputStream byteArrayOutputStream0 = BasicCParser.preprocess(byteArrayInputStream0, stringBuilder0, hashMap0);
      assertEquals("\u0000\u0000\u0000\u0000\t\u0000", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)32;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0);
      StringBuilder stringBuilder0 = new StringBuilder();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      ByteArrayOutputStream byteArrayOutputStream0 = BasicCParser.preprocess(bufferedInputStream0, stringBuilder0, map0);
      assertEquals(" \u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[3] = (byte)35;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringBuilder stringBuilder0 = new StringBuilder("The offset cannot be Uegative");
      try { 
        BasicCParser.preprocess(byteArrayInputStream0, stringBuilder0, (Map<String, String>) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected preprocessor directive
         //
         verifyException("org.apache.commons.imaging.common.BasicCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)47;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      HashMap<String, String> hashMap0 = new HashMap<String, String>((byte)105);
      ByteArrayOutputStream byteArrayOutputStream0 = BasicCParser.preprocess(byteArrayInputStream0, stringBuilder0, hashMap0);
      assertEquals("//\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte)47;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      ByteArrayOutputStream byteArrayOutputStream0 = BasicCParser.preprocess(byteArrayInputStream0, (StringBuilder) null, map0);
      assertEquals("\u0000\u0000\u0000\u0000/", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)46;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ByteArrayOutputStream byteArrayOutputStream0 = BasicCParser.preprocess(byteArrayInputStream0, (StringBuilder) null, hashMap0);
      assertEquals(".\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[5] = (byte)45;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ByteArrayOutputStream byteArrayOutputStream0 = BasicCParser.preprocess(byteArrayInputStream0, (StringBuilder) null, hashMap0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000-\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)44;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ByteArrayOutputStream byteArrayOutputStream0 = BasicCParser.preprocess(byteArrayInputStream0, (StringBuilder) null, hashMap0);
      assertEquals("\u0000,\u0000\u0000", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)43;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)43);
      StringBuilder stringBuilder0 = new StringBuilder((byte)13);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ByteArrayOutputStream byteArrayOutputStream0 = BasicCParser.preprocess(byteArrayInputStream0, stringBuilder0, hashMap0);
      assertEquals(4, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)42;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ByteArrayOutputStream byteArrayOutputStream0 = BasicCParser.preprocess(byteArrayInputStream0, (StringBuilder) null, hashMap0);
      assertEquals("*\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)41;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringBuilder stringBuilder0 = new StringBuilder("5L5WMf{3<");
      HashMap<String, String> hashMap0 = new HashMap<String, String>((byte)87);
      ByteArrayOutputStream byteArrayOutputStream0 = BasicCParser.preprocess(byteArrayInputStream0, stringBuilder0, hashMap0);
      assertEquals("\u0000)\u0000", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[5] = (byte)40;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = BasicCParser.preprocess(byteArrayInputStream0, (StringBuilder) null, (Map<String, String>) null);
      assertEquals("\u0000\u0000\u0000\u0000\u0000(\u0000\u0000", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)38;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0);
      StringBuilder stringBuilder0 = new StringBuilder();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      ByteArrayOutputStream byteArrayOutputStream0 = BasicCParser.preprocess(bufferedInputStream0, stringBuilder0, map0);
      assertEquals(7, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)37;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringBuilder stringBuilder0 = new StringBuilder(";");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ByteArrayOutputStream byteArrayOutputStream0 = BasicCParser.preprocess(byteArrayInputStream0, stringBuilder0, hashMap0);
      assertEquals("\u0000\u0000%\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)36;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringBuilder stringBuilder0 = new StringBuilder(";");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ByteArrayOutputStream byteArrayOutputStream0 = BasicCParser.preprocess(byteArrayInputStream0, stringBuilder0, hashMap0);
      assertEquals("\u0000$\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)35;
      byteArray0[4] = (byte)32;
      byteArray0[8] = (byte)13;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      HashMap<String, String> hashMap0 = new HashMap<String, String>((byte)0);
      try { 
        BasicCParser.preprocess(byteArrayInputStream0, stringBuilder0, hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid/unsupported preprocessor directive '\u0000'
         //
         verifyException("org.apache.commons.imaging.common.BasicCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[4] = (byte)35;
      byteArray0[9] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      try { 
        BasicCParser.preprocess(byteArrayInputStream0, stringBuilder0, hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Bad preprocessor directive
         //
         verifyException("org.apache.commons.imaging.common.BasicCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[6] = (byte)92;
      byteArray0[4] = (byte)34;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      try { 
        BasicCParser.preprocess(byteArrayInputStream0, (StringBuilder) null, map0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unterminated string at the end of file
         //
         verifyException("org.apache.commons.imaging.common.BasicCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)34;
      byteArray0[5] = (byte)13;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringBuilder stringBuilder0 = new StringBuilder("R{T.ylb4@");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      try { 
        BasicCParser.preprocess(byteArrayInputStream0, stringBuilder0, hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unterminated string in file
         //
         verifyException("org.apache.commons.imaging.common.BasicCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[2] = (byte)34;
      byteArray0[9] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      try { 
        BasicCParser.preprocess(byteArrayInputStream0, stringBuilder0, hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unterminated string in file
         //
         verifyException("org.apache.commons.imaging.common.BasicCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte)39;
      byteArray0[8] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      ByteArrayOutputStream byteArrayOutputStream0 = BasicCParser.preprocess(byteArrayInputStream0, (StringBuilder) null, map0);
      assertEquals("\u0000\u0000\u0000\u0000'\u0000\u0000\u0000", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)39;
      byteArray0[8] = (byte)39;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      ByteArrayOutputStream byteArrayOutputStream0 = BasicCParser.preprocess(byteArrayInputStream0, (StringBuilder) null, map0);
      assertEquals("\"\"'\u0000\u0000\u0000\u0000\u0000'", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)39;
      byteArray0[4] = (byte)13;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      try { 
        BasicCParser.preprocess(byteArrayInputStream0, (StringBuilder) null, map0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unterminated single quote in file
         //
         verifyException("org.apache.commons.imaging.common.BasicCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)34;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      try { 
        BasicCParser.preprocess(byteArrayInputStream0, (StringBuilder) null, hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unterminated single quote in file
         //
         verifyException("org.apache.commons.imaging.common.BasicCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-47);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BasicCParser basicCParser0 = new BasicCParser(byteArrayInputStream0);
      String string0 = basicCParser0.nextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("\u00D1", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BasicCParser basicCParser0 = new BasicCParser(byteArrayInputStream0);
      try { 
        basicCParser0.nextToken();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unhandled/invalid character '\u0000' found in XPM file
         //
         verifyException("org.apache.commons.imaging.common.BasicCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)44;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 2306);
      byteArrayInputStream0.read();
      BasicCParser basicCParser0 = new BasicCParser(byteArrayInputStream0);
      String string0 = basicCParser0.nextToken();
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(",", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)61;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BasicCParser basicCParser0 = new BasicCParser(byteArrayInputStream0);
      String string0 = basicCParser0.nextToken();
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals("=", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)59;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BasicCParser basicCParser0 = new BasicCParser(byteArrayInputStream0);
      basicCParser0.nextToken();
      String string0 = basicCParser0.nextToken();
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(";", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)91;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BasicCParser basicCParser0 = new BasicCParser(byteArrayInputStream0);
      String string0 = basicCParser0.nextToken();
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals("[", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)125;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BasicCParser basicCParser0 = new BasicCParser(byteArrayInputStream0);
      basicCParser0.nextToken();
      String string0 = basicCParser0.nextToken();
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals("}", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)123;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BasicCParser basicCParser0 = new BasicCParser(byteArrayInputStream0);
      basicCParser0.nextToken();
      String string0 = basicCParser0.nextToken();
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals("{", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)95;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BasicCParser basicCParser0 = new BasicCParser(byteArrayInputStream0);
      String string0 = basicCParser0.nextToken();
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals("_6_", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BasicCParser basicCParser0 = new BasicCParser(byteArrayInputStream0);
      try { 
        basicCParser0.nextToken();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unterminated string ends XMP file
         //
         verifyException("org.apache.commons.imaging.common.BasicCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte)34;
      byteArray0[4] = (byte)34;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BasicCParser basicCParser0 = new BasicCParser(byteArrayInputStream0);
      String string0 = basicCParser0.nextToken();
      assertEquals(17, byteArrayInputStream0.available());
      assertEquals("\"\u0000\u0000\u0000\"", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)34;
      byteArray0[8] = (byte)13;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BasicCParser basicCParser0 = new BasicCParser(byteArrayInputStream0);
      try { 
        basicCParser0.nextToken();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unterminated string in XPM file
         //
         verifyException("org.apache.commons.imaging.common.BasicCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)34;
      byteArray0[7] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BasicCParser basicCParser0 = new BasicCParser(byteArrayInputStream0);
      try { 
        basicCParser0.nextToken();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unterminated string in XPM file
         //
         verifyException("org.apache.commons.imaging.common.BasicCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BasicCParser basicCParser0 = new BasicCParser(byteArrayInputStream0);
      StringBuilder stringBuilder0 = new StringBuilder("5L5WMf{3<");
      HashMap<String, String> hashMap0 = new HashMap<String, String>((byte)87);
      BasicCParser.preprocess(byteArrayInputStream0, stringBuilder0, hashMap0);
      String string0 = basicCParser0.nextToken();
      assertNull(string0);
  }
}
