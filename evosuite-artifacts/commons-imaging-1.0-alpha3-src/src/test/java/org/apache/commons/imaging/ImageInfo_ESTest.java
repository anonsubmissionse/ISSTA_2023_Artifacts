/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 00:04:50 GMT 2022
 */

package org.apache.commons.imaging;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.time.ZoneId;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.imaging.ImageFormat;
import org.apache.commons.imaging.ImageFormats;
import org.apache.commons.imaging.ImageInfo;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ImageInfo_ESTest extends ImageInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      assertEquals(600, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      assertEquals(0, linkedList0.size());
      assertEquals(600, set0.size());
      assertFalse(set0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      ImageFormats imageFormats0 = ImageFormats.XBM;
      assertEquals(ImageFormats.XBM, imageFormats0);
      assertEquals("xbm", imageFormats0.getDefaultExtension());
      
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(set0.contains(""));
      assertFalse(list0.contains(""));
      assertEquals(0, linkedList0.size());
      assertEquals(600, set0.size());
      assertFalse(set0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals("xbm", imageFormats0.getDefaultExtension());
      assertFalse(imageInfo0.isProgressive());
      assertEquals((-332), imageInfo0.getPhysicalWidthDpi());
      assertEquals(1916.28F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(3327, imageInfo0.getNumberOfImages());
      assertNull(imageInfo0.getMimeType());
      assertFalse(imageInfo0.isTransparent());
      assertEquals(ImageInfo.ColorType.BW, imageInfo0.getColorType());
      assertEquals(3327, imageInfo0.getWidth());
      assertEquals(3327.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(ImageInfo.CompressionAlgorithm.CCITT_1D, imageInfo0.getCompressionAlgorithm());
      assertEquals((-332), imageInfo0.getPhysicalHeightDpi());
      assertFalse(imageInfo0.usesPalette());
      assertEquals(3327, imageInfo0.getBitsPerPixel());
      assertEquals("", imageInfo0.getFormatName());
      assertEquals(3327, imageInfo0.getHeight());
      assertEquals("", imageInfo0.getFormatDetails());
      assertNotNull(imageInfo0);
      
      boolean boolean0 = imageInfo0.usesPalette();
      assertFalse(boolean0);
      assertFalse(set0.contains(""));
      assertFalse(list0.contains(""));
      assertEquals(0, linkedList0.size());
      assertEquals(600, set0.size());
      assertFalse(set0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals("xbm", imageFormats0.getDefaultExtension());
      assertFalse(imageInfo0.isProgressive());
      assertEquals((-332), imageInfo0.getPhysicalWidthDpi());
      assertEquals(1916.28F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(3327, imageInfo0.getNumberOfImages());
      assertNull(imageInfo0.getMimeType());
      assertFalse(imageInfo0.isTransparent());
      assertEquals(ImageInfo.ColorType.BW, imageInfo0.getColorType());
      assertEquals(3327, imageInfo0.getWidth());
      assertEquals(3327.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(ImageInfo.CompressionAlgorithm.CCITT_1D, imageInfo0.getCompressionAlgorithm());
      assertEquals((-332), imageInfo0.getPhysicalHeightDpi());
      assertFalse(imageInfo0.usesPalette());
      assertEquals(3327, imageInfo0.getBitsPerPixel());
      assertEquals("", imageInfo0.getFormatName());
      assertEquals(3327, imageInfo0.getHeight());
      assertEquals("", imageInfo0.getFormatDetails());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ImageFormats imageFormats0 = ImageFormats.DCX;
      assertEquals(ImageFormats.DCX, imageFormats0);
      assertEquals("dcx", imageFormats0.getDefaultExtension());
      
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("|", 0, linkedList0, imageFormats0, "&L4", 0, "&L4", 0, 1132, 1132, 898, (-841.9F), 2, true, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(linkedList0.contains("|"));
      assertEquals(0, linkedList0.size());
      assertEquals("dcx", imageFormats0.getDefaultExtension());
      assertTrue(imageInfo0.usesPalette());
      assertEquals(1132.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(0, imageInfo0.getBitsPerPixel());
      assertEquals(ImageInfo.CompressionAlgorithm.JPEG, imageInfo0.getCompressionAlgorithm());
      assertEquals((-841.9F), imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals("&L4", imageInfo0.getFormatName());
      assertEquals("&L4", imageInfo0.getMimeType());
      assertEquals(2, imageInfo0.getWidth());
      assertEquals(ImageInfo.ColorType.OTHER, imageInfo0.getColorType());
      assertFalse(imageInfo0.isTransparent());
      assertEquals(0, imageInfo0.getNumberOfImages());
      assertEquals(898, imageInfo0.getPhysicalWidthDpi());
      assertEquals("|", imageInfo0.getFormatDetails());
      assertEquals(1132, imageInfo0.getPhysicalHeightDpi());
      assertEquals(0, imageInfo0.getHeight());
      assertTrue(imageInfo0.isProgressive());
      assertNotNull(imageInfo0);
      
      boolean boolean0 = imageInfo0.isTransparent();
      assertFalse(boolean0);
      assertFalse(linkedList0.contains("|"));
      assertEquals(0, linkedList0.size());
      assertEquals("dcx", imageFormats0.getDefaultExtension());
      assertTrue(imageInfo0.usesPalette());
      assertEquals(1132.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(0, imageInfo0.getBitsPerPixel());
      assertEquals(ImageInfo.CompressionAlgorithm.JPEG, imageInfo0.getCompressionAlgorithm());
      assertEquals((-841.9F), imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals("&L4", imageInfo0.getFormatName());
      assertEquals("&L4", imageInfo0.getMimeType());
      assertEquals(2, imageInfo0.getWidth());
      assertEquals(ImageInfo.ColorType.OTHER, imageInfo0.getColorType());
      assertFalse(imageInfo0.isTransparent());
      assertEquals(0, imageInfo0.getNumberOfImages());
      assertEquals(898, imageInfo0.getPhysicalWidthDpi());
      assertEquals("|", imageInfo0.getFormatDetails());
      assertEquals(1132, imageInfo0.getPhysicalHeightDpi());
      assertEquals(0, imageInfo0.getHeight());
      assertTrue(imageInfo0.isProgressive());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 18, list0, (ImageFormat) null, "", 18, "", 0, (-2332), 1.0F, (-80), (-206.4F), 5, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(list0.contains(""));
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(ImageInfo.ColorType.UNKNOWN, imageInfo0.getColorType());
      assertEquals((-206.4F), imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals("", imageInfo0.getFormatDetails());
      assertFalse(imageInfo0.isTransparent());
      assertEquals(0, imageInfo0.getNumberOfImages());
      assertFalse(imageInfo0.usesPalette());
      assertFalse(imageInfo0.isProgressive());
      assertEquals(1.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(ImageInfo.CompressionAlgorithm.CCITT_1D, imageInfo0.getCompressionAlgorithm());
      assertEquals((-80), imageInfo0.getPhysicalWidthDpi());
      assertEquals("", imageInfo0.getMimeType());
      assertEquals((-2332), imageInfo0.getPhysicalHeightDpi());
      assertEquals("", imageInfo0.getFormatName());
      assertEquals(18, imageInfo0.getBitsPerPixel());
      assertEquals(5, imageInfo0.getWidth());
      assertEquals(18, imageInfo0.getHeight());
      assertNotNull(imageInfo0);
      
      boolean boolean0 = imageInfo0.isProgressive();
      assertFalse(boolean0);
      assertFalse(list0.contains(""));
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(ImageInfo.ColorType.UNKNOWN, imageInfo0.getColorType());
      assertEquals((-206.4F), imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals("", imageInfo0.getFormatDetails());
      assertFalse(imageInfo0.isTransparent());
      assertEquals(0, imageInfo0.getNumberOfImages());
      assertFalse(imageInfo0.usesPalette());
      assertFalse(imageInfo0.isProgressive());
      assertEquals(1.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(ImageInfo.CompressionAlgorithm.CCITT_1D, imageInfo0.getCompressionAlgorithm());
      assertEquals((-80), imageInfo0.getPhysicalWidthDpi());
      assertEquals("", imageInfo0.getMimeType());
      assertEquals((-2332), imageInfo0.getPhysicalHeightDpi());
      assertEquals("", imageInfo0.getFormatName());
      assertEquals(18, imageInfo0.getBitsPerPixel());
      assertEquals(5, imageInfo0.getWidth());
      assertEquals(18, imageInfo0.getHeight());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      assertEquals(ImageFormats.UNKNOWN, imageFormats0);
      
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("5p9;", (-2321), linkedList0, imageFormats0, "5p9;", (-2321), "5p9;", 3095, 3095, (-2321), 3095, (-2321), 3, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(linkedList0.contains("5p9;"));
      assertEquals(0, linkedList0.size());
      assertEquals((-2321), imageInfo0.getBitsPerPixel());
      assertEquals("5p9;", imageInfo0.getFormatName());
      assertEquals(3, imageInfo0.getWidth());
      assertEquals("5p9;", imageInfo0.getMimeType());
      assertEquals(ImageInfo.CompressionAlgorithm.RLE, imageInfo0.getCompressionAlgorithm());
      assertEquals(3095, imageInfo0.getPhysicalWidthDpi());
      assertEquals((-2321.0F), imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals((-2321.0F), imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(ImageInfo.ColorType.RGB, imageInfo0.getColorType());
      assertEquals(3095, imageInfo0.getPhysicalHeightDpi());
      assertEquals((-2321), imageInfo0.getHeight());
      assertEquals(3095, imageInfo0.getNumberOfImages());
      assertTrue(imageInfo0.isTransparent());
      assertEquals("5p9;", imageInfo0.getFormatDetails());
      assertTrue(imageInfo0.usesPalette());
      assertTrue(imageInfo0.isProgressive());
      assertNotNull(imageInfo0);
      
      int int0 = imageInfo0.getWidth();
      assertEquals(3, int0);
      assertFalse(linkedList0.contains("5p9;"));
      assertEquals(0, linkedList0.size());
      assertEquals((-2321), imageInfo0.getBitsPerPixel());
      assertEquals("5p9;", imageInfo0.getFormatName());
      assertEquals(3, imageInfo0.getWidth());
      assertEquals("5p9;", imageInfo0.getMimeType());
      assertEquals(ImageInfo.CompressionAlgorithm.RLE, imageInfo0.getCompressionAlgorithm());
      assertEquals(3095, imageInfo0.getPhysicalWidthDpi());
      assertEquals((-2321.0F), imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals((-2321.0F), imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(ImageInfo.ColorType.RGB, imageInfo0.getColorType());
      assertEquals(3095, imageInfo0.getPhysicalHeightDpi());
      assertEquals((-2321), imageInfo0.getHeight());
      assertEquals(3095, imageInfo0.getNumberOfImages());
      assertTrue(imageInfo0.isTransparent());
      assertEquals("5p9;", imageInfo0.getFormatDetails());
      assertTrue(imageInfo0.usesPalette());
      assertTrue(imageInfo0.isProgressive());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.PGM;
      assertEquals(ImageFormats.PGM, imageFormats0);
      assertEquals("pgm", imageFormats0.getDefaultExtension());
      
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("LZW", 10, (List<String>) null, imageFormats0, "LZW", 10, "'lD'", 10, 10, 10, (-1), (-1), (-1), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals("pgm", imageFormats0.getDefaultExtension());
      assertEquals(10, imageInfo0.getNumberOfImages());
      assertFalse(imageInfo0.usesPalette());
      assertEquals(ImageInfo.ColorType.YCCK, imageInfo0.getColorType());
      assertEquals(10, imageInfo0.getHeight());
      assertEquals(ImageInfo.CompressionAlgorithm.CCITT_GROUP_4, imageInfo0.getCompressionAlgorithm());
      assertEquals((-1), imageInfo0.getPhysicalWidthDpi());
      assertEquals(10, imageInfo0.getPhysicalHeightDpi());
      assertEquals((-1), imageInfo0.getWidth());
      assertEquals(10, imageInfo0.getBitsPerPixel());
      assertFalse(imageInfo0.isTransparent());
      assertFalse(imageInfo0.isProgressive());
      assertEquals("'lD'", imageInfo0.getMimeType());
      assertEquals("LZW", imageInfo0.getFormatDetails());
      assertEquals("LZW", imageInfo0.getFormatName());
      assertEquals(10.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals((-1.0F), imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertNotNull(imageInfo0);
      
      int int0 = imageInfo0.getWidth();
      assertEquals((-1), int0);
      assertEquals("pgm", imageFormats0.getDefaultExtension());
      assertEquals(10, imageInfo0.getNumberOfImages());
      assertFalse(imageInfo0.usesPalette());
      assertEquals(ImageInfo.ColorType.YCCK, imageInfo0.getColorType());
      assertEquals(10, imageInfo0.getHeight());
      assertEquals(ImageInfo.CompressionAlgorithm.CCITT_GROUP_4, imageInfo0.getCompressionAlgorithm());
      assertEquals((-1), imageInfo0.getPhysicalWidthDpi());
      assertEquals(10, imageInfo0.getPhysicalHeightDpi());
      assertEquals((-1), imageInfo0.getWidth());
      assertEquals(10, imageInfo0.getBitsPerPixel());
      assertFalse(imageInfo0.isTransparent());
      assertFalse(imageInfo0.isProgressive());
      assertEquals("'lD'", imageInfo0.getMimeType());
      assertEquals("LZW", imageInfo0.getFormatDetails());
      assertEquals("LZW", imageInfo0.getFormatName());
      assertEquals(10.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals((-1.0F), imageInfo0.getPhysicalWidthInch(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ImageFormats imageFormats0 = ImageFormats.GIF;
      assertEquals(ImageFormats.GIF, imageFormats0);
      assertEquals("gif", imageFormats0.getDefaultExtension());
      
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo imageInfo0 = new ImageInfo("", 453, linkedList0, imageFormats0, "", 453, "", 453, 453, 453, 1778, 1778, 453, false, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(linkedList0.contains(""));
      assertEquals(0, linkedList0.size());
      assertEquals("gif", imageFormats0.getDefaultExtension());
      assertFalse(imageInfo0.isProgressive());
      assertEquals(453, imageInfo0.getBitsPerPixel());
      assertEquals(1778, imageInfo0.getPhysicalWidthDpi());
      assertEquals("", imageInfo0.getFormatDetails());
      assertEquals(453, imageInfo0.getWidth());
      assertEquals(453.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(1778.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(453, imageInfo0.getPhysicalHeightDpi());
      assertEquals("", imageInfo0.getMimeType());
      assertEquals(453, imageInfo0.getNumberOfImages());
      assertEquals(453, imageInfo0.getHeight());
      assertEquals(ImageInfo.CompressionAlgorithm.CCITT_GROUP_3, imageInfo0.getCompressionAlgorithm());
      assertEquals("", imageInfo0.getFormatName());
      assertEquals(ImageInfo.ColorType.CMYK, imageInfo0.getColorType());
      assertFalse(imageInfo0.usesPalette());
      assertTrue(imageInfo0.isTransparent());
      assertNotNull(imageInfo0);
      
      float float0 = imageInfo0.getPhysicalWidthInch();
      assertEquals(1778.0F, float0, 0.01F);
      assertFalse(linkedList0.contains(""));
      assertEquals(0, linkedList0.size());
      assertEquals("gif", imageFormats0.getDefaultExtension());
      assertFalse(imageInfo0.isProgressive());
      assertEquals(453, imageInfo0.getBitsPerPixel());
      assertEquals(1778, imageInfo0.getPhysicalWidthDpi());
      assertEquals("", imageInfo0.getFormatDetails());
      assertEquals(453, imageInfo0.getWidth());
      assertEquals(453.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(1778.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(453, imageInfo0.getPhysicalHeightDpi());
      assertEquals("", imageInfo0.getMimeType());
      assertEquals(453, imageInfo0.getNumberOfImages());
      assertEquals(453, imageInfo0.getHeight());
      assertEquals(ImageInfo.CompressionAlgorithm.CCITT_GROUP_3, imageInfo0.getCompressionAlgorithm());
      assertEquals("", imageInfo0.getFormatName());
      assertEquals(ImageInfo.ColorType.CMYK, imageInfo0.getColorType());
      assertFalse(imageInfo0.usesPalette());
      assertTrue(imageInfo0.isTransparent());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.TGA;
      assertEquals(ImageFormats.TGA, imageFormats0);
      
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("LPag {F9P5", (-2362), (List<String>) null, imageFormats0, "_LC)C@OpnJ$:re)", (-2362), "LPag {F9P5", (-2362), (-3179), (-1849.749F), 0, (-1849.749F), (-3202), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals("LPag {F9P5", imageInfo0.getMimeType());
      assertEquals((-1849.749F), imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals((-2362), imageInfo0.getNumberOfImages());
      assertFalse(imageInfo0.isTransparent());
      assertEquals("_LC)C@OpnJ$:re)", imageInfo0.getFormatName());
      assertEquals((-2362), imageInfo0.getHeight());
      assertEquals(ImageInfo.CompressionAlgorithm.LZW, imageInfo0.getCompressionAlgorithm());
      assertFalse(imageInfo0.isProgressive());
      assertEquals((-3179), imageInfo0.getPhysicalHeightDpi());
      assertFalse(imageInfo0.usesPalette());
      assertEquals((-1849.749F), imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(ImageInfo.ColorType.RGB, imageInfo0.getColorType());
      assertEquals((-2362), imageInfo0.getBitsPerPixel());
      assertEquals("LPag {F9P5", imageInfo0.getFormatDetails());
      assertEquals((-3202), imageInfo0.getWidth());
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
      assertNotNull(imageInfo0);
      
      float float0 = imageInfo0.getPhysicalWidthInch();
      assertEquals((-1849.749F), float0, 0.01F);
      assertEquals("LPag {F9P5", imageInfo0.getMimeType());
      assertEquals((-1849.749F), imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals((-2362), imageInfo0.getNumberOfImages());
      assertFalse(imageInfo0.isTransparent());
      assertEquals("_LC)C@OpnJ$:re)", imageInfo0.getFormatName());
      assertEquals((-2362), imageInfo0.getHeight());
      assertEquals(ImageInfo.CompressionAlgorithm.LZW, imageInfo0.getCompressionAlgorithm());
      assertFalse(imageInfo0.isProgressive());
      assertEquals((-3179), imageInfo0.getPhysicalHeightDpi());
      assertFalse(imageInfo0.usesPalette());
      assertEquals((-1849.749F), imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(ImageInfo.ColorType.RGB, imageInfo0.getColorType());
      assertEquals((-2362), imageInfo0.getBitsPerPixel());
      assertEquals("LPag {F9P5", imageInfo0.getFormatDetails());
      assertEquals((-3202), imageInfo0.getWidth());
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      assertEquals(600, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      assertEquals(0, linkedList0.size());
      assertEquals(600, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("}ZjYX!AY;qP|txj6", 7, list0, (ImageFormat) null, "Format: ", 0, "}ZjYX!AY;qP|txj6", 0, 0, 7, 0, (-1340.974F), 22, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(set0.contains("}ZjYX!AY;qP|txj6"));
      assertFalse(list0.contains("}ZjYX!AY;qP|txj6"));
      assertEquals(0, linkedList0.size());
      assertEquals(600, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
      assertFalse(imageInfo0.isTransparent());
      assertEquals(ImageInfo.ColorType.UNKNOWN, imageInfo0.getColorType());
      assertEquals(0, imageInfo0.getNumberOfImages());
      assertEquals(7, imageInfo0.getBitsPerPixel());
      assertEquals("}ZjYX!AY;qP|txj6", imageInfo0.getFormatDetails());
      assertFalse(imageInfo0.usesPalette());
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
      assertEquals(ImageInfo.CompressionAlgorithm.JPEG, imageInfo0.getCompressionAlgorithm());
      assertEquals(22, imageInfo0.getWidth());
      assertEquals((-1340.974F), imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals("Format: ", imageInfo0.getFormatName());
      assertEquals("}ZjYX!AY;qP|txj6", imageInfo0.getMimeType());
      assertEquals(7.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertFalse(imageInfo0.isProgressive());
      assertEquals(0, imageInfo0.getHeight());
      assertNotNull(imageInfo0);
      
      int int0 = imageInfo0.getPhysicalWidthDpi();
      assertEquals(0, int0);
      assertFalse(set0.contains("}ZjYX!AY;qP|txj6"));
      assertFalse(list0.contains("}ZjYX!AY;qP|txj6"));
      assertEquals(0, linkedList0.size());
      assertEquals(600, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
      assertFalse(imageInfo0.isTransparent());
      assertEquals(ImageInfo.ColorType.UNKNOWN, imageInfo0.getColorType());
      assertEquals(0, imageInfo0.getNumberOfImages());
      assertEquals(7, imageInfo0.getBitsPerPixel());
      assertEquals("}ZjYX!AY;qP|txj6", imageInfo0.getFormatDetails());
      assertFalse(imageInfo0.usesPalette());
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
      assertEquals(ImageInfo.CompressionAlgorithm.JPEG, imageInfo0.getCompressionAlgorithm());
      assertEquals(22, imageInfo0.getWidth());
      assertEquals((-1340.974F), imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals("Format: ", imageInfo0.getFormatName());
      assertEquals("}ZjYX!AY;qP|txj6", imageInfo0.getMimeType());
      assertEquals(7.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertFalse(imageInfo0.isProgressive());
      assertEquals(0, imageInfo0.getHeight());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      assertEquals(ImageFormats.UNKNOWN, imageFormats0);
      
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(linkedList0.contains(""));
      assertEquals(0, linkedList0.size());
      assertEquals((-345), imageInfo0.getHeight());
      assertTrue(imageInfo0.usesPalette());
      assertEquals(ImageInfo.CompressionAlgorithm.NONE, imageInfo0.getCompressionAlgorithm());
      assertEquals(20.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(2751.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(ImageInfo.ColorType.YCCK, imageInfo0.getColorType());
      assertEquals("", imageInfo0.getMimeType());
      assertEquals((-345), imageInfo0.getNumberOfImages());
      assertEquals(2751, imageInfo0.getWidth());
      assertEquals("", imageInfo0.getFormatDetails());
      assertTrue(imageInfo0.isTransparent());
      assertEquals(2751, imageInfo0.getPhysicalWidthDpi());
      assertEquals(20, imageInfo0.getBitsPerPixel());
      assertEquals("", imageInfo0.getFormatName());
      assertEquals(20, imageInfo0.getPhysicalHeightDpi());
      assertTrue(imageInfo0.isProgressive());
      assertNotNull(imageInfo0);
      
      int int0 = imageInfo0.getPhysicalWidthDpi();
      assertEquals(2751, int0);
      assertFalse(linkedList0.contains(""));
      assertEquals(0, linkedList0.size());
      assertEquals((-345), imageInfo0.getHeight());
      assertTrue(imageInfo0.usesPalette());
      assertEquals(ImageInfo.CompressionAlgorithm.NONE, imageInfo0.getCompressionAlgorithm());
      assertEquals(20.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(2751.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(ImageInfo.ColorType.YCCK, imageInfo0.getColorType());
      assertEquals("", imageInfo0.getMimeType());
      assertEquals((-345), imageInfo0.getNumberOfImages());
      assertEquals(2751, imageInfo0.getWidth());
      assertEquals("", imageInfo0.getFormatDetails());
      assertTrue(imageInfo0.isTransparent());
      assertEquals(2751, imageInfo0.getPhysicalWidthDpi());
      assertEquals(20, imageInfo0.getBitsPerPixel());
      assertEquals("", imageInfo0.getFormatName());
      assertEquals(20, imageInfo0.getPhysicalHeightDpi());
      assertTrue(imageInfo0.isProgressive());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      assertEquals(600, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      assertEquals(0, linkedList0.size());
      assertEquals(600, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("vb1yd\"?NMHOs=qi", 9, list0, (ImageFormat) null, "u(MJ2", 587, "u(MJ2", 9, 2, 0.0F, 9, 0.0F, 2159, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(set0.contains("vb1yd\"?NMHOs=qi"));
      assertFalse(list0.contains("vb1yd\"?NMHOs=qi"));
      assertEquals(0, linkedList0.size());
      assertEquals(600, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(2, imageInfo0.getPhysicalHeightDpi());
      assertTrue(imageInfo0.isTransparent());
      assertEquals("vb1yd\"?NMHOs=qi", imageInfo0.getFormatDetails());
      assertEquals(2159, imageInfo0.getWidth());
      assertEquals(ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE, imageInfo0.getCompressionAlgorithm());
      assertEquals(0.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(0.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertTrue(imageInfo0.usesPalette());
      assertTrue(imageInfo0.isProgressive());
      assertEquals("u(MJ2", imageInfo0.getFormatName());
      assertEquals("u(MJ2", imageInfo0.getMimeType());
      assertEquals(9, imageInfo0.getPhysicalWidthDpi());
      assertEquals(9, imageInfo0.getNumberOfImages());
      assertEquals(ImageInfo.ColorType.BW, imageInfo0.getColorType());
      assertEquals(9, imageInfo0.getBitsPerPixel());
      assertEquals(587, imageInfo0.getHeight());
      assertNotNull(imageInfo0);
      
      float float0 = imageInfo0.getPhysicalHeightInch();
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(set0.contains("vb1yd\"?NMHOs=qi"));
      assertFalse(list0.contains("vb1yd\"?NMHOs=qi"));
      assertEquals(0, linkedList0.size());
      assertEquals(600, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(2, imageInfo0.getPhysicalHeightDpi());
      assertTrue(imageInfo0.isTransparent());
      assertEquals("vb1yd\"?NMHOs=qi", imageInfo0.getFormatDetails());
      assertEquals(2159, imageInfo0.getWidth());
      assertEquals(ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE, imageInfo0.getCompressionAlgorithm());
      assertEquals(0.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(0.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertTrue(imageInfo0.usesPalette());
      assertTrue(imageInfo0.isProgressive());
      assertEquals("u(MJ2", imageInfo0.getFormatName());
      assertEquals("u(MJ2", imageInfo0.getMimeType());
      assertEquals(9, imageInfo0.getPhysicalWidthDpi());
      assertEquals(9, imageInfo0.getNumberOfImages());
      assertEquals(ImageInfo.ColorType.BW, imageInfo0.getColorType());
      assertEquals(9, imageInfo0.getBitsPerPixel());
      assertEquals(587, imageInfo0.getHeight());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      assertFalse(set0.isEmpty());
      assertEquals(600, set0.size());
      assertNotNull(set0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      assertEquals(0, linkedList0.size());
      assertFalse(set0.isEmpty());
      assertEquals(600, set0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      assertEquals(ImageFormats.WBMP, imageFormats0);
      assertEquals("wbmp", imageFormats0.getDefaultExtension());
      
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(set0.contains(""));
      assertFalse(list0.contains(""));
      assertEquals(0, linkedList0.size());
      assertFalse(set0.isEmpty());
      assertEquals(600, set0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals("wbmp", imageFormats0.getDefaultExtension());
      assertEquals((-900), imageInfo0.getHeight());
      assertEquals("", imageInfo0.getMimeType());
      assertTrue(imageInfo0.isTransparent());
      assertEquals((-900.0F), imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertTrue(imageInfo0.usesPalette());
      assertNull(imageInfo0.getFormatName());
      assertEquals("", imageInfo0.getFormatDetails());
      assertTrue(imageInfo0.isProgressive());
      assertEquals((-900), imageInfo0.getPhysicalHeightDpi());
      assertEquals(ImageInfo.ColorType.RGB, imageInfo0.getColorType());
      assertEquals((-900), imageInfo0.getBitsPerPixel());
      assertEquals(8, imageInfo0.getNumberOfImages());
      assertEquals(121, imageInfo0.getPhysicalWidthDpi());
      assertEquals(ImageInfo.CompressionAlgorithm.CCITT_GROUP_4, imageInfo0.getCompressionAlgorithm());
      assertEquals(121, imageInfo0.getWidth());
      assertEquals((-576.0F), imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertNotNull(imageInfo0);
      
      float float0 = imageInfo0.getPhysicalHeightInch();
      assertEquals((-900.0F), float0, 0.01F);
      assertFalse(set0.contains(""));
      assertFalse(list0.contains(""));
      assertEquals(0, linkedList0.size());
      assertFalse(set0.isEmpty());
      assertEquals(600, set0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals("wbmp", imageFormats0.getDefaultExtension());
      assertEquals((-900), imageInfo0.getHeight());
      assertEquals("", imageInfo0.getMimeType());
      assertTrue(imageInfo0.isTransparent());
      assertEquals((-900.0F), imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertTrue(imageInfo0.usesPalette());
      assertNull(imageInfo0.getFormatName());
      assertEquals("", imageInfo0.getFormatDetails());
      assertTrue(imageInfo0.isProgressive());
      assertEquals((-900), imageInfo0.getPhysicalHeightDpi());
      assertEquals(ImageInfo.ColorType.RGB, imageInfo0.getColorType());
      assertEquals((-900), imageInfo0.getBitsPerPixel());
      assertEquals(8, imageInfo0.getNumberOfImages());
      assertEquals(121, imageInfo0.getPhysicalWidthDpi());
      assertEquals(ImageInfo.CompressionAlgorithm.CCITT_GROUP_4, imageInfo0.getCompressionAlgorithm());
      assertEquals(121, imageInfo0.getWidth());
      assertEquals((-576.0F), imageInfo0.getPhysicalWidthInch(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("BL", 0, linkedList0, (ImageFormat) null, "BL", 0, "The list of prefixes must not be null", 0, 13, (-1585.86F), 0, 0, 0, false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(linkedList0.contains("BL"));
      assertEquals(0, linkedList0.size());
      assertFalse(imageInfo0.isProgressive());
      assertEquals(ImageInfo.ColorType.OTHER, imageInfo0.getColorType());
      assertEquals((-1585.86F), imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(0, imageInfo0.getBitsPerPixel());
      assertTrue(imageInfo0.isTransparent());
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
      assertEquals(ImageInfo.CompressionAlgorithm.NONE, imageInfo0.getCompressionAlgorithm());
      assertEquals("BL", imageInfo0.getFormatName());
      assertEquals(13, imageInfo0.getPhysicalHeightDpi());
      assertEquals(0.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertTrue(imageInfo0.usesPalette());
      assertEquals(0, imageInfo0.getHeight());
      assertEquals("BL", imageInfo0.getFormatDetails());
      assertEquals("The list of prefixes must not be null", imageInfo0.getMimeType());
      assertEquals(0, imageInfo0.getNumberOfImages());
      assertEquals(0, imageInfo0.getWidth());
      assertNotNull(imageInfo0);
      
      int int0 = imageInfo0.getPhysicalHeightDpi();
      assertEquals(13, int0);
      assertFalse(linkedList0.contains("BL"));
      assertEquals(0, linkedList0.size());
      assertFalse(imageInfo0.isProgressive());
      assertEquals(ImageInfo.ColorType.OTHER, imageInfo0.getColorType());
      assertEquals((-1585.86F), imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(0, imageInfo0.getBitsPerPixel());
      assertTrue(imageInfo0.isTransparent());
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
      assertEquals(ImageInfo.CompressionAlgorithm.NONE, imageInfo0.getCompressionAlgorithm());
      assertEquals("BL", imageInfo0.getFormatName());
      assertEquals(13, imageInfo0.getPhysicalHeightDpi());
      assertEquals(0.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertTrue(imageInfo0.usesPalette());
      assertEquals(0, imageInfo0.getHeight());
      assertEquals("BL", imageInfo0.getFormatDetails());
      assertEquals("The list of prefixes must not be null", imageInfo0.getMimeType());
      assertEquals(0, imageInfo0.getNumberOfImages());
      assertEquals(0, imageInfo0.getWidth());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      assertEquals(ImageFormats.UNKNOWN, imageFormats0);
      
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("%}U", 2497, (List<String>) null, imageFormats0, (String) null, 2497, (String) null, 2497, (-1), 0.0F, 0, 2497, 2497, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(2497, imageInfo0.getNumberOfImages());
      assertNull(imageInfo0.getFormatName());
      assertEquals(2497.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(2497, imageInfo0.getWidth());
      assertEquals(2497, imageInfo0.getHeight());
      assertNull(imageInfo0.getMimeType());
      assertEquals(0.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
      assertEquals((-1), imageInfo0.getPhysicalHeightDpi());
      assertEquals(2497, imageInfo0.getBitsPerPixel());
      assertFalse(imageInfo0.usesPalette());
      assertFalse(imageInfo0.isProgressive());
      assertEquals(ImageInfo.CompressionAlgorithm.LZW, imageInfo0.getCompressionAlgorithm());
      assertEquals(ImageInfo.ColorType.CMYK, imageInfo0.getColorType());
      assertEquals("%}U", imageInfo0.getFormatDetails());
      assertFalse(imageInfo0.isTransparent());
      assertNotNull(imageInfo0);
      
      int int0 = imageInfo0.getPhysicalHeightDpi();
      assertEquals((-1), int0);
      assertEquals(2497, imageInfo0.getNumberOfImages());
      assertNull(imageInfo0.getFormatName());
      assertEquals(2497.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(2497, imageInfo0.getWidth());
      assertEquals(2497, imageInfo0.getHeight());
      assertNull(imageInfo0.getMimeType());
      assertEquals(0.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
      assertEquals((-1), imageInfo0.getPhysicalHeightDpi());
      assertEquals(2497, imageInfo0.getBitsPerPixel());
      assertFalse(imageInfo0.usesPalette());
      assertFalse(imageInfo0.isProgressive());
      assertEquals(ImageInfo.CompressionAlgorithm.LZW, imageInfo0.getCompressionAlgorithm());
      assertEquals(ImageInfo.ColorType.CMYK, imageInfo0.getColorType());
      assertEquals("%}U", imageInfo0.getFormatDetails());
      assertFalse(imageInfo0.isTransparent());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      assertEquals(600, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      assertEquals(0, linkedList0.size());
      assertEquals(600, set0.size());
      assertFalse(set0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      assertEquals(ImageFormats.UNKNOWN, imageFormats0);
      
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 4, list0, imageFormats0, "pic", 4, "Wt`1f>A", 0, 0, 0.0F, 0, 0, 4, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(set0.contains("Wt`1f>A"));
      assertFalse(list0.contains("Wt`1f>A"));
      assertEquals(0, linkedList0.size());
      assertEquals(600, set0.size());
      assertFalse(set0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals("Wt`1f>A", imageInfo0.getMimeType());
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
      assertEquals(0.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(4, imageInfo0.getBitsPerPixel());
      assertEquals(ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE, imageInfo0.getCompressionAlgorithm());
      assertEquals(4, imageInfo0.getHeight());
      assertEquals(ImageInfo.ColorType.CMYK, imageInfo0.getColorType());
      assertFalse(imageInfo0.usesPalette());
      assertFalse(imageInfo0.isProgressive());
      assertFalse(imageInfo0.isTransparent());
      assertEquals(0, imageInfo0.getNumberOfImages());
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
      assertEquals("pic", imageInfo0.getFormatName());
      assertEquals(0.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertNull(imageInfo0.getFormatDetails());
      assertEquals(4, imageInfo0.getWidth());
      assertNotNull(imageInfo0);
      
      int int0 = imageInfo0.getNumberOfImages();
      assertEquals(0, int0);
      assertFalse(set0.contains("Wt`1f>A"));
      assertFalse(list0.contains("Wt`1f>A"));
      assertEquals(0, linkedList0.size());
      assertEquals(600, set0.size());
      assertFalse(set0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals("Wt`1f>A", imageInfo0.getMimeType());
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
      assertEquals(0.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(4, imageInfo0.getBitsPerPixel());
      assertEquals(ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE, imageInfo0.getCompressionAlgorithm());
      assertEquals(4, imageInfo0.getHeight());
      assertEquals(ImageInfo.ColorType.CMYK, imageInfo0.getColorType());
      assertFalse(imageInfo0.usesPalette());
      assertFalse(imageInfo0.isProgressive());
      assertFalse(imageInfo0.isTransparent());
      assertEquals(0, imageInfo0.getNumberOfImages());
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
      assertEquals("pic", imageInfo0.getFormatName());
      assertEquals(0.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertNull(imageInfo0.getFormatDetails());
      assertEquals(4, imageInfo0.getWidth());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      assertEquals(ImageFormats.UNKNOWN, imageFormats0);
      
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(linkedList0.contains(""));
      assertEquals(0, linkedList0.size());
      assertEquals("", imageInfo0.getFormatName());
      assertEquals("", imageInfo0.getMimeType());
      assertEquals((-345), imageInfo0.getNumberOfImages());
      assertEquals(20, imageInfo0.getPhysicalHeightDpi());
      assertEquals(2751, imageInfo0.getPhysicalWidthDpi());
      assertEquals(ImageInfo.ColorType.YCCK, imageInfo0.getColorType());
      assertEquals(2751.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals((-345), imageInfo0.getHeight());
      assertEquals(2751, imageInfo0.getWidth());
      assertTrue(imageInfo0.isTransparent());
      assertEquals(20.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertTrue(imageInfo0.usesPalette());
      assertEquals(ImageInfo.CompressionAlgorithm.NONE, imageInfo0.getCompressionAlgorithm());
      assertTrue(imageInfo0.isProgressive());
      assertEquals(20, imageInfo0.getBitsPerPixel());
      assertEquals("", imageInfo0.getFormatDetails());
      assertNotNull(imageInfo0);
      
      int int0 = imageInfo0.getNumberOfImages();
      assertEquals((-345), int0);
      assertFalse(linkedList0.contains(""));
      assertEquals(0, linkedList0.size());
      assertEquals("", imageInfo0.getFormatName());
      assertEquals("", imageInfo0.getMimeType());
      assertEquals((-345), imageInfo0.getNumberOfImages());
      assertEquals(20, imageInfo0.getPhysicalHeightDpi());
      assertEquals(2751, imageInfo0.getPhysicalWidthDpi());
      assertEquals(ImageInfo.ColorType.YCCK, imageInfo0.getColorType());
      assertEquals(2751.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals((-345), imageInfo0.getHeight());
      assertEquals(2751, imageInfo0.getWidth());
      assertTrue(imageInfo0.isTransparent());
      assertEquals(20.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertTrue(imageInfo0.usesPalette());
      assertEquals(ImageInfo.CompressionAlgorithm.NONE, imageInfo0.getCompressionAlgorithm());
      assertTrue(imageInfo0.isProgressive());
      assertEquals(20, imageInfo0.getBitsPerPixel());
      assertEquals("", imageInfo0.getFormatDetails());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      assertEquals(0, linkedList0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      ImageFormats imageFormats0 = ImageFormats.XPM;
      assertEquals(ImageFormats.XPM, imageFormats0);
      assertEquals("xpm", imageFormats0.getDefaultExtension());
      
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(linkedHashSet0.contains("j/Hr2kKQ:{c$IOfiJ)B"));
      assertFalse(list0.contains("j/Hr2kKQ:{c$IOfiJ)B"));
      assertEquals(0, linkedList0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals("xpm", imageFormats0.getDefaultExtension());
      assertEquals(0, imageInfo0.getNumberOfImages());
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
      assertEquals(0, imageInfo0.getWidth());
      assertEquals("}Cz6Z2Q-HI", imageInfo0.getFormatDetails());
      assertEquals(0.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(0, imageInfo0.getHeight());
      assertEquals("j/Hr2kKQ:{c$IOfiJ)B", imageInfo0.getMimeType());
      assertTrue(imageInfo0.isTransparent());
      assertEquals(0.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertTrue(imageInfo0.isProgressive());
      assertEquals(0, imageInfo0.getBitsPerPixel());
      assertFalse(imageInfo0.usesPalette());
      assertEquals("j/Hr2kKQ:{c$IOfiJ)B", imageInfo0.getFormatName());
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
      assertEquals(ImageInfo.CompressionAlgorithm.LZW, imageInfo0.getCompressionAlgorithm());
      assertEquals(ImageInfo.ColorType.UNKNOWN, imageInfo0.getColorType());
      assertNotNull(imageInfo0);
      
      String string0 = imageInfo0.getMimeType();
      assertEquals("j/Hr2kKQ:{c$IOfiJ)B", string0);
      assertFalse(linkedHashSet0.contains(string0));
      assertFalse(list0.contains(string0));
      assertEquals(0, linkedList0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals("xpm", imageFormats0.getDefaultExtension());
      assertEquals(0, imageInfo0.getNumberOfImages());
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
      assertEquals(0, imageInfo0.getWidth());
      assertEquals("}Cz6Z2Q-HI", imageInfo0.getFormatDetails());
      assertEquals(0.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(0, imageInfo0.getHeight());
      assertEquals("j/Hr2kKQ:{c$IOfiJ)B", imageInfo0.getMimeType());
      assertTrue(imageInfo0.isTransparent());
      assertEquals(0.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertTrue(imageInfo0.isProgressive());
      assertEquals(0, imageInfo0.getBitsPerPixel());
      assertFalse(imageInfo0.usesPalette());
      assertEquals("j/Hr2kKQ:{c$IOfiJ)B", imageInfo0.getFormatName());
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
      assertEquals(ImageInfo.CompressionAlgorithm.LZW, imageInfo0.getCompressionAlgorithm());
      assertEquals(ImageInfo.ColorType.UNKNOWN, imageInfo0.getColorType());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      assertFalse(set0.isEmpty());
      assertEquals(600, set0.size());
      assertNotNull(set0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      assertEquals(0, linkedList0.size());
      assertFalse(set0.isEmpty());
      assertEquals(600, set0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      assertEquals(ImageFormats.WBMP, imageFormats0);
      assertEquals("wbmp", imageFormats0.getDefaultExtension());
      
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(set0.contains(""));
      assertFalse(list0.contains(""));
      assertEquals(0, linkedList0.size());
      assertFalse(set0.isEmpty());
      assertEquals(600, set0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals("wbmp", imageFormats0.getDefaultExtension());
      assertEquals(121, imageInfo0.getWidth());
      assertEquals(121, imageInfo0.getPhysicalWidthDpi());
      assertTrue(imageInfo0.isProgressive());
      assertEquals(ImageInfo.CompressionAlgorithm.CCITT_GROUP_4, imageInfo0.getCompressionAlgorithm());
      assertTrue(imageInfo0.usesPalette());
      assertEquals((-900), imageInfo0.getBitsPerPixel());
      assertEquals((-900.0F), imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertTrue(imageInfo0.isTransparent());
      assertEquals((-900), imageInfo0.getPhysicalHeightDpi());
      assertNull(imageInfo0.getFormatName());
      assertEquals("", imageInfo0.getMimeType());
      assertEquals((-900), imageInfo0.getHeight());
      assertEquals((-576.0F), imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals("", imageInfo0.getFormatDetails());
      assertEquals(8, imageInfo0.getNumberOfImages());
      assertEquals(ImageInfo.ColorType.RGB, imageInfo0.getColorType());
      assertNotNull(imageInfo0);
      
      String string0 = imageInfo0.getMimeType();
      assertEquals("", string0);
      assertFalse(set0.contains(""));
      assertFalse(list0.contains(""));
      assertEquals(0, linkedList0.size());
      assertFalse(set0.isEmpty());
      assertEquals(600, set0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals("wbmp", imageFormats0.getDefaultExtension());
      assertEquals(121, imageInfo0.getWidth());
      assertEquals(121, imageInfo0.getPhysicalWidthDpi());
      assertTrue(imageInfo0.isProgressive());
      assertEquals(ImageInfo.CompressionAlgorithm.CCITT_GROUP_4, imageInfo0.getCompressionAlgorithm());
      assertTrue(imageInfo0.usesPalette());
      assertEquals((-900), imageInfo0.getBitsPerPixel());
      assertEquals((-900.0F), imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertTrue(imageInfo0.isTransparent());
      assertEquals((-900), imageInfo0.getPhysicalHeightDpi());
      assertNull(imageInfo0.getFormatName());
      assertEquals("", imageInfo0.getMimeType());
      assertEquals((-900), imageInfo0.getHeight());
      assertEquals((-576.0F), imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals("", imageInfo0.getFormatDetails());
      assertEquals(8, imageInfo0.getNumberOfImages());
      assertEquals(ImageInfo.ColorType.RGB, imageInfo0.getColorType());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("@o~5Lc!C[}}gg!%", 383, linkedList0, (ImageFormat) null, "@o~5Lc!C[}}gg!%", 1, "org.apache.commons.io.filefilter.RegexFileFilter", 1, 1040, 1.0F, (-820), 1.0F, (-473), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(linkedList0.contains("@o~5Lc!C[}}gg!%"));
      assertEquals(0, linkedList0.size());
      assertTrue(imageInfo0.isTransparent());
      assertEquals(1040, imageInfo0.getPhysicalHeightDpi());
      assertEquals(ImageInfo.ColorType.RGB, imageInfo0.getColorType());
      assertEquals(1.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals("org.apache.commons.io.filefilter.RegexFileFilter", imageInfo0.getMimeType());
      assertEquals((-473), imageInfo0.getWidth());
      assertEquals(ImageInfo.CompressionAlgorithm.NONE, imageInfo0.getCompressionAlgorithm());
      assertEquals(1.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertTrue(imageInfo0.usesPalette());
      assertEquals(383, imageInfo0.getBitsPerPixel());
      assertEquals((-820), imageInfo0.getPhysicalWidthDpi());
      assertEquals("@o~5Lc!C[}}gg!%", imageInfo0.getFormatName());
      assertFalse(imageInfo0.isProgressive());
      assertEquals(1, imageInfo0.getHeight());
      assertEquals(1, imageInfo0.getNumberOfImages());
      assertEquals("@o~5Lc!C[}}gg!%", imageInfo0.getFormatDetails());
      assertNotNull(imageInfo0);
      
      int int0 = imageInfo0.getHeight();
      assertEquals(1, int0);
      assertFalse(linkedList0.contains("@o~5Lc!C[}}gg!%"));
      assertEquals(0, linkedList0.size());
      assertTrue(imageInfo0.isTransparent());
      assertEquals(1040, imageInfo0.getPhysicalHeightDpi());
      assertEquals(ImageInfo.ColorType.RGB, imageInfo0.getColorType());
      assertEquals(1.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals("org.apache.commons.io.filefilter.RegexFileFilter", imageInfo0.getMimeType());
      assertEquals((-473), imageInfo0.getWidth());
      assertEquals(ImageInfo.CompressionAlgorithm.NONE, imageInfo0.getCompressionAlgorithm());
      assertEquals(1.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertTrue(imageInfo0.usesPalette());
      assertEquals(383, imageInfo0.getBitsPerPixel());
      assertEquals((-820), imageInfo0.getPhysicalWidthDpi());
      assertEquals("@o~5Lc!C[}}gg!%", imageInfo0.getFormatName());
      assertFalse(imageInfo0.isProgressive());
      assertEquals(1, imageInfo0.getHeight());
      assertEquals(1, imageInfo0.getNumberOfImages());
      assertEquals("@o~5Lc!C[}}gg!%", imageInfo0.getFormatDetails());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      assertFalse(set0.isEmpty());
      assertEquals(600, set0.size());
      assertNotNull(set0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      assertEquals(0, linkedList0.size());
      assertFalse(set0.isEmpty());
      assertEquals(600, set0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      assertEquals(ImageFormats.WBMP, imageFormats0);
      assertEquals("wbmp", imageFormats0.getDefaultExtension());
      
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(set0.contains(""));
      assertFalse(list0.contains(""));
      assertEquals(0, linkedList0.size());
      assertFalse(set0.isEmpty());
      assertEquals(600, set0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals("wbmp", imageFormats0.getDefaultExtension());
      assertTrue(imageInfo0.usesPalette());
      assertTrue(imageInfo0.isProgressive());
      assertEquals((-900), imageInfo0.getBitsPerPixel());
      assertEquals((-900.0F), imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(8, imageInfo0.getNumberOfImages());
      assertEquals(ImageInfo.ColorType.RGB, imageInfo0.getColorType());
      assertNull(imageInfo0.getFormatName());
      assertEquals("", imageInfo0.getFormatDetails());
      assertEquals((-900), imageInfo0.getHeight());
      assertTrue(imageInfo0.isTransparent());
      assertEquals(121, imageInfo0.getPhysicalWidthDpi());
      assertEquals("", imageInfo0.getMimeType());
      assertEquals(121, imageInfo0.getWidth());
      assertEquals(ImageInfo.CompressionAlgorithm.CCITT_GROUP_4, imageInfo0.getCompressionAlgorithm());
      assertEquals((-576.0F), imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals((-900), imageInfo0.getPhysicalHeightDpi());
      assertNotNull(imageInfo0);
      
      int int0 = imageInfo0.getHeight();
      assertEquals((-900), int0);
      assertFalse(set0.contains(""));
      assertFalse(list0.contains(""));
      assertEquals(0, linkedList0.size());
      assertFalse(set0.isEmpty());
      assertEquals(600, set0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals("wbmp", imageFormats0.getDefaultExtension());
      assertTrue(imageInfo0.usesPalette());
      assertTrue(imageInfo0.isProgressive());
      assertEquals((-900), imageInfo0.getBitsPerPixel());
      assertEquals((-900.0F), imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(8, imageInfo0.getNumberOfImages());
      assertEquals(ImageInfo.ColorType.RGB, imageInfo0.getColorType());
      assertNull(imageInfo0.getFormatName());
      assertEquals("", imageInfo0.getFormatDetails());
      assertEquals((-900), imageInfo0.getHeight());
      assertTrue(imageInfo0.isTransparent());
      assertEquals(121, imageInfo0.getPhysicalWidthDpi());
      assertEquals("", imageInfo0.getMimeType());
      assertEquals(121, imageInfo0.getWidth());
      assertEquals(ImageInfo.CompressionAlgorithm.CCITT_GROUP_4, imageInfo0.getCompressionAlgorithm());
      assertEquals((-576.0F), imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals((-900), imageInfo0.getPhysicalHeightDpi());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      assertEquals(ImageFormats.JBIG2, imageFormats0);
      
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 2, linkedList0, imageFormats0, (String) null, 2, (String) null, (-214), 1, (-3740.656F), 1, 1.0F, (-214), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, imageInfo0.getPhysicalHeightDpi());
      assertEquals(2, imageInfo0.getBitsPerPixel());
      assertTrue(imageInfo0.isTransparent());
      assertEquals(ImageInfo.ColorType.UNKNOWN, imageInfo0.getColorType());
      assertEquals((-3740.656F), imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertNull(imageInfo0.getFormatName());
      assertNull(imageInfo0.getMimeType());
      assertEquals(2, imageInfo0.getHeight());
      assertEquals((-214), imageInfo0.getNumberOfImages());
      assertTrue(imageInfo0.usesPalette());
      assertEquals(ImageInfo.CompressionAlgorithm.NONE, imageInfo0.getCompressionAlgorithm());
      assertTrue(imageInfo0.isProgressive());
      assertEquals(1, imageInfo0.getPhysicalWidthDpi());
      assertNull(imageInfo0.getFormatDetails());
      assertEquals((-214), imageInfo0.getWidth());
      assertEquals(1.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertNotNull(imageInfo0);
      
      String string0 = imageInfo0.getFormatName();
      assertEquals(0, linkedList0.size());
      assertEquals(1, imageInfo0.getPhysicalHeightDpi());
      assertEquals(2, imageInfo0.getBitsPerPixel());
      assertTrue(imageInfo0.isTransparent());
      assertEquals(ImageInfo.ColorType.UNKNOWN, imageInfo0.getColorType());
      assertEquals((-3740.656F), imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertNull(imageInfo0.getFormatName());
      assertNull(imageInfo0.getMimeType());
      assertEquals(2, imageInfo0.getHeight());
      assertEquals((-214), imageInfo0.getNumberOfImages());
      assertTrue(imageInfo0.usesPalette());
      assertEquals(ImageInfo.CompressionAlgorithm.NONE, imageInfo0.getCompressionAlgorithm());
      assertTrue(imageInfo0.isProgressive());
      assertEquals(1, imageInfo0.getPhysicalWidthDpi());
      assertNull(imageInfo0.getFormatDetails());
      assertEquals((-214), imageInfo0.getWidth());
      assertEquals(1.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      assertEquals(600, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      assertEquals(0, linkedList0.size());
      assertEquals(600, set0.size());
      assertFalse(set0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      ImageFormats imageFormats0 = ImageFormats.XBM;
      assertEquals(ImageFormats.XBM, imageFormats0);
      assertEquals("xbm", imageFormats0.getDefaultExtension());
      
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(set0.contains(""));
      assertFalse(list0.contains(""));
      assertEquals(0, linkedList0.size());
      assertEquals(600, set0.size());
      assertFalse(set0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals("xbm", imageFormats0.getDefaultExtension());
      assertFalse(imageInfo0.usesPalette());
      assertEquals((-332), imageInfo0.getPhysicalWidthDpi());
      assertFalse(imageInfo0.isProgressive());
      assertEquals(3327, imageInfo0.getBitsPerPixel());
      assertEquals("", imageInfo0.getFormatDetails());
      assertEquals((-332), imageInfo0.getPhysicalHeightDpi());
      assertEquals(3327, imageInfo0.getHeight());
      assertEquals(ImageInfo.CompressionAlgorithm.CCITT_1D, imageInfo0.getCompressionAlgorithm());
      assertNull(imageInfo0.getMimeType());
      assertEquals("", imageInfo0.getFormatName());
      assertEquals(1916.28F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(3327, imageInfo0.getNumberOfImages());
      assertFalse(imageInfo0.isTransparent());
      assertEquals(ImageInfo.ColorType.BW, imageInfo0.getColorType());
      assertEquals(3327.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(3327, imageInfo0.getWidth());
      assertNotNull(imageInfo0);
      
      String string0 = imageInfo0.getFormatName();
      assertEquals("", string0);
      assertFalse(set0.contains(string0));
      assertFalse(list0.contains(string0));
      assertEquals(0, linkedList0.size());
      assertEquals(600, set0.size());
      assertFalse(set0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals("xbm", imageFormats0.getDefaultExtension());
      assertFalse(imageInfo0.usesPalette());
      assertEquals((-332), imageInfo0.getPhysicalWidthDpi());
      assertFalse(imageInfo0.isProgressive());
      assertEquals(3327, imageInfo0.getBitsPerPixel());
      assertEquals("", imageInfo0.getFormatDetails());
      assertEquals((-332), imageInfo0.getPhysicalHeightDpi());
      assertEquals(3327, imageInfo0.getHeight());
      assertEquals(ImageInfo.CompressionAlgorithm.CCITT_1D, imageInfo0.getCompressionAlgorithm());
      assertNull(imageInfo0.getMimeType());
      assertEquals("", imageInfo0.getFormatName());
      assertEquals(1916.28F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(3327, imageInfo0.getNumberOfImages());
      assertFalse(imageInfo0.isTransparent());
      assertEquals(ImageInfo.ColorType.BW, imageInfo0.getColorType());
      assertEquals(3327.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(3327, imageInfo0.getWidth());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ImageFormats imageFormats0 = ImageFormats.GIF;
      assertEquals(ImageFormats.GIF, imageFormats0);
      assertEquals("gif", imageFormats0.getDefaultExtension());
      
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 11, linkedList0, imageFormats0, "{Os57/d^@", 11, (String) null, (-183), 15, 15, 1, 11, 1, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(linkedList0.contains("{Os57/d^@"));
      assertEquals(0, linkedList0.size());
      assertEquals("gif", imageFormats0.getDefaultExtension());
      assertTrue(imageInfo0.isTransparent());
      assertEquals(ImageInfo.CompressionAlgorithm.CCITT_GROUP_4, imageInfo0.getCompressionAlgorithm());
      assertEquals("{Os57/d^@", imageInfo0.getFormatName());
      assertEquals(ImageInfo.ColorType.CMYK, imageInfo0.getColorType());
      assertNull(imageInfo0.getFormatDetails());
      assertEquals(1, imageInfo0.getPhysicalWidthDpi());
      assertEquals(11, imageInfo0.getHeight());
      assertNull(imageInfo0.getMimeType());
      assertEquals(1, imageInfo0.getWidth());
      assertEquals(11, imageInfo0.getBitsPerPixel());
      assertEquals(15.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals((-183), imageInfo0.getNumberOfImages());
      assertEquals(11.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertTrue(imageInfo0.isProgressive());
      assertEquals(15, imageInfo0.getPhysicalHeightDpi());
      assertTrue(imageInfo0.usesPalette());
      assertNotNull(imageInfo0);
      
      String string0 = imageInfo0.getFormatDetails();
      assertFalse(linkedList0.contains("{Os57/d^@"));
      assertEquals(0, linkedList0.size());
      assertEquals("gif", imageFormats0.getDefaultExtension());
      assertTrue(imageInfo0.isTransparent());
      assertEquals(ImageInfo.CompressionAlgorithm.CCITT_GROUP_4, imageInfo0.getCompressionAlgorithm());
      assertEquals("{Os57/d^@", imageInfo0.getFormatName());
      assertEquals(ImageInfo.ColorType.CMYK, imageInfo0.getColorType());
      assertNull(imageInfo0.getFormatDetails());
      assertEquals(1, imageInfo0.getPhysicalWidthDpi());
      assertEquals(11, imageInfo0.getHeight());
      assertNull(imageInfo0.getMimeType());
      assertEquals(1, imageInfo0.getWidth());
      assertEquals(11, imageInfo0.getBitsPerPixel());
      assertEquals(15.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals((-183), imageInfo0.getNumberOfImages());
      assertEquals(11.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertTrue(imageInfo0.isProgressive());
      assertEquals(15, imageInfo0.getPhysicalHeightDpi());
      assertTrue(imageInfo0.usesPalette());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale locale0 = new Locale("Width: ");
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("width: ", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("width: ", locale0.getLanguage());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertFalse(set0.contains("Width: "));
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("width: ", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("width: ", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      assertFalse(set0.contains("Width: "));
      assertFalse(list0.contains("Width: "));
      assertEquals(0, linkedList0.size());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("width: ", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("width: ", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      ImageFormats imageFormats0 = ImageFormats.BMP;
      assertEquals(ImageFormats.BMP, imageFormats0);
      assertEquals("bmp", imageFormats0.getDefaultExtension());
      
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(set0.contains("Width: "));
      assertFalse(list0.contains("Width: "));
      assertEquals(0, linkedList0.size());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("width: ", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("width: ", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals("bmp", imageFormats0.getDefaultExtension());
      assertEquals("Width: ", imageInfo0.getFormatDetails());
      assertFalse(imageInfo0.usesPalette());
      assertTrue(imageInfo0.isProgressive());
      assertEquals((-4266), imageInfo0.getPhysicalWidthDpi());
      assertEquals(ImageInfo.ColorType.CMYK, imageInfo0.getColorType());
      assertTrue(imageInfo0.isTransparent());
      assertEquals(2524, imageInfo0.getWidth());
      assertEquals(0, imageInfo0.getNumberOfImages());
      assertEquals(0, imageInfo0.getBitsPerPixel());
      assertEquals(0, imageInfo0.getHeight());
      assertEquals((-781), imageInfo0.getPhysicalHeightDpi());
      assertEquals("Width: ", imageInfo0.getFormatName());
      assertEquals((-1.0F), imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals("Width: ", imageInfo0.getMimeType());
      assertEquals((-1.0F), imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(ImageInfo.CompressionAlgorithm.PNG_FILTER, imageInfo0.getCompressionAlgorithm());
      assertNotNull(imageInfo0);
      
      String string0 = imageInfo0.getFormatDetails();
      assertEquals("Width: ", string0);
      assertFalse(set0.contains("Width: "));
      assertFalse(list0.contains("Width: "));
      assertEquals(0, linkedList0.size());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("width: ", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("width: ", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals("bmp", imageFormats0.getDefaultExtension());
      assertEquals("Width: ", imageInfo0.getFormatDetails());
      assertFalse(imageInfo0.usesPalette());
      assertTrue(imageInfo0.isProgressive());
      assertEquals((-4266), imageInfo0.getPhysicalWidthDpi());
      assertEquals(ImageInfo.ColorType.CMYK, imageInfo0.getColorType());
      assertTrue(imageInfo0.isTransparent());
      assertEquals(2524, imageInfo0.getWidth());
      assertEquals(0, imageInfo0.getNumberOfImages());
      assertEquals(0, imageInfo0.getBitsPerPixel());
      assertEquals(0, imageInfo0.getHeight());
      assertEquals((-781), imageInfo0.getPhysicalHeightDpi());
      assertEquals("Width: ", imageInfo0.getFormatName());
      assertEquals((-1.0F), imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals("Width: ", imageInfo0.getMimeType());
      assertEquals((-1.0F), imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(ImageInfo.CompressionAlgorithm.PNG_FILTER, imageInfo0.getCompressionAlgorithm());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale locale0 = Locale.UK;
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      assertEquals(0, linkedList0.size());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(set0.contains("?dTsI'lDG>|t9QKg2"));
      assertFalse(list0.contains("?dTsI'lDG>|t9QKg2"));
      assertEquals(0, linkedList0.size());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(imageInfo0.isTransparent());
      assertEquals(0.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
      assertEquals((-1570), imageInfo0.getNumberOfImages());
      assertEquals("?dTsI'lDG>|t9QKg2", imageInfo0.getFormatName());
      assertEquals("(", imageInfo0.getFormatDetails());
      assertTrue(imageInfo0.usesPalette());
      assertTrue(imageInfo0.isProgressive());
      assertEquals(0.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals((-280), imageInfo0.getHeight());
      assertEquals((-1570), imageInfo0.getBitsPerPixel());
      assertEquals("(", imageInfo0.getMimeType());
      assertEquals(ImageInfo.CompressionAlgorithm.RLE, imageInfo0.getCompressionAlgorithm());
      assertEquals(385, imageInfo0.getWidth());
      assertEquals(385, imageInfo0.getPhysicalHeightDpi());
      assertEquals(ImageInfo.ColorType.UNKNOWN, imageInfo0.getColorType());
      assertNotNull(imageInfo0);
      
      ImageFormat imageFormat0 = imageInfo0.getFormat();
      assertFalse(set0.contains("?dTsI'lDG>|t9QKg2"));
      assertFalse(list0.contains("?dTsI'lDG>|t9QKg2"));
      assertEquals(0, linkedList0.size());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(imageInfo0.isTransparent());
      assertEquals(0.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
      assertEquals((-1570), imageInfo0.getNumberOfImages());
      assertEquals("?dTsI'lDG>|t9QKg2", imageInfo0.getFormatName());
      assertEquals("(", imageInfo0.getFormatDetails());
      assertTrue(imageInfo0.usesPalette());
      assertTrue(imageInfo0.isProgressive());
      assertEquals(0.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals((-280), imageInfo0.getHeight());
      assertEquals((-1570), imageInfo0.getBitsPerPixel());
      assertEquals("(", imageInfo0.getMimeType());
      assertEquals(ImageInfo.CompressionAlgorithm.RLE, imageInfo0.getCompressionAlgorithm());
      assertEquals(385, imageInfo0.getWidth());
      assertEquals(385, imageInfo0.getPhysicalHeightDpi());
      assertEquals(ImageInfo.ColorType.UNKNOWN, imageInfo0.getColorType());
      assertNull(imageFormat0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ImageFormats imageFormats0 = ImageFormats.PSD;
      assertEquals(ImageFormats.PSD, imageFormats0);
      assertEquals("psd", imageFormats0.getDefaultExtension());
      
      boolean boolean0 = linkedList0.add("!");
      assertTrue(boolean0);
      assertTrue(linkedList0.contains("!"));
      assertEquals(1, linkedList0.size());
      
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo("!", (-4491), linkedList0, imageFormats0, "!", (-4491), "!", 3, (-4491), (-4491), 8, (-4491), 7, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertTrue(linkedList0.contains("!"));
      assertEquals(1, linkedList0.size());
      assertEquals("psd", imageFormats0.getDefaultExtension());
      assertEquals("!", imageInfo0.getFormatDetails());
      assertEquals((-4491), imageInfo0.getHeight());
      assertEquals(7, imageInfo0.getWidth());
      assertEquals(ImageInfo.ColorType.BW, imageInfo0.getColorType());
      assertEquals("!", imageInfo0.getMimeType());
      assertEquals(3, imageInfo0.getNumberOfImages());
      assertTrue(imageInfo0.usesPalette());
      assertEquals("!", imageInfo0.getFormatName());
      assertEquals((-4491), imageInfo0.getBitsPerPixel());
      assertEquals((-4491), imageInfo0.getPhysicalHeightDpi());
      assertEquals((-4491.0F), imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertTrue(imageInfo0.isTransparent());
      assertTrue(imageInfo0.isProgressive());
      assertEquals(8, imageInfo0.getPhysicalWidthDpi());
      assertEquals(ImageInfo.CompressionAlgorithm.PSD, imageInfo0.getCompressionAlgorithm());
      assertEquals((-4491.0F), imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertNotNull(imageInfo0);
      
      List<String> list0 = imageInfo0.getComments();
      assertTrue(linkedList0.contains("!"));
      assertTrue(list0.contains("!"));
      assertEquals(1, linkedList0.size());
      assertEquals("psd", imageFormats0.getDefaultExtension());
      assertEquals("!", imageInfo0.getFormatDetails());
      assertEquals((-4491), imageInfo0.getHeight());
      assertEquals(7, imageInfo0.getWidth());
      assertEquals(ImageInfo.ColorType.BW, imageInfo0.getColorType());
      assertEquals("!", imageInfo0.getMimeType());
      assertEquals(3, imageInfo0.getNumberOfImages());
      assertTrue(imageInfo0.usesPalette());
      assertEquals("!", imageInfo0.getFormatName());
      assertEquals((-4491), imageInfo0.getBitsPerPixel());
      assertEquals((-4491), imageInfo0.getPhysicalHeightDpi());
      assertEquals((-4491.0F), imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertTrue(imageInfo0.isTransparent());
      assertTrue(imageInfo0.isProgressive());
      assertEquals(8, imageInfo0.getPhysicalWidthDpi());
      assertEquals(ImageInfo.CompressionAlgorithm.PSD, imageInfo0.getCompressionAlgorithm());
      assertEquals((-4491.0F), imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      assertEquals(ImageFormats.JBIG2, imageFormats0);
      
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3975, linkedList0, imageFormats0, "", 3975, (String) null, 3975, 3975, 3975, 3975, 3975, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(linkedList0.contains(""));
      assertEquals(0, linkedList0.size());
      assertTrue(imageInfo0.isProgressive());
      assertEquals(3975, imageInfo0.getHeight());
      assertEquals(ImageInfo.ColorType.YCCK, imageInfo0.getColorType());
      assertEquals(3975.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertFalse(imageInfo0.usesPalette());
      assertTrue(imageInfo0.isTransparent());
      assertEquals(ImageInfo.CompressionAlgorithm.CCITT_1D, imageInfo0.getCompressionAlgorithm());
      assertEquals("", imageInfo0.getFormatName());
      assertEquals("", imageInfo0.getFormatDetails());
      assertEquals(3975, imageInfo0.getPhysicalWidthDpi());
      assertEquals(3975.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(0, imageInfo0.getWidth());
      assertNull(imageInfo0.getMimeType());
      assertEquals(3975, imageInfo0.getPhysicalHeightDpi());
      assertEquals(3975, imageInfo0.getNumberOfImages());
      assertEquals(3975, imageInfo0.getBitsPerPixel());
      assertNotNull(imageInfo0);
      
      int int0 = imageInfo0.getBitsPerPixel();
      assertEquals(3975, int0);
      assertFalse(linkedList0.contains(""));
      assertEquals(0, linkedList0.size());
      assertTrue(imageInfo0.isProgressive());
      assertEquals(3975, imageInfo0.getHeight());
      assertEquals(ImageInfo.ColorType.YCCK, imageInfo0.getColorType());
      assertEquals(3975.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertFalse(imageInfo0.usesPalette());
      assertTrue(imageInfo0.isTransparent());
      assertEquals(ImageInfo.CompressionAlgorithm.CCITT_1D, imageInfo0.getCompressionAlgorithm());
      assertEquals("", imageInfo0.getFormatName());
      assertEquals("", imageInfo0.getFormatDetails());
      assertEquals(3975, imageInfo0.getPhysicalWidthDpi());
      assertEquals(3975.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(0, imageInfo0.getWidth());
      assertNull(imageInfo0.getMimeType());
      assertEquals(3975, imageInfo0.getPhysicalHeightDpi());
      assertEquals(3975, imageInfo0.getNumberOfImages());
      assertEquals(3975, imageInfo0.getBitsPerPixel());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      assertEquals(0, linkedList0.size());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(set0.contains("org.apache.commons.io.filefilter.DelegateFileFilter"));
      assertFalse(list0.contains("org.apache.commons.io.filefilter.DelegateFileFilter"));
      assertEquals(0, linkedList0.size());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(imageInfo0.usesPalette());
      assertEquals("org.apache.commons.io.filefilter.DelegateFileFilter", imageInfo0.getMimeType());
      assertEquals(4.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertFalse(imageInfo0.isProgressive());
      assertEquals((-767), imageInfo0.getHeight());
      assertEquals(4, imageInfo0.getPhysicalHeightDpi());
      assertEquals((-767), imageInfo0.getBitsPerPixel());
      assertEquals((-767), imageInfo0.getNumberOfImages());
      assertEquals(ImageInfo.ColorType.UNKNOWN, imageInfo0.getColorType());
      assertEquals(2907, imageInfo0.getPhysicalWidthDpi());
      assertEquals((-767), imageInfo0.getWidth());
      assertTrue(imageInfo0.isTransparent());
      assertEquals("org.apache.commons.io.filefilter.DelegateFileFilter", imageInfo0.getFormatDetails());
      assertEquals("org.apache.commons.io.filefilter.AbstractFileFilter", imageInfo0.getFormatName());
      assertEquals(ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE, imageInfo0.getCompressionAlgorithm());
      assertEquals((-1.0F), imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertNotNull(imageInfo0);
      
      int int0 = imageInfo0.getBitsPerPixel();
      assertEquals((-767), int0);
      assertFalse(set0.contains("org.apache.commons.io.filefilter.DelegateFileFilter"));
      assertFalse(list0.contains("org.apache.commons.io.filefilter.DelegateFileFilter"));
      assertEquals(0, linkedList0.size());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(imageInfo0.usesPalette());
      assertEquals("org.apache.commons.io.filefilter.DelegateFileFilter", imageInfo0.getMimeType());
      assertEquals(4.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertFalse(imageInfo0.isProgressive());
      assertEquals((-767), imageInfo0.getHeight());
      assertEquals(4, imageInfo0.getPhysicalHeightDpi());
      assertEquals((-767), imageInfo0.getBitsPerPixel());
      assertEquals((-767), imageInfo0.getNumberOfImages());
      assertEquals(ImageInfo.ColorType.UNKNOWN, imageInfo0.getColorType());
      assertEquals(2907, imageInfo0.getPhysicalWidthDpi());
      assertEquals((-767), imageInfo0.getWidth());
      assertTrue(imageInfo0.isTransparent());
      assertEquals("org.apache.commons.io.filefilter.DelegateFileFilter", imageInfo0.getFormatDetails());
      assertEquals("org.apache.commons.io.filefilter.AbstractFileFilter", imageInfo0.getFormatName());
      assertEquals(ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE, imageInfo0.getCompressionAlgorithm());
      assertEquals((-1.0F), imageInfo0.getPhysicalWidthInch(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo((String) null, (-694), (List<String>) null, (ImageFormat) null, (String) null, (-445), (String) null, (-445), (-445), 3208.0F, (-445), 0.0F, (-445), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals((-445), imageInfo0.getHeight());
      assertNull(imageInfo0.getFormatName());
      assertEquals(ImageInfo.ColorType.RGB, imageInfo0.getColorType());
      assertEquals((-445), imageInfo0.getNumberOfImages());
      assertEquals((-445), imageInfo0.getWidth());
      assertEquals((-445), imageInfo0.getPhysicalHeightDpi());
      assertEquals((-694), imageInfo0.getBitsPerPixel());
      assertNull(imageInfo0.getMimeType());
      assertTrue(imageInfo0.isTransparent());
      assertEquals(0.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(3208.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertNull(imageInfo0.getFormatDetails());
      assertTrue(imageInfo0.isProgressive());
      assertEquals((-445), imageInfo0.getPhysicalWidthDpi());
      assertTrue(imageInfo0.usesPalette());
      assertEquals(ImageInfo.CompressionAlgorithm.PSD, imageInfo0.getCompressionAlgorithm());
      assertNotNull(imageInfo0);
      
      MockFile mockFile0 = new MockFile("Image Data: Error", "Image Data: Error");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      // Undeclared exception!
      try { 
        imageInfo0.toString((PrintWriter) mockPrintWriter0, "Photoshop");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.ImageInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      assertEquals(ImageInfo.ColorType.OTHER, imageInfo_ColorType0);
      assertEquals("Other", imageInfo_ColorType0.toString());
      
      String string0 = imageInfo_ColorType0.toString();
      assertEquals("Other", string0);
      assertEquals("Other", imageInfo_ColorType0.toString());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.toString();
      assertEquals("Format Details: }Cz6Z2Q-HI\nBits Per Pixel: 0\nComments: 0\nFormat: XPM\nFormat Name: j/Hr2kKQ:{c$IOfiJ)B\nCompression Algorithm: LZW\nHeight: 0\nMimeType: j/Hr2kKQ:{c$IOfiJ)B\nNumber Of Images: 0\nPhysical Height Dpi: 0\nPhysical Height Inch: 0.0\nPhysical Width Dpi: 0\nPhysical Width Inch: 0.0\nWidth: 0\nIs Progressive: true\nIs Transparent: true\nColor Type: Unknown\nUses Palette: false\n", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.BMP;
      linkedList0.add("icns");
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo("RLE: Run-Length Encoding", 0, linkedList0, imageFormats0, "$VALUES", 0, "$VALUES", (-733), (-1337), (-733), (-2711), (-2760.491F), (-733), false, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      MockFile mockFile0 = new MockFile("jz=TI%cfh6+Z*ZU)r");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      imageInfo0.toString((PrintWriter) mockPrintWriter0, "\"`8HNkx@W1<Om/;,");
      assertEquals((-733), imageInfo0.getNumberOfImages());
      assertEquals((-733), imageInfo0.getWidth());
      assertEquals((-2711), imageInfo0.getPhysicalWidthDpi());
      assertEquals(0, imageInfo0.getHeight());
      assertEquals(415L, mockFile0.length());
      assertEquals((-1337), imageInfo0.getPhysicalHeightDpi());
      assertEquals(0, imageInfo0.getBitsPerPixel());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.GRAYSCALE;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 0, linkedList0, imageFormats0, (String) null, 0, (String) null, 0, 0, 0, 0, 0, 0, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.dump();
      assertEquals(0.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertFalse(imageInfo0.isProgressive());
      assertEquals(0, imageInfo0.getHeight());
      assertEquals(0.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(0, imageInfo0.getWidth());
      assertEquals(0, imageInfo0.getNumberOfImages());
      assertEquals(0, imageInfo0.getBitsPerPixel());
      assertFalse(imageInfo0.usesPalette());
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
      assertFalse(imageInfo0.isTransparent());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.ICO;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("u::B", (-1567), linkedList0, imageFormats0, "u::B", (-1567), "u::B", (-1567), (-1567), (-1567), (-1567), (-1567), (-1567), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.usesPalette();
      assertEquals((-1567), imageInfo0.getWidth());
      assertEquals((-1567), imageInfo0.getNumberOfImages());
      assertEquals((-1567), imageInfo0.getPhysicalWidthDpi());
      assertEquals((-1567), imageInfo0.getBitsPerPixel());
      assertEquals((-1567), imageInfo0.getPhysicalHeightDpi());
      assertEquals((-1567.0F), imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals((-1567), imageInfo0.getHeight());
      assertTrue(imageInfo0.isProgressive());
      assertTrue(imageInfo0.isTransparent());
      assertEquals((-1567.0F), imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isProgressive();
      assertEquals(0, imageInfo0.getWidth());
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
      assertTrue(boolean0);
      assertTrue(imageInfo0.isTransparent());
      assertEquals("}Cz6Z2Q-HI", imageInfo0.getFormatDetails());
      assertEquals(0.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(0.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertTrue(imageInfo0.usesPalette());
      assertEquals("j/Hr2kKQ:{c$IOfiJ)B", imageInfo0.getFormatName());
      assertEquals("j/Hr2kKQ:{c$IOfiJ)B", imageInfo0.getMimeType());
      assertEquals(0, imageInfo0.getHeight());
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
      assertEquals(0, imageInfo0.getBitsPerPixel());
      assertEquals(0, imageInfo0.getNumberOfImages());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCC;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("%RM^bGg u}U?)C<", 0, list0, imageFormats0, "%RM^bGg u}U?)C<", 0, "%RM^bGg u}U?)C<", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isTransparent();
      assertEquals(0, imageInfo0.getBitsPerPixel());
      assertTrue(imageInfo0.isProgressive());
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
      assertTrue(boolean0);
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
      assertEquals(0, imageInfo0.getNumberOfImages());
      assertEquals(0.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(0.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertTrue(imageInfo0.usesPalette());
      assertEquals(0, imageInfo0.getHeight());
      assertEquals(0, imageInfo0.getWidth());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCC;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("%RM^bGg u}U?)C<", 0, list0, imageFormats0, "%RM^bGg u}U?)C<", 0, "%RM^bGg u}U?)C<", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      assertEquals(0, imageInfo0.getWidth());
      assertTrue(imageInfo0.usesPalette());
      assertEquals(0, imageInfo0.getBitsPerPixel());
      assertEquals(0.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(0, imageInfo0.getNumberOfImages());
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
      assertEquals(0, int0);
      assertTrue(imageInfo0.isTransparent());
      assertTrue(imageInfo0.isProgressive());
      assertEquals(0.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      assertTrue(imageInfo0.isTransparent());
      assertEquals(0.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
      assertTrue(imageInfo0.isProgressive());
      assertEquals("}Cz6Z2Q-HI", imageInfo0.getFormatDetails());
      assertEquals(0.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertTrue(imageInfo0.usesPalette());
      assertEquals("j/Hr2kKQ:{c$IOfiJ)B", imageInfo0.getMimeType());
      assertEquals(0, imageInfo0.getHeight());
      assertEquals("j/Hr2kKQ:{c$IOfiJ)B", imageInfo0.getFormatName());
      assertEquals(0, imageInfo0.getNumberOfImages());
      assertEquals(0, int0);
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
      assertEquals(0, imageInfo0.getWidth());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.UNKNOWN;
      ImageInfo imageInfo0 = new ImageInfo("", 2823, linkedList0, imageFormats0, "", 2823, "", 2823, 2823, 2823, 2823, 2823, 2823, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      assertEquals(2823.0F, float0, 0.01F);
      assertEquals(2823, imageInfo0.getHeight());
      assertEquals(2823, imageInfo0.getWidth());
      assertEquals(2823, imageInfo0.getBitsPerPixel());
      assertEquals(2823, imageInfo0.getPhysicalHeightDpi());
      assertTrue(imageInfo0.isTransparent());
      assertEquals(2823, imageInfo0.getPhysicalWidthDpi());
      assertEquals(2823.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(2823, imageInfo0.getNumberOfImages());
      assertTrue(imageInfo0.isProgressive());
      assertTrue(imageInfo0.usesPalette());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.UNKNOWN;
      ImageInfo imageInfo0 = new ImageInfo("", 2823, linkedList0, imageFormats0, "", 2823, "", 2823, 2823, 2823, 2823, 2823, 2823, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getFormatDetails();
      assertEquals(2823, imageInfo0.getPhysicalWidthDpi());
      assertEquals(2823.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(2823, imageInfo0.getWidth());
      assertEquals(2823.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(2823, imageInfo0.getNumberOfImages());
      assertEquals(2823, imageInfo0.getPhysicalHeightDpi());
      assertTrue(imageInfo0.isTransparent());
      assertTrue(imageInfo0.isProgressive());
      assertEquals(2823, imageInfo0.getHeight());
      assertTrue(imageInfo0.usesPalette());
      assertEquals(2823, imageInfo0.getBitsPerPixel());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      assertEquals(0.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals("j/Hr2kKQ:{c$IOfiJ)B", imageInfo0.getMimeType());
      assertEquals(0, int0);
      assertEquals(0, imageInfo0.getHeight());
      assertTrue(imageInfo0.isProgressive());
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
      assertEquals(0.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertTrue(imageInfo0.isTransparent());
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
      assertFalse(imageInfo0.usesPalette());
      assertEquals("}Cz6Z2Q-HI", imageInfo0.getFormatDetails());
      assertEquals(0, imageInfo0.getBitsPerPixel());
      assertEquals(0, imageInfo0.getNumberOfImages());
      assertEquals("j/Hr2kKQ:{c$IOfiJ)B", imageInfo0.getFormatName());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      assertEquals(0, imageInfo0.getHeight());
      assertEquals("}Cz6Z2Q-HI", imageInfo0.getFormatDetails());
      assertEquals("j/Hr2kKQ:{c$IOfiJ)B", imageInfo0.getMimeType());
      assertEquals(0.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(0, int0);
      assertEquals(0, imageInfo0.getBitsPerPixel());
      assertEquals(0, imageInfo0.getNumberOfImages());
      assertEquals("j/Hr2kKQ:{c$IOfiJ)B", imageInfo0.getFormatName());
      assertTrue(imageInfo0.isTransparent());
      assertEquals(0, imageInfo0.getWidth());
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
      assertTrue(imageInfo0.usesPalette());
      assertTrue(imageInfo0.isProgressive());
      assertEquals(0.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo((String) null, (-694), (List<String>) null, (ImageFormat) null, (String) null, (-445), (String) null, (-445), (-445), 3208.0F, (-445), 0.0F, (-445), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getColorType();
      assertEquals((-445), imageInfo0.getHeight());
      assertTrue(imageInfo0.isTransparent());
      assertEquals(0.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals((-694), imageInfo0.getBitsPerPixel());
      assertEquals((-445), imageInfo0.getNumberOfImages());
      assertTrue(imageInfo0.usesPalette());
      assertEquals((-445), imageInfo0.getPhysicalHeightDpi());
      assertTrue(imageInfo0.isProgressive());
      assertEquals((-445), imageInfo0.getPhysicalWidthDpi());
      assertEquals((-445), imageInfo0.getWidth());
      assertEquals(3208.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.GRAYSCALE;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 0, linkedList0, imageFormats0, (String) null, 0, (String) null, 0, 0, 0, 0, 0, 0, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getCompressionAlgorithm();
      assertFalse(imageInfo0.isProgressive());
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
      assertEquals(0, imageInfo0.getBitsPerPixel());
      assertEquals(0.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertFalse(imageInfo0.isTransparent());
      assertEquals(0, imageInfo0.getNumberOfImages());
      assertEquals(0, imageInfo0.getWidth());
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
      assertEquals(0.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertFalse(imageInfo0.usesPalette());
      assertEquals(0, imageInfo0.getHeight());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.GRAYSCALE;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 0, linkedList0, imageFormats0, (String) null, 0, (String) null, 0, 0, 0, 0, 0, 0, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getFormat();
      assertEquals(0.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(0.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(0, imageInfo0.getWidth());
      assertEquals(0, imageInfo0.getNumberOfImages());
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
      assertEquals(0, imageInfo0.getBitsPerPixel());
      assertFalse(imageInfo0.isTransparent());
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
      assertEquals(0, imageInfo0.getHeight());
      assertFalse(imageInfo0.usesPalette());
      assertFalse(imageInfo0.isProgressive());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo((String) null, (-694), (List<String>) null, (ImageFormat) null, (String) null, (-445), (String) null, (-445), (-445), 3208.0F, (-445), 0.0F, (-445), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.dump();
      assertEquals((-445), imageInfo0.getHeight());
      assertTrue(imageInfo0.isTransparent());
      assertEquals(0.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertTrue(imageInfo0.usesPalette());
      assertEquals((-694), imageInfo0.getBitsPerPixel());
      assertEquals((-445), imageInfo0.getPhysicalHeightDpi());
      assertTrue(imageInfo0.isProgressive());
      assertEquals((-445), imageInfo0.getPhysicalWidthDpi());
      assertEquals((-445), imageInfo0.getNumberOfImages());
      assertEquals((-445), imageInfo0.getWidth());
      assertEquals(3208.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.GRAYSCALE;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 0, linkedList0, imageFormats0, (String) null, 0, (String) null, 0, 0, 0, 0, 0, 0, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getMimeType();
      assertFalse(imageInfo0.isProgressive());
      assertEquals(0, imageInfo0.getHeight());
      assertEquals(0.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertFalse(imageInfo0.usesPalette());
      assertEquals(0, imageInfo0.getBitsPerPixel());
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
      assertFalse(imageInfo0.isTransparent());
      assertEquals(0, imageInfo0.getWidth());
      assertEquals(0, imageInfo0.getNumberOfImages());
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
      assertEquals(0.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getComments();
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
      assertTrue(imageInfo0.isTransparent());
      assertEquals(0, imageInfo0.getWidth());
      assertEquals(0, imageInfo0.getBitsPerPixel());
      assertEquals(0, imageInfo0.getNumberOfImages());
      assertEquals("j/Hr2kKQ:{c$IOfiJ)B", imageInfo0.getFormatName());
      assertEquals(0, imageInfo0.getHeight());
      assertEquals("j/Hr2kKQ:{c$IOfiJ)B", imageInfo0.getMimeType());
      assertEquals("}Cz6Z2Q-HI", imageInfo0.getFormatDetails());
      assertEquals(0.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
      assertTrue(imageInfo0.isProgressive());
      assertTrue(imageInfo0.usesPalette());
      assertEquals(0.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("ICO", 1149, linkedList0, (ImageFormat) null, "ICO", 1149, "ICO", 1149, 1149, 1149, (-2622), 1149, 1149, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      assertEquals(1149, imageInfo0.getPhysicalHeightDpi());
      assertFalse(imageInfo0.usesPalette());
      assertFalse(imageInfo0.isTransparent());
      assertEquals(1149, imageInfo0.getHeight());
      assertEquals(1149.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals((-2622), imageInfo0.getPhysicalWidthDpi());
      assertEquals(1149.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(1149, int0);
      assertEquals(1149, imageInfo0.getWidth());
      assertFalse(imageInfo0.isProgressive());
      assertEquals(1149, imageInfo0.getBitsPerPixel());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("ICO", 1149, linkedList0, (ImageFormat) null, "ICO", 1149, "ICO", 1149, 1149, 1149, (-2622), 1149, 1149, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      assertFalse(imageInfo0.isProgressive());
      assertEquals(1149, imageInfo0.getWidth());
      assertEquals(1149, imageInfo0.getHeight());
      assertEquals((-2622), int0);
      assertEquals(1149, imageInfo0.getBitsPerPixel());
      assertEquals(1149, imageInfo0.getNumberOfImages());
      assertEquals(1149.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(1149.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(1149, imageInfo0.getPhysicalHeightDpi());
      assertFalse(imageInfo0.isTransparent());
      assertFalse(imageInfo0.usesPalette());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      assertTrue(imageInfo0.isTransparent());
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
      assertEquals(0, imageInfo0.getNumberOfImages());
      assertEquals(0, imageInfo0.getBitsPerPixel());
      assertEquals("}Cz6Z2Q-HI", imageInfo0.getFormatDetails());
      assertTrue(imageInfo0.isProgressive());
      assertEquals(0, imageInfo0.getHeight());
      assertEquals("j/Hr2kKQ:{c$IOfiJ)B", imageInfo0.getMimeType());
      assertTrue(imageInfo0.usesPalette());
      assertEquals(0.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals("j/Hr2kKQ:{c$IOfiJ)B", imageInfo0.getFormatName());
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0, imageInfo0.getWidth());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      assertEquals(0, imageInfo0.getHeight());
      assertEquals(0, imageInfo0.getNumberOfImages());
      assertEquals(0, imageInfo0.getWidth());
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
      assertEquals(0.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertTrue(imageInfo0.isProgressive());
      assertTrue(imageInfo0.usesPalette());
      assertEquals(0.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(0, imageInfo0.getBitsPerPixel());
      assertTrue(imageInfo0.isTransparent());
      assertEquals("j/Hr2kKQ:{c$IOfiJ)B", imageInfo0.getMimeType());
      assertEquals("}Cz6Z2Q-HI", imageInfo0.getFormatDetails());
      assertEquals("j/Hr2kKQ:{c$IOfiJ)B", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      String string0 = imageInfo_CompressionAlgorithm0.toString();
      assertEquals("Photoshop", string0);
  }
}
