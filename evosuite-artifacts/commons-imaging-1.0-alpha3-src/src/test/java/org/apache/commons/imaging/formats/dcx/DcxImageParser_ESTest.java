/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 23:33:33 GMT 2022
 */

package org.apache.commons.imaging.formats.dcx;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dimension;
import java.awt.image.BufferedImage;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.SequenceInputStream;
import javax.swing.DebugGraphics;
import org.apache.commons.imaging.ImageFormat;
import org.apache.commons.imaging.ImageInfo;
import org.apache.commons.imaging.common.ImageMetadata;
import org.apache.commons.imaging.common.RgbBufferedImageFactory;
import org.apache.commons.imaging.common.SimpleBufferedImageFactory;
import org.apache.commons.imaging.common.bytesource.ByteSource;
import org.apache.commons.imaging.common.bytesource.ByteSourceArray;
import org.apache.commons.imaging.common.bytesource.ByteSourceFile;
import org.apache.commons.imaging.common.bytesource.ByteSourceInputStream;
import org.apache.commons.imaging.formats.dcx.DcxImageParser;
import org.apache.commons.imaging.formats.pcx.PcxImagingParameters;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DcxImageParser_ESTest extends DcxImageParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      byte[] byteArray0 = new byte[18];
      byteArray0[3] = (byte)59;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(byteArrayInputStream0, "org.apache.commons.imaging.formats.dcx.DcxImageParser");
      PcxImagingParameters pcxImagingParameters0 = new PcxImagingParameters();
      try { 
        dcxImageParser0.getBufferedImage((ByteSource) byteSourceInputStream0, pcxImagingParameters0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not a Valid DCX File: file id incorrect
         //
         verifyException("org.apache.commons.imaging.formats.dcx.DcxImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      PcxImagingParameters pcxImagingParameters0 = dcxImageParser0.getDefaultParameters();
      RgbBufferedImageFactory rgbBufferedImageFactory0 = new RgbBufferedImageFactory();
      BufferedImage bufferedImage0 = rgbBufferedImageFactory0.getColorBufferedImage(82, (byte)68, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      dcxImageParser0.writeImage(bufferedImage0, (OutputStream) byteArrayOutputStream0, pcxImagingParameters0);
      assertEquals(5044, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      MockPrintStream mockPrintStream0 = new MockPrintStream("j?$'{v[=?SH.%\"w");
      PcxImagingParameters pcxImagingParameters0 = new PcxImagingParameters();
      // Undeclared exception!
      try { 
        dcxImageParser0.writeImage((BufferedImage) null, (OutputStream) mockPrintStream0, pcxImagingParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      SimpleBufferedImageFactory simpleBufferedImageFactory0 = new SimpleBufferedImageFactory();
      BufferedImage bufferedImage0 = simpleBufferedImageFactory0.getColorBufferedImage(1024, 1024, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 1024);
      try { 
        dcxImageParser0.writeImage(bufferedImage0, (OutputStream) bufferedOutputStream0, (PcxImagingParameters) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      byte[] byteArray0 = new byte[15];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray("", byteArray0);
      PcxImagingParameters pcxImagingParameters0 = dcxImageParser0.getDefaultParameters();
      try { 
        dcxImageParser0.getBufferedImage((ByteSource) byteSourceArray0, pcxImagingParameters0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not a Valid DCX File: file id incorrect
         //
         verifyException("org.apache.commons.imaging.formats.dcx.DcxImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      ByteSourceArray byteSourceArray0 = new ByteSourceArray((byte[]) null);
      PcxImagingParameters pcxImagingParameters0 = dcxImageParser0.getDefaultParameters();
      // Undeclared exception!
      try { 
        dcxImageParser0.getBufferedImage((ByteSource) byteSourceArray0, pcxImagingParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      PcxImagingParameters pcxImagingParameters0 = new PcxImagingParameters();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(dataInputStream0, "|*=1f:$U+wE/x&x");
      // Undeclared exception!
      try { 
        dcxImageParser0.getBufferedImage((ByteSource) byteSourceInputStream0, pcxImagingParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-33), 1140850706);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(byteArrayInputStream0, "");
      PcxImagingParameters pcxImagingParameters0 = new PcxImagingParameters();
      // Undeclared exception!
      try { 
        dcxImageParser0.getBufferedImage((ByteSource) byteSourceInputStream0, pcxImagingParameters0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      byte[] byteArray0 = new byte[2];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      PcxImagingParameters pcxImagingParameters0 = new PcxImagingParameters();
      try { 
        dcxImageParser0.getBufferedImage((ByteSource) byteSourceArray0, pcxImagingParameters0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid DCX File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      MockFile mockFile0 = new MockFile("B@bSwuWEq", "Dcx-Custom");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      PcxImagingParameters pcxImagingParameters0 = dcxImageParser0.getDefaultParameters();
      try { 
        dcxImageParser0.getBufferedImage((ByteSource) byteSourceFile0, pcxImagingParameters0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      ByteSourceArray byteSourceArray0 = new ByteSourceArray((byte[]) null);
      // Undeclared exception!
      try { 
        dcxImageParser0.getAllBufferedImages((ByteSource) byteSourceArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(dataInputStream0, "");
      // Undeclared exception!
      try { 
        dcxImageParser0.getAllBufferedImages((ByteSource) byteSourceInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("v_6_");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("v_6_");
      mockFileInputStream0.skip(4294967295L);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(mockFileInputStream0, "v_6_");
      // Undeclared exception!
      try { 
        dcxImageParser0.getAllBufferedImages((ByteSource) byteSourceInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Position in the file cannot be negative
         //
         verifyException("org.evosuite.runtime.vfs.VFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-47), 7271);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 2744);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, byteArrayInputStream0);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(sequenceInputStream0, "org.apache.commons.imaging.formats.psd.PsdImageParser");
      // Undeclared exception!
      try { 
        dcxImageParser0.getAllBufferedImages((ByteSource) byteSourceInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      byte[] byteArray0 = new byte[2];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      try { 
        dcxImageParser0.getAllBufferedImages((ByteSource) byteSourceArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid DCX File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      MockFile mockFile0 = new MockFile("GpR@j/c#");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      try { 
        dcxImageParser0.getAllBufferedImages((ByteSource) byteSourceFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      byte[] byteArray0 = new byte[19];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      try { 
        dcxImageParser0.dumpImageFile((PrintWriter) null, (ByteSource) byteSourceArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not a Valid DCX File: file id incorrect
         //
         verifyException("org.apache.commons.imaging.formats.dcx.DcxImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      // Undeclared exception!
      try { 
        dcxImageParser0.dumpImageFile((PrintWriter) mockPrintWriter0, (ByteSource) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.dcx.DcxImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PrintStream printStream0 = DebugGraphics.logStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      MockFile mockFile0 = new MockFile("");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      try { 
        dcxImageParser0.dumpImageFile((PrintWriter) mockPrintWriter0, (ByteSource) byteSourceFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      PcxImagingParameters pcxImagingParameters0 = new PcxImagingParameters();
      RgbBufferedImageFactory rgbBufferedImageFactory0 = new RgbBufferedImageFactory();
      BufferedImage bufferedImage0 = rgbBufferedImageFactory0.getColorBufferedImage(4100, 4100, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      // Undeclared exception!
      dcxImageParser0.writeImage(bufferedImage0, (OutputStream) bufferedOutputStream0, pcxImagingParameters0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      byte[] byteArray0 = new byte[19];
      byteArray0[6] = (byte)119;
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      try { 
        dcxImageParser0.getAllBufferedImages((ByteSource) byteSourceArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not a Valid DCX File: file id incorrect
         //
         verifyException("org.apache.commons.imaging.formats.dcx.DcxImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      String string0 = dcxImageParser0.getDefaultExtension();
      assertEquals("dcx", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      PcxImagingParameters pcxImagingParameters0 = dcxImageParser0.getDefaultParameters();
      byte[] byteArray0 = dcxImageParser0.getICCProfileBytes((ByteSource) null, pcxImagingParameters0);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      ImageFormat[] imageFormatArray0 = dcxImageParser0.getAcceptedTypes();
      assertEquals(1, imageFormatArray0.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      MockFile mockFile0 = new MockFile("org.apache.commons.imaging.formats.dcx.DcxImageParser", "org.apache.commons.imaging.formats.dcx.DcxImageParser");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      byte[] byteArray0 = new byte[4];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray("Dcx-Custom", byteArray0);
      try { 
        dcxImageParser0.dumpImageFile((PrintWriter) mockPrintWriter0, (ByteSource) byteSourceArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid DCX File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      PcxImagingParameters pcxImagingParameters0 = dcxImageParser0.getDefaultParameters();
      Dimension dimension0 = dcxImageParser0.getImageSize((ByteSource) null, pcxImagingParameters0);
      assertNull(dimension0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      String[] stringArray0 = dcxImageParser0.getAcceptedExtensions();
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      String string0 = dcxImageParser0.getName();
      assertEquals("Dcx-Custom", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      MockFile mockFile0 = new MockFile("gaeIVvz!-&b[ju");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      PcxImagingParameters pcxImagingParameters0 = new PcxImagingParameters();
      ImageMetadata imageMetadata0 = dcxImageParser0.getMetadata((ByteSource) byteSourceFile0, pcxImagingParameters0);
      assertNull(imageMetadata0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      MockFile mockFile0 = new MockFile("gaeIVvz!-&b[ju");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      PcxImagingParameters pcxImagingParameters0 = new PcxImagingParameters();
      ImageInfo imageInfo0 = dcxImageParser0.getImageInfo((ByteSource) byteSourceFile0, pcxImagingParameters0);
      assertNull(imageInfo0);
  }
}
