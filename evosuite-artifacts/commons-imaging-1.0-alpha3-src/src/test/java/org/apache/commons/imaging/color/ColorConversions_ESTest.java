/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 23:15:19 GMT 2022
 */

package org.apache.commons.imaging.color;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.color.ColorCieLab;
import org.apache.commons.imaging.color.ColorCieLch;
import org.apache.commons.imaging.color.ColorCieLuv;
import org.apache.commons.imaging.color.ColorCmy;
import org.apache.commons.imaging.color.ColorCmyk;
import org.apache.commons.imaging.color.ColorConversions;
import org.apache.commons.imaging.color.ColorDin99Lab;
import org.apache.commons.imaging.color.ColorHsl;
import org.apache.commons.imaging.color.ColorHsv;
import org.apache.commons.imaging.color.ColorHunterLab;
import org.apache.commons.imaging.color.ColorXyz;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ColorConversions_ESTest extends ColorConversions_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ColorDin99Lab colorDin99Lab0 = ColorConversions.convertCIELabToDIN99oLab((-851.5305153), 0.0, (-9.4));
      assertEquals((-0.8475004063157221), colorDin99Lab0.a99, 0.01);
      assertEquals(Double.NaN, colorDin99Lab0.L99, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ColorDin99Lab colorDin99Lab0 = ColorConversions.convertCIELabToDIN99oLab(100.0, (-702.3442061), (-1344.17));
      assertEquals((-57.909289350401224), colorDin99Lab0.a99, 0.01);
      assertEquals(100.0, colorDin99Lab0.L99, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ColorDin99Lab colorDin99Lab0 = ColorConversions.convertCIELabToDIN99bLab(54.045715561954395, 0.0, (-1988.32167007349));
      assertEquals((-86.17425166198208), colorDin99Lab0.b99, 0.01);
      assertEquals(65.1308783096731, colorDin99Lab0.L99, 0.01);
      assertEquals((-35.30009862184521), colorDin99Lab0.a99, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ColorCieLab colorCieLab0 = ColorCieLab.BLUE;
      ColorCieLch colorCieLch0 = ColorConversions.convertCIELabtoCIELCH(colorCieLab0);
      assertEquals(306.18477897677684, colorCieLch0.h, 0.01);
      assertEquals(32.0, colorCieLch0.L, 0.01);
      assertEquals(133.80956617521784, colorCieLch0.C, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ColorHsv colorHsv0 = ColorConversions.convertRGBtoHSV((-16711681));
      assertEquals(0.4999999999999999, colorHsv0.H, 0.01);
      assertEquals(1.0, colorHsv0.V, 0.01);
      assertEquals(1.0, colorHsv0.S, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = ColorConversions.convertHSLtoRGB(0.5, (double) (-65536), 53.233);
      assertEquals((-16711681), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = ColorConversions.convertHSLtoRGB(1.0, (double) 1842, (-40.0318));
      assertEquals((-16711681), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ColorHsl colorHsl0 = ColorHsl.RED;
      int int0 = ColorConversions.convertHSLtoRGB(colorHsl0);
      assertEquals((-16711681), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ColorHsl colorHsl0 = ColorConversions.convertRGBtoHSL((-65281));
      int int0 = ColorConversions.convertHSLtoRGB(colorHsl0);
      assertEquals(0.8333333333333334, colorHsl0.H, 0.01);
      assertEquals((-65281), int0);
      assertEquals(0.5, colorHsl0.L, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ColorHsl colorHsl0 = ColorConversions.convertRGBtoHSL((-16719648));
      assertEquals(0.4999999999999998, colorHsl0.H, 0.01);
      assertEquals(0.4392156862745098, colorHsl0.L, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ColorCmy colorCmy0 = ColorConversions.convertRGBtoCMY((-1));
      assertEquals(0.0, colorCmy0.M, 0.01);
      assertEquals(0.0, colorCmy0.Y, 0.01);
      assertEquals(0.0, colorCmy0.C, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ColorXyz colorXyz0 = ColorConversions.convertRGBtoXYZ((-16121088));
      assertEquals(0.016721756814180783, colorXyz0.Z, 0.01);
      assertEquals(0.15775184544405998, colorXyz0.X, 0.01);
      assertEquals(0.12967236083287803, colorXyz0.Y, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = ColorConversions.radian_2_degree(0.888235294117647);
      assertEquals(50.89213356750253, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = ColorConversions.radian_2_degree((-16777216));
      assertEquals((-9.61263668779357E8), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = ColorConversions.degree_2_radian(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = ColorConversions.degree_2_radian((-2186.0));
      assertEquals((-38.15289744859604), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColorConversions.convertXYZtoRGB((ColorXyz) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.color.ColorConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColorConversions.convertXYZtoHunterLab((ColorXyz) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.color.ColorConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColorConversions.convertXYZtoCIELuv((ColorXyz) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.color.ColorConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColorConversions.convertXYZtoCIELab((ColorXyz) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.color.ColorConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColorConversions.convertHunterLabtoXYZ((ColorHunterLab) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.color.ColorConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColorConversions.convertHSVtoRGB((ColorHsv) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.color.ColorConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColorConversions.convertHSLtoRGB((ColorHsl) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.color.ColorConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColorConversions.convertDIN99oLabToCIELab((ColorDin99Lab) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.color.ColorConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColorConversions.convertDIN99bLabToCIELab((ColorDin99Lab) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.color.ColorConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColorConversions.convertCMYtoRGB((ColorCmy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.color.ColorConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColorConversions.convertCMYtoCMYK((ColorCmy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.color.ColorConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColorConversions.convertCMYKtoCMY((ColorCmyk) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.color.ColorConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColorConversions.convertCIELuvtoXYZ((ColorCieLuv) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.color.ColorConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColorConversions.convertCIELabtoXYZ((ColorCieLab) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.color.ColorConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColorConversions.convertCIELabtoCIELCH((ColorCieLab) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.color.ColorConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColorConversions.convertCIELabToDIN99oLab((ColorCieLab) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.color.ColorConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColorConversions.convertCIELabToDIN99bLab((ColorCieLab) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.color.ColorConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColorConversions.convertCIELCHtoCIELab((ColorCieLch) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.color.ColorConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ColorDin99Lab colorDin99Lab0 = ColorConversions.convertCIELabToDIN99oLab(263.3047744, 0.0, 0.0);
      assertEquals(0.0, colorDin99Lab0.b99, 0.01);
      assertEquals(0.0, colorDin99Lab0.a99, 0.01);
      assertEquals(214.544147757251, colorDin99Lab0.L99, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ColorDin99Lab colorDin99Lab0 = ColorConversions.convertCIELabToDIN99bLab((-0.38), 0.0, 0.0);
      assertEquals(0.0, colorDin99Lab0.a99, 0.01);
      assertEquals((-0.6353833969134209), colorDin99Lab0.L99, 0.01);
      assertEquals(0.0, colorDin99Lab0.b99, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ColorDin99Lab colorDin99Lab0 = ColorConversions.convertCIELabToDIN99bLab(200.0, 255.0, (-86.0));
      assertEquals(150.40420117350897, colorDin99Lab0.L99, 0.01);
      assertEquals((-24.09367625830972), colorDin99Lab0.b99, 0.01);
      assertEquals(49.825220359717484, colorDin99Lab0.a99, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ColorCieLch colorCieLch0 = ColorConversions.convertCIELabtoCIELCH((-803.078), 0.0, 0.0);
      assertEquals(0.0, colorCieLch0.C, 0.01);
      assertEquals(360.0, colorCieLch0.h, 0.01);
      assertEquals((-803.078), colorCieLch0.L, 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = ColorConversions.convertHSVtoRGB((-190.923), (-371.3489), (-108.0));
      assertEquals((-16777216), int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = ColorConversions.convertHSVtoRGB(0.5423548891805353, 565.2288321975, 565.2288321975);
      assertEquals((-16776961), int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = ColorConversions.convertHSVtoRGB(0.2235294117647059, 1377.123442919348, 1297.0);
      assertEquals((-16711936), int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = ColorConversions.convertHSLtoRGB((-391.3726), 0.0, (-989.16088));
      assertEquals((-16777216), int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ColorHunterLab colorHunterLab0 = ColorConversions.convertXYZtoHunterLab((-1510.22181417014), (double) (-16711826), (-420.969));
      assertEquals(Double.NaN, colorHunterLab0.L, 0.01);
      assertEquals(Double.NaN, colorHunterLab0.b, 0.01);
      assertEquals(Double.NaN, colorHunterLab0.a, 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ColorCieLab colorCieLab0 = ColorConversions.convertXYZtoCIELab(0.0, 0.0, 0.0);
      assertEquals(0.0, colorCieLab0.a, 0.01);
      assertEquals(0.0, colorCieLab0.L, 0.01);
      assertEquals(0.0, colorCieLab0.b, 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double double0 = ColorConversions.degree_2_radian(1853.51888955692);
      assertEquals(32.350007370677396, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ColorCmy colorCmy0 = ColorCmy.BLUE;
      int int0 = ColorConversions.convertCMYtoRGB(colorCmy0);
      assertEquals((-16776961), int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = ColorConversions.convertXYZtoRGB((-40.44993312344552), 79.0, 32.00000000000001);
      assertEquals((-16711826), int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ColorCieLab colorCieLab0 = ColorConversions.convertCIELCHtoCIELab((-371.3489), Double.NaN, (-107.99999999999996));
      ColorDin99Lab colorDin99Lab0 = ColorConversions.convertCIELabToDIN99bLab(colorCieLab0);
      assertEquals(Double.NaN, colorDin99Lab0.L99, 0.01);
      assertEquals(Double.NaN, colorDin99Lab0.a99, 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ColorCieLuv colorCieLuv0 = ColorConversions.convertXYZtoCIELuv((-451.67753), 975.0, Double.NaN);
      assertEquals(231.81420353847918, colorCieLuv0.L, 0.01);
      assertEquals(Double.NaN, colorCieLuv0.v, 0.01);
      assertEquals(Double.NaN, colorCieLuv0.u, 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ColorXyz colorXyz0 = ColorConversions.convertCIELabtoXYZ(32.303, 128.843315811, 32.303);
      assertEquals(1.8030980821940095, colorXyz0.Z, 0.01);
      assertEquals(29.113576080746263, colorXyz0.X, 0.01);
      assertEquals(7.22018534957659, colorXyz0.Y, 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ColorXyz colorXyz0 = ColorConversions.convertCIELuvtoXYZ(152.79323048967973, 100.0, 240.0);
      assertEquals((-69.00485892220529), colorXyz0.Z, 0.01);
      assertEquals(308.09958096488765, colorXyz0.Y, 0.01);
      assertEquals(292.0198893626468, colorXyz0.X, 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ColorXyz colorXyz0 = ColorConversions.convertRGBtoXYZ(904);
      assertEquals(23.4074664160565, colorXyz0.Z, 0.01);
      assertEquals(1.842078472527097, colorXyz0.Y, 0.01);
      assertEquals(4.474955387291153, colorXyz0.X, 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ColorDin99Lab colorDin99Lab0 = ColorConversions.convertCIELabToDIN99oLab(0.8660099572828743, 0.0, 0.8660099572828743);
      assertEquals(1.0239021347110893, colorDin99Lab0.L99, 0.01);
      assertEquals(0.09730134891000475, colorDin99Lab0.a99, 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ColorDin99Lab colorDin99Lab0 = ColorConversions.convertCIELabToDIN99oLab(1.0, 21.26, (-1953.2372));
      assertEquals((-7.284232614652997), colorDin99Lab0.a99, 0.01);
      assertEquals(1.1820134903166768, colorDin99Lab0.L99, 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ColorCieLch colorCieLch0 = ColorConversions.convertCIELabtoCIELCH((-2439.0), 0.6666666666666666, 0.6666666666666666);
      assertEquals(0.9428090415820634, colorCieLch0.C, 0.01);
      assertEquals(45.0, colorCieLch0.h, 0.01);
      assertEquals((-2439.0), colorCieLch0.L, 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ColorHsv colorHsv0 = ColorHsv.GREEN;
      int int0 = ColorConversions.convertHSVtoRGB(colorHsv0);
      assertEquals((-65281), int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = ColorConversions.convertHSVtoRGB(0.7254901960784313, 2334.74245, (double) 2146059904);
      assertEquals((-16711681), int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = ColorConversions.convertHSVtoRGB(0.4235294117647059, (double) 508, (double) (-256));
      assertEquals((-65281), int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = ColorConversions.convertHSVtoRGB(1.0, 99.3095907157356, 93.3599680575118);
      assertEquals((-65536), int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = ColorConversions.convertHSVtoRGB(0.0, 0.0, 0.5423548891805353);
      assertEquals((-7697782), int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ColorHsv colorHsv0 = ColorConversions.convertRGBtoHSV((-16777216));
      assertEquals(0.0, colorHsv0.V, 0.01);
      assertEquals(0.0, colorHsv0.S, 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ColorHsv colorHsv0 = ColorConversions.convertRGBtoHSV((-44191468));
      int int0 = ColorConversions.convertHSVtoRGB(colorHsv0);
      assertEquals((-10637036), int0);
      assertEquals(0.2558386411889597, colorHsv0.H, 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ColorHsv colorHsv0 = ColorConversions.convertRGBtoHSV(255);
      assertEquals(1.0, colorHsv0.S, 0.01);
      assertEquals(1.0, colorHsv0.V, 0.01);
      assertEquals(0.6666666666666666, colorHsv0.H, 0.01);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ColorHsv colorHsv0 = ColorConversions.convertRGBtoHSV(1776365103);
      assertEquals(0.9990689013035382, colorHsv0.H, 0.01);
      assertEquals(0.8823529411764706, colorHsv0.V, 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ColorHsl colorHsl0 = ColorConversions.convertRGBtoHSL((-18839654));
      int int0 = ColorConversions.convertHSLtoRGB(colorHsl0);
      assertEquals((-2062438), int0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ColorHsl colorHsl0 = ColorConversions.convertRGBtoHSL(0);
      assertEquals(0.0, colorHsl0.L, 0.01);
      assertEquals(0.0, colorHsl0.H, 0.01);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ColorHsl colorHsl0 = ColorConversions.convertRGBtoHSL(31);
      assertEquals(0.6666666666666667, colorHsl0.H, 0.01);
      assertEquals(1.0, colorHsl0.S, 0.01);
      assertEquals(0.060784313725490195, colorHsl0.L, 0.01);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ColorHsl colorHsl0 = ColorConversions.convertRGBtoHSL(885713291);
      assertEquals(0.6811594202898549, colorHsl0.S, 0.01);
      assertEquals(0.22163120567375894, colorHsl0.H, 0.01);
      assertEquals(0.7294117647058823, colorHsl0.L, 0.01);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ColorCmy colorCmy0 = ColorConversions.convertCMYKtoCMY((-1681.4331079526576), (-6962.780646008141), (-6962.780646008141), (-6962.780646008141));
      ColorCmyk colorCmyk0 = ColorConversions.convertCMYtoCMYK(colorCmy0);
      assertEquals(0.0, colorCmyk0.Y, 0.01);
      assertEquals(0.7584023401258222, colorCmyk0.C, 0.01);
      assertEquals(0.0, colorCmyk0.M, 0.01);
      assertEquals((-4.849423988571756E7), colorCmyk0.K, 0.01);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ColorCmy colorCmy0 = ColorConversions.convertRGBtoCMY(2146059904);
      ColorCmyk colorCmyk0 = ColorConversions.convertCMYtoCMYK(colorCmy0);
      assertEquals(0.08235294117647063, colorCmyk0.K, 0.01);
      assertEquals(0.0, colorCmyk0.C, 0.01);
      assertEquals(0.452991452991453, colorCmyk0.Y, 0.01);
      assertEquals(0.7008547008547008, colorCmyk0.M, 0.01);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ColorCmy colorCmy0 = ColorCmy.BLUE;
      ColorCmyk colorCmyk0 = ColorConversions.convertCMYtoCMYK(colorCmy0);
      assertEquals(100.0, colorCmyk0.C, 0.01);
      assertEquals(0.0, colorCmyk0.Y, 0.01);
      assertEquals(0.0, colorCmyk0.K, 0.01);
      assertEquals(100.0, colorCmyk0.M, 0.01);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ColorHunterLab colorHunterLab0 = ColorConversions.convertXYZtoHunterLab(0.0, 0.0, 0.0);
      assertEquals(0.0, colorHunterLab0.L, 0.01);
      assertEquals(0.0, colorHunterLab0.a, 0.01);
      assertEquals(0.0, colorHunterLab0.b, 0.01);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ColorHunterLab colorHunterLab0 = ColorHunterLab.BLUE;
      ColorXyz colorXyz0 = ColorConversions.convertHunterLabtoXYZ(colorHunterLab0);
      assertEquals(95.04973587451511, colorXyz0.Z, 0.01);
      assertEquals(18.049941316526613, colorXyz0.X, 0.01);
      assertEquals(7.219969000000002, colorXyz0.Y, 0.01);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ColorCmyk colorCmyk0 = ColorCmyk.BLACK;
      ColorCmy colorCmy0 = ColorConversions.convertCMYKtoCMY(colorCmyk0);
      assertEquals(100.0, colorCmy0.Y, 0.01);
      assertEquals(100.0, colorCmy0.C, 0.01);
      assertEquals(100.0, colorCmy0.M, 0.01);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ColorDin99Lab colorDin99Lab0 = ColorConversions.convertCIELabToDIN99bLab(206.0297, 0.0, 100.0);
      ColorCieLab colorCieLab0 = ColorConversions.convertDIN99oLabToCIELab(colorDin99Lab0);
      assertEquals(42.89799815368052, colorCieLab0.b, 0.01);
      assertEquals(13.071658002992566, colorCieLab0.a, 0.01);
      assertEquals(167.67417208935592, colorCieLab0.L, 0.01);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ColorCieLab colorCieLab0 = ColorCieLab.WHITE;
      ColorDin99Lab colorDin99Lab0 = ColorConversions.convertCIELabToDIN99oLab(colorCieLab0);
      assertEquals(0.0, colorDin99Lab0.b99, 0.01);
      assertEquals(0.0, colorDin99Lab0.a99, 0.01);
      assertEquals(100.0, colorDin99Lab0.L99, 0.01);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ColorCmy colorCmy0 = ColorConversions.convertRGBtoCMY(0);
      ColorCmyk colorCmyk0 = ColorConversions.convertCMYtoCMYK(colorCmy0);
      assertEquals(0.0, colorCmyk0.C, 0.01);
      assertEquals(1.0, colorCmy0.M, 0.01);
      assertEquals(1.0, colorCmy0.C, 0.01);
      assertEquals(0.0, colorCmyk0.Y, 0.01);
      assertEquals(1.0, colorCmy0.Y, 0.01);
      assertEquals(0.0, colorCmyk0.M, 0.01);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ColorXyz colorXyz0 = ColorConversions.convertRGBtoXYZ(2129126759);
      ColorHunterLab colorHunterLab0 = ColorConversions.convertXYZtoHunterLab(colorXyz0);
      assertEquals(86.02822837025228, colorHunterLab0.L, 0.01);
      assertEquals((-18.950346956539207), colorHunterLab0.a, 0.01);
      assertEquals(43.835305440354745, colorHunterLab0.b, 0.01);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ColorCieLab colorCieLab0 = ColorConversions.convertDIN99bLabToCIELab(0.0, 0.0, 13.029619691132426);
      ColorXyz colorXyz0 = ColorConversions.convertCIELabtoXYZ(colorCieLab0);
      int int0 = ColorConversions.convertXYZtoRGB(colorXyz0);
      assertEquals((-1.7012065390809779), colorXyz0.Z, 0.01);
      assertEquals((-0.17033025952916997), colorXyz0.X, 0.01);
      assertEquals(0.0, colorXyz0.Y, 0.01);
      assertEquals((-16121088), int0);
      assertEquals((-6.977432392254617), colorCieLab0.a, 0.01);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      int int0 = ColorConversions.convertCMYKtoRGB_Adobe((-16777216), (-16777216), (-16777216), 1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      ColorCieLab colorCieLab0 = ColorCieLab.WHITE;
      ColorCieLch colorCieLch0 = ColorConversions.convertCIELabtoCIELCH(colorCieLab0);
      ColorCieLab colorCieLab1 = ColorConversions.convertCIELCHtoCIELab(colorCieLch0);
      assertEquals(360.0, colorCieLch0.h, 0.01);
      assertEquals(0.0, colorCieLab1.a, 0.01);
      assertEquals(-0.0, colorCieLab1.b, 0.01);
      assertEquals(100.0, colorCieLab1.L, 0.01);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      double double0 = ColorConversions.radian_2_degree(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      int int0 = ColorConversions.convertCMYKtoRGB(1, 1, 1, 1);
      assertEquals((-131587), int0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      ColorCieLab colorCieLab0 = ColorConversions.convertDIN99oLabToCIELab(1146.5917480562641, 395832.99480586505, 1146.5917480562641);
      ColorDin99Lab colorDin99Lab0 = ColorConversions.convertCIELabToDIN99bLab(colorCieLab0);
      ColorCieLab colorCieLab1 = ColorConversions.convertDIN99bLabToCIELab(colorDin99Lab0);
      assertEquals(10931.044479509923, colorCieLab1.L, 0.01);
      assertEquals(Double.NaN, colorCieLab0.b, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, colorCieLab0.a, 0.01);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      int int0 = ColorConversions.convertCIELabtoARGBTest(0, 1709, (-244));
      assertEquals((-65281), int0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      ColorXyz colorXyz0 = ColorConversions.convertHunterLabtoXYZ((-2160.954859010996), 1944.4567962939, 1944.4567962939);
      ColorCieLuv colorCieLuv0 = ColorConversions.convertXYZtoCIELuv(colorXyz0);
      ColorXyz colorXyz1 = ColorConversions.convertCIELuvtoXYZ(colorCieLuv0);
      assertEquals(22241.66368407506, colorXyz1.X, 0.01);
      assertEquals(126002.5551352086, colorXyz1.Z, 0.01);
      assertEquals(46697.25902683232, colorXyz1.Y, 0.01);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      ColorCieLab colorCieLab0 = ColorConversions.convertDIN99oLabToCIELab(0.0, 0.0, 718.72956);
      ColorXyz colorXyz0 = ColorConversions.convertCIELabtoXYZ(colorCieLab0);
      ColorCieLab colorCieLab1 = ColorConversions.convertXYZtoCIELab(colorXyz0);
      assertEquals((-4.1124057503625125E13), colorXyz0.Z, 0.01);
      assertTrue(colorCieLab1.equals((Object)colorCieLab0));
      assertEquals((-4.072995931271622E13), colorCieLab0.a, 0.01);
      assertEquals(0.0, colorXyz0.Y, 0.01);
  }
}
