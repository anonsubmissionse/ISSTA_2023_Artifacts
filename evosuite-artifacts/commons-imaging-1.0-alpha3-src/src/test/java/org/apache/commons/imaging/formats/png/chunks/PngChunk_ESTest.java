/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 00:02:57 GMT 2022
 */

package org.apache.commons.imaging.formats.png.chunks;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Arrays;
import org.apache.commons.imaging.formats.png.chunks.PngChunk;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PngChunk_ESTest extends PngChunk_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      PngChunk pngChunk0 = new PngChunk(485, 0, 0, byteArray0);
      pngChunk0.getDataStream();
      assertEquals(0, pngChunk0.crc);
      assertEquals(0, pngChunk0.chunkType);
      assertEquals(485, pngChunk0.length);
      assertFalse(pngChunk0.safeToCopy);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      PngChunk pngChunk0 = new PngChunk(0, (-562), (-562), byteArray0);
      pngChunk0.getBytes();
      assertTrue(pngChunk0.reserved);
      assertFalse(pngChunk0.safeToCopy);
      assertEquals((-562), pngChunk0.crc);
      assertEquals(0, pngChunk0.length);
      assertEquals((-562), pngChunk0.chunkType);
      assertTrue(pngChunk0.ancillary);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PngChunk pngChunk0 = null;
      try {
        pngChunk0 = new PngChunk((-2590), (-2590), (-2590), (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.png.chunks.PngChunk", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      PngChunk pngChunk0 = new PngChunk(0, 0, 0, byteArray0);
      pngChunk0.getBytes();
      assertEquals(0, pngChunk0.crc);
      assertFalse(pngChunk0.safeToCopy);
      assertEquals(0, pngChunk0.chunkType);
      assertEquals(0, pngChunk0.length);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      PngChunk pngChunk0 = new PngChunk(24, 24, 2654, byteArray0);
      pngChunk0.getDataStream();
      assertEquals(2654, pngChunk0.crc);
      assertEquals(24, pngChunk0.chunkType);
      assertFalse(pngChunk0.safeToCopy);
      assertFalse(pngChunk0.reserved);
      assertEquals(24, pngChunk0.length);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      PngChunk pngChunk0 = new PngChunk(1, 0, 0, byteArray0);
      boolean[] booleanArray0 = pngChunk0.getPropertyBits();
      assertEquals(0, pngChunk0.crc);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(0, pngChunk0.chunkType);
      assertEquals(1, pngChunk0.length);
  }
}
