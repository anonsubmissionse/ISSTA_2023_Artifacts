/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 23:48:47 GMT 2022
 */

package org.apache.commons.imaging.common.itu_t4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.apache.commons.imaging.common.itu_t4.BitInputStreamFlexible;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BitInputStreamFlexible_ESTest extends BitInputStreamFlexible_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-81);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      BitInputStreamFlexible bitInputStreamFlexible0 = new BitInputStreamFlexible(sequenceInputStream0);
      int int0 = bitInputStreamFlexible0.readBits((byte)16);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(44800, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BitInputStreamFlexible bitInputStreamFlexible0 = new BitInputStreamFlexible(byteArrayInputStream0);
      bitInputStreamFlexible0.readBits(1);
      int int0 = bitInputStreamFlexible0.readBits(1);
      assertEquals(1L, bitInputStreamFlexible0.getBytesRead());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-28);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BitInputStreamFlexible bitInputStreamFlexible0 = new BitInputStreamFlexible(byteArrayInputStream0);
      bitInputStreamFlexible0.read();
      int int0 = bitInputStreamFlexible0.readBits(1);
      assertEquals(1L, bitInputStreamFlexible0.getBytesRead());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BitInputStreamFlexible bitInputStreamFlexible0 = new BitInputStreamFlexible(byteArrayInputStream0);
      int int0 = bitInputStreamFlexible0.read();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BitInputStreamFlexible bitInputStreamFlexible0 = new BitInputStreamFlexible(byteArrayInputStream0);
      bitInputStreamFlexible0.readBits(1);
      long long0 = bitInputStreamFlexible0.getBytesRead();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BitInputStreamFlexible bitInputStreamFlexible0 = new BitInputStreamFlexible((InputStream) null);
      // Undeclared exception!
      try { 
        bitInputStreamFlexible0.readBits(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.BitInputStreamFlexible", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BitInputStreamFlexible bitInputStreamFlexible0 = new BitInputStreamFlexible(sequenceInputStream0);
      try { 
        bitInputStreamFlexible0.readBits(1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // couldn't read bits
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.BitInputStreamFlexible", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BitInputStreamFlexible bitInputStreamFlexible0 = new BitInputStreamFlexible(sequenceInputStream0);
      try { 
        bitInputStreamFlexible0.readBits(32);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // couldn't read bits
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.BitInputStreamFlexible", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BitInputStreamFlexible bitInputStreamFlexible0 = new BitInputStreamFlexible(byteArrayInputStream0);
      try { 
        bitInputStreamFlexible0.readBits(1950);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // BitInputStream: unknown error
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.BitInputStreamFlexible", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BitInputStreamFlexible bitInputStreamFlexible0 = new BitInputStreamFlexible(byteArrayInputStream0);
      bitInputStreamFlexible0.readBits(1);
      try { 
        bitInputStreamFlexible0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // BitInputStream: incomplete bit read
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.BitInputStreamFlexible", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BitInputStreamFlexible bitInputStreamFlexible0 = new BitInputStreamFlexible(sequenceInputStream0);
      int int0 = bitInputStreamFlexible0.read();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BitInputStreamFlexible bitInputStreamFlexible0 = new BitInputStreamFlexible(sequenceInputStream0);
      bitInputStreamFlexible0.flushCache();
      assertEquals(0L, bitInputStreamFlexible0.getBytesRead());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BitInputStreamFlexible bitInputStreamFlexible0 = new BitInputStreamFlexible(sequenceInputStream0);
      long long0 = bitInputStreamFlexible0.getBytesRead();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BitInputStreamFlexible bitInputStreamFlexible0 = new BitInputStreamFlexible((InputStream) null);
      // Undeclared exception!
      try { 
        bitInputStreamFlexible0.read();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.BitInputStreamFlexible", e);
      }
  }
}
