/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 23:35:24 GMT 2022
 */

package org.apache.commons.imaging.palette;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.imaging.palette.ColorCount;
import org.apache.commons.imaging.palette.ColorGroup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ColorGroup_ESTest extends ColorGroup_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(16);
      linkedList0.add(colorCount0);
      ColorCount colorCount1 = new ColorCount(0);
      linkedList0.add(colorCount1);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, false);
      String string0 = colorGroup0.toString();
      assertEquals("{ColorGroup. minRed: 0, maxRed: 0, minGreen: 0, maxGreen: 0, minBlue: 0, maxBlue: 10, minAlpha: 0, maxAlpha: 0, maxDiff: 10, diffTotal: 16}", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount((-133));
      linkedList0.add(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, true);
      colorGroup0.maxAlpha = 0;
      String string0 = colorGroup0.toString();
      assertEquals("{ColorGroup. minRed: ff, maxRed: ff, minGreen: ff, maxGreen: ff, minBlue: 7b, maxBlue: 7b, minAlpha: ff, maxAlpha: 0, maxDiff: 0, diffTotal: 0}", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount((-2081));
      linkedList0.add(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, true);
      colorGroup0.minAlpha = (-639);
      String string0 = colorGroup0.toString();
      assertEquals("{ColorGroup. minRed: ff, maxRed: ff, minGreen: f7, maxGreen: f7, minBlue: df, maxBlue: df, minAlpha: fffffd81, maxAlpha: ff, maxDiff: 0, diffTotal: 0}", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount((-2128));
      linkedList0.add(colorCount0);
      ColorCount colorCount1 = new ColorCount(16);
      linkedList0.add(colorCount1);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, false);
      String string0 = colorGroup0.toString();
      assertEquals("{ColorGroup. minRed: 0, maxRed: ff, minGreen: 0, maxGreen: f7, minBlue: 10, maxBlue: b0, minAlpha: 0, maxAlpha: ff, maxDiff: ff, diffTotal: 917}", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount((-2081));
      colorCount0.count = (-2081);
      linkedList0.add(colorCount0);
      linkedList0.add(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, true);
      int int0 = colorGroup0.getMedianValue();
      assertEquals((-2081), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(Integer.MIN_VALUE);
      colorCount0.count = 1476;
      linkedList0.add(colorCount0);
      linkedList0.add(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, false);
      int int0 = colorGroup0.getMedianValue();
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(16);
      linkedList0.add(colorCount0);
      ColorCount colorCount1 = new ColorCount(0);
      linkedList0.add(colorCount1);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, false);
      boolean boolean0 = colorGroup0.contains(2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount((-2128));
      linkedList0.add(colorCount0);
      ColorCount colorCount1 = new ColorCount(16);
      linkedList0.add(colorCount1);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, false);
      boolean boolean0 = colorGroup0.contains((-659));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(26);
      linkedList0.add(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, false);
      colorCount0.count = (-5);
      int int0 = colorGroup0.getMedianValue();
      assertEquals(26, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(5509);
      linkedList0.add(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, true);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.retainAll(linkedList1);
      List<ColorCount> list0 = colorGroup0.getColorCounts();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(255);
      linkedList0.add(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, false);
      linkedList0.add((ColorCount) null);
      // Undeclared exception!
      try { 
        colorGroup0.getMedianValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.palette.ColorGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount((-2878));
      linkedList0.addLast(colorCount0);
      List<ColorCount> list0 = linkedList0.subList(0, 0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.retainAll(linkedList1);
      ColorGroup colorGroup0 = null;
      try {
        colorGroup0 = new ColorGroup(list0, false);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      linkedList0.add((ColorCount) null);
      ColorGroup colorGroup0 = null;
      try {
        colorGroup0 = new ColorGroup(linkedList0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.palette.ColorGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(Integer.MIN_VALUE);
      linkedList0.add(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, false);
      int int0 = colorGroup0.getMedianValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(Integer.MIN_VALUE);
      linkedList0.add(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, false);
      boolean boolean0 = colorGroup0.contains(Integer.MIN_VALUE);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount((-2128));
      linkedList0.add(colorCount0);
      ColorCount colorCount1 = new ColorCount(16);
      linkedList0.add(colorCount1);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, false);
      boolean boolean0 = colorGroup0.contains(4284);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount((-2128));
      linkedList0.add(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, false);
      boolean boolean0 = colorGroup0.contains((-659));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(16);
      linkedList0.add(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, false);
      colorGroup0.minGreen = 16;
      boolean boolean0 = colorGroup0.contains(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(26);
      boolean boolean0 = linkedList0.add(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, false);
      colorGroup0.maxRed = (-5);
      boolean boolean1 = colorGroup0.contains(0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(26);
      boolean boolean0 = linkedList0.add(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, false);
      boolean boolean1 = colorGroup0.contains((-5));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(Integer.MIN_VALUE);
      linkedList0.add(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, false);
      boolean boolean0 = colorGroup0.contains(128);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(255);
      linkedList0.add(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, false);
      boolean boolean0 = colorGroup0.contains(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount((-78));
      linkedList0.add(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, true);
      boolean boolean0 = colorGroup0.contains(255);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorGroup colorGroup0 = null;
      try {
        colorGroup0 = new ColorGroup(linkedList0, true);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // empty color_group
         //
         verifyException("org.apache.commons.imaging.palette.ColorGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount((-2128));
      linkedList0.add(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, false);
      List<ColorCount> list0 = colorGroup0.getColorCounts();
      assertEquals(1, list0.size());
  }
}
