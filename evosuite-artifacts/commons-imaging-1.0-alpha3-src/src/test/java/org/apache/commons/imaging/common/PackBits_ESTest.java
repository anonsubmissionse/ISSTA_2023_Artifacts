/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 23:22:19 GMT 2022
 */

package org.apache.commons.imaging.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.common.PackBits;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PackBits_ESTest extends PackBits_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PackBits packBits0 = new PackBits();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-61);
      byteArray0[3] = (byte) (-31);
      byte[] byteArray1 = packBits0.compress(byteArray0);
      assertEquals(7, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-61), (byte)0, (byte)0, (byte) (-31), (byte) (-2), (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PackBits packBits0 = new PackBits();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)115;
      byte[] byteArray1 = packBits0.compress(byteArray0);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)115, (byte) (-6), (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PackBits packBits0 = new PackBits();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byte[] byteArray1 = packBits0.decompress(byteArray0, (byte)1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PackBits packBits0 = new PackBits();
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-127);
      byte[] byteArray1 = packBits0.decompress(byteArray0, 35);
      byte[] byteArray2 = packBits0.compress(byteArray1);
      assertEquals(4, byteArray2.length);
      assertArrayEquals(new byte[] {(byte) (-127), (byte)0, (byte)0, (byte)0}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PackBits packBits0 = new PackBits();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)127;
      // Undeclared exception!
      try { 
        packBits0.decompress(byteArray0, (byte)127);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.imaging.common.PackBits", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PackBits packBits0 = new PackBits();
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = packBits0.decompress(byteArray0, 0);
      byte[] byteArray2 = packBits0.compress(byteArray1);
      assertNotSame(byteArray1, byteArray2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PackBits packBits0 = new PackBits();
      // Undeclared exception!
      try { 
        packBits0.decompress((byte[]) null, 128);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.PackBits", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PackBits packBits0 = new PackBits();
      // Undeclared exception!
      try { 
        packBits0.compress((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.PackBits", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PackBits packBits0 = new PackBits();
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byte[] byteArray1 = packBits0.compress(byteArray0);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte)1, (byte) (-3), (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte)127;
      PackBits packBits0 = new PackBits();
      byte[] byteArray1 = packBits0.compress(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-3), (byte)0, (byte)0, (byte)127, (byte) (-2), (byte)0}, byteArray1);
      assertEquals(6, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte)40;
      PackBits packBits0 = new PackBits();
      byte[] byteArray1 = packBits0.compress(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)2, (byte)40, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PackBits packBits0 = new PackBits();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-128);
      try { 
        packBits0.decompress(byteArray0, 135);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Packbits: -128
         //
         verifyException("org.apache.commons.imaging.common.PackBits", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PackBits packBits0 = new PackBits();
      byte[] byteArray0 = new byte[6];
      try { 
        packBits0.decompress(byteArray0, 976);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Tiff: Unpack bits source exhausted: 6, done + 3, expected + 976
         //
         verifyException("org.apache.commons.imaging.common.PackBits", e);
      }
  }
}
