/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 00:11:16 GMT 2022
 */

package org.apache.commons.imaging.formats.tiff.taginfos;

import org.junit.Test;
import static org.junit.Assert.*;
import java.nio.ByteOrder;
import org.apache.commons.imaging.formats.tiff.constants.TiffDirectoryType;
import org.apache.commons.imaging.formats.tiff.taginfos.TagInfoSBytes;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TagInfoSBytes_ESTest extends TagInfoSBytes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TiffDirectoryType tiffDirectoryType0 = TiffDirectoryType.TIFF_DIRECTORY_IFD2;
      TagInfoSBytes tagInfoSBytes0 = new TagInfoSBytes("Undefined", 1467, 1467, tiffDirectoryType0);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      byte[] byteArray0 = tagInfoSBytes0.encodeValue(byteOrder0, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TiffDirectoryType tiffDirectoryType0 = TiffDirectoryType.EXIF_DIRECTORY_EXIF_IFD;
      TagInfoSBytes tagInfoSBytes0 = new TagInfoSBytes("+Y'@+m2~@\"y>0wp!2yT", 6, (-1506), tiffDirectoryType0);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = tagInfoSBytes0.encodeValue(byteOrder0, byteArray0);
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TiffDirectoryType tiffDirectoryType0 = TiffDirectoryType.EXIF_DIRECTORY_EXIF_IFD;
      TagInfoSBytes tagInfoSBytes0 = new TagInfoSBytes("+Y'@+m2~@\"y>0wp!2yT", 6, (-1506), tiffDirectoryType0);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = tagInfoSBytes0.encodeValue(byteOrder0, byteArray0);
      assertSame(byteArray0, byteArray1);
  }
}
