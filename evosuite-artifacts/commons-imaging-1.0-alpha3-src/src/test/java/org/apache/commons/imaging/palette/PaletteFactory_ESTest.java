/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 23:02:14 GMT 2022
 */

package org.apache.commons.imaging.palette;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.awt.image.RescaleOp;
import java.util.Hashtable;
import org.apache.commons.imaging.palette.Palette;
import org.apache.commons.imaging.palette.PaletteFactory;
import org.apache.commons.imaging.palette.SimplePalette;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PaletteFactory_ESTest extends PaletteFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      assertEquals(3, PaletteFactory.COMPONENTS);
      assertNotNull(paletteFactory0);
      
      float[] floatArray0 = new float[4];
      floatArray0[3] = (float) 3;
      Hashtable<RenderingHints.Key, Object> hashtable0 = new Hashtable<RenderingHints.Key, Object>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      RenderingHints renderingHints0 = new RenderingHints(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, renderingHints0.size());
      assertTrue(renderingHints0.isEmpty());
      assertNotNull(renderingHints0);
      
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, renderingHints0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, renderingHints0.size());
      assertTrue(renderingHints0.isEmpty());
      assertEquals(4, rescaleOp0.getNumFactors());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 3.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertNotNull(rescaleOp0);
      
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(3, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(3, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinX());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertNotNull(bufferedImage0);
      
      BufferedImage bufferedImage1 = rescaleOp0.filter(bufferedImage0, bufferedImage0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, renderingHints0.size());
      assertTrue(renderingHints0.isEmpty());
      assertEquals(4, rescaleOp0.getNumFactors());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(3, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(3, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinX());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage1.getNumYTiles());
      assertEquals(3, bufferedImage1.getType());
      assertEquals(1, bufferedImage1.getNumXTiles());
      assertTrue(bufferedImage1.hasTileWriters());
      assertEquals(0.5F, bufferedImage1.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage1.getMinY());
      assertEquals(0, bufferedImage1.getMinX());
      assertEquals(3, bufferedImage1.getTileHeight());
      assertEquals(3, bufferedImage1.getTileWidth());
      assertEquals(3, bufferedImage1.getHeight());
      assertTrue(bufferedImage1.isAlphaPremultiplied());
      assertEquals(3, bufferedImage1.getTransparency());
      assertEquals(0, bufferedImage1.getMinTileY());
      assertEquals(0, bufferedImage1.getTileGridXOffset());
      assertEquals(0, bufferedImage1.getTileGridYOffset());
      assertEquals(0, bufferedImage1.getMinTileX());
      assertEquals(3, bufferedImage1.getWidth());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 3.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertNotNull(bufferedImage1);
      assertSame(bufferedImage0, bufferedImage1);
      assertSame(bufferedImage1, bufferedImage0);
      
      int int0 = paletteFactory0.countTransparentColors(bufferedImage0);
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(3, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(3, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinX());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(3, PaletteFactory.COMPONENTS);
      assertEquals(1, int0);
      assertSame(bufferedImage0, bufferedImage1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      assertEquals(3, PaletteFactory.COMPONENTS);
      assertNotNull(paletteFactory0);
      
      int[] intArray0 = new int[8];
      intArray0[1] = 3;
      int int0 = paletteFactory0.countTrasparentColors(intArray0);
      assertArrayEquals(new int[] {0, 3, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(3, PaletteFactory.COMPONENTS);
      assertEquals(2, int0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      assertEquals(3, PaletteFactory.COMPONENTS);
      assertNotNull(paletteFactory0);
      
      int[] intArray0 = new int[8];
      int int0 = paletteFactory0.countTrasparentColors(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(3, PaletteFactory.COMPONENTS);
      assertEquals(1, int0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      assertEquals(3, PaletteFactory.COMPONENTS);
      assertNotNull(paletteFactory0);
      
      BufferedImage bufferedImage0 = new BufferedImage(3, 2491, 3);
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2491, bufferedImage0.getHeight());
      assertEquals(3, bufferedImage0.getType());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(3, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2491, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(3, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertNotNull(bufferedImage0);
      
      boolean boolean0 = paletteFactory0.hasTransparency(bufferedImage0, 0);
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2491, bufferedImage0.getHeight());
      assertEquals(3, bufferedImage0.getType());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(3, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2491, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(3, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(3, PaletteFactory.COMPONENTS);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      assertEquals(3, PaletteFactory.COMPONENTS);
      assertNotNull(paletteFactory0);
      
      float[] floatArray0 = new float[4];
      floatArray0[3] = (float) 3;
      Hashtable<RenderingHints.Key, Object> hashtable0 = new Hashtable<RenderingHints.Key, Object>(3);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      RenderingHints renderingHints0 = new RenderingHints(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertTrue(renderingHints0.isEmpty());
      assertEquals(0, renderingHints0.size());
      assertNotNull(renderingHints0);
      
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, renderingHints0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertTrue(renderingHints0.isEmpty());
      assertEquals(0, renderingHints0.size());
      assertEquals(4, rescaleOp0.getNumFactors());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 3.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertNotNull(rescaleOp0);
      
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(3, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(3, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertTrue(bufferedImage0.hasTileWriters());
      assertNotNull(bufferedImage0);
      
      BufferedImage bufferedImage1 = rescaleOp0.filter(bufferedImage0, bufferedImage0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertTrue(renderingHints0.isEmpty());
      assertEquals(0, renderingHints0.size());
      assertEquals(4, rescaleOp0.getNumFactors());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(3, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(3, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertTrue(bufferedImage0.hasTileWriters());
      assertTrue(bufferedImage1.hasTileWriters());
      assertEquals(3, bufferedImage1.getType());
      assertEquals(0.5F, bufferedImage1.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage1.getMinX());
      assertEquals(0, bufferedImage1.getMinY());
      assertEquals(3, bufferedImage1.getHeight());
      assertEquals(1, bufferedImage1.getNumXTiles());
      assertEquals(3, bufferedImage1.getTileWidth());
      assertEquals(1, bufferedImage1.getNumYTiles());
      assertEquals(3, bufferedImage1.getWidth());
      assertEquals(0, bufferedImage1.getTileGridXOffset());
      assertTrue(bufferedImage1.isAlphaPremultiplied());
      assertEquals(3, bufferedImage1.getTileHeight());
      assertEquals(0, bufferedImage1.getMinTileY());
      assertEquals(0, bufferedImage1.getMinTileX());
      assertEquals(3, bufferedImage1.getTransparency());
      assertEquals(0, bufferedImage1.getTileGridYOffset());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 3.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertNotNull(bufferedImage1);
      assertSame(bufferedImage0, bufferedImage1);
      assertSame(bufferedImage1, bufferedImage0);
      
      boolean boolean0 = paletteFactory0.hasTransparency(bufferedImage0);
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(3, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(3, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(3, PaletteFactory.COMPONENTS);
      assertTrue(boolean0);
      assertSame(bufferedImage0, bufferedImage1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      assertEquals(3, PaletteFactory.COMPONENTS);
      assertNotNull(paletteFactory0);
      
      float[] floatArray0 = new float[4];
      floatArray0[1] = (float) 3;
      floatArray0[0] = (float) 3;
      floatArray0[3] = (float) 3;
      Hashtable<RenderingHints.Key, Object> hashtable0 = new Hashtable<RenderingHints.Key, Object>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      RenderingHints renderingHints0 = new RenderingHints(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertTrue(renderingHints0.isEmpty());
      assertEquals(0, renderingHints0.size());
      assertNotNull(renderingHints0);
      
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, renderingHints0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertTrue(renderingHints0.isEmpty());
      assertEquals(0, renderingHints0.size());
      assertEquals(4, rescaleOp0.getNumFactors());
      assertArrayEquals(new float[] {3.0F, 3.0F, 0.0F, 3.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertNotNull(rescaleOp0);
      
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(3, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTileWidth());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertNotNull(bufferedImage0);
      
      BufferedImage bufferedImage1 = rescaleOp0.filter(bufferedImage0, bufferedImage0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertTrue(renderingHints0.isEmpty());
      assertEquals(0, renderingHints0.size());
      assertEquals(4, rescaleOp0.getNumFactors());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(3, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTileWidth());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage1.getMinTileY());
      assertTrue(bufferedImage1.isAlphaPremultiplied());
      assertEquals(0, bufferedImage1.getTileGridYOffset());
      assertEquals(0, bufferedImage1.getMinTileX());
      assertEquals(3, bufferedImage1.getTransparency());
      assertEquals(3, bufferedImage1.getTileHeight());
      assertEquals(0.5F, bufferedImage1.getAccelerationPriority(), 0.01F);
      assertEquals(3, bufferedImage1.getType());
      assertTrue(bufferedImage1.hasTileWriters());
      assertEquals(0, bufferedImage1.getMinX());
      assertEquals(1, bufferedImage1.getNumXTiles());
      assertEquals(0, bufferedImage1.getMinY());
      assertEquals(3, bufferedImage1.getTileWidth());
      assertEquals(3, bufferedImage1.getHeight());
      assertEquals(1, bufferedImage1.getNumYTiles());
      assertEquals(3, bufferedImage1.getWidth());
      assertEquals(0, bufferedImage1.getTileGridXOffset());
      assertArrayEquals(new float[] {3.0F, 3.0F, 0.0F, 3.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertNotNull(bufferedImage1);
      assertSame(bufferedImage0, bufferedImage1);
      assertSame(bufferedImage1, bufferedImage0);
      
      boolean boolean0 = paletteFactory0.isGrayscale(bufferedImage1);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertTrue(renderingHints0.isEmpty());
      assertEquals(0, renderingHints0.size());
      assertEquals(4, rescaleOp0.getNumFactors());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(3, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTileWidth());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage1.getMinTileY());
      assertTrue(bufferedImage1.isAlphaPremultiplied());
      assertEquals(0, bufferedImage1.getTileGridYOffset());
      assertEquals(0, bufferedImage1.getMinTileX());
      assertEquals(3, bufferedImage1.getTransparency());
      assertEquals(3, bufferedImage1.getTileHeight());
      assertEquals(0.5F, bufferedImage1.getAccelerationPriority(), 0.01F);
      assertEquals(3, bufferedImage1.getType());
      assertTrue(bufferedImage1.hasTileWriters());
      assertEquals(0, bufferedImage1.getMinX());
      assertEquals(1, bufferedImage1.getNumXTiles());
      assertEquals(0, bufferedImage1.getMinY());
      assertEquals(3, bufferedImage1.getTileWidth());
      assertEquals(3, bufferedImage1.getHeight());
      assertEquals(1, bufferedImage1.getNumYTiles());
      assertEquals(3, bufferedImage1.getWidth());
      assertEquals(0, bufferedImage1.getTileGridXOffset());
      assertArrayEquals(new float[] {3.0F, 3.0F, 0.0F, 3.0F}, floatArray0, 0.01F);
      assertEquals(3, PaletteFactory.COMPONENTS);
      assertFalse(boolean0);
      assertEquals(4, floatArray0.length);
      assertSame(bufferedImage0, bufferedImage1);
      assertSame(bufferedImage1, bufferedImage0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      assertEquals(3, PaletteFactory.COMPONENTS);
      assertNotNull(paletteFactory0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 3;
      floatArray0[3] = (float) 3;
      Hashtable<RenderingHints.Key, Object> hashtable0 = new Hashtable<RenderingHints.Key, Object>(3);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      RenderingHints renderingHints0 = new RenderingHints(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals(0, renderingHints0.size());
      assertTrue(renderingHints0.isEmpty());
      assertNotNull(renderingHints0);
      
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, renderingHints0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals(0, renderingHints0.size());
      assertTrue(renderingHints0.isEmpty());
      assertEquals(4, rescaleOp0.getNumFactors());
      assertArrayEquals(new float[] {3.0F, 0.0F, 0.0F, 3.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertNotNull(rescaleOp0);
      
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      assertEquals(3, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getTileWidth());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertNotNull(bufferedImage0);
      
      BufferedImage bufferedImage1 = rescaleOp0.filter(bufferedImage0, bufferedImage0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals(0, renderingHints0.size());
      assertTrue(renderingHints0.isEmpty());
      assertEquals(4, rescaleOp0.getNumFactors());
      assertEquals(3, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getTileWidth());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage1.getMinTileY());
      assertTrue(bufferedImage1.isAlphaPremultiplied());
      assertEquals(1, bufferedImage1.getNumYTiles());
      assertEquals(3, bufferedImage1.getTileHeight());
      assertEquals(3, bufferedImage1.getWidth());
      assertEquals(3, bufferedImage1.getTransparency());
      assertEquals(0, bufferedImage1.getTileGridYOffset());
      assertEquals(0, bufferedImage1.getMinTileX());
      assertEquals(3, bufferedImage1.getType());
      assertEquals(0, bufferedImage1.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage1.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage1.hasTileWriters());
      assertEquals(3, bufferedImage1.getHeight());
      assertEquals(3, bufferedImage1.getTileWidth());
      assertEquals(0, bufferedImage1.getMinX());
      assertEquals(1, bufferedImage1.getNumXTiles());
      assertEquals(0, bufferedImage1.getMinY());
      assertArrayEquals(new float[] {3.0F, 0.0F, 0.0F, 3.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertNotNull(bufferedImage1);
      assertSame(bufferedImage0, bufferedImage1);
      assertSame(bufferedImage1, bufferedImage0);
      
      boolean boolean0 = paletteFactory0.isGrayscale(bufferedImage1);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals(0, renderingHints0.size());
      assertTrue(renderingHints0.isEmpty());
      assertEquals(4, rescaleOp0.getNumFactors());
      assertEquals(3, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getTileWidth());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage1.getMinTileY());
      assertTrue(bufferedImage1.isAlphaPremultiplied());
      assertEquals(1, bufferedImage1.getNumYTiles());
      assertEquals(3, bufferedImage1.getTileHeight());
      assertEquals(3, bufferedImage1.getWidth());
      assertEquals(3, bufferedImage1.getTransparency());
      assertEquals(0, bufferedImage1.getTileGridYOffset());
      assertEquals(0, bufferedImage1.getMinTileX());
      assertEquals(3, bufferedImage1.getType());
      assertEquals(0, bufferedImage1.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage1.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage1.hasTileWriters());
      assertEquals(3, bufferedImage1.getHeight());
      assertEquals(3, bufferedImage1.getTileWidth());
      assertEquals(0, bufferedImage1.getMinX());
      assertEquals(1, bufferedImage1.getNumXTiles());
      assertEquals(0, bufferedImage1.getMinY());
      assertArrayEquals(new float[] {3.0F, 0.0F, 0.0F, 3.0F}, floatArray0, 0.01F);
      assertEquals(3, PaletteFactory.COMPONENTS);
      assertFalse(boolean0);
      assertEquals(4, floatArray0.length);
      assertSame(bufferedImage0, bufferedImage1);
      assertSame(bufferedImage1, bufferedImage0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      assertEquals(3, PaletteFactory.COMPONENTS);
      assertNotNull(paletteFactory0);
      
      BufferedImage bufferedImage0 = new BufferedImage(1, 1, 1);
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertNotNull(bufferedImage0);
      
      boolean boolean0 = paletteFactory0.isGrayscale(bufferedImage0);
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, PaletteFactory.COMPONENTS);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      assertEquals(3, PaletteFactory.COMPONENTS);
      assertNotNull(paletteFactory0);
      
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(3, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(3, bufferedImage0.getTileWidth());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(3, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertNotNull(bufferedImage0);
      
      SimplePalette simplePalette0 = paletteFactory0.makeExactRgbPaletteSimple(bufferedImage0, 1);
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(3, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(3, bufferedImage0.getTileWidth());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(3, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, simplePalette0.length());
      assertEquals(3, PaletteFactory.COMPONENTS);
      assertNotNull(simplePalette0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      assertEquals(3, PaletteFactory.COMPONENTS);
      assertNotNull(paletteFactory0);
      
      BufferedImage bufferedImage0 = new BufferedImage(1, 1, 1);
      assertEquals(1, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertNotNull(bufferedImage0);
      
      // Undeclared exception!
      paletteFactory0.makeQuantizedRgbPalette(bufferedImage0, 250);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      assertEquals(3, PaletteFactory.COMPONENTS);
      assertNotNull(paletteFactory0);
      
      BufferedImage bufferedImage0 = new BufferedImage(402, 46, 3);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(3, bufferedImage0.getType());
      assertEquals(46, bufferedImage0.getTileHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(402, bufferedImage0.getWidth());
      assertEquals(46, bufferedImage0.getHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(402, bufferedImage0.getTileWidth());
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertNotNull(bufferedImage0);
      
      // Undeclared exception!
      paletteFactory0.makeQuantizedRgbaPalette(bufferedImage0, false, 3);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      assertEquals(3, PaletteFactory.COMPONENTS);
      assertNotNull(paletteFactory0);
      
      // Undeclared exception!
      try { 
        paletteFactory0.makeQuantizedRgbaPalette((BufferedImage) null, false, (-247));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      assertEquals(3, PaletteFactory.COMPONENTS);
      assertNotNull(paletteFactory0);
      
      // Undeclared exception!
      try { 
        paletteFactory0.makeQuantizedRgbPalette((BufferedImage) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.palette.PaletteFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      assertEquals(3, PaletteFactory.COMPONENTS);
      assertNotNull(paletteFactory0);
      
      // Undeclared exception!
      try { 
        paletteFactory0.makeExactRgbPaletteSimple((BufferedImage) null, (-173));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.palette.PaletteFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      assertEquals(3, PaletteFactory.COMPONENTS);
      assertNotNull(paletteFactory0);
      
      BufferedImage bufferedImage0 = new BufferedImage(16777215, 3, 3);
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinX());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(16777215, bufferedImage0.getTileWidth());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(3, bufferedImage0.getType());
      assertEquals(16777215, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertNotNull(bufferedImage0);
      
      // Undeclared exception!
      paletteFactory0.isGrayscale(bufferedImage0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      assertEquals(3, PaletteFactory.COMPONENTS);
      assertNotNull(paletteFactory0);
      
      // Undeclared exception!
      try { 
        paletteFactory0.isGrayscale((BufferedImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.palette.PaletteFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      assertEquals(3, PaletteFactory.COMPONENTS);
      assertNotNull(paletteFactory0);
      
      BufferedImage bufferedImage0 = new BufferedImage(16777215, 3, 3);
      assertEquals(3, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(16777215, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(16777215, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertNotNull(bufferedImage0);
      
      // Undeclared exception!
      paletteFactory0.hasTransparency(bufferedImage0, (int) (byte) (-91));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      assertEquals(3, PaletteFactory.COMPONENTS);
      assertNotNull(paletteFactory0);
      
      // Undeclared exception!
      try { 
        paletteFactory0.hasTransparency((BufferedImage) null, (-1646));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      assertEquals(3, PaletteFactory.COMPONENTS);
      assertNotNull(paletteFactory0);
      
      // Undeclared exception!
      try { 
        paletteFactory0.hasTransparency((BufferedImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      assertEquals(3, PaletteFactory.COMPONENTS);
      assertNotNull(paletteFactory0);
      
      // Undeclared exception!
      try { 
        paletteFactory0.countTrasparentColors((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.palette.PaletteFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      BufferedImage bufferedImage0 = new BufferedImage(16777215, 3, 3);
      // Undeclared exception!
      paletteFactory0.countTransparentColors(bufferedImage0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      // Undeclared exception!
      try { 
        paletteFactory0.countTransparentColors((BufferedImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.palette.PaletteFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      BufferedImage bufferedImage0 = new BufferedImage(3, 2491, 3);
      boolean boolean0 = paletteFactory0.hasTransparency(bufferedImage0, 2491);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      BufferedImage bufferedImage0 = new BufferedImage(1, 1, 1);
      int int0 = paletteFactory0.countTransparentColors(bufferedImage0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      int int0 = paletteFactory0.countTransparentColors(bufferedImage0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      int[] intArray0 = new int[0];
      int int0 = paletteFactory0.countTrasparentColors(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      int[] intArray0 = new int[6];
      intArray0[0] = 3;
      int int0 = paletteFactory0.countTrasparentColors(intArray0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      int[] intArray0 = new int[8];
      intArray0[0] = 3;
      intArray0[1] = (-1769);
      intArray0[2] = (-1769);
      intArray0[3] = 3;
      intArray0[4] = (-1769);
      intArray0[5] = (-1769);
      intArray0[6] = (-1769);
      intArray0[7] = (-1769);
      int int0 = paletteFactory0.countTrasparentColors(intArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      BufferedImage bufferedImage0 = new BufferedImage(1, 1, 1);
      boolean boolean0 = paletteFactory0.hasTransparency(bufferedImage0, 10);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      float[] floatArray0 = new float[4];
      floatArray0[2] = (float) 3;
      floatArray0[3] = (float) 3;
      Hashtable<RenderingHints.Key, Object> hashtable0 = new Hashtable<RenderingHints.Key, Object>(3);
      RenderingHints renderingHints0 = new RenderingHints(hashtable0);
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, renderingHints0);
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      BufferedImage bufferedImage1 = rescaleOp0.filter(bufferedImage0, bufferedImage0);
      boolean boolean0 = paletteFactory0.isGrayscale(bufferedImage1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      float[] floatArray0 = new float[4];
      floatArray0[1] = 3169.45F;
      floatArray0[3] = (float) 3;
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, (RenderingHints) null);
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      rescaleOp0.filter(bufferedImage0, bufferedImage0);
      boolean boolean0 = paletteFactory0.isGrayscale(bufferedImage0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      BufferedImage bufferedImage0 = new BufferedImage(10, 46, 3);
      SimplePalette simplePalette0 = paletteFactory0.makeExactRgbPaletteSimple(bufferedImage0, 0);
      assertNull(simplePalette0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      BufferedImage bufferedImage0 = new BufferedImage(10, 46, 3);
      SimplePalette simplePalette0 = paletteFactory0.makeExactRgbPaletteSimple(bufferedImage0, 16777215);
      assertNotNull(simplePalette0);
      assertEquals(1, simplePalette0.length());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      BufferedImage bufferedImage0 = new BufferedImage(10, 46, 3);
      Palette palette0 = paletteFactory0.makeQuantizedRgbaPalette(bufferedImage0, false, 3);
      assertEquals(1, palette0.length());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      Palette palette0 = paletteFactory0.makeQuantizedRgbaPalette(bufferedImage0, true, 3);
      assertEquals(1, palette0.length());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      float[] floatArray0 = new float[4];
      floatArray0[1] = 3169.45F;
      floatArray0[3] = (float) 3;
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, (RenderingHints) null);
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      rescaleOp0.filter(bufferedImage0, bufferedImage0);
      // Undeclared exception!
      paletteFactory0.makeQuantizedRgbPalette(bufferedImage0, 3);
  }
}
