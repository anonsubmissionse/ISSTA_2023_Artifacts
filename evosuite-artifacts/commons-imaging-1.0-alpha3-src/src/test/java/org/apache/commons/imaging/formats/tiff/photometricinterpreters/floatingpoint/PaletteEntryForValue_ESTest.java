/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 23:44:34 GMT 2022
 */

package org.apache.commons.imaging.formats.tiff.photometricinterpreters.floatingpoint;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import org.apache.commons.imaging.formats.tiff.photometricinterpreters.floatingpoint.PaletteEntryForValue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PaletteEntryForValue_ESTest extends PaletteEntryForValue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Color color0 = Color.LIGHT_GRAY;
      PaletteEntryForValue paletteEntryForValue0 = new PaletteEntryForValue(1950.7F, color0);
      Color color1 = paletteEntryForValue0.getColor((-1.0F));
      assertNull(color1);
      assertEquals(1950.7F, paletteEntryForValue0.getUpperBound(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Color color0 = Color.BLACK;
      PaletteEntryForValue paletteEntryForValue0 = new PaletteEntryForValue((-1667.6129F), color0);
      int int0 = paletteEntryForValue0.getARGB(1168.0F);
      assertEquals(0, int0);
      assertEquals((-1667.6129F), paletteEntryForValue0.getLowerBound(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Color color0 = Color.LIGHT_GRAY;
      PaletteEntryForValue paletteEntryForValue0 = new PaletteEntryForValue(0.0F, color0);
      boolean boolean0 = paletteEntryForValue0.isCovered(3557.09F);
      assertFalse(boolean0);
      assertEquals(0.0F, paletteEntryForValue0.getLowerBound(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Color color0 = Color.white;
      PaletteEntryForValue paletteEntryForValue0 = new PaletteEntryForValue(0.0F, color0);
      float float0 = paletteEntryForValue0.getUpperBound();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Color color0 = Color.BLACK;
      PaletteEntryForValue paletteEntryForValue0 = new PaletteEntryForValue((-1667.6129F), color0);
      float float0 = paletteEntryForValue0.getUpperBound();
      assertEquals((-1667.6129F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Color color0 = new Color(0.0F, 0.0F, 0.0F, 0.0F);
      PaletteEntryForValue paletteEntryForValue0 = new PaletteEntryForValue(0.0F, color0);
      float float0 = paletteEntryForValue0.getLowerBound();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Color color0 = Color.BLACK;
      PaletteEntryForValue paletteEntryForValue0 = new PaletteEntryForValue((-4356.1475F), color0);
      float float0 = paletteEntryForValue0.getLowerBound();
      assertEquals((-4356.1475F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Color color0 = new Color(0.0F, 0.0F, 0.0F, 0.0F);
      PaletteEntryForValue paletteEntryForValue0 = new PaletteEntryForValue(0.0F, color0);
      Color color1 = paletteEntryForValue0.getColor(0.0F);
      assertEquals(0.0F, paletteEntryForValue0.getLowerBound(), 0.01F);
      assertNotNull(color1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Color color0 = Color.cyan;
      PaletteEntryForValue paletteEntryForValue0 = new PaletteEntryForValue((-3738.01F), color0);
      Color color1 = paletteEntryForValue0.getColor((-3738.01F));
      assertNotNull(color1);
      assertEquals((-3738.01F), paletteEntryForValue0.getUpperBound(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Color color0 = new Color(1, true);
      PaletteEntryForValue paletteEntryForValue0 = new PaletteEntryForValue(1.0F, color0);
      Color color1 = paletteEntryForValue0.getColor(1);
      assertNotNull(color1);
      assertEquals(1.0F, paletteEntryForValue0.getUpperBound(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Color color0 = new Color(1, true);
      PaletteEntryForValue paletteEntryForValue0 = new PaletteEntryForValue(1.0F, color0);
      int int0 = paletteEntryForValue0.getARGB(1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Color color0 = Color.getHSBColor((-1.0F), 1.0F, (-2225.5244F));
      PaletteEntryForValue paletteEntryForValue0 = new PaletteEntryForValue(1.0F, color0);
      Color color1 = paletteEntryForValue0.getColor(1856.2032F);
      assertNull(color1);
      assertEquals(1.0F, paletteEntryForValue0.getLowerBound(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Color color0 = Color.RED;
      PaletteEntryForValue paletteEntryForValue0 = new PaletteEntryForValue(1116.879F, color0);
      Color color1 = paletteEntryForValue0.getColor(1116.879F);
      assertNotNull(color1);
      assertEquals(1116.879F, paletteEntryForValue0.getUpperBound(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Color color0 = Color.lightGray;
      PaletteEntryForValue paletteEntryForValue0 = new PaletteEntryForValue(10.48F, color0);
      int int0 = paletteEntryForValue0.getARGB(10.48F);
      assertEquals((-4144960), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Color color0 = Color.RED;
      PaletteEntryForValue paletteEntryForValue0 = new PaletteEntryForValue(1116.879F, color0);
      int int0 = paletteEntryForValue0.getARGB(298.0F);
      assertEquals(0, int0);
      assertEquals(1116.879F, paletteEntryForValue0.getUpperBound(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Color color0 = Color.RED;
      PaletteEntryForValue paletteEntryForValue0 = new PaletteEntryForValue(1116.879F, color0);
      boolean boolean0 = paletteEntryForValue0.isCovered(298.0F);
      assertFalse(boolean0);
      assertEquals(1116.879F, paletteEntryForValue0.getUpperBound(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Color color0 = Color.RED;
      PaletteEntryForValue paletteEntryForValue0 = new PaletteEntryForValue(1116.879F, color0);
      boolean boolean0 = paletteEntryForValue0.isCovered(1116.879F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PaletteEntryForValue paletteEntryForValue0 = null;
      try {
        paletteEntryForValue0 = new PaletteEntryForValue(3447.8F, (Color) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null colors not allowed
         //
         verifyException("org.apache.commons.imaging.formats.tiff.photometricinterpreters.floatingpoint.PaletteEntryForValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Color color0 = Color.lightGray;
      PaletteEntryForValue paletteEntryForValue0 = new PaletteEntryForValue(10.48F, color0);
      boolean boolean0 = paletteEntryForValue0.coversSingleEntry();
      assertTrue(boolean0);
      assertEquals(10.48F, paletteEntryForValue0.getUpperBound(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Color color0 = Color.RED;
      PaletteEntryForValue paletteEntryForValue0 = new PaletteEntryForValue(1116.879F, color0);
      float float0 = paletteEntryForValue0.getUpperBound();
      assertEquals(1116.879F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Color color0 = Color.RED;
      PaletteEntryForValue paletteEntryForValue0 = new PaletteEntryForValue(1116.879F, color0);
      float float0 = paletteEntryForValue0.getLowerBound();
      assertEquals(1116.879F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Color color0 = Color.RED;
      PaletteEntryForValue paletteEntryForValue0 = new PaletteEntryForValue(1116.879F, color0);
      String string0 = paletteEntryForValue0.toString();
      assertEquals("PaletteEntry for single value1116.879", string0);
  }
}
