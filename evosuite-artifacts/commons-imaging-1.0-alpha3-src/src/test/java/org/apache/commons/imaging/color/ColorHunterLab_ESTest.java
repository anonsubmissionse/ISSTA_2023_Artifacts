/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 23:53:13 GMT 2022
 */

package org.apache.commons.imaging.color;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.imaging.color.ColorHunterLab;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ColorHunterLab_ESTest extends ColorHunterLab_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ColorHunterLab colorHunterLab0 = ColorHunterLab.WHITE;
      colorHunterLab0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ColorHunterLab colorHunterLab0 = new ColorHunterLab((-26.6895), 3680.0149667200435, (-26.6895));
      colorHunterLab0.hashCode();
      assertEquals((-26.6895), colorHunterLab0.b, 0.01);
      assertEquals((-26.6895), colorHunterLab0.L, 0.01);
      assertEquals(3680.0149667200435, colorHunterLab0.a, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ColorHunterLab colorHunterLab0 = new ColorHunterLab(0.0, 0.0, (-1.0));
      ColorHunterLab colorHunterLab1 = ColorHunterLab.BLACK;
      boolean boolean0 = colorHunterLab0.equals(colorHunterLab1);
      assertEquals(0.0, colorHunterLab0.a, 0.01);
      assertEquals((-1.0), colorHunterLab0.b, 0.01);
      assertFalse(colorHunterLab1.equals((Object)colorHunterLab0));
      assertEquals(0.0, colorHunterLab0.L, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ColorHunterLab colorHunterLab0 = ColorHunterLab.BLUE;
      ColorHunterLab colorHunterLab1 = new ColorHunterLab(26.87, 26.87, (-5.336));
      boolean boolean0 = colorHunterLab0.equals(colorHunterLab1);
      assertFalse(boolean0);
      assertEquals(26.87, colorHunterLab1.L, 0.01);
      assertEquals((-5.336), colorHunterLab1.b, 0.01);
      assertEquals(26.87, colorHunterLab1.a, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ColorHunterLab colorHunterLab0 = ColorHunterLab.BLUE;
      ColorHunterLab colorHunterLab1 = ColorHunterLab.RED;
      boolean boolean0 = colorHunterLab0.equals(colorHunterLab1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ColorHunterLab colorHunterLab0 = new ColorHunterLab(0.0, 5011.84472, 5011.84472);
      String string0 = colorHunterLab0.GREEN.toString();
      assertEquals("{L: 84.569, a: -72.518, b: 50.842}", string0);
      assertEquals(5011.84472, colorHunterLab0.a, 0.01);
      assertEquals(0.0, colorHunterLab0.L, 0.01);
      assertEquals(5011.84472, colorHunterLab0.b, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ColorHunterLab colorHunterLab0 = new ColorHunterLab(0.0, 5011.84472, 5011.84472);
      ColorHunterLab colorHunterLab1 = new ColorHunterLab(0.0, 5011.84472, 5011.84472);
      boolean boolean0 = colorHunterLab0.equals(colorHunterLab1);
      assertTrue(boolean0);
      assertEquals(0.0, colorHunterLab1.L, 0.01);
      assertEquals(5011.84472, colorHunterLab1.b, 0.01);
      assertEquals(5011.84472, colorHunterLab1.a, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ColorHunterLab colorHunterLab0 = ColorHunterLab.WHITE;
      ColorHunterLab colorHunterLab1 = new ColorHunterLab(100.0, 100.0, 100.0);
      boolean boolean0 = colorHunterLab0.equals(colorHunterLab1);
      assertEquals(100.0, colorHunterLab1.a, 0.01);
      assertEquals(100.0, colorHunterLab1.b, 0.01);
      assertFalse(boolean0);
      assertEquals(100.0, colorHunterLab1.L, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ColorHunterLab colorHunterLab0 = new ColorHunterLab(0.0, 0.0, 0.0);
      ColorHunterLab colorHunterLab1 = ColorHunterLab.WHITE;
      boolean boolean0 = colorHunterLab1.equals(colorHunterLab0);
      assertEquals(0.0, colorHunterLab0.a, 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, colorHunterLab0.b, 0.01);
      assertEquals(0.0, colorHunterLab0.L, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ColorHunterLab colorHunterLab0 = new ColorHunterLab(0.0, 5011.84472, 5011.84472);
      boolean boolean0 = colorHunterLab0.equals("{L: 26.87, a: 72.885, b: -190.923}");
      assertEquals(0.0, colorHunterLab0.L, 0.01);
      assertEquals(5011.84472, colorHunterLab0.b, 0.01);
      assertEquals(5011.84472, colorHunterLab0.a, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ColorHunterLab colorHunterLab0 = new ColorHunterLab(4969.482529453713, 4969.482529453713, 4969.482529453713);
      boolean boolean0 = colorHunterLab0.equals((Object) null);
      assertEquals(4969.482529453713, colorHunterLab0.L, 0.01);
      assertFalse(boolean0);
      assertEquals(4969.482529453713, colorHunterLab0.b, 0.01);
      assertEquals(4969.482529453713, colorHunterLab0.a, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ColorHunterLab colorHunterLab0 = new ColorHunterLab(0.0, 5011.84472, 5011.84472);
      boolean boolean0 = colorHunterLab0.equals(colorHunterLab0);
      assertTrue(boolean0);
      assertEquals(0.0, colorHunterLab0.L, 0.01);
      assertEquals(5011.84472, colorHunterLab0.a, 0.01);
      assertEquals(5011.84472, colorHunterLab0.b, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ColorHunterLab colorHunterLab0 = new ColorHunterLab((-26.6895), 3680.0149667200435, 3680.0149667200435);
      ColorHunterLab colorHunterLab1 = new ColorHunterLab((-26.6895), 3680.0149667200435, (-26.6895));
      boolean boolean0 = colorHunterLab0.equals(colorHunterLab1);
      assertEquals(3680.0149667200435, colorHunterLab0.b, 0.01);
      assertEquals(3680.0149667200435, colorHunterLab1.a, 0.01);
      assertFalse(boolean0);
      assertEquals((-26.6895), colorHunterLab1.L, 0.01);
      assertFalse(colorHunterLab1.equals((Object)colorHunterLab0));
  }
}
