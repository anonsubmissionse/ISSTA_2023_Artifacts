/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 18:01:33 GMT 2022
 */

package org.apache.commons.jexl3.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import org.apache.commons.jexl3.internal.LongRange;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LongRange_ESTest extends LongRange_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LongRange longRange0 = LongRange.create((-2168L), (-2168L));
      Object[] objectArray0 = new Object[1];
      Object[] objectArray1 = longRange0.toArray(objectArray0);
      assertSame(objectArray1, objectArray0);
      assertEquals(1, longRange0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LongRange longRange0 = LongRange.create((-5148L), (-119L));
      Object[] objectArray0 = longRange0.toArray();
      assertEquals(5030, longRange0.size());
      assertEquals(5030, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(13L, 0L);
      LongRange.Descending longRange_Descending1 = new LongRange.Descending(13L, 13L);
      boolean boolean0 = longRange_Descending0.equals(longRange_Descending1);
      assertFalse(longRange_Descending1.equals((Object)longRange_Descending0));
      assertFalse(boolean0);
      assertEquals(13L, longRange_Descending0.getMin());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(0L, 0L);
      LongRange longRange0 = LongRange.create(0L, (-17L));
      boolean boolean0 = longRange_Descending0.equals(longRange0);
      assertEquals(18, longRange0.size());
      assertFalse(boolean0);
      assertFalse(longRange0.equals((Object)longRange_Descending0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending((-1531L), (-17L));
      boolean boolean0 = longRange_Descending0.equals(longRange_Descending0);
      assertEquals(1515, longRange_Descending0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LongRange longRange0 = LongRange.create((-1009L), (-1009L));
      longRange0.hashCode();
      assertEquals(1, longRange0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LongRange.Ascending longRange_Ascending0 = new LongRange.Ascending(66L, (-2873L));
      longRange_Ascending0.hashCode();
      assertEquals((-2938), longRange_Ascending0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending((-2779L), (-2779L));
      longRange_Descending0.iterator();
      assertEquals((-2779L), longRange_Descending0.getMax());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LongRange longRange0 = LongRange.create((-5148L), (-119L));
      longRange0.iterator();
      assertEquals(5030, longRange0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(1L, 0L);
      Object[] objectArray0 = longRange_Descending0.toArray();
      assertEquals(0, longRange_Descending0.size());
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LongRange longRange0 = LongRange.create(4016L, 1008L);
      int int0 = longRange0.size();
      assertEquals(3009, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LongRange.Ascending longRange_Ascending0 = new LongRange.Ascending(2865L, 732L);
      int int0 = longRange_Ascending0.size();
      assertEquals((-2132), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(0L, 1L);
      long long0 = longRange_Descending0.getMin();
      assertEquals(0L, long0);
      assertEquals(2, longRange_Descending0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(1120L, 1120L);
      long long0 = longRange_Descending0.getMin();
      assertEquals(1, longRange_Descending0.size());
      assertEquals(1120L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LongRange.Ascending longRange_Ascending0 = new LongRange.Ascending(0L, 0L);
      long long0 = longRange_Ascending0.getMax();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LongRange longRange0 = LongRange.create(4016L, 1008L);
      long long0 = longRange0.getMax();
      assertEquals(4016L, long0);
      assertEquals(3009, longRange0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LongRange longRange0 = LongRange.create(0L, 0L);
      assertFalse(longRange0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LongRange.Ascending longRange_Ascending0 = new LongRange.Ascending((-1563L), 0L);
      // Undeclared exception!
      try { 
        longRange_Ascending0.toArray((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.LongRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(1615L, 0L);
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        longRange_Descending0.toArray(objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1614
         //
         verifyException("org.apache.commons.jexl3.internal.LongRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LongRange.Ascending longRange_Ascending0 = new LongRange.Ascending(2913L, 1L);
      // Undeclared exception!
      try { 
        longRange_Ascending0.toArray();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.LongRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LongRange longRange0 = LongRange.create((-189L), 0L);
      // Undeclared exception!
      try { 
        longRange0.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.LongRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(0L, 0L);
      Byte byte0 = new Byte((byte) (-13));
      boolean boolean0 = longRange_Descending0.contains(byte0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LongRange longRange0 = LongRange.create(4016L, 1008L);
      Float float0 = new Float((float) 3009);
      boolean boolean0 = longRange0.contains(float0);
      assertTrue(boolean0);
      assertEquals(1008L, longRange0.getMin());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LongRange longRange0 = LongRange.create(1L, 3810L);
      Object object0 = new Object();
      boolean boolean0 = longRange0.contains(object0);
      assertEquals(3810, longRange0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(1L, 0L);
      int int0 = longRange_Descending0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LongRange.Ascending longRange_Ascending0 = new LongRange.Ascending(0L, 597L);
      Object[] objectArray0 = new Object[5];
      Object[] objectArray1 = longRange_Ascending0.toArray(objectArray0);
      assertEquals(598, objectArray1.length);
      assertEquals(598, longRange_Ascending0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LongRange longRange0 = LongRange.create(1L, (-2627L));
      LongRange.Ascending[] longRange_AscendingArray0 = new LongRange.Ascending[9];
      // Undeclared exception!
      try { 
        longRange0.toArray(longRange_AscendingArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.LongRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LongRange longRange0 = LongRange.create((-442L), (-442L));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float((double) (-442L));
      linkedList0.addFirst(float0);
      boolean boolean0 = longRange0.containsAll(linkedList0);
      assertTrue(boolean0);
      assertEquals((-442L), longRange0.getMax());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending((-33L), (-33L));
      Byte byte0 = new Byte((byte)8);
      boolean boolean0 = longRange_Descending0.contains(byte0);
      assertFalse(boolean0);
      assertEquals(1, longRange_Descending0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending((-12L), (-5554L));
      LinkedList<LongRange.Ascending> linkedList0 = new LinkedList<LongRange.Ascending>();
      LongRange.Ascending longRange_Ascending0 = new LongRange.Ascending((-5554L), (-5554L));
      linkedList0.add(longRange_Ascending0);
      boolean boolean0 = longRange_Descending0.containsAll(linkedList0);
      assertEquals((-5541), longRange_Descending0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(0L, 0L);
      LongRange.Descending longRange_Descending1 = new LongRange.Descending(0L, (-17L));
      boolean boolean0 = longRange_Descending0.equals(longRange_Descending1);
      assertEquals((-16), longRange_Descending1.size());
      assertFalse(boolean0);
      assertFalse(longRange_Descending1.equals((Object)longRange_Descending0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(29L, 264L);
      LongRange.Descending longRange_Descending1 = new LongRange.Descending(264L, 264L);
      boolean boolean0 = longRange_Descending0.equals(longRange_Descending1);
      assertFalse(longRange_Descending1.equals((Object)longRange_Descending0));
      assertFalse(boolean0);
      assertEquals(264L, longRange_Descending0.getMax());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(4L, 4L);
      boolean boolean0 = longRange_Descending0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(4L, longRange_Descending0.getMax());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LongRange longRange0 = LongRange.create(1L, (-584L));
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      // Undeclared exception!
      try { 
        longRange0.addAll(linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.LongRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending((-33L), (-33L));
      boolean boolean0 = longRange_Descending0.isEmpty();
      assertFalse(boolean0);
      assertEquals((-33L), longRange_Descending0.getMax());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LongRange longRange0 = LongRange.create(1L, (-584L));
      long long0 = longRange0.getMin();
      assertEquals(586, longRange0.size());
      assertEquals((-584L), long0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LongRange.Ascending longRange_Ascending0 = new LongRange.Ascending((-11L), (-11L));
      Object[] objectArray0 = new Object[2];
      Object[] objectArray1 = longRange_Ascending0.toArray(objectArray0);
      boolean boolean0 = longRange_Ascending0.equals(objectArray0[0]);
      assertSame(objectArray0, objectArray1);
      assertEquals(1, longRange_Ascending0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LongRange.Ascending longRange_Ascending0 = new LongRange.Ascending((-11L), (-11L));
      long long0 = longRange_Ascending0.getMax();
      assertEquals(1, longRange_Ascending0.size());
      assertEquals((-11L), long0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LongRange longRange0 = LongRange.create((-2979L), (-442L));
      Short short0 = new Short((short)1289);
      // Undeclared exception!
      try { 
        longRange0.remove(short0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.LongRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending((-12L), (-5554L));
      // Undeclared exception!
      try { 
        longRange_Descending0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.LongRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LongRange.Ascending longRange_Ascending0 = new LongRange.Ascending(1119L, 0L);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        longRange_Ascending0.removeAll(linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.LongRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(0L, 0L);
      Long long0 = new Long(0L);
      // Undeclared exception!
      try { 
        longRange_Descending0.add(long0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.LongRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LongRange longRange0 = LongRange.create(1L, (-584L));
      longRange0.iterator();
      assertEquals(586, longRange0.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LongRange longRange0 = LongRange.create((-1209L), 2632L);
      LinkedList<LongRange.Ascending> linkedList0 = new LinkedList<LongRange.Ascending>();
      // Undeclared exception!
      try { 
        longRange0.retainAll(linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.LongRange", e);
      }
  }
}
