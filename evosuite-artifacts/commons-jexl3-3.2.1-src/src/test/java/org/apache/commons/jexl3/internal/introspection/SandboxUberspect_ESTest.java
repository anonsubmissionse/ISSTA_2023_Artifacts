/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 17:58:20 GMT 2022
 */

package org.apache.commons.jexl3.internal.introspection;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.MathContext;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.jexl3.JexlArithmetic;
import org.apache.commons.jexl3.JexlOperator;
import org.apache.commons.jexl3.JexlOptions;
import org.apache.commons.jexl3.internal.introspection.Permissions;
import org.apache.commons.jexl3.internal.introspection.SandboxUberspect;
import org.apache.commons.jexl3.internal.introspection.Uberspect;
import org.apache.commons.jexl3.introspection.JexlMethod;
import org.apache.commons.jexl3.introspection.JexlPropertyGet;
import org.apache.commons.jexl3.introspection.JexlPropertySet;
import org.apache.commons.jexl3.introspection.JexlSandbox;
import org.apache.commons.jexl3.introspection.JexlUberspect;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.impl.Jdk13LumberjackLogger;
import org.apache.commons.logging.impl.Jdk14Logger;
import org.apache.commons.logging.impl.NoOpLog;
import org.apache.commons.logging.impl.SimpleLog;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SandboxUberspect_ESTest extends SandboxUberspect_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = new Permissions();
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0, permissions0);
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, true);
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      JexlOperator jexlOperator0 = JexlOperator.STARTSWITH;
      List<JexlUberspect.PropertyResolver> list0 = sandboxUberspect0.getResolvers(jexlOperator0, jexlSandbox0);
      Iterator<?> iterator0 = sandboxUberspect0.getIterator(list0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect((Log) null, jexlUberspect_ResolverStrategy0, permissions0);
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      sandboxUberspect0.setClassLoader((ClassLoader) null);
      ClassLoader classLoader0 = sandboxUberspect0.getClassLoader();
      assertNull(classLoader0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog();
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0, permissions0);
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      JexlArithmetic.Uberspect jexlArithmetic_Uberspect0 = sandboxUberspect0.getArithmetic((JexlArithmetic) null);
      assertNull(jexlArithmetic_Uberspect0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog("");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = new Permissions();
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0, permissions0);
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      LinkedList<JexlUberspect.PropertyResolver> linkedList0 = new LinkedList<JexlUberspect.PropertyResolver>();
      linkedList0.add((JexlUberspect.PropertyResolver) null);
      Class<Integer> class0 = Integer.TYPE;
      // Undeclared exception!
      try { 
        sandboxUberspect0.getPropertySet((List<JexlUberspect.PropertyResolver>) linkedList0, (Object) jexlUberspect_ResolverStrategy0, (Object) class0, (Object) jexlUberspect_ResolverStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.introspection.Uberspect", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Permissions permissions0 = new Permissions();
      Uberspect uberspect0 = new Uberspect((Log) null, (JexlUberspect.ResolverStrategy) null, permissions0);
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, true);
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      JexlOperator jexlOperator0 = JexlOperator.STARTSWITH;
      List<JexlUberspect.PropertyResolver> list0 = sandboxUberspect0.getResolvers(jexlOperator0, jexlSandbox0);
      Class<Integer> class0 = Integer.TYPE;
      // Undeclared exception!
      try { 
        sandboxUberspect0.getPropertySet(list0, (Object) class0, (Object) "", (Object) jexlOperator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.introspection.ClassMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog();
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0);
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      LinkedList<JexlUberspect.PropertyResolver> linkedList0 = new LinkedList<JexlUberspect.PropertyResolver>();
      linkedList0.add((JexlUberspect.PropertyResolver) null);
      Integer integer0 = new Integer((-1720));
      // Undeclared exception!
      try { 
        sandboxUberspect0.getPropertyGet((List<JexlUberspect.PropertyResolver>) linkedList0, (Object) linkedList0, (Object) integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.introspection.Uberspect", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect((Log) null, jexlUberspect_ResolverStrategy0, permissions0);
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      JexlUberspect.JexlResolver jexlUberspect_JexlResolver0 = JexlUberspect.JexlResolver.DUCK;
      // Undeclared exception!
      try { 
        sandboxUberspect0.getPropertyGet((Object) uberspect0, (Object) jexlUberspect_JexlResolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.introspection.ClassMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = new Permissions();
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0, permissions0);
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, true);
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      // Undeclared exception!
      try { 
        sandboxUberspect0.getIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.introspection.Uberspect", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog("&l:F.}b}Y]N'm");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0);
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      sandboxUberspect0.setClassLoader((ClassLoader) null);
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        sandboxUberspect0.getConstructor(noOpLog0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.introspection.Introspector", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog();
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0);
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      jexlSandbox0.permissions((String) null, false, false, true);
      SandboxUberspect sandboxUberspect0 = null;
      try {
        sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0, permissions0);
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, true);
      JexlSandbox.Permissions jexlSandbox_Permissions0 = jexlSandbox0.permissions("", true, true, true);
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      Class<Integer> class0 = Integer.TYPE;
      LinkedList<JexlUberspect.PropertyResolver> linkedList0 = new LinkedList<JexlUberspect.PropertyResolver>();
      sandboxUberspect0.getPropertySet((List<JexlUberspect.PropertyResolver>) linkedList0, (Object) jexlSandbox_Permissions0, (Object) null, (Object) class0);
      assertEquals(1, sandboxUberspect0.getVersion());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect((Log) null, jexlUberspect_ResolverStrategy0);
      JexlSandbox jexlSandbox0 = new JexlSandbox(true);
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      JexlOperator jexlOperator0 = JexlOperator.ENDSWITH;
      Integer integer0 = new Integer(0);
      List<JexlUberspect.PropertyResolver> list0 = sandboxUberspect0.getResolvers(jexlOperator0, integer0);
      // Undeclared exception!
      try { 
        sandboxUberspect0.getPropertyGet(list0, (Object) jexlSandbox0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.introspection.ClassMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleLog simpleLog0 = new SimpleLog("a1aw");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(simpleLog0, jexlUberspect_ResolverStrategy0);
      JexlSandbox jexlSandbox0 = new JexlSandbox(false, false);
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      List<JexlUberspect.PropertyResolver> list0 = JexlUberspect.MAP;
      Object object0 = new Object();
      sandboxUberspect0.getPropertyGet(list0, object0, object0);
      assertEquals(0, sandboxUberspect0.getVersion());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger("&C5o2^%I");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(jdk13LumberjackLogger0, jexlUberspect_ResolverStrategy0);
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, true);
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      Integer integer0 = new Integer(1);
      JexlPropertyGet jexlPropertyGet0 = sandboxUberspect0.getPropertyGet((List<JexlUberspect.PropertyResolver>) null, (Object) null, (Object) integer0);
      assertNull(jexlPropertyGet0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog();
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0);
      JexlSandbox jexlSandbox0 = new JexlSandbox(false, false);
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      Object object0 = new Object();
      sandboxUberspect0.getPropertySet((List<JexlUberspect.PropertyResolver>) null, (Object) jexlSandbox0, (Object) null, object0);
      assertEquals(0, sandboxUberspect0.getVersion());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog();
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0);
      JexlSandbox jexlSandbox0 = new JexlSandbox(false, false);
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      JexlUberspect.JexlResolver jexlUberspect_JexlResolver0 = JexlUberspect.JexlResolver.MAP;
      sandboxUberspect0.getPropertySet((Object) jexlUberspect_JexlResolver0, (Object) sandboxUberspect0, (Object) "%@T[?@|[Zqlza@;Q");
      assertEquals(0, sandboxUberspect0.getVersion());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0, permissions0);
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, true);
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      LinkedList<JexlUberspect.PropertyResolver> linkedList0 = new LinkedList<JexlUberspect.PropertyResolver>();
      JexlUberspect.JexlResolver jexlUberspect_JexlResolver0 = JexlUberspect.JexlResolver.LIST;
      JexlPropertySet jexlPropertySet0 = sandboxUberspect0.getPropertySet((List<JexlUberspect.PropertyResolver>) linkedList0, (Object) null, (Object) "org.apache.commons.jexl3.JexlArithmetic", (Object) jexlUberspect_JexlResolver0);
      assertNull(jexlPropertySet0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog();
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0);
      JexlSandbox jexlSandbox0 = new JexlSandbox(false, false);
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      Class<JexlUberspect.JexlResolver> class0 = JexlUberspect.JexlResolver.class;
      JexlSandbox.Permissions jexlSandbox_Permissions0 = jexlSandbox0.get(class0);
      sandboxUberspect0.getPropertyGet((List<JexlUberspect.PropertyResolver>) null, (Object) jexlSandbox_Permissions0, (Object) null);
      assertEquals(0, sandboxUberspect0.getVersion());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog();
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0);
      JexlSandbox jexlSandbox0 = new JexlSandbox(false, false);
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      sandboxUberspect0.getPropertyGet((Object) jexlUberspect_ResolverStrategy0, (Object) "?");
      assertEquals(0, sandboxUberspect0.getVersion());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect((Log) null, (JexlUberspect.ResolverStrategy) null, permissions0);
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        sandboxUberspect0.getMethod(uberspect0, "?", objectArray0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.introspection.ClassMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog();
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0);
      JexlSandbox jexlSandbox0 = new JexlSandbox(false, false);
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      Object object0 = new Object();
      JexlMethod jexlMethod0 = sandboxUberspect0.getMethod(object0, "?", (Object[]) null);
      assertNull(jexlMethod0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog("&l:F.}b}Y]N'm");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0);
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[4];
      sandboxUberspect0.getMethod(class0, "B-:VR2>Fh8U@yk'y9", objectArray0);
      assertEquals(1, sandboxUberspect0.getVersion());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("fMQR'pUR");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = new Permissions();
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0, permissions0);
      JexlSandbox jexlSandbox0 = new JexlSandbox(true);
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      JexlMethod jexlMethod0 = sandboxUberspect0.getMethod("fMQR'pUR", (String) null, (Object[]) null);
      assertNull(jexlMethod0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = new Permissions();
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0, permissions0);
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, true);
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      JexlOptions jexlOptions0 = new JexlOptions();
      Object[] objectArray0 = new Object[7];
      sandboxUberspect0.getMethod(jexlOptions0, "", objectArray0);
      assertEquals(1, sandboxUberspect0.getVersion());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog("%@T[?@|[Zqlza@;Q");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0);
      JexlSandbox jexlSandbox0 = new JexlSandbox(false);
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      JexlMethod jexlMethod0 = sandboxUberspect0.getMethod((Object) null, "", (Object[]) null);
      assertNull(jexlMethod0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("fMQR'pUR");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = new Permissions();
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0, permissions0);
      JexlSandbox jexlSandbox0 = new JexlSandbox(true);
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      sandboxUberspect0.getConstructor(jdk14Logger0, (Object[]) null);
      assertEquals(1, sandboxUberspect0.getVersion());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = new Permissions();
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0, permissions0);
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, true);
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      Class<Integer> class0 = Integer.TYPE;
      Object[] objectArray0 = new Object[7];
      sandboxUberspect0.getConstructor(class0, objectArray0);
      assertEquals(1, sandboxUberspect0.getVersion());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = new Permissions();
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0, permissions0);
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, true);
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      Object[] objectArray0 = new Object[7];
      sandboxUberspect0.getConstructor((Object) null, objectArray0);
      assertEquals(0, sandboxUberspect0.getVersion());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      SandboxUberspect sandboxUberspect0 = null;
      try {
        sandboxUberspect0 = new SandboxUberspect((JexlUberspect) null, jexlSandbox0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // uberspect can not be null
         //
         verifyException("org.apache.commons.jexl3.internal.introspection.SandboxUberspect", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SandboxUberspect sandboxUberspect0 = null;
      try {
        sandboxUberspect0 = new SandboxUberspect((JexlUberspect) null, (JexlSandbox) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sandbox can not be null
         //
         verifyException("org.apache.commons.jexl3.internal.introspection.SandboxUberspect", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0, permissions0);
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, true);
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      Class<Integer> class0 = Integer.TYPE;
      sandboxUberspect0.getPropertyGet((Object) class0, (Object) null);
      assertEquals(1, sandboxUberspect0.getVersion());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("fMQR'pUR");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = new Permissions();
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0, permissions0);
      JexlSandbox jexlSandbox0 = new JexlSandbox(true);
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      ClassLoader classLoader0 = sandboxUberspect0.getClassLoader();
      assertNotNull(classLoader0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = new Permissions();
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0, permissions0);
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, true);
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      MathContext mathContext0 = MathContext.UNLIMITED;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 0);
      JexlArithmetic.Uberspect jexlArithmetic_Uberspect0 = sandboxUberspect0.getArithmetic(jexlArithmetic0);
      assertNotNull(jexlArithmetic_Uberspect0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0, permissions0);
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, true);
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      Object object0 = new Object();
      Iterator<?> iterator0 = sandboxUberspect0.getIterator(object0);
      assertNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0, permissions0);
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, true);
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      int int0 = sandboxUberspect0.getVersion();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0);
      JexlSandbox jexlSandbox0 = new JexlSandbox(false, false);
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      JexlOperator jexlOperator0 = JexlOperator.GT;
      List<JexlUberspect.PropertyResolver> list0 = sandboxUberspect0.getResolvers(jexlOperator0, uberspect0);
      sandboxUberspect0.getPropertySet(list0, (Object) "", (Object) jexlUberspect_ResolverStrategy0, (Object) jdk14Logger0);
      assertEquals(0, sandboxUberspect0.getVersion());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog("");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = new Permissions();
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0, permissions0);
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      sandboxUberspect0.getPropertySet((Object) noOpLog0, (Object) permissions0, (Object) uberspect0);
      int int0 = sandboxUberspect0.getVersion();
      assertEquals(1, uberspect0.getVersion());
      assertEquals(1, int0);
  }
}
