/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 18:04:24 GMT 2022
 */

package org.apache.commons.jexl3.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.jexl3.JexlEngine;
import org.apache.commons.jexl3.JexlFeatures;
import org.apache.commons.jexl3.internal.Frame;
import org.apache.commons.jexl3.internal.Scope;
import org.apache.commons.jexl3.parser.ASTJexlLambda;
import org.apache.commons.jexl3.parser.ASTJexlScript;
import org.apache.commons.jexl3.parser.FeatureController;
import org.apache.commons.jexl3.parser.JexlNode;
import org.apache.commons.jexl3.parser.Parser;
import org.apache.commons.jexl3.parser.ParserVisitor;
import org.apache.commons.jexl3.parser.StringProvider;
import org.apache.commons.jexl3.parser.Token;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ASTJexlScript_ESTest extends ASTJexlScript_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("k");
      Parser parser0 = new Parser(stringProvider0);
      ASTJexlScript aSTJexlScript0 = parser0.JexlExpression((Scope) null);
      ASTJexlScript aSTJexlScript1 = aSTJexlScript0.script();
      assertFalse(aSTJexlScript1.isTernaryProtected());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(4749);
      Token token0 = new Token(4749, "K[t/o[.Yp4M*p*RN");
      aSTJexlScript0.jjtSetFirstToken(token0);
      ASTJexlScript aSTJexlScript1 = aSTJexlScript0.script();
      assertEquals(4749, aSTJexlScript1.getId());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(0);
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      Object object0 = aSTJexlScript0.jjtAccept(featureController0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ASTJexlLambda aSTJexlLambda0 = new ASTJexlLambda((-1320));
      String[] stringArray0 = new String[1];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      aSTJexlLambda0.setScope(scope0);
      aSTJexlLambda0.getSymbols();
      assertEquals(1, aSTJexlLambda0.getSymbolCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript((-1318));
      String[] stringArray0 = new String[0];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      aSTJexlScript0.setScope(scope0);
      aSTJexlScript0.getScope();
      assertEquals(0, aSTJexlScript0.getSymbolCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(23);
      String[] stringArray0 = new String[9];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      aSTJexlScript0.setScope(scope0);
      aSTJexlScript0.getScope();
      assertEquals(9, aSTJexlScript0.getSymbolCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      aSTJexlScript0.setPragmas(hashMap0);
      Map<String, Object> map0 = aSTJexlScript0.getPragmas();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(622);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("", (Object) null);
      aSTJexlScript0.setPragmas(hashMap0);
      Map<String, Object> map0 = aSTJexlScript0.getPragmas();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Parser parser0 = new Parser(".4aN^yX=06@*DU");
      ASTJexlLambda aSTJexlLambda0 = new ASTJexlLambda(parser0, 1);
      Scope scope0 = new Scope((Scope) null, (String[]) null);
      aSTJexlLambda0.setScope(scope0);
      aSTJexlLambda0.getParameters();
      assertEquals(0, aSTJexlLambda0.getSymbolCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript((-1318));
      String[] stringArray0 = new String[0];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      scope0.declareVariable("");
      aSTJexlScript0.setScope(scope0);
      aSTJexlScript0.getLocalVariables();
      assertEquals(0, aSTJexlScript0.getSymbolCount());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(0);
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.structuredLiteral(false);
      aSTJexlScript0.setFeatures(jexlFeatures0);
      JexlFeatures jexlFeatures1 = aSTJexlScript0.getFeatures();
      assertEquals(13, JexlFeatures.SCRIPT);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ASTJexlLambda aSTJexlLambda0 = new ASTJexlLambda((Parser) null, (-1401));
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.sideEffectGlobal(false);
      aSTJexlLambda0.setFeatures(jexlFeatures0);
      JexlFeatures jexlFeatures1 = aSTJexlLambda0.getFeatures();
      assertEquals(2, JexlFeatures.LOCAL_VAR);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(0);
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.sideEffect(false);
      aSTJexlScript0.setFeatures(jexlFeatures0);
      JexlFeatures jexlFeatures1 = aSTJexlScript0.getFeatures();
      assertTrue(jexlFeatures1.supportsMethodCall());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(0);
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      aSTJexlScript0.setFeatures(jexlFeatures0);
      jexlFeatures0.register(true);
      JexlFeatures jexlFeatures1 = aSTJexlScript0.getFeatures();
      assertEquals(3, JexlFeatures.SIDE_EFFECT);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(0);
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.pragma(false);
      aSTJexlScript0.setFeatures(jexlFeatures0);
      JexlFeatures jexlFeatures1 = aSTJexlScript0.getFeatures();
      assertTrue(jexlFeatures1.supportsLoops());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(0);
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.newInstance(false);
      aSTJexlScript0.setFeatures(jexlFeatures0);
      JexlFeatures jexlFeatures1 = aSTJexlScript0.getFeatures();
      assertFalse(jexlFeatures1.supportsExpression());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(0);
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.methodCall(false);
      aSTJexlScript0.setFeatures(jexlFeatures0);
      JexlFeatures jexlFeatures1 = aSTJexlScript0.getFeatures();
      assertTrue(jexlFeatures1.supportsLoops());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(0);
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.loops(false);
      aSTJexlScript0.setFeatures(jexlFeatures0);
      JexlFeatures jexlFeatures1 = aSTJexlScript0.getFeatures();
      assertTrue(jexlFeatures1.supportsMethodCall());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(0);
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      jexlFeatures0.localVar(false);
      aSTJexlScript0.setFeatures(jexlFeatures0);
      JexlFeatures jexlFeatures1 = aSTJexlScript0.getFeatures();
      assertTrue(jexlFeatures1.supportsPragma());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("");
      Parser parser0 = new Parser(stringProvider0);
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(parser0, (-4017));
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      jexlFeatures0.lambda(false);
      aSTJexlScript0.setFeatures(jexlFeatures0);
      JexlFeatures jexlFeatures1 = aSTJexlScript0.getFeatures();
      assertTrue(jexlFeatures1.supportsAnnotation());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(0);
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.script(false);
      aSTJexlScript0.setFeatures(jexlFeatures0);
      JexlFeatures jexlFeatures1 = aSTJexlScript0.getFeatures();
      assertEquals(9, JexlFeatures.METHOD_CALL);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ASTJexlLambda aSTJexlLambda0 = new ASTJexlLambda((-1318));
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      aSTJexlLambda0.setFeatures(jexlFeatures0);
      jexlFeatures0.arrayReferenceExpr(false);
      JexlFeatures jexlFeatures1 = aSTJexlLambda0.getFeatures();
      assertTrue(jexlFeatures1.supportsStructuredLiteral());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(0);
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      aSTJexlScript0.setFeatures(jexlFeatures0);
      jexlFeatures0.annotation(false);
      JexlFeatures jexlFeatures1 = aSTJexlScript0.getFeatures();
      assertFalse(jexlFeatures1.supportsAnnotation());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ASTJexlLambda aSTJexlLambda0 = new ASTJexlLambda(109);
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      jexlFeatures0.lexicalShade(true);
      aSTJexlLambda0.setFeatures(jexlFeatures0);
      JexlFeatures jexlFeatures1 = aSTJexlLambda0.getFeatures();
      assertTrue(jexlFeatures1.supportsAnnotation());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript((-1318));
      String[] stringArray0 = new String[0];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      aSTJexlScript0.setScope(scope0);
      aSTJexlScript0.createFrame((Object[]) stringArray0);
      assertEquals(0, aSTJexlScript0.getSymbolCount());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript((-1318));
      String[] stringArray0 = new String[0];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      aSTJexlScript0.setScope(scope0);
      aSTJexlScript0.createFrame((Frame) null, (Object[]) stringArray0);
      assertEquals(0, aSTJexlScript0.getSymbolCount());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("");
      Parser parser0 = new Parser(stringProvider0);
      ASTJexlLambda aSTJexlLambda0 = new ASTJexlLambda(parser0, 0);
      // Undeclared exception!
      try { 
        aSTJexlLambda0.jjtAccept((ParserVisitor) null, stringProvider0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.ASTJexlScript", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ASTJexlLambda aSTJexlLambda0 = new ASTJexlLambda(23);
      String[] stringArray0 = new String[9];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      aSTJexlLambda0.setScope(scope0);
      // Undeclared exception!
      try { 
        aSTJexlLambda0.createFrame((Object[]) stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ASTJexlLambda aSTJexlLambda0 = new ASTJexlLambda(0);
      JexlNode[] jexlNodeArray0 = new JexlNode[1];
      Frame frame0 = aSTJexlLambda0.createFrame((Frame) null, (Object[]) jexlNodeArray0);
      assertNull(frame0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ASTJexlLambda aSTJexlLambda0 = new ASTJexlLambda(109);
      aSTJexlLambda0.setScope((Scope) null);
      assertEquals(0, aSTJexlLambda0.getArgCount());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(23);
      Parser parser0 = new Parser("H1%X_S[");
      FeatureController featureController0 = parser0.featureController;
      Parser parser1 = (Parser)aSTJexlScript0.jjtAccept(featureController0, parser0);
      assertFalse(parser1.trace_enabled());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(0);
      Scope scope0 = aSTJexlScript0.getScope();
      assertNull(scope0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript((-1318));
      String[] stringArray0 = new String[6];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      aSTJexlScript0.setScope(scope0);
      boolean boolean0 = aSTJexlScript0.isCapturedSymbol(2005);
      assertEquals(6, aSTJexlScript0.getSymbolCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(0);
      boolean boolean0 = aSTJexlScript0.isCapturedSymbol((-2981));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript((-1318));
      String[] stringArray0 = new String[6];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      aSTJexlScript0.setScope(scope0);
      aSTJexlScript0.getLocalVariables();
      assertEquals(6, aSTJexlScript0.getSymbolCount());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ASTJexlLambda aSTJexlLambda0 = new ASTJexlLambda(1620);
      String[] stringArray0 = aSTJexlLambda0.getLocalVariables();
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(23);
      String[] stringArray0 = new String[9];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      aSTJexlScript0.setScope(scope0);
      aSTJexlScript0.getParameters();
      assertEquals(9, aSTJexlScript0.getSymbolCount());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Parser parser0 = new Parser("");
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(parser0, (-4003));
      String[] stringArray0 = aSTJexlScript0.getParameters();
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript((-1318));
      String[] stringArray0 = new String[0];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      aSTJexlScript0.setScope(scope0);
      aSTJexlScript0.getSymbols();
      assertEquals(0, aSTJexlScript0.getSymbolCount());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(0);
      String[] stringArray0 = aSTJexlScript0.getSymbols();
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript((-1318));
      String[] stringArray0 = new String[6];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      aSTJexlScript0.setScope(scope0);
      aSTJexlScript0.getArgCount();
      assertEquals(6, aSTJexlScript0.getSymbolCount());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ASTJexlLambda aSTJexlLambda0 = new ASTJexlLambda(1620);
      int int0 = aSTJexlLambda0.getArgCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript((-1318));
      String[] stringArray0 = new String[6];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      aSTJexlScript0.setScope(scope0);
      // Undeclared exception!
      try { 
        aSTJexlScript0.createFrame((Frame) null, (Object[]) stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ASTJexlLambda aSTJexlLambda0 = new ASTJexlLambda((-1318));
      String[] stringArray0 = new String[1];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      aSTJexlLambda0.setScope(scope0);
      aSTJexlLambda0.script();
      assertEquals(1, aSTJexlLambda0.getSymbolCount());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ASTJexlLambda aSTJexlLambda0 = new ASTJexlLambda(0);
      JexlNode[] jexlNodeArray0 = new JexlNode[1];
      jexlNodeArray0[0] = (JexlNode) aSTJexlLambda0;
      aSTJexlLambda0.jjtSetChildren(jexlNodeArray0);
      ASTJexlScript aSTJexlScript0 = aSTJexlLambda0.script();
      assertEquals(4095, aSTJexlScript0.getColumn());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Parser parser0 = new Parser("");
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(parser0, (-4003));
      Frame frame0 = aSTJexlScript0.createFrame((Object[]) null);
      assertNull(frame0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(33);
      JexlFeatures jexlFeatures0 = aSTJexlScript0.getFeatures();
      assertNull(jexlFeatures0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Parser parser0 = new Parser("");
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(parser0, (-4003));
      Map<String, Object> map0 = aSTJexlScript0.getPragmas();
      assertNull(map0);
  }
}
