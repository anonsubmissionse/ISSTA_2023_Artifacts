/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 18:14:00 GMT 2022
 */

package org.apache.commons.jexl3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.MathContext;
import java.math.RoundingMode;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.jexl3.JexlArithmetic;
import org.apache.commons.jexl3.JexlBuilder;
import org.apache.commons.jexl3.JexlEngine;
import org.apache.commons.jexl3.JexlFeatures;
import org.apache.commons.jexl3.JexlOptions;
import org.apache.commons.jexl3.internal.introspection.Permissions;
import org.apache.commons.jexl3.internal.introspection.Uberspect;
import org.apache.commons.jexl3.introspection.JexlSandbox;
import org.apache.commons.jexl3.introspection.JexlUberspect;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.impl.Jdk13LumberjackLogger;
import org.apache.commons.logging.impl.Jdk14Logger;
import org.apache.commons.logging.impl.NoOpLog;
import org.apache.commons.logging.impl.SimpleLog;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JexlBuilder_ESTest extends JexlBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cacheThreshold(2139);
      jexlBuilder0.create();
      assertEquals(2139, jexlBuilder0.cacheThreshold());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cacheThreshold(0);
      assertEquals(Integer.MAX_VALUE, jexlBuilder1.stackOverflow());
      assertEquals((-1), jexlBuilder1.cache());
      assertTrue(jexlBuilder1.collectAll());
      assertEquals(64, jexlBuilder0.cacheThreshold());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.collectMode((-1727));
      boolean boolean0 = jexlBuilder1.collectAll();
      assertEquals((-1727), jexlBuilder0.collectMode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
      
      jexlBuilder0.stackOverflow(0);
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger("error");
      Uberspect uberspect0 = new Uberspect(jdk13LumberjackLogger0, jexlUberspect_ResolverStrategy0);
      jexlBuilder0.uberspect((JexlUberspect) uberspect0);
      assertEquals((-1), jexlBuilder0.cache());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      NoOpLog noOpLog0 = new NoOpLog();
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0);
      jexlBuilder0.stackOverflow((-2823));
      jexlBuilder0.uberspect((JexlUberspect) uberspect0);
      assertEquals((-2823), jexlBuilder0.stackOverflow());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.lexicalShade(true);
      NoOpLog noOpLog0 = new NoOpLog();
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0);
      jexlBuilder1.uberspect((JexlUberspect) uberspect0);
      assertTrue(jexlBuilder0.lexical());
      assertEquals((-1), jexlBuilder0.cache());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.collectMode((-3044));
      JexlEngine jexlEngine0 = jexlBuilder0.create();
      JexlUberspect jexlUberspect0 = jexlEngine0.getUberspect();
      jexlBuilder0.uberspect(jexlUberspect0);
      assertEquals((-3044), jexlBuilder0.collectMode());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertEquals(1, jexlBuilder0.collectMode());
      
      NoOpLog noOpLog0 = new NoOpLog("53");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0, permissions0);
      JexlBuilder jexlBuilder1 = jexlBuilder0.collectAll(false);
      jexlBuilder1.uberspect((JexlUberspect) uberspect0);
      assertFalse(jexlBuilder0.collectAll());
      assertEquals(0, jexlBuilder0.collectMode());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertEquals((-1), jexlBuilder0.cache());
      
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(0);
      NoOpLog noOpLog0 = new NoOpLog();
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0, permissions0);
      jexlBuilder1.uberspect((JexlUberspect) uberspect0);
      assertEquals(0, jexlBuilder0.cache());
      assertTrue(jexlBuilder0.collectAll());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cache(14);
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger("forEach");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(jdk13LumberjackLogger0, jexlUberspect_ResolverStrategy0, (Permissions) null);
      jexlBuilder0.uberspect((JexlUberspect) uberspect0);
      assertEquals(14, jexlBuilder0.cache());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.antish(false);
      NoOpLog noOpLog0 = new NoOpLog("53");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0, permissions0);
      jexlBuilder1.uberspect((JexlUberspect) uberspect0);
      assertFalse(jexlBuilder0.antish());
      assertEquals(64, jexlBuilder0.cacheThreshold());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger("forEach");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(jdk13LumberjackLogger0, jexlUberspect_ResolverStrategy0, (Permissions) null);
      JexlBuilder jexlBuilder1 = jexlBuilder0.uberspect((JexlUberspect) uberspect0);
      jexlBuilder1.uberspect();
      assertEquals(Integer.MAX_VALUE, jexlBuilder1.stackOverflow());
      assertTrue(jexlBuilder1.collectAll());
      assertEquals(64, jexlBuilder1.cacheThreshold());
      assertEquals((-1), jexlBuilder1.cache());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
      
      jexlBuilder0.stackOverflow(0);
      jexlBuilder0.strict(true);
      assertEquals((-1), jexlBuilder0.cache());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.stackOverflow((-696));
      jexlBuilder0.strict(false);
      assertFalse(jexlBuilder0.strict());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.lexicalShade(true);
      jexlBuilder0.strict(true);
      assertTrue(jexlBuilder0.lexical());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.collectMode((-3044));
      jexlBuilder1.strict(true);
      assertEquals((-3044), jexlBuilder0.collectMode());
      assertEquals((-1), jexlBuilder0.cache());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertEquals(1, jexlBuilder0.collectMode());
      
      JexlBuilder jexlBuilder1 = jexlBuilder0.collectAll(false);
      jexlBuilder1.strict(true);
      assertFalse(jexlBuilder0.collectAll());
      assertTrue(jexlBuilder0.strict());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(0);
      jexlBuilder1.strict(false);
      assertFalse(jexlBuilder1.strict());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cache(4095);
      jexlBuilder0.strict(true);
      assertEquals(4095, jexlBuilder0.cache());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.antish(false);
      jexlBuilder1.strict(true);
      assertFalse(jexlBuilder0.antish());
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.strict(false);
      jexlBuilder0.strict();
      assertFalse(jexlBuilder0.strict());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
      
      jexlBuilder0.stackOverflow(0);
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      jexlBuilder0.strategy(jexlUberspect_ResolverStrategy0);
      assertEquals(64, jexlBuilder0.cacheThreshold());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.stackOverflow((-303));
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      jexlBuilder0.strategy(jexlUberspect_ResolverStrategy0);
      assertEquals((-303), jexlBuilder0.stackOverflow());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.lexicalShade(true);
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      jexlBuilder1.strategy(jexlUberspect_ResolverStrategy0);
      assertTrue(jexlBuilder0.lexical());
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.lexical(true);
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      jexlBuilder0.strategy(jexlUberspect_ResolverStrategy0);
      assertTrue(jexlBuilder0.lexical());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.collectMode((-13));
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      jexlBuilder0.strategy(jexlUberspect_ResolverStrategy0);
      assertEquals((-13), jexlBuilder0.collectMode());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertTrue(jexlBuilder0.collectAll());
      
      jexlBuilder0.collectAll(false);
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      jexlBuilder0.strategy(jexlUberspect_ResolverStrategy0);
      assertFalse(jexlBuilder0.collectAll());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertEquals((-1), jexlBuilder0.cache());
      
      jexlBuilder0.cache(0);
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      jexlBuilder0.strategy(jexlUberspect_ResolverStrategy0);
      assertEquals(0, jexlBuilder0.cache());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(Integer.MAX_VALUE);
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      jexlBuilder1.strategy(jexlUberspect_ResolverStrategy0);
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.cache());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.antish(false);
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      jexlBuilder0.strategy(jexlUberspect_ResolverStrategy0);
      assertFalse(jexlBuilder0.antish());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      jexlBuilder0.strategy(jexlUberspect_ResolverStrategy0);
      jexlBuilder0.strategy();
      assertEquals((-1), jexlBuilder0.cache());
      assertEquals(1, jexlBuilder0.collectMode());
      assertEquals(64, jexlBuilder0.cacheThreshold());
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.lexicalShade(true);
      jexlBuilder0.stackOverflow((-303));
      assertTrue(jexlBuilder0.lexicalShade());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.collectMode((-303));
      jexlBuilder0.stackOverflow((-303));
      assertEquals((-303), jexlBuilder0.collectMode());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.collectAll(false);
      jexlBuilder0.stackOverflow(2738);
      assertEquals(2738, jexlBuilder0.stackOverflow());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(0);
      jexlBuilder1.stackOverflow(19);
      assertEquals(19, jexlBuilder1.stackOverflow());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(Integer.MAX_VALUE);
      jexlBuilder1.stackOverflow(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.cache());
      assertEquals(64, jexlBuilder0.cacheThreshold());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.antish(false);
      jexlBuilder1.stackOverflow(10);
      assertFalse(jexlBuilder0.antish());
      assertEquals(10, jexlBuilder0.stackOverflow());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
      
      jexlBuilder0.stackOverflow(0);
      int int0 = jexlBuilder0.stackOverflow();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.stackOverflow((-303));
      int int0 = jexlBuilder0.stackOverflow();
      assertEquals((-303), int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
      
      jexlBuilder0.stackOverflow(0);
      jexlBuilder0.silent(false);
      assertEquals(64, jexlBuilder0.cacheThreshold());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.stackOverflow((-303));
      jexlBuilder0.silent(true);
      assertTrue(jexlBuilder0.silent());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.lexicalShade(true);
      jexlBuilder0.silent(true);
      assertTrue(jexlBuilder0.silent());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.collectMode((-515));
      jexlBuilder0.silent(true);
      assertTrue(jexlBuilder0.silent());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertTrue(jexlBuilder0.collectAll());
      
      jexlBuilder0.collectAll(false);
      jexlBuilder0.silent(false);
      assertFalse(jexlBuilder0.collectAll());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertEquals((-1), jexlBuilder0.cache());
      
      jexlBuilder0.cache(0);
      jexlBuilder0.silent(false);
      assertEquals(0, jexlBuilder0.cache());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cache(25);
      jexlBuilder0.silent(true);
      assertEquals(25, jexlBuilder0.cache());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.antish(false);
      jexlBuilder0.silent(false);
      assertFalse(jexlBuilder0.antish());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.silent(true);
      jexlBuilder0.silent();
      assertTrue(jexlBuilder0.silent());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
      
      jexlBuilder0.stackOverflow(0);
      JexlSandbox jexlSandbox0 = new JexlSandbox(true);
      jexlBuilder0.sandbox(jexlSandbox0);
      assertEquals(0, jexlBuilder0.stackOverflow());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.stackOverflow((-303));
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      jexlBuilder0.sandbox(jexlSandbox0);
      assertEquals((-303), jexlBuilder0.stackOverflow());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.lexicalShade(true);
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      jexlBuilder0.sandbox(jexlSandbox0);
      assertTrue(jexlBuilder0.lexical());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.collectMode((-303));
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      jexlBuilder0.sandbox(jexlSandbox0);
      assertEquals((-303), jexlBuilder0.collectMode());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertEquals(1, jexlBuilder0.collectMode());
      
      jexlBuilder0.collectAll(false);
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      jexlBuilder0.sandbox(jexlSandbox0);
      assertEquals(0, jexlBuilder0.collectMode());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertEquals((-1), jexlBuilder0.cache());
      
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(0);
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      jexlBuilder1.sandbox(jexlSandbox0);
      assertEquals(0, jexlBuilder0.cache());
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertEquals((-1), jexlBuilder0.cache());
      
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(1);
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      jexlBuilder1.sandbox(jexlSandbox0);
      assertEquals(1, jexlBuilder0.cache());
      assertEquals(64, jexlBuilder0.cacheThreshold());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.antish(false);
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      jexlBuilder0.sandbox(jexlSandbox0);
      assertFalse(jexlBuilder0.antish());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
      
      jexlBuilder0.stackOverflow(0);
      jexlBuilder0.safe(true);
      assertEquals(0, jexlBuilder0.stackOverflow());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.stackOverflow((-2));
      jexlBuilder0.safe(false);
      assertEquals((-2), jexlBuilder0.stackOverflow());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.lexicalShade(true);
      jexlBuilder1.safe(false);
      assertTrue(jexlBuilder0.lexical());
      assertEquals(64, jexlBuilder0.cacheThreshold());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.collectMode((-3044));
      jexlBuilder0.safe(true);
      assertEquals((-3044), jexlBuilder0.collectMode());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertEquals(1, jexlBuilder0.collectMode());
      
      JexlBuilder jexlBuilder1 = jexlBuilder0.collectMode(0);
      jexlBuilder1.safe(true);
      assertFalse(jexlBuilder0.collectAll());
      assertEquals(64, jexlBuilder0.cacheThreshold());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertEquals((-1), jexlBuilder0.cache());
      
      jexlBuilder0.cache(0);
      jexlBuilder0.safe(true);
      assertEquals(0, jexlBuilder0.cache());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cache(Integer.MAX_VALUE);
      jexlBuilder0.safe(true);
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.cache());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.antish(false);
      jexlBuilder1.safe(false);
      assertFalse(jexlBuilder1.safe());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.safe(false);
      jexlBuilder0.safe();
      assertFalse(jexlBuilder0.safe());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.strict(false);
      jexlBuilder0.options();
      assertFalse(jexlBuilder0.strict());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.silent(true);
      jexlBuilder0.options();
      assertTrue(jexlBuilder0.silent());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.lexicalShade(true);
      jexlBuilder1.options();
      assertTrue(jexlBuilder0.lexicalShade());
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cancellable(false);
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      assertFalse(jexlOptions0.isCancellable());
      assertEquals((-1), jexlBuilder0.cache());
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
      assertEquals(1, jexlBuilder0.collectMode());
      assertEquals(64, jexlBuilder0.cacheThreshold());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.antish(false);
      jexlBuilder0.options();
      assertFalse(jexlBuilder0.antish());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      MathContext mathContext0 = new MathContext(1724, roundingMode0);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 0);
      jexlBuilder0.arithmetic(jexlArithmetic1);
      jexlBuilder0.options();
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
      assertEquals((-1), jexlBuilder0.cache());
      assertEquals(64, jexlBuilder0.cacheThreshold());
      assertTrue(jexlBuilder0.collectAll());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      MathContext mathContext0 = MathContext.UNLIMITED;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 1);
      jexlBuilder0.arithmetic(jexlArithmetic1);
      jexlBuilder0.options();
      assertEquals((-1), jexlBuilder0.cache());
      assertEquals(1, jexlBuilder0.collectMode());
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
      assertEquals(64, jexlBuilder0.cacheThreshold());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
      
      JexlBuilder jexlBuilder1 = jexlBuilder0.stackOverflow(0);
      Map<String, Object> map0 = jexlBuilder0.namespaces();
      jexlBuilder1.namespaces(map0);
      assertEquals(64, jexlBuilder0.cacheThreshold());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.stackOverflow((-696));
      Map<String, Object> map0 = jexlBuilder1.namespaces();
      jexlBuilder0.namespaces(map0);
      assertEquals((-696), jexlBuilder0.stackOverflow());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.lexicalShade(true);
      Map<String, Object> map0 = jexlBuilder0.namespaces();
      jexlBuilder0.namespaces(map0);
      assertTrue(jexlBuilder0.lexical());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.collectMode((-13));
      jexlBuilder0.namespaces((Map<String, Object>) null);
      assertEquals((-13), jexlBuilder0.collectMode());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertEquals(1, jexlBuilder0.collectMode());
      
      jexlBuilder0.collectAll(false);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      jexlBuilder0.namespaces((Map<String, Object>) hashMap0);
      assertFalse(jexlBuilder0.collectAll());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertEquals((-1), jexlBuilder0.cache());
      
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(0);
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      Map<String, Object> map0 = jexlOptions0.getNamespaces();
      jexlBuilder1.namespaces(map0);
      assertEquals(0, jexlBuilder0.cache());
      assertEquals(64, jexlBuilder0.cacheThreshold());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cache(25);
      Map<String, Object> map0 = jexlBuilder0.namespaces();
      jexlBuilder0.namespaces(map0);
      assertEquals(25, jexlBuilder0.cache());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.antish(false);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      jexlBuilder0.namespaces((Map<String, Object>) hashMap0);
      assertFalse(jexlBuilder0.antish());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>(hashMap0);
      jexlBuilder0.namespaces((Map<String, Object>) hashMap1);
      jexlBuilder0.namespaces();
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
      assertEquals((-1), jexlBuilder0.cache());
      assertEquals(64, jexlBuilder0.cacheThreshold());
      assertEquals(1, jexlBuilder0.collectMode());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      jexlBuilder0.namespaces((Map<String, Object>) hashMap0);
      hashMap0.put("/x", "/x");
      jexlBuilder0.namespaces();
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
      assertEquals(64, jexlBuilder0.cacheThreshold());
      assertTrue(jexlBuilder0.collectAll());
      assertEquals((-1), jexlBuilder0.cache());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
      
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger("selfXor");
      jexlBuilder0.stackOverflow(0);
      jexlBuilder0.logger((Log) jdk13LumberjackLogger0);
      assertEquals(64, jexlBuilder0.cacheThreshold());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("Ad8V:c>_4J");
      jexlBuilder0.stackOverflow((-303));
      jexlBuilder0.logger((Log) jdk14Logger0);
      assertEquals((-303), jexlBuilder0.stackOverflow());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.lexicalShade(true);
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("Ad8V:c>_4J");
      jexlBuilder1.logger((Log) jdk14Logger0);
      assertTrue(jexlBuilder0.lexicalShade());
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("Ad8V:c>_4J");
      jexlBuilder0.collectMode((-303));
      jexlBuilder0.logger((Log) jdk14Logger0);
      assertEquals((-303), jexlBuilder0.collectMode());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertTrue(jexlBuilder0.collectAll());
      
      JexlBuilder jexlBuilder1 = jexlBuilder0.collectAll(false);
      NoOpLog noOpLog0 = new NoOpLog();
      jexlBuilder1.logger((Log) noOpLog0);
      assertFalse(jexlBuilder0.collectAll());
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertEquals((-1), jexlBuilder0.cache());
      
      jexlBuilder0.cache(0);
      NoOpLog noOpLog0 = new NoOpLog();
      jexlBuilder0.logger((Log) noOpLog0);
      assertEquals(0, jexlBuilder0.cache());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(4095);
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger("ykewkCZ/i [~");
      jexlBuilder1.logger((Log) jdk13LumberjackLogger0);
      assertEquals(4095, jexlBuilder0.cache());
      assertEquals(64, jexlBuilder0.cacheThreshold());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger("org.apache.commons.jexl3.JexlBuilder");
      jexlBuilder0.antish(false);
      jexlBuilder0.logger((Log) jdk13LumberjackLogger0);
      assertFalse(jexlBuilder0.antish());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      SimpleLog simpleLog0 = new SimpleLog("L!yW{Jvg'O|~Te");
      jexlBuilder0.logger((Log) simpleLog0);
      jexlBuilder0.logger();
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
      assertEquals((-1), jexlBuilder0.cache());
      assertTrue(jexlBuilder0.collectAll());
      assertEquals(64, jexlBuilder0.cacheThreshold());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
      
      JexlBuilder jexlBuilder1 = jexlBuilder0.stackOverflow(0);
      Charset charset0 = jexlBuilder1.charset();
      jexlBuilder1.loader(charset0);
      assertEquals(0, jexlBuilder0.stackOverflow());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Charset charset0 = Charset.defaultCharset();
      jexlBuilder0.stackOverflow((-2));
      jexlBuilder0.loader(charset0);
      assertEquals((-2), jexlBuilder0.stackOverflow());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.lexicalShade(true);
      Charset charset0 = Charset.defaultCharset();
      jexlBuilder0.loader(charset0);
      assertTrue(jexlBuilder0.lexicalShade());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.collectMode((-1078));
      Charset charset0 = jexlBuilder0.charset();
      jexlBuilder0.loader(charset0);
      assertEquals((-1078), jexlBuilder0.collectMode());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertEquals(1, jexlBuilder0.collectMode());
      
      JexlBuilder jexlBuilder1 = jexlBuilder0.collectAll(false);
      Charset charset0 = Charset.defaultCharset();
      jexlBuilder1.loader(charset0);
      assertEquals(0, jexlBuilder0.collectMode());
      assertEquals(64, jexlBuilder0.cacheThreshold());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertEquals((-1), jexlBuilder0.cache());
      
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(0);
      Charset charset0 = Charset.defaultCharset();
      jexlBuilder1.loader(charset0);
      assertEquals(0, jexlBuilder0.cache());
      assertEquals(64, jexlBuilder0.cacheThreshold());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cache(6);
      Charset charset0 = jexlBuilder0.charset();
      jexlBuilder0.loader(charset0);
      assertEquals(6, jexlBuilder0.cache());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Charset charset0 = Charset.defaultCharset();
      JexlBuilder jexlBuilder1 = jexlBuilder0.antish(false);
      jexlBuilder1.loader(charset0);
      assertFalse(jexlBuilder0.antish());
      assertEquals((-1), jexlBuilder0.cache());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
      
      JexlBuilder jexlBuilder1 = jexlBuilder0.stackOverflow(0);
      jexlBuilder1.loader((ClassLoader) null);
      assertTrue(jexlBuilder0.collectAll());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.stackOverflow((-714));
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      jexlBuilder1.loader(classLoader0);
      assertEquals((-714), jexlBuilder0.stackOverflow());
      assertEquals(64, jexlBuilder0.cacheThreshold());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.lexicalShade(true);
      jexlBuilder0.loader((ClassLoader) null);
      assertTrue(jexlBuilder0.lexicalShade());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertTrue(jexlBuilder0.collectAll());
      
      jexlBuilder0.collectAll(false);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      jexlBuilder0.loader(classLoader0);
      assertFalse(jexlBuilder0.collectAll());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertEquals((-1), jexlBuilder0.cache());
      
      jexlBuilder0.cache(0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      jexlBuilder0.loader(classLoader0);
      assertEquals(0, jexlBuilder0.cache());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(812);
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("org.apache.commons.jexl3.JexlBuilder");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0);
      ClassLoader classLoader0 = uberspect0.getClassLoader();
      jexlBuilder1.loader(classLoader0);
      assertEquals(812, jexlBuilder0.cache());
      assertEquals(64, jexlBuilder0.cacheThreshold());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.antish(false);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      jexlBuilder1.loader(classLoader0);
      assertFalse(jexlBuilder0.antish());
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      NoOpLog noOpLog0 = new NoOpLog();
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0);
      ClassLoader classLoader0 = uberspect0.getClassLoader();
      JexlBuilder jexlBuilder1 = jexlBuilder0.loader(classLoader0);
      jexlBuilder1.loader();
      assertEquals((-1), jexlBuilder1.cache());
      assertEquals(Integer.MAX_VALUE, jexlBuilder1.stackOverflow());
      assertTrue(jexlBuilder1.collectAll());
      assertEquals(64, jexlBuilder1.cacheThreshold());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
      
      JexlBuilder jexlBuilder1 = jexlBuilder0.stackOverflow(0);
      jexlBuilder1.lexicalShade(false);
      assertEquals(64, jexlBuilder0.cacheThreshold());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.stackOverflow((-3688));
      jexlBuilder0.lexicalShade(true);
      assertTrue(jexlBuilder0.lexicalShade());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.collectMode((-617));
      jexlBuilder0.lexicalShade(true);
      assertEquals((-617), jexlBuilder0.collectMode());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertTrue(jexlBuilder0.collectAll());
      
      jexlBuilder0.collectAll(false);
      jexlBuilder0.lexicalShade(false);
      assertFalse(jexlBuilder0.collectAll());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertEquals((-1), jexlBuilder0.cache());
      
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(0);
      jexlBuilder1.lexicalShade(false);
      assertEquals(0, jexlBuilder0.cache());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertEquals((-1), jexlBuilder0.cache());
      
      jexlBuilder0.cache(1);
      jexlBuilder0.lexicalShade(false);
      assertEquals(1, jexlBuilder0.cache());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.antish(false);
      jexlBuilder1.lexicalShade(false);
      assertFalse(jexlBuilder0.antish());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.lexicalShade(true);
      boolean boolean0 = jexlBuilder1.lexicalShade();
      assertTrue(jexlBuilder0.lexical());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.stackOverflow(0);
      jexlBuilder0.lexical(true);
      assertTrue(jexlBuilder0.lexical());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.stackOverflow((-303));
      jexlBuilder1.lexical(true);
      assertTrue(jexlBuilder1.lexical());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.lexicalShade(true);
      jexlBuilder0.lexical(true);
      assertTrue(jexlBuilder0.lexical());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.collectMode((-1005));
      jexlBuilder1.lexical(true);
      assertEquals((-1005), jexlBuilder0.collectMode());
      assertEquals(64, jexlBuilder0.cacheThreshold());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertTrue(jexlBuilder0.collectAll());
      
      jexlBuilder0.collectAll(false);
      jexlBuilder0.lexical(false);
      assertEquals(0, jexlBuilder0.collectMode());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertEquals((-1), jexlBuilder0.cache());
      
      jexlBuilder0.cache(0);
      jexlBuilder0.lexical(false);
      assertEquals(0, jexlBuilder0.cache());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cache(25);
      jexlBuilder0.lexical(false);
      assertEquals(25, jexlBuilder0.cache());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.antish(false);
      jexlBuilder1.lexical(false);
      assertFalse(jexlBuilder0.antish());
      assertEquals((-1), jexlBuilder0.cache());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
      
      JexlBuilder jexlBuilder1 = jexlBuilder0.stackOverflow(0);
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlBuilder1.features(jexlFeatures0);
      assertEquals((-1), jexlBuilder0.cache());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      jexlBuilder0.stackOverflow((-3688));
      jexlBuilder0.features(jexlFeatures0);
      assertEquals((-3688), jexlBuilder0.stackOverflow());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.collectMode((-3044));
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlBuilder1.features(jexlFeatures0);
      assertEquals((-3044), jexlBuilder0.collectMode());
      assertEquals(64, jexlBuilder0.cacheThreshold());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertEquals(1, jexlBuilder0.collectMode());
      
      jexlBuilder0.collectAll(false);
      jexlBuilder0.features((JexlFeatures) null);
      assertEquals(0, jexlBuilder0.collectMode());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertEquals((-1), jexlBuilder0.cache());
      
      jexlBuilder0.cache(0);
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlBuilder0.features(jexlFeatures0);
      assertEquals(0, jexlBuilder0.cache());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      jexlBuilder0.cache(8);
      jexlBuilder0.features(jexlFeatures0);
      assertEquals(8, jexlBuilder0.cache());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.antish(false);
      jexlBuilder1.features((JexlFeatures) null);
      assertFalse(jexlBuilder0.antish());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      jexlBuilder0.features(jexlFeatures0);
      jexlFeatures0.structuredLiteral(false);
      jexlBuilder0.features();
      assertEquals((-1), jexlBuilder0.cache());
      assertFalse(jexlBuilder0.lexical());
      assertEquals(1, jexlBuilder0.collectMode());
      assertEquals(64, jexlBuilder0.cacheThreshold());
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlBuilder jexlBuilder1 = jexlBuilder0.features(jexlFeatures0);
      jexlFeatures0.sideEffectGlobal(false);
      jexlBuilder1.features();
      assertEquals((-1), jexlBuilder1.cache());
      assertFalse(jexlBuilder1.lexical());
      assertEquals(1, jexlBuilder1.collectMode());
      assertEquals(64, jexlBuilder1.cacheThreshold());
      assertEquals(Integer.MAX_VALUE, jexlBuilder1.stackOverflow());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      JexlBuilder jexlBuilder1 = jexlBuilder0.features(jexlFeatures0);
      jexlFeatures0.newInstance(false);
      jexlBuilder1.features();
      assertEquals(Integer.MAX_VALUE, jexlBuilder1.stackOverflow());
      assertEquals(64, jexlBuilder1.cacheThreshold());
      assertEquals((-1), jexlBuilder1.cache());
      assertTrue(jexlBuilder1.collectAll());
      assertFalse(jexlBuilder1.lexical());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      jexlBuilder0.features(jexlFeatures0);
      jexlFeatures0.lambda(false);
      jexlBuilder0.features();
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
      assertEquals((-1), jexlBuilder0.cache());
      assertFalse(jexlBuilder0.lexical());
      assertEquals(64, jexlBuilder0.cacheThreshold());
      assertTrue(jexlBuilder0.collectAll());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      jexlFeatures0.script(false);
      JexlBuilder jexlBuilder1 = jexlBuilder0.features(jexlFeatures0);
      jexlBuilder1.features();
      assertEquals(Integer.MAX_VALUE, jexlBuilder1.stackOverflow());
      assertEquals(64, jexlBuilder1.cacheThreshold());
      assertEquals((-1), jexlBuilder1.cache());
      assertTrue(jexlBuilder1.collectAll());
      assertFalse(jexlBuilder1.lexical());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      jexlFeatures0.arrayReferenceExpr(false);
      jexlBuilder0.features(jexlFeatures0);
      jexlBuilder0.features();
      assertEquals((-1), jexlBuilder0.cache());
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
      assertEquals(64, jexlBuilder0.cacheThreshold());
      assertFalse(jexlBuilder0.lexical());
      assertEquals(1, jexlBuilder0.collectMode());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      jexlFeatures0.lexicalShade(true);
      JexlBuilder jexlBuilder1 = jexlBuilder0.features(jexlFeatures0);
      jexlBuilder1.features();
      assertTrue(jexlBuilder0.lexical());
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
      
      jexlBuilder0.stackOverflow(0);
      jexlBuilder0.debug(true);
      assertEquals((-1), jexlBuilder0.cache());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.stackOverflow((-696));
      jexlBuilder0.debug(true);
      assertEquals((-696), jexlBuilder0.stackOverflow());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.lexicalShade(true);
      jexlBuilder0.debug(false);
      assertTrue(jexlBuilder0.lexicalShade());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.collectMode((-177));
      jexlBuilder1.debug(false);
      assertEquals((-177), jexlBuilder0.collectMode());
      assertFalse(jexlBuilder0.debug());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertEquals(1, jexlBuilder0.collectMode());
      
      jexlBuilder0.collectAll(false);
      jexlBuilder0.debug(false);
      assertEquals(0, jexlBuilder0.collectMode());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertEquals((-1), jexlBuilder0.cache());
      
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(0);
      jexlBuilder1.debug(false);
      assertEquals(0, jexlBuilder0.cache());
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cache(Integer.MAX_VALUE);
      jexlBuilder0.debug(false);
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.cache());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.antish(false);
      jexlBuilder1.debug(false);
      assertFalse(jexlBuilder0.antish());
      assertEquals(64, jexlBuilder0.cacheThreshold());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.debug(false);
      Boolean boolean0 = jexlBuilder0.debug();
      assertEquals(64, jexlBuilder0.cacheThreshold());
      assertEquals((-1), jexlBuilder0.cache());
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
      assertFalse(boolean0);
      assertEquals(1, jexlBuilder0.collectMode());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.stackOverflow(0);
      jexlBuilder0.collectMode((-3911));
      assertEquals((-3911), jexlBuilder0.collectMode());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.stackOverflow((-303));
      jexlBuilder0.collectMode(14);
      assertEquals((-303), jexlBuilder0.stackOverflow());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(0);
      jexlBuilder1.collectMode(0);
      assertEquals(0, jexlBuilder0.cache());
      assertEquals(0, jexlBuilder1.collectMode());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cache(25);
      jexlBuilder0.collectMode(14);
      assertEquals(14, jexlBuilder0.collectMode());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.antish(false);
      jexlBuilder1.collectMode(806);
      assertFalse(jexlBuilder0.antish());
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertTrue(jexlBuilder0.collectAll());
      
      jexlBuilder0.collectAll(false);
      int int0 = jexlBuilder0.collectMode();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.collectMode((-558));
      int int0 = jexlBuilder0.collectMode();
      assertEquals((-558), int0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
      
      jexlBuilder0.stackOverflow(0);
      jexlBuilder0.collectAll(true);
      assertEquals(1, jexlBuilder0.collectMode());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
      
      jexlBuilder0.stackOverflow((-1));
      jexlBuilder0.collectAll(true);
      assertTrue(jexlBuilder0.collectAll());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.lexicalShade(true);
      jexlBuilder0.collectAll(true);
      assertTrue(jexlBuilder0.lexical());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(0);
      jexlBuilder1.collectAll(false);
      assertEquals(0, jexlBuilder0.cache());
      assertEquals(0, jexlBuilder1.collectMode());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(1243);
      jexlBuilder1.collectAll(true);
      assertEquals(1243, jexlBuilder0.cache());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.antish(false);
      jexlBuilder0.collectAll(false);
      assertFalse(jexlBuilder0.antish());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
      
      JexlBuilder jexlBuilder1 = jexlBuilder0.stackOverflow(0);
      Charset charset0 = Charset.defaultCharset();
      jexlBuilder1.charset(charset0);
      assertEquals(0, jexlBuilder0.stackOverflow());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.stackOverflow((-303));
      Charset charset0 = Charset.defaultCharset();
      jexlBuilder0.charset(charset0);
      assertEquals((-303), jexlBuilder0.stackOverflow());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.lexicalShade(true);
      Charset charset0 = Charset.defaultCharset();
      jexlBuilder0.charset(charset0);
      assertTrue(jexlBuilder0.lexicalShade());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.collectMode((-1138));
      JexlEngine jexlEngine0 = jexlBuilder0.create();
      Charset charset0 = jexlEngine0.getCharset();
      jexlBuilder1.charset(charset0);
      assertEquals((-1138), jexlBuilder0.collectMode());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertTrue(jexlBuilder0.collectAll());
      
      Charset charset0 = Charset.defaultCharset();
      jexlBuilder0.collectAll(false);
      jexlBuilder0.charset(charset0);
      assertFalse(jexlBuilder0.collectAll());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertEquals((-1), jexlBuilder0.cache());
      
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(0);
      Charset charset0 = Charset.defaultCharset();
      jexlBuilder1.charset(charset0);
      assertEquals(0, jexlBuilder0.cache());
      assertEquals(64, jexlBuilder0.cacheThreshold());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(654);
      jexlBuilder1.charset((Charset) null);
      assertEquals(654, jexlBuilder0.cache());
      assertEquals(64, jexlBuilder0.cacheThreshold());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Charset charset0 = Charset.defaultCharset();
      jexlBuilder0.antish(false);
      jexlBuilder0.charset(charset0);
      assertFalse(jexlBuilder0.antish());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.charset((Charset) null);
      jexlBuilder1.charset();
      assertEquals(Integer.MAX_VALUE, jexlBuilder1.stackOverflow());
      assertEquals(64, jexlBuilder1.cacheThreshold());
      assertEquals((-1), jexlBuilder1.cache());
      assertTrue(jexlBuilder1.collectAll());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
      
      jexlBuilder0.stackOverflow(0);
      jexlBuilder0.cancellable(true);
      assertEquals(0, jexlBuilder0.stackOverflow());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.stackOverflow((-303));
      jexlBuilder0.cancellable(true);
      assertEquals((-303), jexlBuilder0.stackOverflow());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.lexicalShade(true);
      jexlBuilder0.cancellable(true);
      assertTrue(jexlBuilder0.lexical());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.collectMode((-303));
      jexlBuilder0.cancellable(true);
      assertEquals((-303), jexlBuilder0.collectMode());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertTrue(jexlBuilder0.collectAll());
      
      jexlBuilder0.collectAll(false);
      jexlBuilder0.cancellable(false);
      assertFalse(jexlBuilder0.collectAll());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertEquals((-1), jexlBuilder0.cache());
      
      jexlBuilder0.cache(0);
      jexlBuilder0.cancellable(true);
      assertEquals(0, jexlBuilder0.cache());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(4095);
      jexlBuilder1.cancellable(false);
      assertEquals(4095, jexlBuilder0.cache());
      assertEquals(64, jexlBuilder0.cacheThreshold());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.antish(false);
      jexlBuilder0.cancellable(false);
      assertFalse(jexlBuilder0.antish());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cancellable(false);
      Boolean boolean0 = jexlBuilder1.cancellable();
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, jexlBuilder1.stackOverflow());
      assertEquals(64, jexlBuilder1.cacheThreshold());
      assertTrue(jexlBuilder1.collectAll());
      assertEquals((-1), jexlBuilder1.cache());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
      
      JexlBuilder jexlBuilder1 = jexlBuilder0.stackOverflow(0);
      jexlBuilder1.cacheThreshold((-5169));
      assertEquals(64, jexlBuilder0.cacheThreshold());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.stackOverflow((-696));
      jexlBuilder0.cacheThreshold(6);
      assertEquals((-696), jexlBuilder0.stackOverflow());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.lexicalShade(true);
      jexlBuilder1.cacheThreshold(14);
      assertEquals(14, jexlBuilder1.cacheThreshold());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.collectMode((-515));
      jexlBuilder0.cacheThreshold(14);
      assertEquals((-515), jexlBuilder0.collectMode());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.collectAll(false);
      jexlBuilder0.cacheThreshold(10);
      assertEquals(10, jexlBuilder0.cacheThreshold());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertEquals((-1), jexlBuilder0.cache());
      
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(0);
      jexlBuilder1.cacheThreshold((-3659));
      assertEquals(0, jexlBuilder0.cache());
      assertEquals(64, jexlBuilder0.cacheThreshold());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cache(25);
      jexlBuilder0.cacheThreshold(14);
      assertEquals(25, jexlBuilder0.cache());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.antish(false);
      jexlBuilder1.cacheThreshold(10);
      assertFalse(jexlBuilder0.antish());
      assertEquals(10, jexlBuilder0.cacheThreshold());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.stackOverflow(0);
      jexlBuilder0.cache((-484));
      assertEquals((-484), jexlBuilder0.cache());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.stackOverflow((-303));
      jexlBuilder0.cache(25);
      assertEquals(25, jexlBuilder0.cache());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.lexicalShade(true);
      jexlBuilder0.cache(25);
      assertEquals(25, jexlBuilder0.cache());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.collectMode((-303));
      jexlBuilder0.cache((-303));
      assertEquals((-303), jexlBuilder0.collectMode());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.collectMode(0);
      jexlBuilder0.cache(0);
      assertEquals(0, jexlBuilder0.collectMode());
      assertEquals(0, jexlBuilder0.cache());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.antish(false);
      jexlBuilder0.cache((-4717));
      assertFalse(jexlBuilder0.antish());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertEquals((-1), jexlBuilder0.cache());
      
      jexlBuilder0.cache(0);
      int int0 = jexlBuilder0.cache();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(Integer.MAX_VALUE);
      int int0 = jexlBuilder1.cache();
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
      
      JexlBuilder jexlBuilder1 = jexlBuilder0.stackOverflow(0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      jexlBuilder1.arithmetic(jexlArithmetic0);
      assertEquals(64, jexlBuilder0.cacheThreshold());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.stackOverflow((-2));
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      jexlBuilder0.arithmetic(jexlArithmetic0);
      assertEquals((-2), jexlBuilder0.stackOverflow());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.lexicalShade(true);
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, (-697));
      jexlBuilder1.arithmetic(jexlArithmetic0);
      assertTrue(jexlBuilder0.lexical());
      assertEquals((-1), jexlBuilder0.cache());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.collectMode((-1138));
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      jexlBuilder1.arithmetic(jexlArithmetic0);
      assertEquals((-1138), jexlBuilder0.collectMode());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertEquals(1, jexlBuilder0.collectMode());
      
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      jexlBuilder0.collectAll(false);
      jexlBuilder0.arithmetic(jexlArithmetic0);
      assertFalse(jexlBuilder0.collectAll());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertEquals((-1), jexlBuilder0.cache());
      
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(0);
      MathContext mathContext0 = MathContext.UNLIMITED;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 37);
      jexlBuilder1.arithmetic(jexlArithmetic0);
      assertEquals(0, jexlBuilder0.cache());
      assertEquals(64, jexlBuilder0.cacheThreshold());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(1243);
      MathContext mathContext0 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 1243);
      jexlBuilder1.arithmetic(jexlArithmetic0);
      assertEquals(1243, jexlBuilder0.cache());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlEngine jexlEngine0 = jexlBuilder0.create();
      jexlBuilder0.antish(false);
      JexlArithmetic jexlArithmetic0 = jexlEngine0.getArithmetic();
      jexlBuilder0.arithmetic(jexlArithmetic0);
      assertFalse(jexlBuilder0.antish());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlEngine jexlEngine0 = jexlBuilder0.create();
      JexlArithmetic jexlArithmetic0 = jexlEngine0.getArithmetic();
      jexlBuilder0.arithmetic(jexlArithmetic0);
      jexlBuilder0.arithmetic();
      assertEquals(64, jexlBuilder0.cacheThreshold());
      assertEquals((-1), jexlBuilder0.cache());
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
      assertEquals(1, jexlBuilder0.collectMode());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      MathContext mathContext0 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 1243);
      jexlBuilder0.arithmetic(jexlArithmetic0);
      jexlBuilder0.arithmetic();
      assertEquals(64, jexlBuilder0.cacheThreshold());
      assertEquals((-1), jexlBuilder0.cache());
      assertTrue(jexlBuilder0.collectAll());
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
      
      jexlBuilder0.stackOverflow(0);
      jexlBuilder0.antish(true);
      assertEquals(64, jexlBuilder0.cacheThreshold());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.stackOverflow((-303));
      jexlBuilder0.antish(true);
      assertEquals((-303), jexlBuilder0.stackOverflow());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.lexicalShade(true);
      jexlBuilder1.antish(true);
      assertTrue(jexlBuilder0.lexicalShade());
      assertTrue(jexlBuilder0.antish());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.collectMode((-303));
      jexlBuilder0.antish(true);
      assertEquals((-303), jexlBuilder0.collectMode());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.collectAll(false);
      jexlBuilder1.antish(false);
      assertFalse(jexlBuilder1.antish());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertEquals((-1), jexlBuilder0.cache());
      
      jexlBuilder0.cache(0);
      jexlBuilder0.antish(true);
      assertEquals(0, jexlBuilder0.cache());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cache(1243);
      jexlBuilder0.antish(true);
      assertEquals(1243, jexlBuilder0.cache());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      // Undeclared exception!
      try { 
        jexlBuilder0.arithmetic((JexlArithmetic) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.loader();
      assertEquals(64, jexlBuilder0.cacheThreshold());
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
      assertEquals((-1), jexlBuilder0.cache());
      assertEquals(1, jexlBuilder0.collectMode());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      int int0 = jexlBuilder0.cache();
      assertEquals((-1), int0);
      assertTrue(jexlBuilder0.collectAll());
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
      assertEquals(64, jexlBuilder0.cacheThreshold());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      int int0 = jexlBuilder0.cacheThreshold();
      assertEquals((-1), jexlBuilder0.cache());
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
      assertEquals(64, int0);
      assertTrue(jexlBuilder0.collectAll());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.features();
      assertEquals(64, jexlBuilder0.cacheThreshold());
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
      assertEquals(1, jexlBuilder0.collectMode());
      assertEquals((-1), jexlBuilder0.cache());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      int int0 = jexlBuilder0.collectMode();
      assertEquals(64, jexlBuilder0.cacheThreshold());
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
      assertEquals((-1), jexlBuilder0.cache());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.strategy();
      assertEquals((-1), jexlBuilder0.cache());
      assertEquals(1, jexlBuilder0.collectMode());
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
      assertEquals(64, jexlBuilder0.cacheThreshold());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.logger();
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
      assertTrue(jexlBuilder0.collectAll());
      assertEquals((-1), jexlBuilder0.cache());
      assertEquals(64, jexlBuilder0.cacheThreshold());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      int int0 = jexlBuilder0.stackOverflow();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(64, jexlBuilder0.cacheThreshold());
      assertTrue(jexlBuilder0.collectAll());
      assertEquals((-1), jexlBuilder0.cache());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.uberspect();
      assertEquals((-1), jexlBuilder0.cache());
      assertEquals(64, jexlBuilder0.cacheThreshold());
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
      assertTrue(jexlBuilder0.collectAll());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.sandbox();
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
      assertEquals(64, jexlBuilder0.cacheThreshold());
      assertTrue(jexlBuilder0.collectAll());
      assertEquals((-1), jexlBuilder0.cache());
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.collectMode((-13));
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      jexlBuilder0.loader(classLoader0);
      assertEquals((-13), jexlBuilder0.collectMode());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.debug();
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
      assertEquals(64, jexlBuilder0.cacheThreshold());
      assertEquals((-1), jexlBuilder0.cache());
      assertTrue(jexlBuilder0.collectAll());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.arithmetic();
      assertEquals((-1), jexlBuilder0.cache());
      assertEquals(64, jexlBuilder0.cacheThreshold());
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
      assertEquals(1, jexlBuilder0.collectMode());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cancellable();
      assertTrue(jexlBuilder0.collectAll());
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
      assertEquals(64, jexlBuilder0.cacheThreshold());
      assertEquals((-1), jexlBuilder0.cache());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      boolean boolean0 = jexlBuilder0.collectAll();
      assertEquals((-1), jexlBuilder0.cache());
      assertTrue(boolean0);
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
      assertEquals(64, jexlBuilder0.cacheThreshold());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      jexlFeatures0.lexicalShade(true);
      jexlBuilder0.features(jexlFeatures0);
      jexlBuilder0.collectMode(14);
      assertTrue(jexlBuilder0.lexical());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cancellable(true);
      Boolean boolean0 = jexlBuilder1.cancellable();
      assertEquals(64, jexlBuilder1.cacheThreshold());
      assertEquals(Integer.MAX_VALUE, jexlBuilder1.stackOverflow());
      assertEquals((-1), jexlBuilder1.cache());
      assertTrue(boolean0);
      assertEquals(1, jexlBuilder1.collectMode());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.debug(true);
      Boolean boolean0 = jexlBuilder0.debug();
      assertEquals((-1), jexlBuilder0.cache());
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
      assertEquals(64, jexlBuilder0.cacheThreshold());
      assertTrue(boolean0);
      assertEquals(1, jexlBuilder0.collectMode());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.antish();
      assertEquals(64, jexlBuilder0.cacheThreshold());
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
      assertEquals(1, jexlBuilder0.collectMode());
      assertEquals((-1), jexlBuilder0.cache());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      jexlBuilder0.sandbox(jexlSandbox0);
      jexlBuilder0.sandbox();
      assertEquals(64, jexlBuilder0.cacheThreshold());
      assertEquals((-1), jexlBuilder0.cache());
      assertEquals(1, jexlBuilder0.collectMode());
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.antish(false);
      boolean boolean0 = jexlBuilder0.antish();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.strict();
      assertEquals(64, jexlBuilder0.cacheThreshold());
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
      assertTrue(jexlBuilder0.collectAll());
      assertEquals((-1), jexlBuilder0.cache());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.lexicalShade();
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
      assertEquals(64, jexlBuilder0.cacheThreshold());
      assertEquals((-1), jexlBuilder0.cache());
      assertTrue(jexlBuilder0.collectAll());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      assertEquals(1, jexlBuilder0.collectMode());
      
      jexlBuilder0.collectAll(false);
      boolean boolean0 = jexlBuilder0.collectAll();
      assertEquals(0, jexlBuilder0.collectMode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.silent();
      assertEquals(64, jexlBuilder0.cacheThreshold());
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
      assertTrue(jexlBuilder0.collectAll());
      assertEquals((-1), jexlBuilder0.cache());
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.safe();
      assertEquals(64, jexlBuilder0.cacheThreshold());
      assertEquals(1, jexlBuilder0.collectMode());
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
      assertEquals((-1), jexlBuilder0.cache());
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.lexical(true);
      boolean boolean0 = jexlBuilder0.lexical();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlEngine jexlEngine0 = jexlBuilder0.create();
      JexlUberspect jexlUberspect0 = jexlEngine0.getUberspect();
      jexlBuilder0.uberspect(jexlUberspect0);
      jexlBuilder0.uberspect();
      assertEquals((-1), jexlBuilder0.cache());
      assertEquals(64, jexlBuilder0.cacheThreshold());
      assertEquals(1, jexlBuilder0.collectMode());
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.lexical();
      assertEquals(Integer.MAX_VALUE, jexlBuilder0.stackOverflow());
      assertEquals(64, jexlBuilder0.cacheThreshold());
      assertEquals(1, jexlBuilder0.collectMode());
      assertEquals((-1), jexlBuilder0.cache());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.safe(false);
      jexlBuilder0.options();
      assertFalse(jexlBuilder0.safe());
  }
}
