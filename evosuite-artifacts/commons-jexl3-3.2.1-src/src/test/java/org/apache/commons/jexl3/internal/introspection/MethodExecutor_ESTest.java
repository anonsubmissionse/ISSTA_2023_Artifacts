/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 17:59:14 GMT 2022
 */

package org.apache.commons.jexl3.internal.introspection;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.jexl3.internal.introspection.Introspector;
import org.apache.commons.jexl3.internal.introspection.MethodExecutor;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.impl.NoOpLog;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MethodExecutor_ESTest extends MethodExecutor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector(noOpLog0, classLoader0);
      Object[] objectArray0 = new Object[1];
      MethodExecutor methodExecutor0 = MethodExecutor.discover(introspector0, noOpLog0, "warn", objectArray0);
      Object object0 = methodExecutor0.invoke(noOpLog0, objectArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector(noOpLog0, classLoader0);
      Object[] objectArray0 = new Object[1];
      MethodExecutor methodExecutor0 = MethodExecutor.discover(introspector0, noOpLog0, "warn", objectArray0);
      // Undeclared exception!
      try { 
        methodExecutor0.tryInvoke((String) null, (Object) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.introspection.MethodKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector(noOpLog0, classLoader0);
      Object[] objectArray0 = new Object[1];
      MethodExecutor methodExecutor0 = MethodExecutor.discover(introspector0, noOpLog0, "warn", objectArray0);
      // Undeclared exception!
      try { 
        methodExecutor0.invoke((Object) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        MethodExecutor.discover((Introspector) null, (Object) null, " i1^IM`|pl", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.introspection.MethodExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector((Log) null, classLoader0);
      Integer integer0 = new Integer(0);
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        MethodExecutor.discover(introspector0, integer0, "org.apache.commons.jexl3.internal.introspection.MethodExecutor", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.introspection.ClassMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector(noOpLog0, classLoader0);
      Object[] objectArray0 = new Object[1];
      MethodExecutor methodExecutor0 = MethodExecutor.discover(introspector0, noOpLog0, "error", objectArray0);
      Object object0 = methodExecutor0.tryInvoke("error", noOpLog0, objectArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector(noOpLog0, classLoader0);
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[1];
      MethodExecutor methodExecutor0 = MethodExecutor.discover(introspector0, noOpLog0, "warn", objectArray0);
      Object object0 = methodExecutor0.tryInvoke("warn", class0, objectArray0);
      // Undeclared exception!
      try { 
        methodExecutor0.invoke(object0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector(noOpLog0, classLoader0);
      Object[] objectArray0 = new Object[20];
      MethodExecutor methodExecutor0 = MethodExecutor.discover(introspector0, classLoader0, "mepYa>ZUrj zn\"CEj", objectArray0);
      assertNull(methodExecutor0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector(noOpLog0, classLoader0);
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[20];
      MethodExecutor methodExecutor0 = MethodExecutor.discover(introspector0, class0, "mepYa>ZUrj zn\"CEj", objectArray0);
      assertNull(methodExecutor0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector(noOpLog0, classLoader0);
      Object[] objectArray0 = new Object[1];
      MethodExecutor methodExecutor0 = MethodExecutor.discover(introspector0, noOpLog0, "warn", objectArray0);
      Object object0 = methodExecutor0.tryInvoke("", noOpLog0, objectArray0);
      assertNotNull(object0);
  }
}
