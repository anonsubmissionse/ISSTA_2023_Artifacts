/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 18:21:16 GMT 2022
 */

package org.apache.commons.jexl3.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileDescriptor;
import java.io.PushbackInputStream;
import java.io.StringReader;
import org.apache.commons.jexl3.parser.ASTNENode;
import org.apache.commons.jexl3.parser.FeatureController;
import org.apache.commons.jexl3.parser.OperatorController;
import org.apache.commons.jexl3.parser.Parser;
import org.apache.commons.jexl3.parser.ParserVisitor;
import org.apache.commons.jexl3.parser.StreamProvider;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ASTNENode_ESTest extends ASTNENode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ASTNENode aSTNENode0 = new ASTNENode(1048);
      // Undeclared exception!
      try { 
        aSTNENode0.jjtAccept((ParserVisitor) null, "Bj0!CP_%");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.ASTNENode", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ASTNENode aSTNENode0 = new ASTNENode((Parser) null, 0);
      OperatorController operatorController0 = OperatorController.INSTANCE;
      Object object0 = aSTNENode0.jjtAccept(operatorController0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ASTNENode aSTNENode0 = new ASTNENode((-2456));
      StringReader stringReader0 = new StringReader("3O[+&Fm`65Bu[v");
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      Parser parser0 = new Parser(streamProvider0);
      FeatureController featureController0 = parser0.featureController;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, 98);
      Object object0 = aSTNENode0.jjtAccept(featureController0, pushbackInputStream0);
      assertSame(object0, pushbackInputStream0);
  }
}
