/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 17:40:46 GMT 2022
 */

package org.apache.commons.jexl3.internal.introspection;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.StringTokenizer;
import java.util.Vector;
import org.apache.commons.jexl3.JexlArithmetic;
import org.apache.commons.jexl3.JexlOperator;
import org.apache.commons.jexl3.internal.introspection.Introspector;
import org.apache.commons.jexl3.internal.introspection.MethodKey;
import org.apache.commons.jexl3.internal.introspection.Permissions;
import org.apache.commons.jexl3.internal.introspection.SandboxUberspect;
import org.apache.commons.jexl3.internal.introspection.Uberspect;
import org.apache.commons.jexl3.introspection.JexlSandbox;
import org.apache.commons.jexl3.introspection.JexlUberspect;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.impl.Jdk13LumberjackLogger;
import org.apache.commons.logging.impl.Jdk14Logger;
import org.apache.commons.logging.impl.NoOpLog;
import org.apache.commons.logging.impl.SimpleLog;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Uberspect_ESTest extends Uberspect_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("ij");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = new Permissions();
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0, permissions0);
      uberspect0.getPropertyGet((Object) "ij", (Object) jdk14Logger0);
      assertEquals(1, uberspect0.getVersion());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleLog simpleLog0 = new SimpleLog("HB_,b!_#5jz~/;y");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(simpleLog0, jexlUberspect_ResolverStrategy0);
      uberspect0.base();
      int int0 = uberspect0.getVersion();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("@");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0);
      Class<SQLWarning> class0 = SQLWarning.class;
      uberspect0.getMethods(class0, "@");
      assertEquals(1, uberspect0.getVersion());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog("iterator");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0, permissions0);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      uberspect0.getMethods(class0, "iterator");
      assertEquals(1, uberspect0.getVersion());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("");
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, (JexlUberspect.ResolverStrategy) null);
      uberspect0.getMethodNames((Class<?>) null);
      assertEquals(1, uberspect0.getVersion());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger("all");
      Permissions permissions0 = new Permissions();
      Uberspect uberspect0 = new Uberspect(jdk13LumberjackLogger0, (JexlUberspect.ResolverStrategy) null, permissions0);
      Class<SQLDataException> class0 = SQLDataException.class;
      Object[] objectArray0 = new Object[9];
      MethodKey methodKey0 = new MethodKey("all", objectArray0);
      uberspect0.getMethod(class0, methodKey0);
      assertEquals(1, uberspect0.getVersion());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("iterator");
      Permissions permissions0 = new Permissions();
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, (JexlUberspect.ResolverStrategy) null, permissions0);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      Object[] objectArray0 = new Object[0];
      uberspect0.getMethod(class0, "iterator", objectArray0);
      assertEquals(1, uberspect0.getVersion());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("7");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0, permissions0);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      uberspect0.getFieldNames(class0);
      assertEquals(1, uberspect0.getVersion());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleLog simpleLog0 = new SimpleLog("Kh");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect(simpleLog0, jexlUberspect_ResolverStrategy0, permissions0);
      Class<String> class0 = String.class;
      uberspect0.getConstructor(class0, (Object[]) null);
      assertEquals(1, uberspect0.getVersion());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog();
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0);
      uberspect0.getClassByName("org.apache.commons.jexl3.internal.Closure$1");
      assertEquals(1, uberspect0.getVersion());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("org.apache.commons.jexl3.internal.introspection.Uberspect$1");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0);
      uberspect0.getClassByName("org.apache.commons.jexl3.internal.introspection.Uberspect$1");
      assertEquals(1, uberspect0.getVersion());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleLog simpleLog0 = new SimpleLog("F5r))y");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Uberspect uberspect0 = new Uberspect(simpleLog0, jexlUberspect_ResolverStrategy0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "org.apache.commons.jexl3.internal.introspection.Uberspect");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.apache.commons.jexl3.internal.introspection.Uberspect", "", 1, sQLTimeoutException0);
      // Undeclared exception!
      try { 
        uberspect0.getPropertySet((Object) null, (Object) jexlUberspect_ResolverStrategy0, (Object) sQLFeatureNotSupportedException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.introspection.Uberspect", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Permissions permissions0 = new Permissions();
      Uberspect uberspect0 = new Uberspect((Log) null, jexlUberspect_ResolverStrategy0, permissions0);
      // Undeclared exception!
      try { 
        uberspect0.getPropertySet((Object) permissions0, (Object) jexlUberspect_ResolverStrategy0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.introspection.ClassMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Uberspect uberspect0 = new Uberspect((Log) null, jexlUberspect_ResolverStrategy0);
      List<JexlUberspect.PropertyResolver> list0 = JexlUberspect.MAP;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      DataTruncation dataTruncation0 = new DataTruncation((-3404), false, true, (-3404), (-3404), sQLClientInfoException0);
      // Undeclared exception!
      try { 
        uberspect0.getPropertyGet(list0, (Object) "[WARN] ", (Object) dataTruncation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.introspection.ClassMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog("9)L");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0, permissions0);
      Class<SQLDataException> class0 = SQLDataException.class;
      // Undeclared exception!
      try { 
        uberspect0.getPropertyGet((Object) null, (Object) class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.introspection.Uberspect", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Uberspect uberspect0 = new Uberspect((Log) null, jexlUberspect_ResolverStrategy0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", 14);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", sQLIntegrityConstraintViolationException0);
      SQLDataException sQLDataException0 = new SQLDataException("", "org.apache.commons.jexl3.parser.JexlLexicalNode", sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        uberspect0.getPropertyGet((Object) sQLDataException0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.introspection.ClassMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Uberspect uberspect0 = new Uberspect((Log) null, jexlUberspect_ResolverStrategy0);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      // Undeclared exception!
      try { 
        uberspect0.getMethodNames(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.introspection.ClassMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog("'GyaDmSh");
      Uberspect uberspect0 = new Uberspect(noOpLog0, (JexlUberspect.ResolverStrategy) null);
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        uberspect0.getMethod((Object) null, "", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.introspection.MethodExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Uberspect uberspect0 = new Uberspect((Log) null, (JexlUberspect.ResolverStrategy) null);
      SQLDataException sQLDataException0 = new SQLDataException("&d~", "", (-4543));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("&d~", sQLDataException0);
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        uberspect0.getMethod((Object) sQLInvalidAuthorizationSpecException0, ".", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.introspection.ClassMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger("org.apache.commons.jexl3.internal.introspection.Uberspect$1");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(jdk13LumberjackLogger0, jexlUberspect_ResolverStrategy0);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        uberspect0.getMethod(class0, (MethodKey) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog("unable to solve iterator()");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0, permissions0);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        uberspect0.getMethod((Class<?>) class0, (String) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.introspection.MethodKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect((Log) null, (JexlUberspect.ResolverStrategy) null, permissions0);
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.jexl3.internal.Interpreter", "unable to solve iterator()");
      StackTraceElement[] stackTraceElementArray0 = sQLDataException0.getStackTrace();
      Class<JexlOperator> class0 = JexlOperator.class;
      // Undeclared exception!
      try { 
        uberspect0.getMethod((Class<?>) class0, "org.apache.commons.jexl3.internal.Interpreter", (Object[]) stackTraceElementArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.introspection.ClassMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog("");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0, permissions0);
      // Undeclared exception!
      try { 
        uberspect0.getIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.introspection.Uberspect", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect((Log) null, jexlUberspect_ResolverStrategy0, permissions0);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      // Undeclared exception!
      try { 
        uberspect0.getFieldNames(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.introspection.ClassMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = new Permissions();
      Uberspect uberspect0 = new Uberspect((Log) null, jexlUberspect_ResolverStrategy0, permissions0);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      // Undeclared exception!
      try { 
        uberspect0.getField(class0, "org.apache.commons.jexl3.JexlEngine$EmptyNamespaceResolver");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.introspection.ClassMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleLog simpleLog0 = new SimpleLog("org.apache.commons.jexl3.internal.introspection.Uberspect$1");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Uberspect uberspect0 = new Uberspect(simpleLog0, jexlUberspect_ResolverStrategy0, (Permissions) null);
      // Undeclared exception!
      try { 
        uberspect0.getClassByName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("H'M_h0S^bn]Dy");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0);
      List<JexlUberspect.PropertyResolver> list0 = JexlUberspect.MAP;
      Integer integer0 = new Integer((-4));
      uberspect0.getPropertySet(list0, (Object) integer0, (Object) "H'M_h0S^bn]Dy", (Object) integer0);
      assertEquals(1, uberspect0.getVersion());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("7");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0, permissions0);
      List<JexlUberspect.PropertyResolver> list0 = JexlUberspect.POJO;
      uberspect0.getPropertySet(list0, (Object) jexlUberspect_ResolverStrategy0, (Object) jdk14Logger0, (Object) jdk14Logger0);
      assertEquals(1, uberspect0.getVersion());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = new Permissions();
      Uberspect uberspect0 = new Uberspect((Log) null, jexlUberspect_ResolverStrategy0, permissions0);
      Introspector introspector0 = uberspect0.base();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLWarning sQLWarning0 = new SQLWarning(sQLTransientException0);
      // Undeclared exception!
      try { 
        uberspect0.getPropertySet((List<JexlUberspect.PropertyResolver>) null, (Object) sQLTransientException0, (Object) introspector0, (Object) sQLWarning0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.introspection.ClassMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleLog simpleLog0 = new SimpleLog("?(a-_&v");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Uberspect uberspect0 = new Uberspect(simpleLog0, jexlUberspect_ResolverStrategy0);
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      uberspect0.getPropertyGet((List<JexlUberspect.PropertyResolver>) null, (Object) jexlSandbox0, (Object) "~ error");
      assertEquals(1, uberspect0.getVersion());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog("");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0, permissions0);
      Class<Object> class0 = Object.class;
      uberspect0.getField(class0, "");
      uberspect0.getIterator("");
      assertEquals(1, uberspect0.getVersion());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog("");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0, permissions0);
      JexlOperator jexlOperator0 = JexlOperator.SELF_MULTIPLY;
      uberspect0.getResolvers(jexlOperator0, jexlOperator0);
      assertEquals(0, uberspect0.getVersion());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("");
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, (JexlUberspect.ResolverStrategy) null);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      uberspect0.getArithmetic(jexlArithmetic0);
      uberspect0.getArithmetic(jexlArithmetic0);
      assertEquals(0, uberspect0.getVersion());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog("4e'|`88Qv7");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0, permissions0);
      uberspect0.getArithmetic((JexlArithmetic) null);
      assertEquals(0, uberspect0.getVersion());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog("");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0, permissions0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      JexlArithmetic.Uberspect jexlArithmetic_Uberspect0 = uberspect0.getArithmetic(jexlArithmetic0);
      JexlOperator jexlOperator0 = JexlOperator.GTE;
      boolean boolean0 = jexlArithmetic_Uberspect0.overloads(jexlOperator0);
      assertFalse(boolean0);
      assertEquals(0, uberspect0.getVersion());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog("");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0, permissions0);
      Class<String> class0 = String.class;
      String[] stringArray0 = uberspect0.getFieldNames(class0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      JexlArithmetic.Uberspect jexlArithmetic_Uberspect0 = uberspect0.getArithmetic(jexlArithmetic0);
      JexlOperator jexlOperator0 = JexlOperator.GTE;
      jexlArithmetic_Uberspect0.getOperator(jexlOperator0, stringArray0);
      assertEquals(1, uberspect0.getVersion());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Uberspect uberspect0 = new Uberspect((Log) null, jexlUberspect_ResolverStrategy0);
      uberspect0.getIterator("");
      assertEquals(1, uberspect0.getVersion());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Class<SQLDataException> class0 = SQLDataException.class;
      NoOpLog noOpLog0 = new NoOpLog();
      Uberspect uberspect0 = new Uberspect(noOpLog0, (JexlUberspect.ResolverStrategy) null);
      uberspect0.getIterator(class0);
      assertEquals(1, uberspect0.getVersion());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleLog simpleLog0 = new SimpleLog("HB_,b!_#5jz~/;y");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Uberspect uberspect0 = new Uberspect(simpleLog0, jexlUberspect_ResolverStrategy0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("HB_,b!_#5jz~/;y");
      Iterator<?> iterator0 = uberspect0.getIterator(stringTokenizer0);
      uberspect0.getIterator(iterator0);
      assertEquals(0, uberspect0.getVersion());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("7");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0, permissions0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("7", "7");
      uberspect0.getIterator(sQLTransactionRollbackException0);
      assertEquals(0, uberspect0.getVersion());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog("false");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0, permissions0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("false", "false");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("false", "false", (-4), sQLTimeoutException0);
      uberspect0.getPropertySet((Object) classLoader0, (Object) "false", (Object) sQLNonTransientConnectionException0);
      assertEquals(1, uberspect0.getVersion());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("@");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0);
      List<JexlUberspect.PropertyResolver> list0 = JexlUberspect.MAP;
      Integer integer0 = new Integer((-1507));
      uberspect0.getPropertySet(list0, (Object) list0, (Object) integer0, (Object) jexlUberspect_ResolverStrategy0);
      assertEquals(1, uberspect0.getVersion());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("oeo/}");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0);
      Vector<JexlUberspect.PropertyResolver> vector0 = new Vector<JexlUberspect.PropertyResolver>();
      vector0.add((JexlUberspect.PropertyResolver) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      // Undeclared exception!
      try { 
        uberspect0.getPropertySet((List<JexlUberspect.PropertyResolver>) vector0, (Object) jdk14Logger0, (Object) vector0, (Object) sQLNonTransientConnectionException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.introspection.Uberspect", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog(">dL~HJJ/$");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0);
      ClassLoader classLoader0 = uberspect0.getClassLoader();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      int[] intArray0 = new int[2];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("g:7H/Eqx", intArray0);
      Vector<JexlUberspect.PropertyResolver> vector0 = new Vector<JexlUberspect.PropertyResolver>();
      uberspect0.getPropertySet((List<JexlUberspect.PropertyResolver>) vector0, (Object) jexlArithmetic0, (Object) batchUpdateException0, (Object) classLoader0);
      assertEquals(1, uberspect0.getVersion());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("oeo/}");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0);
      Class<DataTruncation> class0 = DataTruncation.class;
      Vector<JexlUberspect.PropertyResolver> vector0 = new Vector<JexlUberspect.PropertyResolver>();
      vector0.add((JexlUberspect.PropertyResolver) null);
      // Undeclared exception!
      try { 
        uberspect0.getPropertyGet((List<JexlUberspect.PropertyResolver>) vector0, (Object) class0, (Object) uberspect0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.introspection.Uberspect", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog("");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0, permissions0);
      Vector<JexlUberspect.PropertyResolver> vector0 = new Vector<JexlUberspect.PropertyResolver>();
      uberspect0.getPropertyGet((List<JexlUberspect.PropertyResolver>) vector0, (Object) class0, (Object) "");
      assertEquals(1, uberspect0.getVersion());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog();
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0);
      ClassLoader classLoader0 = uberspect0.getClassLoader();
      Object[] objectArray0 = new Object[2];
      uberspect0.getConstructor(noOpLog0, objectArray0);
      uberspect0.setClassLoader(classLoader0);
      assertEquals(2, uberspect0.getVersion());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("");
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, (JexlUberspect.ResolverStrategy) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      uberspect0.setClassLoader(classLoader0);
      assertEquals(1, uberspect0.getVersion());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog("");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0, permissions0);
      Class<String> class0 = String.class;
      uberspect0.getFieldNames(class0);
      uberspect0.getPropertyGet((List<JexlUberspect.PropertyResolver>) null, (Object) class0, (Object) null);
      assertEquals(1, uberspect0.getVersion());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleLog simpleLog0 = new SimpleLog("F5r))y");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Uberspect uberspect0 = new Uberspect(simpleLog0, jexlUberspect_ResolverStrategy0);
      Object[] objectArray0 = new Object[2];
      uberspect0.getMethod((Object) "", "6kj0+R2'8Q", objectArray0);
      assertEquals(1, uberspect0.getVersion());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("Y!#j6g8f]W= FUbd");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0, (Permissions) null);
      int int0 = uberspect0.getVersion();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect((Log) null, jexlUberspect_ResolverStrategy0);
      Class<SQLWarning> class0 = SQLWarning.class;
      // Undeclared exception!
      try { 
        uberspect0.getMethods(class0, "org.apache.commons.jexl3.internal.InterpreterBase");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.introspection.ClassMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog("");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0, permissions0);
      Class<SQLException> class0 = SQLException.class;
      uberspect0.getMethodNames(class0);
      assertEquals(1, uberspect0.getVersion());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog("");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0, permissions0);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      uberspect0.getPropertyGet((Object) class0, (Object) "");
      assertEquals(1, uberspect0.getVersion());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("Y!#j6g8f]W= FUbd");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0, (Permissions) null);
      Object[] objectArray0 = new Object[7];
      MethodKey methodKey0 = new MethodKey("V+dY!Xm", objectArray0);
      // Undeclared exception!
      try { 
        uberspect0.getMethod((Class<?>) null, methodKey0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("Y!#j6g8f]W= FUbd");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0, (Permissions) null);
      uberspect0.getClassByName("V+dY!Xm");
      assertEquals(1, uberspect0.getVersion());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("oeo/}");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0);
      Class<DataTruncation> class0 = DataTruncation.class;
      Object[] objectArray0 = new Object[5];
      uberspect0.getMethod(class0, "oeo/}", objectArray0);
      assertEquals(1, uberspect0.getVersion());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog();
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0);
      JexlSandbox jexlSandbox0 = new JexlSandbox(false);
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      JexlOperator jexlOperator0 = JexlOperator.ENDSWITH;
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("?", intArray0);
      List<JexlUberspect.PropertyResolver> list0 = sandboxUberspect0.getResolvers(jexlOperator0, batchUpdateException0);
      Integer integer0 = Integer.valueOf((-832));
      uberspect0.getPropertyGet(list0, (Object) batchUpdateException0, (Object) integer0);
      assertEquals(1, sandboxUberspect0.getVersion());
      assertEquals(1, uberspect0.getVersion());
  }
}
