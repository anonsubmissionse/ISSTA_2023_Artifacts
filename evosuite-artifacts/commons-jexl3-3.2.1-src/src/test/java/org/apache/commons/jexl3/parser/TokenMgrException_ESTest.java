/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 18:02:03 GMT 2022
 */

package org.apache.commons.jexl3.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.jexl3.parser.TokenMgrException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TokenMgrException_ESTest extends TokenMgrException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TokenMgrException tokenMgrException0 = new TokenMgrException(true, 2282, 2282, 10, "_", 0, 0);
      String string0 = tokenMgrException0.getMessage();
      assertEquals("Lexical error at line 2282, column 10.  Encountered: <EOF> after : \"_\"", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TokenMgrException tokenMgrException0 = new TokenMgrException(true, 2282, 2282, 10, "_", 0, 0);
      int int0 = tokenMgrException0.getLine();
      assertEquals(2282, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TokenMgrException tokenMgrException0 = new TokenMgrException(true, 0, (-1356), 0, "", 74, 0);
      int int0 = tokenMgrException0.getLine();
      assertEquals((-1356), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TokenMgrException tokenMgrException0 = new TokenMgrException((String) null, 1);
      int int0 = tokenMgrException0.getErrorCode();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TokenMgrException tokenMgrException0 = new TokenMgrException(false, 0, 0, 0, "0@<itq'0;LBUEco", 0, (-2394));
      int int0 = tokenMgrException0.getErrorCode();
      assertEquals((-2394), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TokenMgrException tokenMgrException0 = new TokenMgrException(true, 2282, 2282, 10, "_", 0, 0);
      int int0 = tokenMgrException0.getColumn();
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TokenMgrException tokenMgrException0 = new TokenMgrException(true, (-1738), (-1), (-1738), "cY2P E4N$ %#", (-1), (-1738));
      int int0 = tokenMgrException0.getColumn();
      assertEquals((-1738), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TokenMgrException tokenMgrException0 = new TokenMgrException("*{_3;>!5", (-1));
      String string0 = tokenMgrException0.getAfter();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TokenMgrException tokenMgrException0 = new TokenMgrException(true, 0, 0, 0, ";x=B~L//\"f+10", 0, 0);
      String string0 = tokenMgrException0.getAfter();
      assertEquals(";x=B~L//\"f+10", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = TokenMgrException.addEscapes("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        TokenMgrException.addEscapes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.TokenMgrException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = TokenMgrException.addEscapes("2j/V.]qch~aFQOm&fgy");
      assertEquals("2j////V.]qch~aFQOm&f//u007fgy", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = TokenMgrException.addEscapes("FXyY'|k9H)ip#");
      assertEquals("FXyY//'|k9H)ip#", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = TokenMgrException.addEscapes("Lexical error at line 0, column 0.  Encountered: \"\" (0), after : null");
      assertEquals("Lexical error at line 0, column 0.  Encountered: //\"//\" (0), after : null", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TokenMgrException tokenMgrException0 = new TokenMgrException("", (-9));
      String string0 = tokenMgrException0.getMessage();
      assertEquals("Lexical error at line 0, column 0.  Encountered: \"\" (0), after : null", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TokenMgrException tokenMgrException0 = new TokenMgrException(true, 0, 0, 0, "", 0, 0);
      int int0 = tokenMgrException0.getColumn();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TokenMgrException tokenMgrException0 = new TokenMgrException(true, 0, 0, 0, "", 0, 0);
      String string0 = tokenMgrException0.getAfter();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TokenMgrException tokenMgrException0 = new TokenMgrException(true, 0, 0, 0, "", 0, 0);
      int int0 = tokenMgrException0.getErrorCode();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TokenMgrException tokenMgrException0 = new TokenMgrException("", (-9));
      int int0 = tokenMgrException0.getLine();
      assertEquals(0, int0);
  }
}
