/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 18:10:55 GMT 2022
 */

package org.apache.commons.jexl3.internal.introspection;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Method;
import org.apache.commons.jexl3.internal.introspection.Introspector;
import org.apache.commons.jexl3.internal.introspection.Permissions;
import org.apache.commons.jexl3.internal.introspection.PropertyGetExecutor;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.impl.NoOpLog;
import org.apache.commons.logging.impl.SimpleLog;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PropertyGetExecutor_ESTest extends PropertyGetExecutor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = Permissions.DEFAULT;
      Introspector introspector0 = new Introspector((Log) null, classLoader0, permissions0);
      Class<Object> class0 = Object.class;
      Method method0 = PropertyGetExecutor.discoverGet(introspector0, "/TEHdp", class0, "/TEHdp");
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        PropertyGetExecutor.discoverGet((Introspector) null, "gID^p2", class0, "get");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.introspection.PropertyGetExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector((Log) null, classLoader0);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        PropertyGetExecutor.discoverGet(introspector0, "MRXX]$kt(PG1", class0, "MRXX]$kt(PG1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.introspection.ClassMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        PropertyGetExecutor.discover((Introspector) null, class0, "<6*e\"5`5XrwB!");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.introspection.PropertyGetExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = Permissions.DEFAULT;
      Class<String> class0 = String.class;
      Introspector introspector0 = new Introspector((Log) null, classLoader0, permissions0);
      // Undeclared exception!
      try { 
        PropertyGetExecutor.discover(introspector0, class0, "E(MEX");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.introspection.ClassMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SimpleLog simpleLog0 = new SimpleLog("l");
      Class<Object> class0 = Object.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector(simpleLog0, classLoader0);
      PropertyGetExecutor propertyGetExecutor0 = PropertyGetExecutor.discover(introspector0, class0, "");
      assertNull(propertyGetExecutor0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog((String) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector(noOpLog0, classLoader0);
      Class<Object> class0 = Object.class;
      PropertyGetExecutor propertyGetExecutor0 = PropertyGetExecutor.discover(introspector0, class0, (String) null);
      assertNull(propertyGetExecutor0);
  }
}
