/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 17:54:39 GMT 2022
 */

package org.apache.commons.jexl3.internal.introspection;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Method;
import org.apache.commons.jexl3.internal.introspection.Introspector;
import org.apache.commons.jexl3.internal.introspection.Permissions;
import org.apache.commons.jexl3.internal.introspection.PropertySetExecutor;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.impl.Jdk13LumberjackLogger;
import org.apache.commons.logging.impl.Jdk14Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PropertySetExecutor_ESTest extends PropertySetExecutor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<String> class0 = String.class;
      Permissions permissions0 = Permissions.DEFAULT;
      PropertySetExecutor propertySetExecutor0 = new PropertySetExecutor(class0, (Method) null, "source URL is null", permissions0);
      Object object0 = propertySetExecutor0.invoke(class0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PropertySetExecutor propertySetExecutor0 = new PropertySetExecutor(class0, (Method) null, (String) null, class0);
      Object object0 = propertySetExecutor0.getTargetProperty();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        PropertySetExecutor.discover((Introspector) null, class0, "z:ji[&l9eHjR4]", class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.introspection.PropertySetExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector((Log) null, classLoader0);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        PropertySetExecutor.discover(introspector0, class0, "#A`x_&YQ", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.introspection.ClassMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<String> class0 = String.class;
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger(">S{l[2-\"7J9dA9H");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector(jdk13LumberjackLogger0, classLoader0);
      PropertySetExecutor propertySetExecutor0 = PropertySetExecutor.discover(introspector0, class0, ">S{l[2-\"7J9dA9H", (Object) null);
      assertNull(propertySetExecutor0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<String> class0 = String.class;
      PropertySetExecutor propertySetExecutor0 = new PropertySetExecutor(class0, (Method) null, ">G", class0);
      Object object0 = propertySetExecutor0.tryInvoke(">G", ">G", propertySetExecutor0);
      Object object1 = propertySetExecutor0.tryInvoke((Object) null, object0, (Object) null);
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("OG`-(j2VY\"I");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = new Permissions();
      Introspector introspector0 = new Introspector(jdk14Logger0, classLoader0, permissions0);
      PropertySetExecutor propertySetExecutor0 = new PropertySetExecutor(class0, (Method) null, "OG`-(j2VY\"I", introspector0);
      Class class1 = (Class)propertySetExecutor0.invoke(class0, class0);
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PropertySetExecutor propertySetExecutor0 = PropertySetExecutor.discover((Introspector) null, class0, "", (Object) null);
      assertNull(propertySetExecutor0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("OG`-(j2VY\"I");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = new Permissions();
      Introspector introspector0 = new Introspector(jdk14Logger0, classLoader0, permissions0);
      PropertySetExecutor propertySetExecutor0 = PropertySetExecutor.discover(introspector0, class0, "OG`-(j2VY\"I", jdk14Logger0);
      assertNull(propertySetExecutor0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PropertySetExecutor propertySetExecutor0 = PropertySetExecutor.discover((Introspector) null, class0, (String) null, (Object) null);
      assertNull(propertySetExecutor0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("OG`-(j2VY\"I");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = new Permissions();
      Introspector introspector0 = new Introspector(jdk14Logger0, classLoader0, permissions0);
      PropertySetExecutor propertySetExecutor0 = new PropertySetExecutor(class0, (Method) null, "OG`-(j2VY\"I", introspector0);
      Object object0 = propertySetExecutor0.getTargetProperty();
      assertEquals("OG`-(j2VY\"I", object0);
  }
}
