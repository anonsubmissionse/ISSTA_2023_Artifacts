/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 18:05:27 GMT 2022
 */

package org.apache.commons.jexl3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.MathContext;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.jexl3.JexlBuilder;
import org.apache.commons.jexl3.JexlEngine;
import org.apache.commons.jexl3.JexlOptions;
import org.apache.commons.jexl3.internal.Engine;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JexlOptions_ESTest extends JexlOptions_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "\"null\"";
      stringArray0[1] = "%EihMN,O:$";
      stringArray0[2] = " : not supported yet.";
      stringArray0[3] = "!= error";
      stringArray0[4] = "(%kW7";
      stringArray0[5] = "O%IVdu/\"ke";
      stringArray0[6] = "Wt._Gb`D0KAnKe1";
      JexlOptions.setDefaultFlags(stringArray0);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      assertTrue(jexlOptions0.isStrictArithmetic());
      
      jexlOptions0.setStrictArithmetic(false);
      jexlOptions0.set(jexlOptions0);
      assertFalse(jexlOptions0.isStrictArithmetic());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setStrict(false);
      JexlOptions jexlOptions1 = jexlOptions0.set(jexlOptions0);
      assertFalse(jexlOptions1.isSilent());
      assertFalse(jexlOptions0.isStrict());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setSilent(true);
      JexlOptions jexlOptions1 = jexlOptions0.set(jexlOptions0);
      assertTrue(jexlOptions0.isSilent());
      assertTrue(jexlOptions1.isStrict());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setSharedInstance(true);
      JexlOptions jexlOptions1 = jexlOptions0.set(jexlOptions0);
      assertTrue(jexlOptions0.isSharedInstance());
      assertTrue(jexlOptions1.isStrict());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setSafe(false);
      JexlOptions jexlOptions1 = jexlOptions0.set(jexlOptions0);
      assertFalse(jexlOptions0.isSafe());
      assertFalse(jexlOptions1.isLexical());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      assertTrue(jexlOptions0.isCancellable());
      
      jexlOptions0.setCancellable(false);
      jexlOptions0.set(jexlOptions0);
      assertFalse(jexlOptions0.isCancellable());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setAntish(false);
      JexlOptions jexlOptions1 = jexlOptions0.set(jexlOptions0);
      assertTrue(jexlOptions1.isSafe());
      assertFalse(jexlOptions0.isAntish());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      assertEquals(Integer.MIN_VALUE, jexlOptions0.getMathScale());
      
      jexlOptions0.setMathScale(0);
      jexlOptions0.set(jexlOptions0);
      assertEquals(0, jexlOptions0.getMathScale());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setMathScale(130);
      jexlOptions0.set(jexlOptions0);
      assertEquals(130, jexlOptions0.getMathScale());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.strict(false);
      Engine engine0 = new Engine(jexlBuilder0);
      jexlOptions0.set((JexlEngine) engine0);
      assertEquals((-1), jexlOptions0.getMathScale());
      assertFalse(jexlBuilder0.strict());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.setSharedInstance(true);
      JexlOptions jexlOptions1 = jexlOptions0.set((JexlEngine) null);
      assertTrue(jexlOptions0.isSharedInstance());
      assertFalse(jexlOptions1.isSilent());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setSafe(false);
      JexlOptions jexlOptions1 = jexlOptions0.set((JexlEngine) null);
      assertFalse(jexlOptions0.isSafe());
      assertFalse(jexlOptions1.isSharedInstance());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.setLexicalShade(true);
      JexlOptions jexlOptions1 = jexlOptions0.set((JexlEngine) null);
      assertTrue(jexlOptions0.isLexicalShade());
      assertFalse(jexlOptions1.isSharedInstance());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      JexlBuilder jexlBuilder1 = jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder1);
      jexlOptions0.set((JexlEngine) engine0);
      assertTrue(jexlOptions0.isSilent());
      assertEquals((-1), jexlOptions0.getMathScale());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      assertEquals(Integer.MIN_VALUE, jexlOptions0.getMathScale());
      
      jexlOptions0.setMathScale(0);
      jexlOptions0.set((JexlEngine) null);
      assertEquals(0, jexlOptions0.getMathScale());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setMathScale(2320);
      jexlOptions0.set((JexlEngine) null);
      assertEquals(2320, jexlOptions0.getMathScale());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[0];
      int int0 = JexlOptions.parseFlags(0, stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[0];
      int int0 = JexlOptions.parseFlags((-1227), stringArray0);
      assertEquals((-1227), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      assertTrue(jexlOptions0.isStrictArithmetic());
      
      jexlOptions0.setStrictArithmetic(false);
      boolean boolean0 = jexlOptions0.isStrictArithmetic();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      assertTrue(jexlOptions0.isStrict());
      
      jexlOptions0.setStrict(false);
      boolean boolean0 = jexlOptions0.isStrict();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      assertFalse(jexlOptions0.isSilent());
      
      jexlOptions0.setSilent(true);
      boolean boolean0 = jexlOptions0.isSilent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      assertFalse(jexlOptions0.isSharedInstance());
      
      jexlOptions0.setSharedInstance(true);
      boolean boolean0 = jexlOptions0.isSharedInstance();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      assertTrue(jexlOptions0.isSafe());
      
      jexlOptions0.setSafe(false);
      boolean boolean0 = jexlOptions0.isSafe();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlBuilder0.lexicalShade(true);
      boolean boolean0 = jexlOptions0.isLexicalShade();
      assertTrue(jexlOptions0.isLexical());
      assertFalse(jexlOptions0.isSharedInstance());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.setLexicalShade(true);
      boolean boolean0 = jexlOptions0.isLexical();
      assertTrue(jexlOptions0.isLexicalShade());
      assertFalse(jexlOptions0.isSharedInstance());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      assertTrue(jexlOptions0.isCancellable());
      
      jexlOptions0.setCancellable(false);
      boolean boolean0 = jexlOptions0.isCancellable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.antish(false);
      JexlEngine jexlEngine0 = jexlBuilder1.create();
      jexlOptions0.set(jexlEngine0);
      boolean boolean0 = jexlOptions0.isAntish();
      assertEquals((-1), jexlOptions0.getMathScale());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      jexlBuilder0.namespaces((Map<String, Object>) hashMap0);
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.getNamespaces();
      assertTrue(jexlOptions0.isCancellable());
      assertEquals(Integer.MIN_VALUE, jexlOptions0.getMathScale());
      assertTrue(jexlOptions0.isStrictArithmetic());
      assertFalse(jexlOptions0.isSilent());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = new Object();
      hashMap0.put("r 5ui8", object0);
      JexlBuilder jexlBuilder1 = jexlBuilder0.namespaces((Map<String, Object>) hashMap0);
      Engine engine0 = new Engine(jexlBuilder1);
      JexlOptions jexlOptions0 = new JexlOptions();
      assertEquals(Integer.MIN_VALUE, jexlOptions0.getMathScale());
      
      engine0.optionsSet(jexlOptions0);
      jexlOptions0.getNamespaces();
      assertEquals((-1), jexlOptions0.getMathScale());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      assertEquals(Integer.MIN_VALUE, jexlOptions0.getMathScale());
      
      jexlOptions0.setMathScale(0);
      int int0 = jexlOptions0.getMathScale();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setMathScale(1327);
      int int0 = jexlOptions0.getMathScale();
      assertEquals(1327, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setStrict(false);
      JexlOptions jexlOptions1 = jexlOptions0.copy();
      assertFalse(jexlOptions1.isSilent());
      assertFalse(jexlOptions0.isStrict());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.silent(true);
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      JexlOptions jexlOptions1 = jexlOptions0.copy();
      assertTrue(jexlOptions1.isStrict());
      assertTrue(jexlBuilder0.silent());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.setSharedInstance(true);
      JexlOptions jexlOptions1 = jexlOptions0.copy();
      assertTrue(jexlOptions0.isSharedInstance());
      assertTrue(jexlOptions1.isSafe());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setSafe(false);
      jexlOptions0.copy();
      assertFalse(jexlOptions0.isSafe());
      assertFalse(jexlOptions0.isLexicalShade());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.setLexicalShade(true);
      JexlOptions jexlOptions1 = jexlOptions0.copy();
      assertTrue(jexlOptions1.isSafe());
      assertTrue(jexlOptions0.isLexicalShade());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      assertTrue(jexlOptions0.isCancellable());
      
      jexlOptions0.setCancellable(false);
      jexlOptions0.copy();
      assertFalse(jexlOptions0.isCancellable());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setAntish(false);
      JexlOptions jexlOptions1 = jexlOptions0.copy();
      assertFalse(jexlOptions0.isAntish());
      assertFalse(jexlOptions1.isSharedInstance());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      assertEquals(Integer.MIN_VALUE, jexlOptions0.getMathScale());
      
      jexlOptions0.setMathScale(0);
      jexlOptions0.copy();
      assertEquals(0, jexlOptions0.getMathScale());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setMathScale(2320);
      jexlOptions0.copy();
      assertEquals(2320, jexlOptions0.getMathScale());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      // Undeclared exception!
      try { 
        jexlOptions0.setFlags(stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        jexlOptions0.setFlags(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlOptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "?";
      stringArray0[1] = "";
      // Undeclared exception!
      try { 
        JexlOptions.setDefaultFlags(stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      // Undeclared exception!
      try { 
        jexlOptions0.set((JexlOptions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlOptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "( $<'&f'|4*ccc";
      stringArray0[1] = "";
      // Undeclared exception!
      try { 
        JexlOptions.parseFlags(1544, stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "2miTzz/v";
      stringArray0[1] = "2miTzz/v";
      stringArray0[2] = "IWNs4 vGC3qomMuwZd";
      stringArray0[3] = "org.apache.commons.logging.impl.Jdk13LumberjackLogger";
      stringArray0[4] = "org.apache.commons.logging.impl.Jdk13LumberjackLogger";
      stringArray0[5] = "org.apache.commons.logging.impl.Jdk13LumberjackLogger";
      stringArray0[6] = "2miTzz/v";
      stringArray0[7] = "org.apache.commons.logging.impl.Jdk13LumberjackLogger";
      stringArray0[8] = "-@;uh6PgYvyb-";
      int int0 = JexlOptions.parseFlags(107, stringArray0);
      assertEquals(107, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "strict";
      stringArray0[1] = "RB|jI!";
      stringArray0[2] = "\"=$\"";
      stringArray0[3] = "safe";
      stringArray0[4] = "+]6=F azNwAnRqIi";
      stringArray0[5] = "DFnt'7^|eCd;";
      stringArray0[6] = "rG$>WBY)rM#ITy>T-ot";
      stringArray0[7] = "=DK}Lu";
      stringArray0[8] = "org.apache.commons.jexl3.parser.ASTNumberLiteral";
      int int0 = JexlOptions.parseFlags(74, stringArray0);
      assertEquals(74, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      boolean boolean0 = jexlOptions0.isSilent();
      assertFalse(boolean0);
      assertTrue(jexlOptions0.isStrictArithmetic());
      assertEquals(Integer.MIN_VALUE, jexlOptions0.getMathScale());
      assertTrue(jexlOptions0.isCancellable());
      assertTrue(jexlOptions0.isSafe());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isStrict();
      assertTrue(jexlOptions0.isStrictArithmetic());
      assertTrue(boolean0);
      assertEquals(Integer.MIN_VALUE, jexlOptions0.getMathScale());
      assertTrue(jexlOptions0.isCancellable());
      assertFalse(jexlOptions0.isLexical());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      MathContext mathContext0 = MathContext.DECIMAL128;
      jexlOptions0.setMathContext(mathContext0);
      assertTrue(jexlOptions0.isStrictArithmetic());
      assertEquals(Integer.MIN_VALUE, jexlOptions0.getMathScale());
      assertTrue(jexlOptions0.isCancellable());
      assertTrue(jexlOptions0.isSafe());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isSafe();
      assertTrue(jexlOptions0.isStrictArithmetic());
      assertTrue(jexlOptions0.isCancellable());
      assertEquals(Integer.MIN_VALUE, jexlOptions0.getMathScale());
      assertFalse(jexlOptions0.isSilent());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      assertTrue(jexlOptions0.isStrictArithmetic());
      
      jexlOptions0.setStrictArithmetic(false);
      jexlOptions0.copy();
      assertFalse(jexlOptions0.isStrictArithmetic());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setNamespaces((Map<String, Object>) null);
      assertTrue(jexlOptions0.isStrictArithmetic());
      assertTrue(jexlOptions0.isAntish());
      assertEquals(Integer.MIN_VALUE, jexlOptions0.getMathScale());
      assertTrue(jexlOptions0.isCancellable());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      Map<String, Object> map0 = jexlOptions0.getNamespaces();
      jexlOptions0.setNamespaces(map0);
      assertTrue(jexlOptions0.isStrictArithmetic());
      assertEquals(Integer.MIN_VALUE, jexlOptions0.getMathScale());
      assertTrue(jexlOptions0.isCancellable());
      assertFalse(jexlOptions0.isLexical());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setLexicalShade(true);
      JexlOptions jexlOptions1 = jexlOptions0.set(jexlOptions0);
      assertFalse(jexlOptions1.isSharedInstance());
      assertTrue(jexlOptions0.isLexical());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setLexicalShade(false);
      assertFalse(jexlOptions0.isLexicalShade());
      assertTrue(jexlOptions0.isStrictArithmetic());
      assertTrue(jexlOptions0.isStrict());
      assertTrue(jexlOptions0.isAntish());
      assertTrue(jexlOptions0.isCancellable());
      assertEquals(Integer.MIN_VALUE, jexlOptions0.getMathScale());
      assertFalse(jexlOptions0.isLexical());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-@;uh6egYvyb-";
      // Undeclared exception!
      try { 
        JexlOptions.setDefaultFlags(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlOptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "strict";
      stringArray0[1] = "+]6=F azNwAnRqIi";
      // Undeclared exception!
      try { 
        JexlOptions.parseFlags(74, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlOptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isLexical();
      assertTrue(jexlOptions0.isStrictArithmetic());
      assertEquals(Integer.MIN_VALUE, jexlOptions0.getMathScale());
      assertTrue(jexlOptions0.isCancellable());
      assertFalse(boolean0);
      assertTrue(jexlOptions0.isStrict());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isAntish();
      assertTrue(jexlOptions0.isCancellable());
      assertEquals(Integer.MIN_VALUE, jexlOptions0.getMathScale());
      assertFalse(jexlOptions0.isSilent());
      assertTrue(jexlOptions0.isStrictArithmetic());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.getMathContext();
      assertTrue(jexlOptions0.isStrictArithmetic());
      assertEquals(Integer.MIN_VALUE, jexlOptions0.getMathScale());
      assertTrue(jexlOptions0.isCancellable());
      assertTrue(jexlOptions0.isAntish());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[0];
      jexlOptions0.setFlags(stringArray0);
      assertEquals(Integer.MIN_VALUE, jexlOptions0.getMathScale());
      assertTrue(jexlOptions0.isCancellable());
      assertFalse(jexlOptions0.isSilent());
      assertTrue(jexlOptions0.isStrictArithmetic());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isSharedInstance();
      assertTrue(jexlOptions0.isStrict());
      assertFalse(boolean0);
      assertEquals(Integer.MIN_VALUE, jexlOptions0.getMathScale());
      assertTrue(jexlOptions0.isCancellable());
      assertTrue(jexlOptions0.isStrictArithmetic());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isCancellable();
      assertTrue(jexlOptions0.isStrictArithmetic());
      assertTrue(jexlOptions0.isStrict());
      assertTrue(boolean0);
      assertFalse(jexlOptions0.isSharedInstance());
      assertEquals(Integer.MIN_VALUE, jexlOptions0.getMathScale());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.setLexical(false);
      assertTrue(jexlOptions0.isStrictArithmetic());
      assertEquals(Integer.MIN_VALUE, jexlOptions0.getMathScale());
      assertTrue(jexlOptions0.isAntish());
      assertFalse(jexlOptions0.isLexical());
      assertTrue(jexlOptions0.isSafe());
      assertTrue(jexlOptions0.isStrict());
      assertTrue(jexlOptions0.isCancellable());
      assertFalse(jexlOptions0.isSharedInstance());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isStrictArithmetic();
      assertTrue(jexlOptions0.isCancellable());
      assertTrue(boolean0);
      assertEquals(Integer.MIN_VALUE, jexlOptions0.getMathScale());
      assertFalse(jexlOptions0.isSilent());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      boolean boolean0 = jexlOptions0.isLexicalShade();
      assertTrue(jexlOptions0.isStrictArithmetic());
      assertEquals(Integer.MIN_VALUE, jexlOptions0.getMathScale());
      assertTrue(jexlOptions0.isCancellable());
      assertTrue(jexlOptions0.isStrict());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      assertEquals(Integer.MIN_VALUE, jexlOptions0.getMathScale());
      
      engine0.optionsSet(jexlOptions0);
      jexlOptions0.getMathContext();
      assertEquals((-1), jexlOptions0.getMathScale());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      int int0 = jexlOptions0.getMathScale();
      assertTrue(jexlOptions0.isCancellable());
      assertEquals(Integer.MIN_VALUE, int0);
      assertTrue(jexlOptions0.isStrictArithmetic());
      assertTrue(jexlOptions0.isSafe());
  }
}
