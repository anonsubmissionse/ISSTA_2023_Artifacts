/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 17:40:32 GMT 2022
 */

package org.apache.commons.jexl3.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.MathContext;
import org.apache.commons.jexl3.JexlArithmetic;
import org.apache.commons.jexl3.JexlBuilder;
import org.apache.commons.jexl3.JexlContext;
import org.apache.commons.jexl3.JexlEngine;
import org.apache.commons.jexl3.JexlOperator;
import org.apache.commons.jexl3.JexlOptions;
import org.apache.commons.jexl3.MapContext;
import org.apache.commons.jexl3.ObjectContext;
import org.apache.commons.jexl3.internal.Engine;
import org.apache.commons.jexl3.internal.Frame;
import org.apache.commons.jexl3.internal.Interpreter;
import org.apache.commons.jexl3.internal.InterpreterBase;
import org.apache.commons.jexl3.internal.Operators;
import org.apache.commons.jexl3.internal.Scope;
import org.apache.commons.jexl3.internal.TemplateInterpreter;
import org.apache.commons.jexl3.introspection.JexlUberspect;
import org.apache.commons.jexl3.parser.ASTAnnotatedStatement;
import org.apache.commons.jexl3.parser.ASTBitwiseComplNode;
import org.apache.commons.jexl3.parser.ASTBitwiseXorNode;
import org.apache.commons.jexl3.parser.ASTConstructorNode;
import org.apache.commons.jexl3.parser.ASTEWNode;
import org.apache.commons.jexl3.parser.ASTEmptyFunction;
import org.apache.commons.jexl3.parser.ASTExtendedLiteral;
import org.apache.commons.jexl3.parser.ASTFalseNode;
import org.apache.commons.jexl3.parser.ASTForeachStatement;
import org.apache.commons.jexl3.parser.ASTFunctionNode;
import org.apache.commons.jexl3.parser.ASTGENode;
import org.apache.commons.jexl3.parser.ASTGTNode;
import org.apache.commons.jexl3.parser.ASTJexlScript;
import org.apache.commons.jexl3.parser.ASTNRNode;
import org.apache.commons.jexl3.parser.ASTNSWNode;
import org.apache.commons.jexl3.parser.ASTSetMultNode;
import org.apache.commons.jexl3.parser.ASTSetXorNode;
import org.apache.commons.jexl3.parser.ASTTrueNode;
import org.apache.commons.jexl3.parser.ASTUnaryMinusNode;
import org.apache.commons.jexl3.parser.JexlNode;
import org.apache.commons.jexl3.parser.Parser;
import org.apache.commons.jexl3.parser.StringProvider;
import org.apache.commons.logging.impl.SimpleLog;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Operators_ESTest extends Operators_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = new JexlOptions();
      Object[] objectArray0 = new Object[0];
      Frame frame0 = new Frame((Scope) null, objectArray0, (-1110));
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      Operators operators0 = new Operators(interpreter0);
      JexlOperator jexlOperator0 = JexlOperator.ARRAY_SET;
      ASTEWNode aSTEWNode0 = new ASTEWNode(0);
      Object object0 = operators0.tryAssignOverload(aSTEWNode0, jexlOperator0, objectArray0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, jexlOptions0);
      Operators operators0 = new Operators(interpreter0);
      ASTForeachStatement aSTForeachStatement0 = new ASTForeachStatement(5);
      JexlOperator jexlOperator0 = JexlOperator.SELF_SUBTRACT;
      jexlOptions0.setStrict(false);
      Object[] objectArray0 = new Object[2];
      Object object0 = operators0.tryAssignOverload(aSTForeachStatement0, jexlOperator0, objectArray0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      jexlBuilder0.strategy(jexlUberspect_ResolverStrategy0);
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = engine0.options((JexlContext) null);
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, jexlOptions0);
      Operators operators0 = interpreter0.operators;
      SimpleLog simpleLog0 = new SimpleLog(")1wJM+#/");
      Parser parser0 = engine0.parser;
      ASTEmptyFunction aSTEmptyFunction0 = new ASTEmptyFunction(parser0, (-1));
      // Undeclared exception!
      try { 
        operators0.endsWith(aSTEmptyFunction0, "IK1$T6-!Fr`~", simpleLog0.LOG_LEVEL_OFF, "org.apache.commons.jexl3.parser.ASTMulNode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ?: JEXL error : IK1$T6-!Fr`~ error
         //
         verifyException("org.apache.commons.jexl3.internal.Operators", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Engine engine0 = new Engine();
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(1);
      MapContext mapContext0 = new MapContext();
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, mapContext0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, (Object[]) null, 921);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      Operators operators0 = new Operators(interpreter0);
      JexlOperator jexlOperator0 = JexlOperator.SELF_MOD;
      Object object0 = operators0.tryOverload(aSTJexlScript0, jexlOperator0, (Object[]) null);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Operators operators0 = new Operators(templateInterpreter0);
      Integer integer0 = new Integer((short)0);
      boolean boolean0 = operators0.contains((JexlNode) null, "D%cm`@", integer0, "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Operators operators0 = new Operators(templateInterpreter0);
      ASTBitwiseComplNode aSTBitwiseComplNode0 = new ASTBitwiseComplNode(0);
      JexlOperator jexlOperator0 = JexlOperator.PROPERTY_GET;
      // Undeclared exception!
      try { 
        operators0.tryAssignOverload(aSTBitwiseComplNode0, jexlOperator0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.Operators", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[2];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-1982));
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = engine0.createInterpreter(jexlEngine_EmptyContext0, frame0, jexlOptions0);
      Operators operators0 = new Operators(interpreter0);
      ASTSetXorNode aSTSetXorNode0 = new ASTSetXorNode((-1982));
      Float float0 = new Float((float) 2);
      // Undeclared exception!
      try { 
        operators0.startsWith(aSTSetXorNode0, "i-hwZ41", float0, "endsWith");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, jexlOptions0);
      Interpreter interpreter1 = new Interpreter(interpreter0, (JexlArithmetic) null);
      Operators operators0 = new Operators(interpreter1);
      ASTForeachStatement aSTForeachStatement0 = new ASTForeachStatement(5);
      Short short0 = new Short((short) (-1845));
      // Undeclared exception!
      try { 
        operators0.startsWith(aSTForeachStatement0, "", aSTForeachStatement0, short0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.Operators", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Engine engine0 = new Engine();
      Parser parser0 = new Parser("");
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(parser0, 432);
      ObjectContext<Object> objectContext0 = new ObjectContext<Object>(engine0, "");
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, objectContext0);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, jexlEngine_EmptyContext0, (Frame) null);
      Operators operators0 = new Operators(interpreter0);
      ASTTrueNode aSTTrueNode0 = new ASTTrueNode(parser0, 432);
      Object object0 = operators0.size(aSTTrueNode0, aSTTrueNode0);
      // Undeclared exception!
      try { 
        operators0.startsWith(aSTJexlScript0, "", aSTJexlScript0, object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 432
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Interpreter interpreter0 = new Interpreter(templateInterpreter0, (JexlArithmetic) null);
      Operators operators0 = new Operators(interpreter0);
      Parser parser0 = engine0.parser;
      ASTGENode aSTGENode0 = new ASTGENode(parser0, (-2850));
      // Undeclared exception!
      try { 
        operators0.size(aSTGENode0, interpreter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.Operators", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      JexlBuilder jexlBuilder1 = jexlBuilder0.strategy(jexlUberspect_ResolverStrategy0);
      Engine engine0 = new Engine(jexlBuilder1);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Operators operators0 = new Operators(templateInterpreter0);
      ASTUnaryMinusNode aSTUnaryMinusNode0 = new ASTUnaryMinusNode((-2637));
      Long long0 = new Long(1L);
      // Undeclared exception!
      try { 
        operators0.size(aSTUnaryMinusNode0, long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.introspection.ClassMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      ASTFunctionNode aSTFunctionNode0 = new ASTFunctionNode(0);
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Object[] objectArray0 = new Object[0];
      Frame frame0 = new Frame(scope0, objectArray0, (short)2);
      Interpreter interpreter0 = new Interpreter(engine0, (JexlOptions) null, engine0.EMPTY_CONTEXT, frame0);
      Interpreter interpreter1 = new Interpreter(interpreter0, (JexlArithmetic) null);
      Operators operators0 = new Operators(interpreter1);
      JexlArithmetic jexlArithmetic0 = engine0.arithmetic;
      // Undeclared exception!
      try { 
        operators0.endsWith(aSTFunctionNode0, "org.apache.commons.jexl3.JexlFeatures", frame0, jexlArithmetic0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.Operators", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Operators operators0 = templateInterpreter0.operators;
      ASTFalseNode aSTFalseNode0 = new ASTFalseNode((Parser) null, (-3016));
      ASTNRNode aSTNRNode0 = new ASTNRNode((-702));
      Short short0 = new Short((short)28);
      // Undeclared exception!
      try { 
        operators0.endsWith(aSTNRNode0, "uTzq5R", aSTFalseNode0, short0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3016
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Interpreter interpreter0 = new Interpreter(templateInterpreter0, (JexlArithmetic) null);
      Operators operators0 = new Operators(interpreter0);
      ASTEmptyFunction aSTEmptyFunction0 = new ASTEmptyFunction(0);
      JexlArithmetic jexlArithmetic0 = engine0.getArithmetic();
      // Undeclared exception!
      try { 
        operators0.empty(aSTEmptyFunction0, jexlArithmetic0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.Operators", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, jexlOptions0);
      Interpreter interpreter1 = new Interpreter(interpreter0, (JexlArithmetic) null);
      Operators operators0 = new Operators(interpreter1);
      ASTForeachStatement aSTForeachStatement0 = new ASTForeachStatement(34);
      // Undeclared exception!
      try { 
        operators0.contains(aSTForeachStatement0, "@{]}4", (Object) null, interpreter1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.Operators", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTFunctionNode aSTFunctionNode0 = new ASTFunctionNode((-19));
      Operators operators0 = new Operators(templateInterpreter0);
      Short short0 = new Short((short)2);
      // Undeclared exception!
      try { 
        operators0.contains(aSTFunctionNode0, "org.apache.commons.jexl3.internal.Operators$1", aSTFunctionNode0, short0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -19
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Operators operators0 = null;
      try {
        operators0 = new Operators((InterpreterBase) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.Operators", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = engine0.options((JexlContext) null);
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, jexlOptions0);
      Operators operators0 = interpreter0.operators;
      Parser parser0 = engine0.parser;
      ASTEmptyFunction aSTEmptyFunction0 = new ASTEmptyFunction(parser0, 1286);
      Object object0 = operators0.size(aSTEmptyFunction0, "%K1$T6-!Fr`~");
      // Undeclared exception!
      try { 
        operators0.endsWith(aSTEmptyFunction0, "%K1$T6-!Fr`~", object0, "%K1$T6-!Fr`~");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"%K1$T6-!Fr`~\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, jexlOptions0);
      Operators operators0 = interpreter0.operators;
      ASTExtendedLiteral aSTExtendedLiteral0 = new ASTExtendedLiteral(14);
      Object object0 = operators0.size(aSTExtendedLiteral0, (Object) null);
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Operators operators0 = new Operators(templateInterpreter0);
      Short short0 = new Short((short)0);
      Object object0 = operators0.empty((JexlNode) null, short0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, jexlOptions0);
      Operators operators0 = new Operators(interpreter0);
      StringProvider stringProvider0 = new StringProvider("");
      Parser parser0 = new Parser(stringProvider0);
      ASTGTNode aSTGTNode0 = new ASTGTNode(parser0, 34);
      Object object0 = operators0.empty(aSTGTNode0, (Object) null);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Operators operators0 = new Operators(templateInterpreter0);
      ASTBitwiseXorNode aSTBitwiseXorNode0 = new ASTBitwiseXorNode(1490);
      MathContext mathContext0 = MathContext.UNLIMITED;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 1490);
      Object object0 = operators0.empty(aSTBitwiseXorNode0, jexlArithmetic0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = engine0.options(engine0.EMPTY_CONTEXT);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-833));
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      Operators operators0 = interpreter0.operators;
      ASTConstructorNode aSTConstructorNode0 = new ASTConstructorNode((-833));
      Long long0 = new Long((-833));
      // Undeclared exception!
      try { 
        operators0.contains(aSTConstructorNode0, "Tm9kN)^r0obasr3#uWs", jexlOptions0, long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ?: JEXL error : Tm9kN)^r0obasr3#uWs error
         //
         verifyException("org.apache.commons.jexl3.internal.Operators", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = engine0.options((JexlContext) null);
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, jexlOptions0);
      Operators operators0 = interpreter0.operators;
      Parser parser0 = engine0.parser;
      ASTEmptyFunction aSTEmptyFunction0 = new ASTEmptyFunction(parser0, 1286);
      boolean boolean0 = operators0.contains(aSTEmptyFunction0, (String) null, (Object) null, aSTEmptyFunction0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Operators operators0 = templateInterpreter0.operators;
      ASTFunctionNode aSTFunctionNode0 = new ASTFunctionNode(0);
      boolean boolean0 = operators0.endsWith(aSTFunctionNode0, "", engine0, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Operators operators0 = templateInterpreter0.operators;
      ASTFunctionNode aSTFunctionNode0 = new ASTFunctionNode(0);
      boolean boolean0 = operators0.endsWith(aSTFunctionNode0, "org.apache.commons.jexl3.internal.Operators$1", "org.apache.commons.jexl3.internal.Operators$1", "org.apache.commons.jexl3.internal.Operators$1");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Operators operators0 = templateInterpreter0.operators;
      JexlOperator jexlOperator0 = JexlOperator.SELF_DIVIDE;
      ASTNRNode aSTNRNode0 = new ASTNRNode((-702));
      Short short0 = new Short((short)28);
      // Undeclared exception!
      try { 
        operators0.endsWith(aSTNRNode0, "uTzq5R", jexlOperator0, short0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ?: JEXL error : uTzq5R error
         //
         verifyException("org.apache.commons.jexl3.internal.Operators", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = engine0.options(engine0.EMPTY_CONTEXT);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-833));
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      Operators operators0 = interpreter0.operators;
      ASTConstructorNode aSTConstructorNode0 = new ASTConstructorNode((-833));
      Integer integer0 = new Integer((-833));
      Long long0 = new Long((-833));
      boolean boolean0 = operators0.startsWith(aSTConstructorNode0, "Tm9kN)^r0obasr3#uWs", integer0, long0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Engine engine0 = new Engine();
      Interpreter interpreter0 = new Interpreter(engine0, (JexlOptions) null, engine0.EMPTY_CONTEXT, (Frame) null);
      Operators operators0 = new Operators(interpreter0);
      ASTNSWNode aSTNSWNode0 = new ASTNSWNode(0);
      Long long0 = new Long(0L);
      // Undeclared exception!
      try { 
        operators0.startsWith(aSTNSWNode0, "W<Mn:?tv;B@a}k]", long0, interpreter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ?: JEXL error : W<Mn:?tv;B@a}k] error
         //
         verifyException("org.apache.commons.jexl3.internal.Operators", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Engine engine0 = new Engine();
      Interpreter interpreter0 = new Interpreter(engine0, (JexlOptions) null, engine0.EMPTY_CONTEXT, (Frame) null);
      Operators operators0 = new Operators(interpreter0);
      ASTNSWNode aSTNSWNode0 = new ASTNSWNode(0);
      boolean boolean0 = operators0.startsWith(aSTNSWNode0, "", interpreter0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = new JexlOptions();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[2];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-1637));
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      Operators operators0 = interpreter0.operators;
      ASTAnnotatedStatement aSTAnnotatedStatement0 = new ASTAnnotatedStatement((-1637));
      JexlOperator jexlOperator0 = JexlOperator.SELF_OR;
      // Undeclared exception!
      try { 
        operators0.tryAssignOverload(aSTAnnotatedStatement0, jexlOperator0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ?: error calling operator '|' caused by null operand
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Operators operators0 = templateInterpreter0.operators;
      String[] stringArray0 = new String[2];
      ASTFunctionNode aSTFunctionNode0 = new ASTFunctionNode(0);
      JexlOperator jexlOperator0 = JexlOperator.SELF_AND;
      // Undeclared exception!
      try { 
        operators0.tryAssignOverload(aSTFunctionNode0, jexlOperator0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ?: error calling operator '&' caused by null operand
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, jexlOptions0);
      Operators operators0 = interpreter0.operators;
      ASTForeachStatement aSTForeachStatement0 = new ASTForeachStatement(5);
      JexlOperator jexlOperator0 = JexlOperator.SELF_DIVIDE;
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        operators0.tryAssignOverload(aSTForeachStatement0, jexlOperator0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ?: error calling operator '/' caused by null operand
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = engine0.options((JexlContext) null);
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, jexlOptions0);
      Operators operators0 = new Operators(interpreter0);
      ASTForeachStatement aSTForeachStatement0 = new ASTForeachStatement(5);
      JexlOperator jexlOperator0 = JexlOperator.SELF_MULTIPLY;
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        operators0.tryAssignOverload(aSTForeachStatement0, jexlOperator0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ?: error calling operator '*' caused by null operand
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = engine0.options((JexlContext) null);
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, jexlOptions0);
      Operators operators0 = new Operators(interpreter0);
      ASTForeachStatement aSTForeachStatement0 = new ASTForeachStatement(5);
      JexlOperator jexlOperator0 = JexlOperator.SELF_ADD;
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        operators0.tryAssignOverload(aSTForeachStatement0, jexlOperator0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ?: error calling operator '+' caused by null operand
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Operators operators0 = new Operators(templateInterpreter0);
      JexlOperator jexlOperator0 = JexlOperator.SELF_XOR;
      Object[] objectArray0 = new Object[2];
      ASTSetMultNode aSTSetMultNode0 = new ASTSetMultNode(1);
      // Undeclared exception!
      try { 
        operators0.tryAssignOverload(aSTSetMultNode0, jexlOperator0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ?: error calling operator '^' caused by null operand
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[1];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      Frame frame0 = new Frame(scope0, stringArray0, 3);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      Operators operators0 = interpreter0.operators;
      StringProvider stringProvider0 = new StringProvider("TbT_9fI.Ct=GVb");
      Parser parser0 = new Parser(stringProvider0);
      ASTGENode aSTGENode0 = new ASTGENode(parser0, 3);
      JexlOperator jexlOperator0 = JexlOperator.POSITIVIZE;
      // Undeclared exception!
      try { 
        operators0.tryAssignOverload(aSTGENode0, jexlOperator0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be called with a side-effect operator
         //
         verifyException("org.apache.commons.jexl3.internal.Operators", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Operators operators0 = new Operators(templateInterpreter0);
      ASTBitwiseXorNode aSTBitwiseXorNode0 = new ASTBitwiseXorNode(1490);
      JexlOperator jexlOperator0 = JexlOperator.EMPTY;
      Object[] objectArray0 = new Object[8];
      Object object0 = operators0.tryAssignOverload(aSTBitwiseXorNode0, jexlOperator0, objectArray0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = engine0.options(engine0.EMPTY_CONTEXT);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, (Frame) null);
      Interpreter interpreter1 = new Interpreter(interpreter0, (JexlArithmetic) null);
      Operators operators0 = new Operators(interpreter1);
      ASTForeachStatement aSTForeachStatement0 = new ASTForeachStatement(5);
      JexlOperator jexlOperator0 = JexlOperator.SELF_SUBTRACT;
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        operators0.tryAssignOverload(aSTForeachStatement0, jexlOperator0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ?: error calling operator '-'
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Engine engine0 = new Engine();
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript((-799));
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Operators operators0 = new Operators(templateInterpreter0);
      Short short0 = new Short((short)0);
      // Undeclared exception!
      try { 
        operators0.contains(aSTJexlScript0, "*<~zDN1C", short0, "size");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"size\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Operators operators0 = templateInterpreter0.operators;
      String[] stringArray0 = new String[2];
      ASTFunctionNode aSTFunctionNode0 = new ASTFunctionNode(0);
      JexlOperator jexlOperator0 = JexlOperator.SELF_MOD;
      // Undeclared exception!
      try { 
        operators0.tryAssignOverload(aSTFunctionNode0, jexlOperator0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ?: error calling operator '%' caused by null operand
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase", e);
      }
  }
}
