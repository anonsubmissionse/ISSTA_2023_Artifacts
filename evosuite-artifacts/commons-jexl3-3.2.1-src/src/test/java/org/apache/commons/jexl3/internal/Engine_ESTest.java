/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 17:31:55 GMT 2022
 */

package org.apache.commons.jexl3.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.math.MathContext;
import java.math.RoundingMode;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.apache.commons.jexl3.JexlArithmetic;
import org.apache.commons.jexl3.JexlBuilder;
import org.apache.commons.jexl3.JexlContext;
import org.apache.commons.jexl3.JexlEngine;
import org.apache.commons.jexl3.JexlFeatures;
import org.apache.commons.jexl3.JexlInfo;
import org.apache.commons.jexl3.JexlOptions;
import org.apache.commons.jexl3.JexlScript;
import org.apache.commons.jexl3.MapContext;
import org.apache.commons.jexl3.ObjectContext;
import org.apache.commons.jexl3.internal.Closure;
import org.apache.commons.jexl3.internal.Engine;
import org.apache.commons.jexl3.internal.Frame;
import org.apache.commons.jexl3.internal.Interpreter;
import org.apache.commons.jexl3.internal.Scope;
import org.apache.commons.jexl3.internal.Script;
import org.apache.commons.jexl3.internal.SoftCache;
import org.apache.commons.jexl3.internal.TemplateEngine;
import org.apache.commons.jexl3.internal.introspection.Uberspect;
import org.apache.commons.jexl3.introspection.JexlSandbox;
import org.apache.commons.jexl3.introspection.JexlUberspect;
import org.apache.commons.jexl3.parser.ASTArrayAccess;
import org.apache.commons.jexl3.parser.ASTFunctionNode;
import org.apache.commons.jexl3.parser.ASTIdentifier;
import org.apache.commons.jexl3.parser.ASTIdentifierAccess;
import org.apache.commons.jexl3.parser.ASTJexlLambda;
import org.apache.commons.jexl3.parser.ASTJexlScript;
import org.apache.commons.jexl3.parser.ASTSWNode;
import org.apache.commons.jexl3.parser.ASTUnaryPlusNode;
import org.apache.commons.jexl3.parser.JexlNode;
import org.apache.commons.jexl3.parser.Parser;
import org.apache.commons.jexl3.parser.StringProvider;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.impl.Jdk13LumberjackLogger;
import org.apache.commons.logging.impl.Jdk14Logger;
import org.apache.commons.logging.impl.NoOpLog;
import org.apache.commons.logging.impl.SimpleLog;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Engine_ESTest extends Engine_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      String[] stringArray0 = new String[1];
      jexlBuilder0.cacheThreshold(9);
      Engine engine0 = new Engine(jexlBuilder0);
      // Undeclared exception!
      try { 
        engine0.createScript(engine0.DEFAULT_FEATURES, (JexlInfo) null, ">wWy|([]t)$", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Hsm";
      Scope scope1 = new Scope(scope0, stringArray0);
      JexlInfo jexlInfo0 = engine0.createInfo("uberspect can not be null", 91, 91);
      ASTJexlScript aSTJexlScript0 = engine0.parse(jexlInfo0, true, "Hsm", scope1);
      Engine.VarCollector engine_VarCollector0 = new Engine.VarCollector(91);
      engine0.getVariables(aSTJexlScript0, aSTJexlScript0, engine_VarCollector0);
      assertTrue(engine0.isCancellable());
      assertFalse(aSTJexlScript0.isGlobalVar());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Engine engine0 = new Engine();
      Class<JexlEngine> class0 = JexlEngine.class;
      // Undeclared exception!
      try { 
        engine0.newInstance((Class<? extends JexlEngine>) class0, (Object[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Engine engine0 = new Engine();
      ASTJexlScript aSTJexlScript0 = engine0.parse((JexlInfo) null, true, "", (Scope) null);
      Parser parser0 = engine0.parser;
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, engine0.EMPTY_CONTEXT);
      // Undeclared exception!
      try { 
        engine0.setProperty((Object) jexlOptions0, " !~ ", (Object) parser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Engine engine0 = new Engine();
      engine0.createInterpreter(engine0.EMPTY_CONTEXT, (Frame) null, (JexlOptions) null);
      assertTrue(engine0.isCancellable());
      assertTrue(engine0.isDebug());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Engine engine0 = new Engine();
      engine0.createJxltEngine(false, 1433, 'M', 'M');
      assertTrue(engine0.isDebug());
      assertTrue(engine0.isCancellable());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = new JexlOptions();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      Scope scope1 = new Scope(scope0, (String[]) null);
      int int0 = (-2985);
      Frame frame0 = new Frame(scope1, (Object[]) null, (-2985));
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      ASTJexlLambda aSTJexlLambda0 = mock(ASTJexlLambda.class, new ViolatedAssumptionAnswer());
      doReturn((Frame) null).when(aSTJexlLambda0).createFrame(any(org.apache.commons.jexl3.internal.Frame.class) , any(java.lang.Object[].class));
      doReturn((Map) null).when(aSTJexlLambda0).getPragmas();
      doReturn((JexlNode) null).when(aSTJexlLambda0).jjtGetChild(anyInt());
      doReturn(0).when(aSTJexlLambda0).jjtGetNumChildren();
      Closure closure0 = new Closure(interpreter0, aSTJexlLambda0);
      // Undeclared exception!
      try { 
        closure0.execute(engine0.EMPTY_CONTEXT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.Interpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cancellable(true);
      JexlBuilder jexlBuilder2 = jexlBuilder1.strict(false);
      Engine engine0 = new Engine(jexlBuilder2);
      boolean boolean0 = engine0.isCancellable();
      assertTrue(boolean0);
      assertTrue(engine0.isDebug());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder0);
      boolean boolean0 = engine0.isStrict();
      assertFalse(engine0.isCancellable());
      assertTrue(engine0.isDebug());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Engine engine0 = new Engine();
      ASTJexlScript aSTJexlScript0 = engine0.parse((JexlInfo) null, true, "", (Scope) null);
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, engine0.EMPTY_CONTEXT);
      engine0.processPragmas(aSTJexlScript0, engine0.EMPTY_CONTEXT, jexlOptions0);
      assertTrue(jexlOptions0.isCancellable());
      assertTrue(engine0.isDebug());
      assertEquals(0, aSTJexlScript0.jjtGetNumChildren());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Engine engine0 = new Engine();
      MapContext mapContext0 = new MapContext();
      engine0.setProperty((JexlContext) mapContext0, (Object) mapContext0, "MapEntry", (Object) "MapEntry");
      assertTrue(engine0.isCancellable());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder1);
      engine0.setProperty((Object) "8syx", "5MFzI", (Object) "5MFzI");
      assertFalse(engine0.isCancellable());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Engine engine0 = new Engine();
      engine0.trimSource((CharSequence) null);
      assertTrue(engine0.isDebug());
      assertTrue(engine0.isCancellable());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Engine engine0 = new Engine();
      String string0 = engine0.trimSource("?");
      assertEquals("?", string0);
      assertTrue(engine0.isCancellable());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Engine engine0 = new Engine();
      engine0.trimSource("");
      assertTrue(engine0.isCancellable());
      assertTrue(engine0.isDebug());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.safe(false);
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      JexlBuilder jexlBuilder2 = jexlBuilder1.strategy(jexlUberspect_ResolverStrategy0);
      Charset charset0 = Charset.defaultCharset();
      JexlBuilder jexlBuilder3 = jexlBuilder2.charset(charset0);
      Engine engine0 = new Engine(jexlBuilder3);
      JexlInfo jexlInfo0 = engine0.createInfo();
      Script script0 = engine0.createExpression(jexlInfo0, "");
      engine0.getLocalVariables(script0);
      Closure closure0 = new Closure(script0, (Object[]) null);
      JexlEngine jexlEngine0 = closure0.getEngine();
      JexlEngine jexlEngine1 = engine0.putThreadEngine(jexlEngine0);
      assertNull(jexlEngine1);
      
      engine0.createExpression(jexlInfo0, "");
      Engine.VarCollector engine_VarCollector0 = engine0.varCollector();
      Parser parser0 = engine0.parser;
      ASTSWNode aSTSWNode0 = new ASTSWNode(parser0, 0);
      engine_VarCollector0.collect(aSTSWNode0);
      assertTrue(engine0.isCancellable());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Engine engine0 = new Engine();
      engine0.parse((JexlInfo) null, engine0.DEFAULT_FEATURES, "add", (Scope) null);
      assertTrue(engine0.isCancellable());
      assertTrue(engine0.isDebug());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Engine engine0 = new Engine();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[4];
      Scope scope1 = new Scope(scope0, stringArray0);
      ASTJexlScript aSTJexlScript0 = engine0.parse((JexlInfo) null, engine0.DEFAULT_FEATURES, "", scope1);
      assertTrue(engine0.isCancellable());
      assertTrue(engine0.isDebug());
      assertFalse(aSTJexlScript0.isGlobalVar());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.strict(false);
      Engine engine0 = new Engine(jexlBuilder1);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlOptions jexlOptions0 = engine0.options(jexlEngine_EmptyContext0);
      JexlOptions jexlOptions1 = engine0.optionsSet(jexlOptions0);
      assertTrue(engine0.isDebug());
      assertFalse(jexlOptions1.isCancellable());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = engine0.options;
      jexlOptions0.setSharedInstance(true);
      JexlOptions jexlOptions1 = engine0.optionsSet(jexlOptions0);
      assertTrue(jexlOptions1.isCancellable());
      assertTrue(engine0.isDebug());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.safe(false);
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = new JexlOptions();
      engine0.optionsSet(jexlOptions0);
      assertFalse(jexlOptions0.isSafe());
      assertTrue(engine0.isCancellable());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.lexicalShade(true);
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = engine0.options(engine0.EMPTY_CONTEXT);
      JexlOptions jexlOptions1 = engine0.optionsSet(jexlOptions0);
      assertTrue(jexlOptions1.isCancellable());
      assertTrue(engine0.isDebug());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.antish(false);
      Engine engine0 = new Engine(jexlBuilder1);
      JexlOptions jexlOptions0 = new JexlOptions();
      engine0.optionsSet(jexlOptions0);
      assertEquals((-1), jexlOptions0.getMathScale());
      assertTrue(engine0.isCancellable());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      MathContext mathContext0 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 2);
      jexlBuilder0.arithmetic(jexlArithmetic0);
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = engine0.options;
      JexlOptions jexlOptions1 = engine0.optionsSet(jexlOptions0);
      assertTrue(jexlOptions1.isCancellable());
      assertTrue(engine0.isDebug());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.strict(false);
      Engine engine0 = new Engine(jexlBuilder1);
      Boolean boolean0 = Boolean.valueOf(false);
      ObjectContext<Boolean> objectContext0 = new ObjectContext<Boolean>(engine0, boolean0);
      JexlOptions jexlOptions0 = engine0.options((ASTJexlScript) null, objectContext0);
      assertFalse(jexlOptions0.isCancellable());
      assertTrue(engine0.isDebug());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlOptions jexlOptions0 = engine0.options(jexlEngine_EmptyContext0);
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Boolean boolean0 = jexlBuilder0.safe();
      ObjectContext<Boolean> objectContext0 = new ObjectContext<Boolean>(engine0, boolean0);
      jexlOptions0.setSharedInstance(true);
      JexlOptions jexlOptions1 = engine0.options((ASTJexlScript) null, objectContext0);
      assertTrue(engine0.isDebug());
      assertTrue(jexlOptions1.isCancellable());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.safe(false);
      Engine engine0 = new Engine(jexlBuilder1);
      Boolean boolean0 = Boolean.valueOf(false);
      ObjectContext<Boolean> objectContext0 = new ObjectContext<Boolean>(engine0, boolean0);
      JexlOptions jexlOptions0 = engine0.options((ASTJexlScript) null, objectContext0);
      assertTrue(jexlOptions0.isCancellable());
      assertTrue(engine0.isDebug());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.lexicalShade(true);
      Engine engine0 = new Engine(jexlBuilder1);
      Parser parser0 = new Parser("C9Mx&DD-$");
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[6];
      Scope scope1 = new Scope(scope0, stringArray0);
      ASTJexlScript aSTJexlScript0 = parser0.JexlScript(scope1);
      Frame frame0 = new Frame(scope1, stringArray0, 0);
      Interpreter interpreter0 = new Interpreter(engine0, (JexlOptions) null, engine0.EMPTY_CONTEXT, frame0);
      ASTJexlLambda aSTJexlLambda0 = mock(ASTJexlLambda.class, new ViolatedAssumptionAnswer());
      doReturn((Frame) null).when(aSTJexlLambda0).createFrame(any(org.apache.commons.jexl3.internal.Frame.class) , any(java.lang.Object[].class));
      doReturn((Map) null).when(aSTJexlLambda0).getPragmas();
      Closure closure0 = new Closure(interpreter0, aSTJexlLambda0);
      Map<String, Object> map0 = closure0.getPragmas();
      MapContext mapContext0 = new MapContext(map0);
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, mapContext0);
      assertTrue(jexlOptions0.isCancellable());
      assertTrue(engine0.isDebug());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder1);
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(3270);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, jexlEngine_EmptyContext0);
      assertFalse(jexlOptions0.isCancellable());
      assertTrue(engine0.isDebug());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.antish(false);
      Engine engine0 = (Engine)jexlBuilder1.create();
      JexlOptions jexlOptions0 = engine0.options((ASTJexlScript) null, (JexlContext) null);
      assertTrue(engine0.isDebug());
      assertTrue(jexlOptions0.isCancellable());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      MathContext mathContext0 = new MathContext(82, roundingMode0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 82);
      jexlBuilder0.arithmetic(jexlArithmetic0);
      Engine engine0 = new Engine(jexlBuilder0);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(19);
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, jexlEngine_EmptyContext0);
      assertTrue(engine0.isDebug());
      assertTrue(jexlOptions0.isCancellable());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder1);
      JexlOptions jexlOptions0 = engine0.options(engine0.EMPTY_CONTEXT);
      assertFalse(jexlOptions0.isCancellable());
      assertTrue(engine0.isDebug());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.safe(false);
      Engine engine0 = new Engine(jexlBuilder0);
      Boolean boolean0 = Boolean.valueOf("");
      ObjectContext<Boolean> objectContext0 = new ObjectContext<Boolean>(engine0, boolean0);
      JexlOptions jexlOptions0 = engine0.options(objectContext0);
      assertTrue(engine0.isDebug());
      assertTrue(jexlOptions0.isCancellable());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.antish(false);
      Engine engine0 = new Engine(jexlBuilder1);
      JexlOptions jexlOptions0 = new JexlOptions();
      Map<String, Object> map0 = jexlOptions0.getNamespaces();
      MapContext mapContext0 = new MapContext(map0);
      JexlOptions jexlOptions1 = engine0.options(mapContext0);
      assertTrue(jexlOptions1.isCancellable());
      assertTrue(engine0.isDebug());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder0);
      Class<ASTArrayAccess> class0 = ASTArrayAccess.class;
      Object[] objectArray0 = new Object[5];
      engine0.newInstance((Class<? extends ASTArrayAccess>) class0, objectArray0);
      assertTrue(engine0.isDebug());
      assertFalse(engine0.isCancellable());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.strict(false);
      Engine engine0 = new Engine(jexlBuilder1);
      boolean boolean0 = engine0.isStrict();
      assertFalse(engine0.isCancellable());
      assertFalse(boolean0);
      assertTrue(engine0.isDebug());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder1);
      boolean boolean0 = engine0.isSilent();
      assertTrue(boolean0);
      assertTrue(engine0.isDebug());
      assertFalse(engine0.isCancellable());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.debug(false);
      Engine engine0 = new Engine(jexlBuilder0);
      boolean boolean0 = engine0.isDebug();
      assertTrue(engine0.isCancellable());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Engine engine0 = new Engine();
      Object[] objectArray0 = new Object[9];
      JexlInfo jexlInfo0 = new JexlInfo("V_g^f", 15, 1);
      Script script0 = engine0.createScript(engine0.DEFAULT_FEATURES, jexlInfo0, "V_g^f", (String[]) null);
      Closure closure0 = new Closure(script0, objectArray0);
      ASTJexlScript aSTJexlScript0 = closure0.script;
      Set<List<String>> set0 = engine0.getVariables(aSTJexlScript0);
      assertTrue(engine0.isCancellable());
      assertTrue(engine0.isDebug());
      assertEquals("V_g^f", closure0.getSourceText());
      assertEquals(2, set0.size());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SimpleLog simpleLog0 = new SimpleLog("j~rnUt_");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = Engine.getUberspect((Log) simpleLog0, jexlUberspect_ResolverStrategy0);
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.uberspect((JexlUberspect) uberspect0);
      Engine engine0 = new Engine(jexlBuilder0);
      engine0.getUberspect();
      assertTrue(engine0.isCancellable());
      assertTrue(engine0.isDebug());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlScript jexlScript0 = engine0.createScript("");
      engine0.getParameters(jexlScript0);
      assertEquals("", jexlScript0.getSourceText());
      assertTrue(engine0.isCancellable());
      assertTrue(engine0.isDebug());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String[] stringArray0 = new String[4];
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      Scope scope1 = new Scope(scope0, stringArray0);
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = new JexlOptions();
      Frame frame0 = new Frame(scope1, stringArray0, 3298);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      ASTJexlLambda aSTJexlLambda0 = mock(ASTJexlLambda.class, new ViolatedAssumptionAnswer());
      doReturn(frame0).when(aSTJexlLambda0).createFrame(any(org.apache.commons.jexl3.internal.Frame.class) , any(java.lang.Object[].class));
      doReturn(stringArray0).when(aSTJexlLambda0).getLocalVariables();
      Closure closure0 = new Closure(interpreter0, aSTJexlLambda0);
      engine0.getLocalVariables(closure0);
      assertTrue(engine0.isDebug());
      assertTrue(engine0.isCancellable());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.charset((Charset) null);
      Engine engine0 = new Engine(jexlBuilder0);
      engine0.getCharset();
      assertTrue(engine0.isDebug());
      assertTrue(engine0.isCancellable());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.strict(false);
      Engine engine0 = new Engine(jexlBuilder0);
      engine0.getArithmetic();
      assertTrue(engine0.isDebug());
      assertFalse(engine0.isCancellable());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder0);
      engine0.doCreateInstance(engine0, (Object[]) null);
      assertFalse(engine0.isCancellable());
      assertTrue(engine0.isDebug());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.strict(false);
      Engine engine0 = new Engine(jexlBuilder0);
      // Undeclared exception!
      try { 
        engine0.setProperty((JexlContext) null, (Object) jexlBuilder0, "org.apache.commons.jexl3.internal.Engine$UberspectHolder", (Object) jexlBuilder0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Engine engine0 = new Engine();
      Parser parser0 = engine0.parser;
      // Undeclared exception!
      try { 
        engine0.setProperty(engine0.EMPTY_CONTEXT, (Object) parser0, (String) null, (Object) "T'iH.vSdu");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.Engine", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Engine engine0 = new Engine();
      ASTJexlScript aSTJexlScript0 = engine0.parse((JexlInfo) null, true, "", (Scope) null);
      // Undeclared exception!
      try { 
        engine0.setProperty((Object) null, "", (Object) aSTJexlScript0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlInfo jexlInfo0 = engine0.createInfo();
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, true, 47, '{', '{');
      StringBuilder stringBuilder0 = new StringBuilder("3lW0xjk/y");
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[5];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.TemplateExpression templateEngine_TemplateExpression0 = templateEngine0.parseExpression(jexlInfo0, "3lW0xjk/y", scope1);
      TemplateEngine.ImmediateExpression templateEngine_ImmediateExpression0 = templateEngine0.new ImmediateExpression(stringBuilder0, (JexlNode) null, templateEngine_TemplateExpression0);
      // Undeclared exception!
      try { 
        engine0.setProperty((Object) templateEngine_ImmediateExpression0, (String) null, (Object) "3lW0xjk/y");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.Engine", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlOptions jexlOptions0 = engine0.options(jexlEngine_EmptyContext0);
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Boolean boolean0 = jexlBuilder0.safe();
      ObjectContext<Boolean> objectContext0 = new ObjectContext<Boolean>(engine0, boolean0);
      // Undeclared exception!
      try { 
        engine0.processPragmas((ASTJexlScript) null, objectContext0, jexlOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.Engine", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      MathContext mathContext0 = MathContext.DECIMAL32;
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(scope0).getArgCount();
      doReturn((Integer) null, (Integer) null, (Integer) null).when(scope0).getSymbol(anyString());
      Engine engine0 = new Engine();
      JexlInfo jexlInfo0 = new JexlInfo("", 91, 24);
      // Undeclared exception!
      try { 
        engine0.parse(jexlInfo0, false, "s 5`?Z<^\"!o}i", scope0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      Scope scope1 = new Scope(scope0, stringArray0);
      JexlInfo jexlInfo0 = engine0.createInfo("uberspect can not be null", 91, 91);
      // Undeclared exception!
      try { 
        engine0.parse(jexlInfo0, false, "uberspect can not be null", scope1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // @1:11 ambiguous statement error in 'uberspect can not be null'
         //
         verifyException("org.apache.commons.jexl3.parser.JexlParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlInfo jexlInfo0 = new JexlInfo();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      // Undeclared exception!
      try { 
        engine0.parse(jexlInfo0, true, (String) null, scope1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.Engine", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.collectAll(false);
      JexlBuilder jexlBuilder2 = jexlBuilder1.debug(false);
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, false);
      JexlSandbox jexlSandbox1 = jexlSandbox0.copy();
      JexlBuilder jexlBuilder3 = jexlBuilder2.sandbox(jexlSandbox1);
      Engine engine0 = new Engine(jexlBuilder3);
      JexlContext.ThreadLocal jexlContext_ThreadLocal0 = JexlEngine.getThreadContext();
      engine0.putThreadLocal((JexlContext.ThreadLocal) null);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      doReturn((Frame) null).when(scope0).createFrame(any(org.apache.commons.jexl3.internal.Frame.class) , any(java.lang.Object[].class));
      doReturn(0).when(scope0).getArgCount();
      doReturn((Integer) null, (Integer) null, (Integer) null, (Integer) null, (Integer) null).when(scope0).getSymbol(anyString());
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Hsm";
      Scope scope1 = new Scope(scope0, stringArray0);
      int int0 = 91;
      Frame frame0 = new Frame(scope1, stringArray0, 91);
      Frame frame1 = scope1.createFrame(frame0, stringArray0);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlOptions jexlOptions0 = engine0.options(jexlEngine_EmptyContext0);
      JexlOptions jexlOptions1 = engine0.optionsSet(jexlOptions0);
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, frame1, jexlOptions1);
      Jdk14Logger jdk14Logger0 = (Jdk14Logger)interpreter0.logger;
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = Engine.getUberspect((Log) jdk14Logger0, jexlUberspect_ResolverStrategy0);
      assertEquals(0, uberspect0.getVersion());
      
      Engine engine1 = new Engine();
      String string0 = "uberspect can not be null";
      JexlInfo jexlInfo0 = engine1.createInfo("uberspect can not be null", 91, 91);
      ASTJexlScript aSTJexlScript0 = engine1.parse(jexlInfo0, engine1.DEFAULT_FEATURES, "Hsm", scope0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Frame frame2 = aSTJexlScript0.createFrame((Object[]) stringArray0);
      engine0.createInterpreter(jexlContext_ThreadLocal0, frame2, jexlOptions0);
      assertTrue(jexlOptions0.isCancellable());
      assertFalse(engine0.isDebug());
      
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger(string0);
      Engine.getUberspect((Log) jdk13LumberjackLogger0, jexlUberspect_ResolverStrategy0);
      Engine.VarCollector engine_VarCollector0 = new Engine.VarCollector(int0);
      engine1.getVariables(aSTJexlScript0, aSTJexlScript0, engine_VarCollector0);
      assertTrue(engine1.isDebug());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      doReturn(36, 1262, 624, 624, Integer.MAX_VALUE).when(scope0).getArgCount();
      JexlInfo jexlInfo0 = engine0.createInfo("uberspect can not be null", 54, 54);
      // Undeclared exception!
      engine0.parse(jexlInfo0, engine0.DEFAULT_FEATURES, "Hsm", scope0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[5];
      Scope scope1 = new Scope(scope0, stringArray0);
      // Undeclared exception!
      try { 
        engine0.parse((JexlInfo) null, engine0.DEFAULT_FEATURES, "Not supported in void context.", scope1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // @1:5 ambiguous statement error in 'Not supported in void context.'
         //
         verifyException("org.apache.commons.jexl3.parser.JexlParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      // Undeclared exception!
      try { 
        engine0.parse((JexlInfo) null, engine0.DEFAULT_FEATURES, ",SF|K*d", scope1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlInfo jexlInfo0 = new JexlInfo();
      // Undeclared exception!
      try { 
        engine0.parse(jexlInfo0, engine0.DEFAULT_FEATURES, (String) null, (Scope) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.Engine", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Engine engine0 = new Engine();
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        engine0.newInstance((String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        engine0.invokeMethod(jexlBuilder0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Engine.VarCollector engine_VarCollector0 = new Engine.VarCollector(6);
      // Undeclared exception!
      try { 
        engine0.getVariables((ASTJexlScript) null, (JexlNode) null, engine_VarCollector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.Engine", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Engine engine0 = new Engine();
      // Undeclared exception!
      try { 
        engine0.getVariables((ASTJexlScript) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.Engine", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      // Undeclared exception!
      try { 
        engine0.getProperty((JexlContext) jexlEngine_EmptyContext0, (Object) jexlEngine_EmptyContext0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.Engine", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      ObjectContext<Boolean> objectContext0 = new ObjectContext<Boolean>(engine0, (Boolean) null);
      // Undeclared exception!
      try { 
        engine0.getProperty((JexlContext) objectContext0, (Object) null, "jexl.options");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.introspection.Uberspect", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Engine engine0 = new Engine();
      SoftCache<ASTIdentifierAccess, ASTIdentifier> softCache0 = new SoftCache<ASTIdentifierAccess, ASTIdentifier>(1190);
      Map<String, Object> map0 = softCache0.createCache(1190);
      MapContext mapContext0 = new MapContext(map0);
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(1190);
      // Undeclared exception!
      try { 
        engine0.getProperty((JexlContext) mapContext0, (Object) aSTJexlScript0, ".S.jh");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1190
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Engine engine0 = new Engine();
      // Undeclared exception!
      try { 
        engine0.getProperty((Object) "", "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Engine engine0 = new Engine();
      // Undeclared exception!
      try { 
        engine0.getParameters((JexlScript) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.Engine", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Engine engine0 = new Engine();
      // Undeclared exception!
      try { 
        engine0.getLocalVariables((JexlScript) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.Engine", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Engine engine0 = new Engine();
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        engine0.doCreateInstance(objectArray0[3], objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Engine engine0 = new Engine();
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        engine0.createScript((JexlFeatures) null, (JexlInfo) null, "x~C1c", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // @1:2 ambiguous statement error in 'x~C1c'
         //
         verifyException("org.apache.commons.jexl3.parser.JexlParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Engine engine0 = new Engine();
      // Undeclared exception!
      try { 
        engine0.createExpression((JexlInfo) null, "cY+{pt{r:\"hJJWIj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlInfo jexlInfo0 = new JexlInfo();
      // Undeclared exception!
      try { 
        engine0.createExpression(jexlInfo0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source is null
         //
         verifyException("org.apache.commons.jexl3.internal.Engine", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Engine engine0 = null;
      try {
        engine0 = new Engine((JexlBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Integer integer0 = new Integer(36);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      doReturn(36, 106, 167, 16, (-454)).when(scope0).getArgCount();
      doReturn(integer0, integer0, integer0, integer0, integer0).when(scope0).getSymbol(anyString());
      doReturn(true, true).when(scope0).isCapturedSymbol(anyInt());
      JexlInfo jexlInfo0 = engine0.createInfo("uberspect can not be null", 54, 54);
      ASTJexlScript aSTJexlScript0 = engine0.parse(jexlInfo0, engine0.DEFAULT_FEATURES, "Hsm", scope0);
      Engine.VarCollector engine_VarCollector0 = new Engine.VarCollector(54);
      engine0.getVariables(aSTJexlScript0, aSTJexlScript0, engine_VarCollector0);
      assertTrue(engine0.isCancellable());
      assertTrue(engine0.isDebug());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Engine engine0 = new Engine();
      Engine.VarCollector engine_VarCollector0 = engine0.varCollector();
      engine_VarCollector0.add("VEE\"w*I");
      ASTUnaryPlusNode aSTUnaryPlusNode0 = new ASTUnaryPlusNode(35);
      engine_VarCollector0.collect(aSTUnaryPlusNode0);
      assertTrue(engine0.isDebug());
      assertTrue(engine0.isCancellable());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Engine engine0 = new Engine();
      // Undeclared exception!
      try { 
        engine0.setProperty((JexlContext) null, (Object) null, "/vn|Co", (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Engine engine0 = new Engine();
      Parser parser0 = engine0.parser;
      ASTFunctionNode aSTFunctionNode0 = new ASTFunctionNode(parser0, (-1781));
      // Undeclared exception!
      try { 
        engine0.setProperty((JexlContext) null, (Object) aSTFunctionNode0, "", (Object) "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder0);
      Boolean boolean0 = Boolean.FALSE;
      ObjectContext<Boolean> objectContext0 = new ObjectContext<Boolean>(engine0, boolean0);
      engine0.getProperty((JexlContext) objectContext0, (Object) engine0, "C0s}kXu[+.");
      assertTrue(engine0.isDebug());
      assertFalse(engine0.isCancellable());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Engine engine0 = new Engine();
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript((-2782));
      // Undeclared exception!
      try { 
        engine0.getProperty((JexlContext) null, (Object) aSTJexlScript0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Engine engine0 = new Engine();
      String[] stringArray0 = new String[0];
      Script script0 = engine0.createScript(engine0.DEFAULT_FEATURES, (JexlInfo) null, "", stringArray0);
      assertEquals("", script0.getSourceText());
      assertTrue(engine0.isDebug());
      assertTrue(engine0.isCancellable());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Uberspect uberspect0 = Engine.getUberspect((Log) null, (JexlUberspect.ResolverStrategy) null);
      //  // Unstable assertion: assertEquals(80, uberspect0.getVersion());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JexlFeatures jexlFeatures0 = Engine.PROPERTY_FEATURES;
      JexlBuilder jexlBuilder1 = jexlBuilder0.namespaces((Map<String, Object>) hashMap0);
      hashMap0.putIfAbsent(":G'bR", jexlFeatures0);
      Engine engine0 = new Engine(jexlBuilder1);
      JexlFeatures jexlFeatures1 = engine0.expressionFeatures;
      jexlBuilder0.features(jexlFeatures1);
      Engine engine1 = new Engine(jexlBuilder0);
      assertTrue(engine1.isCancellable());
      assertTrue(engine1.isDebug());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Engine.VarCollector engine_VarCollector0 = new Engine.VarCollector(0);
      boolean boolean0 = engine_VarCollector0.isCollecting();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlUberspect jexlUberspect0 = engine0.getUberspect();
      //  // Unstable assertion: assertTrue(engine0.isCancellable());
      //  // Unstable assertion: assertTrue(engine0.isDebug());
      //  // Unstable assertion: assertEquals(80, jexlUberspect0.getVersion());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Engine.VarCollector engine_VarCollector0 = engine0.varCollector();
      engine_VarCollector0.collected();
      assertTrue(engine0.isDebug());
      assertTrue(engine0.isCancellable());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.jxlt();
      TemplateEngine templateEngine1 = engine0.jxlt();
      assertNotNull(templateEngine1);
      assertTrue(engine0.isCancellable());
      assertSame(templateEngine1, templateEngine0);
      assertTrue(engine0.isDebug());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Integer integer0 = new Integer((-2975));
      // Undeclared exception!
      try { 
        engine0.getProperty(engine0.EMPTY_CONTEXT, (Object) integer0, "at ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlInfo jexlInfo0 = engine0.createInfo();
      Script script0 = engine0.createExpression(jexlInfo0, " ");
      assertTrue(engine0.isCancellable());
      assertEquals("", script0.getSourceText());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Engine engine0 = new Engine();
      String[] stringArray0 = new String[7];
      // Undeclared exception!
      try { 
        engine0.getProperty((Object) "org.apache.commons.jexl3.internal.Engine", stringArray0[3]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.Engine", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.debug(false);
      Engine engine0 = new Engine(jexlBuilder0);
      ObjectContext<Boolean> objectContext0 = new ObjectContext<Boolean>(engine0, (Boolean) null);
      // Undeclared exception!
      try { 
        engine0.getProperty((JexlContext) objectContext0, (Object) engine0, "C0s}kXu[+.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cache(7);
      Engine engine0 = new Engine(jexlBuilder0);
      JexlInfo jexlInfo0 = engine0.createInfo();
      Script script0 = engine0.createExpression(jexlInfo0, "");
      assertEquals("", script0.getSourceText());
      
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[7];
      Scope scope1 = new Scope(scope0, stringArray0);
      ASTJexlScript aSTJexlScript0 = engine0.parse(jexlInfo0, true, "", scope1);
      assertTrue(engine0.isCancellable());
      assertEquals(7, aSTJexlScript0.getSymbolCount());
      assertFalse(aSTJexlScript0.isGlobalVar());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlInfo jexlInfo0 = engine0.createInfo("#1", (-2022), (-2022));
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      engine0.parse(jexlInfo0, (JexlFeatures) null, "antish", scope1);
      assertTrue(engine0.isCancellable());
      assertTrue(engine0.isDebug());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Engine engine0 = new Engine();
      String[] stringArray0 = new String[6];
      JexlInfo jexlInfo0 = new JexlInfo(stringArray0[0], 91, 16);
      Script script0 = engine0.createExpression(jexlInfo0, "org.apache.commons.jexl3.internal.introspection.SandboxUberspect");
      assertEquals("org.apache.commons.jexl3.internal.introspection.SandboxUberspect", script0.getSourceText());
      assertTrue(engine0.isDebug());
      assertTrue(engine0.isCancellable());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Engine engine0 = new Engine();
      ASTJexlScript aSTJexlScript0 = engine0.parse((JexlInfo) null, false, "", (Scope) null);
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, engine0.EMPTY_CONTEXT);
      jexlOptions0.setAntish(false);
      // Undeclared exception!
      try { 
        engine0.setProperty((Object) null, "n", (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder1);
      Object[] objectArray0 = new Object[0];
      engine0.newInstance("X*fF?$", objectArray0);
      assertFalse(engine0.isCancellable());
      assertTrue(engine0.isDebug());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Engine engine0 = new Engine();
      Integer integer0 = new Integer(93);
      Object[] objectArray0 = new Object[3];
      objectArray0[2] = (Object) integer0;
      // Undeclared exception!
      try { 
        engine0.doCreateInstance(integer0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.debug(false);
      Engine engine0 = new Engine(jexlBuilder0);
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        engine0.newInstance("A5Y/Z3", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder1);
      ASTFunctionNode aSTFunctionNode0 = new ASTFunctionNode((-1));
      Object[] objectArray0 = new Object[0];
      engine0.invokeMethod(aSTFunctionNode0, "X*fF?$", objectArray0);
      assertTrue(engine0.isDebug());
      assertFalse(engine0.isCancellable());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Integer integer0 = new Integer(119);
      Object[] objectArray0 = new Object[4];
      objectArray0[2] = (Object) integer0;
      // Undeclared exception!
      try { 
        engine0.invokeMethod(integer0, "X*fF?$", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.debug(false);
      Engine engine0 = new Engine(jexlBuilder0);
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        engine0.invokeMethod((Object) null, "org.apache.commons.jexl3.internal.Engine$UberspectHolder", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder0);
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      engine0.setProperty(engine0.EMPTY_CONTEXT, (Object) null, "C0skXu[+.", (Object) byteArrayInputStream0);
      assertTrue(engine0.isDebug());
      assertFalse(engine0.isCancellable());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Engine engine0 = new Engine();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapContext mapContext0 = new MapContext(hashMap0);
      // Undeclared exception!
      try { 
        engine0.getProperty((JexlContext) mapContext0, (Object) "<v~5##w>>,(\"H44rRKE", "[dHUe .`/}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlInfo jexlInfo0 = engine0.createInfo();
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        engine0.createScript(engine0.DEFAULT_FEATURES, jexlInfo0, (String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source is null
         //
         verifyException("org.apache.commons.jexl3.internal.Engine", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cache(7);
      Engine engine0 = new Engine(jexlBuilder0);
      engine0.clearCache();
      assertTrue(engine0.isCancellable());
      assertTrue(engine0.isDebug());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      engine0.clearCache();
      assertTrue(engine0.isCancellable());
      assertTrue(engine0.isDebug());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = engine0.optionsSet((JexlOptions) null);
      assertTrue(engine0.isCancellable());
      assertTrue(engine0.isDebug());
      assertNull(jexlOptions0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlInfo jexlInfo0 = new JexlInfo("gy9*RJO", 4, 10);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[6];
      Scope scope1 = new Scope(scope0, stringArray0);
      ASTJexlScript aSTJexlScript0 = engine0.parse(jexlInfo0, true, "gy9*RJO", scope1);
      Map<String, Object> map0 = aSTJexlScript0.getPragmas();
      MapContext mapContext0 = new MapContext(map0);
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, mapContext0);
      assertTrue(jexlOptions0.isCancellable());
      assertTrue(engine0.isDebug());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      jexlBuilder0.cache(91);
      Engine engine0 = new Engine(jexlBuilder0);
      engine0.setClassLoader(classLoader0);
      assertTrue(engine0.isDebug());
      assertTrue(engine0.isCancellable());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      engine0.setClassLoader(classLoader0);
      assertTrue(engine0.isCancellable());
      assertTrue(engine0.isDebug());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Uberspect uberspect0 = Engine.getUberspect((Log) null, jexlUberspect_ResolverStrategy0);
      //  // Unstable assertion: assertEquals(26, uberspect0.getVersion());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      NoOpLog noOpLog0 = new NoOpLog();
      jexlBuilder0.logger((Log) noOpLog0);
      Engine engine0 = new Engine(jexlBuilder0);
      assertTrue(engine0.isDebug());
      assertTrue(engine0.isCancellable());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      jexlBuilder0.loader(classLoader0);
      Engine engine0 = new Engine(jexlBuilder0);
      assertTrue(engine0.isCancellable());
      assertTrue(engine0.isDebug());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.stackOverflow(0);
      Engine engine0 = new Engine(jexlBuilder0);
      assertTrue(engine0.isDebug());
      assertTrue(engine0.isCancellable());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.strict(false);
      Engine engine0 = new Engine(jexlBuilder1);
      boolean boolean0 = engine0.isCancellable();
      assertFalse(boolean0);
      assertTrue(engine0.isDebug());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder1);
      engine0.getProperty((Object) jexlBuilder0, "X*fF?$");
      assertFalse(engine0.isCancellable());
      assertTrue(engine0.isDebug());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      engine0.getArithmetic();
      assertTrue(engine0.isCancellable());
      assertTrue(engine0.isDebug());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Engine engine0 = new Engine();
      boolean boolean0 = engine0.isDebug();
      assertTrue(engine0.isCancellable());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Engine engine0 = new Engine();
      engine0.createJxltEngine(true, 2763, ')', '');
      assertTrue(engine0.isDebug());
      assertTrue(engine0.isCancellable());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Engine engine0 = new Engine();
      boolean boolean0 = engine0.isSilent();
      assertTrue(engine0.isCancellable());
      assertTrue(engine0.isDebug());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Engine engine0 = new Engine();
      boolean boolean0 = engine0.isStrict();
      assertTrue(engine0.isCancellable());
      assertTrue(engine0.isDebug());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Engine engine0 = new Engine();
      String[] stringArray0 = new String[7];
      Script script0 = engine0.createScript(engine0.DEFAULT_FEATURES, (JexlInfo) null, "org.apache.commons.jexl3.internal.Engine", stringArray0);
      String[] stringArray1 = engine0.getLocalVariables(script0);
      assertEquals("org.apache.commons.jexl3.internal.Engine", script0.getSourceText());
      assertTrue(engine0.isCancellable());
      assertTrue(engine0.isDebug());
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      Engine engine0 = new Engine(jexlBuilder0);
      String[] stringArray0 = new String[2];
      Script script0 = engine0.createScript(jexlFeatures0, (JexlInfo) null, "", stringArray0);
      String[] stringArray1 = engine0.getParameters(script0);
      assertEquals("", script0.getSourceText());
      assertNotNull(stringArray1);
      assertTrue(engine0.isCancellable());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Engine engine0 = new Engine();
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[0];
      engine0.newInstance((Class<? extends String>) class0, objectArray0);
      assertTrue(engine0.isDebug());
      assertTrue(engine0.isCancellable());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Engine engine0 = new Engine();
      Script script0 = engine0.createExpression((JexlInfo) null, "org.apache.commons.jexl3.parser.Parser$LookaheadSuccess");
      Closure closure0 = new Closure(script0, (Object[]) null);
      ASTJexlScript aSTJexlScript0 = closure0.getScript();
      // Undeclared exception!
      try { 
        engine0.getProperty((Object) aSTJexlScript0, "org.apache.commons.jexl3.parser.Parser$LookaheadSuccess");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Engine engine0 = new Engine();
      Script script0 = engine0.createExpression((JexlInfo) null, "org.apache.commons.jexl3.parser.Parser$LookaheadSuccess");
      Closure closure0 = new Closure(script0, (Object[]) null);
      ASTJexlScript aSTJexlScript0 = closure0.getScript();
      Engine.VarCollector engine_VarCollector0 = new Engine.VarCollector((-1565));
      engine0.getVariables(aSTJexlScript0, aSTJexlScript0, engine_VarCollector0);
      assertEquals("org.apache.commons.jexl3.parser.Parser$LookaheadSuccess", closure0.getSourceText());
      assertTrue(engine0.isCancellable());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Engine engine0 = new Engine();
      StringProvider stringProvider0 = new StringProvider("!E'!r/");
      Parser parser0 = new Parser(stringProvider0);
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(parser0, (-627));
      Set<List<String>> set0 = engine0.getVariables(aSTJexlScript0);
      assertTrue(engine0.isCancellable());
      assertEquals(0, set0.size());
      assertTrue(engine0.isDebug());
  }
}
