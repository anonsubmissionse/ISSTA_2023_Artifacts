/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 17:51:27 GMT 2022
 */

package org.apache.commons.jexl3.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.apache.commons.jexl3.JexlBuilder;
import org.apache.commons.jexl3.JexlContext;
import org.apache.commons.jexl3.JexlInfo;
import org.apache.commons.jexl3.JexlOptions;
import org.apache.commons.jexl3.JxltEngine;
import org.apache.commons.jexl3.MapContext;
import org.apache.commons.jexl3.internal.Closure;
import org.apache.commons.jexl3.internal.Engine;
import org.apache.commons.jexl3.internal.Frame;
import org.apache.commons.jexl3.internal.Interpreter;
import org.apache.commons.jexl3.internal.Scope;
import org.apache.commons.jexl3.internal.TemplateEngine;
import org.apache.commons.jexl3.internal.TemplateScript;
import org.apache.commons.jexl3.parser.ASTDivNode;
import org.apache.commons.jexl3.parser.ASTJexlLambda;
import org.apache.commons.jexl3.parser.ASTJexlScript;
import org.apache.commons.jexl3.parser.JexlNode;
import org.apache.commons.jexl3.parser.Parser;
import org.apache.commons.jexl3.parser.ParserTokenManager;
import org.apache.commons.jexl3.parser.SimpleCharStream;
import org.apache.commons.jexl3.parser.StringProvider;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TemplateScript_ESTest extends TemplateScript_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo("gt#", 1288, (-97));
      StringReader stringReader0 = new StringReader("gt#");
      TemplateScript templateScript0 = templateEngine0.createTemplate(jexlInfo0, "gt#", (Reader) stringReader0, (String[]) null);
      String string0 = templateScript0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(false, 2564, 'w', 'w');
      TemplateEngine.Block[] templateEngine_BlockArray0 = new TemplateEngine.Block[6];
      Parser parser0 = new Parser("Ambiguous");
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      Scope scope1 = new Scope(scope0, stringArray0);
      ASTJexlScript aSTJexlScript0 = parser0.JexlExpression(scope1);
      TemplateEngine.TemplateExpression[] templateEngine_TemplateExpressionArray0 = new TemplateEngine.TemplateExpression[1];
      TemplateEngine.NestedExpression templateEngine_NestedExpression0 = templateEngine0.new NestedExpression("i8+{y!K:/RCW][k}/y", aSTJexlScript0, (TemplateEngine.TemplateExpression) null);
      templateEngine_TemplateExpressionArray0[0] = (TemplateEngine.TemplateExpression) templateEngine_NestedExpression0;
      TemplateScript templateScript0 = new TemplateScript(templateEngine0, "Ambiguous", templateEngine_BlockArray0, aSTJexlScript0, templateEngine_TemplateExpressionArray0);
      Set<List<String>> set0 = templateScript0.getVariables();
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TemplateEngine.Block[] templateEngine_BlockArray0 = new TemplateEngine.Block[1];
      TemplateEngine.TemplateExpression[] templateEngine_TemplateExpressionArray0 = new TemplateEngine.TemplateExpression[0];
      TemplateScript templateScript0 = new TemplateScript((TemplateEngine) null, "{", templateEngine_BlockArray0, (ASTJexlScript) null, templateEngine_TemplateExpressionArray0);
      ASTJexlScript aSTJexlScript0 = templateScript0.getScript();
      assertNull(aSTJexlScript0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TemplateEngine.Block[] templateEngine_BlockArray0 = new TemplateEngine.Block[0];
      Parser parser0 = new Parser("TRACE");
      ASTJexlScript aSTJexlScript0 = parser0.JexlScript((Scope) null);
      TemplateEngine.TemplateExpression[] templateEngine_TemplateExpressionArray0 = new TemplateEngine.TemplateExpression[0];
      TemplateScript templateScript0 = new TemplateScript((TemplateEngine) null, "TRACE", templateEngine_BlockArray0, aSTJexlScript0, templateEngine_TemplateExpressionArray0);
      ASTJexlScript aSTJexlScript1 = templateScript0.getScript();
      assertFalse(aSTJexlScript1.isLocalVar());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      TemplateEngine.Block[] templateEngine_BlockArray0 = new TemplateEngine.Block[3];
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(443);
      TemplateScript templateScript0 = new TemplateScript(templateEngine0, ";S3n&Y:9qs=(", templateEngine_BlockArray0, aSTJexlScript0, (TemplateEngine.TemplateExpression[]) null);
      ASTJexlScript aSTJexlScript1 = templateScript0.getScript();
      assertEquals(1048575, aSTJexlScript1.getLine());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(true, (-55675502), '0', '`');
      TemplateEngine.Block[] templateEngine_BlockArray0 = new TemplateEngine.Block[5];
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript((-787));
      TemplateEngine.TemplateExpression[] templateEngine_TemplateExpressionArray0 = new TemplateEngine.TemplateExpression[0];
      TemplateScript templateScript0 = new TemplateScript(templateEngine0, "XRCE[fE}8m?xN", templateEngine_BlockArray0, aSTJexlScript0, templateEngine_TemplateExpressionArray0);
      ASTJexlScript aSTJexlScript1 = templateScript0.getScript();
      assertFalse(aSTJexlScript1.isLocalVar());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, false, 0, '(', '(');
      JexlInfo jexlInfo0 = engine0.createInfo();
      StringReader stringReader0 = new StringReader("[pzg14Q)Y");
      String[] stringArray0 = new String[7];
      TemplateScript templateScript0 = templateEngine0.createTemplate(jexlInfo0, "[pzg14Q)Y", (Reader) stringReader0, stringArray0);
      ASTJexlScript aSTJexlScript0 = templateScript0.getScript();
      assertEquals(7, aSTJexlScript0.getArgCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo();
      JexlNode.Info jexlNode_Info0 = new JexlNode.Info((JexlNode) null, jexlInfo0);
      StringReader stringReader0 = new StringReader("c~Hi$a.!_-}N9EC[9|");
      String[] stringArray0 = new String[2];
      TemplateScript templateScript0 = new TemplateScript(templateEngine0, jexlNode_Info0, "qK((Ixe%o8.)", stringReader0, stringArray0);
      ASTJexlScript aSTJexlScript0 = templateScript0.getScript();
      assertEquals(0, aSTJexlScript0.getId());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, true, (-2887), '=', '=');
      TemplateEngine.Block[] templateEngine_BlockArray0 = new TemplateEngine.Block[4];
      StringProvider stringProvider0 = new StringProvider("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 0, 0, 1);
      ParserTokenManager parserTokenManager0 = new ParserTokenManager(simpleCharStream0);
      Parser parser0 = new Parser(parserTokenManager0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      Scope scope1 = new Scope(scope0, parserTokenManager0.jjstrLiteralImages);
      ASTJexlScript aSTJexlScript0 = parser0.JexlExpression(scope1);
      TemplateScript templateScript0 = new TemplateScript(templateEngine0, "N", templateEngine_BlockArray0, aSTJexlScript0, (TemplateEngine.TemplateExpression[]) null);
      Map<String, Object> map0 = templateScript0.getPragmas();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlInfo jexlInfo0 = engine0.createInfo("N", 1989, 1989);
      TemplateEngine templateEngine0 = engine0.createJxltEngine(false, 2564, 'w', 'w');
      TemplateEngine.Block[] templateEngine_BlockArray0 = new TemplateEngine.Block[6];
      Parser parser0 = new Parser("Ambiguous");
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.TemplateExpression[] templateEngine_TemplateExpressionArray0 = new TemplateEngine.TemplateExpression[1];
      StringReader stringReader0 = new StringReader("Ambiguous");
      String[] stringArray1 = new String[4];
      JexlOptions jexlOptions0 = new JexlOptions();
      Frame frame0 = new Frame(scope1, stringArray1, (-1727573867));
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      ASTJexlLambda aSTJexlLambda0 = mock(ASTJexlLambda.class, new ViolatedAssumptionAnswer());
      doReturn((Frame) null).when(aSTJexlLambda0).createFrame(any(org.apache.commons.jexl3.internal.Frame.class) , any(java.lang.Object[].class));
      doReturn((Map) null).when(aSTJexlLambda0).getPragmas();
      Closure closure0 = new Closure(interpreter0, aSTJexlLambda0);
      ASTJexlScript aSTJexlScript0 = closure0.script;
      TemplateScript templateScript0 = new TemplateScript(templateEngine0, "gRK7o", templateEngine_BlockArray0, aSTJexlScript0, templateEngine_TemplateExpressionArray0);
      templateScript0.getPragmas();
      stringArray1[0] = "N";
      stringArray1[1] = "N";
      stringArray1[2] = "Ambiguous";
      stringArray1[3] = "N";
      TemplateScript templateScript1 = templateEngine0.createTemplate(jexlInfo0, "N", (Reader) stringReader0, stringArray1);
      String string0 = templateScript1.toString();
      assertEquals("Ambiguous", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo();
      StringReader stringReader0 = new StringReader("vR");
      String[] stringArray0 = new String[5];
      TemplateScript templateScript0 = templateEngine0.createTemplate(jexlInfo0, "Ce[3oiHs=B", (Reader) stringReader0, stringArray0);
      String[] stringArray1 = templateScript0.getParameters();
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      StringReader stringReader0 = new StringReader("");
      String[] stringArray0 = new String[0];
      TemplateScript templateScript0 = new TemplateScript(templateEngine0, (JexlInfo) null, "", stringReader0, stringArray0);
      String[] stringArray1 = templateScript0.getParameters();
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TemplateEngine.Block[] templateEngine_BlockArray0 = new TemplateEngine.Block[3];
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript((-2555));
      TemplateScript templateScript0 = new TemplateScript((TemplateEngine) null, "o", templateEngine_BlockArray0, aSTJexlScript0, (TemplateEngine.TemplateExpression[]) null);
      TemplateEngine.TemplateExpression[] templateEngine_TemplateExpressionArray0 = templateScript0.getExpressions();
      assertNull(templateEngine_TemplateExpressionArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, false, (-1534), 'X', '=');
      JexlInfo jexlInfo0 = new JexlInfo("L`v8QERkMY", (-1534), 0);
      StringReader stringReader0 = new StringReader("");
      String[] stringArray0 = new String[6];
      TemplateScript templateScript0 = new TemplateScript(templateEngine0, jexlInfo0, "L`v8QERkMY", stringReader0, stringArray0);
      TemplateEngine.TemplateExpression[] templateEngine_TemplateExpressionArray0 = templateScript0.getExpressions();
      assertEquals(0, templateEngine_TemplateExpressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, false, (-1534), 'X', '=');
      JexlInfo jexlInfo0 = new JexlInfo("L`v8QERkMY", (-1534), 0);
      StringReader stringReader0 = new StringReader("");
      String[] stringArray0 = new String[6];
      TemplateScript templateScript0 = new TemplateScript(templateEngine0, jexlInfo0, "L`v8QERkMY", stringReader0, stringArray0);
      String string0 = templateScript0.asString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TemplateEngine.Block[] templateEngine_BlockArray0 = new TemplateEngine.Block[4];
      Parser parser0 = new Parser("");
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      Scope scope1 = new Scope(scope0, (String[]) null);
      ASTJexlScript aSTJexlScript0 = parser0.JexlExpression(scope1);
      TemplateEngine.TemplateExpression[] templateEngine_TemplateExpressionArray0 = new TemplateEngine.TemplateExpression[0];
      TemplateScript templateScript0 = new TemplateScript((TemplateEngine) null, (String) null, templateEngine_BlockArray0, aSTJexlScript0, templateEngine_TemplateExpressionArray0);
      // Undeclared exception!
      try { 
        templateScript0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.TemplateScript", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine.Block[] templateEngine_BlockArray0 = new TemplateEngine.Block[1];
      Parser parser0 = new Parser("jexl:print(");
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(parser0, 689);
      TemplateEngine.TemplateExpression[] templateEngine_TemplateExpressionArray0 = new TemplateEngine.TemplateExpression[0];
      TemplateScript templateScript0 = new TemplateScript((TemplateEngine) null, "prepare", templateEngine_BlockArray0, aSTJexlScript0, templateEngine_TemplateExpressionArray0);
      // Undeclared exception!
      try { 
        templateScript0.prepare(engine0.EMPTY_CONTEXT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.TemplateScript", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(false, (-803), '!', '#');
      ASTDivNode aSTDivNode0 = new ASTDivNode((-750));
      JexlInfo jexlInfo0 = new JexlInfo();
      JexlNode.Info jexlNode_Info0 = new JexlNode.Info(aSTDivNode0, jexlInfo0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "|{";
      Scope scope0 = new Scope((Scope) null, stringArray0);
      ASTJexlScript aSTJexlScript0 = engine0.parse(jexlNode_Info0, engine0.DEFAULT_FEATURES, "DEFERRED1", scope0);
      TemplateEngine.TemplateExpression[] templateEngine_TemplateExpressionArray0 = new TemplateEngine.TemplateExpression[4];
      TemplateEngine.DeferredExpression templateEngine_DeferredExpression0 = templateEngine0.new DeferredExpression("|{", aSTDivNode0, (TemplateEngine.TemplateExpression) null);
      templateEngine_TemplateExpressionArray0[0] = (TemplateEngine.TemplateExpression) templateEngine_DeferredExpression0;
      templateEngine_TemplateExpressionArray0[1] = (TemplateEngine.TemplateExpression) templateEngine_DeferredExpression0;
      TemplateEngine.ImmediateExpression templateEngine_ImmediateExpression0 = templateEngine0.new ImmediateExpression("DEFERRED1", aSTDivNode0, templateEngine_DeferredExpression0);
      templateEngine_TemplateExpressionArray0[2] = (TemplateEngine.TemplateExpression) templateEngine_ImmediateExpression0;
      TemplateScript templateScript0 = new TemplateScript(templateEngine0, "DEFERRED1", (TemplateEngine.Block[]) null, aSTJexlScript0, templateEngine_TemplateExpressionArray0);
      // Undeclared exception!
      try { 
        templateScript0.prepare(engine0.EMPTY_CONTEXT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      StringReader stringReader0 = new StringReader("ERNode");
      String[] stringArray0 = new String[7];
      TemplateScript templateScript0 = templateEngine0.createTemplate((JexlInfo) null, "s9|`\"V+K", (Reader) stringReader0, stringArray0);
      // Undeclared exception!
      try { 
        templateScript0.prepare(engine0.EMPTY_CONTEXT);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 7
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.jxlt();
      TemplateEngine.Block[] templateEngine_BlockArray0 = new TemplateEngine.Block[0];
      TemplateScript templateScript0 = new TemplateScript(templateEngine0, "//\n", templateEngine_BlockArray0, (ASTJexlScript) null, (TemplateEngine.TemplateExpression[]) null);
      // Undeclared exception!
      try { 
        templateScript0.getVariables();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.TemplateScript", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TemplateEngine.Block[] templateEngine_BlockArray0 = new TemplateEngine.Block[1];
      TemplateEngine.TemplateExpression[] templateEngine_TemplateExpressionArray0 = new TemplateEngine.TemplateExpression[0];
      TemplateScript templateScript0 = new TemplateScript((TemplateEngine) null, "SW", templateEngine_BlockArray0, (ASTJexlScript) null, templateEngine_TemplateExpressionArray0);
      // Undeclared exception!
      try { 
        templateScript0.getPragmas();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.TemplateScript", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TemplateEngine.Block[] templateEngine_BlockArray0 = new TemplateEngine.Block[1];
      TemplateEngine.TemplateExpression[] templateEngine_TemplateExpressionArray0 = new TemplateEngine.TemplateExpression[0];
      TemplateScript templateScript0 = new TemplateScript((TemplateEngine) null, "SW", templateEngine_BlockArray0, (ASTJexlScript) null, templateEngine_TemplateExpressionArray0);
      // Undeclared exception!
      try { 
        templateScript0.getParameters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.TemplateScript", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.jxlt();
      StringReader stringReader0 = new StringReader("t");
      String[] stringArray0 = new String[0];
      TemplateScript templateScript0 = new TemplateScript(templateEngine0, (JexlInfo) null, "", stringReader0, stringArray0);
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        templateScript0.evaluate(engine0.EMPTY_CONTEXT, (Writer) null, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TemplateEngine.Block[] templateEngine_BlockArray0 = new TemplateEngine.Block[9];
      Parser parser0 = new Parser("TRACE");
      ASTJexlScript aSTJexlScript0 = parser0.JexlScript((Scope) null);
      TemplateEngine.TemplateExpression[] templateEngine_TemplateExpressionArray0 = new TemplateEngine.TemplateExpression[0];
      TemplateScript templateScript0 = new TemplateScript((TemplateEngine) null, "TRACE", templateEngine_BlockArray0, aSTJexlScript0, templateEngine_TemplateExpressionArray0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapContext mapContext0 = new MapContext(hashMap0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("|se6");
      // Undeclared exception!
      try { 
        templateScript0.evaluate((JexlContext) mapContext0, (Writer) mockPrintWriter0, (Object[]) templateEngine_TemplateExpressionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.TemplateScript", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, true, 90, '~', '\"');
      JexlInfo jexlInfo0 = new JexlInfo();
      StringReader stringReader0 = new StringReader(";");
      String[] stringArray0 = new String[3];
      StringWriter stringWriter0 = new StringWriter();
      TemplateScript templateScript0 = new TemplateScript(templateEngine0, jexlInfo0, "ud", stringReader0, stringArray0);
      // Undeclared exception!
      try { 
        templateScript0.evaluate(engine0.EMPTY_CONTEXT, (Writer) stringWriter0, (Object[]) stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine.Block[] templateEngine_BlockArray0 = new TemplateEngine.Block[1];
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(0);
      TemplateEngine.TemplateExpression[] templateEngine_TemplateExpressionArray0 = new TemplateEngine.TemplateExpression[0];
      TemplateScript templateScript0 = new TemplateScript((TemplateEngine) null, "D&-(]#OZvc}", templateEngine_BlockArray0, aSTJexlScript0, templateEngine_TemplateExpressionArray0);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      // Undeclared exception!
      try { 
        templateScript0.evaluate(engine0.EMPTY_CONTEXT, (Writer) mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.TemplateScript", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, false, (-848), '+', '+');
      StringReader stringReader0 = new StringReader("org.apache.commons.jexl3.internal.TemplateEngine$Block");
      String[] stringArray0 = new String[8];
      TemplateScript templateScript0 = templateEngine0.createTemplate((JexlInfo) null, "org.apache.commons.jexl3.internal.TemplateEngine$Block", (Reader) stringReader0, stringArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.jexl3.internal.TemplateEngine$Block");
      // Undeclared exception!
      try { 
        templateScript0.evaluate(engine0.EMPTY_CONTEXT, (Writer) mockPrintWriter0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 8
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, true, (-2887), '=', '=');
      TemplateEngine.Block[] templateEngine_BlockArray0 = new TemplateEngine.Block[4];
      StringProvider stringProvider0 = new StringProvider("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 0, 0, 1);
      ParserTokenManager parserTokenManager0 = new ParserTokenManager(simpleCharStream0);
      Parser parser0 = new Parser(parserTokenManager0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      Scope scope1 = new Scope(scope0, parserTokenManager0.jjstrLiteralImages);
      ASTJexlScript aSTJexlScript0 = parser0.JexlExpression(scope1);
      TemplateScript templateScript0 = new TemplateScript(templateEngine0, "N", templateEngine_BlockArray0, aSTJexlScript0, (TemplateEngine.TemplateExpression[]) null);
      // Undeclared exception!
      try { 
        templateScript0.asString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.TemplateScript", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TemplateEngine.Block[] templateEngine_BlockArray0 = new TemplateEngine.Block[1];
      TemplateEngine.BlockType templateEngine_BlockType0 = TemplateEngine.BlockType.VERBATIM;
      TemplateEngine.Block templateEngine_Block0 = new TemplateEngine.Block(templateEngine_BlockType0, (-1286), "d[-:=}wQ:#@");
      templateEngine_BlockArray0[0] = templateEngine_Block0;
      TemplateEngine.TemplateExpression[] templateEngine_TemplateExpressionArray0 = new TemplateEngine.TemplateExpression[0];
      TemplateScript templateScript0 = new TemplateScript((TemplateEngine) null, "SW", templateEngine_BlockArray0, (ASTJexlScript) null, templateEngine_TemplateExpressionArray0);
      // Undeclared exception!
      try { 
        templateScript0.asString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.jexl3.internal.TemplateScript", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.createJxltEngine(true, (-1316), 'o', 'o');
      JexlInfo jexlInfo0 = new JexlInfo("", (-1316), (-1316));
      JexlNode.Info jexlNode_Info0 = new JexlNode.Info((JexlNode) null, jexlInfo0);
      StringReader stringReader0 = new StringReader("c~Hi$a.!_-}YN9EC[9|");
      String[] stringArray0 = new String[1];
      TemplateScript templateScript0 = null;
      try {
        templateScript0 = new TemplateScript(templateEngine0, jexlNode_Info0, "", stringReader0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // @1:2 ambiguous statement error in 'c~Hi$a.!_-}YN9EC[9|'
         //
         verifyException("org.apache.commons.jexl3.parser.JexlParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, true, 0, 'u', '_');
      JexlInfo jexlInfo0 = engine0.createInfo();
      StringReader stringReader0 = new StringReader("\"Y");
      String[] stringArray0 = new String[9];
      TemplateScript templateScript0 = null;
      try {
        templateScript0 = new TemplateScript(templateEngine0, jexlInfo0, "", stringReader0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, false, 0, 'l', 'l');
      StringReader stringReader0 = new StringReader("^dS<{Nk");
      TemplateScript templateScript0 = new TemplateScript(templateEngine0, (JexlInfo) null, "8I={\"IZ?VF&KxJO", stringReader0, (String[]) null);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, true, 90, '~', '\"');
      JexlInfo jexlInfo0 = new JexlInfo();
      String[] stringArray0 = new String[3];
      JxltEngine.Template jxltEngine_Template0 = templateEngine0.createTemplate(jexlInfo0, "ZAw:=DChz;6");
      StringWriter stringWriter0 = new StringWriter();
      jxltEngine_Template0.evaluate(engine0.EMPTY_CONTEXT, (Writer) stringWriter0, (Object[]) stringArray0);
      assertTrue(engine0.isStrict());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo();
      JexlNode.Info jexlNode_Info0 = new JexlNode.Info((JexlNode) null, jexlInfo0);
      StringReader stringReader0 = new StringReader("c~Hi$a.!_-}N9EC[9|");
      String[] stringArray0 = new String[2];
      TemplateScript templateScript0 = new TemplateScript(templateEngine0, jexlNode_Info0, "qK((Ixe%o8.)", stringReader0, stringArray0);
      Set<List<String>> set0 = templateScript0.getVariables();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(false, 2564, 'w', 'w');
      TemplateEngine.Block[] templateEngine_BlockArray0 = new TemplateEngine.Block[6];
      Parser parser0 = new Parser("AmbiguXouu");
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      Scope scope1 = new Scope(scope0, stringArray0);
      ASTJexlScript aSTJexlScript0 = parser0.JexlExpression(scope1);
      TemplateEngine.TemplateExpression[] templateEngine_TemplateExpressionArray0 = new TemplateEngine.TemplateExpression[1];
      TemplateEngine.NestedExpression templateEngine_NestedExpression0 = templateEngine0.new NestedExpression("AmbiguXouu", aSTJexlScript0, (TemplateEngine.TemplateExpression) null);
      templateEngine_TemplateExpressionArray0[0] = (TemplateEngine.TemplateExpression) templateEngine_NestedExpression0;
      TemplateScript templateScript0 = new TemplateScript(templateEngine0, "AmbiguXouu", templateEngine_BlockArray0, aSTJexlScript0, templateEngine_TemplateExpressionArray0);
      // Undeclared exception!
      try { 
        templateScript0.prepare(engine0.EMPTY_CONTEXT);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // @1:1![0,10]: 'AmbiguXouu' exception error : failed to prepare 'AmbiguXouu'
         //
         verifyException("org.apache.commons.jexl3.internal.TemplateEngine", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlInfo jexlInfo0 = engine0.createInfo();
      String[] stringArray0 = new String[8];
      TemplateEngine templateEngine0 = engine0.jxlt();
      StringReader stringReader0 = new StringReader("//\n");
      TemplateScript templateScript0 = templateEngine0.createTemplate(jexlInfo0, "", (Reader) stringReader0, stringArray0);
      String string0 = templateScript0.asString();
      assertEquals("//\n", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TemplateEngine templateEngine0 = new TemplateEngine((Engine) null, false, 490, '', '');
      StringReader stringReader0 = new StringReader("X");
      String[] stringArray0 = new String[4];
      TemplateScript templateScript0 = null;
      try {
        templateScript0 = new TemplateScript(templateEngine0, (JexlInfo) null, "", stringReader0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.TemplateScript", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = engine0.createInfo();
      StringReader stringReader0 = new StringReader("//\n");
      String[] stringArray0 = new String[1];
      TemplateScript templateScript0 = new TemplateScript(templateEngine0, jexlInfo0, "", stringReader0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, false, (byte)102, '>', '{');
      JexlInfo jexlInfo0 = engine0.createInfo();
      StringReader stringReader0 = new StringReader("g6i");
      String[] stringArray0 = new String[1];
      TemplateScript templateScript0 = new TemplateScript(templateEngine0, jexlInfo0, "", stringReader0, stringArray0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        templateScript0.evaluate(engine0.EMPTY_CONTEXT, (Writer) stringWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.jxlt();
      String[] stringArray0 = new String[1];
      TemplateScript templateScript0 = null;
      try {
        templateScript0 = new TemplateScript(templateEngine0, (JexlInfo) null, "aQ}", (Reader) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null input
         //
         verifyException("org.apache.commons.jexl3.internal.TemplateScript", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = (TemplateEngine)engine0.createJxltEngine(false);
      String[] stringArray0 = new String[2];
      TemplateScript templateScript0 = null;
      try {
        templateScript0 = new TemplateScript(templateEngine0, (JexlInfo) null, "#{", (Reader) null, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // #{: is not a valid directive pattern
         //
         verifyException("org.apache.commons.jexl3.internal.TemplateScript", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(true, (-1721874123), 'p', 'p');
      StringReader stringReader0 = new StringReader(":{");
      String[] stringArray0 = new String[1];
      JexlInfo jexlInfo0 = new JexlInfo("L67|1$", (-2028798559), (-1721874123));
      TemplateScript templateScript0 = null;
      try {
        templateScript0 = new TemplateScript(templateEngine0, jexlInfo0, "p{", stringReader0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // p{: is not a valid directive pattern
         //
         verifyException("org.apache.commons.jexl3.internal.TemplateScript", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, true, (byte) (-95), 'p', '{');
      JexlInfo jexlInfo0 = new JexlInfo();
      StringReader stringReader0 = new StringReader("{");
      String[] stringArray0 = new String[1];
      TemplateScript templateScript0 = null;
      try {
        templateScript0 = new TemplateScript(templateEngine0, jexlInfo0, "{", stringReader0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // {: is not a valid directive pattern
         //
         verifyException("org.apache.commons.jexl3.internal.TemplateScript", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, false, (-2156), '_', '_');
      StringReader stringReader0 = new StringReader("_");
      String[] stringArray0 = new String[20];
      TemplateScript templateScript0 = null;
      try {
        templateScript0 = new TemplateScript(templateEngine0, (JexlInfo) null, "_", stringReader0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // _: is not a valid directive pattern
         //
         verifyException("org.apache.commons.jexl3.internal.TemplateScript", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Engine engine0 = new Engine();
      StringReader stringReader0 = new StringReader("N1Gqg3Xg=#& rr2xoQ");
      String[] stringArray0 = new String[6];
      JexlInfo jexlInfo0 = engine0.createInfo();
      TemplateScript templateScript0 = null;
      try {
        templateScript0 = new TemplateScript((TemplateEngine) null, jexlInfo0, (String) null, stringReader0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null prefix
         //
         verifyException("org.apache.commons.jexl3.internal.TemplateScript", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(true, (-3237), '1', '1');
      JexlInfo jexlInfo0 = engine0.createInfo();
      TemplateScript templateScript0 = (TemplateScript)templateEngine0.createTemplate(jexlInfo0, "ud");
      TemplateScript templateScript1 = templateScript0.prepare(engine0.EMPTY_CONTEXT);
      assertNotSame(templateScript1, templateScript0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, true, 90, '~', '\"');
      JexlInfo jexlInfo0 = new JexlInfo();
      JxltEngine.Template jxltEngine_Template0 = templateEngine0.createTemplate(jexlInfo0, "ZAw:=DChz;6");
      String[] stringArray0 = jxltEngine_Template0.getParameters();
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(true, (-3237), '1', '1');
      JexlInfo jexlInfo0 = engine0.createInfo();
      TemplateScript templateScript0 = (TemplateScript)templateEngine0.createTemplate(jexlInfo0, "ud");
      TemplateEngine.TemplateExpression[] templateEngine_TemplateExpressionArray0 = templateScript0.getExpressions();
      assertEquals(1, templateEngine_TemplateExpressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(true, (-3237), '1', '1');
      JexlInfo jexlInfo0 = engine0.createInfo();
      JxltEngine.Template jxltEngine_Template0 = templateEngine0.createTemplate(jexlInfo0, "ud");
      StringWriter stringWriter0 = new StringWriter();
      jxltEngine_Template0.evaluate(engine0.EMPTY_CONTEXT, (Writer) stringWriter0);
      assertTrue(engine0.isDebug());
  }
}
