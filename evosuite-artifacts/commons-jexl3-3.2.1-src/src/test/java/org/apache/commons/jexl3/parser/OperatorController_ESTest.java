/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 18:23:24 GMT 2022
 */

package org.apache.commons.jexl3.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import org.apache.commons.jexl3.parser.ASTAddNode;
import org.apache.commons.jexl3.parser.ASTAssignment;
import org.apache.commons.jexl3.parser.ASTBitwiseAndNode;
import org.apache.commons.jexl3.parser.ASTBitwiseComplNode;
import org.apache.commons.jexl3.parser.ASTBitwiseOrNode;
import org.apache.commons.jexl3.parser.ASTBitwiseXorNode;
import org.apache.commons.jexl3.parser.ASTDivNode;
import org.apache.commons.jexl3.parser.ASTEQNode;
import org.apache.commons.jexl3.parser.ASTERNode;
import org.apache.commons.jexl3.parser.ASTEWNode;
import org.apache.commons.jexl3.parser.ASTGENode;
import org.apache.commons.jexl3.parser.ASTGTNode;
import org.apache.commons.jexl3.parser.ASTLENode;
import org.apache.commons.jexl3.parser.ASTLTNode;
import org.apache.commons.jexl3.parser.ASTModNode;
import org.apache.commons.jexl3.parser.ASTMulNode;
import org.apache.commons.jexl3.parser.ASTNENode;
import org.apache.commons.jexl3.parser.ASTNEWNode;
import org.apache.commons.jexl3.parser.ASTNRNode;
import org.apache.commons.jexl3.parser.ASTNSWNode;
import org.apache.commons.jexl3.parser.ASTNotNode;
import org.apache.commons.jexl3.parser.ASTSWNode;
import org.apache.commons.jexl3.parser.ASTSetAddNode;
import org.apache.commons.jexl3.parser.ASTSetAndNode;
import org.apache.commons.jexl3.parser.ASTSetDivNode;
import org.apache.commons.jexl3.parser.ASTSetModNode;
import org.apache.commons.jexl3.parser.ASTSetMultNode;
import org.apache.commons.jexl3.parser.ASTSetOrNode;
import org.apache.commons.jexl3.parser.ASTSetSubNode;
import org.apache.commons.jexl3.parser.ASTSetXorNode;
import org.apache.commons.jexl3.parser.ASTStringLiteral;
import org.apache.commons.jexl3.parser.ASTSubNode;
import org.apache.commons.jexl3.parser.JexlLexicalNode;
import org.apache.commons.jexl3.parser.JexlNode;
import org.apache.commons.jexl3.parser.OperatorController;
import org.apache.commons.jexl3.parser.Parser;
import org.apache.commons.jexl3.parser.StringProvider;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OperatorController_ESTest extends OperatorController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OperatorController operatorController0 = OperatorController.INSTANCE;
      ASTNRNode aSTNRNode0 = new ASTNRNode(0);
      File file0 = MockFile.createTempFile("a:", "a:");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      Object object0 = operatorController0.visit(aSTNRNode0, mockFileInputStream0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OperatorController operatorController0 = OperatorController.INSTANCE;
      StringProvider stringProvider0 = new StringProvider("AX$.edG'{}-D{f");
      Parser parser0 = new Parser(stringProvider0);
      ASTNENode aSTNENode0 = new ASTNENode(parser0, (-1));
      Object object0 = operatorController0.visit(aSTNENode0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OperatorController operatorController0 = OperatorController.INSTANCE;
      ASTEQNode aSTEQNode0 = new ASTEQNode(0);
      Object object0 = operatorController0.visit(aSTEQNode0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OperatorController operatorController0 = new OperatorController();
      ASTStringLiteral aSTStringLiteral0 = new ASTStringLiteral(88);
      Boolean boolean0 = new Boolean(false);
      boolean boolean1 = operatorController0.control(aSTStringLiteral0, boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OperatorController operatorController0 = new OperatorController();
      JexlLexicalNode jexlLexicalNode0 = new JexlLexicalNode(0);
      Boolean boolean0 = new Boolean("");
      // Undeclared exception!
      try { 
        operatorController0.control(jexlLexicalNode0, boolean0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // JexlLexicalNode : not supported yet.
         //
         verifyException("org.apache.commons.jexl3.parser.ParserVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OperatorController operatorController0 = new OperatorController();
      Boolean boolean0 = Boolean.TRUE;
      // Undeclared exception!
      try { 
        operatorController0.control((JexlNode) null, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.OperatorController", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OperatorController operatorController0 = OperatorController.INSTANCE;
      ASTEWNode aSTEWNode0 = new ASTEWNode((-195));
      Object object0 = operatorController0.visit(aSTEWNode0, aSTEWNode0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OperatorController operatorController0 = new OperatorController();
      StringProvider stringProvider0 = new StringProvider(" _>-Oz7~9Rg+imUTop?");
      Parser parser0 = new Parser(stringProvider0);
      ASTBitwiseComplNode aSTBitwiseComplNode0 = new ASTBitwiseComplNode(parser0, 0);
      Object object0 = operatorController0.visit(aSTBitwiseComplNode0, parser0);
      assertEquals(true, object0);
      
      ASTSetDivNode aSTSetDivNode0 = new ASTSetDivNode(0);
      Object object1 = operatorController0.visit(aSTSetDivNode0, object0);
      assertEquals(true, object1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OperatorController operatorController0 = new OperatorController();
      StringProvider stringProvider0 = new StringProvider(" _>-Oz7~9Rg+imUTop?");
      Parser parser0 = new Parser(stringProvider0);
      ASTLTNode aSTLTNode0 = new ASTLTNode(parser0, 0);
      Integer integer0 = new Integer(0);
      Object object0 = operatorController0.visit(aSTLTNode0, integer0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OperatorController operatorController0 = new OperatorController();
      ASTAssignment aSTAssignment0 = new ASTAssignment(0);
      ASTSetOrNode aSTSetOrNode0 = new ASTSetOrNode((Parser) null, 0);
      Object object0 = operatorController0.visit(aSTSetOrNode0, aSTAssignment0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OperatorController operatorController0 = new OperatorController();
      ASTAddNode aSTAddNode0 = new ASTAddNode(1833);
      Object object0 = operatorController0.visit(aSTAddNode0, operatorController0);
      assertEquals(true, object0);
      
      ASTBitwiseXorNode aSTBitwiseXorNode0 = new ASTBitwiseXorNode((Parser) null, 1833);
      Object object1 = operatorController0.visitNode(aSTBitwiseXorNode0, object0);
      assertEquals(false, object1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OperatorController operatorController0 = OperatorController.INSTANCE;
      Boolean boolean0 = Boolean.TRUE;
      ASTNENode aSTNENode0 = new ASTNENode((-195));
      Object object0 = operatorController0.visit(aSTNENode0, boolean0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OperatorController operatorController0 = new OperatorController();
      StringProvider stringProvider0 = new StringProvider(" _>-Oz7~9Rg+imUTop?");
      Parser parser0 = new Parser(stringProvider0);
      ASTBitwiseComplNode aSTBitwiseComplNode0 = new ASTBitwiseComplNode(parser0, 0);
      Object object0 = operatorController0.visit(aSTBitwiseComplNode0, parser0);
      assertEquals(true, object0);
      
      ASTNEWNode aSTNEWNode0 = new ASTNEWNode(0);
      Object object1 = operatorController0.visit(aSTNEWNode0, object0);
      assertEquals(true, object1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OperatorController operatorController0 = OperatorController.INSTANCE;
      ASTNSWNode aSTNSWNode0 = new ASTNSWNode(2128);
      Object object0 = operatorController0.visit(aSTNSWNode0, "\"lt\"");
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OperatorController operatorController0 = OperatorController.INSTANCE;
      Parser parser0 = new Parser("\"lt\"");
      Boolean boolean0 = Boolean.valueOf("\"lt\"");
      ASTBitwiseOrNode aSTBitwiseOrNode0 = new ASTBitwiseOrNode(parser0, 2128);
      Object object0 = operatorController0.visit(aSTBitwiseOrNode0, boolean0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OperatorController operatorController0 = OperatorController.INSTANCE;
      Parser parser0 = new Parser("\"lt\"");
      ASTLENode aSTLENode0 = new ASTLENode(parser0, 2128);
      ASTERNode aSTERNode0 = new ASTERNode((Parser) null, 2128);
      Object object0 = operatorController0.visit(aSTERNode0, aSTLENode0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OperatorController operatorController0 = new OperatorController();
      StringProvider stringProvider0 = new StringProvider(" _>-Oz7~9Rg+imUTop?");
      Parser parser0 = new Parser(stringProvider0);
      ASTBitwiseComplNode aSTBitwiseComplNode0 = new ASTBitwiseComplNode(parser0, 0);
      Object object0 = operatorController0.visit(aSTBitwiseComplNode0, parser0);
      assertEquals(true, object0);
      
      ASTSetSubNode aSTSetSubNode0 = new ASTSetSubNode(0);
      Object object1 = operatorController0.visit(aSTSetSubNode0, object0);
      assertEquals(true, object1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OperatorController operatorController0 = OperatorController.INSTANCE;
      Parser parser0 = new Parser("\"lt\"");
      Boolean boolean0 = Boolean.valueOf("\"lt\"");
      ASTEQNode aSTEQNode0 = new ASTEQNode(parser0, 2128);
      Object object0 = operatorController0.visit(aSTEQNode0, boolean0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OperatorController operatorController0 = OperatorController.INSTANCE;
      ASTMulNode aSTMulNode0 = new ASTMulNode(0);
      Object object0 = operatorController0.visit(aSTMulNode0, operatorController0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OperatorController operatorController0 = new OperatorController();
      ASTDivNode aSTDivNode0 = new ASTDivNode(0);
      Object object0 = operatorController0.visit(aSTDivNode0, " _>-Oz7~9Rg+imUTop?");
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OperatorController operatorController0 = new OperatorController();
      ASTSWNode aSTSWNode0 = new ASTSWNode((Parser) null, 0);
      Object object0 = operatorController0.visit(aSTSWNode0, aSTSWNode0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OperatorController operatorController0 = OperatorController.INSTANCE;
      ASTNRNode aSTNRNode0 = new ASTNRNode(0);
      ASTSetXorNode aSTSetXorNode0 = new ASTSetXorNode(0);
      Object object0 = operatorController0.visit(aSTSetXorNode0, aSTNRNode0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OperatorController operatorController0 = new OperatorController();
      ASTBitwiseXorNode aSTBitwiseXorNode0 = new ASTBitwiseXorNode((Parser) null, 1833);
      ASTSubNode aSTSubNode0 = new ASTSubNode((Parser) null, 1833);
      Object object0 = operatorController0.visit(aSTSubNode0, aSTBitwiseXorNode0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OperatorController operatorController0 = OperatorController.INSTANCE;
      Parser parser0 = new Parser("\"lt\"");
      ASTLENode aSTLENode0 = new ASTLENode(parser0, 2128);
      Object object0 = operatorController0.visit(aSTLENode0, "\"lt\"");
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OperatorController operatorController0 = new OperatorController();
      ASTGENode aSTGENode0 = new ASTGENode((Parser) null, 0);
      Object object0 = operatorController0.visit(aSTGENode0, aSTGENode0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OperatorController operatorController0 = OperatorController.INSTANCE;
      ASTNRNode aSTNRNode0 = new ASTNRNode(0);
      Boolean boolean0 = Boolean.FALSE;
      boolean boolean1 = operatorController0.control(aSTNRNode0, boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OperatorController operatorController0 = new OperatorController();
      Object object0 = operatorController0.visit((ASTBitwiseAndNode) null, "unable to get object property, class: ");
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OperatorController operatorController0 = OperatorController.INSTANCE;
      Boolean boolean0 = Boolean.valueOf("\"lt\"");
      ASTNotNode aSTNotNode0 = new ASTNotNode(2128);
      Object object0 = operatorController0.visit(aSTNotNode0, boolean0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OperatorController operatorController0 = new OperatorController();
      StringProvider stringProvider0 = new StringProvider(" _>-Oz7~9Rg+imUTop?");
      Parser parser0 = new Parser(stringProvider0);
      ASTBitwiseComplNode aSTBitwiseComplNode0 = new ASTBitwiseComplNode(parser0, 0);
      Object object0 = operatorController0.visit(aSTBitwiseComplNode0, parser0);
      assertEquals(true, object0);
      
      ASTGTNode aSTGTNode0 = new ASTGTNode(0);
      Object object1 = operatorController0.visit(aSTGTNode0, object0);
      assertEquals(true, object1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OperatorController operatorController0 = OperatorController.INSTANCE;
      ASTSetAddNode aSTSetAddNode0 = new ASTSetAddNode(2128);
      Object object0 = operatorController0.visit(aSTSetAddNode0, (Object) null);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OperatorController operatorController0 = OperatorController.INSTANCE;
      ASTSetModNode aSTSetModNode0 = new ASTSetModNode(2128);
      Object object0 = operatorController0.visit(aSTSetModNode0, aSTSetModNode0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OperatorController operatorController0 = OperatorController.INSTANCE;
      ASTSetMultNode aSTSetMultNode0 = new ASTSetMultNode(2128);
      Object object0 = operatorController0.visit(aSTSetMultNode0, aSTSetMultNode0);
      assertEquals(true, object0);
      
      ASTModNode aSTModNode0 = new ASTModNode(2128);
      Object object1 = operatorController0.visit(aSTModNode0, object0);
      assertEquals(true, object1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OperatorController operatorController0 = OperatorController.INSTANCE;
      Integer integer0 = new Integer(0);
      Object object0 = operatorController0.visit((ASTSetAndNode) null, integer0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OperatorController operatorController0 = new OperatorController();
      ASTAddNode aSTAddNode0 = new ASTAddNode(1833);
      Object object0 = operatorController0.visit(aSTAddNode0, operatorController0);
      assertEquals(true, object0);
      
      ASTBitwiseXorNode aSTBitwiseXorNode0 = new ASTBitwiseXorNode((Parser) null, 1833);
      Object object1 = operatorController0.visit(aSTBitwiseXorNode0, object0);
      assertEquals(true, object1);
  }
}
