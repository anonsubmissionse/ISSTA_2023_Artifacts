/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 18:07:13 GMT 2022
 */

package org.apache.commons.jexl3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.jexl3.JexlInfo;
import org.apache.commons.jexl3.JexlScript;
import org.apache.commons.jexl3.internal.Script;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JexlInfo_ESTest extends JexlInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo("NvK}{u j8uP&xf", 0, 3);
      JexlInfo jexlInfo1 = jexlInfo0.at(3, 0);
      jexlInfo1.toString();
      assertEquals(3, jexlInfo1.getLine());
      assertEquals(3, jexlInfo0.getColumn());
      assertEquals(0, jexlInfo1.getColumn());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo("1vl=UE|g<cj", (-6), (-6));
      String string0 = jexlInfo0.toString();
      assertEquals((-6), jexlInfo0.getColumn());
      assertEquals("1vl=UE|g<cj", string0);
      assertEquals((-6), jexlInfo0.getLine());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo("", 0, 0);
      String string0 = jexlInfo0.toString();
      assertEquals(0, jexlInfo0.getLine());
      assertEquals("", string0);
      assertEquals(0, jexlInfo0.getColumn());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo((String) null, 53, (-684));
      jexlInfo0.getName();
      assertEquals(53, jexlInfo0.getLine());
      assertEquals((-684), jexlInfo0.getColumn());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo("NvK}{u j8uP&xf", 0, 3);
      jexlInfo0.getName();
      assertEquals(3, jexlInfo0.getColumn());
      assertEquals(0, jexlInfo0.getLine());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo("1vl=UE|g<cj", 9, 9);
      int int0 = jexlInfo0.getLine();
      assertEquals(9, int0);
      assertEquals(9, jexlInfo0.getColumn());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo("1vl=UE|g<cj", (-6), (-6));
      int int0 = jexlInfo0.getLine();
      assertEquals((-6), jexlInfo0.getColumn());
      assertEquals((-6), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo("or/.apache.commons.jexl3.JexJEngine$1", (-192), 14);
      int int0 = jexlInfo0.getColumn();
      assertEquals((-192), jexlInfo0.getLine());
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo("or/.apace.commos.jexl.JexJEngine$1", (-215), (-215));
      int int0 = jexlInfo0.getColumn();
      assertEquals((-215), int0);
      assertEquals((-215), jexlInfo0.getLine());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo("org.apache.commons.jexl3.internal.<evosuite>", 22, 69);
      Script script0 = mock(Script.class, new ViolatedAssumptionAnswer());
      doReturn(jexlInfo0).when(script0).getInfo();
      JexlInfo jexlInfo1 = JexlInfo.from(script0);
      assertEquals(22, jexlInfo1.getLine());
      assertEquals(69, jexlInfo1.getColumn());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo(": Not supported.", (-637), 4);
      Script script0 = mock(Script.class, new ViolatedAssumptionAnswer());
      doReturn(jexlInfo0).when(script0).getInfo();
      JexlInfo jexlInfo1 = JexlInfo.from(script0);
      assertEquals((-637), jexlInfo1.getLine());
      assertEquals(4, jexlInfo1.getColumn());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo("9Fb2^-j6pi9", (-2353), (-2117));
      Script script0 = mock(Script.class, new ViolatedAssumptionAnswer());
      doReturn(jexlInfo0).when(script0).getInfo();
      JexlInfo jexlInfo1 = JexlInfo.from(script0);
      assertEquals((-2353), jexlInfo1.getLine());
      assertEquals((-2117), jexlInfo1.getColumn());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo("or/.apache.commons.jexl3.JexJEngine$1", (-192), 14);
      JexlInfo jexlInfo1 = jexlInfo0.detach();
      assertEquals(14, jexlInfo1.getColumn());
      assertEquals((-192), jexlInfo1.getLine());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo("", 0, 0);
      JexlInfo jexlInfo1 = jexlInfo0.detach();
      assertEquals(0, jexlInfo1.getLine());
      assertEquals(0, jexlInfo1.getColumn());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo((String) null, 1524, (-2050836905));
      JexlInfo jexlInfo1 = jexlInfo0.detach();
      assertEquals((-2050836905), jexlInfo1.getColumn());
      assertEquals(1524, jexlInfo1.getLine());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo();
      JexlInfo jexlInfo1 = jexlInfo0.at(0, (-3581));
      assertEquals(0, jexlInfo1.getLine());
      assertEquals((-3581), jexlInfo1.getColumn());
      assertEquals("<evosuite>.<evosuite>:-1", jexlInfo1.getName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo("or/.apace.commos.jexl.JexJEngine$1", (-215), (-215));
      JexlInfo jexlInfo1 = jexlInfo0.at((-215), (-1154));
      assertEquals((-215), jexlInfo1.getLine());
      assertEquals((-1154), jexlInfo1.getColumn());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JexlInfo jexlInfo0 = null;
      try {
        jexlInfo0 = new JexlInfo((JexlInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo("", 0, 0);
      int int0 = jexlInfo0.getColumn();
      assertEquals(0, jexlInfo0.getLine());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo("org.apache.commons.jexl3.internal.<evosuite>", 3662, (-371));
      jexlInfo0.getDetail();
      assertEquals(3662, jexlInfo0.getLine());
      assertEquals((-371), jexlInfo0.getColumn());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo("", 0, 0);
      jexlInfo0.getName();
      assertEquals(0, jexlInfo0.getColumn());
      assertEquals(0, jexlInfo0.getLine());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo();
      int int0 = jexlInfo0.getLine();
      assertEquals("<evosuite>.<evosuite>:-1", jexlInfo0.getName());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo();
      Script script0 = mock(Script.class, new ViolatedAssumptionAnswer());
      doReturn(jexlInfo0).when(script0).getInfo();
      JexlInfo jexlInfo1 = JexlInfo.from(script0);
      assertEquals("<evosuite>.<evosuite>:-1", jexlInfo1.getName());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JexlInfo jexlInfo0 = JexlInfo.from((JexlScript) null);
      assertNull(jexlInfo0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo((String) null, 2040, (-604));
      String string0 = jexlInfo0.toString();
      assertEquals((-604), jexlInfo0.getColumn());
      assertEquals("@2040", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo((String) null, 2040, (-604));
      JexlInfo jexlInfo1 = new JexlInfo(jexlInfo0);
      assertEquals((-604), jexlInfo0.getColumn());
      assertEquals((-604), jexlInfo1.getColumn());
      assertEquals(2040, jexlInfo1.getLine());
      assertEquals(2040, jexlInfo0.getLine());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo((String) null, 1874, 17);
      String string0 = jexlInfo0.toString();
      assertEquals("@1874:17", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo((String) null, 1874, 17);
      JexlInfo jexlInfo1 = jexlInfo0.at(1874, 1874);
      assertEquals(1874, jexlInfo1.getLine());
      assertEquals(17, jexlInfo0.getColumn());
      assertEquals(1874, jexlInfo0.getLine());
      assertEquals(1874, jexlInfo1.getColumn());
  }
}
