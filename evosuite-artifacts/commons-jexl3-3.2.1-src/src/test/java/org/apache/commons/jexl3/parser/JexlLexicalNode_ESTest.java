/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 18:13:54 GMT 2022
 */

package org.apache.commons.jexl3.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.jexl3.internal.LexicalScope;
import org.apache.commons.jexl3.parser.ASTBlock;
import org.apache.commons.jexl3.parser.ASTJexlLambda;
import org.apache.commons.jexl3.parser.JexlLexicalNode;
import org.apache.commons.jexl3.parser.Parser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JexlLexicalNode_ESTest extends JexlLexicalNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JexlLexicalNode jexlLexicalNode0 = new JexlLexicalNode(0);
      jexlLexicalNode0.declareSymbol(0);
      LexicalScope lexicalScope0 = jexlLexicalNode0.getLexicalScope();
      assertEquals(1, lexicalScope0.getSymbolCount());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JexlLexicalNode jexlLexicalNode0 = new JexlLexicalNode(0);
      jexlLexicalNode0.declareSymbol(0);
      boolean boolean0 = jexlLexicalNode0.declareSymbol(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Parser parser0 = new Parser("\"or\"");
      JexlLexicalNode jexlLexicalNode0 = new JexlLexicalNode(parser0, 0);
      assertEquals(0, jexlLexicalNode0.jjtGetNumChildren());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ASTJexlLambda aSTJexlLambda0 = new ASTJexlLambda((-18));
      aSTJexlLambda0.declareSymbol((-18));
      boolean boolean0 = aSTJexlLambda0.hasSymbol((-18));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ASTJexlLambda aSTJexlLambda0 = new ASTJexlLambda((-18));
      aSTJexlLambda0.declareSymbol((-18));
      boolean boolean0 = aSTJexlLambda0.hasSymbol(1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ASTBlock aSTBlock0 = new ASTBlock((Parser) null, 763);
      boolean boolean0 = aSTBlock0.hasSymbol(763);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ASTJexlLambda aSTJexlLambda0 = new ASTJexlLambda((-18));
      aSTJexlLambda0.declareSymbol((-18));
      int int0 = aSTJexlLambda0.getSymbolCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ASTJexlLambda aSTJexlLambda0 = new ASTJexlLambda((-18));
      aSTJexlLambda0.declareSymbol((-18));
      boolean boolean0 = aSTJexlLambda0.declareSymbol(1);
      assertEquals(2, aSTJexlLambda0.getSymbolCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ASTBlock aSTBlock0 = new ASTBlock((Parser) null, 763);
      int int0 = aSTBlock0.getSymbolCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ASTJexlLambda aSTJexlLambda0 = new ASTJexlLambda((-18));
      LexicalScope lexicalScope0 = aSTJexlLambda0.getLexicalScope();
      assertNull(lexicalScope0);
  }
}
