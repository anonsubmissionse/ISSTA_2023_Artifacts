/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 18:19:10 GMT 2022
 */

package org.apache.commons.jexl3.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.jexl3.JexlFeatures;
import org.apache.commons.jexl3.parser.ASTAnnotation;
import org.apache.commons.jexl3.parser.FeatureController;
import org.apache.commons.jexl3.parser.OperatorController;
import org.apache.commons.jexl3.parser.Parser;
import org.apache.commons.jexl3.parser.ParserVisitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ASTAnnotation_ESTest extends ASTAnnotation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ASTAnnotation aSTAnnotation0 = new ASTAnnotation(1606);
      aSTAnnotation0.setName("Yg:DH%Bos=JN2%Y,2W\"");
      String string0 = aSTAnnotation0.toString();
      assertEquals("Yg:DH%Bos=JN2%Y,2W\"", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ASTAnnotation aSTAnnotation0 = new ASTAnnotation((Parser) null, (-417));
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      Object object0 = aSTAnnotation0.jjtAccept(featureController0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ASTAnnotation aSTAnnotation0 = new ASTAnnotation(0);
      aSTAnnotation0.setName("Ls(*4>&4F");
      String string0 = aSTAnnotation0.getName();
      assertEquals("Ls(*4>&4F", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ASTAnnotation aSTAnnotation0 = new ASTAnnotation(57);
      // Undeclared exception!
      try { 
        aSTAnnotation0.setName("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ASTAnnotation aSTAnnotation0 = new ASTAnnotation((-2648));
      // Undeclared exception!
      try { 
        aSTAnnotation0.setName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.ASTAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ASTAnnotation aSTAnnotation0 = new ASTAnnotation(1);
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.annotation(false);
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      // Undeclared exception!
      try { 
        aSTAnnotation0.jjtAccept(featureController0, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ?: annotation error in ''
         //
         verifyException("org.apache.commons.jexl3.parser.FeatureController", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ASTAnnotation aSTAnnotation0 = new ASTAnnotation((-1));
      // Undeclared exception!
      try { 
        aSTAnnotation0.jjtAccept((ParserVisitor) null, "03D");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.ASTAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ASTAnnotation aSTAnnotation0 = new ASTAnnotation(63);
      aSTAnnotation0.setName("\"&&\"");
      assertEquals("\"&&\"", aSTAnnotation0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Parser parser0 = new Parser("");
      ASTAnnotation aSTAnnotation0 = new ASTAnnotation(parser0, 148);
      OperatorController operatorController0 = new OperatorController();
      Object object0 = aSTAnnotation0.jjtAccept(operatorController0, operatorController0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ASTAnnotation aSTAnnotation0 = new ASTAnnotation((-1));
      String string0 = aSTAnnotation0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ASTAnnotation aSTAnnotation0 = new ASTAnnotation((-1));
      String string0 = aSTAnnotation0.toString();
      assertNull(string0);
  }
}
