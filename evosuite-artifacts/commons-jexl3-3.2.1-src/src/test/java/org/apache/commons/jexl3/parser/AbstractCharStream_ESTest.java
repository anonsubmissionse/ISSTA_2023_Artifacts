/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 17:33:06 GMT 2022
 */

package org.apache.commons.jexl3.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.StreamCorruptedException;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import org.apache.commons.jexl3.parser.AbstractCharStream;
import org.apache.commons.jexl3.parser.Provider;
import org.apache.commons.jexl3.parser.SimpleCharStream;
import org.apache.commons.jexl3.parser.StreamProvider;
import org.apache.commons.jexl3.parser.StringProvider;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractCharStream_ESTest extends AbstractCharStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Provider provider0 = null;
      int int0 = 1;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, 1, 0, 1);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.internalAdjustBuffSize();
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit(1, 1, 0);
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.inBuf = 1;
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'C';
      int int1 = simpleCharStream0.getTabSize();
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.buffer = charArray0;
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      
      // Undeclared exception!
      try { 
        simpleCharStream0.adjustBeginLineColumn((-4062), 1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, 0, 0, 0);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.inBuf = 1193;
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      
      simpleCharStream0.maxNextCharInd = 0;
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      
      // Undeclared exception!
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte byte0 = (byte)103;
      byteArray0[0] = (byte)103;
      byte byte1 = (byte)74;
      byteArray0[1] = (byte)74;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)103, (byte)74}, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, byteArray0.length);
      
      StringReader stringReader0 = new StringReader("eWE;p");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(101, int0);
      
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      assertNotNull(streamProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(streamProvider0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.internalAdjustBuffSize();
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      char[] charArray0 = simpleCharStream0.getSuffix((byte)74);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertNotNull(charArray0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      assertEquals(74, charArray0.length);
      
      stringReader0.reset();
      String string0 = simpleCharStream0.getImage();
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertNotNull(string0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = AbstractCharStream.hexval('0');
      assertEquals(0, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.setTabSize(0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int1 = simpleCharStream0.getTabSize();
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      String string0 = simpleCharStream0.getImage();
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(string0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("");
      assertNotNull(stringProvider0);
      
      stringProvider0.close();
      stringProvider0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      char[] charArray0 = new char[3];
      simpleCharStream0.streamClose();
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int0 = 0;
      int int1 = AbstractCharStream.hexval('A');
      assertEquals(10, int1);
      assertFalse(int1 == int0);
      
      int int2 = stringProvider0.read(charArray0, 0, 0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(3, charArray0.length);
      
      charArray0[0] = 'n';
      charArray0[1] = 'k';
      charArray0[2] = '~';
      int int3 = stringProvider0.read(charArray0, 4096, 1);
      assertArrayEquals(new char[] {'n', 'k', '~'}, charArray0);
      assertEquals((-1), int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(3, charArray0.length);
      
      simpleCharStream0.bufsize = (-1);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      int int4 = simpleCharStream0.getBufSizeAfterExpansion();
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-2), int4);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot back 0 chars which is larger than the internal buffer size (-1)
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, (-1), (-1));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.adjustBeginLineColumn((-1), (-1));
      assertEquals((-1), simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.available = (int) (byte) (-88);
      assertEquals((-1), simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      
      simpleCharStream0.maxNextCharInd = 10;
      assertEquals((-1), simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      
      char char0 = simpleCharStream0.readChar();
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals('\u0000', char0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.internalAdjustBuffSize();
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.setTabSize((-1));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals((-1), simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.internalAdjustBuffSize();
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals((-1), simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.expandBuff(true);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals((-1), simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int0 = AbstractCharStream.hexval('C');
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringReader stringReader0 = new StringReader("L?RTCdlturFy#Zxn");
      assertNotNull(stringReader0);
      
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      assertNotNull(streamProvider0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = 4074;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(streamProvider0, (-3684), 4074, 4074);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.done();
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      char char0 = 'b';
      // Undeclared exception!
      try { 
        simpleCharStream0.getEndLine();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = AbstractCharStream.hexval('2');
      assertEquals(2, int0);
      
      String string0 = null;
      File file0 = null;
      try {
        file0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("Invalid hex char '");
      assertNotNull(stringProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      char char0 = simpleCharStream0.beginToken();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals('I', char0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      char[] charArray0 = new char[0];
      int int0 = simpleCharStream0.streamRead(charArray0, (-748), 4096);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-1), int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      assertEquals(0, charArray0.length);
      
      simpleCharStream0.bufsize = (-748);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      
      simpleCharStream0.inBuf = (-748);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      
      simpleCharStream0.reInit((Provider) stringProvider0, (-748), 3);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      simpleCharStream0.adjustBeginLineColumn((-748), (-1));
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit((-748), 'I', 4096);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.beginToken();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot back 0 chars which is larger than the internal buffer size (-748)
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      try { 
        AbstractCharStream.hexval('`');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char '`' (=96) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = 0;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, 0, 0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int1 = AbstractCharStream.hexval('0');
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      simpleCharStream0.backup((-19));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.tokenBegin = 555;
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      
      simpleCharStream0.reInit(3137, 0, 3137);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      try { 
        AbstractCharStream.hexval('P');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char 'P' (=80) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = AbstractCharStream.hexval('b');
      assertEquals(11, int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte) (-44);
      byteArray0[7] = (byte)84;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)11, (byte) (-6), (byte)60, (byte)4, (byte) (-44), (byte)84}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArray0.length);
      
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(byteArrayInputStream0);
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(Throwable e) {
         //
         // invalid stream header: FF000BFA
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      StringProvider stringProvider0 = new StringProvider("Sx$:9oSMg.>7m'");
      assertNotNull(stringProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int0 = simpleCharStream0.getBufSizeAfterExpansion();
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(8192, int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int1 = simpleCharStream0.getTabSize();
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int2 = AbstractCharStream.hexval('4');
      assertEquals(4, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '_';
      // Undeclared exception!
      try { 
        simpleCharStream0.streamRead(charArray0, 4, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("C(OH:|Q&z7qE87");
      assertNotNull(stringProvider0);
      
      int int0 = 0;
      char char0 = 'I';
      int int1 = 12;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 0, 0, 0);
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit((Provider) stringProvider0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.available = (-9);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      simpleCharStream0.reInit((Provider) stringProvider0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.backup(1);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit((Provider) stringProvider0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.fillBuff();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("Invalid hex char '");
      assertNotNull(stringProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0);
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      stringProvider0.close();
      String string0 = simpleCharStream0.getImage();
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(string0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit((-2037), 82, 442);
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      try { 
        AbstractCharStream.hexval('>');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char '>' (=62) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      try { 
        AbstractCharStream.hexval('<');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char '<' (=60) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = (-3088);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, (-1), (-3088));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.adjustBeginLineColumn((-3088), (-3088));
      assertEquals((-3088), simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.maxNextCharInd = 10;
      assertEquals((-3088), simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      
      char char0 = simpleCharStream0.readChar();
      assertEquals((-3087), simpleCharStream0.getEndColumn());
      assertEquals((-3087), simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals((-3087), simpleCharStream0.getEndLine());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals('\u0000', char0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.done();
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.internalUpdateLineColumn('(');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, 1, 0, 1753);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int0 = 5;
      Provider provider0 = null;
      int int1 = 1050;
      simpleCharStream0.tokenBegin = 1050;
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      simpleCharStream0.internalAdjustBuffSize();
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      simpleCharStream0.internalAdjustBuffSize();
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.backup(0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.inBuf = 1753;
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      char char0 = simpleCharStream0.beginToken();
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals('\u0000', char0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit((Provider) null, 1753, 1058);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.done();
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.streamRead((char[]) null, (-1770), 4096);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("C(OH:|Q&z7qE87");
      assertNotNull(stringProvider0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'k';
      charArray0[1] = '#';
      charArray0[2] = 'a';
      charArray0[3] = 'a';
      charArray0[4] = '#';
      int int0 = stringProvider0.read(charArray0, 0, 0);
      assertArrayEquals(new char[] {'k', '#', 'a', 'a', '#'}, charArray0);
      assertEquals(0, int0);
      assertEquals(5, charArray0.length);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 0, 0, 0);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.available = 0;
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      
      simpleCharStream0.reInit((Provider) stringProvider0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.backup(1);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      char[] charArray1 = simpleCharStream0.getSuffix(4096);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      assertEquals(4096, charArray1.length);
      
      simpleCharStream0.reInit((Provider) stringProvider0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      boolean boolean0 = simpleCharStream0.isTrackLineColumn();
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertTrue(boolean0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.streamClose();
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int1 = simpleCharStream0.getColumn();
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int2 = simpleCharStream0.getLine();
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit((Provider) stringProvider0, 9, 9, 86);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int3 = AbstractCharStream.hexval('a');
      assertEquals(10, int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      
      int int4 = simpleCharStream0.getTabSize();
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, int4);
      assertFalse(int4 == int1);
      assertTrue(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      char[] charArray2 = simpleCharStream0.getSuffix(0);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      assertEquals(0, charArray2.length);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.internalUpdateLineColumn('I');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, (-1), (-3088));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit((Provider) null, 65, 0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.setTrackLineColumn(false);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.adjustBeginLineColumn((-3088), (-3088));
      assertEquals((-3088), simpleCharStream0.getBeginColumn());
      assertFalse(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.maxNextCharInd = 10;
      assertEquals((-3088), simpleCharStream0.getBeginColumn());
      assertFalse(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      
      char char0 = simpleCharStream0.readChar();
      assertEquals((-3087), simpleCharStream0.getEndLine());
      assertEquals((-3088), simpleCharStream0.getBeginColumn());
      assertFalse(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals((-3088), simpleCharStream0.getEndColumn());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals('\u0000', char0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.internalUpdateLineColumn('(');
      assertEquals((-3087), simpleCharStream0.getEndLine());
      assertEquals((-3087), simpleCharStream0.getEndColumn());
      assertFalse(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3087), simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.internalAdjustBuffSize();
      assertEquals((-3087), simpleCharStream0.getEndLine());
      assertEquals((-3087), simpleCharStream0.getEndColumn());
      assertFalse(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3087), simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.setTabSize((-3088));
      assertEquals((-3087), simpleCharStream0.getEndLine());
      assertEquals((-3087), simpleCharStream0.getEndColumn());
      assertFalse(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3087), simpleCharStream0.getBeginColumn());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals((-3088), simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.expandBuff(true);
      assertFalse(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3087), simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals((-3088), simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("0");
      assertNotNull(stringProvider0);
      
      stringProvider0.close();
      char[] charArray0 = new char[7];
      try { 
        AbstractCharStream.hexval('M');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char 'M' (=77) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Provider provider0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, 66, 66);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.inBuf = 66;
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      int int0 = AbstractCharStream.hexval('F');
      assertEquals(15, int0);
      
      simpleCharStream0.internalAdjustBuffSize();
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.setTrackLineColumn(true);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.adjustBeginLineColumn(15, 66);
      assertEquals(66, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(16, simpleCharStream0.getBeginLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit((Provider) null);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      String string0 = simpleCharStream0.getImage();
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(string0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.fillBuff();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("Invalid hex char '");
      assertNotNull(stringProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.bufpos = (-2037);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      
      stringProvider0.close();
      // Undeclared exception!
      try { 
        simpleCharStream0.getImage();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("C(OH:|Q&z7qE87");
      assertNotNull(stringProvider0);
      
      int int0 = 0;
      char char0 = 'I';
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 0, 0, 0);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit((Provider) stringProvider0);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.available = 0;
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      
      simpleCharStream0.reInit((Provider) stringProvider0);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.backup(1);
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit((Provider) stringProvider0);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.fillBuff();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("Invalid hex char '");
      assertNotNull(stringProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      char char0 = simpleCharStream0.beginToken();
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals('I', char0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      char[] charArray0 = new char[0];
      int int0 = simpleCharStream0.streamRead(charArray0, 0, (-2037));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals((-1), int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      assertEquals(0, charArray0.length);
      
      simpleCharStream0.inBuf = (-2037);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      
      simpleCharStream0.adjustBeginLineColumn(0, (-1));
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit(0, (-2037), 4096);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      try { 
        simpleCharStream0.beginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // PGCC end of stream
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, (-1), (-3088));
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.adjustBeginLineColumn((-3088), (-3088));
      assertEquals((-3088), simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.maxNextCharInd = 10;
      assertEquals((-3088), simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      
      char char0 = simpleCharStream0.readChar();
      assertEquals((-3087), simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals((-3087), simpleCharStream0.getBeginColumn());
      assertEquals((-3087), simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals('\u0000', char0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.internalUpdateLineColumn('(');
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3086), simpleCharStream0.getEndColumn());
      assertEquals((-3086), simpleCharStream0.getBeginColumn());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals((-3087), simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.adjustBeginLineColumn(10, 10);
      assertEquals(10, simpleCharStream0.getEndLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(10, simpleCharStream0.getBeginLine());
      assertEquals(10, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(10, simpleCharStream0.getEndColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.internalAdjustBuffSize();
      assertEquals(10, simpleCharStream0.getEndLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(10, simpleCharStream0.getBeginLine());
      assertEquals(10, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(10, simpleCharStream0.getEndColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.setTabSize((-3088));
      assertEquals(10, simpleCharStream0.getEndLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(10, simpleCharStream0.getBeginLine());
      assertEquals(10, simpleCharStream0.getBeginColumn());
      assertEquals((-3088), simpleCharStream0.getTabSize());
      assertEquals(10, simpleCharStream0.getEndColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.bufsize = (-3088);
      assertEquals(10, simpleCharStream0.getEndLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(10, simpleCharStream0.getBeginLine());
      assertEquals(10, simpleCharStream0.getBeginColumn());
      assertEquals((-3088), simpleCharStream0.getTabSize());
      assertEquals(10, simpleCharStream0.getEndColumn());
      
      // Undeclared exception!
      try { 
        simpleCharStream0.expandBuff(true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = AbstractCharStream.hexval('d');
      assertEquals(13, int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte) (-44);
      byteArray0[7] = (byte)84;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)11, (byte) (-6), (byte)60, (byte)4, (byte) (-44), (byte)84}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArray0.length);
      
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(byteArrayInputStream0);
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(Throwable e) {
         //
         // invalid stream header: FF000BFA
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      assertNotNull(streamProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(streamProvider0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = AbstractCharStream.hexval('f');
      assertEquals(15, int0);
      
      simpleCharStream0.reInit((Provider) streamProvider0, 88, 88);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit((Provider) streamProvider0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit((Provider) streamProvider0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      boolean boolean1 = stringReader0.ready();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray0 = simpleCharStream0.getSuffix(88);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertNotNull(charArray0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      assertEquals(88, charArray0.length);
      
      char char0 = 'w';
      streamProvider0.close();
      int int1 = (-3641);
      try { 
        simpleCharStream0.fillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      try { 
        AbstractCharStream.hexval('^');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char '^' (=94) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("Invalid hex char '");
      assertNotNull(stringProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      stringProvider0.close();
      String string0 = simpleCharStream0.getImage();
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(string0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit((-2037), 82, 442);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int0 = AbstractCharStream.hexval('1');
      assertEquals(1, int0);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.getEndColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("Invalid hex char '");
      assertNotNull(stringProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      stringProvider0.close();
      int int0 = 82;
      simpleCharStream0.reInit((-2037), 82, 442);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int1 = AbstractCharStream.hexval('0');
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.getEndColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, 1, 0, 1753);
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      Provider provider0 = null;
      int int0 = 1050;
      simpleCharStream0.tokenBegin = 1050;
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      simpleCharStream0.internalAdjustBuffSize();
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.backup(0);
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.inBuf = 1753;
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      
      char char0 = simpleCharStream0.beginToken();
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals('\u0000', char0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit((Provider) null, 1753, 1058);
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.done();
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int1 = AbstractCharStream.DEFAULT_BUF_SIZE;
      assertEquals(4096, int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.getImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      try { 
        AbstractCharStream.hexval('[');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char '[' (=91) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = AbstractCharStream.hexval('3');
      assertEquals(3, int0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Provider provider0 = null;
      int int0 = 78;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, 78, 565, 5);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.tokenBegin = (-421);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      
      // Undeclared exception!
      try { 
        simpleCharStream0.getImage();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%-3)P>jlrfCU0");
      assertNotNull(stringReader0);
      
      int int0 = 13;
      stringReader0.mark(3761);
      stringReader0.mark(13);
      int int1 = stringReader0.read();
      assertEquals(37, int1);
      assertFalse(int1 == int0);
      
      stringReader0.mark(12);
      stringReader0.close();
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      assertNotNull(streamProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(streamProvider0);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int2 = simpleCharStream0.getBeginLine();
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      char char0 = ']';
      try { 
        AbstractCharStream.hexval(']');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char ']' (=93) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = 194;
      try { 
        AbstractCharStream.hexval(']');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char ']' (=93) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = "";
      int int0 = 1040;
      int int1 = (-4205);
      int int2 = 1232;
      try { 
        AbstractCharStream.hexval('O');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char 'O' (=79) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, (-1), (-3088));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.adjustBeginLineColumn((-3088), (-3088));
      assertEquals((-3088), simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.maxNextCharInd = 10;
      assertEquals((-3088), simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      
      char char0 = simpleCharStream0.readChar();
      assertEquals((-3087), simpleCharStream0.getEndColumn());
      assertEquals((-3087), simpleCharStream0.getEndLine());
      assertEquals((-3087), simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals('\u0000', char0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.internalAdjustBuffSize();
      assertEquals((-3087), simpleCharStream0.getEndColumn());
      assertEquals((-3087), simpleCharStream0.getEndLine());
      assertEquals((-3087), simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.setTabSize((-3088));
      assertEquals((-3087), simpleCharStream0.getEndColumn());
      assertEquals((-3087), simpleCharStream0.getEndLine());
      assertEquals((-3087), simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals((-3088), simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.internalAdjustBuffSize();
      assertEquals((-3087), simpleCharStream0.getEndColumn());
      assertEquals((-3087), simpleCharStream0.getEndLine());
      assertEquals((-3087), simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals((-3088), simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.setTrackLineColumn(false);
      assertEquals((-3087), simpleCharStream0.getEndColumn());
      assertEquals((-3087), simpleCharStream0.getEndLine());
      assertFalse(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3087), simpleCharStream0.getBeginColumn());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals((-3088), simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int0 = AbstractCharStream.DEFAULT_BUF_SIZE;
      assertEquals(4096, int0);
      
      simpleCharStream0.available = (-412);
      assertEquals((-3087), simpleCharStream0.getEndColumn());
      assertEquals((-3087), simpleCharStream0.getEndLine());
      assertFalse(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3087), simpleCharStream0.getBeginColumn());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals((-3088), simpleCharStream0.getTabSize());
      
      simpleCharStream0.expandBuff(false);
      assertEquals((-3087), simpleCharStream0.getEndColumn());
      assertEquals((-3087), simpleCharStream0.getEndLine());
      assertFalse(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3087), simpleCharStream0.getBeginColumn());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals((-3088), simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int1 = simpleCharStream0.getBeginLine();
      assertEquals((-3087), simpleCharStream0.getEndColumn());
      assertEquals((-3087), simpleCharStream0.getEndLine());
      assertFalse(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3087), simpleCharStream0.getBeginColumn());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals((-3088), simpleCharStream0.getTabSize());
      assertEquals((-3087), int1);
      assertFalse(int1 == int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      boolean boolean0 = simpleCharStream0.isTrackLineColumn();
      assertEquals((-3087), simpleCharStream0.getEndColumn());
      assertEquals((-3087), simpleCharStream0.getEndLine());
      assertFalse(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3087), simpleCharStream0.getBeginColumn());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals((-3088), simpleCharStream0.getTabSize());
      assertFalse(boolean0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit((Provider) null);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-3088), simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '\u0000';
      charArray0[2] = '\u0000';
      // Undeclared exception!
      try { 
        simpleCharStream0.streamRead(charArray0, 3, 517);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("K");
      assertNotNull(stringProvider0);
      
      stringProvider0.close();
      char[] charArray0 = new char[7];
      try { 
        AbstractCharStream.hexval('Q');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char 'Q' (=81) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("K");
      assertNotNull(stringProvider0);
      
      stringProvider0.close();
      char[] charArray0 = new char[7];
      try { 
        AbstractCharStream.hexval('Z');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char 'Z' (=90) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("&2bzqV%FB[ztd|");
      assertNotNull(stringProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 82, 82, 0);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit((Provider) stringProvider0, 82, 0, 13);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      char char0 = simpleCharStream0.readChar();
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(82, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(82, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals('&', char0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int0 = simpleCharStream0.getEndLine();
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(82, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(82, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(82, int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int1 = simpleCharStream0.getEndLine();
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(82, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(82, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(82, int1);
      assertTrue(int1 == int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int2 = simpleCharStream0.getBufSizeAfterExpansion();
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(82, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(82, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(26, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("K");
      assertNotNull(stringProvider0);
      
      int int0 = 161;
      stringProvider0.close();
      stringProvider0.close();
      char[] charArray0 = new char[7];
      try { 
        AbstractCharStream.hexval('Y');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char 'Y' (=89) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = AbstractCharStream.hexval('9');
      assertEquals(9, int0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      int int1 = 1051;
      int int2 = AbstractCharStream.hexval('7');
      assertEquals(7, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      InputStream inputStream0 = null;
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%-3)P>jlrfCU0");
      assertNotNull(stringReader0);
      
      int int0 = 13;
      stringReader0.mark(3761);
      stringReader0.mark(13);
      int int1 = stringReader0.read();
      assertEquals(37, int1);
      assertFalse(int1 == int0);
      
      stringReader0.mark(12);
      stringReader0.close();
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      assertNotNull(streamProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(streamProvider0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int2 = simpleCharStream0.getBeginLine();
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      char char0 = 'J';
      try { 
        AbstractCharStream.hexval('J');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char 'J' (=74) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Provider provider0 = null;
      int int0 = 1753;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, 1, 0, 1753);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Provider provider1 = null;
      simpleCharStream0.tokenBegin = 1050;
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      
      simpleCharStream0.reInit((Provider) null);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      simpleCharStream0.internalAdjustBuffSize();
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit(1, 1, 5);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.inBuf = 1753;
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      simpleCharStream0.bufpos = 5;
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      
      int int1 = 1058;
      // Undeclared exception!
      try { 
        simpleCharStream0.beginToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("&2bzqV%FB[ztd|");
      assertNotNull(stringProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 82, 82, 0);
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")");
      assertNotNull(stringReader0);
      
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      assertNotNull(streamProvider0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '\u0081';
      charArray0[1] = '|';
      charArray0[2] = 'w';
      charArray0[3] = '|';
      charArray0[4] = '\u0081';
      charArray0[5] = '_';
      charArray0[4] = 'E';
      charArray0[7] = 'R';
      int int0 = 3;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(streamProvider0, 3, 3, 3);
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.expandBuff(false);
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.beginToken();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, 1, 11, 11);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.inBuf = 1;
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      
      simpleCharStream0.reInit((Provider) null, 36, 36, 11);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int0 = AbstractCharStream.DEFAULT_BUF_SIZE;
      assertEquals(4096, int0);
      
      simpleCharStream0.bufpos = 3093;
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int1 = simpleCharStream0.getTabSize();
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.getImage();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = AbstractCharStream.hexval('e');
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      assertNotNull(streamProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(streamProvider0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      boolean boolean0 = simpleCharStream0.isTrackLineColumn();
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertTrue(boolean0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.internalAdjustBuffSize();
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int0 = simpleCharStream0.getBufSizeAfterExpansion();
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(16384, int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int1 = stringReader0.read();
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int int2 = simpleCharStream0.getBufSizeAfterExpansion();
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(16384, int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.fillBuff();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("");
      assertNotNull(stringProvider0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 4061, 4061);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.done();
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.getBeginLine();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("");
      assertNotNull(stringProvider0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      int int0 = stringProvider0.read(charArray0, 9, 12);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 4061, 4061);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int1 = simpleCharStream0.getBeginLine();
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.bufpos = 1867;
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      
      simpleCharStream0.setTrackLineColumn(false);
      assertEquals(0, simpleCharStream0.getEndLine());
      assertFalse(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      char[] charArray1 = simpleCharStream0.getSuffix(1492);
      assertEquals(0, simpleCharStream0.getEndLine());
      assertFalse(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      assertEquals(1492, charArray1.length);
      
      try { 
        simpleCharStream0.beginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // PGCC end of stream
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, 1, 11, 11);
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.inBuf = 1;
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      
      simpleCharStream0.reInit((Provider) null, 36, 36, 11);
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      try { 
        AbstractCharStream.hexval('H');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char 'H' (=72) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)89;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-88), (byte)51, (byte) (-1), (byte)89}, byteArray0);
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, (-1), (-3088));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.adjustBeginLineColumn((-3088), (-3088));
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals((-3088), simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.maxNextCharInd = 10;
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals((-3088), simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      
      char char0 = simpleCharStream0.readChar();
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals((-3087), simpleCharStream0.getEndColumn());
      assertEquals((-3087), simpleCharStream0.getBeginColumn());
      assertEquals((-3087), simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals('\u0000', char0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.internalUpdateLineColumn('(');
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals((-3086), simpleCharStream0.getEndColumn());
      assertEquals((-3086), simpleCharStream0.getBeginColumn());
      assertEquals((-3087), simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.internalAdjustBuffSize();
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals((-3086), simpleCharStream0.getEndColumn());
      assertEquals((-3086), simpleCharStream0.getBeginColumn());
      assertEquals((-3087), simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.setTabSize((-3088));
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals((-3086), simpleCharStream0.getEndColumn());
      assertEquals((-3086), simpleCharStream0.getBeginColumn());
      assertEquals((-3088), simpleCharStream0.getTabSize());
      assertEquals((-3087), simpleCharStream0.getEndLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.buffer = null;
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals((-3086), simpleCharStream0.getEndColumn());
      assertEquals((-3086), simpleCharStream0.getBeginColumn());
      assertEquals((-3088), simpleCharStream0.getTabSize());
      assertEquals((-3087), simpleCharStream0.getEndLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      
      // Undeclared exception!
      try { 
        simpleCharStream0.expandBuff(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("C(OH:|Q&z7qE87");
      assertNotNull(stringProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 0, 0, 0);
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.available = 0;
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      
      simpleCharStream0.reInit((Provider) stringProvider0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.backup(1);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      boolean boolean0 = simpleCharStream0.isTrackLineColumn();
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(boolean0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int0 = simpleCharStream0.getColumn();
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int1 = simpleCharStream0.getLine();
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int2 = simpleCharStream0.getTabSize();
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(1, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      char[] charArray0 = simpleCharStream0.getSuffix(0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertNotNull(charArray0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      assertEquals(0, charArray0.length);
      
      simpleCharStream0.internalUpdateLineColumn('I');
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("26r@0{fsYE=@>DR]g|");
      assertNotNull(stringProvider0);
      
      int int0 = 4079;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "26r@0{fsYE=@>DR]g|");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 4079, (-1), 1239);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      char char0 = simpleCharStream0.readChar();
      assertEquals(4079, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals((-1), simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-1), simpleCharStream0.getEndColumn());
      assertEquals(4079, simpleCharStream0.getBeginLine());
      assertEquals('2', char0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int1 = simpleCharStream0.getTabSize();
      assertEquals(4079, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals((-1), simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-1), simpleCharStream0.getEndColumn());
      assertEquals(4079, simpleCharStream0.getBeginLine());
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      char char1 = simpleCharStream0.readChar();
      assertEquals(4079, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals((-1), simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4079, simpleCharStream0.getBeginLine());
      assertEquals('6', char1);
      assertFalse(char1 == char0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit((Provider) stringProvider0, (-1), 1, 0);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit((Provider) stringProvider0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.getEndLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("");
      assertNotNull(stringProvider0);
      
      stringProvider0.close();
      stringProvider0.close();
      stringProvider0.close();
      stringProvider0.close();
      char[] charArray0 = new char[4];
      charArray0[0] = ')';
      char char0 = '?';
      charArray0[2] = '?';
      charArray0[2] = 'Z';
      int int0 = stringProvider0.read(charArray0, 0, 0);
      assertArrayEquals(new char[] {')', '\u0000', 'Z', '\u0000'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(4, charArray0.length);
      
      charArray0[3] = '(';
      int int1 = stringProvider0.read(charArray0, 1040, 1);
      assertArrayEquals(new char[] {')', '\u0000', 'Z', '('}, charArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(4, charArray0.length);
      
      stringProvider0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, (-4205), (-4205));
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      try { 
        AbstractCharStream.hexval('W');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char 'W' (=87) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        AbstractCharStream.hexval('L');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char 'L' (=76) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")");
      assertNotNull(stringReader0);
      
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      assertNotNull(streamProvider0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'w';
      charArray0[1] = '|';
      charArray0[2] = 'w';
      charArray0[3] = '|';
      charArray0[4] = 'w';
      charArray0[5] = '_';
      charArray0[6] = 'E';
      charArray0[7] = 'L';
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(streamProvider0, 3, 3, 3);
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      char char0 = simpleCharStream0.beginToken();
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(3, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(')', char0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      String string0 = simpleCharStream0.getImage();
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(3, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(")", string0);
      assertNotNull(string0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.backup(3);
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(3, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      char[] charArray1 = simpleCharStream0.getSuffix(3);
      assertArrayEquals(new char[] {'\u0000', '\u0000', ')'}, charArray1);
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(3, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      assertEquals(3, charArray1.length);
      
      int int0 = simpleCharStream0.getBeginLine();
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(3, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(3, int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = (-2037);
      StringProvider stringProvider0 = new StringProvider("Invalid hex char '");
      assertNotNull(stringProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.done();
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      try { 
        AbstractCharStream.hexval('I');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char 'I' (=73) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Provider provider0 = null;
      int int0 = (-3088);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, (-1), (-3088));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.tokenBegin = (-3088);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      
      // Undeclared exception!
      try { 
        simpleCharStream0.adjustBeginLineColumn((-3088), (-3088));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3088
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      char char0 = 'N';
      try { 
        AbstractCharStream.hexval('N');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char 'N' (=78) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("C(OH:|Q&z7qE87");
      assertNotNull(stringProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 0, 0, 0);
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.available = 0;
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      
      simpleCharStream0.reInit((Provider) stringProvider0);
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.backup(1);
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit((Provider) stringProvider0);
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      boolean boolean0 = simpleCharStream0.isTrackLineColumn();
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(boolean0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.streamClose();
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int0 = simpleCharStream0.getColumn();
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int1 = simpleCharStream0.getLine();
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int2 = simpleCharStream0.getTabSize();
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(1, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      char[] charArray0 = simpleCharStream0.getSuffix(0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertNotNull(charArray0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      assertEquals(0, charArray0.length);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.internalUpdateLineColumn('I');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char char0 = 'S';
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      try { 
        AbstractCharStream.hexval('S');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char 'S' (=83) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Provider provider0 = null;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, (-1), (-3088));
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.adjustBeginLineColumn((-3088), (-3088));
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3088), simpleCharStream0.getBeginColumn());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.inBuf = 4072;
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3088), simpleCharStream0.getBeginColumn());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      
      simpleCharStream0.maxNextCharInd = 10;
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3088), simpleCharStream0.getBeginColumn());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      
      char char0 = simpleCharStream0.readChar();
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3088), simpleCharStream0.getBeginColumn());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals((-3087), simpleCharStream0.getEndLine());
      assertEquals((-3088), simpleCharStream0.getEndColumn());
      assertEquals('\u0000', char0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.internalAdjustBuffSize();
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3088), simpleCharStream0.getBeginColumn());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals((-3087), simpleCharStream0.getEndLine());
      assertEquals((-3088), simpleCharStream0.getEndColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.setTabSize((-3088));
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3088), simpleCharStream0.getBeginColumn());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals((-3088), simpleCharStream0.getTabSize());
      assertEquals((-3087), simpleCharStream0.getEndLine());
      assertEquals((-3088), simpleCharStream0.getEndColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.adjustBeginLineColumn((-1334), 4070);
      assertEquals(4070, simpleCharStream0.getBeginColumn());
      assertEquals((-1334), simpleCharStream0.getBeginLine());
      assertEquals(4070, simpleCharStream0.getEndColumn());
      assertEquals((-1334), simpleCharStream0.getEndLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3088), simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit(10, (-1), 1051);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3088), simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.done();
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3088), simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")");
      assertNotNull(stringReader0);
      
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      assertNotNull(streamProvider0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'w';
      charArray0[1] = '|';
      charArray0[2] = 'w';
      charArray0[3] = '|';
      charArray0[4] = 'w';
      charArray0[5] = '_';
      charArray0[6] = 'E';
      charArray0[7] = 'L';
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(streamProvider0, 3, 3, 3);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      char char0 = simpleCharStream0.beginToken();
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.getEndLine());
      assertEquals(')', char0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.bufpos = 0;
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.getEndLine());
      
      String string0 = simpleCharStream0.getImage();
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.getEndLine());
      assertEquals(")", string0);
      assertNotNull(string0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.backup(3);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.getEndLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.internalAdjustBuffSize();
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.getEndLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int0 = simpleCharStream0.getEndColumn();
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.getEndLine());
      assertEquals(3, int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("");
      assertNotNull(stringProvider0);
      
      stringProvider0.close();
      stringProvider0.close();
      stringProvider0.close();
      stringProvider0.close();
      char[] charArray0 = new char[4];
      charArray0[0] = ';';
      charArray0[2] = 'G';
      charArray0[2] = 'Z';
      int int0 = stringProvider0.read(charArray0, 0, 0);
      assertArrayEquals(new char[] {';', '\u0000', 'Z', '\u0000'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(4, charArray0.length);
      
      charArray0[3] = '(';
      stringProvider0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, '(', '(');
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      try { 
        AbstractCharStream.hexval('G');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char 'G' (=71) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Provider provider0 = null;
      int int0 = 1;
      int int1 = 1753;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, 1, 0, 1753);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        AbstractCharStream.hexval('\\');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char '\\' (=92) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Provider provider0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, (-1), (-3088));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.adjustBeginLineColumn((-3088), (-3088));
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3088), simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.maxNextCharInd = 10;
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3088), simpleCharStream0.getBeginColumn());
      
      char char0 = simpleCharStream0.readChar();
      assertEquals((-3087), simpleCharStream0.getEndLine());
      assertEquals((-3087), simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3087), simpleCharStream0.getBeginColumn());
      assertEquals('\u0000', char0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.internalUpdateLineColumn('(');
      assertEquals((-3087), simpleCharStream0.getEndLine());
      assertEquals((-3086), simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3086), simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.internalAdjustBuffSize();
      assertEquals((-3087), simpleCharStream0.getEndLine());
      assertEquals((-3086), simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3086), simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.setTabSize((-3088));
      assertEquals((-3087), simpleCharStream0.getEndLine());
      assertEquals((-3086), simpleCharStream0.getEndColumn());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals((-3088), simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3086), simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.expandBuff(false);
      assertEquals((-3087), simpleCharStream0.getEndLine());
      assertEquals((-3086), simpleCharStream0.getEndColumn());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals((-3088), simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3086), simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      char[] charArray0 = simpleCharStream0.getSuffix(10);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-3087), simpleCharStream0.getEndLine());
      assertEquals((-3086), simpleCharStream0.getEndColumn());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals((-3088), simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3086), simpleCharStream0.getBeginColumn());
      assertNotNull(charArray0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      assertEquals(10, charArray0.length);
      
      simpleCharStream0.done();
      assertEquals((-3088), simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("2\u0002_Dy[akWBk");
      assertNotNull(stringProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0);
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      char char0 = simpleCharStream0.beginToken();
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals('2', char0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      char[] charArray0 = new char[1];
      int int0 = AbstractCharStream.DEFAULT_BUF_SIZE;
      assertEquals(4096, int0);
      
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '2';
      charArray1[1] = 't';
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      charArray1[2] = '2';
      String string0 = simpleCharStream0.getImage();
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("2", string0);
      assertNotNull(string0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      charArray1[3] = '2';
      charArray1[4] = '2';
      int int1 = stringProvider0.read(charArray1, 0, 4078);
      assertArrayEquals(new char[] {'2', 't', '2', '2', '2'}, charArray1);
      assertEquals((-1), int1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(int1 == int0);
      assertEquals(5, charArray1.length);
      
      simpleCharStream0.adjustBeginLineColumn(0, 4096);
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(4096, simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit(0, (-2037), 4096);
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      try { 
        simpleCharStream0.beginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // PGCC end of stream
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("");
      assertNotNull(stringProvider0);
      
      stringProvider0.close();
      stringProvider0.close();
      stringProvider0.close();
      stringProvider0.close();
      char[] charArray0 = new char[4];
      charArray0[0] = ')';
      charArray0[2] = '@';
      charArray0[2] = 'Z';
      int int0 = stringProvider0.read(charArray0, 0, 0);
      assertArrayEquals(new char[] {')', '\u0000', 'Z', '\u0000'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(4, charArray0.length);
      
      charArray0[3] = '(';
      int int1 = stringProvider0.read(charArray0, 1040, 1);
      assertArrayEquals(new char[] {')', '\u0000', 'Z', '('}, charArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(4, charArray0.length);
      
      stringProvider0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, (-4205), (-4205));
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      try { 
        AbstractCharStream.hexval('@');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char '@' (=64) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("");
      assertNotNull(stringProvider0);
      
      stringProvider0.close();
      stringProvider0.close();
      stringProvider0.close();
      stringProvider0.close();
      char[] charArray0 = new char[5];
      charArray0[0] = ')';
      charArray0[2] = '?';
      int int0 = stringProvider0.read(charArray0, 0, 0);
      assertArrayEquals(new char[] {')', '\u0000', '?', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(5, charArray0.length);
      
      charArray0[3] = ';';
      int int1 = stringProvider0.read(charArray0, 1040, 1);
      assertArrayEquals(new char[] {')', '\u0000', '?', ';', '\u0000'}, charArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(5, charArray0.length);
      
      stringProvider0.close();
      stringProvider0.close();
      stringProvider0.close();
      stringProvider0.close();
      try { 
        AbstractCharStream.hexval(';');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char ';' (=59) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Provider provider0 = null;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, (-1), (-3088));
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte)5;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-111), (byte)127, (byte)0, (byte) (-21), (byte)5}, byteArray0);
      assertFalse(boolean0);
      assertEquals(5, byteArray0.length);
      
      simpleCharStream0.maxNextCharInd = 10;
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      int int0 = AbstractCharStream.hexval('F');
      assertEquals(15, int0);
      
      char char0 = simpleCharStream0.readChar();
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals((-1), simpleCharStream0.getBeginLine());
      assertEquals((-3088), simpleCharStream0.getBeginColumn());
      assertEquals((-3088), simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-1), simpleCharStream0.getEndLine());
      assertEquals('\u0000', char0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.internalAdjustBuffSize();
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals((-1), simpleCharStream0.getBeginLine());
      assertEquals((-3088), simpleCharStream0.getBeginColumn());
      assertEquals((-3088), simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-1), simpleCharStream0.getEndLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.setTabSize((-3088));
      assertEquals((-1), simpleCharStream0.getBeginLine());
      assertEquals((-3088), simpleCharStream0.getBeginColumn());
      assertEquals((-3088), simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3088), simpleCharStream0.getTabSize());
      assertEquals((-1), simpleCharStream0.getEndLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.done();
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3088), simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Provider provider0 = null;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.setTrackLineColumn(true);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.backup((-1));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.available = 1;
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getEndLine());
      
      simpleCharStream0.reInit((Provider) null);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int0 = 1052;
      simpleCharStream0.reInit((Provider) null, 1052, 2190);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int1 = (-2086);
      simpleCharStream0.reInit((Provider) null, 2190, (-2086));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      simpleCharStream0.reInit((Provider) null, 0, 0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int2 = simpleCharStream0.getBeginColumn();
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int3 = simpleCharStream0.getLine();
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, int3);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.getEndLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, 1, 11, 11);
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.inBuf = 1;
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      
      simpleCharStream0.reInit((Provider) null, 36, 36, 11);
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int0 = AbstractCharStream.DEFAULT_BUF_SIZE;
      assertEquals(4096, int0);
      
      simpleCharStream0.tokenBegin = 4068;
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int1 = simpleCharStream0.getTabSize();
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.getImage();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("C(OH:|Q&z7qE87");
      assertNotNull(stringProvider0);
      
      int int0 = 0;
      char[] charArray0 = new char[7];
      charArray0[0] = '#';
      charArray0[1] = ')';
      charArray0[2] = '!';
      charArray0[3] = '{';
      charArray0[4] = 'a';
      charArray0[5] = '$';
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      charArray0[6] = 'I';
      int int1 = stringProvider0.read(charArray0, 0, 12);
      assertArrayEquals(new char[] {'C', '(', 'O', 'H', ':', '|', 'Q'}, charArray0);
      assertEquals(7, int1);
      assertFalse(int1 == int0);
      assertEquals(7, charArray0.length);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 0, 0, 0);
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.available = 0;
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      
      // Undeclared exception!
      try { 
        simpleCharStream0.fillBuff();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, 1, 0, 1753);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      Provider provider0 = null;
      simpleCharStream0.bufsize = 2355;
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      
      simpleCharStream0.tokenBegin = 1050;
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      
      simpleCharStream0.internalAdjustBuffSize();
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit(1, 1, 5);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.inBuf = 1753;
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      
      char char0 = simpleCharStream0.beginToken();
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals('\u0000', char0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit((Provider) null, 1753, 1058);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.adjustBeginLineColumn(1058, 0);
      assertEquals(1059, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.streamRead((char[]) null, (-1770), 4096);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, 34, 11, 11);
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.inBuf = 34;
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      
      simpleCharStream0.setTabSize((-672));
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-672), simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit((Provider) null, 36, 36, 11);
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-672), simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int0 = AbstractCharStream.DEFAULT_BUF_SIZE;
      assertEquals(4096, int0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int1 = simpleCharStream0.getTabSize();
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-672), simpleCharStream0.getTabSize());
      assertEquals((-672), int1);
      assertFalse(int1 == int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      String string0 = simpleCharStream0.getImage();
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-672), simpleCharStream0.getTabSize());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.expandBuff(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("Invalid hex char '");
      assertNotNull(stringProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      char char0 = simpleCharStream0.beginToken();
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals('I', char0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      char[] charArray0 = new char[1];
      int int0 = AbstractCharStream.DEFAULT_BUF_SIZE;
      assertEquals(4096, int0);
      
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'I';
      charArray1[1] = 't';
      charArray1[2] = 'I';
      String string0 = simpleCharStream0.getImage();
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("I", string0);
      assertNotNull(string0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      charArray1[3] = 'I';
      charArray1[4] = 'I';
      int int1 = stringProvider0.read(charArray1, 0, 4078);
      assertArrayEquals(new char[] {'I', 't', 'I', 'I', 'I'}, charArray1);
      assertEquals((-1), int1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(int1 == int0);
      assertEquals(5, charArray1.length);
      
      simpleCharStream0.adjustBeginLineColumn(0, 4096);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(4096, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(4096, simpleCharStream0.getEndColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit(0, (-2037), 4096);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(4096, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      try { 
        simpleCharStream0.beginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // PGCC end of stream
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Provider provider0 = null;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.setTrackLineColumn(true);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.available = 1;
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      
      simpleCharStream0.reInit((Provider) null);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int0 = 1052;
      simpleCharStream0.reInit((Provider) null, 1052, 2190);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.adjustBeginLineColumn(2190, (-230));
      assertEquals((-230), simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(2191, simpleCharStream0.getBeginLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit((Provider) null, 2190, (-2086));
      assertEquals((-230), simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(2191, simpleCharStream0.getBeginLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit((Provider) null, 0, 0);
      assertEquals((-230), simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(2191, simpleCharStream0.getBeginLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int1 = simpleCharStream0.getBeginColumn();
      assertEquals((-230), simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(2191, simpleCharStream0.getBeginLine());
      assertEquals((-230), int1);
      assertFalse(int1 == int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int2 = simpleCharStream0.getLine();
      assertEquals((-230), simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(2191, simpleCharStream0.getBeginLine());
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.getEndLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("ZZF_t_hpE2u`");
      assertNotNull(stringProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.backup(10);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.internalSetBufLineColumn(10, 2);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(10, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      char char0 = '=';
      try { 
        AbstractCharStream.hexval('=');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char '=' (=61) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, 1, 11, 11);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.inBuf = 1;
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      simpleCharStream0.available = 94;
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      simpleCharStream0.reInit((Provider) null, 36, 36, 11);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int0 = AbstractCharStream.DEFAULT_BUF_SIZE;
      assertEquals(4096, int0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int1 = simpleCharStream0.getTabSize();
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.tokenBegin = 11;
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      
      String string0 = simpleCharStream0.getImage();
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        simpleCharStream0.getEndLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = "Y";
      StringProvider stringProvider0 = new StringProvider("Y");
      assertNotNull(stringProvider0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = 597;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 1008, 1008, 597);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.done();
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.setTabSize(597);
      assertEquals(597, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.getEndColumn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, 1, 1, 1753);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      Provider provider0 = null;
      simpleCharStream0.bufsize = 2355;
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      simpleCharStream0.tokenBegin = 1050;
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      simpleCharStream0.reInit((Provider) null);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      simpleCharStream0.internalAdjustBuffSize();
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit(1, 1, 5);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.inBuf = 1753;
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      char char0 = simpleCharStream0.beginToken();
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals('\u0000', char0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      char[] charArray0 = null;
      int int0 = (-1770);
      simpleCharStream0.done();
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.adjustBeginLineColumn(1058, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5v#{N");
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      StringProvider stringProvider0 = new StringProvider("");
      assertNotNull(stringProvider0);
      
      stringProvider0.close();
      char[] charArray0 = new char[1];
      charArray0[0] = ',';
      stringProvider0.close();
      int int0 = stringProvider0.read(charArray0, 160, 160);
      assertArrayEquals(new char[] {','}, charArray0);
      assertEquals((-1), int0);
      assertEquals(1, charArray0.length);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 4096, 13);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      boolean boolean2 = simpleCharStream0.isTrackLineColumn();
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit((Provider) stringProvider0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      char[] charArray1 = simpleCharStream0.getSuffix(13);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      assertEquals(13, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Provider provider0 = null;
      int int0 = 1;
      int int1 = 1753;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, 1, 0, 1753);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int2 = 5;
      Provider provider1 = null;
      simpleCharStream0.tokenBegin = 1050;
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      simpleCharStream0.reInit((Provider) null);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'b';
      simpleCharStream0.buffer = charArray0;
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        simpleCharStream0.internalAdjustBuffSize();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("Invalid hex char '");
      assertNotNull(stringProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      char char0 = simpleCharStream0.beginToken();
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals('I', char0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit(0, (-2037), 4096);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      boolean boolean0 = simpleCharStream0.isTrackLineColumn();
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertTrue(boolean0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.adjustBeginLineColumn(4096, 4096);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4098, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, 1, 0, 1753);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      Provider provider0 = null;
      simpleCharStream0.tokenBegin = 1050;
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      String string0 = simpleCharStream0.getImage();
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit((Provider) null);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string1 = "";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      simpleCharStream0.internalAdjustBuffSize();
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit(1, 1, 5);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.inBuf = 1753;
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      char char0 = simpleCharStream0.beginToken();
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals('\u0000', char0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit((Provider) null, 1753, 1058);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.done();
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.streamRead((char[]) null, (-1770), 4096);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Provider provider0 = null;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, (-1), (-3088));
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.adjustBeginLineColumn((-3088), (-3088));
      assertEquals((-3088), simpleCharStream0.getBeginColumn());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.maxNextCharInd = 10;
      assertEquals((-3088), simpleCharStream0.getBeginColumn());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      
      char char0 = simpleCharStream0.readChar();
      assertEquals((-3087), simpleCharStream0.getEndColumn());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals((-3087), simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3087), simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals('\u0000', char0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.internalAdjustBuffSize();
      assertEquals((-3087), simpleCharStream0.getEndColumn());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals((-3087), simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3087), simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.setTabSize((-3088));
      assertEquals((-3087), simpleCharStream0.getEndColumn());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals((-3087), simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3087), simpleCharStream0.getEndLine());
      assertEquals((-3088), simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.adjustBeginLineColumn((-1334), 4070);
      assertEquals((-1334), simpleCharStream0.getEndLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4070, simpleCharStream0.getEndColumn());
      assertEquals(4070, simpleCharStream0.getBeginColumn());
      assertEquals((-1334), simpleCharStream0.getBeginLine());
      assertEquals((-3088), simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit(10, (-1), '\u0000');
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3088), simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.done();
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3088), simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, 1, 0, 1753);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Provider provider0 = null;
      simpleCharStream0.tokenBegin = 1050;
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      
      simpleCharStream0.reInit((Provider) null);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      simpleCharStream0.internalAdjustBuffSize();
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit(1, 1, 5);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.inBuf = 1753;
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      
      char char0 = simpleCharStream0.beginToken();
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals('\u0000', char0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit((Provider) null, 1753, 1058);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.done();
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit(10, (-895), 3617);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int0 = simpleCharStream0.getBeginColumn();
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.streamRead((char[]) null, (-1770), 4096);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")");
      assertNotNull(stringReader0);
      
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      assertNotNull(streamProvider0);
      
      char[] charArray0 = new char[8];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      charArray0[0] = 'w';
      charArray0[1] = '|';
      charArray0[2] = 'w';
      charArray0[3] = '|';
      charArray0[4] = 't';
      charArray0[5] = '_';
      charArray0[6] = 'E';
      charArray0[7] = 'L';
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(streamProvider0, 3, 3, 3);
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit((Provider) streamProvider0, 3, 4096);
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      String string0 = simpleCharStream0.getImage();
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(string0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.backup(3);
      assertEquals(0, simpleCharStream0.getEndLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int0 = simpleCharStream0.getEndColumn();
      assertEquals(0, simpleCharStream0.getEndLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.internalUpdateLineColumn('q');
      assertEquals(4096, simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getEndLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Provider provider0 = null;
      int int0 = 1753;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, 1, 0, 1753);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      Provider provider1 = null;
      simpleCharStream0.tokenBegin = 1;
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      simpleCharStream0.reInit((Provider) null);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      simpleCharStream0.internalAdjustBuffSize();
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit(1, 1, 0);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.inBuf = 1753;
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      
      int int1 = 1058;
      // Undeclared exception!
      try { 
        simpleCharStream0.beginToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("9:2>H*?]{WM");
      assertNotNull(stringProvider0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      stringProvider0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 0, 0, 88);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int0 = simpleCharStream0.getBufSizeAfterExpansion();
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(176, int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int1 = simpleCharStream0.getColumn();
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'P';
      charArray0[1] = '7';
      charArray0[2] = '\'';
      charArray0[3] = 'G';
      charArray0[4] = 'h';
      charArray0[5] = 'L';
      charArray0[6] = 'S';
      charArray0[7] = 'e';
      // Undeclared exception!
      try { 
        simpleCharStream0.streamRead(charArray0, 176, 15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.StringProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Provider provider0 = null;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, (-1), (-3088));
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte)5;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-111), (byte)122, (byte)0, (byte) (-21), (byte)5}, byteArray0);
      assertFalse(boolean0);
      assertEquals(5, byteArray0.length);
      
      simpleCharStream0.maxNextCharInd = 10;
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      int int0 = AbstractCharStream.hexval('8');
      assertEquals(8, int0);
      
      char char0 = simpleCharStream0.readChar();
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals((-3088), simpleCharStream0.getEndColumn());
      assertEquals((-3088), simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-1), simpleCharStream0.getEndLine());
      assertEquals((-1), simpleCharStream0.getBeginLine());
      assertEquals('\u0000', char0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.internalAdjustBuffSize();
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals((-3088), simpleCharStream0.getEndColumn());
      assertEquals((-3088), simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-1), simpleCharStream0.getEndLine());
      assertEquals((-1), simpleCharStream0.getBeginLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.setTabSize((-3088));
      assertEquals((-3088), simpleCharStream0.getEndColumn());
      assertEquals((-3088), simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3088), simpleCharStream0.getTabSize());
      assertEquals((-1), simpleCharStream0.getEndLine());
      assertEquals((-1), simpleCharStream0.getBeginLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.done();
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3088), simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("");
      assertNotNull(stringProvider0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 12, 12, 12);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.bufsize = 8192;
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      
      int int0 = (-1624);
      // Undeclared exception!
      try { 
        simpleCharStream0.adjustBeginLineColumn(12, (-1624));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Provider provider0 = null;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, (-1), (-3088));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.adjustBeginLineColumn((-3088), (-3088));
      assertEquals((-3088), simpleCharStream0.getBeginColumn());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.maxNextCharInd = 10;
      assertEquals((-3088), simpleCharStream0.getBeginColumn());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      
      char char0 = simpleCharStream0.readChar();
      assertEquals((-3087), simpleCharStream0.getEndColumn());
      assertEquals((-3087), simpleCharStream0.getBeginColumn());
      assertEquals((-3087), simpleCharStream0.getEndLine());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals('\u0000', char0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.internalUpdateLineColumn('(');
      assertEquals((-3086), simpleCharStream0.getEndColumn());
      assertEquals((-3086), simpleCharStream0.getBeginColumn());
      assertEquals((-3087), simpleCharStream0.getEndLine());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.internalAdjustBuffSize();
      assertEquals((-3086), simpleCharStream0.getEndColumn());
      assertEquals((-3086), simpleCharStream0.getBeginColumn());
      assertEquals((-3087), simpleCharStream0.getEndLine());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.setTabSize((-3088));
      assertEquals((-3086), simpleCharStream0.getEndColumn());
      assertEquals((-3086), simpleCharStream0.getBeginColumn());
      assertEquals((-3087), simpleCharStream0.getEndLine());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals((-3088), simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.expandBuff(true);
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals((-3086), simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals((-3088), simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.done();
      assertEquals((-3088), simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("4B3R$Y@!>p $");
      assertNotNull(stringProvider0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 95, 4096, 95);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "4B3R$Y@!>p $");
      assertFalse(boolean0);
      
      simpleCharStream0.adjustBeginLineColumn((-3687), 95);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals((-3686), simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(95, simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int0 = simpleCharStream0.getBeginColumn();
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals((-3686), simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(95, simpleCharStream0.getBeginColumn());
      assertEquals(95, int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'U';
      charArray0[1] = '!';
      charArray0[2] = '\"';
      charArray0[3] = ' ';
      charArray0[4] = '2';
      charArray0[5] = '$';
      // Undeclared exception!
      try { 
        simpleCharStream0.streamRead(charArray0, (-2015), 1943);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("");
      assertNotNull(stringProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      char[] charArray0 = new char[4];
      int int0 = stringProvider0.read(charArray0, 492, 0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(4, charArray0.length);
      
      charArray0[0] = '1';
      charArray0[1] = '1';
      charArray0[2] = 'd';
      charArray0[3] = 'f';
      int int1 = stringProvider0.read(charArray0, 4096, 4096);
      assertArrayEquals(new char[] {'1', '1', 'd', 'f'}, charArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(4, charArray0.length);
      
      int int2 = stringProvider0.read(charArray0, (-1), 2807);
      assertArrayEquals(new char[] {'1', '1', 'd', 'f'}, charArray0);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(4, charArray0.length);
      
      stringProvider0.close();
      int int3 = simpleCharStream0.getColumn();
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int4 = stringProvider0.read(charArray0, (-1), (-1));
      assertArrayEquals(new char[] {'1', '1', 'd', 'f'}, charArray0);
      assertEquals((-1), int4);
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      assertFalse(int4 == int3);
      assertEquals(4, charArray0.length);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.internalUpdateLineColumn('f');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("");
      assertNotNull(stringProvider0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 12, 12, 12);
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int0 = AbstractCharStream.hexval('A');
      assertEquals(10, int0);
      
      simpleCharStream0.adjustBeginLineColumn(12, (-1624));
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(13, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals((-1624), simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.reInit((Provider) stringProvider0, (-1624), (-1624), (-1624));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("Invalid hex char '");
      assertNotNull(stringProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.expandBuff(false);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        simpleCharStream0.beginToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Provider provider0 = null;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, (-1), (-3088));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.adjustBeginLineColumn((-3088), (-3088));
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals((-3088), simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.maxNextCharInd = 10;
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals((-3088), simpleCharStream0.getBeginColumn());
      
      char char0 = simpleCharStream0.readChar();
      assertEquals((-3087), simpleCharStream0.getBeginColumn());
      assertEquals((-3087), simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals((-3087), simpleCharStream0.getEndLine());
      assertEquals('\u0000', char0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.internalAdjustBuffSize();
      assertEquals((-3087), simpleCharStream0.getBeginColumn());
      assertEquals((-3087), simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals((-3087), simpleCharStream0.getEndLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.setTabSize((-3088));
      assertEquals((-3087), simpleCharStream0.getBeginColumn());
      assertEquals((-3087), simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals((-3088), simpleCharStream0.getTabSize());
      assertEquals((-3087), simpleCharStream0.getEndLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.done();
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3088), simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.internalAdjustBuffSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("Invalid hex char '");
      assertNotNull(stringProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      char char0 = simpleCharStream0.beginToken();
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals('I', char0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit(0, (-2037), 0);
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      try { 
        simpleCharStream0.beginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // PGCC end of stream
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Provider provider0 = null;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, (-1), (-3088));
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.adjustBeginLineColumn((-3088), (-3088));
      assertEquals((-3088), simpleCharStream0.getBeginColumn());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      simpleCharStream0.maxNextCharInd = 10;
      assertEquals((-3088), simpleCharStream0.getBeginColumn());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      
      char char0 = simpleCharStream0.readChar();
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals((-3087), simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals((-3087), simpleCharStream0.getEndLine());
      assertEquals((-3087), simpleCharStream0.getEndColumn());
      assertEquals('\u0000', char0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.internalAdjustBuffSize();
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals((-3087), simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals((-3087), simpleCharStream0.getEndLine());
      assertEquals((-3087), simpleCharStream0.getEndColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.setTabSize((-3088));
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals((-3087), simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3087), simpleCharStream0.getEndLine());
      assertEquals((-3088), simpleCharStream0.getTabSize());
      assertEquals((-3087), simpleCharStream0.getEndColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.backup((-1));
      assertEquals((-3088), simpleCharStream0.getEndColumn());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals((-3087), simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3088), simpleCharStream0.getTabSize());
      assertEquals((-3088), simpleCharStream0.getEndLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.done();
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3088), simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = AbstractCharStream.hexval('6');
      assertEquals(6, int0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      assertNotNull(streamProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(streamProvider0, 6, 6);
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("");
      assertNotNull(stringProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      int int0 = 8;
      simpleCharStream0.done();
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int1 = 8;
      int int2 = simpleCharStream0.streamRead((char[]) null, 8, 8);
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      stringProvider0.close();
      // Undeclared exception!
      try { 
        simpleCharStream0.internalSetBufLineColumn(8, 12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("Invalid hex char '");
      assertNotNull(stringProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0);
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int0 = AbstractCharStream.hexval('5');
      assertEquals(5, int0);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.getEndColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Provider provider0 = null;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, 78, (-3088));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.adjustBeginLineColumn((-3088), (-3088));
      assertEquals((-3088), simpleCharStream0.getBeginColumn());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      simpleCharStream0.maxNextCharInd = 10;
      assertEquals((-3088), simpleCharStream0.getBeginColumn());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      
      char char0 = simpleCharStream0.readChar();
      assertEquals((-3087), simpleCharStream0.getEndLine());
      assertEquals((-3087), simpleCharStream0.getEndColumn());
      assertEquals((-3087), simpleCharStream0.getBeginColumn());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals('\u0000', char0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.adjustBeginLineColumn(73, (-1));
      assertEquals((-1), simpleCharStream0.getBeginColumn());
      assertEquals(73, simpleCharStream0.getBeginLine());
      assertEquals(73, simpleCharStream0.getEndLine());
      assertEquals((-1), simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.internalAdjustBuffSize();
      assertEquals((-1), simpleCharStream0.getBeginColumn());
      assertEquals(73, simpleCharStream0.getBeginLine());
      assertEquals(73, simpleCharStream0.getEndLine());
      assertEquals((-1), simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit((Provider) null, 73, (-3088), 4);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.setTabSize((-3088));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-3088), simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.done();
      assertEquals((-3088), simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("");
      assertNotNull(stringProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.bufsize = (-2138);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        simpleCharStream0.fillBuff();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot back 0 chars which is larger than the internal buffer size (-2138)
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("\"");
      assertNotNull(stringProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '1';
      charArray0[1] = 'B';
      charArray0[2] = 'd';
      charArray0[3] = 'f';
      char char0 = simpleCharStream0.beginToken();
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals('\"', char0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int0 = stringProvider0.read(charArray0, 4096, 4096);
      assertArrayEquals(new char[] {'1', 'B', 'd', 'f'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(4, charArray0.length);
      
      int int1 = stringProvider0.read(charArray0, (-1), 2807);
      assertArrayEquals(new char[] {'1', 'B', 'd', 'f'}, charArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(4, charArray0.length);
      
      stringProvider0.close();
      int int2 = simpleCharStream0.getColumn();
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int3 = stringProvider0.read(charArray0, (-1), (-1));
      assertArrayEquals(new char[] {'1', 'B', 'd', 'f'}, charArray0);
      assertEquals((-1), int3);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals(4, charArray0.length);
      
      simpleCharStream0.internalUpdateLineColumn('f');
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.internalUpdateLineColumn('');
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      try { 
        simpleCharStream0.fillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // PGCC end of stream
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = AbstractCharStream.hexval('D');
      assertEquals(13, int0);
      
      StringProvider stringProvider0 = new StringProvider("");
      assertNotNull(stringProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0);
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.getSuffix((-309));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      try { 
        AbstractCharStream.hexval('T');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char 'T' (=84) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Provider provider0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Cannot back ");
      assertFalse(boolean0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int0 = (-3163);
      simpleCharStream0.available = (-3163);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        simpleCharStream0.beginToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, 1, 0, 1753);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      Provider provider0 = null;
      int int0 = 1050;
      simpleCharStream0.tokenBegin = 1050;
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      simpleCharStream0.internalAdjustBuffSize();
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.inBuf = 1753;
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      
      char char0 = simpleCharStream0.beginToken();
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals('\u0000', char0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit((Provider) null, 1753, 1058);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.done();
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.streamRead((char[]) null, (-1770), 4096);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" ");
      assertNotNull(stringReader0);
      
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      assertNotNull(streamProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(streamProvider0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.setTabSize(4096);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(4096, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.fillBuff();
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(4096, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int0 = stringReader0.read();
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.getSuffix((-711));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("Cannot back ");
      assertNotNull(stringProvider0);
      
      int int0 = (-1119);
      int int1 = 1873;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 5, (-1119), 1873);
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.backup((-1119));
      assertEquals(0, simpleCharStream0.getEndLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '_';
      charArray0[1] = '6';
      charArray0[2] = ',';
      charArray0[3] = 'T';
      charArray0[4] = 'C';
      charArray0[5] = ':';
      charArray0[6] = '$';
      charArray0[7] = '^';
      charArray0[8] = '>';
      // Undeclared exception!
      try { 
        stringProvider0.read(charArray0, (-1), (-1119));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, 1, 0, 1753);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      Provider provider0 = null;
      simpleCharStream0.tokenBegin = 1050;
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      simpleCharStream0.reInit((Provider) null);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      simpleCharStream0.internalAdjustBuffSize();
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit(1, 1, 5);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.inBuf = 1753;
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      char char0 = simpleCharStream0.beginToken();
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals('\u0000', char0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit((Provider) null, 1753, 1058);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.done();
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.streamRead((char[]) null, (-1770), 4096);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Provider provider0 = null;
      int int0 = (-1);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, (-1), (-3088));
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.adjustBeginLineColumn((-3088), (-3088));
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3088), simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.bufsize = (-1);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3088), simpleCharStream0.getBeginColumn());
      
      simpleCharStream0.maxNextCharInd = 10;
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3088), simpleCharStream0.getBeginColumn());
      
      char char0 = simpleCharStream0.readChar();
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals((-3087), simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3087), simpleCharStream0.getEndLine());
      assertEquals((-3087), simpleCharStream0.getEndColumn());
      assertEquals('\u0000', char0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.internalAdjustBuffSize();
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals((-3087), simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3087), simpleCharStream0.getEndLine());
      assertEquals((-3087), simpleCharStream0.getEndColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.setTabSize((-3088));
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertEquals((-3088), simpleCharStream0.getTabSize());
      assertEquals((-3087), simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3087), simpleCharStream0.getEndLine());
      assertEquals((-3087), simpleCharStream0.getEndColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.done();
      assertEquals((-3088), simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      char char0 = 'R';
      try { 
        AbstractCharStream.hexval('R');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char 'R' (=82) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Provider provider0 = null;
      int int0 = 1;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{_!A*");
      assertFalse(boolean0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, 1, 191);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.adjustBeginLineColumn(1, 1);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.tokenBegin = 1127;
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      
      simpleCharStream0.internalAdjustBuffSize();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int1 = 3264;
      simpleCharStream0.adjustBeginLineColumn(1127, (-645));
      assertEquals(1127, simpleCharStream0.getBeginLine());
      assertEquals((-645), simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      simpleCharStream0.adjustBeginLineColumn(191, 1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, 1482, 248, 3);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      boolean boolean0 = simpleCharStream0.isTrackLineColumn();
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(boolean0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("");
      assertNotNull(stringProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '2';
      charArray0[1] = '1';
      stringProvider0.close();
      int int0 = stringProvider0.read(charArray0, 448, 448);
      assertArrayEquals(new char[] {'2', '1'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(2, charArray0.length);
      
      simpleCharStream0.reInit((Provider) stringProvider0);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      stringProvider0.close();
      char char0 = '_';
      try { 
        AbstractCharStream.hexval('_');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char '_' (=95) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3e^C@T>u");
      assertNotNull(stringReader0);
      
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      assertNotNull(streamProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(streamProvider0, 1181, 1181, 1181);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      StringProvider stringProvider0 = new StringProvider("3e^C@T>u");
      assertNotNull(stringProvider0);
      
      simpleCharStream0.reInit((Provider) stringProvider0);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int0 = simpleCharStream0.getTabSize();
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      try { 
        AbstractCharStream.hexval('_');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char '_' (=95) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      assertNotNull(streamProvider0);
      
      int int0 = 1296;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(streamProvider0, 1296, 97);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      streamProvider0.close();
      char char0 = 'V';
      try { 
        AbstractCharStream.hexval('V');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char 'V' (=86) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Provider provider0 = null;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int0 = 18;
      simpleCharStream0.maxNextCharInd = 18;
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      
      char char0 = simpleCharStream0.readChar();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals('\u0000', char0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.fillBuff();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("id");
      assertNotNull(stringProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 1, 1);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.bufsize = 1;
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      simpleCharStream0.backup(0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int0 = simpleCharStream0.getBeginColumn();
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int1 = simpleCharStream0.getLine();
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      try { 
        AbstractCharStream.hexval('U');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char 'U' (=85) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("");
      assertNotNull(stringProvider0);
      
      stringProvider0.close();
      stringProvider0.close();
      stringProvider0.close();
      stringProvider0.close();
      char[] charArray0 = new char[4];
      charArray0[0] = ')';
      charArray0[1] = '?';
      charArray0[2] = 'Z';
      int int0 = stringProvider0.read(charArray0, 0, 0);
      assertArrayEquals(new char[] {')', '?', 'Z', '\u0000'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(4, charArray0.length);
      
      charArray0[3] = '(';
      int int1 = stringProvider0.read(charArray0, 1040, 1);
      assertArrayEquals(new char[] {')', '?', 'Z', '('}, charArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(4, charArray0.length);
      
      stringProvider0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, (-4205), (-4205));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      try { 
        AbstractCharStream.hexval('?');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char '?' (=63) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("");
      assertNotNull(stringProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, (-1), (-975));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int0 = simpleCharStream0.getLine();
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-1), int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      charArray0[1] = 'M';
      charArray0[2] = '=';
      charArray0[3] = 'w';
      charArray0[4] = 'p';
      charArray0[5] = 'N';
      charArray0[6] = '9';
      charArray0[7] = 'L';
      charArray0[8] = 'V';
      int int1 = simpleCharStream0.streamRead(charArray0, 1203, (-1));
      assertArrayEquals(new char[] {'c', 'M', '=', 'w', 'p', 'N', '9', 'L', 'V'}, charArray0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      assertEquals(9, charArray0.length);
      
      simpleCharStream0.setTabSize((-1));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("3e^C@T>u");
      assertNotNull(stringProvider0);
      
      try { 
        AbstractCharStream.hexval('U');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char 'U' (=85) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StringReader stringReader0 = new StringReader("p<\";");
      assertNotNull(stringReader0);
      
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      assertNotNull(streamProvider0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '[';
      int int0 = stringReader0.read(charArray0);
      assertArrayEquals(new char[] {'p'}, charArray0);
      assertEquals(1, int0);
      assertEquals(1, charArray0.length);
      
      streamProvider0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(streamProvider0);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int1 = simpleCharStream0.getBeginColumn();
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.backup(0);
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int2 = simpleCharStream0.getEndLine();
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int3 = 13;
      streamProvider0.close();
      simpleCharStream0.reInit((Provider) streamProvider0, 0, 0, 13);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      String string0 = simpleCharStream0.getImage();
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '\"';
      try { 
        streamProvider0.read(charArray1, 0, (-1058));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      StreamProvider streamProvider0 = new StreamProvider(pushbackInputStream0, charset0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(streamProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(streamProvider0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int0 = (-649);
      // Undeclared exception!
      try { 
        simpleCharStream0.internalSetBufLineColumn((-649), (-649));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("O,PS~hb%KG6DHVZ");
      assertNotNull(stringProvider0);
      
      stringProvider0.close();
      int int0 = 816;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 816, 816, 816);
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.done();
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int1 = 0;
      // Undeclared exception!
      try { 
        simpleCharStream0.adjustBeginLineColumn(197, 41);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider(",k]");
      assertNotNull(stringProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 2374, 0, 0);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'e';
      charArray0[1] = '_';
      charArray0[2] = 'V';
      charArray0[3] = '>';
      charArray0[4] = '`';
      charArray0[5] = '`';
      charArray0[6] = 'M';
      int int0 = 0;
      int int1 = simpleCharStream0.streamRead(charArray0, 0, 0);
      assertArrayEquals(new char[] {'e', '_', 'V', '>', '`', '`', 'M'}, charArray0);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      assertEquals(7, charArray0.length);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.getBeginLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StreamProvider streamProvider0 = new StreamProvider((Reader) null);
      assertNotNull(streamProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(streamProvider0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.backup(3145);
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("C(OH:|Q&z7qE87");
      assertNotNull(stringProvider0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '#';
      charArray0[1] = ')';
      charArray0[2] = '!';
      charArray0[3] = '{';
      charArray0[4] = 'a';
      charArray0[5] = '$';
      charArray0[6] = 'I';
      int int0 = stringProvider0.read(charArray0, 0, 12);
      assertArrayEquals(new char[] {'C', '(', 'O', 'H', ':', '|', 'Q'}, charArray0);
      assertEquals(7, int0);
      assertEquals(7, charArray0.length);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 0, 0, 0);
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.available = 0;
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      
      // Undeclared exception!
      try { 
        simpleCharStream0.backup(1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot back 1 chars which is larger than the internal buffer size (0)
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StringProvider stringProvider0 = new StringProvider("Gx_KN");
      assertNotNull(stringProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 6, 0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int0 = simpleCharStream0.getBufSizeAfterExpansion();
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(8192, int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int1 = simpleCharStream0.getTabSize();
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int int0 = 0;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, 0, 0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      try { 
        AbstractCharStream.hexval(':');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char ':' (=58) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Provider provider0 = null;
      int int0 = 3146;
      int int1 = 0;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, 3146, 0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.maxNextCharInd = 0;
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      simpleCharStream0.tokenBegin = 0;
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      String string0 = simpleCharStream0.getImage();
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(string0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.bufpos = 2709;
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        simpleCharStream0.beginToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StringReader stringReader0 = new StringReader("L50j|?/>/;");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      assertNotNull(streamProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(streamProvider0, 600, 600, 600);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int0 = 0;
      simpleCharStream0.reInit(600, 0, 600);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.done();
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.getSuffix(3856);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("hVoX/F");
      assertNotNull(stringProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 9, 346);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit((Provider) stringProvider0, 9, 346, 8);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.getSuffix(9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      try { 
        AbstractCharStream.hexval('X');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char 'X' (=88) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("Invalid hex char '");
      assertNotNull(stringProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int0 = 0;
      char char0 = simpleCharStream0.beginToken();
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals('I', char0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit(0, (-2037), 4096);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      try { 
        simpleCharStream0.beginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // PGCC end of stream
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("");
      assertNotNull(stringProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      char[] charArray0 = new char[4];
      int int0 = stringProvider0.read(charArray0, 492, 0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(4, charArray0.length);
      
      charArray0[0] = '1';
      charArray0[1] = 'B';
      charArray0[2] = 'd';
      charArray0[3] = 'f';
      try { 
        simpleCharStream0.beginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // PGCC end of stream
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StringReader stringReader0 = new StringReader("AW9Wfk");
      assertNotNull(stringReader0);
      
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      assertNotNull(streamProvider0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(streamProvider0);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.inBuf = 86;
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      int int0 = AbstractCharStream.hexval('B');
      assertEquals(11, int0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '8';
      charArray0[1] = '8';
      charArray0[2] = '8';
      charArray0[3] = 'B';
      int int1 = streamProvider0.read(charArray0, 0, 0);
      assertArrayEquals(new char[] {'8', '8', '8', 'B'}, charArray0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(4, charArray0.length);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.internalUpdateLineColumn('8');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("");
      assertNotNull(stringProvider0);
      
      stringProvider0.close();
      stringProvider0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, (-76), 4096, 4096);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      stringProvider0.close();
      simpleCharStream0.streamClose();
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.reInit(0, 327, (-4023));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("");
      assertNotNull(stringProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 4096, 4096, 4096);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'h';
      charArray0[1] = 'z';
      charArray0[2] = 'u';
      charArray0[3] = 'l';
      charArray0[4] = 'f';
      charArray0[5] = '\"';
      int int0 = stringProvider0.read(charArray0, 4096, 4096);
      assertArrayEquals(new char[] {'h', 'z', 'u', 'l', 'f', '\"'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(6, charArray0.length);
      
      simpleCharStream0.available = 3;
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      String string0 = simpleCharStream0.getImage();
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(string0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StringReader stringReader0 = new StringReader("pz!N6B");
      assertNotNull(stringReader0);
      
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      assertNotNull(streamProvider0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '\"';
      charArray0[1] = '2';
      charArray0[2] = '~';
      charArray0[3] = '\\';
      charArray0[4] = 'Z';
      charArray0[5] = 'k';
      charArray0[6] = '`';
      charArray0[7] = 'c';
      charArray0[8] = 'q';
      int int0 = stringReader0.read(charArray0);
      assertArrayEquals(new char[] {'p', 'z', '!', 'N', '6', 'B', '`', 'c', 'q'}, charArray0);
      assertEquals(6, int0);
      assertEquals(9, charArray0.length);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(streamProvider0, (-2941), (-3451), 2318);
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      streamProvider0.close();
      simpleCharStream0.setTabSize((-749));
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-749), simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.tokenBegin = 2318;
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-749), simpleCharStream0.getTabSize());
      
      simpleCharStream0.streamClose();
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-749), simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      streamProvider0.close();
      simpleCharStream0.internalAdjustBuffSize();
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals((-749), simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      streamProvider0.close();
      simpleCharStream0.adjustBeginLineColumn((-1), 2598);
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(2598, simpleCharStream0.getEndColumn());
      assertEquals((-1), simpleCharStream0.getEndLine());
      assertEquals((-749), simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.expandBuff(true);
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals((-749), simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.streamClose();
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals((-749), simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int1 = simpleCharStream0.getBeginColumn();
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals((-749), simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int2 = simpleCharStream0.getBufSizeAfterExpansion();
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals((-749), simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(9272, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int int0 = 0;
      int int1 = 3921;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, 0, 3921);
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.expandBuff(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      assertNotNull(streamProvider0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(streamProvider0);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit(2445, 2445, 0);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      try { 
        AbstractCharStream.hexval('v');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char 'v' (=118) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      try { 
        AbstractCharStream.hexval('k');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char 'k' (=107) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Provider provider0 = null;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, (-1), (-3088));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.adjustBeginLineColumn((-3088), (-3088));
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals((-3088), simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.maxNextCharInd = 10;
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals((-3088), simpleCharStream0.getBeginColumn());
      
      char char0 = simpleCharStream0.readChar();
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3087), simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals((-3087), simpleCharStream0.getBeginColumn());
      assertEquals((-3087), simpleCharStream0.getEndColumn());
      assertEquals('\u0000', char0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.internalAdjustBuffSize();
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3087), simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals((-3087), simpleCharStream0.getBeginColumn());
      assertEquals((-3087), simpleCharStream0.getEndColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.setTabSize((-3088));
      assertEquals((-3087), simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3088), simpleCharStream0.getTabSize());
      assertEquals((-3087), simpleCharStream0.getEndLine());
      assertEquals((-3087), simpleCharStream0.getBeginColumn());
      assertEquals((-3087), simpleCharStream0.getEndColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.done();
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals((-3088), simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, 422, 422, 422);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.tokenBegin = 4096;
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      
      simpleCharStream0.reInit((-1074), 422, 2);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.adjustBeginLineColumn(422, 767);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(767, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(423, simpleCharStream0.getBeginLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int0 = simpleCharStream0.getColumn();
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(767, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(423, simpleCharStream0.getBeginLine());
      assertEquals(767, int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.internalUpdateLineColumn(']');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Z0kez6aE7D}");
      assertNotNull(stringReader0);
      
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      assertNotNull(streamProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(streamProvider0, (-940), (-940));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.setTabSize((-940));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-940), simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, (-1), (-1));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit((Provider) null);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.internalAdjustBuffSize();
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.streamRead((char[]) null, (-1), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("&r0|UdqD^l(;*$5");
      assertNotNull(stringProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, (-164), 1775, 0);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int0 = simpleCharStream0.getBufSizeAfterExpansion();
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("");
      assertNotNull(stringProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int0 = (-532);
      simpleCharStream0.tokenBegin = (-532);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'L';
      charArray0[1] = 'r';
      int int1 = stringProvider0.read(charArray0, 0, (-1));
      assertArrayEquals(new char[] {'L', 'r'}, charArray0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertEquals(2, charArray0.length);
      
      try { 
        simpleCharStream0.fillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // PGCC end of stream
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("");
      assertNotNull(stringProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0);
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int0 = 0;
      char char0 = '!';
      stringProvider0.close();
      char[] charArray0 = new char[3];
      stringProvider0.close();
      charArray0[0] = '!';
      try { 
        simpleCharStream0.fillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // PGCC end of stream
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      char char0 = 'C';
      int int0 = AbstractCharStream.hexval('C');
      assertEquals(12, int0);
      
      File file0 = MockFile.createTempFile("Invalid hex char '", "Invalid hex char '");
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertEquals("Invalid hex char '0Invalid hex char '", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/Invalid hex char '0Invalid hex char '", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.getParent());
      assertNotNull(file0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      assertNotNull(mockFileInputStream0);
      
      StreamProvider streamProvider0 = null;
      try {
        streamProvider0 = new StreamProvider(mockFileInputStream0, "fgGR[");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      assertNotNull(streamProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(streamProvider0, 2210, 2210);
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int0 = simpleCharStream0.getBeginLine();
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("org.apache.commons.jexl3.parser.StreamProvider");
      assertNotNull(stringProvider0);
      
      stringProvider0.close();
      stringProvider0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, (-945), 162);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.bufsize = (-945);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      
      simpleCharStream0.maxNextCharInd = (-3533);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      
      simpleCharStream0.streamClose();
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.getEndColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%");
      assertNotNull(stringReader0);
      
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      assertNotNull(streamProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(streamProvider0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.getEndColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      StringReader stringReader0 = new StringReader("l'[[");
      assertNotNull(stringReader0);
      
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      assertNotNull(streamProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(streamProvider0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      char char0 = simpleCharStream0.readChar();
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals('l', char0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.reInit(7, 7, (-462));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("");
      assertNotNull(stringProvider0);
      
      int int0 = 0;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 0, 0, 0);
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.tokenBegin = 0;
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      
      stringProvider0.close();
      simpleCharStream0.setTrackLineColumn(false);
      assertFalse(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.backup(0);
      assertFalse(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.internalUpdateLineColumn('o');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("");
      assertNotNull(stringProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 0, 0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // PGCC end of stream
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w$@Rz|a~rz^]L");
      assertNotNull(stringReader0);
      
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      assertNotNull(streamProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(streamProvider0, 0, 0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      char char0 = simpleCharStream0.readChar();
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals('w', char0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("org.apache.commons.jexl3.parser.StringProvider");
      assertNotNull(stringProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 563, 2944);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.done();
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, 14, 14, 0);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit((Provider) null);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      int int0 = AbstractCharStream.hexval('E');
      assertEquals(14, int0);
      
      int int1 = AbstractCharStream.hexval('8');
      assertEquals(8, int1);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Provider provider0 = null;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.setTrackLineColumn(true);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.available = 1;
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      simpleCharStream0.reInit((Provider) null);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int0 = 1052;
      simpleCharStream0.reInit((Provider) null, 1052, 2190);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit((Provider) null, 2190, (-2086));
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit((Provider) null, 0, 0);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int1 = simpleCharStream0.getBeginColumn();
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int2 = simpleCharStream0.getLine();
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.getEndLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("");
      assertNotNull(stringProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 778, 3, 3);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.setTrackLineColumn(true);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, 0, 0, 0);
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int0 = simpleCharStream0.getLine();
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("");
      assertNotNull(stringProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 289, 289);
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.getEndLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("");
      assertNotNull(stringProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 4096, 0, 0);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.getBeginColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3e^C@T>u");
      assertNotNull(stringReader0);
      
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      assertNotNull(streamProvider0);
      
      StringProvider stringProvider0 = new StringProvider("3e^C@T>u");
      assertNotNull(stringProvider0);
      
      try { 
        AbstractCharStream.hexval('R');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char 'R' (=82) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      char[] charArray0 = new char[7];
      int int0 = AbstractCharStream.hexval('A');
      assertEquals(10, int0);
      
      int int1 = AbstractCharStream.hexval('8');
      assertEquals(8, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.jexl3.parser.AbstractCharStream");
      assertFalse(boolean0);
      
      char char0 = '2';
      int int0 = AbstractCharStream.hexval('2');
      assertEquals(2, int0);
      
      // Undeclared exception!
      try { 
        Charset.forName("Y;O~L_Iv uylHVl3!8");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Y;O~L_Iv uylHVl3!8
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("");
      assertNotNull(stringProvider0);
      
      stringProvider0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 61, 55, 61);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.streamClose();
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit((Provider) stringProvider0, 61, 4362, 4362);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '8';
      charArray0[1] = '[';
      charArray0[2] = ':';
      charArray0[3] = '<';
      int int0 = stringProvider0.read(charArray0, 4096, 55);
      assertArrayEquals(new char[] {'8', '[', ':', '<'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(4, charArray0.length);
      
      simpleCharStream0.streamClose();
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      try { 
        AbstractCharStream.hexval('S');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char 'S' (=83) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      int int0 = AbstractCharStream.hexval('0');
      assertEquals(0, int0);
      
      try { 
        AbstractCharStream.hexval('P');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char 'P' (=80) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      char char0 = 'Y';
      try { 
        AbstractCharStream.hexval('Y');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char 'Y' (=89) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      int int0 = AbstractCharStream.hexval('c');
      assertEquals(12, int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte) (-44);
      byteArray0[7] = (byte)84;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)11, (byte) (-6), (byte)60, (byte)4, (byte) (-44), (byte)84}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArray0.length);
      
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(byteArrayInputStream0);
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(Throwable e) {
         //
         // invalid stream header: FF000BFA
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      StringReader stringReader0 = new StringReader("zpy$B9>w");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      assertNotNull(streamProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(streamProvider0, 360, 99);
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.tokenBegin = 2;
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      String string0 = simpleCharStream0.getImage();
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(string0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.internalAdjustBuffSize();
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      try { 
        AbstractCharStream.hexval('N');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char 'N' (=78) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[7];
      char char0 = 'W';
      try { 
        AbstractCharStream.hexval('W');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char 'W' (=87) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      assertNotNull(streamProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(streamProvider0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = AbstractCharStream.hexval('f');
      assertEquals(15, int0);
      
      simpleCharStream0.reInit((Provider) streamProvider0, 88, 88);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit((Provider) streamProvider0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit((Provider) streamProvider0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      char[] charArray0 = simpleCharStream0.getSuffix(88);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(charArray0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      assertEquals(88, charArray0.length);
      
      streamProvider0.close();
      try { 
        simpleCharStream0.fillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      int int0 = AbstractCharStream.hexval('B');
      assertEquals(11, int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      charArray0[2] = 'B';
      charArray0[4] = 'B';
      charArray0[5] = 'B';
      charArray0[6] = 'B';
      try { 
        AbstractCharStream.hexval('X');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char 'X' (=88) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      try { 
        AbstractCharStream.hexval('=');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char '=' (=61) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StringReader stringReader0 = new StringReader("<Zg?n[u$Yhbj");
      assertNotNull(stringReader0);
      
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      assertNotNull(streamProvider0);
      
      stringReader0.reset();
      try { 
        AbstractCharStream.hexval('^');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char '^' (=94) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("Invalid hex char '");
      assertNotNull(stringProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      stringProvider0.close();
      String string0 = simpleCharStream0.getImage();
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(string0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit((-2037), 82, 491);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      try { 
        AbstractCharStream.hexval('>');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char '>' (=62) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      try { 
        AbstractCharStream.hexval('s');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char 's' (=115) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      try { 
        AbstractCharStream.hexval('K');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char 'K' (=75) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      try { 
        AbstractCharStream.hexval('Z');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char 'Z' (=90) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Provider provider0 = null;
      int int0 = 1;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, 1, 1, 1);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.inBuf = 1;
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      
      simpleCharStream0.reInit((Provider) null, 1, 1, 1);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      try { 
        AbstractCharStream.hexval('H');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char 'H' (=72) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("");
      assertNotNull(stringProvider0);
      
      stringProvider0.close();
      stringProvider0.close();
      char[] charArray0 = new char[4];
      charArray0[0] = ')';
      charArray0[2] = '@';
      charArray0[2] = ')';
      int int0 = stringProvider0.read(charArray0, 0, 0);
      assertArrayEquals(new char[] {')', '\u0000', ')', '\u0000'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(4, charArray0.length);
      
      charArray0[3] = '(';
      int int1 = stringProvider0.read(charArray0, 1040, 1);
      assertArrayEquals(new char[] {')', '\u0000', ')', '('}, charArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(4, charArray0.length);
      
      stringProvider0.close();
      try { 
        AbstractCharStream.hexval('@');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char '@' (=64) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      char char0 = 'J';
      try { 
        AbstractCharStream.hexval('J');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char 'J' (=74) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      assertNotNull(streamProvider0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'e';
      charArray0[1] = 'c';
      charArray0[2] = ']';
      charArray0[3] = 'w';
      charArray0[4] = ' ';
      charArray0[5] = '9';
      charArray0[6] = '[';
      charArray0[7] = 'G';
      charArray0[8] = 'n';
      int int0 = stringReader0.read(charArray0);
      assertArrayEquals(new char[] {'e', 'c', ']', 'w', ' ', '9', '[', 'G', 'n'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(9, charArray0.length);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(streamProvider0);
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      char[] charArray1 = new char[7];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'Y';
      charArray1[1] = '`';
      charArray1[2] = 'R';
      charArray1[3] = '`';
      charArray1[4] = 'c';
      charArray1[5] = '+';
      try { 
        AbstractCharStream.hexval('`');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char '`' (=96) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("Invalid hex char '");
      assertNotNull(stringProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int0 = 0;
      char char0 = simpleCharStream0.beginToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals('I', char0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int1 = (-2037);
      char[] charArray0 = new char[0];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int2 = simpleCharStream0.streamRead(charArray0, 0, (-2037));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      assertEquals(0, charArray0.length);
      
      simpleCharStream0.available = 0;
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(1, simpleCharStream0.getBeginLine());
      
      simpleCharStream0.inBuf = (-2037);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(1, simpleCharStream0.getBeginLine());
      
      int int3 = 4096;
      simpleCharStream0.adjustBeginLineColumn(0, (-1));
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      try { 
        AbstractCharStream.hexval('I');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char 'I' (=73) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Provider provider0 = null;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.available = 4096;
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      simpleCharStream0.bufpos = 4096;
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      simpleCharStream0.reInit((Provider) null);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int0 = 1052;
      simpleCharStream0.reInit((Provider) null, 1052, 2190);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.adjustBeginLineColumn(2190, (-230));
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals((-230), simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(2191, simpleCharStream0.getBeginLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit((Provider) null, 2190, (-2086));
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals((-230), simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(2191, simpleCharStream0.getBeginLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit((Provider) null, 0, 0);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals((-230), simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(2191, simpleCharStream0.getBeginLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int1 = simpleCharStream0.getBeginColumn();
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals((-230), simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(2191, simpleCharStream0.getBeginLine());
      assertEquals((-230), int1);
      assertFalse(int1 == int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int2 = simpleCharStream0.getLine();
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals((-230), simpleCharStream0.getBeginColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(2191, simpleCharStream0.getBeginLine());
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.getEndLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      try { 
        AbstractCharStream.hexval('O');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char 'O' (=79) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      char[] charArray0 = new char[7];
      try { 
        AbstractCharStream.hexval('G');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char 'G' (=71) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3e^C@D>u");
      assertNotNull(stringReader0);
      
      StringProvider stringProvider0 = new StringProvider("3e^C@D>u");
      assertNotNull(stringProvider0);
      
      int int0 = AbstractCharStream.hexval('e');
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      try { 
        AbstractCharStream.hexval(':');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char ':' (=58) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      int int0 = AbstractCharStream.hexval('9');
      assertEquals(9, int0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      int int1 = AbstractCharStream.hexval('7');
      assertEquals(7, int1);
      assertFalse(int1 == int0);
      
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("Sx$:9oSMg.>7m'");
      assertNotNull(stringProvider0);
      
      int int0 = AbstractCharStream.hexval('4');
      assertEquals(4, int0);
      
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      char char0 = '\\';
      try { 
        AbstractCharStream.hexval('\\');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char '\\' (=92) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Provider provider0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, 44, 44);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.inBuf = 44;
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      int int0 = AbstractCharStream.hexval('F');
      assertEquals(15, int0);
      
      simpleCharStream0.internalAdjustBuffSize();
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.expandBuff(false);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      char char0 = simpleCharStream0.readChar();
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals('\u0000', char0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.setTrackLineColumn(true);
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit((Provider) null);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.fillBuff();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Provider provider0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, 66, 66);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.inBuf = 66;
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      simpleCharStream0.internalAdjustBuffSize();
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.expandBuff(false);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.bufsize = 66;
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      simpleCharStream0.internalAdjustBuffSize();
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.setTrackLineColumn(false);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit((Provider) null, 89, 12, 431);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit((Provider) null);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      String string0 = simpleCharStream0.getImage();
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(simpleCharStream0.isTrackLineColumn());
      assertNotNull(string0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.fillBuff();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, 1, 0, 1753);
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      Provider provider0 = null;
      int int0 = 1050;
      simpleCharStream0.tokenBegin = 1050;
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      simpleCharStream0.internalAdjustBuffSize();
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.backup(0);
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.inBuf = 1753;
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      char char0 = simpleCharStream0.beginToken();
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals('\u0000', char0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit((Provider) null, 1753, 1058);
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.done();
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.streamRead((char[]) null, (-1770), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      int int0 = AbstractCharStream.hexval('b');
      assertEquals(11, int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte)60;
      byteArray0[7] = (byte)84;
      try { 
        AbstractCharStream.hexval('Q');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char 'Q' (=81) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      try { 
        AbstractCharStream.hexval('V');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char 'V' (=86) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      int int0 = AbstractCharStream.hexval('6');
      assertEquals(6, int0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '6';
      charArray0[1] = '6';
      charArray0[2] = 'n';
      charArray0[3] = '6';
      StringProvider stringProvider0 = new StringProvider("");
      assertNotNull(stringProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 2070, 12);
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.getEndLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("C(OH:|Q&z7qE87");
      assertNotNull(stringProvider0);
      
      int int0 = 0;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 0, 0, 0);
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.available = 0;
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      
      // Undeclared exception!
      try { 
        simpleCharStream0.backup(1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot back 1 chars which is larger than the internal buffer size (0)
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      try { 
        AbstractCharStream.hexval('#');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char '#' (=35) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("C(OH:|Q&z7qE87");
      assertNotNull(stringProvider0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'k';
      charArray0[2] = 'a';
      charArray0[3] = 'a';
      charArray0[4] = '#';
      int int0 = stringProvider0.read(charArray0, 0, 0);
      assertArrayEquals(new char[] {'k', '\u0000', 'a', 'a', '#'}, charArray0);
      assertEquals(0, int0);
      assertEquals(5, charArray0.length);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 0, 0, 0);
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.available = 0;
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      
      simpleCharStream0.reInit((Provider) stringProvider0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.backup(19);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      char[] charArray1 = simpleCharStream0.getSuffix(4096);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      assertEquals(4096, charArray1.length);
      
      boolean boolean0 = simpleCharStream0.isTrackLineColumn();
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertTrue(boolean0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.streamClose();
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int1 = simpleCharStream0.getColumn();
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int2 = simpleCharStream0.getLine();
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit((Provider) stringProvider0, 9, 9, 86);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int3 = AbstractCharStream.hexval('a');
      assertEquals(10, int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      
      int int4 = simpleCharStream0.getTabSize();
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, int4);
      assertTrue(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      char[] charArray2 = simpleCharStream0.getSuffix(0);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      assertEquals(0, charArray2.length);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.internalUpdateLineColumn('I');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("Invalid hex char '");
      assertNotNull(stringProvider0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      stringProvider0.close();
      simpleCharStream0.reInit((-2037), 82, 442);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      int int0 = AbstractCharStream.hexval('5');
      assertEquals(5, int0);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.getEndColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      int int0 = AbstractCharStream.hexval('1');
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Provider provider0 = null;
      int int0 = 1;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, 1, 0, 1);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertNotNull(simpleCharStream0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      simpleCharStream0.reInit((Provider) null);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.internalAdjustBuffSize();
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.reInit(1, 1, 0);
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.inBuf = 1;
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'C';
      int int1 = simpleCharStream0.getTabSize();
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      simpleCharStream0.buffer = charArray0;
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      
      int int2 = 1058;
      char char0 = simpleCharStream0.beginToken();
      assertEquals(1, simpleCharStream0.getTabSize());
      assertTrue(simpleCharStream0.isTrackLineColumn());
      assertEquals('C', char0);
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.beginToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      int int0 = AbstractCharStream.DEFAULT_BUF_SIZE;
      assertEquals(4096, int0);
      
      int int1 = AbstractCharStream.hexval('D');
      assertEquals(13, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("Invalid hex char '");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0);
      simpleCharStream0.beginToken();
      char[] charArray0 = new char[0];
      simpleCharStream0.streamRead(charArray0, (-748), 4096);
      simpleCharStream0.inBuf = (int) 'I';
      simpleCharStream0.reInit((Provider) stringProvider0, 4096, 3);
      simpleCharStream0.adjustBeginLineColumn((-748), (-1));
      simpleCharStream0.reInit((-748), (-748), 4096);
      try { 
        simpleCharStream0.beginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // PGCC end of stream
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, (-1), (-1));
      simpleCharStream0.adjustBeginLineColumn((-1), (-1));
      simpleCharStream0.tokenBegin = 3081;
      simpleCharStream0.available = (int) (byte) (-62);
      simpleCharStream0.maxNextCharInd = 10;
      FileSystemHandling.shouldAllThrowIOExceptions();
      simpleCharStream0.readChar();
      simpleCharStream0.internalAdjustBuffSize();
      simpleCharStream0.setTabSize((-1));
      simpleCharStream0.internalAdjustBuffSize();
      simpleCharStream0.expandBuff(true);
      assertEquals((-1), simpleCharStream0.getTabSize());
      
      int int0 = AbstractCharStream.hexval('C');
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Provider provider0 = null;
      int int0 = 2;
      char char0 = 'M';
      try { 
        AbstractCharStream.hexval('M');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char 'M' (=77) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")");
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      char[] charArray0 = new char[8];
      charArray0[2] = 'w';
      charArray0[6] = 'E';
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      charArray0[7] = 'L';
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(streamProvider0, 3, 3, 3);
      simpleCharStream0.beginToken();
      simpleCharStream0.getImage();
      simpleCharStream0.backup(3);
      simpleCharStream0.getBeginLine();
      try { 
        AbstractCharStream.hexval('L');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char 'L' (=76) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = "";
      try { 
        AbstractCharStream.hexval('?');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid hex char '?' (=63) provided!
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("_##k.");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 1, 1);
      simpleCharStream0.getBeginLine();
      simpleCharStream0.setTrackLineColumn(false);
      int int0 = AbstractCharStream.hexval('d');
      assertEquals(13, int0);
      
      char char0 = simpleCharStream0.beginToken();
      assertEquals(1, simpleCharStream0.getTabSize());
      assertEquals('_', char0);
  }
}
