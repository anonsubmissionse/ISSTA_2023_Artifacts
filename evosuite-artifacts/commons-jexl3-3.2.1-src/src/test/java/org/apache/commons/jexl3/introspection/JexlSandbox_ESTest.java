/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 17:55:24 GMT 2022
 */

package org.apache.commons.jexl3.introspection;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import java.util.NoSuchElementException;
import org.apache.commons.jexl3.introspection.JexlSandbox;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JexlSandbox_ESTest extends JexlSandbox_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      JexlSandbox.Permissions jexlSandbox_Permissions0 = jexlSandbox0.permissions("", false, true, true);
      assertFalse(jexlSandbox_Permissions0.isInheritable());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, JexlSandbox.Permissions> hashMap0 = new HashMap<String, JexlSandbox.Permissions>();
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, hashMap0);
      String string0 = jexlSandbox0.write("#j1oJuHL}CI{K", "pR`l.`f@\"CDx9");
      assertEquals("pR`l.`f@\"CDx9", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JexlSandbox.AllowSet jexlSandbox_AllowSet0 = new JexlSandbox.AllowSet();
      JexlSandbox.Names jexlSandbox_Names0 = jexlSandbox_AllowSet0.copy();
      assertNotSame(jexlSandbox_Names0, jexlSandbox_AllowSet0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JexlSandbox.BlockSet jexlSandbox_BlockSet0 = new JexlSandbox.BlockSet();
      JexlSandbox.Names jexlSandbox_Names0 = jexlSandbox_BlockSet0.copy();
      assertNotSame(jexlSandbox_Names0, jexlSandbox_BlockSet0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, false);
      String string0 = jexlSandbox0.write("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      Class<Integer> class0 = Integer.class;
      String string0 = jexlSandbox0.write(class0, "Ud.]a1A|wm%cS;feLI");
      assertEquals("Ud.]a1A|wm%cS;feLI", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      String string0 = jexlSandbox0.read((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      JexlSandbox.Permissions jexlSandbox_Permissions0 = jexlSandbox0.block("<K4% 9~EC=12!cE34");
      assertFalse(jexlSandbox_Permissions0.isInheritable());
      
      String string0 = jexlSandbox0.read("<K4% 9~EC=12!cE34", (String) null);
      assertEquals("?", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox(true);
      Class<Integer> class0 = Integer.class;
      String string0 = jexlSandbox0.read(class0, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, false);
      Class<Integer> class0 = Integer.class;
      String string0 = jexlSandbox0.read(class0, "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox(false);
      JexlSandbox.Permissions jexlSandbox_Permissions0 = jexlSandbox0.permissions("g2ZR18K&EeW[W", false, false, true, true);
      assertFalse(jexlSandbox_Permissions0.isInheritable());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox(true);
      jexlSandbox0.permissions("0f.hfuDNM~Q/", true, false, false, true);
      JexlSandbox.Permissions jexlSandbox_Permissions0 = jexlSandbox0.get("0f.hfuDNM~Q/");
      assertTrue(jexlSandbox_Permissions0.isInheritable());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<?> class0 = JexlSandbox.forName("org.apache.commons.jexl3.introspection.JexlSandbox$AllowSet");
      assertEquals(8, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, JexlSandbox.Permissions> hashMap0 = new HashMap<String, JexlSandbox.Permissions>();
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, false, hashMap0);
      String string0 = jexlSandbox0.execute("", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, JexlSandbox.Permissions> hashMap0 = new HashMap<String, JexlSandbox.Permissions>();
      JexlSandbox jexlSandbox0 = new JexlSandbox(false, true, hashMap0);
      JexlSandbox.Permissions jexlSandbox_Permissions0 = jexlSandbox0.black("");
      assertTrue(jexlSandbox_Permissions0.isInheritable());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<String, JexlSandbox.Permissions> hashMap0 = new HashMap<String, JexlSandbox.Permissions>();
      JexlSandbox jexlSandbox0 = new JexlSandbox(hashMap0);
      JexlSandbox jexlSandbox1 = jexlSandbox0.copy();
      // Undeclared exception!
      try { 
        jexlSandbox1.write((String) null, "y");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, JexlSandbox.Permissions> hashMap0 = new HashMap<String, JexlSandbox.Permissions>();
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, hashMap0);
      JexlSandbox jexlSandbox1 = jexlSandbox0.copy();
      // Undeclared exception!
      try { 
        jexlSandbox1.read((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox(false);
      JexlSandbox jexlSandbox1 = jexlSandbox0.copy();
      // Undeclared exception!
      try { 
        jexlSandbox1.permissions((String) null, false, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      jexlSandbox0.permissions((String) null, true, true, true, true);
      // Undeclared exception!
      try { 
        jexlSandbox0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<String, JexlSandbox.Permissions> hashMap0 = new HashMap<String, JexlSandbox.Permissions>();
      JexlSandbox jexlSandbox0 = new JexlSandbox(hashMap0);
      JexlSandbox jexlSandbox1 = jexlSandbox0.copy();
      // Undeclared exception!
      try { 
        jexlSandbox1.block((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, true);
      JexlSandbox jexlSandbox1 = jexlSandbox0.copy();
      // Undeclared exception!
      try { 
        jexlSandbox1.black((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, true);
      Class<Object> class0 = Object.class;
      JexlSandbox.Permissions jexlSandbox_Permissions0 = jexlSandbox0.get(class0);
      assertFalse(jexlSandbox_Permissions0.isInheritable());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<String, JexlSandbox.Permissions> hashMap0 = new HashMap<String, JexlSandbox.Permissions>();
      JexlSandbox jexlSandbox0 = new JexlSandbox(false, true, hashMap0);
      Class<JexlSandbox.Permissions> class0 = JexlSandbox.Permissions.class;
      jexlSandbox0.get(class0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<String, JexlSandbox.Permissions> hashMap0 = new HashMap<String, JexlSandbox.Permissions>();
      JexlSandbox jexlSandbox0 = new JexlSandbox(hashMap0);
      JexlSandbox.Permissions jexlSandbox_Permissions0 = jexlSandbox0.get((Class<?>) null);
      assertFalse(jexlSandbox_Permissions0.isInheritable());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<String, JexlSandbox.Permissions> hashMap0 = new HashMap<String, JexlSandbox.Permissions>();
      JexlSandbox jexlSandbox0 = new JexlSandbox(false, hashMap0);
      JexlSandbox.Permissions jexlSandbox_Permissions0 = jexlSandbox0.get("xjP6Q\"-4sMNy@");
      String[] stringArray0 = new String[3];
      JexlSandbox.Permissions jexlSandbox_Permissions1 = jexlSandbox_Permissions0.write(stringArray0);
      assertSame(jexlSandbox_Permissions0, jexlSandbox_Permissions1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, true, (Map<String, JexlSandbox.Permissions>) null);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<String, JexlSandbox.Permissions> hashMap0 = new HashMap<String, JexlSandbox.Permissions>();
      JexlSandbox jexlSandbox0 = new JexlSandbox(false, hashMap0);
      Class<Object> class0 = Object.class;
      String string0 = jexlSandbox0.write(class0, "?");
      assertTrue(hashMap0.isEmpty());
      assertNull(string0);
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JexlSandbox.AllowSet jexlSandbox_AllowSet0 = new JexlSandbox.AllowSet();
      JexlSandbox.Permissions jexlSandbox_Permissions0 = new JexlSandbox.Permissions(false, jexlSandbox_AllowSet0, jexlSandbox_AllowSet0, jexlSandbox_AllowSet0);
      jexlSandbox_Permissions0.read();
      assertFalse(jexlSandbox_Permissions0.isInheritable());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JexlSandbox.Permissions jexlSandbox_Permissions0 = new JexlSandbox.Permissions(false, false, false, true);
      jexlSandbox_Permissions0.execute();
      assertFalse(jexlSandbox_Permissions0.isInheritable());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox(true);
      JexlSandbox.Permissions jexlSandbox_Permissions0 = jexlSandbox0.permissions("org.apache.commons.jexl3.introspection.JexlSandbox$1", false, false, true);
      assertFalse(jexlSandbox_Permissions0.isInheritable());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox(false);
      Class<Integer> class0 = Integer.class;
      JexlSandbox.Permissions jexlSandbox_Permissions0 = jexlSandbox0.get(class0);
      assertFalse(jexlSandbox_Permissions0.isInheritable());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JexlSandbox.Permissions jexlSandbox_Permissions0 = new JexlSandbox.Permissions(true, (JexlSandbox.Names) null, (JexlSandbox.Names) null, (JexlSandbox.Names) null);
      assertTrue(jexlSandbox_Permissions0.isInheritable());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<String, JexlSandbox.Permissions> hashMap0 = new HashMap<String, JexlSandbox.Permissions>();
      JexlSandbox jexlSandbox0 = new JexlSandbox(hashMap0);
      JexlSandbox.Permissions jexlSandbox_Permissions0 = jexlSandbox0.black((String) null);
      assertFalse(jexlSandbox_Permissions0.isInheritable());
      
      String string0 = jexlSandbox0.execute((String) null, (String) null);
      assertNotNull(string0);
      assertEquals("?", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JexlSandbox.BlockSet jexlSandbox_BlockSet0 = new JexlSandbox.BlockSet();
      jexlSandbox_BlockSet0.add("-@");
      String string0 = jexlSandbox_BlockSet0.get("-@");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JexlSandbox.BlockSet jexlSandbox_BlockSet0 = new JexlSandbox.BlockSet();
      jexlSandbox_BlockSet0.add("c]8KvN17m");
      String string0 = jexlSandbox_BlockSet0.get((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JexlSandbox.BlockSet jexlSandbox_BlockSet0 = new JexlSandbox.BlockSet();
      boolean boolean0 = jexlSandbox_BlockSet0.add("c]8KvN17m");
      boolean boolean1 = jexlSandbox_BlockSet0.add("c]8KvN17m");
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JexlSandbox.AllowSet jexlSandbox_AllowSet0 = new JexlSandbox.AllowSet();
      jexlSandbox_AllowSet0.add((String) null);
      String string0 = jexlSandbox_AllowSet0.get((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JexlSandbox.AllowSet jexlSandbox_AllowSet0 = new JexlSandbox.AllowSet();
      boolean boolean0 = jexlSandbox_AllowSet0.alias("gr.x", (String) null);
      assertTrue(boolean0);
      
      String string0 = jexlSandbox_AllowSet0.get((String) null);
      assertEquals("gr.x", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JexlSandbox.AllowSet jexlSandbox_AllowSet0 = new JexlSandbox.AllowSet();
      boolean boolean0 = jexlSandbox_AllowSet0.alias((String) null, "e=d't-mzTz'b{sUIz-");
      assertTrue(boolean0);
      
      String string0 = jexlSandbox_AllowSet0.get((String) null);
      assertEquals("?", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JexlSandbox.AllowSet jexlSandbox_AllowSet0 = new JexlSandbox.AllowSet();
      jexlSandbox_AllowSet0.alias("cK2(ifPfV\"#A", "Qa2/%%{|lP\"k58");
      String string0 = jexlSandbox_AllowSet0.get("0f.hfuDNM~Q/");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JexlSandbox.AllowSet jexlSandbox_AllowSet0 = new JexlSandbox.AllowSet();
      boolean boolean0 = jexlSandbox_AllowSet0.add("");
      boolean boolean1 = jexlSandbox_AllowSet0.alias("?", "");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JexlSandbox.AllowSet jexlSandbox_AllowSet0 = new JexlSandbox.AllowSet();
      boolean boolean0 = jexlSandbox_AllowSet0.alias("cK2(ifPfV\"#A", "Qa2/%%{|lP\"k58");
      boolean boolean1 = jexlSandbox_AllowSet0.add("0f.hfuDNM~Q/");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JexlSandbox.AllowSet jexlSandbox_AllowSet0 = new JexlSandbox.AllowSet();
      JexlSandbox.Names jexlSandbox_Names0 = jexlSandbox_AllowSet0.copy();
      assertNotSame(jexlSandbox_Names0, jexlSandbox_AllowSet0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JexlSandbox.AllowSet jexlSandbox_AllowSet0 = new JexlSandbox.AllowSet();
      boolean boolean0 = jexlSandbox_AllowSet0.alias((String) null, "e=d't-mzTz'b{sUIz-");
      assertTrue(boolean0);
      
      JexlSandbox.Names jexlSandbox_Names0 = jexlSandbox_AllowSet0.copy();
      assertNotSame(jexlSandbox_Names0, jexlSandbox_AllowSet0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, true);
      String string0 = jexlSandbox0.execute("e=d't-mzTz'b{sUIz-", "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, true);
      String string0 = jexlSandbox0.execute((String) null, (String) null);
      assertNotNull(string0);
      assertEquals("?", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HashMap<String, JexlSandbox.Permissions> hashMap0 = new HashMap<String, JexlSandbox.Permissions>();
      JexlSandbox jexlSandbox0 = new JexlSandbox(false, true, hashMap0);
      Class<JexlSandbox.Permissions> class0 = JexlSandbox.Permissions.class;
      jexlSandbox0.execute(class0, "");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HashMap<String, JexlSandbox.Permissions> hashMap0 = new HashMap<String, JexlSandbox.Permissions>();
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, hashMap0);
      Class<Object> class0 = Object.class;
      JexlSandbox.Permissions jexlSandbox_Permissions0 = jexlSandbox0.get(class0);
      String[] stringArray0 = new String[9];
      jexlSandbox_Permissions0.execute(stringArray0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HashMap<String, JexlSandbox.Permissions> hashMap0 = new HashMap<String, JexlSandbox.Permissions>();
      JexlSandbox jexlSandbox0 = new JexlSandbox(false, true, hashMap0);
      JexlSandbox.Permissions jexlSandbox_Permissions0 = jexlSandbox0.get((String) null);
      JexlSandbox.Permissions jexlSandbox_Permissions1 = jexlSandbox_Permissions0.copy();
      assertFalse(jexlSandbox_Permissions1.isInheritable());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HashMap<String, JexlSandbox.Permissions> hashMap0 = new HashMap<String, JexlSandbox.Permissions>();
      JexlSandbox jexlSandbox0 = new JexlSandbox(false, true, hashMap0);
      JexlSandbox.Permissions jexlSandbox_Permissions0 = jexlSandbox0.get((String) null);
      String[] stringArray0 = new String[1];
      JexlSandbox.Permissions jexlSandbox_Permissions1 = jexlSandbox_Permissions0.read(stringArray0);
      assertSame(jexlSandbox_Permissions1, jexlSandbox_Permissions0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, true);
      Class<Object> class0 = Object.class;
      jexlSandbox0.execute(class0, "5U6wqM#,Pv/");
      Class<String> class1 = String.class;
      JexlSandbox.Permissions jexlSandbox_Permissions0 = jexlSandbox0.get(class1);
      assertFalse(jexlSandbox_Permissions0.isInheritable());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      Class<Integer> class0 = Integer.class;
      String string0 = jexlSandbox0.execute(class0, "");
      assertNotNull(string0);
      assertEquals("java.lang.Integer", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JexlSandbox.BlockSet jexlSandbox_BlockSet0 = new JexlSandbox.BlockSet();
      boolean boolean0 = jexlSandbox_BlockSet0.alias("", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      Class<Object> class0 = Object.class;
      String string0 = jexlSandbox0.read(class0, "G)q;63>cm");
      assertEquals("G)q;63>cm", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      // Undeclared exception!
      try { 
        jexlSandbox0.white("?");
       //  fail("Expecting exception: NoSuchElementException");
       // Unstable assertion
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      String string0 = jexlSandbox0.read("?", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      jexlSandbox0.black("");
      JexlSandbox jexlSandbox1 = jexlSandbox0.copy();
      assertFalse(jexlSandbox1.equals((Object)jexlSandbox0));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Class<?> class0 = JexlSandbox.forName("?");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HashMap<String, JexlSandbox.Permissions> hashMap0 = new HashMap<String, JexlSandbox.Permissions>();
      JexlSandbox jexlSandbox0 = new JexlSandbox(hashMap0);
      JexlSandbox.Permissions jexlSandbox_Permissions0 = jexlSandbox0.get((String) null);
      assertNotNull(jexlSandbox_Permissions0);
      
      JexlSandbox.Permissions jexlSandbox_Permissions1 = jexlSandbox_Permissions0.copy();
      assertFalse(jexlSandbox_Permissions1.isInheritable());
  }
}
