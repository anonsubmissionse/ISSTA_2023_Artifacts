/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 17:47:41 GMT 2022
 */

package org.apache.commons.jexl3.internal.introspection;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import org.apache.commons.jexl3.internal.introspection.ClassMap;
import org.apache.commons.jexl3.internal.introspection.Introspector;
import org.apache.commons.jexl3.internal.introspection.MethodKey;
import org.apache.commons.jexl3.internal.introspection.Permissions;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.impl.Jdk13LumberjackLogger;
import org.apache.commons.logging.impl.Jdk14Logger;
import org.apache.commons.logging.impl.NoOpLog;
import org.apache.commons.logging.impl.SimpleLog;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Introspector_ESTest extends Introspector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog("yyyy/MM/dd HH:mm:ss:SSS zzz");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector(noOpLog0, classLoader0);
      Class<Object> class0 = Object.class;
      Method[] methodArray0 = introspector0.getMethods(class0, "cacheMiss");
      assertEquals(3, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog("P4yar(J.e]");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector(noOpLog0, classLoader0);
      Class<String> class0 = String.class;
      String[] stringArray0 = introspector0.getFieldNames(class0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger("java.lang.Object");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = Permissions.DEFAULT;
      Introspector introspector0 = new Introspector(jdk13LumberjackLogger0, classLoader0, permissions0);
      MethodKey methodKey0 = new MethodKey("java.lang.Object", (Class<?>[]) null);
      Constructor<?> constructor0 = introspector0.getConstructor(methodKey0);
      assertEquals("public java.lang.Object()", constructor0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector((Log) null, classLoader0);
      Class<?> class0 = introspector0.getClassByName("java.lang.annotation.Annotation");
      assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = new Permissions();
      Introspector introspector0 = new Introspector((Log) null, classLoader0, permissions0);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        introspector0.getMethods(class0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.introspection.ClassMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector((Log) null, classLoader0);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        introspector0.getMethodNames(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.introspection.ClassMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger("org.apache.commons.jexl3.internal.introspection.Introspector$CacheMiss");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector(jdk13LumberjackLogger0, classLoader0, (Permissions) null);
      Class<MethodKey> class0 = MethodKey.class;
      // Undeclared exception!
      try { 
        introspector0.getMethod(class0, (MethodKey) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger("W.:vgy");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = Permissions.DEFAULT;
      Introspector introspector0 = new Introspector(jdk13LumberjackLogger0, classLoader0, permissions0);
      Method method0 = ClassMap.cacheMiss();
      MethodKey methodKey0 = new MethodKey(method0);
      // Undeclared exception!
      try { 
        introspector0.getMethod((Class<?>) null, methodKey0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog((String) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = Permissions.DEFAULT;
      Introspector introspector0 = new Introspector(noOpLog0, classLoader0, permissions0);
      Class<Integer> class0 = Integer.class;
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        introspector0.getMethod(class0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.introspection.MethodKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger("");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector(jdk13LumberjackLogger0, classLoader0);
      // Undeclared exception!
      try { 
        introspector0.getMethod((Class<?>) null, "", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector((Log) null, classLoader0);
      Class<MethodKey> class0 = MethodKey.class;
      // Undeclared exception!
      try { 
        introspector0.getFieldNames(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.introspection.ClassMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector(noOpLog0, classLoader0);
      // Undeclared exception!
      try { 
        introspector0.getField((Class<?>) null, "org.apache.commons.jexl3.internal.introspection.Introspector");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger("U#.*kyw613e)NIF");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector(jdk13LumberjackLogger0, classLoader0);
      // Undeclared exception!
      try { 
        introspector0.getConstructor((MethodKey) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.introspection.Introspector", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog("NB9fW/3)4}u");
      Introspector introspector0 = new Introspector(noOpLog0, (ClassLoader) null);
      Class<Integer> class0 = Integer.class;
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 1);
      MethodKey methodKey0 = new MethodKey("NB9fW/3)4}u", (Class<?>[]) classArray0);
      // Undeclared exception!
      try { 
        introspector0.getConstructor(class0, methodKey0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.introspection.Introspector", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog("iE=^m`/C");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector(noOpLog0, classLoader0);
      // Undeclared exception!
      try { 
        introspector0.getClassByName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger("Method ");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = Permissions.DEFAULT;
      Introspector introspector0 = new Introspector(jdk13LumberjackLogger0, classLoader0, permissions0);
      Class<String> class0 = String.class;
      Method method0 = ClassMap.cacheMiss();
      MethodKey methodKey0 = new MethodKey(method0);
      Constructor<?> constructor0 = introspector0.getConstructor(class0, methodKey0);
      assertNull(constructor0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<ClassMap>[] classArray0 = (Class<ClassMap>[]) Array.newInstance(Class.class, 8);
      MethodKey methodKey0 = new MethodKey("", (Class<?>[]) classArray0);
      Introspector introspector0 = new Introspector((Log) null, classLoader0);
      Constructor<?> constructor0 = introspector0.getConstructor(classArray0[1], methodKey0);
      assertNull(constructor0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger("java.lang.Object");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = Permissions.DEFAULT;
      Introspector introspector0 = new Introspector(jdk13LumberjackLogger0, classLoader0, permissions0);
      Object[] objectArray0 = new Object[8];
      MethodKey methodKey0 = new MethodKey("java.lang.Object", (Class<?>[]) null);
      MethodKey methodKey1 = new MethodKey("java.lang.Object", objectArray0);
      introspector0.getConstructor(methodKey1);
      Class<String> class0 = String.class;
      Constructor<?> constructor0 = introspector0.getConstructor(class0, methodKey0);
      assertFalse(constructor0.isAccessible());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger("java.lang.Object");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = Permissions.DEFAULT;
      Introspector introspector0 = new Introspector(jdk13LumberjackLogger0, classLoader0, permissions0);
      Object[] objectArray0 = new Object[5];
      Class<ClassMap> class0 = ClassMap.class;
      MethodKey methodKey0 = new MethodKey("java.lang.Object", objectArray0);
      introspector0.getConstructor(methodKey0);
      Constructor<?> constructor0 = introspector0.getConstructor(class0, methodKey0);
      assertNull(constructor0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Introspector introspector0 = new Introspector((Log) null, (ClassLoader) null, (Permissions) null);
      ClassLoader classLoader0 = introspector0.getLoader();
      assertNull(classLoader0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      Introspector introspector0 = new Introspector(noOpLog0, classLoader1);
      Class<MethodKey> class0 = MethodKey.class;
      introspector0.getMethods(class0, (String) null);
      introspector0.setLoader(classLoader0);
      assertFalse(classLoader0.equals((Object)classLoader1));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger("java.lang.Object");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = Permissions.DEFAULT;
      Introspector introspector0 = new Introspector(jdk13LumberjackLogger0, classLoader0, permissions0);
      Class<Object> class0 = Object.class;
      introspector0.getMethods(class0, "java.lang.Object");
      ClassLoader classLoader1 = classLoader0.getParent();
      introspector0.setLoader(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger("java.lang.Object");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = Permissions.DEFAULT;
      Introspector introspector0 = new Introspector(jdk13LumberjackLogger0, classLoader0, permissions0);
      Object[] objectArray0 = new Object[8];
      MethodKey methodKey0 = new MethodKey("java.lang.Object", objectArray0);
      introspector0.getConstructor(methodKey0);
      ClassLoader classLoader1 = classLoader0.getParent();
      introspector0.setLoader(classLoader1);
      assertFalse(classLoader0.equals((Object)classLoader1));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger("java.lang.Object");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = Permissions.DEFAULT;
      Introspector introspector0 = new Introspector(jdk13LumberjackLogger0, classLoader0, permissions0);
      Class<String> class0 = String.class;
      MethodKey methodKey0 = new MethodKey("java.lang.Object", (Class<?>[]) null);
      introspector0.getConstructor(class0, methodKey0);
      ClassLoader classLoader1 = classLoader0.getParent();
      introspector0.setLoader(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("Za1H");
      Permissions permissions0 = Permissions.DEFAULT;
      Introspector introspector0 = new Introspector(jdk14Logger0, (ClassLoader) null, permissions0);
      introspector0.setLoader((ClassLoader) null);
      Class<?> class0 = introspector0.getClassByName("org.apache.commons.jexl3.internal.introspection.ClassMap");
      assertFalse(class0.isArray());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = Permissions.DEFAULT;
      Introspector introspector0 = new Introspector((Log) null, classLoader0, permissions0);
      introspector0.setLoader(classLoader0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleLog simpleLog0 = new SimpleLog("java.lang.Integer");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector(simpleLog0, classLoader0);
      Object[] objectArray0 = new Object[5];
      simpleLog0.setLevel(2);
      Class<?> class0 = introspector0.getClassByName("java.lang.Integer");
      MethodKey methodKey0 = new MethodKey("j[F;Z<l1[wM@", objectArray0);
      Constructor<?> constructor0 = introspector0.getConstructor(class0, methodKey0);
      assertNull(constructor0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("NH;@`dp");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = new Permissions();
      Introspector introspector0 = new Introspector(jdk14Logger0, classLoader0, permissions0);
      Class<MethodKey> class0 = MethodKey.class;
      Class<Object> class1 = Object.class;
      String[] stringArray0 = introspector0.getMethodNames(class1);
      MethodKey methodKey0 = new MethodKey("org.apache.commons.jexl3.internal.introspection.Introspector$CacheMiss", stringArray0);
      Constructor<?> constructor0 = introspector0.getConstructor(class0, methodKey0);
      assertNull(constructor0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleLog simpleLog0 = new SimpleLog("java.lang.Integer");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector(simpleLog0, classLoader0);
      Object[] objectArray0 = new Object[5];
      MethodKey methodKey0 = new MethodKey("java.lang.Integer", objectArray0);
      Class<?> class0 = introspector0.getClassByName("java.lang.Integer");
      Constructor<?> constructor0 = introspector0.getConstructor(class0, methodKey0);
      assertNull(constructor0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger("java.lang.Object");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = Permissions.DEFAULT;
      Introspector introspector0 = new Introspector(jdk13LumberjackLogger0, classLoader0, permissions0);
      Class<String> class0 = String.class;
      MethodKey methodKey0 = new MethodKey("java.lang.Object", (Class<?>[]) null);
      introspector0.getConstructor(class0, methodKey0);
      Constructor<?> constructor0 = introspector0.getConstructor(class0, methodKey0);
      assertFalse(constructor0.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("oW#7m6Ab%agz&S?3+D?");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = Permissions.DEFAULT;
      Introspector introspector0 = new Introspector(jdk14Logger0, classLoader0, permissions0);
      Method[] methodArray0 = introspector0.getMethods((Class<?>) null, "cacheMiss()");
      assertNull(methodArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger("java.lang.Object");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = Permissions.DEFAULT;
      Introspector introspector0 = new Introspector(jdk13LumberjackLogger0, classLoader0, permissions0);
      Class<Object> class0 = Object.class;
      introspector0.getMethods(class0, "java.lang.Object");
      Method[] methodArray0 = introspector0.getMethods(class0, ".");
      assertNull(methodArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("oW#7m6Ab%agz&S?3+D?");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = Permissions.DEFAULT;
      Introspector introspector0 = new Introspector(jdk14Logger0, classLoader0, permissions0);
      String[] stringArray0 = introspector0.getMethodNames((Class<?>) null);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<ClassMap>[] classArray0 = (Class<ClassMap>[]) Array.newInstance(Class.class, 8);
      Introspector introspector0 = new Introspector((Log) null, classLoader0);
      String[] stringArray0 = introspector0.getFieldNames(classArray0[3]);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = new Permissions();
      Method method0 = ClassMap.cacheMiss();
      Introspector introspector0 = new Introspector(noOpLog0, classLoader0, permissions0);
      Class<String> class0 = String.class;
      MethodKey methodKey0 = new MethodKey(method0);
      Method method1 = introspector0.getMethod(class0, methodKey0);
      assertNull(method1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("Za1H");
      Permissions permissions0 = Permissions.DEFAULT;
      Introspector introspector0 = new Introspector(jdk14Logger0, (ClassLoader) null, permissions0);
      Class<Integer> class0 = Integer.class;
      Method method0 = ClassMap.cacheMiss();
      MethodKey methodKey0 = new MethodKey(method0);
      introspector0.getMethod(class0, methodKey0);
      introspector0.setLoader((ClassLoader) null);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = Permissions.DEFAULT;
      Introspector introspector0 = new Introspector((Log) null, classLoader0, permissions0);
      Class<Object> class0 = Object.class;
      Method method0 = ClassMap.cacheMiss();
      MethodKey methodKey0 = new MethodKey(method0);
      Method method1 = introspector0.getMethod(class0, methodKey0);
      assertNull(method1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector(noOpLog0, classLoader0);
      Class<?> class0 = introspector0.getClassByName("q?Pi!#(k;{");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger("java.lang.Object");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = Permissions.DEFAULT;
      Introspector introspector0 = new Introspector(jdk13LumberjackLogger0, classLoader0, permissions0);
      Class<ClassMap> class0 = ClassMap.class;
      Method method0 = introspector0.getMethod((Class<?>) class0, "java.lang.Object", (Object[]) null);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector(noOpLog0, classLoader0);
      Class<Object> class0 = Object.class;
      Field field0 = introspector0.getField(class0, "org.apachecommons.logging.impl.AvalonLogger");
      assertNull(field0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = new Permissions();
      Introspector introspector0 = new Introspector((Log) null, classLoader0, permissions0);
      ClassLoader classLoader1 = introspector0.getLoader();
      assertSame(classLoader0, classLoader1);
  }
}
