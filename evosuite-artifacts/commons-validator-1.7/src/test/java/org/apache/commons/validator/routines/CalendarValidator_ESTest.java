/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 15:53:48 GMT 2022
 */

package org.apache.commons.validator.routines;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.text.Format;
import java.text.NumberFormat;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.validator.routines.CalendarValidator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CalendarValidator_ESTest extends CalendarValidator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      calendarValidator0.validate("English", (String) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Locale locale0 = new Locale("IN'R?KDqs.nmk$c");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("3", locale0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      calendarValidator0.validate("Thursday, January 1, 1970", locale0, timeZone0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Locale locale0 = new Locale("IN'R?KDqnmk$c");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("3", locale0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      calendarValidator0.validate("3", "3", timeZone0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.GERMANY;
      calendarValidator0.validate(":", ":", locale0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, (-1110));
      calendarValidator0.validate("?&.", "?&.");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, (-2024));
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      calendarValidator0.processParsedValue(mockSimpleDateFormat0, mockSimpleDateFormat0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0);
      calendarValidator0.compareYears(mockGregorianCalendar0, mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(0, 0, 0, 1322, 0, 0);
      calendarValidator0.compareYears(mockGregorianCalendar0, mockGregorianCalendar1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1731, 2517, 1731);
      Locale locale0 = Locale.CANADA;
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(locale0);
      calendarValidator0.compareYears(mockGregorianCalendar0, mockGregorianCalendar1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 37);
      assertFalse(calendarValidator0.isStrict());
      assertNotNull(calendarValidator0);
      
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(723, 0, 570, 570, 0, 11);
      assertNotNull(mockGregorianCalendar1);
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertFalse(calendarValidator0.isStrict());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-39300011989000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=724,MONTH=7,WEEK_OF_YEAR=34,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=228,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=0,SECOND=11,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals(1, int0);
      assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      assertTrue(calendarValidator0.isStrict());
      assertNotNull(calendarValidator0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(5, 5, 14, 14, 0, 3);
      assertNotNull(mockGregorianCalendar0);
      
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar1);
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
      assertTrue(calendarValidator0.isStrict());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-61995319197000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=5,MONTH=5,WEEK_OF_YEAR=25,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=165,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=0,SECOND=3,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals((-1), int0);
      assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      assertTrue(calendarValidator0.isStrict());
      assertNotNull(calendarValidator0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertNotNull(calendar0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1092), 1, 1);
      assertNotNull(mockGregorianCalendar0);
      assertFalse(mockGregorianCalendar0.equals((Object)calendar0));
      
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 0);
      assertTrue(calendarValidator0.isStrict());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-96625612800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1093,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=32,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, int0);
      assertFalse(calendar0.equals((Object)mockGregorianCalendar0));
      assertFalse(mockGregorianCalendar0.equals((Object)calendar0));
      assertNotSame(calendar0, mockGregorianCalendar0);
      assertNotSame(mockGregorianCalendar0, calendar0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertTrue(calendar0.isLenient());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertNotNull(calendar0);
      
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 2649);
      assertTrue(calendarValidator0.isStrict());
      assertNotNull(calendarValidator0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4660), (-4660), 0);
      assertNotNull(mockGregorianCalendar0);
      assertFalse(mockGregorianCalendar0.equals((Object)calendar0));
      
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 1739);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertTrue(calendar0.isLenient());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendarValidator0.isStrict());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-221480784000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=5050,MONTH=7,WEEK_OF_YEAR=35,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=243,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals((-1), int0);
      assertFalse(calendar0.equals((Object)mockGregorianCalendar0));
      assertFalse(mockGregorianCalendar0.equals((Object)calendar0));
      assertNotSame(calendar0, mockGregorianCalendar0);
      assertNotSame(mockGregorianCalendar0, calendar0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      assertTrue(calendarValidator0.isStrict());
      assertNotNull(calendarValidator0);
      
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      assertNotNull(localDateTime0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      assertNotNull(zoneOffset0);
      
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.ofLocal(localDateTime0, zoneOffset0, zoneOffset0);
      assertNotNull(zonedDateTime0);
      
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertNotNull(gregorianCalendar0);
      
      int int0 = calendarValidator0.compareQuarters((Calendar) gregorianCalendar0, (Calendar) gregorianCalendar0);
      assertTrue(calendarValidator0.isStrict());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      assertTrue(calendarValidator0.isStrict());
      assertNotNull(calendarValidator0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-1756), 12, (-1756), 12, 0, 0);
      assertNotNull(mockGregorianCalendar1);
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar1);
      assertTrue(calendarValidator0.isStrict());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-117702676800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1761,MONTH=2,WEEK_OF_YEAR=11,WEEK_OF_MONTH=3,DAY_OF_MONTH=11,DAY_OF_YEAR=71,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=0,HOUR_OF_DAY=12,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertEquals(1, int0);
      assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      assertTrue(calendarValidator0.isStrict());
      assertNotNull(calendarValidator0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 2895, 13);
      assertNotNull(mockGregorianCalendar0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("e@Phh%`ikRc");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertNotNull(calendar0);
      assertFalse(calendar0.equals((Object)mockGregorianCalendar0));
      assertNotSame(calendar0, mockGregorianCalendar0);
      
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, calendar0);
      assertTrue(calendarValidator0.isStrict());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-54142905600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=254,MONTH=3,WEEK_OF_YEAR=15,WEEK_OF_MONTH=3,DAY_OF_MONTH=13,DAY_OF_YEAR=103,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals((-1), int0);
      assertFalse(mockGregorianCalendar0.equals((Object)calendar0));
      assertFalse(calendar0.equals((Object)mockGregorianCalendar0));
      assertNotSame(mockGregorianCalendar0, calendar0);
      assertNotSame(calendar0, mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      assertTrue(calendarValidator0.isStrict());
      assertNotNull(calendarValidator0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 0, 0, 0, 636);
      assertNotNull(mockGregorianCalendar0);
      
      int int0 = calendarValidator0.compareMonths(mockGregorianCalendar0, mockGregorianCalendar0);
      assertTrue(calendarValidator0.isStrict());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-61820285040000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=10,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=36,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      assertFalse(calendarValidator0.isStrict());
      assertNotNull(calendarValidator0);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertNotNull(calendar0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 910, 0);
      assertNotNull(mockGregorianCalendar0);
      assertFalse(mockGregorianCalendar0.equals((Object)calendar0));
      
      int int0 = calendarValidator0.compareMonths(calendar0, mockGregorianCalendar0);
      assertFalse(calendarValidator0.isStrict());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-59679676800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=78,MONTH=9,WEEK_OF_YEAR=44,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=304,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, int0);
      assertFalse(calendar0.equals((Object)mockGregorianCalendar0));
      assertFalse(mockGregorianCalendar0.equals((Object)calendar0));
      assertNotSame(calendar0, mockGregorianCalendar0);
      assertNotSame(mockGregorianCalendar0, calendar0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      assertTrue(calendarValidator0.isStrict());
      assertNotNull(calendarValidator0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1888, 1888, 1888);
      assertNotNull(mockGregorianCalendar0);
      
      mockGregorianCalendar0.set(1888, 1104, 1888, 1888, 1888);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1888,MONTH=1104,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1888,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=1888,MINUTE=1888,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar1);
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      
      int int0 = calendarValidator0.compareMonths(mockGregorianCalendar0, mockGregorianCalendar1);
      assertTrue(calendarValidator0.isStrict());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=485479680000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1985,MONTH=4,WEEK_OF_YEAR=21,WEEK_OF_MONTH=4,DAY_OF_MONTH=20,DAY_OF_YEAR=140,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=28,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals((-1), int0);
      assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      assertTrue(calendarValidator0.isStrict());
      assertNotNull(calendarValidator0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(14, 0, 14);
      assertNotNull(mockGregorianCalendar1);
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
      assertTrue(calendarValidator0.isStrict());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-61724419200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=14,MONTH=0,WEEK_OF_YEAR=3,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=14,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals(1, int0);
      assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      assertTrue(calendarValidator0.isStrict());
      assertNotNull(calendarValidator0);
      
      ZoneId zoneId0 = ZoneId.systemDefault();
      assertNotNull(zoneId0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = new Locale("kvN}T$OA~", "org.apache.commons.validator.routines.CalendarValidator", "org.apache.commons.validator.routines.CalendarValidator");
      assertEquals("ORG.APACHE.COMMONS.VALIDATOR.ROUTINES.CALENDARVALIDATOR", locale0.getCountry());
      assertEquals("kvn}t$oa~_ORG.APACHE.COMMONS.VALIDATOR.ROUTINES.CALENDARVALIDATOR_org.apache.commons.validator.routines.CalendarValidator", locale0.toString());
      assertEquals("org.apache.commons.validator.routines.CalendarValidator", locale0.getVariant());
      assertEquals("kvn}t$oa~", locale0.getLanguage());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      assertNotNull(mockGregorianCalendar0);
      
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-3037), (-3037), (-3037));
      assertNotNull(mockGregorianCalendar1);
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
      assertTrue(calendarValidator0.isStrict());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ORG.APACHE.COMMONS.VALIDATOR.ROUTINES.CALENDARVALIDATOR", locale0.getCountry());
      assertEquals("kvn}t$oa~_ORG.APACHE.COMMONS.VALIDATOR.ROUTINES.CALENDARVALIDATOR_org.apache.commons.validator.routines.CalendarValidator", locale0.toString());
      assertEquals("org.apache.commons.validator.routines.CalendarValidator", locale0.getVariant());
      assertEquals("kvn}t$oa~", locale0.getLanguage());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-166257014400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=3300,MONTH=7,WEEK_OF_YEAR=32,WEEK_OF_MONTH=2,DAY_OF_MONTH=7,DAY_OF_YEAR=219,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals((-1), int0);
      assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 1384);
      assertFalse(calendarValidator0.isStrict());
      assertNotNull(calendarValidator0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(241, "\"EHi=FWV");
      assertEquals("\"EHi=FWV", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(241, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=\"EHi=FWV,offset=241,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertNotNull(simpleTimeZone0);
      
      // Undeclared exception!
      try { 
        calendarValidator0.validate("\"EHi=FWV", (TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 1384
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 16);
      assertTrue(calendarValidator0.isStrict());
      assertNotNull(calendarValidator0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        calendarValidator0.validate("org.apache.commons.validator.routines.CalendarValidator", locale0, (TimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 16
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 4417);
      assertFalse(calendarValidator0.isStrict());
      assertNotNull(calendarValidator0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        calendarValidator0.validate("org.apache.commons.validator.routines.CalendarValidator", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 4417
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      assertTrue(calendarValidator0.isStrict());
      assertNotNull(calendarValidator0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "YjS:[ES0W4[ Afs(fE/");
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=YjS:[ES0W4[ Afs(fE/,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("YjS:[ES0W4[ Afs(fE/", simpleTimeZone0.getID());
      assertNotNull(simpleTimeZone0);
      
      // Undeclared exception!
      try { 
        calendarValidator0.validate("FN7", "FN7", (TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'N'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      assertTrue(calendarValidator0.isStrict());
      assertNotNull(calendarValidator0);
      
      Locale locale0 = new Locale("IN'R?KDqnmk$c");
      assertEquals("in'r?kdqnmk$c", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("in'r?kdqnmk$c", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("3", locale0);
      assertNotNull(mockSimpleDateFormat0);
      
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertEquals("in'r?kdqnmk$c", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("in'r?kdqnmk$c", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("3", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("3", mockSimpleDateFormat0.toPattern());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      // Undeclared exception!
      try { 
        calendarValidator0.validate("IN'R?KDqnmk$c", "IN'R?KDqnmk$c", locale0, timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'I'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      assertTrue(calendarValidator0.isStrict());
      assertNotNull(calendarValidator0);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        calendarValidator0.validate("#g\";-|", "]Sj :", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'j'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      assertTrue(calendarValidator0.isStrict());
      assertNotNull(calendarValidator0);
      
      // Undeclared exception!
      try { 
        calendarValidator0.validate("e$\"a -X.oxfqB~2_Z", "e$\"a -X.oxfqB~2_Z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'e'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 5);
      assertTrue(calendarValidator0.isStrict());
      assertNotNull(calendarValidator0);
      
      // Undeclared exception!
      try { 
        calendarValidator0.validate("TW9.},");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 5
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      assertTrue(calendarValidator0.isStrict());
      assertNotNull(calendarValidator0);
      
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      assertNotNull(mockDateFormat0);
      
      // Undeclared exception!
      try { 
        calendarValidator0.processParsedValue(mockDateFormat0, (Format) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.CalendarValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      assertTrue(calendarValidator0.isStrict());
      assertNotNull(calendarValidator0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      // Undeclared exception!
      try { 
        calendarValidator0.compareWeeks((Calendar) null, mockGregorianCalendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.AbstractCalendarValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      assertTrue(calendarValidator0.isStrict());
      assertNotNull(calendarValidator0);
      
      // Undeclared exception!
      try { 
        calendarValidator0.compareQuarters((Calendar) null, (Calendar) null, 1869);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.AbstractCalendarValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      assertTrue(calendarValidator0.isStrict());
      assertNotNull(calendarValidator0);
      
      Calendar calendar0 = MockCalendar.getInstance();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertNotNull(calendar0);
      
      calendar0.set(0, (-3847));
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=-3847,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      
      // Undeclared exception!
      try { 
        calendarValidator0.compareQuarters(calendar0, calendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid era
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      assertTrue(calendarValidator0.isStrict());
      assertNotNull(calendarValidator0);
      
      // Undeclared exception!
      try { 
        calendarValidator0.compareDates((Calendar) null, (Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.AbstractCalendarValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      // Undeclared exception!
      try { 
        CalendarValidator.adjustToTimeZone((Calendar) null, timeZone0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.CalendarValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      assertTrue(calendarValidator0.isStrict());
      assertNotNull(calendarValidator0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Calendar calendar0 = calendarValidator0.validate("[", "[", locale0, timeZone0);
      assertTrue(calendarValidator0.isStrict());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("GMT-18:00", timeZone0.getID());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT-18:00\",offset=-64800000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", calendar0.toString());
      assertFalse(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertNotNull(calendar0);
      
      int int0 = calendarValidator0.compareQuarters(calendar0, calendar0, 2);
      assertTrue(calendarValidator0.isStrict());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("GMT-18:00", timeZone0.getID());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertFalse(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=64800000,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT-18:00\",offset=-64800000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-64800000,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      assertTrue(calendarValidator0.isStrict());
      assertNotNull(calendarValidator0);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertNotNull(calendar0);
      
      calendar0.set(0, 1389);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1389,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      
      // Undeclared exception!
      try { 
        calendarValidator0.compareMonths(calendar0, calendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid era
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      assertTrue(calendarValidator0.isStrict());
      assertNotNull(calendarValidator0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertNotNull(decimalFormat0);
      
      // Undeclared exception!
      try { 
        calendarValidator0.processParsedValue((Object) null, decimalFormat0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.text.DecimalFormat cannot be cast to java.text.DateFormat
         //
         verifyException("org.apache.commons.validator.routines.CalendarValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      CalendarValidator.adjustToTimeZone(mockGregorianCalendar0, timeZone0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("GMT", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1072, "[h`3b251JpW{`wsrrNP");
      CalendarValidator.adjustToTimeZone(calendar0, simpleTimeZone0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=[h`3b251JpW{`wsrrNP,offset=1072,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      CalendarValidator calendarValidator0 = new CalendarValidator();
      int int0 = calendarValidator0.compareWeeks(calendar0, calendar0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Calendar calendar0 = calendarValidator0.validate("");
      assertNull(calendar0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1072, "[h`3b251JpW{`wsrrNP");
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Calendar calendar0 = calendarValidator0.validate("Gx'TS3d*bMu{", (String) null, (TimeZone) simpleTimeZone0);
      assertNull(calendar0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 1322, 0, 0);
      // Undeclared exception!
      try { 
        calendarValidator0.compareYears((Calendar) null, mockGregorianCalendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.AbstractCalendarValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-2983), (-3262), 619);
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      CalendarValidator calendarValidator0 = new CalendarValidator();
      // Undeclared exception!
      try { 
        calendarValidator0.compareMonths(calendar0, (Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.AbstractCalendarValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.CANADA;
      Calendar calendar0 = calendarValidator0.validate("", "org.apache.commons.validator.routines.CalendarValidator", locale0);
      assertNull(calendar0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = Locale.CANADA_FRENCH;
      Calendar calendar0 = calendarValidator0.validate("", locale0, (TimeZone) simpleTimeZone0);
      assertNull(calendar0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Calendar calendar0 = calendarValidator0.validate("", (TimeZone) simpleTimeZone0);
      assertNull(calendar0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      // Undeclared exception!
      try { 
        calendarValidator0.compareQuarters((Calendar) null, (Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.AbstractCalendarValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = Locale.CANADA_FRENCH;
      Calendar calendar0 = calendarValidator0.validate("", "GMT+00:00", locale0, (TimeZone) simpleTimeZone0);
      assertNull(calendar0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.PRC;
      Calendar calendar0 = calendarValidator0.validate("", locale0);
      assertNull(calendar0);
  }
}
