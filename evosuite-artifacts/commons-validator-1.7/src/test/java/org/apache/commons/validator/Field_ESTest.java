/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 15:40:00 GMT 2022
 */

package org.apache.commons.validator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.collections.FastHashMap;
import org.apache.commons.validator.Arg;
import org.apache.commons.validator.Field;
import org.apache.commons.validator.Msg;
import org.apache.commons.validator.ValidatorAction;
import org.apache.commons.validator.Var;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Field_ESTest extends Field_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Field field0 = new Field();
      FastHashMap fastHashMap0 = field0.hVars;
      Arg arg0 = new Arg();
      Map<String, Arg>[] mapArray0 = (Map<String, Arg>[]) Array.newInstance(Map.class, 13);
      mapArray0[0] = (Map<String, Arg>) fastHashMap0;
      mapArray0[4] = (Map<String, Arg>) fastHashMap0;
      field0.args = mapArray0;
      arg0.setKey("var:");
      field0.addArg(arg0);
      assertEquals(0, arg0.getPosition());
      
      Arg arg1 = new Arg();
      arg1.setKey("var:");
      field0.addArg(arg1);
      assertEquals(5, arg1.getPosition());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Field field0 = new Field();
      Arg arg0 = new Arg();
      arg0.setKey("[]");
      arg0.setPosition(0);
      field0.addArg(arg0);
      assertEquals(0, field0.getFieldOrder());
      assertEquals(0, field0.getPage());
      assertTrue(field0.isClientValidation());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Field field0 = new Field();
      field0.indexedListProperty = "  Using converter ";
      try { 
        field0.getIndexedProperty((Object) field0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown property '  Using converter ' on class 'class org.apache.commons.validator.Field'
         //
         verifyException("org.apache.commons.validator.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Field field0 = new Field();
      assertTrue(field0.isClientValidation());
      
      field0.setClientValidation(false);
      boolean boolean0 = field0.isClientValidation();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Field field0 = new Field();
      field0.addVar("", "", "");
      String string0 = field0.getVarValue("");
      assertEquals("", string0);
      assertEquals(0, field0.getPage());
      assertEquals(0, field0.getFieldOrder());
      assertTrue(field0.isClientValidation());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Field field0 = new Field();
      field0.hVars = null;
      field0.getVarMap();
      assertTrue(field0.isClientValidation());
      assertEquals(0, field0.getPage());
      assertEquals(0, field0.getFieldOrder());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Field field0 = new Field();
      field0.getVarMap();
      assertEquals(0, field0.getPage());
      assertEquals(0, field0.getFieldOrder());
      assertTrue(field0.isClientValidation());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Field field0 = new Field();
      field0.addVar("tL](j{T", "  key=", "org.apache.commons.validator.ValidatorResults");
      field0.getVarMap();
      assertTrue(field0.isClientValidation());
      assertEquals(0, field0.getPage());
      assertEquals(0, field0.getFieldOrder());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Field field0 = new Field();
      field0.addVar("~", "~", "~");
      Var var0 = field0.getVar("~");
      assertNotNull(var0);
      assertEquals("~", var0.getValue());
      assertEquals("~", var0.getJsType());
      assertTrue(field0.isClientValidation());
      assertEquals(0, field0.getPage());
      assertEquals(0, field0.getFieldOrder());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Field field0 = new Field();
      field0.property = "org.apache.commons.collections.FastHashMap";
      String string0 = field0.getProperty();
      assertTrue(field0.isClientValidation());
      assertEquals("org.apache.commons.collections.FastHashMap", string0);
      assertNotNull(string0);
      assertEquals(0, field0.getPage());
      assertEquals(0, field0.getFieldOrder());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Field field0 = new Field();
      field0.property = "";
      String string0 = field0.getProperty();
      assertEquals("", string0);
      assertEquals(0, field0.getPage());
      assertTrue(field0.isClientValidation());
      assertEquals(0, field0.getFieldOrder());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Field field0 = new Field();
      field0.setPage(10);
      int int0 = field0.getPage();
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Field field0 = new Field();
      field0.setPage((-1));
      int int0 = field0.getPage();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Field field0 = new Field();
      field0.hMsgs = null;
      field0.getMsgMap();
      assertEquals(0, field0.getFieldOrder());
      assertTrue(field0.isClientValidation());
      assertEquals(0, field0.getPage());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Field field0 = new Field();
      field0.getMsgMap();
      assertTrue(field0.isClientValidation());
      assertEquals(0, field0.getPage());
      assertEquals(0, field0.getFieldOrder());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Field field0 = new Field();
      FastHashMap fastHashMap0 = field0.hMsgs;
      Integer integer0 = new Integer((-2068));
      fastHashMap0.put(integer0, (Object) null);
      field0.getMsgMap();
      assertEquals(0, field0.getPage());
      assertTrue(field0.isClientValidation());
      assertEquals(0, field0.getFieldOrder());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Field field0 = new Field();
      Msg msg0 = new Msg();
      msg0.setKey("G' LLTkp,");
      field0.addMsg(msg0);
      String string0 = field0.getMsg((String) null);
      assertEquals(0, field0.getFieldOrder());
      assertEquals(0, field0.getPage());
      assertTrue(field0.isClientValidation());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Field field0 = new Field();
      Msg msg0 = new Msg();
      msg0.name = "[]";
      field0.addMsg(msg0);
      Msg msg1 = field0.getMessage("[]");
      assertTrue(field0.isClientValidation());
      assertEquals(0, field0.getPage());
      assertEquals(0, field0.getFieldOrder());
      assertNotNull(msg1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Field field0 = new Field();
      Msg msg0 = new Msg();
      msg0.name = "[]";
      msg0.setResource(false);
      field0.addMsg(msg0);
      Msg msg1 = field0.getMessage("[]");
      assertEquals(0, field0.getFieldOrder());
      assertEquals(0, field0.getPage());
      assertTrue(field0.isClientValidation());
      assertNotNull(msg1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Field field0 = new Field();
      field0.setProperty("");
      String string0 = field0.getKey();
      assertEquals(0, field0.getFieldOrder());
      assertEquals(0, field0.getPage());
      assertTrue(field0.isClientValidation());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Field field0 = new Field();
      field0.setIndexedProperty("\t\tpage = ");
      String string0 = field0.getIndexedProperty();
      assertEquals(0, field0.getFieldOrder());
      assertEquals(0, field0.getPage());
      assertTrue(field0.isClientValidation());
      assertEquals("\t\tpage = ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Field field0 = new Field();
      field0.setIndexedProperty("");
      String string0 = field0.getIndexedProperty();
      assertEquals("", string0);
      assertEquals(0, field0.getPage());
      assertEquals(0, field0.getFieldOrder());
      assertTrue(field0.isClientValidation());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Field field0 = new Field();
      field0.setIndexedListProperty("\t\tVars:\n");
      field0.getIndexedListProperty();
      assertTrue(field0.isIndexed());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Field field0 = new Field();
      field0.setIndexedListProperty("");
      String string0 = field0.getIndexedListProperty();
      assertEquals("", string0);
      assertEquals(0, field0.getFieldOrder());
      assertEquals(0, field0.getPage());
      assertTrue(field0.isClientValidation());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Field field0 = new Field();
      field0.setFieldOrder(1997);
      int int0 = field0.getFieldOrder();
      assertEquals(1997, int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Field field0 = new Field();
      field0.setFieldOrder((-899));
      int int0 = field0.getFieldOrder();
      assertEquals((-899), int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Field field0 = new Field();
      field0.setDepends("[]");
      String string0 = field0.getDepends();
      assertTrue(field0.isClientValidation());
      assertEquals(0, field0.getFieldOrder());
      assertNotNull(string0);
      assertEquals(0, field0.getPage());
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Field field0 = new Field();
      field0.setDepends("");
      String string0 = field0.getDepends();
      assertNotNull(string0);
      assertEquals(0, field0.getFieldOrder());
      assertTrue(field0.isClientValidation());
      assertEquals("", string0);
      assertEquals(0, field0.getPage());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Field field0 = new Field();
      FastHashMap fastHashMap0 = field0.hVars;
      Arg arg0 = new Arg();
      Map<String, Arg>[] mapArray0 = (Map<String, Arg>[]) Array.newInstance(Map.class, 6);
      mapArray0[0] = (Map<String, Arg>) fastHashMap0;
      arg0.resource = false;
      mapArray0[5] = (Map<String, Arg>) fastHashMap0;
      field0.args = mapArray0;
      arg0.setKey("var:");
      field0.addArg(arg0);
      assertEquals(0, arg0.getPosition());
      
      field0.getArg("${Var:", 5);
      assertTrue(field0.isClientValidation());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Field field0 = new Field();
      Arg arg0 = new Arg();
      arg0.setResource(false);
      arg0.setPosition(964);
      arg0.key = "mCT#Bq2s0M&6S$nDy";
      field0.addArg(arg0);
      assertEquals(964, arg0.getPosition());
      
      field0.getArg(964);
      assertEquals(0, field0.getFieldOrder());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Field field0 = new Field();
      Arg arg0 = new Arg();
      arg0.setKey("var:");
      field0.addArg(arg0);
      assertEquals(0, arg0.getPosition());
      
      field0.getArg(0);
      assertEquals(0, field0.getFieldOrder());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Field field0 = new Field();
      field0.depends = ":?Z9RX;";
      HashMap<String, ValidatorAction> hashMap0 = new HashMap<String, ValidatorAction>();
      // Undeclared exception!
      try { 
        field0.validate((Map<String, Object>) null, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Field field0 = new Field();
      field0.setDepends("Ytpd9,A:");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        field0.validate(hashMap0, (Map<String, ValidatorAction>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Field field0 = new Field();
      field0.setDepends("ZX*v/J7K9=dPN");
      FastHashMap fastHashMap0 = new FastHashMap();
      fastHashMap0.put("ZX*v/J7K9=dPN", field0);
      // Undeclared exception!
      try { 
        field0.validate(fastHashMap0, fastHashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.validator.Field cannot be cast to org.apache.commons.validator.ValidatorAction
         //
         verifyException("org.apache.commons.validator.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Field field0 = new Field();
      // Undeclared exception!
      try { 
        field0.setDepends((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Field field0 = new Field();
      FastHashMap fastHashMap0 = field0.hMsgs;
      // Undeclared exception!
      try { 
        field0.process(fastHashMap0, (Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Field field0 = new Field();
      FastHashMap fastHashMap0 = new FastHashMap();
      fastHashMap0.put(field0, (Object) null);
      // Undeclared exception!
      try { 
        field0.process(fastHashMap0, fastHashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.validator.Field cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.validator.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Field field0 = new Field();
      field0.hVars = null;
      // Undeclared exception!
      try { 
        field0.getVars();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Field field0 = new Field();
      field0.hVars = null;
      // Undeclared exception!
      try { 
        field0.getVarValue("pxZng7aG");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Field field0 = new Field();
      field0.hVars = null;
      // Undeclared exception!
      try { 
        field0.getVar("[]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Field field0 = new Field();
      FastHashMap fastHashMap0 = field0.hVars;
      Arg arg0 = new Arg();
      arg0.setName("[]");
      Map<String, Arg>[] mapArray0 = (Map<String, Arg>[]) Array.newInstance(Map.class, 6);
      mapArray0[0] = (Map<String, Arg>) fastHashMap0;
      field0.args = mapArray0;
      arg0.setKey("var:");
      field0.addArg(arg0);
      // Undeclared exception!
      try { 
        field0.getVar("[]");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.validator.Arg cannot be cast to org.apache.commons.validator.Var
         //
         verifyException("org.apache.commons.validator.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Field field0 = new Field();
      field0.hMsgs = null;
      // Undeclared exception!
      try { 
        field0.getMsg("\t\tkey = null\n\t\tproperty = null\n\t\tindexedProperty = null\n\t\tindexedListProperty = null\n\t\tdepends = null\n\t\tpage = 0\n\t\tfieldOrder = 0\n\t\tVars:\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Field field0 = new Field();
      FastHashMap fastHashMap0 = field0.hMsgs;
      fastHashMap0.put((Object) null, field0);
      // Undeclared exception!
      try { 
        field0.getMsg((String) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.validator.Field cannot be cast to org.apache.commons.validator.Msg
         //
         verifyException("org.apache.commons.validator.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Field field0 = new Field();
      field0.hMsgs = null;
      // Undeclared exception!
      try { 
        field0.getMessages();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Field field0 = new Field();
      field0.hMsgs = null;
      // Undeclared exception!
      try { 
        field0.getMessage("\t\tVars:\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Field field0 = new Field();
      FastHashMap fastHashMap0 = field0.hMsgs;
      fastHashMap0.put("", field0);
      // Undeclared exception!
      try { 
        field0.getMessage("");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.validator.Field cannot be cast to org.apache.commons.validator.Msg
         //
         verifyException("org.apache.commons.validator.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Field field0 = new Field();
      FastHashMap fastHashMap0 = new FastHashMap();
      field0.setIndexedListProperty("2L{3N>5&^*AJi|.");
      // Undeclared exception!
      try { 
        field0.getIndexedProperty((Object) fastHashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null property value for '2L{3N>5&^*AJi|.' on bean class 'class org.apache.commons.collections.FastHashMap'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Field field0 = new Field();
      // Undeclared exception!
      try { 
        field0.getIndexedProperty((Object) field0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No name specified for bean class 'class org.apache.commons.validator.Field'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Field field0 = new Field();
      FastHashMap fastHashMap0 = field0.hMsgs;
      Map<String, Arg>[] mapArray0 = (Map<String, Arg>[]) Array.newInstance(Map.class, 6);
      mapArray0[0] = (Map<String, Arg>) fastHashMap0;
      field0.args = mapArray0;
      // Undeclared exception!
      try { 
        field0.getArgs((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Field field0 = new Field();
      FastHashMap fastHashMap0 = field0.hMsgs;
      Map<String, Arg>[] mapArray0 = (Map<String, Arg>[]) Array.newInstance(Map.class, 6);
      mapArray0[1] = (Map<String, Arg>) fastHashMap0;
      field0.args = mapArray0;
      fastHashMap0.put((Object) null, "");
      // Undeclared exception!
      try { 
        field0.getArgs((String) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.apache.commons.validator.Arg
         //
         verifyException("org.apache.commons.validator.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Field field0 = new Field();
      FastHashMap fastHashMap0 = field0.hVars;
      Map<String, Arg>[] mapArray0 = (Map<String, Arg>[]) Array.newInstance(Map.class, 6);
      mapArray0[5] = (Map<String, Arg>) fastHashMap0;
      field0.args = mapArray0;
      fastHashMap0.put("${Var:", fastHashMap0);
      // Undeclared exception!
      try { 
        field0.getArg("${Var:", 5);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections.FastHashMap cannot be cast to org.apache.commons.validator.Arg
         //
         verifyException("org.apache.commons.validator.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Field field0 = new Field();
      // Undeclared exception!
      try { 
        field0.getArg("\"$\"Q&G]hxC", (-1782));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1782
         //
         verifyException("org.apache.commons.validator.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Field field0 = new Field();
      field0.args = null;
      // Undeclared exception!
      try { 
        field0.getArg(2100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Field field0 = new Field();
      // Undeclared exception!
      try { 
        field0.getArg((-131));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -131
         //
         verifyException("org.apache.commons.validator.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Field field0 = new Field();
      field0.hMsgs = null;
      // Undeclared exception!
      try { 
        field0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.util.ValidatorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Field field0 = new Field();
      FastHashMap fastHashMap0 = new FastHashMap();
      fastHashMap0.put(field0, (Object) null);
      field0.hVars = fastHashMap0;
      // Undeclared exception!
      try { 
        field0.clone();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.validator.Field cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.validator.util.ValidatorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Field field0 = new Field();
      // Undeclared exception!
      try { 
        field0.addVar((Var) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Field field0 = new Field();
      field0.hVars = null;
      // Undeclared exception!
      try { 
        field0.addVar(",", "  bundle=", "\t\tproperty = ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Field field0 = new Field();
      // Undeclared exception!
      try { 
        field0.addMsg((Msg) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Field field0 = new Field();
      field0.generateKey();
      assertEquals(0, field0.getPage());
      assertEquals(0, field0.getFieldOrder());
      assertTrue(field0.isClientValidation());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Field field0 = new Field();
      field0.indexedListProperty = ",";
      field0.generateKey();
      assertTrue(field0.isIndexed());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Field field0 = new Field();
      field0.setIndexedListProperty("Yj6");
      boolean boolean0 = field0.isIndexed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Field field0 = new Field();
      field0.isIndexed();
      assertTrue(field0.isClientValidation());
      assertEquals(0, field0.getFieldOrder());
      assertEquals(0, field0.getPage());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Field field0 = new Field();
      Arg arg0 = new Arg();
      arg0.key = "${var:${org.apache.commons.validator.Field.DEFAULT}";
      arg0.position = 2153;
      field0.addArg(arg0);
      assertEquals(2153, arg0.getPosition());
      
      field0.getArg("org.apache.commons.validator.Field.DEFAULT", 2153);
      assertTrue(field0.isClientValidation());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Field field0 = new Field();
      field0.getArg((String) null, 0);
      assertEquals(0, field0.getPage());
      assertEquals(0, field0.getFieldOrder());
      assertTrue(field0.isClientValidation());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Field field0 = new Field();
      field0.getVar("class");
      assertTrue(field0.isClientValidation());
      assertEquals(0, field0.getPage());
      assertEquals(0, field0.getFieldOrder());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Field field0 = new Field();
      String string0 = field0.getProperty();
      assertEquals(0, field0.getFieldOrder());
      assertNull(string0);
      assertTrue(field0.isClientValidation());
      assertEquals(0, field0.getPage());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Field field0 = new Field();
      String string0 = field0.getDepends();
      assertEquals(0, field0.getPage());
      assertNull(string0);
      assertEquals(0, field0.getFieldOrder());
      assertTrue(field0.isClientValidation());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Field field0 = new Field();
      field0.depends = "[]";
      assertFalse(field0.isIndexed());
      
      FastHashMap fastHashMap0 = field0.hMsgs;
      field0.validate(fastHashMap0, fastHashMap0);
      assertEquals(0, field0.getPage());
      assertTrue(field0.isClientValidation());
      assertEquals("[]", field0.getDepends());
      assertEquals(0, field0.getFieldOrder());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Field field0 = new Field();
      FastHashMap fastHashMap0 = new FastHashMap();
      field0.setIndexedListProperty("[]");
      field0.setDepends("[]");
      // Undeclared exception!
      try { 
        field0.validate(fastHashMap0, fastHashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Field field0 = new Field();
      FastHashMap fastHashMap0 = field0.hVars;
      field0.validate(fastHashMap0, fastHashMap0);
      assertEquals(0, field0.getFieldOrder());
      assertEquals(0, field0.getPage());
      assertTrue(field0.isClientValidation());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Field field0 = new Field();
      FastHashMap fastHashMap0 = new FastHashMap();
      fastHashMap0.put("", field0);
      field0.setIndexedListProperty("");
      try { 
        field0.getIndexedProperty((Object) fastHashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null is not indexed
         //
         verifyException("org.apache.commons.validator.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Field field0 = new Field();
      FastHashMap fastHashMap0 = new FastHashMap();
      field0.setIndexedListProperty("");
      // Undeclared exception!
      try { 
        field0.getIndexedProperty((Object) fastHashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Field field0 = new Field();
      field0.addVar("~l", "~l", "~l");
      String string0 = field0.toString();
      assertEquals("\t\tkey = null\n\t\tproperty = null\n\t\tindexedProperty = null\n\t\tindexedListProperty = null\n\t\tdepends = null\n\t\tpage = 0\n\t\tfieldOrder = 0\n\t\tVars:\n\t\t\t~l=Var: name=~l  value=~l  resource=false  jsType=~l\n\n", string0);
      assertTrue(field0.isClientValidation());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Field field0 = new Field();
      field0.hVars = null;
      String string0 = field0.toString();
      assertTrue(field0.isClientValidation());
      assertEquals("\t\tkey = null\n\t\tproperty = null\n\t\tindexedProperty = null\n\t\tindexedListProperty = null\n\t\tdepends = null\n\t\tpage = 0\n\t\tfieldOrder = 0\n", string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Field field0 = new Field();
      Arg arg0 = new Arg();
      arg0.key = "${var:${org.apache.commons.validator.Field.DEFAULT}";
      arg0.position = 2153;
      field0.addArg(arg0);
      assertEquals(2153, arg0.getPosition());
      
      field0.clone();
      assertTrue(field0.isClientValidation());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Field field0 = new Field();
      field0.setDepends("[]");
      boolean boolean0 = field0.isDependency("[]");
      assertTrue(field0.isClientValidation());
      assertEquals("[]", field0.getDepends());
      assertEquals(0, field0.getFieldOrder());
      assertEquals(0, field0.getPage());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Field field0 = new Field();
      boolean boolean0 = field0.isDependency("org.apache.commons.validator.Arg");
      assertEquals(0, field0.getPage());
      assertTrue(field0.isClientValidation());
      assertFalse(boolean0);
      assertEquals(0, field0.getFieldOrder());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Field field0 = new Field();
      Field field1 = new Field();
      FastHashMap fastHashMap0 = field1.hVars;
      Map<String, Arg>[] mapArray0 = (Map<String, Arg>[]) Array.newInstance(Map.class, 3);
      mapArray0[0] = (Map<String, Arg>) fastHashMap0;
      field0.args = mapArray0;
      fastHashMap0.put((Object) null, (Object) null);
      field0.process(fastHashMap0, fastHashMap0);
      assertTrue(field1.isClientValidation());
      assertFalse(field1.isIndexed());
      assertEquals(0, field1.getFieldOrder());
      assertEquals(0, field1.getPage());
      assertEquals(0, field0.getPage());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Field field0 = new Field();
      Arg arg0 = new Arg();
      arg0.setKey("[]");
      field0.addArg(arg0);
      assertEquals(0, arg0.getPosition());
      
      FastHashMap fastHashMap0 = new FastHashMap();
      fastHashMap0.put((Object) null, (Object) null);
      field0.process(fastHashMap0, fastHashMap0);
      assertEquals(0, field0.getFieldOrder());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Field field0 = new Field();
      FastHashMap fastHashMap0 = new FastHashMap();
      Msg msg0 = new Msg();
      fastHashMap0.put("[]", "[]");
      field0.addMsg(msg0);
      field0.process(fastHashMap0, fastHashMap0);
      assertEquals(0, field0.getPage());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Field field0 = new Field();
      Var var0 = new Var();
      Field field1 = new Field();
      FastHashMap fastHashMap0 = field1.hVars;
      field0.addVar(var0);
      fastHashMap0.put("Var: name=null  value=null  resource=false  jsType=null\n", "int");
      field0.process(fastHashMap0, fastHashMap0);
      assertNull(field0.getDepends());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Field field0 = new Field();
      field0.setIndexedListProperty("");
      boolean boolean0 = field0.isIndexed();
      assertEquals(0, field0.getFieldOrder());
      assertEquals(0, field0.getPage());
      assertTrue(field0.isClientValidation());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Field field0 = new Field();
      field0.indexedListProperty = "T@vvWm7)#-W!{Mrw=4E";
      field0.getKey();
      assertTrue(field0.isIndexed());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Field field0 = new Field();
      String string0 = field0.getKey();
      assertNull(string0);
      assertEquals(0, field0.getPage());
      assertEquals(0, field0.getFieldOrder());
      assertTrue(field0.isClientValidation());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Field field0 = new Field();
      field0.key = "~=";
      String string0 = field0.getKey();
      assertEquals("~=", string0);
      assertTrue(field0.isClientValidation());
      assertEquals(0, field0.getPage());
      assertEquals(0, field0.getFieldOrder());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Field field0 = new Field();
      field0.addVar("[]", "[]", "qHV#-{\"Jtkd");
      String string0 = field0.getVarValue("[]");
      assertTrue(field0.isClientValidation());
      assertEquals(0, field0.getFieldOrder());
      assertEquals(0, field0.getPage());
      assertNotNull(string0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Field field0 = new Field();
      String string0 = field0.getVarValue("int");
      assertTrue(field0.isClientValidation());
      assertEquals(0, field0.getPage());
      assertEquals(0, field0.getFieldOrder());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Field field0 = new Field();
      Map<String, Arg>[] mapArray0 = (Map<String, Arg>[]) Array.newInstance(Map.class, 6);
      field0.args = mapArray0;
      field0.getArgs("': ");
      assertEquals(0, field0.getPage());
      assertEquals(0, field0.getFieldOrder());
      assertTrue(field0.isClientValidation());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Field field0 = new Field();
      Arg[] argArray0 = field0.getArgs("': ");
      assertTrue(field0.isClientValidation());
      assertEquals(0, field0.getFieldOrder());
      assertEquals(0, field0.getPage());
      assertEquals(0, argArray0.length);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Field field0 = new Field();
      FastHashMap fastHashMap0 = field0.hVars;
      Map<String, Arg>[] mapArray0 = (Map<String, Arg>[]) Array.newInstance(Map.class, 6);
      mapArray0[5] = (Map<String, Arg>) fastHashMap0;
      field0.args = mapArray0;
      field0.getArg("${Var:", 5);
      assertEquals(0, field0.getPage());
      assertEquals(0, field0.getFieldOrder());
      assertTrue(field0.isClientValidation());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Field field0 = new Field();
      Map<String, Arg>[] mapArray0 = (Map<String, Arg>[]) Array.newInstance(Map.class, 6);
      field0.args = mapArray0;
      field0.getArg("fZ]:gS?", 5);
      assertTrue(field0.isClientValidation());
      assertEquals(0, field0.getPage());
      assertEquals(0, field0.getFieldOrder());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Field field0 = new Field();
      Arg arg0 = new Arg();
      arg0.setKey("[]");
      field0.addArg(arg0);
      assertEquals(0, arg0.getPosition());
      
      Arg arg1 = new Arg();
      arg1.setKey("[]");
      field0.addArg(arg1);
      assertEquals(1, arg1.getPosition());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Field field0 = new Field();
      Arg arg0 = new Arg();
      arg0.key = "~=";
      arg0.position = 2153;
      field0.addArg(arg0);
      // Undeclared exception!
      try { 
        field0.getArg((String) null, 2153);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Field field0 = new Field();
      FastHashMap fastHashMap0 = field0.hVars;
      Arg arg0 = new Arg();
      Map<String, Arg>[] mapArray0 = (Map<String, Arg>[]) Array.newInstance(Map.class, 6);
      mapArray0[0] = (Map<String, Arg>) fastHashMap0;
      field0.args = mapArray0;
      arg0.setKey("var:");
      field0.addArg(arg0);
      // Undeclared exception!
      try { 
        field0.getVarValue("org.apache.commons.validator.Field.DEFAULT");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.validator.Arg cannot be cast to org.apache.commons.validator.Var
         //
         verifyException("org.apache.commons.validator.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Field field0 = new Field();
      Arg arg0 = new Arg();
      arg0.key = "";
      field0.addArg(arg0);
      assertEquals(0, field0.getPage());
      assertEquals((-1), arg0.getPosition());
      assertEquals(0, field0.getFieldOrder());
      assertTrue(field0.isClientValidation());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Field field0 = new Field();
      Arg arg0 = new Arg();
      field0.addArg(arg0);
      assertEquals(0, field0.getPage());
      assertEquals(0, field0.getFieldOrder());
      assertTrue(field0.isClientValidation());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Field field0 = new Field();
      field0.addArg((Arg) null);
      assertTrue(field0.isClientValidation());
      assertEquals(0, field0.getFieldOrder());
      assertEquals(0, field0.getPage());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Field field0 = new Field();
      field0.getMsg("-bPsw;8|m");
      assertEquals(0, field0.getFieldOrder());
      assertEquals(0, field0.getPage());
      assertTrue(field0.isClientValidation());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Field field0 = new Field();
      field0.setDepends("\n");
      assertEquals("\n", field0.getDepends());
      assertEquals(0, field0.getPage());
      assertEquals(0, field0.getFieldOrder());
      assertTrue(field0.isClientValidation());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Field field0 = new Field();
      field0.getArg(40);
      assertEquals(0, field0.getFieldOrder());
      assertEquals(0, field0.getPage());
      assertTrue(field0.isClientValidation());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Field field0 = new Field();
      field0.setKey("[]");
      assertEquals(0, field0.getPage());
      assertTrue(field0.isClientValidation());
      assertEquals(0, field0.getFieldOrder());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Field field0 = new Field();
      int int0 = field0.getPage();
      assertEquals(0, int0);
      assertTrue(field0.isClientValidation());
      assertEquals(0, field0.getFieldOrder());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Field field0 = new Field();
      String string0 = field0.getIndexedListProperty();
      assertTrue(field0.isClientValidation());
      assertEquals(0, field0.getFieldOrder());
      assertEquals(0, field0.getPage());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Field field0 = new Field();
      field0.getVars();
      assertTrue(field0.isClientValidation());
      assertEquals(0, field0.getPage());
      assertEquals(0, field0.getFieldOrder());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Field field0 = new Field();
      field0.getMessages();
      assertTrue(field0.isClientValidation());
      assertEquals(0, field0.getPage());
      assertEquals(0, field0.getFieldOrder());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Field field0 = new Field();
      int int0 = field0.getFieldOrder();
      assertEquals(0, field0.getPage());
      assertEquals(0, int0);
      assertTrue(field0.isClientValidation());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Field field0 = new Field();
      field0.getMessage("B3EGnm` J}I");
      assertTrue(field0.isClientValidation());
      assertEquals(0, field0.getPage());
      assertEquals(0, field0.getFieldOrder());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Field field0 = new Field();
      FastHashMap fastHashMap0 = field0.hMsgs;
      field0.setDepends("[]");
      try { 
        field0.validate(fastHashMap0, fastHashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No ValidatorAction named [] found for field null
         //
         verifyException("org.apache.commons.validator.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Field field0 = new Field();
      String string0 = field0.getIndexedProperty();
      assertTrue(field0.isClientValidation());
      assertEquals(0, field0.getFieldOrder());
      assertNull(string0);
      assertEquals(0, field0.getPage());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Field field0 = new Field();
      boolean boolean0 = field0.isClientValidation();
      assertEquals(0, field0.getPage());
      assertTrue(boolean0);
      assertEquals(0, field0.getFieldOrder());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Field field0 = new Field();
      field0.getDependencyList();
      assertTrue(field0.isClientValidation());
      assertEquals(0, field0.getPage());
      assertEquals(0, field0.getFieldOrder());
  }
}
