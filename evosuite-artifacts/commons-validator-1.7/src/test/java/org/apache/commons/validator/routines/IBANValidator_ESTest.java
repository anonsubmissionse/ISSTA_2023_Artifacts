/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 15:48:43 GMT 2022
 */

package org.apache.commons.validator.routines;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.validator.routines.IBANValidator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IBANValidator_ESTest extends IBANValidator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IBANValidator.Validator[] iBANValidator_ValidatorArray0 = new IBANValidator.Validator[0];
      IBANValidator iBANValidator0 = new IBANValidator(iBANValidator_ValidatorArray0);
      // Undeclared exception!
      try { 
        iBANValidator0.setValidator("j[/?ygT`,", 0, "Ifu6$sE3n'JJ|kX");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid country Code; must be exactly 2 upper-case characters
         //
         verifyException("org.apache.commons.validator.routines.IBANValidator$Validator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IBANValidator iBANValidator0 = IBANValidator.getInstance();
      boolean boolean0 = iBANValidator0.hasValidator("01");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IBANValidator iBANValidator0 = new IBANValidator();
      boolean boolean0 = iBANValidator0.isValid("NLNLd{2}[A-Z]{4}d{10}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IBANValidator iBANValidator0 = new IBANValidator();
      IBANValidator.Validator iBANValidator_Validator0 = iBANValidator0.getValidator("ROROd{2}[A-Z]{4}[A-Z0-9]{16}");
      IBANValidator.Validator iBANValidator_Validator1 = iBANValidator0.setValidator(iBANValidator_Validator0);
      assertSame(iBANValidator_Validator1, iBANValidator_Validator0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IBANValidator iBANValidator0 = new IBANValidator();
      IBANValidator.Validator iBANValidator_Validator0 = iBANValidator0.setValidator("FI", (-1), "j[/?ygT`,");
      assertNotNull(iBANValidator_Validator0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IBANValidator iBANValidator0 = new IBANValidator();
      // Undeclared exception!
      try { 
        iBANValidator0.setValidator((IBANValidator.Validator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.IBANValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IBANValidator iBANValidator0 = new IBANValidator();
      // Undeclared exception!
      try { 
        iBANValidator0.setValidator((String) null, 68, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.IBANValidator$Validator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IBANValidator.Validator[] iBANValidator_ValidatorArray0 = new IBANValidator.Validator[7];
      IBANValidator iBANValidator0 = null;
      try {
        iBANValidator0 = new IBANValidator(iBANValidator_ValidatorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.IBANValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IBANValidator iBANValidator0 = IBANValidator.getInstance();
      IBANValidator.Validator iBANValidator_Validator0 = iBANValidator0.getValidator("y");
      assertNull(iBANValidator_Validator0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IBANValidator iBANValidator0 = IBANValidator.getInstance();
      IBANValidator.Validator iBANValidator_Validator0 = iBANValidator0.getValidator((String) null);
      assertNull(iBANValidator_Validator0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IBANValidator iBANValidator0 = new IBANValidator();
      boolean boolean0 = iBANValidator0.DEFAULT_IBAN_VALIDATOR.isValid("QAQAd{2}[A-Z]{4}[A-Z0-9]{21}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IBANValidator.Validator iBANValidator_Validator0 = null;
      try {
        iBANValidator_Validator0 = new IBANValidator.Validator("M", 925, "l8ML");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid country Code; must be exactly 2 upper-case characters
         //
         verifyException("org.apache.commons.validator.routines.IBANValidator$Validator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IBANValidator.Validator iBANValidator_Validator0 = null;
      try {
        iBANValidator_Validator0 = new IBANValidator.Validator("ESbd{22}", 570, "ESbd{22}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid country Code; must be exactly 2 upper-case characters
         //
         verifyException("org.apache.commons.validator.routines.IBANValidator$Validator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IBANValidator.Validator[] iBANValidator_ValidatorArray0 = new IBANValidator.Validator[0];
      IBANValidator iBANValidator0 = new IBANValidator(iBANValidator_ValidatorArray0);
      IBANValidator.Validator iBANValidator_Validator0 = iBANValidator0.setValidator("M", (-1), "'");
      assertNull(iBANValidator_Validator0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IBANValidator iBANValidator0 = IBANValidator.getInstance();
      // Undeclared exception!
      try { 
        iBANValidator0.setValidator((String) null, 2463, (String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The singleton validator cannot be modified
         //
         verifyException("org.apache.commons.validator.routines.IBANValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IBANValidator iBANValidator0 = new IBANValidator();
      IBANValidator.Validator iBANValidator_Validator0 = new IBANValidator.Validator("GR", 9, "GR");
      // Undeclared exception!
      try { 
        iBANValidator0.DEFAULT_IBAN_VALIDATOR.setValidator(iBANValidator_Validator0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The singleton validator cannot be modified
         //
         verifyException("org.apache.commons.validator.routines.IBANValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IBANValidator iBANValidator0 = new IBANValidator();
      IBANValidator.Validator iBANValidator_Validator0 = new IBANValidator.Validator("FG", 9, "FG");
      IBANValidator.Validator iBANValidator_Validator1 = iBANValidator0.setValidator(iBANValidator_Validator0);
      assertNull(iBANValidator_Validator1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IBANValidator iBANValidator0 = new IBANValidator();
      boolean boolean0 = iBANValidator0.isValid("0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IBANValidator iBANValidator0 = new IBANValidator();
      boolean boolean0 = iBANValidator0.hasValidator("IQIQd{2}[A-Z]{4}d{15}");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IBANValidator.Validator iBANValidator_Validator0 = null;
      try {
        iBANValidator_Validator0 = new IBANValidator.Validator("IL", 12, "SASAd{4}[A-Z0-9]{18}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // countryCode 'IL' does not agree with format: SASAd{4}[A-Z0-9]{18}
         //
         verifyException("org.apache.commons.validator.routines.IBANValidator$Validator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IBANValidator.Validator iBANValidator_Validator0 = null;
      try {
        iBANValidator_Validator0 = new IBANValidator.Validator("IL", (-1410), "SASAd{4}[A-Z0-9]{18}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid length parameter, must be in range 8 to 34 inclusive: -1410
         //
         verifyException("org.apache.commons.validator.routines.IBANValidator$Validator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IBANValidator.Validator iBANValidator_Validator0 = null;
      try {
        iBANValidator_Validator0 = new IBANValidator.Validator("PL", 873, "PL");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid length parameter, must be in range 8 to 34 inclusive: 873
         //
         verifyException("org.apache.commons.validator.routines.IBANValidator$Validator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IBANValidator.Validator iBANValidator_Validator0 = null;
      try {
        iBANValidator_Validator0 = new IBANValidator.Validator("9q", 1160, "9q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid country Code; must be exactly 2 upper-case characters
         //
         verifyException("org.apache.commons.validator.routines.IBANValidator$Validator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IBANValidator iBANValidator0 = new IBANValidator();
      IBANValidator.Validator[] iBANValidator_ValidatorArray0 = iBANValidator0.getDefaultValidators();
      assertEquals(77, iBANValidator_ValidatorArray0.length);
  }
}
