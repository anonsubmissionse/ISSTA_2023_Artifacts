/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 15:42:51 GMT 2022
 */

package org.apache.commons.validator.routines;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Locale;
import org.apache.commons.validator.routines.BigDecimalValidator;
import org.apache.commons.validator.routines.BigIntegerValidator;
import org.apache.commons.validator.routines.ByteValidator;
import org.apache.commons.validator.routines.CurrencyValidator;
import org.apache.commons.validator.routines.DoubleValidator;
import org.apache.commons.validator.routines.FloatValidator;
import org.apache.commons.validator.routines.IntegerValidator;
import org.apache.commons.validator.routines.LongValidator;
import org.apache.commons.validator.routines.PercentValidator;
import org.apache.commons.validator.routines.ShortValidator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractNumberValidator_ESTest extends AbstractNumberValidator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance();
      decimalFormat0.setMultiplier(1394);
      int int0 = currencyValidator0.determineScale(decimalFormat0);
      assertEquals(0, int0);
      assertEquals(1, currencyValidator0.getFormatType());
      assertTrue(currencyValidator0.isAllowFractions());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      DecimalFormat decimalFormat0 = (DecimalFormat)currencyValidator0.getFormat((Locale) null);
      int int0 = currencyValidator0.determineScale(decimalFormat0);
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ByteValidator byteValidator0 = ByteValidator.getInstance();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      boolean boolean0 = byteValidator0.maxValue(bigInteger0, bigDecimal0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator(false, true);
      boolean boolean0 = currencyValidator0.maxValue(0, 1);
      assertTrue(boolean0);
      assertTrue(currencyValidator0.isAllowFractions());
      assertEquals(1, currencyValidator0.getFormatType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = new BigIntegerValidator();
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean0 = bigIntegerValidator0.minValue(bigInteger0, 0);
      assertTrue(boolean0);
      assertFalse(bigIntegerValidator0.isAllowFractions());
      assertEquals(0, bigIntegerValidator0.getFormatType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      LongValidator longValidator0 = LongValidator.getInstance();
      boolean boolean0 = longValidator0.isInRange(bigInteger0, bigInteger0, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      Locale locale0 = Locale.UK;
      currencyValidator0.parse("", "(,~,?C[+.", locale0);
      assertEquals(1, currencyValidator0.getFormatType());
      assertTrue(currencyValidator0.isAllowFractions());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator();
      boolean boolean0 = shortValidator0.isAllowFractions();
      assertFalse(boolean0);
      assertEquals(0, shortValidator0.getFormatType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = BigDecimalValidator.getInstance();
      int int0 = bigDecimalValidator0.getFormatType();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator(false, (-3702));
      int int0 = integerValidator0.getFormatType();
      assertFalse(integerValidator0.isAllowFractions());
      assertEquals((-3702), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale locale0 = Locale.US;
      BigIntegerValidator bigIntegerValidator0 = BigIntegerValidator.getInstance();
      DecimalFormat decimalFormat0 = (DecimalFormat)bigIntegerValidator0.getFormat((String) null, locale0);
      assertTrue(decimalFormat0.isParseIntegerOnly());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = new BigIntegerValidator();
      // Undeclared exception!
      try { 
        bigIntegerValidator0.maxValue((Number) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.AbstractNumberValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator(false, 0);
      Locale locale0 = Locale.KOREAN;
      // Undeclared exception!
      try { 
        integerValidator0.isValid("org.apache.commons.validator.routines.AbstractNumberValidator", "org.apache.commons.validator.routines.AbstractNumberValidator", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple decimal separators in pattern \"org.apache.commons.validator.routines.AbstractNumberValidator\"
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      // Undeclared exception!
      try { 
        currencyValidator0.isInRange((Number) null, (Number) null, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.AbstractNumberValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      // Undeclared exception!
      try { 
        shortValidator0.getFormat("org.apache.commons.validator.routines.AbstractNumberValidator", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple decimal separators in pattern \"org.apache.commons.validator.routines.AbstractNumberValidator\"
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleValidator doubleValidator0 = new DoubleValidator();
      // Undeclared exception!
      try { 
        doubleValidator0.determineScale((NumberFormat) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.AbstractNumberValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FloatValidator floatValidator0 = new FloatValidator(false, 37);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      boolean boolean0 = floatValidator0.maxValue(bigDecimal0, bigDecimal0);
      assertTrue(floatValidator0.isAllowFractions());
      assertEquals(37, floatValidator0.getFormatType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = BigDecimalValidator.getInstance();
      BigInteger bigInteger0 = BigInteger.ZERO;
      boolean boolean0 = bigDecimalValidator0.minValue(bigInteger0, bigInteger0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = CurrencyValidator.getInstance();
      boolean boolean0 = bigDecimalValidator0.minValue(0, 2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = BigDecimalValidator.getInstance();
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigDecimalValidator0.minValue(bigInteger0, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.AbstractNumberValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator();
      boolean boolean0 = bigDecimalValidator0.isValid("", "", (Locale) null);
      assertFalse(boolean0);
      assertTrue(bigDecimalValidator0.isAllowFractions());
      assertEquals(0, bigDecimalValidator0.getFormatType());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator(true);
      boolean boolean0 = bigDecimalValidator0.isAllowFractions();
      assertTrue(boolean0);
      assertEquals(0, bigDecimalValidator0.getFormatType());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PercentValidator percentValidator0 = new PercentValidator();
      Locale locale0 = Locale.CHINESE;
      DecimalFormat decimalFormat0 = (DecimalFormat)percentValidator0.getFormat(locale0);
      assertTrue(percentValidator0.isAllowFractions());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      Locale locale0 = Locale.GERMAN;
      currencyValidator0.validate("'V$@(bEJPh[", "", locale0);
      assertEquals(1, currencyValidator0.getFormatType());
      assertTrue(currencyValidator0.isAllowFractions());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ByteValidator byteValidator0 = new ByteValidator(true, 2);
      byteValidator0.validate("Q0.01");
      assertFalse(byteValidator0.isAllowFractions());
      assertEquals(2, byteValidator0.getFormatType());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance();
      decimalFormat0.setMultiplier(1000);
      int int0 = currencyValidator0.determineScale(decimalFormat0);
      assertEquals(3, int0);
      assertEquals(1, currencyValidator0.getFormatType());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      int int0 = currencyValidator0.determineScale(numberFormat0);
      assertEquals(1, currencyValidator0.getFormatType());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object object0 = currencyValidator0.parse("7)`1m6<_dHF~0<{[vl", "7)`1m6<_dHF~0<{[vl", locale0);
      assertEquals(1, currencyValidator0.getFormatType());
      assertNotNull(object0);
      assertTrue(currencyValidator0.isAllowFractions());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator();
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      numberFormat0.setParseIntegerOnly(true);
      int int0 = bigDecimalValidator0.determineScale(numberFormat0);
      assertEquals(0, bigDecimalValidator0.getFormatType());
      assertTrue(bigDecimalValidator0.isAllowFractions());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator(true, 1);
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      int int0 = shortValidator0.determineScale(numberFormat0);
      assertEquals(0, int0);
      assertEquals(1, shortValidator0.getFormatType());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LongValidator longValidator0 = LongValidator.getInstance();
      Locale locale0 = Locale.JAPAN;
      // Undeclared exception!
      try { 
        longValidator0.parse("org.apache.commons.validator.routines.AbstractNumberValidator", "org.apache.commons.validator.routines.AbstractNumberValidator", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple decimal separators in pattern \"org.apache.commons.validator.routines.AbstractNumberValidator\"
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FloatValidator floatValidator0 = new FloatValidator(true, (-500));
      boolean boolean0 = floatValidator0.isValid("1", "", (Locale) null);
      assertEquals((-500), floatValidator0.getFormatType());
      assertTrue(boolean0);
      assertTrue(floatValidator0.isAllowFractions());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      Object object0 = shortValidator0.parse("FmC_y\"fV2r0I3", "FmC_y\"fV2r0I3", (Locale) null);
      assertEquals((short)0, object0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      boolean boolean0 = shortValidator0.isValid((String) null, "cf?H7K1!`I%h}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)74;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      boolean boolean0 = integerValidator0.maxValue(bigInteger0, (byte)57);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = new BigIntegerValidator();
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean0 = bigIntegerValidator0.maxValue(bigInteger0, bigInteger0);
      assertEquals(0, bigIntegerValidator0.getFormatType());
      assertFalse(bigIntegerValidator0.isAllowFractions());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator();
      Byte byte0 = new Byte((byte)54);
      boolean boolean0 = shortValidator0.minValue(2, byte0);
      assertFalse(shortValidator0.isAllowFractions());
      assertEquals(0, shortValidator0.getFormatType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      boolean boolean0 = currencyValidator0.isInRange(bigInteger0, bigDecimal0, bigDecimal0);
      assertTrue(currencyValidator0.isAllowFractions());
      assertTrue(boolean0);
      assertEquals(1, currencyValidator0.getFormatType());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator(true);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      boolean boolean0 = bigDecimalValidator0.isInRange(bigInteger0, bigDecimal0, bigDecimal0);
      assertEquals(0, bigDecimalValidator0.getFormatType());
      assertFalse(boolean0);
      assertTrue(bigDecimalValidator0.isAllowFractions());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(2);
      boolean boolean0 = currencyValidator0.isInRange(bigInteger0, bigDecimal0, bigDecimal0);
      assertEquals(1, currencyValidator0.getFormatType());
      assertTrue(currencyValidator0.isAllowFractions());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator(false, 237, false);
      Locale locale0 = Locale.KOREA;
      boolean boolean0 = bigDecimalValidator0.isValid("68LBe,?lrK{H%u4", locale0);
      assertEquals(237, bigDecimalValidator0.getFormatType());
      assertTrue(boolean0);
      assertFalse(bigDecimalValidator0.isAllowFractions());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FloatValidator floatValidator0 = new FloatValidator();
      boolean boolean0 = floatValidator0.maxValue(1, 0);
      assertEquals(0, floatValidator0.getFormatType());
      assertTrue(floatValidator0.isAllowFractions());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ByteValidator byteValidator0 = new ByteValidator(false, 100);
      int int0 = byteValidator0.getFormatType();
      assertFalse(byteValidator0.isAllowFractions());
      assertEquals(100, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator();
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      int int0 = bigDecimalValidator0.determineScale(numberFormat0);
      assertEquals(0, bigDecimalValidator0.getFormatType());
      assertEquals((-1), int0);
  }
}
