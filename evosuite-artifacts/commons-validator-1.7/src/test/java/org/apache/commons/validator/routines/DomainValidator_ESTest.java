/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 15:42:05 GMT 2022
 */

package org.apache.commons.validator.routines;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.validator.routines.DomainValidator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DomainValidator_ESTest extends DomainValidator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.GENERIC_PLUS;
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "leclerc";
      stringArray0[1] = "dzbujL6EUO(7K/2pv";
      stringArray0[2] = "leclerc";
      stringArray0[3] = "leclerc";
      stringArray0[4] = "leclerc";
      DomainValidator.Item domainValidator_Item0 = new DomainValidator.Item(domainValidator_ArrayType0, stringArray0);
      linkedList0.add(domainValidator_Item0);
      DomainValidator domainValidator0 = DomainValidator.getInstance(false, (List<DomainValidator.Item>) linkedList0);
      boolean boolean0 = domainValidator0.isValidTld("dzbujL6EUO(7K/2pv");
      assertTrue(boolean0);
      assertFalse(domainValidator0.isAllowLocal());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator domainValidator0 = DomainValidator.getInstance(false, (List<DomainValidator.Item>) linkedList0);
      boolean boolean0 = domainValidator0.isValidGenericTld("NmVcjiSkg6XE(t]");
      assertFalse(boolean0);
      assertFalse(domainValidator0.isAllowLocal());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.LOCAL_PLUS;
      String[] stringArray0 = new String[0];
      DomainValidator.Item domainValidator_Item0 = new DomainValidator.Item(domainValidator_ArrayType0, stringArray0);
      linkedList0.add(domainValidator_Item0);
      DomainValidator domainValidator0 = DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList0);
      domainValidator0.getOverrides(domainValidator_ArrayType0);
      assertTrue(domainValidator0.isAllowLocal());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.LOCAL_MINUS;
      String[] stringArray0 = new String[0];
      DomainValidator.Item domainValidator_Item0 = new DomainValidator.Item(domainValidator_ArrayType0, stringArray0);
      linkedList0.add(domainValidator_Item0);
      DomainValidator domainValidator0 = DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList0);
      domainValidator0.getOverrides(domainValidator_ArrayType0);
      assertTrue(domainValidator0.isAllowLocal());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "p";
      stringArray0[1] = "T";
      stringArray0[2] = "1O|";
      stringArray0[3] = "gf< ,M";
      stringArray0[4] = "gEv\"<#FS@K0%\",&";
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.COUNTRY_CODE_PLUS;
      DomainValidator.Item domainValidator_Item0 = new DomainValidator.Item(domainValidator_ArrayType0, stringArray0);
      linkedList0.addLast(domainValidator_Item0);
      stringArray0[5] = "{:fMd{";
      stringArray0[6] = ".contractors";
      DomainValidator domainValidator0 = DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList0);
      DomainValidator.ArrayType domainValidator_ArrayType1 = DomainValidator.ArrayType.GENERIC_MINUS;
      String[] stringArray1 = domainValidator0.getOverrides(domainValidator_ArrayType1);
      assertTrue(domainValidator0.isAllowLocal());
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.COUNTRY_CODE_PLUS;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "p";
      stringArray0[1] = "(nf52trJN8";
      stringArray0[2] = "_=$aI.NcW";
      stringArray0[3] = "wMKX`jh=";
      stringArray0[4] = "(nf52trJN8";
      stringArray0[5] = "_=$aI.NcW";
      DomainValidator.updateTLDOverride(domainValidator_ArrayType0, stringArray0);
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator domainValidator0 = DomainValidator.getInstance(false, (List<DomainValidator.Item>) linkedList0);
      String[] stringArray1 = domainValidator0.getOverrides(domainValidator_ArrayType0);
      assertFalse(domainValidator0.isAllowLocal());
      assertEquals(6, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance();
      boolean boolean0 = domainValidator0.isValidTld(".ca");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = DomainValidator.unicodeToASCII((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = DomainValidator.unicodeToASCII("2]lyy&DA-_Hi'=JDK");
      assertEquals("2]lyy&DA-_Hi'=JDK", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = DomainValidator.unicodeToASCII("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance(true);
      boolean boolean0 = domainValidator0.isAllowLocal();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.COUNTRY_CODE_MINUS;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "^~XNC|E";
      stringArray0[1] = "^~XNC|E";
      stringArray0[2] = "^~XNC|E";
      DomainValidator.Item domainValidator_Item0 = new DomainValidator.Item(domainValidator_ArrayType0, stringArray0);
      linkedList0.add(domainValidator_Item0);
      DomainValidator domainValidator0 = DomainValidator.getInstance(false, (List<DomainValidator.Item>) linkedList0);
      String[] stringArray1 = domainValidator0.getOverrides(domainValidator_ArrayType0);
      assertEquals(3, stringArray1.length);
      assertFalse(domainValidator0.isAllowLocal());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance();
      // Undeclared exception!
      try { 
        domainValidator0.isValidTld((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.DomainValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance();
      // Undeclared exception!
      try { 
        domainValidator0.isValidInfrastructureTld((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.DomainValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance(false);
      // Undeclared exception!
      try { 
        domainValidator0.isValidGenericTld((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.DomainValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator domainValidator0 = DomainValidator.getInstance(false, (List<DomainValidator.Item>) linkedList0);
      // Undeclared exception!
      try { 
        domainValidator0.isValidCountryCodeTld((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.DomainValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        DomainValidator.getTLDEntries((DomainValidator.ArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.DomainValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance(false);
      // Undeclared exception!
      try { 
        domainValidator0.getOverrides((DomainValidator.ArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.DomainValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.LOCAL_PLUS;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "/{!g:vyR\"|";
      stringArray0[1] = ">{la0>qSO";
      stringArray0[2] = "%cY0";
      stringArray0[3] = "-*i}S0tj";
      stringArray0[4] = "/{!g:vyR\"|";
      stringArray0[5] = ".}";
      stringArray0[6] = "ricoh";
      stringArray0[7] = "V^Yp9HzNo\"8";
      DomainValidator.Item domainValidator_Item0 = new DomainValidator.Item(domainValidator_ArrayType0, stringArray0);
      linkedList0.offerLast(domainValidator_Item0);
      DomainValidator domainValidator0 = DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList0);
      boolean boolean0 = domainValidator0.isValidLocalTld(">{la0>qSO");
      assertTrue(domainValidator0.isAllowLocal());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance();
      boolean boolean0 = domainValidator0.isValidLocalTld("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance();
      boolean boolean0 = domainValidator0.isValidCountryCodeTld("stc");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance(false);
      boolean boolean0 = domainValidator0.isValidCountryCodeTld("xn--yfro4i67o");
      assertTrue(boolean0);
      assertFalse(domainValidator0.isAllowLocal());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance();
      boolean boolean0 = domainValidator0.isValidTld("w");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance(true);
      boolean boolean0 = domainValidator0.isValidInfrastructureTld("");
      assertFalse(boolean0);
      assertTrue(domainValidator0.isAllowLocal());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance(true);
      // Undeclared exception!
      try { 
        domainValidator0.isValidLocalTld((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.DomainValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance(false);
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.COUNTRY_CODE_RO;
      // Undeclared exception!
      try { 
        domainValidator0.getOverrides(domainValidator_ArrayType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected enum value: COUNTRY_CODE_RO
         //
         verifyException("org.apache.commons.validator.routines.DomainValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance(false);
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.GENERIC_PLUS;
      domainValidator0.getOverrides(domainValidator_ArrayType0);
      assertFalse(domainValidator0.isAllowLocal());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.LOCAL_RO;
      String[] stringArray0 = DomainValidator.getTLDEntries(domainValidator_ArrayType0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.INFRASTRUCTURE_RO;
      String[] stringArray0 = DomainValidator.getTLDEntries(domainValidator_ArrayType0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.GENERIC_RO;
      String[] stringArray0 = DomainValidator.getTLDEntries(domainValidator_ArrayType0);
      assertEquals(1201, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.COUNTRY_CODE_RO;
      String[] stringArray0 = DomainValidator.getTLDEntries(domainValidator_ArrayType0);
      assertEquals(307, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.LOCAL_MINUS;
      String[] stringArray0 = DomainValidator.getTLDEntries(domainValidator_ArrayType0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.GENERIC_PLUS;
      String[] stringArray0 = DomainValidator.getTLDEntries(domainValidator_ArrayType0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.LOCAL_RO;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "p6";
      stringArray0[1] = "p6";
      stringArray0[2] = "p6";
      stringArray0[3] = "p6";
      stringArray0[4] = "p6";
      stringArray0[5] = "p6";
      // Undeclared exception!
      try { 
        DomainValidator.updateTLDOverride(domainValidator_ArrayType0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot update the table: LOCAL_RO
         //
         verifyException("org.apache.commons.validator.routines.DomainValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.INFRASTRUCTURE_RO;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "-uhw4oz$jwej@1";
      // Undeclared exception!
      try { 
        DomainValidator.updateTLDOverride(domainValidator_ArrayType0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot update the table: INFRASTRUCTURE_RO
         //
         verifyException("org.apache.commons.validator.routines.DomainValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.COUNTRY_CODE_MINUS;
      String[] stringArray0 = DomainValidator.getTLDEntries(domainValidator_ArrayType0);
      DomainValidator.ArrayType domainValidator_ArrayType1 = DomainValidator.ArrayType.GENERIC_RO;
      // Undeclared exception!
      try { 
        DomainValidator.updateTLDOverride(domainValidator_ArrayType1, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot update the table: GENERIC_RO
         //
         verifyException("org.apache.commons.validator.routines.DomainValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.COUNTRY_CODE_PLUS;
      String[] stringArray0 = DomainValidator.getTLDEntries(domainValidator_ArrayType0);
      DomainValidator.ArrayType domainValidator_ArrayType1 = DomainValidator.ArrayType.COUNTRY_CODE_RO;
      // Undeclared exception!
      try { 
        DomainValidator.updateTLDOverride(domainValidator_ArrayType1, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot update the table: COUNTRY_CODE_RO
         //
         verifyException("org.apache.commons.validator.routines.DomainValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.LOCAL_PLUS;
      String[] stringArray0 = DomainValidator.getTLDEntries(domainValidator_ArrayType0);
      DomainValidator.updateTLDOverride(domainValidator_ArrayType0, stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.COUNTRY_CODE_MINUS;
      String[] stringArray0 = DomainValidator.getTLDEntries(domainValidator_ArrayType0);
      DomainValidator.ArrayType domainValidator_ArrayType1 = DomainValidator.ArrayType.LOCAL_MINUS;
      DomainValidator.updateTLDOverride(domainValidator_ArrayType1, stringArray0);
      assertNotSame(domainValidator_ArrayType1, domainValidator_ArrayType0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.GENERIC_MINUS;
      String[] stringArray0 = DomainValidator.getTLDEntries(domainValidator_ArrayType0);
      DomainValidator.ArrayType domainValidator_ArrayType1 = DomainValidator.ArrayType.GENERIC_PLUS;
      DomainValidator.updateTLDOverride(domainValidator_ArrayType1, stringArray0);
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator domainValidator0 = DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList0);
      domainValidator0.getOverrides(domainValidator_ArrayType1);
      assertTrue(domainValidator0.isAllowLocal());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.COUNTRY_CODE_PLUS;
      String[] stringArray0 = DomainValidator.getTLDEntries(domainValidator_ArrayType0);
      DomainValidator.ArrayType domainValidator_ArrayType1 = DomainValidator.ArrayType.COUNTRY_CODE_MINUS;
      DomainValidator.updateTLDOverride(domainValidator_ArrayType1, stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.GENERIC_RO;
      String[] stringArray0 = new String[6];
      // Undeclared exception!
      try { 
        DomainValidator.updateTLDOverride(domainValidator_ArrayType0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.DomainValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.GENERIC_MINUS;
      String[] stringArray0 = DomainValidator.getTLDEntries(domainValidator_ArrayType0);
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator.getInstance(false, (List<DomainValidator.Item>) linkedList0);
      // Undeclared exception!
      try { 
        DomainValidator.updateTLDOverride(domainValidator_ArrayType0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can only invoke this method before calling getInstance
         //
         verifyException("org.apache.commons.validator.routines.DomainValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.GENERIC_MINUS;
      String[] stringArray0 = DomainValidator.getTLDEntries(domainValidator_ArrayType0);
      DomainValidator.updateTLDOverride(domainValidator_ArrayType0, stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.LOCAL_PLUS;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "/{!g:vyR\"|";
      stringArray0[1] = "/{!g:vyR\"|";
      DomainValidator.ArrayType domainValidator_ArrayType1 = DomainValidator.ArrayType.LOCAL_MINUS;
      DomainValidator.Item domainValidator_Item0 = new DomainValidator.Item(domainValidator_ArrayType1, stringArray0);
      linkedList0.add(domainValidator_Item0);
      stringArray0[2] = "/{!g:vyR\"|";
      stringArray0[3] = "/{!g:vyR\"|";
      stringArray0[4] = "/{!g:vyR\"|";
      stringArray0[5] = "/{!g:vyR\"|";
      stringArray0[6] = "ri%oh";
      stringArray0[7] = "/{!g:vyR\"|";
      DomainValidator.Item domainValidator_Item1 = new DomainValidator.Item(domainValidator_ArrayType0, stringArray0);
      linkedList0.offerLast(domainValidator_Item1);
      DomainValidator domainValidator0 = DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList0);
      boolean boolean0 = domainValidator0.isValidLocalTld("/{!g:vyR\"|");
      assertFalse(boolean0);
      assertTrue(domainValidator0.isAllowLocal());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "p";
      stringArray0[1] = "p";
      stringArray0[2] = "p";
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.COUNTRY_CODE_MINUS;
      DomainValidator.Item domainValidator_Item0 = new DomainValidator.Item(domainValidator_ArrayType0, stringArray0);
      linkedList0.add(domainValidator_Item0);
      stringArray0[3] = "p";
      stringArray0[4] = "p";
      DomainValidator.ArrayType domainValidator_ArrayType1 = DomainValidator.ArrayType.COUNTRY_CODE_PLUS;
      DomainValidator.Item domainValidator_Item1 = new DomainValidator.Item(domainValidator_ArrayType1, stringArray0);
      stringArray0[5] = "p";
      stringArray0[6] = "p";
      linkedList0.add(domainValidator_Item1);
      DomainValidator domainValidator0 = DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList0);
      boolean boolean0 = domainValidator0.isValidCountryCodeTld("p");
      assertTrue(domainValidator0.isAllowLocal());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.GENERIC_MINUS;
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "museum";
      stringArray0[1] = "M3Tf?:|=";
      stringArray0[2] = "leclerc";
      stringArray0[3] = "";
      stringArray0[4] = "leclerc";
      DomainValidator.Item domainValidator_Item0 = new DomainValidator.Item(domainValidator_ArrayType0, stringArray0);
      linkedList0.add(domainValidator_Item0);
      DomainValidator domainValidator0 = DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList0);
      boolean boolean0 = domainValidator0.isValidGenericTld("leclerc");
      assertFalse(boolean0);
      assertTrue(domainValidator0.isAllowLocal());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance(true);
      boolean boolean0 = domainValidator0.isValidTld("leclerc");
      assertTrue(domainValidator0.isAllowLocal());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator domainValidator0 = DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList0);
      boolean boolean0 = domainValidator0.isValidDomainSyntax("p");
      assertTrue(boolean0);
      assertTrue(domainValidator0.isAllowLocal());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance();
      boolean boolean0 = domainValidator0.isValidDomainSyntax("org.apache.cmmons.validator.outines.RegexValidator");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance();
      boolean boolean0 = domainValidator0.isValidDomainSyntax((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator domainValidator0 = DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList0);
      boolean boolean0 = domainValidator0.isValidDomainSyntax("........org.apache.commons.valida\"or.routimes.domainvalidator$arraytype");
      assertTrue(domainValidator0.isAllowLocal());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator domainValidator0 = DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList0);
      boolean boolean0 = domainValidator0.isValid("........org.apache.commons.valida\"or.routimes.domainvalidator$arraytype");
      assertFalse(boolean0);
      assertTrue(domainValidator0.isAllowLocal());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.LOCAL_RO;
      String[] stringArray0 = new String[0];
      DomainValidator.Item domainValidator_Item0 = new DomainValidator.Item(domainValidator_ArrayType0, stringArray0);
      linkedList0.add(domainValidator_Item0);
      DomainValidator domainValidator0 = DomainValidator.getInstance(false, (List<DomainValidator.Item>) linkedList0);
      assertFalse(domainValidator0.isAllowLocal());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.LOCAL_PLUS;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "/S{!g:vyR\"|";
      stringArray0[1] = "/S{!g:vyR\"|";
      stringArray0[2] = "/S{!g:vyR\"|";
      stringArray0[3] = "/S{!g:vyR\"|";
      stringArray0[4] = "/S{!g:vyR\"|";
      stringArray0[5] = "/S{!g:vyR\"|";
      stringArray0[6] = "/S{!g:vyR\"|";
      stringArray0[7] = "/S{!g:vyR\"|";
      DomainValidator.Item domainValidator_Item0 = new DomainValidator.Item(domainValidator_ArrayType0, stringArray0);
      linkedList0.offerLast(domainValidator_Item0);
      DomainValidator domainValidator0 = DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList0);
      boolean boolean0 = domainValidator0.isValidTld("/S{!g:vyR\"|");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.GENERIC_PLUS;
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "museum";
      stringArray0[1] = "M3Tf?:|=";
      stringArray0[2] = "leclerc";
      stringArray0[3] = "";
      stringArray0[4] = "leclerc";
      DomainValidator.Item domainValidator_Item0 = new DomainValidator.Item(domainValidator_ArrayType0, stringArray0);
      linkedList0.add(domainValidator_Item0);
      DomainValidator domainValidator0 = DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList0);
      boolean boolean0 = domainValidator0.isValidGenericTld("M3Tf?:|=");
      assertTrue(domainValidator0.isAllowLocal());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.GENERIC_MINUS;
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      String[] stringArray0 = new String[5];
      DomainValidator.Item domainValidator_Item0 = new DomainValidator.Item(domainValidator_ArrayType0, stringArray0);
      linkedList0.add(domainValidator_Item0);
      // Undeclared exception!
      try { 
        DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.DomainValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.GENERIC_MINUS;
      String[] stringArray0 = DomainValidator.getTLDEntries(domainValidator_ArrayType0);
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator.Item domainValidator_Item0 = new DomainValidator.Item(domainValidator_ArrayType0, stringArray0);
      linkedList0.add(domainValidator_Item0);
      DomainValidator domainValidator0 = DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList0);
      domainValidator0.getOverrides(domainValidator_ArrayType0);
      assertTrue(domainValidator0.isAllowLocal());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance(true);
      boolean boolean0 = domainValidator0.isValid("leclerc");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance(false);
      boolean boolean0 = domainValidator0.isValid("M3Tf?:|=");
      assertFalse(boolean0);
      assertFalse(domainValidator0.isAllowLocal());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator domainValidator0 = DomainValidator.getInstance(false, (List<DomainValidator.Item>) linkedList0);
      boolean boolean0 = domainValidator0.isValid((String) null);
      assertFalse(boolean0);
      assertFalse(domainValidator0.isAllowLocal());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance();
      boolean boolean0 = domainValidator0.isAllowLocal();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance();
      boolean boolean0 = domainValidator0.isValid("org.apache.commons.validator.routines.RegexValidator");
      assertFalse(boolean0);
  }
}
