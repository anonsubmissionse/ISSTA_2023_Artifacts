/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 06 16:46:29 GMT 2022
 */

package spark.utils.urldecoding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import spark.utils.urldecoding.UrlDecode;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UrlDecode_ESTest extends UrlDecode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        UrlDecode.path("sRt%x)=Ntw{ ]w+]^%O");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // !hex x
         //
         verifyException("spark.utils.urldecoding.TypeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        UrlDecode.path((String) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.utils.urldecoding.UrlDecode", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        UrlDecode.path((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.utils.urldecoding.UrlDecode", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = UrlDecode.path("", 0, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = UrlDecode.path("rU3,K;k%t~4m4*Fa2s", 3, 3);
      assertEquals(",K", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        UrlDecode.path(";/<YWk*k;a!%[MtobN", 0, 1864);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        UrlDecode.path("?KU3OMk%>68~u40CJ2s", 6, 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not valid UTF8! char appended in state 36
         //
         verifyException("spark.utils.urldecoding.Utf8Appendable", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        UrlDecode.path(";/<k(k)%u@oho_RfvN", 0, 43);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // !hex 111
         //
         verifyException("spark.utils.urldecoding.TypeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        UrlDecode.path("!F3%P9KATnH>", 2, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad URI % encoding
         //
         verifyException("spark.utils.urldecoding.UrlDecode", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = UrlDecode.path("rU3,K", 0, 3);
      assertEquals("rU3", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        UrlDecode.path("zYBXd|vzkYr!zaz|", (-3260), (-3260));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = UrlDecode.path("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = UrlDecode.path(";R/tq|2=$\"k:4J5;-nt");
      assertEquals("/tq|2=$\"k:4J5", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        UrlDecode.path("Yz_uRAh?mW:\"I/2}M%U");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad URI % encoding
         //
         verifyException("spark.utils.urldecoding.UrlDecode", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        UrlDecode.path("a&</H%f?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not valid UTF8! byte Ff in state 0
         //
         verifyException("spark.utils.urldecoding.Utf8Appendable", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UrlDecode urlDecode0 = new UrlDecode();
  }
}
