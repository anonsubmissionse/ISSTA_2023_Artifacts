/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 06 16:54:16 GMT 2022
 */

package spark.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Set;
import org.eclipse.jetty.util.IncludeExclude;
import org.eclipse.jetty.util.InetAddressSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import spark.utils.StringUtils;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = StringUtils.cleanPath("iEVu*|qvt:WU");
      assertEquals("iEVu*|qvt:WU", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = StringUtils.replace("%9%lPT", "/", "");
      assertEquals("%9%lPT", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = StringUtils.cleanPath("vip4TCXL&m");
      assertEquals("vip4TCXL&m", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      boolean boolean0 = StringUtils.isEmpty(charBuffer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InetAddressSet inetAddressSet0 = new InetAddressSet();
      inetAddressSet0.add("");
      String[] stringArray0 = StringUtils.toStringArray(inetAddressSet0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = StringUtils.replace("", "/", "/");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = StringUtils.hasLength("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = StringUtils.getFilename("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = StringUtils.delimitedListToStringArray("spark.utils.StringUtils", "r?2ciC]oO@r+pI");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedHashSet<InetAddressSet> linkedHashSet0 = new LinkedHashSet<InetAddressSet>();
      InetAddressSet inetAddressSet0 = new InetAddressSet();
      linkedHashSet0.add(inetAddressSet0);
      String string0 = StringUtils.collectionToDelimitedString((Collection<?>) linkedHashSet0, (String) null);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = StringUtils.cleanPath(".");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = StringUtils.applyRelativePath("", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = StringUtils.applyRelativePath("f|c", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "Y}%L>ae.dwz)DJkAIe");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Y}%L>ae.dwz)DJkAIe
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null, "jrt:");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.removeLeadingAndTrailingSlashesFrom((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IncludeExclude<Object> includeExclude0 = new IncludeExclude<Object>();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) includeExclude0;
      includeExclude0.include(objectArray0);
      Set<Object> set0 = includeExclude0.getIncluded();
      // Undeclared exception!
      try { 
        StringUtils.collectionToDelimitedString((Collection<?>) set0, "Pc_91@HeM+Gr?j", (String) null, (String) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IncludeExclude<Object> includeExclude0 = new IncludeExclude<Object>();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) includeExclude0;
      includeExclude0.include(objectArray0);
      Set<Object> set0 = includeExclude0.getIncluded();
      // Undeclared exception!
      try { 
        StringUtils.collectionToDelimitedString((Collection<?>) set0, "/");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.applyRelativePath((String) null, "Exclude Predicate");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.utils.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = StringUtils.removeLeadingAndTrailingSlashesFrom("T&~D>P-Y`ig1+");
      assertEquals("T&~D>P-Y`ig1+", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InetAddressSet inetAddressSet0 = new InetAddressSet();
      inetAddressSet0.add("");
      String string0 = StringUtils.collectionToDelimitedString((Collection<?>) inetAddressSet0, "Not stopped", ".", "7{5h0H");
      assertEquals(".7{5h0H", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<InetAddressSet> linkedList0 = new LinkedList<InetAddressSet>();
      String string0 = StringUtils.collectionToDelimitedString((Collection<?>) linkedList0, "$Gv93", "$Gv93", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = StringUtils.delimitedListToStringArray("", "lhtqoeS:Y}", ".class");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = StringUtils.delimitedListToStringArray((String) null, "e;4P/-:SCp`{ss):od", (String) null);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      InetAddressSet inetAddressSet0 = new InetAddressSet();
      String[] stringArray0 = StringUtils.toStringArray(inetAddressSet0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = StringUtils.deleteAny((String) null, "%B9ucT)kLU(jqTer,N");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = StringUtils.deleteAny("/", "");
      assertEquals("/", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = StringUtils.replace("e6RnW", "e6RnW", "e6RnW");
      assertEquals("e6RnW", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      boolean boolean0 = StringUtils.hasLength((CharSequence) "C(<1#sJ1");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      boolean boolean0 = StringUtils.hasLength((CharSequence) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      boolean boolean0 = StringUtils.hasLength((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      boolean boolean0 = StringUtils.isEmpty("notifyEvents {} {}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      boolean boolean0 = StringUtils.hasLength("@X^");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IncludeExclude<Object> includeExclude0 = new IncludeExclude<Object>();
      Set<Object> set0 = includeExclude0.getIncluded();
      String string0 = StringUtils.collectionToDelimitedString((Collection<?>) set0, "/EosBzak~>P4Z&n/");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = StringUtils.removeLeadingAndTrailingSlashesFrom("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = StringUtils.removeLeadingAndTrailingSlashesFrom("/EosBzak~>P4Z&n/");
      assertEquals("EosBzak~>P4Z&n", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      String string0 = StringUtils.toString(byteArray0, "utf-16");
      assertEquals("\u0000\u0000\uFFFD", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.toString(byteArray0, "6");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      String string0 = StringUtils.toString(byteArray0, (String) null);
      assertEquals("\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = StringUtils.cleanPath("at/");
      assertEquals("at/", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String[] stringArray0 = StringUtils.delimitedListToStringArray("'", "", "utf-16");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String[] stringArray0 = StringUtils.delimitedListToStringArray("", (String) null, "Rk!\r>o");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String[] stringArray0 = StringUtils.toStringArray((Collection<String>) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = StringUtils.cleanPath("/osBzak~>P4Z&n/..");
      assertEquals("/", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = StringUtils.cleanPath("..");
      assertEquals("..", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = StringUtils.cleanPath((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = StringUtils.applyRelativePath("/osBzak~>P4Z&n/", "..");
      assertEquals("/osBzak~>P4Z&n/..", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = StringUtils.applyRelativePath("/apprk.ut.s.StringUtilR", "/apprk.ut.s.StringUtilR");
      assertEquals("/apprk.ut.s.StringUtilR", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = StringUtils.getFilename("/-/cM7VilU?j");
      assertEquals("cM7VilU?j", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = StringUtils.getFilename((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = StringUtils.deleteAny("V!nE0@d", "GjfFsh+MkwTo7'");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = StringUtils.deleteAny("6", "6");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = StringUtils.replace("/apprk.ut.s.StringUtilR", "/apprk.ut.s.StringUtilR", (String) null);
      assertNotNull(string0);
      assertEquals("/apprk.ut.s.StringUtilR", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = StringUtils.replace("Registering watch on {} {}", "", "nl[@d@P,A8Z5caq#");
      assertEquals("Registering watch on {} {}", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = StringUtils.replace((String) null, (String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String[] stringArray0 = StringUtils.delimitedListToStringArray("/=AD#7h/A/3vP6kJ", "/=AD#7h/A/3vP6kJ", "/=AD#7h/A/3vP6kJ");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty("/=AD#7h/A/3vP6kJ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      boolean boolean0 = StringUtils.isEmpty((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("/=AD#7h/A/3vP6kJ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank(".");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String[] stringArray0 = StringUtils.delimitedListToStringArray((String) null, (String) null);
      assertEquals(0, stringArray0.length);
  }
}
