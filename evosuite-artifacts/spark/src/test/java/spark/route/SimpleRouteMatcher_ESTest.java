/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 06 17:22:01 GMT 2022
 */

package spark.route;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import spark.FilterImpl;
import spark.ResponseTransformer;
import spark.ResponseTransformerRouteImpl;
import spark.Route;
import spark.RouteImpl;
import spark.TemplateEngine;
import spark.TemplateViewRoute;
import spark.TemplateViewRouteImpl;
import spark.route.HttpMethod;
import spark.route.SimpleRouteMatcher;
import spark.routematch.RouteMatch;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleRouteMatcher_ESTest extends SimpleRouteMatcher_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleRouteMatcher simpleRouteMatcher0 = new SimpleRouteMatcher();
      boolean boolean0 = simpleRouteMatcher0.removeRoute("connect", "connect");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleRouteMatcher simpleRouteMatcher0 = new SimpleRouteMatcher();
      HttpMethod httpMethod0 = HttpMethod.options;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("spark.route.SimpleRouteMatcher", (String) null, templateViewRoute0, templateEngine0);
      simpleRouteMatcher0.add(httpMethod0, (RouteImpl) templateViewRouteImpl0);
      boolean boolean0 = simpleRouteMatcher0.removeRoute("spark.route.SimpleRouteMatcher");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleRouteMatcher simpleRouteMatcher0 = new SimpleRouteMatcher();
      boolean boolean0 = simpleRouteMatcher0.removeRoute("ytY|;E_XXj");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleRouteMatcher simpleRouteMatcher0 = new SimpleRouteMatcher();
      HttpMethod httpMethod0 = HttpMethod.put;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("#2", templateViewRoute0, templateEngine0);
      simpleRouteMatcher0.add(httpMethod0, (RouteImpl) templateViewRouteImpl0);
      List<RouteMatch> list0 = simpleRouteMatcher0.findTargetsForRequestedRoute(httpMethod0, "#2", "8Fw)");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleRouteMatcher simpleRouteMatcher0 = new SimpleRouteMatcher();
      HttpMethod httpMethod0 = HttpMethod.head;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(",e_#MMx", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", ";4&``K.,,", (Route) templateViewRouteImpl0, responseTransformer0);
      simpleRouteMatcher0.add(httpMethod0, (RouteImpl) responseTransformerRouteImpl0);
      RouteMatch routeMatch0 = simpleRouteMatcher0.findTargetForRequestedRoute(httpMethod0, "", "");
      assertEquals("", routeMatch0.getMatchUri());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleRouteMatcher simpleRouteMatcher0 = new SimpleRouteMatcher();
      // Undeclared exception!
      try { 
        simpleRouteMatcher0.removeRoute("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // path cannot be null or blank
         //
         verifyException("spark.route.Routes", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleRouteMatcher simpleRouteMatcher0 = new SimpleRouteMatcher();
      HttpMethod httpMethod0 = HttpMethod.trace;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      simpleRouteMatcher0.add(httpMethod0, filterImpl0);
      // Undeclared exception!
      try { 
        simpleRouteMatcher0.removeRoute("'[{BiH!j,`5uK7e']");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.route.RouteEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleRouteMatcher simpleRouteMatcher0 = new SimpleRouteMatcher();
      HttpMethod httpMethod0 = HttpMethod.patch;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      simpleRouteMatcher0.add(httpMethod0, filterImpl0);
      // Undeclared exception!
      try { 
        simpleRouteMatcher0.findTargetsForRequestedRoute(httpMethod0, "jt}PfyQegAOtj)r", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.route.RouteEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleRouteMatcher simpleRouteMatcher0 = new SimpleRouteMatcher();
      HttpMethod httpMethod0 = HttpMethod.head;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      simpleRouteMatcher0.add(httpMethod0, filterImpl0);
      // Undeclared exception!
      try { 
        simpleRouteMatcher0.findTargetForRequestedRoute(httpMethod0, "kT!DrOE[", "kT!DrOE[");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.route.RouteEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleRouteMatcher simpleRouteMatcher0 = new SimpleRouteMatcher();
      HttpMethod httpMethod0 = HttpMethod.trace;
      List<RouteMatch> list0 = simpleRouteMatcher0.findTargetsForRequestedRoute(httpMethod0, "ytY|;E_XXj", "ytY|;E_XXj");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleRouteMatcher simpleRouteMatcher0 = new SimpleRouteMatcher();
      simpleRouteMatcher0.clearRoutes();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleRouteMatcher simpleRouteMatcher0 = new SimpleRouteMatcher();
      HttpMethod httpMethod0 = HttpMethod.post;
      simpleRouteMatcher0.parseValidateAddRoute("G", "C", httpMethod0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleRouteMatcher simpleRouteMatcher0 = new SimpleRouteMatcher();
      HttpMethod httpMethod0 = HttpMethod.post;
      RouteMatch routeMatch0 = simpleRouteMatcher0.findTargetForRequestedRoute(httpMethod0, ".E=90K", "");
      assertNull(routeMatch0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleRouteMatcher simpleRouteMatcher0 = new SimpleRouteMatcher();
      // Undeclared exception!
      try { 
        simpleRouteMatcher0.removeRoute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // path cannot be null or blank
         //
         verifyException("spark.route.Routes", e);
      }
  }
}
