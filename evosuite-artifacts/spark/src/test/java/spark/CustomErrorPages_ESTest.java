/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 06 17:17:24 GMT 2022
 */

package spark;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletRequestWrapper;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpServletResponseWrapper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import spark.CustomErrorPages;
import spark.Request;
import spark.Response;
import spark.route.HttpMethod;
import spark.routematch.RouteMatch;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CustomErrorPages_ESTest extends CustomErrorPages_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(httpServletRequestWrapper0);
      Response response0 = new Response((HttpServletResponse) null);
      Object object0 = CustomErrorPages.getFor(404, request0, response0);
      assertEquals("<html><body><h2>404 Not found</h2></body></html>", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HttpMethod httpMethod0 = HttpMethod.put;
      RouteMatch routeMatch0 = new RouteMatch("", "-", "", "<html><body><h2>500 Internal Server Error</h2></body></html>", httpMethod0);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(routeMatch0, httpServletRequestWrapper0);
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      Response response0 = new Response(httpServletResponseWrapper0);
      Object object0 = CustomErrorPages.getFor(0, request0, response0);
      //  // Unstable assertion: assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Request request0 = new Request();
      Response response0 = new Response();
      Object object0 = CustomErrorPages.getFor((-615), request0, response0);
      assertNotNull(object0);
      assertEquals("<html><body><h2>HTTP Status -615</h2></body></html>", object0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(httpServletRequestWrapper0);
      Object object0 = CustomErrorPages.getFor(500, request0, (Response) null);
      assertNotNull(object0);
      assertEquals("<html><body><h2>500 Internal Server Error</h2></body></html>", object0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      boolean boolean0 = CustomErrorPages.existsFor(404);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CustomErrorPages.add((-1655), "");
  }
}
