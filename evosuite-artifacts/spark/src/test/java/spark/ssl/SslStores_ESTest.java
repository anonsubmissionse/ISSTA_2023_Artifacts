/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 06 17:21:03 GMT 2022
 */

package spark.ssl;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import spark.ssl.SslStores;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SslStores_ESTest extends SslStores_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SslStores sslStores0 = SslStores.create((String) null, (String) null, (String) null, (String) null, "");
      String string0 = sslStores0.trustStorePassword();
      assertFalse(sslStores0.needsClientCert());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SslStores sslStores0 = SslStores.create((String) null, (String) null, (String) null, (String) null, "");
      sslStores0.keystoreFile = "?T2z0>Tjb$gCd_pZ6";
      String string0 = sslStores0.keystorePassword();
      assertNull(string0);
      assertFalse(sslStores0.needsClientCert());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("8=ib~`j)", "[nDV_a", "[nDV_a", (String) null, "[nDV_a");
      assertEquals("[nDV_a", sslStores0.certAlias());
      assertEquals("8=ib~`j)", sslStores0.keystoreFile());
      assertFalse(sslStores0.needsClientCert());
      assertEquals("[nDV_a", sslStores0.trustStorePassword());
      assertEquals("[nDV_a", sslStores0.keystorePassword());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("", "", "", "", "63VL!k6[!CsZ");
      String string0 = sslStores0.trustStoreFile();
      assertEquals("", sslStores0.keystoreFile());
      assertEquals("63VL!k6[!CsZ", sslStores0.trustStorePassword());
      assertFalse(sslStores0.needsClientCert());
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("", sslStores0.certAlias());
      assertEquals("", sslStores0.keystorePassword());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("Z!8gG*__MQR", "#R9[", "", "spark.ssl.SslStores");
      assertEquals("#R9[", sslStores0.keystorePassword());
      assertEquals("", sslStores0.trustStoreFile());
      assertEquals("spark.ssl.SslStores", sslStores0.trustStorePassword());
      assertFalse(sslStores0.needsClientCert());
      assertEquals("Z!8gG*__MQR", sslStores0.keystoreFile());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("*", "6CHEt&b(A-]r^?<R[:", "*", "6CHEt&b(A-]r^?<R[:", false);
      String string0 = sslStores0.trustStorePassword();
      assertEquals("*", sslStores0.keystoreFile());
      assertEquals("6CHEt&b(A-]r^?<R[:", sslStores0.keystorePassword());
      assertFalse(sslStores0.needsClientCert());
      assertEquals("*", sslStores0.trustStoreFile());
      assertNotNull(string0);
      assertEquals("6CHEt&b(A-]r^?<R[:", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("", (String) null, (String) null, (String) null);
      String string0 = sslStores0.trustStoreFile();
      assertFalse(sslStores0.needsClientCert());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("&~O!-he[>nsew&cprsp", "spark.ssl.SslStores", "", "spark.ssl.SslStores", "spark.ssl.SslStores", false);
      String string0 = sslStores0.trustStoreFile();
      assertEquals("spark.ssl.SslStores", string0);
      assertEquals("", sslStores0.certAlias());
      assertEquals("spark.ssl.SslStores", sslStores0.trustStorePassword());
      assertNotNull(string0);
      assertEquals("spark.ssl.SslStores", sslStores0.keystorePassword());
      assertEquals("&~O!-he[>nsew&cprsp", sslStores0.keystoreFile());
      assertFalse(sslStores0.needsClientCert());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("", (String) null, "dp", "", (String) null, true);
      boolean boolean0 = sslStores0.needsClientCert();
      assertEquals("", sslStores0.trustStoreFile());
      assertEquals("dp", sslStores0.certAlias());
      assertEquals("", sslStores0.keystoreFile());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("nbD/Ke:", "nbD/Ke:", "", "", "nbD/Ke:", false);
      String string0 = sslStores0.keystorePassword();
      assertNotNull(string0);
      assertEquals("", sslStores0.certAlias());
      assertEquals("nbD/Ke:", sslStores0.keystoreFile());
      assertFalse(sslStores0.needsClientCert());
      assertEquals("nbD/Ke:", sslStores0.trustStorePassword());
      assertEquals("", sslStores0.trustStoreFile());
      assertEquals("nbD/Ke:", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SslStores sslStores0 = SslStores.create((String) null, (String) null, (String) null, (String) null);
      sslStores0.keystoreFile();
      assertFalse(sslStores0.needsClientCert());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("*", "6CHEt&b(A-]r^?<R[:", "*", "6CHEt&b(A-]r^?<R[:", false);
      String string0 = sslStores0.keystoreFile();
      assertFalse(sslStores0.needsClientCert());
      assertEquals("6CHEt&b(A-]r^?<R[:", sslStores0.keystorePassword());
      assertEquals("*", string0);
      assertEquals("6CHEt&b(A-]r^?<R[:", sslStores0.trustStorePassword());
      assertNotNull(string0);
      assertEquals("*", sslStores0.trustStoreFile());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SslStores sslStores0 = SslStores.create((String) null, (String) null, "V", (String) null, true);
      String string0 = sslStores0.trustStorePassword();
      assertNull(string0);
      assertTrue(sslStores0.needsClientCert());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("g2", (String) null, "g2", "g2", "g2", true);
      assertTrue(sslStores0.needsClientCert());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("", "", "", ".P%E?IJ545blXmh", false);
      String string0 = sslStores0.certAlias();
      assertEquals("", sslStores0.trustStoreFile());
      assertEquals("", sslStores0.keystorePassword());
      assertEquals(".P%E?IJ545blXmh", sslStores0.trustStorePassword());
      assertNull(string0);
      assertFalse(sslStores0.needsClientCert());
      assertEquals("", sslStores0.keystoreFile());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("($", "($", "($", "[|M+!K+z^D~Zc8!", "($");
      String string0 = sslStores0.certAlias();
      assertEquals("[|M+!K+z^D~Zc8!", sslStores0.trustStoreFile());
      assertEquals("($", sslStores0.keystoreFile());
      assertFalse(sslStores0.needsClientCert());
      assertNotNull(string0);
      assertEquals("($", sslStores0.trustStorePassword());
      assertEquals("($", sslStores0.keystorePassword());
      assertEquals("($", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("", "", "", "", "");
      String string0 = sslStores0.keystorePassword();
      assertFalse(sslStores0.needsClientCert());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("", "", "", "", "");
      String string0 = sslStores0.keystoreFile();
      assertNotNull(string0);
      assertFalse(sslStores0.needsClientCert());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("", "", "", "", "", false);
      String string0 = sslStores0.keystoreFile();
      assertFalse(sslStores0.needsClientCert());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("", "", "", "", "");
      String string0 = sslStores0.certAlias();
      assertFalse(sslStores0.needsClientCert());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("2n*f_y", "2n*f_y", "2n*f_y", "2n*f_y");
      boolean boolean0 = sslStores0.needsClientCert();
      assertFalse(boolean0);
  }
}
