/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 06 16:56:31 GMT 2022
 */

package spark.resource;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.net.URL;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import spark.resource.ClassPathResource;
import spark.resource.Resource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassPathResource_ESTest extends ClassPathResource_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<String> class0 = String.class;
      ClassPathResource classPathResource0 = new ClassPathResource("/pI>*ivAT_274m5$", classLoader0, class0);
      Resource resource0 = classPathResource0.createRelative("/pI>*ivAT_274m5$");
      assertNotSame(classPathResource0, resource0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassPathResource classPathResource0 = new ClassPathResource("!:u_:/2@8)Xi/");
      assertFalse(classPathResource0.isOpen());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Integer> class0 = Integer.class;
      ClassPathResource classPathResource0 = new ClassPathResource((String) null, classLoader0, class0);
      String string0 = classPathResource0.getPath();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Object> class0 = Object.class;
      ClassPathResource classPathResource0 = new ClassPathResource("", classLoader0, class0);
      String string0 = classPathResource0.getPath();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Integer> class0 = Integer.class;
      ClassPathResource classPathResource0 = new ClassPathResource((String) null, classLoader0, class0);
      String string0 = classPathResource0.getFilename();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassPathResource classPathResource0 = new ClassPathResource("HU/Fk@SZxd$");
      String string0 = classPathResource0.getFilename();
      assertEquals("Fk@SZxd$", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Object> class0 = Object.class;
      ClassPathResource classPathResource0 = new ClassPathResource((String) null, classLoader0, class0);
      // Undeclared exception!
      try { 
        classPathResource0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.resource.ClassPathResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<String> class0 = String.class;
      ClassPathResource classPathResource0 = new ClassPathResource((String) null, classLoader0, class0);
      // Undeclared exception!
      try { 
        classPathResource0.getURL();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Object> class0 = Object.class;
      ClassPathResource classPathResource0 = new ClassPathResource((String) null, classLoader0, class0);
      // Undeclared exception!
      try { 
        classPathResource0.getInputStream();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Object> class0 = Object.class;
      ClassPathResource classPathResource0 = new ClassPathResource((String) null, classLoader0, class0);
      // Undeclared exception!
      try { 
        classPathResource0.getDescription();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassPathResource classPathResource0 = new ClassPathResource((String) null, (ClassLoader) null, class0);
      // Undeclared exception!
      try { 
        classPathResource0.exists();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<String> class0 = String.class;
      ClassPathResource classPathResource0 = new ClassPathResource((String) null, classLoader0, class0);
      // Undeclared exception!
      try { 
        classPathResource0.createRelative("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.utils.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassPathResource classPathResource0 = null;
      try {
        classPathResource0 = new ClassPathResource("WEB-INF", classLoader0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Path is not valid
         //
         verifyException("spark.utils.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Object> class0 = Object.class;
      ClassPathResource classPathResource0 = new ClassPathResource("", classLoader0, class0);
      String string0 = classPathResource0.getDescription();
      assertEquals("class path resource [java/lang/]", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<String> class0 = String.class;
      ClassPathResource classPathResource0 = new ClassPathResource("/pI>*ivAT_274m5$", classLoader0, class0);
      String string0 = classPathResource0.getDescription();
      assertEquals("class path resource [pI>*ivAT_274m5$]", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassPathResource classPathResource0 = new ClassPathResource(" cannot be resolved to absolute file path", classLoader0);
      try { 
        classPathResource0.getURL();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // class path resource [ cannot be resolved to absolute file path] cannot be resolved to URL because it does not exist
         //
         verifyException("spark.resource.ClassPathResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassPathResource classPathResource0 = new ClassPathResource("/", (ClassLoader) null);
      String string0 = classPathResource0.getDescription();
      assertEquals("class path resource []", string0);
      assertEquals("", classPathResource0.getPath());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Object> class0 = Object.class;
      ClassPathResource classPathResource0 = new ClassPathResource("nK", classLoader0, class0);
      ClassPathResource classPathResource1 = new ClassPathResource("nK", classLoader0, class0);
      boolean boolean0 = classPathResource0.equals(classPathResource1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Integer> class0 = Integer.class;
      ClassPathResource classPathResource0 = new ClassPathResource(".<{\"Q7t;/", classLoader0, class0);
      ClassPathResource classPathResource1 = new ClassPathResource(".<{\"Q7t;/", classLoader0);
      boolean boolean0 = classPathResource0.equals(classPathResource1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassPathResource classPathResource0 = new ClassPathResource("");
      Resource resource0 = classPathResource0.createRelative("");
      // Undeclared exception!
      try { 
        classPathResource0.equals(resource0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.resource.ClassPathResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassPathResource classPathResource0 = new ClassPathResource("");
      ClassPathResource classPathResource1 = new ClassPathResource("Jar URL");
      boolean boolean0 = classPathResource0.equals(classPathResource1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassPathResource classPathResource0 = new ClassPathResource("");
      boolean boolean0 = classPathResource0.equals("2");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassPathResource classPathResource0 = new ClassPathResource("");
      boolean boolean0 = classPathResource0.equals(classPathResource0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassPathResource classPathResource0 = new ClassPathResource("");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassPathResource classPathResource1 = new ClassPathResource("", classLoader0);
      boolean boolean0 = classPathResource0.equals(classPathResource1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<ClassPathResource> class0 = ClassPathResource.class;
      ClassPathResource classPathResource0 = new ClassPathResource("", classLoader0, class0);
      URL uRL0 = classPathResource0.getURL();
      assertEquals("file", uRL0.getProtocol());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Object> class0 = Object.class;
      ClassPathResource classPathResource0 = new ClassPathResource("/peIB<>Vhjao2Ixm5Z", classLoader0, class0);
      try { 
        classPathResource0.getInputStream();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // class path resource [peIB<>Vhjao2Ixm5Z] cannot be opened because it does not exist
         //
         verifyException("spark.resource.ClassPathResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassPathResource classPathResource0 = new ClassPathResource("");
      InputStream inputStream0 = classPathResource0.getInputStream();
      assertEquals(41, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Object> class0 = Object.class;
      ClassPathResource classPathResource0 = new ClassPathResource("sark.utils.StringUtils", classLoader0, class0);
      boolean boolean0 = classPathResource0.exists();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassPathResource classPathResource0 = new ClassPathResource("");
      boolean boolean0 = classPathResource0.exists();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassPathResource classPathResource0 = null;
      try {
        classPathResource0 = new ClassPathResource("url:uf:/@x)6M1,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Path is not valid
         //
         verifyException("spark.utils.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassPathResource classPathResource0 = null;
      try {
        classPathResource0 = new ClassPathResource("META-INF");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Path is not valid
         //
         verifyException("spark.utils.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassPathResource classPathResource0 = null;
      try {
        classPathResource0 = new ClassPathResource("../");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Path is not valid
         //
         verifyException("spark.utils.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassPathResource classPathResource0 = new ClassPathResource("/\"6U:/j`JUN/");
      assertEquals("\"6U:/j`JUN/", classPathResource0.getPath());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Object> class0 = Object.class;
      ClassPathResource classPathResource0 = new ClassPathResource("sark.utils.StringUtils", classLoader0, class0);
      classPathResource0.hashCode();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ClassPathResource classPathResource0 = new ClassPathResource("w");
      String string0 = classPathResource0.getPath();
      assertEquals("w", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassPathResource classPathResource0 = new ClassPathResource("");
      String string0 = classPathResource0.getFilename();
      assertEquals("", string0);
  }
}
