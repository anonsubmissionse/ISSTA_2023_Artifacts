/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 06 17:10:07 GMT 2022
 */

package spark.resource;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.net.URI;
import java.net.URL;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import spark.resource.ClassPathResource;
import spark.resource.ExternalResource;
import spark.resource.Resource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractResource_ESTest extends AbstractResource_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassPathResource classPathResource0 = new ClassPathResource("", classLoader0);
      String string0 = classPathResource0.toString();
      assertEquals("class path resource []", string0);
  }

  //@Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassPathResource classPathResource0 = new ClassPathResource("");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("target/test-classes");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "URL");
      long long0 = classPathResource0.lastModified();
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource("external resource [/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/spark]");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("external resource [/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/spark]");
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "external resource [/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/spark]");
      boolean boolean1 = externalResource0.isReadable();
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassPathResource classPathResource0 = new ClassPathResource("yYnI)YMcK", (ClassLoader) null);
      boolean boolean0 = classPathResource0.isReadable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource("g");
      URL uRL0 = externalResource0.getURL();
      assertNull(uRL0.getRef());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<String> class0 = String.class;
      ClassPathResource classPathResource0 = new ClassPathResource((String) null, classLoader0, class0);
      String string0 = classPathResource0.getFilename();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassPathResource classPathResource0 = new ClassPathResource("o7i*)e~{- TOzgXOq`v", classLoader0);
      String string0 = classPathResource0.getFilename();
      assertEquals("o7i*)e~{- TOzgXOq`v", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource("");
      String string0 = externalResource0.getFilename();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource("/");
      File file0 = externalResource0.getFileForLastModifiedCheck();
      assertTrue(file0.exists());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassPathResource classPathResource0 = new ClassPathResource("");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("target/test-classes");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "URL");
      File file0 = classPathResource0.getFileForLastModifiedCheck();
      assertEquals(0L, file0.getUsableSpace());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource("..");
      File file0 = externalResource0.getFileForLastModifiedCheck();
      assertTrue(file0.isHidden());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource("");
      File file0 = externalResource0.getFile();
      assertTrue(file0.exists());
  }

  //@Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassPathResource classPathResource0 = new ClassPathResource("");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("target/test-classes");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "URL");
      File file0 = classPathResource0.getFile();
      assertEquals(3L, file0.length());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource("../");
      File file0 = externalResource0.getFile();
      assertFalse(file0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource("");
      boolean boolean0 = externalResource0.exists();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource("../");
      boolean boolean0 = externalResource0.exists();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Object> class0 = Object.class;
      ClassPathResource classPathResource0 = new ClassPathResource("", classLoader0, class0);
      Resource resource0 = classPathResource0.createRelative("");
      assertTrue(resource0.equals((Object)classPathResource0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource("");
      long long0 = externalResource0.contentLength();
      assertEquals(0L, long0);
  }

  //@Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassPathResource classPathResource0 = new ClassPathResource("");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("target/test-classes");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "URL");
      long long0 = classPathResource0.contentLength();
      assertEquals(3L, long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<ExternalResource> class0 = ExternalResource.class;
      ClassPathResource classPathResource0 = new ClassPathResource((String) null, classLoader0, class0);
      // Undeclared exception!
      try { 
        classPathResource0.lastModified();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<ExternalResource> class0 = ExternalResource.class;
      ClassPathResource classPathResource0 = new ClassPathResource((String) null, classLoader0, class0);
      // Undeclared exception!
      try { 
        classPathResource0.isReadable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<String> class0 = String.class;
      ClassPathResource classPathResource0 = new ClassPathResource((String) null, classLoader0, class0);
      // Undeclared exception!
      try { 
        classPathResource0.getURL();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassPathResource classPathResource0 = new ClassPathResource("`RU<-c)F2c{ozL(o(T;", classLoader0);
      try { 
        classPathResource0.getURL();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // class path resource [`RU<-c)F2c{ozL(o(T;] cannot be resolved to URL because it does not exist
         //
         verifyException("spark.resource.ClassPathResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Object> class0 = Object.class;
      ClassPathResource classPathResource0 = new ClassPathResource((String) null, classLoader0, class0);
      // Undeclared exception!
      try { 
        classPathResource0.getURI();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Integer> class0 = Integer.class;
      ClassPathResource classPathResource0 = new ClassPathResource("Al3Q:ZV", classLoader0, class0);
      try { 
        classPathResource0.getURI();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // class path resource [java/lang/Al3Q:ZV] cannot be resolved to URL because it does not exist
         //
         verifyException("spark.resource.ClassPathResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<ExternalResource> class0 = ExternalResource.class;
      ClassPathResource classPathResource0 = new ClassPathResource((String) null, classLoader0, class0);
      // Undeclared exception!
      try { 
        classPathResource0.getFileForLastModifiedCheck();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassPathResource classPathResource0 = new ClassPathResource("X'RcROC}yY^')", classLoader0);
      try { 
        classPathResource0.getFileForLastModifiedCheck();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // class path resource [X'RcROC}yY^')] cannot be resolved to URL because it does not exist
         //
         verifyException("spark.resource.ClassPathResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<ClassPathResource> class0 = ClassPathResource.class;
      ClassPathResource classPathResource0 = new ClassPathResource((String) null, classLoader0, class0);
      // Undeclared exception!
      try { 
        classPathResource0.getFile();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassPathResource classPathResource0 = new ClassPathResource(" cannot be opened because it does not exist");
      try { 
        classPathResource0.getFile();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // class path resource [ cannot be opened because it does not exist] cannot be resolved to URL because it does not exist
         //
         verifyException("spark.resource.ClassPathResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<ExternalResource> class0 = ExternalResource.class;
      ClassPathResource classPathResource0 = new ClassPathResource((String) null, classLoader0, class0);
      // Undeclared exception!
      try { 
        classPathResource0.exists();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource("external resource [/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/spark/ cannot be resolved to absolute file path]");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Integer> class0 = Integer.class;
      ClassPathResource classPathResource0 = new ClassPathResource((String) null, classLoader0, class0);
      // Undeclared exception!
      try { 
        externalResource0.equals(classPathResource0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.resource.ClassPathResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassPathResource classPathResource0 = new ClassPathResource("Pkt/la)\"x", classLoader0);
      // Undeclared exception!
      try { 
        classPathResource0.createRelative((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.utils.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Object> class0 = Object.class;
      ClassPathResource classPathResource0 = new ClassPathResource((String) null, classLoader0, class0);
      // Undeclared exception!
      try { 
        classPathResource0.contentLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassPathResource classPathResource0 = new ClassPathResource("o7i*)e~{- TOzgXOq`v", classLoader0);
      try { 
        classPathResource0.contentLength();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // class path resource [o7i*)e~{- TOzgXOq`v] cannot be resolved to URL because it does not exist
         //
         verifyException("spark.resource.ClassPathResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource("Vqo&GMBKm/oET+/)|i");
      ExternalResource externalResource1 = new ExternalResource("Gtl VMHLb/pAN4((qj");
      boolean boolean0 = externalResource0.equals(externalResource1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource("external resource [/media/sonMya/extradrive1/toga-evalissta-2023/toga-eval/artiacts/spark/..]");
      ExternalResource externalResource1 = new ExternalResource("external resource [/media/sonMya/extradrive1/toga-evalissta-2023/toga-eval/artiacts/spark/..]");
      boolean boolean0 = externalResource0.equals(externalResource1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource("external resource [/media/sonMya/extradrive1/toga-evalissta-2023/toga-eval/artiacts/spark/..]");
      boolean boolean0 = externalResource0.equals("external resource [/media/sonMya/extradrive1/toga-evalissta-2023/toga-eval/artiacts/spark/..]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassPathResource classPathResource0 = new ClassPathResource("");
      try { 
        classPathResource0.lastModified();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // class path resource [] cannot be resolved in the file system for resolving its last-modified timestamp
         //
         verifyException("spark.resource.AbstractResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource("Vqo&GMBKm/oET+/)|i");
      URI uRI0 = externalResource0.getURI();
      assertNull(uRI0.getRawUserInfo());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<ClassPathResource> class0 = ClassPathResource.class;
      ClassPathResource classPathResource0 = new ClassPathResource((String) null, classLoader0, class0);
      // Undeclared exception!
      try { 
        classPathResource0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.resource.ClassPathResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource("");
      try { 
        externalResource0.createRelative("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Cannot create a relative resource for external resource [/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/spark]
         //
         verifyException("spark.resource.AbstractResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource("Vqo&GMBKm/oET+/)|i");
      externalResource0.hashCode();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource("");
      boolean boolean0 = externalResource0.isOpen();
      assertFalse(boolean0);
  }
}
