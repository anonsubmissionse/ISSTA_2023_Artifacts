/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 06 17:08:45 GMT 2022
 */

package spark.servlet;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import javax.servlet.FilterConfig;
import javax.servlet.ServletRequestWrapper;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletRequestWrapper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import spark.servlet.FilterTools;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FilterTools_ESTest extends FilterTools_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("q n'D2U/Lu").when(httpServletRequest0).getContextPath();
      doReturn("").when(httpServletRequest0).getRequestURI();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      // Undeclared exception!
      try { 
        FilterTools.getRelativePath(httpServletRequestWrapper0, "\"#`laMW*@|");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      httpServletRequestWrapper0.setRequest(httpServletRequestWrapper0);
      // Undeclared exception!
      try { 
        FilterTools.getRelativePath(httpServletRequestWrapper0, "/*");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getContextPath();
      doReturn((String) null).when(httpServletRequest0).getRequestURI();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      // Undeclared exception!
      try { 
        FilterTools.getRelativePath(httpServletRequestWrapper0, "ng@eLi@`Qmnyf22c");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.servlet.FilterTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("0U#-", (String) null).when(httpServletRequest0).getContextPath();
      doReturn("0U#-", (String) null).when(httpServletRequest0).getRequestURI();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      FilterTools.getRelativePath(httpServletRequestWrapper0, "%h3LQt@,_io}b\"7:d");
      // Undeclared exception!
      try { 
        FilterTools.getRelativePath(httpServletRequestWrapper0, "/");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.servlet.FilterTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(httpServletRequestWrapper0);
      httpServletRequestWrapper0.setRequest(servletRequestWrapper0);
      // Undeclared exception!
      try { 
        FilterTools.getRelativePath(httpServletRequestWrapper0, "");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        FilterTools.getFilterPath((FilterConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.servlet.FilterTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FilterConfig filterConfig0 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());
      doReturn("//*").when(filterConfig0).getInitParameter(anyString());
      String string0 = FilterTools.getFilterPath(filterConfig0);
      assertEquals("/", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FilterConfig filterConfig0 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());
      doReturn("/+").when(filterConfig0).getInitParameter(anyString());
      // Undeclared exception!
      try { 
        FilterTools.getFilterPath(filterConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The filterMappingUrlPattern must start with \"/\" and end with \"/*\". It's: /+
         //
         verifyException("spark.servlet.FilterTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FilterConfig filterConfig0 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());
      doReturn("/*").when(filterConfig0).getInitParameter(anyString());
      String string0 = FilterTools.getFilterPath(filterConfig0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FilterConfig filterConfig0 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());
      doReturn("0").when(filterConfig0).getInitParameter(anyString());
      // Undeclared exception!
      try { 
        FilterTools.getFilterPath(filterConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The filterMappingUrlPattern must start with \"/\" and end with \"/*\". It's: 0
         //
         verifyException("spark.servlet.FilterTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FilterConfig filterConfig0 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterConfig0).getInitParameter(anyString());
      String string0 = FilterTools.getFilterPath(filterConfig0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("Hj!").when(httpServletRequest0).getContextPath();
      doReturn("/eZ\"/?y+{b_;q+5;o").when(httpServletRequest0).getRequestURI();
      String string0 = FilterTools.getRelativePath(httpServletRequest0, "Hj!");
      assertEquals("/?y {b_;q 5;o", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("").when(httpServletRequest0).getContextPath();
      doReturn("40N'rvSk2c0V^x(D}t").when(httpServletRequest0).getRequestURI();
      String string0 = FilterTools.getRelativePath(httpServletRequest0, "");
      assertEquals("/0N'rvSk2c0V^x(D}t", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("0", "0", "0", "0").when(httpServletRequest0).getContextPath();
      doReturn("0", "0", "0", "g@@xVYez`Wvo5").when(httpServletRequest0).getRequestURI();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      FilterTools.getRelativePath(httpServletRequestWrapper0, "g@@xVYez`Wvo5");
      String string0 = FilterTools.getRelativePath(httpServletRequestWrapper0, "/");
      assertEquals("/", string0);
      
      FilterTools.getRelativePath(httpServletRequestWrapper0, "0");
      String string1 = FilterTools.getRelativePath(httpServletRequestWrapper0, "[");
      assertEquals("/@xVYez`Wvo5", string1);
  }
}
