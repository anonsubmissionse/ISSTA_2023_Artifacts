/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 06 16:48:44 GMT 2022
 */

package spark;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.SQLTransientConnectionException;
import java.time.ZoneId;
import java.util.Deque;
import java.util.List;
import java.util.Map;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.function.Consumer;
import org.eclipse.jetty.http.BadMessageException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import spark.ExceptionHandler;
import spark.FilterImpl;
import spark.ResponseTransformer;
import spark.ResponseTransformerRouteImpl;
import spark.Route;
import spark.RouteGroup;
import spark.RouteImpl;
import spark.Service;
import spark.TemplateEngine;
import spark.TemplateViewRoute;
import spark.TemplateViewRouteImpl;
import spark.route.HttpMethod;
import spark.route.Routes;
import spark.routematch.RouteMatch;
import spark.ssl.SslStores;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Service_ESTest extends Service_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      Service service1 = service0.secure("", "", "", "", "", true);
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", (TemplateViewRoute) null, templateEngine0);
      assertNotNull(templateViewRouteImpl0);
      
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", (Route) templateViewRouteImpl0, responseTransformer0);
      assertNotNull(responseTransformerRouteImpl0);
      
      service0.addRoute("", (RouteImpl) responseTransformerRouteImpl0);
      assertSame(service0, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      // Undeclared exception!
      try { 
        service1.staticFileLocation("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      String string0 = "s";
      Route route0 = null;
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("s", "s", (Route) null, responseTransformer0);
      assertNotNull(responseTransformerRouteImpl0);
      
      service0.addRoute("s", (RouteImpl) responseTransformerRouteImpl0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      // Undeclared exception!
      try { 
        service0.externalStaticFileLocation("s");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      service0.init();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      RouteGroup routeGroup0 = mock(RouteGroup.class, new ViolatedAssumptionAnswer());
      service0.path("connect", routeGroup0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      service0.awaitStop();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      // Undeclared exception!
      try { 
        service0.halt("\n</body>\n</html>\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      String string0 = "ZOx4p:Uj5yF!\\JEaB]A";
      Service service1 = service0.ipAddress("ZOx4p:Uj5yF!JEaB]A");
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      Service service2 = service1.webSocketIdleTimeoutMillis(3419);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
      
      String string1 = "";
      service2.stop();
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      String string2 = "";
      Service service3 = service2.secure(string0, string1, string2, string0);
      assertSame(service0, service1);
      assertSame(service0, service3);
      assertSame(service0, service2);
      assertSame(service1, service0);
      assertSame(service1, service3);
      assertSame(service1, service2);
      assertSame(service2, service0);
      assertSame(service2, service3);
      assertSame(service2, service1);
      assertSame(service3, service1);
      assertSame(service3, service0);
      assertSame(service3, service2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service3);
      
      String string3 = "";
      String string4 = "";
      boolean boolean0 = true;
      service1.initialized = boolean0;
      // Undeclared exception!
      try { 
        service3.secure(string0, string1, string3, string4, string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      BadMessageException badMessageException0 = new BadMessageException();
      assertNotNull(badMessageException0);
      
      HttpMethod httpMethod0 = HttpMethod.post;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((FilterImpl) null).when(filterImpl0).withPrefix(anyString());
      // Undeclared exception!
      try { 
        service0.addFilter(httpMethod0, filterImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.route.Routes", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      Service service1 = service0.staticFileLocation("");
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      Service service2 = service1.threadPool(4567, (-4302), (-4302));
      assertSame(service0, service2);
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      Service service1 = service0.staticFileLocation("/GYNN6");
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      HttpMethod httpMethod0 = HttpMethod.options;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("server interrupted").when(filterImpl0).toString();
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service1.addFilter(httpMethod0, filterImpl1);
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl2).getAcceptType();
      doReturn("server interrupted").when(filterImpl2).getPath();
      boolean boolean0 = service0.unmap("/GYNN6");
      assertTrue(boolean0);
      assertSame(service0, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      service1.addFilter("/GYNN6", filterImpl2);
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      int int0 = service0.port();
      assertEquals(4567, int0);
      assertSame(service0, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      // Undeclared exception!
      try { 
        service0.threadPool(4567, 124, 4567);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      Service service1 = service0.externalStaticFileLocation("/*");
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      service0.staticFiles.header("/*", (String) null);
      assertSame(service0, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      Consumer<Exception> consumer0 = (Consumer<Exception>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      service0.initExceptionHandler(consumer0);
      assertSame(service0, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      String string0 = "No protoco factr for defaut protoco '";
      System.setCurrentTimeMillis(4567);
      // Undeclared exception!
      try { 
        service0.webSocket((String) null, (Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // WebSocket handler class cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      Service service1 = service0.secure(" 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL");
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, (String) null, templateViewRoute0, templateEngine0);
      assertNotNull(templateViewRouteImpl0);
      
      Service service2 = service1.port(2119);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service2);
      assertSame(service1, service0);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
      
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create((String) null, (Route) templateViewRouteImpl0, responseTransformer0);
      assertNotNull(responseTransformerRouteImpl0);
      
      service1.addRoute((String) null, (RouteImpl) templateViewRouteImpl0);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service2);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      int int0 = service0.port();
      assertEquals(2119, int0);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      RouteGroup routeGroup0 = mock(RouteGroup.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        service1.embeddedServerIdentifier((Object) service0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      Service service1 = service0.staticFileLocation("/GYNN6");
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service2);
      assertSame(service1, service0);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
      
      Service service3 = service2.port(4567);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service0, service3);
      assertSame(service1, service2);
      assertSame(service1, service3);
      assertSame(service1, service0);
      assertSame(service2, service3);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertSame(service3, service0);
      assertSame(service3, service1);
      assertSame(service3, service2);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service3);
      
      HttpMethod httpMethod0 = HttpMethod.options;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl0).toString();
      doReturn("/GYNN6").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service2.addFilter(httpMethod0, filterImpl1);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service0, service3);
      assertSame(service1, service2);
      assertSame(service1, service3);
      assertSame(service1, service0);
      assertSame(service2, service3);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl2).getAcceptType();
      doReturn("server interrupted").when(filterImpl2).getPath();
      List<RouteMatch> list0 = service1.routes();
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service0, service3);
      assertSame(service1, service2);
      assertSame(service1, service3);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(list0);
      
      service3.addFilter("/GYNN6", filterImpl2);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service0, service3);
      assertSame(service1, service2);
      assertSame(service1, service3);
      assertSame(service1, service0);
      assertSame(service2, service3);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertSame(service3, service0);
      assertSame(service3, service1);
      assertSame(service3, service2);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      // Undeclared exception!
      try { 
        service0.threadPool(4567, 124, 4567);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@?#>!|B%<");
      assertFalse(boolean0);
      
      Service service1 = service0.port(1);
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      Routes routes0 = Routes.create();
      assertNotNull(routes0);
      
      service0.routes = routes0;
      String string0 = "";
      int int0 = Service.SPARK_DEFAULT_PORT;
      assertEquals(4567, int0);
      
      String string1 = "spark.Service";
      Service service2 = service0.secure("", "", "", "", "spark.Service");
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
      
      // Undeclared exception!
      try { 
        service2.unmap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // path cannot be null or blank
         //
         verifyException("spark.route.Routes", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service2, service1);
      assertSame(service2, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
      
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      assertNotNull(delayQueue0);
      
      Delayed delayed0 = delayQueue0.poll();
      assertNull(delayed0);
      
      service2.embeddedServerIdentifier((Object) delayed0);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service2, service1);
      assertSame(service2, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      assertSame(service0, service3);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service1, service3);
      assertSame(service3, service0);
      assertSame(service3, service1);
      assertSame(service3, service2);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service3);
      
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      assertSame(service0, service3);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service1, service3);
      assertSame(service3, service0);
      assertSame(service3, service1);
      assertSame(service3, service2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      service3.initExceptionHandler(consumer0);
      assertSame(service0, service3);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service1, service3);
      assertSame(service3, service0);
      assertSame(service3, service1);
      assertSame(service3, service2);
      assertFalse(string0.equals((Object)string2));
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      service3.internalServerError(string1);
      assertSame(service0, service3);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service1, service3);
      assertSame(service3, service0);
      assertSame(service3, service1);
      assertSame(service3, service2);
      assertFalse(string0.equals((Object)string2));
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      service0.embeddedServerIdentifier();
      assertSame(service0, service3);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      Service service4 = service3.staticFileLocation(string1);
      assertSame(service0, service3);
      assertSame(service0, service1);
      assertSame(service0, service4);
      assertSame(service0, service2);
      assertSame(service4, service0);
      assertSame(service4, service2);
      assertSame(service4, service1);
      assertSame(service4, service3);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service1, service4);
      assertSame(service1, service3);
      assertSame(service3, service0);
      assertSame(service3, service1);
      assertSame(service3, service4);
      assertSame(service3, service2);
      assertFalse(string0.equals((Object)string2));
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service4);
      
      String string3 = "^E";
      service4.notFound(string3);
      assertSame(service0, service3);
      assertSame(service0, service1);
      assertSame(service0, service4);
      assertSame(service0, service2);
      assertSame(service4, service0);
      assertSame(service4, service2);
      assertSame(service4, service1);
      assertSame(service4, service3);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service1, service4);
      assertSame(service1, service3);
      assertSame(service3, service0);
      assertSame(service3, service1);
      assertSame(service3, service4);
      assertSame(service3, service2);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      assertNotNull(service_StaticFiles0);
      
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      assertSame(service0, service3);
      assertSame(service0, service1);
      assertSame(service0, service4);
      assertSame(service0, service2);
      assertSame(service4, service0);
      assertSame(service4, service2);
      assertSame(service4, service1);
      assertSame(service4, service3);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service1, service4);
      assertSame(service1, service3);
      assertSame(service3, service0);
      assertSame(service3, service1);
      assertSame(service3, service4);
      assertSame(service3, service2);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      assertSame(service0, service3);
      assertSame(service0, service1);
      assertSame(service0, service4);
      assertSame(service0, service2);
      assertSame(service4, service0);
      assertSame(service4, service2);
      assertSame(service4, service1);
      assertSame(service4, service3);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service1, service4);
      assertSame(service1, service3);
      assertSame(service3, service0);
      assertSame(service3, service1);
      assertSame(service3, service4);
      assertSame(service3, service2);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      service_StaticFiles0.registerMimeType(string5, string3);
      assertSame(service0, service3);
      assertSame(service0, service1);
      assertSame(service0, service4);
      assertSame(service0, service2);
      assertSame(service4, service0);
      assertSame(service4, service2);
      assertSame(service4, service1);
      assertSame(service4, service3);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service1, service4);
      assertSame(service1, service3);
      assertSame(service3, service0);
      assertSame(service3, service1);
      assertSame(service3, service4);
      assertSame(service3, service2);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      service1.init();
      assertSame(service0, service3);
      assertSame(service0, service1);
      assertSame(service0, service4);
      assertSame(service0, service2);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service1, service4);
      assertSame(service1, service3);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      System.setCurrentTimeMillis(3L);
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      String string0 = null;
      String string1 = "Static file location has already been set";
      Service service1 = service0.secure("video/mpeg", (String) null, "~XH><Jl!>])1?", "Static file location has already been set", "Static file location has already been set");
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      RouteGroup routeGroup0 = mock(RouteGroup.class, new ViolatedAssumptionAnswer());
      service1.path("video/mpeg", routeGroup0);
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      Service service2 = service1.webSocketIdleTimeoutMillis(4567);
      assertSame(service0, service2);
      assertSame(service0, service1);
      assertSame(service1, service2);
      assertSame(service1, service0);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
      
      String string2 = "";
      String string3 = "dlCON}ws_JxNE(UJ";
      String string4 = ",I^PCx\"k;z'1r^9-";
      HttpMethod httpMethod0 = HttpMethod.trace;
      RouteImpl routeImpl0 = null;
      // Undeclared exception!
      try { 
        service2.addRoute(httpMethod0, routeImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      String string0 = " 3!bXoIK5^ZQYfL";
      Service service1 = service0.staticFileLocation(" 3!bXoIK5^ZQYfL");
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, (String) null, templateViewRoute0, templateEngine0);
      assertNotNull(templateViewRouteImpl0);
      
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create((String) null, (Route) templateViewRouteImpl0, responseTransformer0);
      assertNotNull(responseTransformerRouteImpl0);
      
      RouteImpl routeImpl0 = RouteImpl.create((String) null, " 3!bXoIK5^ZQYfL", (Route) responseTransformerRouteImpl0);
      assertNotNull(routeImpl0);
      
      service1.addRoute((String) null, routeImpl0);
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      HttpMethod httpMethod0 = HttpMethod.options;
      Consumer<Exception> consumer0 = (Consumer<Exception>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        service0.initExceptionHandler(consumer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      String string0 = " 3!bXoIhK5^ZQYfL";
      Service service1 = service0.staticFileLocation(" 3!bXoIhK5^ZQYfL");
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, (String) null, templateViewRoute0, templateEngine0);
      assertNotNull(templateViewRouteImpl0);
      
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create((String) null, (Route) templateViewRouteImpl0, responseTransformer0);
      assertNotNull(responseTransformerRouteImpl0);
      
      RouteImpl routeImpl0 = RouteImpl.create((String) null, " 3!bXoIhK5^ZQYfL", (Route) responseTransformerRouteImpl0);
      assertNotNull(routeImpl0);
      
      service1.addRoute((String) null, routeImpl0);
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      HttpMethod httpMethod0 = HttpMethod.options;
      Service service2 = Service.ignite();
      assertNotSame(service2, service0);
      assertNotSame(service2, service1);
      assertFalse(service2.equals((Object)service0));
      assertFalse(service2.equals((Object)service1));
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
      
      int int0 = service0.port();
      assertEquals(4567, int0);
      assertNotSame(service0, service2);
      assertSame(service0, service1);
      assertFalse(service0.equals((Object)service2));
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      // Undeclared exception!
      try { 
        service1.addFilter(httpMethod0, (FilterImpl) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
      
      Service service3 = service2.ipAddress("");
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service0, service3);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service1, service3);
      assertSame(service2, service0);
      assertSame(service2, service3);
      assertSame(service2, service1);
      assertSame(service3, service0);
      assertSame(service3, service1);
      assertSame(service3, service2);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service3);
      
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service0, service3);
      assertSame(service0, service4);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service1, service3);
      assertSame(service1, service4);
      assertSame(service2, service4);
      assertSame(service2, service0);
      assertSame(service2, service3);
      assertSame(service2, service1);
      assertSame(service3, service0);
      assertSame(service3, service1);
      assertSame(service3, service4);
      assertSame(service3, service2);
      assertSame(service4, service0);
      assertSame(service4, service1);
      assertSame(service4, service3);
      assertSame(service4, service2);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service4);
      
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      assertSame(service0, service5);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service0, service3);
      assertSame(service0, service4);
      assertSame(service1, service0);
      assertSame(service1, service5);
      assertSame(service1, service2);
      assertSame(service1, service3);
      assertSame(service1, service4);
      assertSame(service2, service4);
      assertSame(service2, service5);
      assertSame(service2, service0);
      assertSame(service2, service3);
      assertSame(service2, service1);
      assertSame(service3, service0);
      assertSame(service3, service1);
      assertSame(service3, service4);
      assertSame(service3, service5);
      assertSame(service3, service2);
      assertSame(service4, service0);
      assertSame(service4, service1);
      assertSame(service4, service3);
      assertSame(service4, service2);
      assertSame(service4, service5);
      assertSame(service5, service2);
      assertSame(service5, service1);
      assertSame(service5, service0);
      assertSame(service5, service4);
      assertSame(service5, service3);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service5);
      
      service5.init();
      assertSame(service0, service5);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service0, service3);
      assertSame(service0, service4);
      assertSame(service1, service0);
      assertSame(service1, service5);
      assertSame(service1, service2);
      assertSame(service1, service3);
      assertSame(service1, service4);
      assertSame(service2, service4);
      assertSame(service2, service5);
      assertSame(service2, service0);
      assertSame(service2, service3);
      assertSame(service2, service1);
      assertSame(service3, service0);
      assertSame(service3, service1);
      assertSame(service3, service4);
      assertSame(service3, service5);
      assertSame(service3, service2);
      assertSame(service4, service0);
      assertSame(service4, service1);
      assertSame(service4, service3);
      assertSame(service4, service2);
      assertSame(service4, service5);
      assertSame(service5, service2);
      assertSame(service5, service1);
      assertSame(service5, service0);
      assertSame(service5, service4);
      assertSame(service5, service3);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      int int0 = service5.activeThreadCount();
      assertEquals(0, int0);
      assertSame(service0, service5);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service0, service3);
      assertSame(service0, service4);
      assertSame(service1, service0);
      assertSame(service1, service5);
      assertSame(service1, service2);
      assertSame(service1, service3);
      assertSame(service1, service4);
      assertSame(service2, service4);
      assertSame(service2, service5);
      assertSame(service2, service0);
      assertSame(service2, service3);
      assertSame(service2, service1);
      assertSame(service3, service0);
      assertSame(service3, service1);
      assertSame(service3, service4);
      assertSame(service3, service5);
      assertSame(service3, service2);
      assertSame(service4, service0);
      assertSame(service4, service1);
      assertSame(service4, service3);
      assertSame(service4, service2);
      assertSame(service4, service5);
      assertSame(service5, service2);
      assertSame(service5, service1);
      assertSame(service5, service0);
      assertSame(service5, service4);
      assertSame(service5, service3);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      assertNotNull(templateViewRouteImpl0);
      
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      assertNotNull(routeImpl0);
      
      service1.addRoute("", routeImpl0);
      assertSame(service0, service5);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service0, service3);
      assertSame(service0, service4);
      assertSame(service1, service0);
      assertSame(service1, service5);
      assertSame(service1, service2);
      assertSame(service1, service3);
      assertSame(service1, service4);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      assertSame(service0, service5);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service0, service3);
      assertSame(service0, service4);
      assertSame(service1, service0);
      assertSame(service1, service5);
      assertSame(service1, service2);
      assertSame(service1, service3);
      assertSame(service1, service4);
      assertSame(service2, service4);
      assertSame(service2, service5);
      assertSame(service2, service0);
      assertSame(service2, service3);
      assertSame(service2, service1);
      assertSame(service3, service0);
      assertSame(service3, service1);
      assertSame(service3, service4);
      assertSame(service3, service5);
      assertSame(service3, service2);
      assertSame(service4, service0);
      assertSame(service4, service1);
      assertSame(service4, service3);
      assertSame(service4, service2);
      assertSame(service4, service5);
      assertSame(service5, service2);
      assertSame(service5, service1);
      assertSame(service5, service0);
      assertSame(service5, service4);
      assertSame(service5, service3);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      service3.notFound("");
      assertSame(service0, service5);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service0, service3);
      assertSame(service0, service4);
      assertSame(service1, service0);
      assertSame(service1, service5);
      assertSame(service1, service2);
      assertSame(service1, service3);
      assertSame(service1, service4);
      assertSame(service2, service4);
      assertSame(service2, service5);
      assertSame(service2, service0);
      assertSame(service2, service3);
      assertSame(service2, service1);
      assertSame(service3, service0);
      assertSame(service3, service1);
      assertSame(service3, service4);
      assertSame(service3, service5);
      assertSame(service3, service2);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      Service.StaticFiles service_StaticFiles0 = service0.new StaticFiles();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service_StaticFiles0);
      
      service_StaticFiles0.header("Zw", "");
      assertSame(service0, service5);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service0, service3);
      assertSame(service0, service4);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      String string0 = service3.getPaths();
      assertEquals("", string0);
      assertSame(service0, service5);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service0, service3);
      assertSame(service0, service4);
      assertSame(service1, service0);
      assertSame(service1, service5);
      assertSame(service1, service2);
      assertSame(service1, service3);
      assertSame(service1, service4);
      assertSame(service2, service4);
      assertSame(service2, service5);
      assertSame(service2, service0);
      assertSame(service2, service3);
      assertSame(service2, service1);
      assertSame(service3, service0);
      assertSame(service3, service1);
      assertSame(service3, service4);
      assertSame(service3, service5);
      assertSame(service3, service2);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(string0);
      
      service2.internalServerError("");
      assertSame(service0, service5);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service0, service3);
      assertSame(service0, service4);
      assertSame(service1, service0);
      assertSame(service1, service5);
      assertSame(service1, service2);
      assertSame(service1, service3);
      assertSame(service1, service4);
      assertSame(service2, service4);
      assertSame(service2, service5);
      assertSame(service2, service0);
      assertSame(service2, service3);
      assertSame(service2, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      // Undeclared exception!
      try { 
        service1.externalStaticFileLocation("'");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      Service service1 = service0.webSocketIdleTimeoutMillis(1437);
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      service1.awaitStop();
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      String string0 = "";
      Service service2 = service1.ipAddress(string0);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service2);
      assertSame(service1, service0);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
      
      String string1 = "gZ";
      String string2 = "";
      service1.init();
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service2);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      String string3 = "";
      String string4 = "Bc&b;M^s_Z";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        service2.secure(string1, string0, string2, string3, string4, boolean0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      String string0 = "";
      Service service1 = service0.staticFileLocation("");
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      service0.init();
      assertSame(service0, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      // Undeclared exception!
      try { 
        service1.threadPool(4567, (-4344), (-4344));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      String string0 = "";
      Service service1 = service0.ipAddress("");
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      Service service2 = service1.staticFileLocation("");
      assertSame(service0, service2);
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service2, service1);
      assertSame(service2, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
      
      Service service3 = service2.port(4567);
      assertSame(service0, service3);
      assertSame(service0, service2);
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service1, service3);
      assertSame(service2, service1);
      assertSame(service2, service3);
      assertSame(service2, service0);
      assertSame(service3, service1);
      assertSame(service3, service2);
      assertSame(service3, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service3);
      
      String string1 = "[]";
      String string2 = null;
      String string3 = "E_uLuVwxIdjOu\\a";
      // Undeclared exception!
      try { 
        service2.webSocket("[]", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // WebSocket handler cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      Service service2 = service1.threadPool(1249, 4567, 4603);
      assertSame(service0, service2);
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
      
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      assertSame(service0, service3);
      assertSame(service0, service2);
      assertSame(service0, service1);
      assertSame(service1, service3);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertSame(service2, service3);
      assertSame(service3, service2);
      assertSame(service3, service0);
      assertSame(service3, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service3);
      
      service2.initialized = boolean0;
      Service.StaticFiles service_StaticFiles0 = service2.staticFiles;
      assertNotNull(service_StaticFiles0);
      
      service_StaticFiles0.expireTime(service3.SPARK_DEFAULT_PORT);
      assertSame(service0, service3);
      assertSame(service0, service2);
      assertSame(service0, service1);
      assertSame(service1, service3);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertSame(service2, service3);
      assertSame(service3, service2);
      assertSame(service3, service0);
      assertSame(service3, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      String string0 = "Uc7(QT*";
      String string1 = "U*QWVX|Z%(DG|<7Q]?7";
      service_StaticFiles0.registerMimeType(string0, string1);
      assertSame(service0, service3);
      assertSame(service0, service2);
      assertSame(service0, service1);
      assertSame(service1, service3);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertSame(service2, service3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      service0.init();
      assertSame(service0, service3);
      assertSame(service0, service2);
      assertSame(service0, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      String string2 = "";
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      assertNotNull(linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque0.contains(""));
      
      HttpMethod httpMethod0 = HttpMethod.trace;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      List<RouteMatch> list0 = service0.routes();
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertSame(service0, service3);
      assertSame(service0, service2);
      assertSame(service0, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(list0);
      
      service0.addFilter(httpMethod0, filterImpl1);
      assertSame(service0, service3);
      assertSame(service0, service2);
      assertSame(service0, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      service0.pathDeque = (Deque<String>) linkedBlockingDeque0;
      assertEquals(0, service0.pathDeque.size());
      
      // Undeclared exception!
      try { 
        service0.halt(string2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      String string0 = "3 ]!E$9N,gJ!z-";
      // Undeclared exception!
      try { 
        service0.addFilter("3 ]!E$9N,gJ!z-", (FilterImpl) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      Service service2 = Service.ignite();
      assertNotSame(service2, service0);
      assertNotSame(service2, service1);
      assertFalse(service2.equals((Object)service0));
      assertFalse(service2.equals((Object)service1));
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
      
      String string2 = "WCQMV_q/C{|ET5";
      Service service3 = service1.secure("o.c", ">arj+Q$_eK2", ">arj+Q$_eK2", ">arj+Q$_eK2", false);
      assertNotSame(service0, service2);
      assertSame(service0, service1);
      assertSame(service0, service3);
      assertSame(service1, service3);
      assertSame(service1, service0);
      assertNotSame(service1, service2);
      assertNotSame(service3, service2);
      assertSame(service3, service0);
      assertSame(service3, service1);
      assertFalse(service0.equals((Object)service2));
      assertFalse(service1.equals((Object)service2));
      assertFalse(service3.equals((Object)service2));
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service3);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Service service4 = service2.ipAddress("WebSocket path cannot be null");
      assertSame(service2, service4);
      assertNotSame(service2, service3);
      assertNotSame(service2, service0);
      assertNotSame(service2, service1);
      assertNotSame(service4, service0);
      assertNotSame(service4, service1);
      assertSame(service4, service2);
      assertNotSame(service4, service3);
      assertFalse(service2.equals((Object)service3));
      assertFalse(service2.equals((Object)service0));
      assertFalse(service2.equals((Object)service1));
      assertFalse(service4.equals((Object)service0));
      assertFalse(service4.equals((Object)service1));
      assertFalse(service4.equals((Object)service3));
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service4);
      
      String string3 = "STARTING";
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("STARTING", (Route) null, responseTransformer0);
      assertNotNull(responseTransformerRouteImpl0);
      
      service1.addRoute("STARTING", (RouteImpl) responseTransformerRouteImpl0);
      assertNotSame(service0, service2);
      assertSame(service0, service1);
      assertSame(service0, service3);
      assertNotSame(service0, service4);
      assertSame(service1, service3);
      assertNotSame(service1, service4);
      assertSame(service1, service0);
      assertNotSame(service1, service2);
      assertFalse(service0.equals((Object)service2));
      assertFalse(service0.equals((Object)service4));
      assertFalse(service1.equals((Object)service4));
      assertFalse(service1.equals((Object)service2));
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      // Undeclared exception!
      try { 
        service1.secure("WCQMV_q/C{|ET5", ">arj+Q$_eK2", "WCQMV_q/C{|ET5", "WCQMV_q/C{|ET5", false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      Service service1 = service0.port((-2003));
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      Service service2 = service1.externalStaticFileLocation("");
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service2);
      assertSame(service1, service0);
      assertSame(service2, service1);
      assertSame(service2, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
      
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      assertSame(service0, service1);
      assertSame(service0, service3);
      assertSame(service0, service2);
      assertSame(service1, service3);
      assertSame(service1, service2);
      assertSame(service1, service0);
      assertSame(service2, service1);
      assertSame(service2, service3);
      assertSame(service2, service0);
      assertSame(service3, service1);
      assertSame(service3, service0);
      assertSame(service3, service2);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service3);
      
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service_StaticFiles0);
      
      service_StaticFiles0.externalLocation("");
      assertSame(service0, service1);
      assertSame(service0, service3);
      assertSame(service0, service2);
      assertSame(service1, service3);
      assertSame(service1, service2);
      assertSame(service1, service0);
      assertSame(service2, service1);
      assertSame(service2, service3);
      assertSame(service2, service0);
      assertSame(service3, service1);
      assertSame(service3, service0);
      assertSame(service3, service2);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      Service service4 = service2.secure("WebSocket path cannot be null", "", "log", "/.n898\"7# 8S@)", ".L0X5FD%!{mbfA0'j");
      assertSame(service0, service1);
      assertSame(service0, service4);
      assertSame(service0, service3);
      assertSame(service0, service2);
      assertSame(service1, service4);
      assertSame(service1, service3);
      assertSame(service1, service2);
      assertSame(service1, service0);
      assertSame(service2, service4);
      assertSame(service2, service1);
      assertSame(service2, service3);
      assertSame(service2, service0);
      assertSame(service4, service3);
      assertSame(service4, service0);
      assertSame(service4, service1);
      assertSame(service4, service2);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service4);
      
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", "", templateViewRoute0, templateEngine0);
      assertNotNull(templateViewRouteImpl0);
      
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      assertNotNull(routeImpl0);
      
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", (Route) routeImpl0, responseTransformer0);
      assertNotNull(responseTransformerRouteImpl0);
      
      RouteImpl routeImpl1 = RouteImpl.create("log", "", (Route) responseTransformerRouteImpl0);
      assertNotSame(routeImpl0, routeImpl1);
      assertNotSame(routeImpl1, routeImpl0);
      assertFalse(routeImpl1.equals((Object)routeImpl0));
      assertNotNull(routeImpl1);
      
      service4.addRoute("", routeImpl1);
      assertSame(service0, service1);
      assertSame(service0, service4);
      assertSame(service0, service3);
      assertSame(service0, service2);
      assertSame(service1, service4);
      assertSame(service1, service3);
      assertSame(service1, service2);
      assertSame(service1, service0);
      assertSame(service2, service4);
      assertSame(service2, service1);
      assertSame(service2, service3);
      assertSame(service2, service0);
      assertSame(service4, service3);
      assertSame(service4, service0);
      assertSame(service4, service1);
      assertSame(service4, service2);
      assertNotSame(routeImpl0, routeImpl1);
      assertNotSame(routeImpl1, routeImpl0);
      assertFalse(routeImpl0.equals((Object)routeImpl1));
      assertFalse(routeImpl1.equals((Object)routeImpl0));
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      // Undeclared exception!
      try { 
        service1.webSocketIdleTimeoutMillis(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      Service service1 = service0.externalStaticFileLocation("");
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      assertSame(service0, service2);
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service2, service1);
      assertSame(service2, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
      
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      assertSame(service0, service2);
      assertSame(service0, service3);
      assertSame(service0, service1);
      assertSame(service1, service3);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service2, service3);
      assertSame(service2, service1);
      assertSame(service2, service0);
      assertSame(service3, service0);
      assertSame(service3, service1);
      assertSame(service3, service2);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service3);
      
      HttpMethod httpMethod0 = HttpMethod.put;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service3.addFilter(httpMethod0, filterImpl1);
      assertSame(service0, service2);
      assertSame(service0, service3);
      assertSame(service0, service1);
      assertSame(service1, service3);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service2, service3);
      assertSame(service2, service1);
      assertSame(service2, service0);
      assertSame(service3, service0);
      assertSame(service3, service1);
      assertSame(service3, service2);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl2).getAcceptType();
      doReturn((String) null).when(filterImpl2).getPath();
      service2.addFilter("delayDispatchUntilContent=", filterImpl2);
      assertSame(service0, service2);
      assertSame(service0, service3);
      assertSame(service0, service1);
      assertSame(service1, service3);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service2, service3);
      assertSame(service2, service1);
      assertSame(service2, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      String string0 = service3.getPaths();
      assertEquals("", string0);
      assertSame(service0, service2);
      assertSame(service0, service3);
      assertSame(service0, service1);
      assertSame(service1, service3);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service2, service3);
      assertSame(service2, service1);
      assertSame(service2, service0);
      assertSame(service3, service0);
      assertSame(service3, service1);
      assertSame(service3, service2);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        service2.webSocketIdleTimeoutMillis(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      int int0 = (-5423);
      Service service1 = service0.port((-5423));
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      // Undeclared exception!
      try { 
        service0.addRoute((String) null, (RouteImpl) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      Service service1 = service0.secure("", "", "6bUJ3o{3E:+a$", "", " = ? and r.", true);
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      assertNotNull(templateViewRouteImpl0);
      
      service0.addRoute("V+w", (RouteImpl) templateViewRouteImpl0);
      assertSame(service0, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      service0.notFound("STARTED @{}ms {}");
      assertSame(service0, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      service0.notFound((String) null);
      assertSame(service0, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      service0.init();
      assertSame(service0, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      int int0 = service0.activeThreadCount();
      assertEquals(0, int0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      Service service1 = service0.webSocketIdleTimeoutMillis((-3824));
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service_StaticFiles0);
      
      String string0 = "[lm=";
      String string1 = "-org.eclipse.jetty.util.log.";
      boolean boolean0 = false;
      SslStores sslStores0 = SslStores.create(string0, string0, string0, string0, string1, boolean0);
      assertEquals("[lm=", sslStores0.keystoreFile());
      assertEquals("[lm=", sslStores0.trustStoreFile());
      assertEquals("[lm=", sslStores0.keystorePassword());
      assertFalse(sslStores0.needsClientCert());
      assertEquals("[lm=", sslStores0.certAlias());
      assertEquals("-org.eclipse.jetty.util.log.", sslStores0.trustStorePassword());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(sslStores0);
      
      service1.sslStores = sslStores0;
      assertEquals("[lm=", sslStores0.keystoreFile());
      assertEquals("[lm=", sslStores0.trustStoreFile());
      assertEquals("[lm=", sslStores0.keystorePassword());
      assertFalse(sslStores0.needsClientCert());
      assertEquals("[lm=", sslStores0.certAlias());
      assertEquals("-org.eclipse.jetty.util.log.", sslStores0.trustStorePassword());
      assertEquals("[lm=", service1.sslStores.trustStoreFile());
      assertEquals("[lm=", service1.sslStores.keystorePassword());
      assertEquals("[lm=", service1.sslStores.certAlias());
      assertEquals("-org.eclipse.jetty.util.log.", service1.sslStores.trustStorePassword());
      assertEquals("[lm=", service1.sslStores.keystoreFile());
      assertFalse(service1.sslStores.needsClientCert());
      
      String string2 = null;
      String string3 = "$#s PJW{3~(";
      service_StaticFiles0.header(string2, string3);
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      String string4 = "PEgs";
      service_StaticFiles0.header(string4, string4);
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      RouteGroup routeGroup0 = mock(RouteGroup.class, new ViolatedAssumptionAnswer());
      service0.path(string4, routeGroup0);
      assertSame(service0, service1);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      String string5 = "";
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      service1.addFilter(string5, filterImpl0);
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      // Undeclared exception!
      try { 
        service0.embeddedServerIdentifier((Object) string2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      String string0 = "";
      Service service2 = service1.externalStaticFileLocation("");
      assertSame(service0, service2);
      assertSame(service0, service1);
      assertSame(service1, service2);
      assertSame(service1, service0);
      assertSame(service2, service1);
      assertSame(service2, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
      
      String string1 = "RP*jz/";
      HttpMethod httpMethod0 = HttpMethod.afterafter;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      assertNotNull(templateViewRouteImpl0);
      
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("ignite failed", "jNtY%XXr-Q<M", (Route) templateViewRouteImpl0, responseTransformer0);
      assertNotNull(responseTransformerRouteImpl0);
      
      RouteImpl routeImpl0 = responseTransformerRouteImpl0.withPrefix("jNtY%XXr-Q<M");
      assertNotNull(routeImpl0);
      
      service2.addRoute(httpMethod0, routeImpl0);
      assertSame(service0, service2);
      assertSame(service0, service1);
      assertSame(service1, service2);
      assertSame(service1, service0);
      assertSame(service2, service1);
      assertSame(service2, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      Route route0 = null;
      service1.internalServerError((Route) null);
      assertSame(service0, service2);
      assertSame(service0, service1);
      assertSame(service1, service2);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      Service service3 = Service.ignite();
      assertNotSame(service3, service1);
      assertNotSame(service3, service2);
      assertNotSame(service3, service0);
      assertFalse(service3.equals((Object)service1));
      assertFalse(service3.equals((Object)service2));
      assertFalse(service3.equals((Object)service0));
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service3);
      
      int int1 = service2.port();
      assertEquals(4567, int1);
      assertSame(service0, service2);
      assertNotSame(service0, service3);
      assertSame(service0, service1);
      assertSame(service1, service2);
      assertSame(service1, service0);
      assertNotSame(service1, service3);
      assertSame(service2, service1);
      assertNotSame(service2, service3);
      assertSame(service2, service0);
      assertFalse(service0.equals((Object)service3));
      assertFalse(int1 == int0);
      assertFalse(service1.equals((Object)service3));
      assertFalse(service2.equals((Object)service3));
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      // Undeclared exception!
      try { 
        service2.secure("RP*jz/", "", "RP*jz/", "server interrupted", "D&m?(}@oelFR>.");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service2, service1);
      assertSame(service2, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
      
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      assertSame(service0, service3);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service1, service3);
      assertSame(service2, service3);
      assertSame(service2, service1);
      assertSame(service2, service0);
      assertSame(service3, service2);
      assertSame(service3, service0);
      assertSame(service3, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service3);
      
      Service service4 = service3.port(0);
      assertSame(service0, service4);
      assertSame(service0, service3);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service1, service3);
      assertSame(service1, service4);
      assertSame(service2, service3);
      assertSame(service2, service1);
      assertSame(service2, service4);
      assertSame(service2, service0);
      assertSame(service3, service2);
      assertSame(service3, service0);
      assertSame(service3, service1);
      assertSame(service3, service4);
      assertSame(service4, service2);
      assertSame(service4, service1);
      assertSame(service4, service0);
      assertSame(service4, service3);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service4);
      
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      assertNotNull(service_StaticFiles0);
      
      service_StaticFiles0.location("vu@FT:cz~_w");
      assertSame(service0, service4);
      assertSame(service0, service3);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service1, service3);
      assertSame(service1, service4);
      assertSame(service2, service3);
      assertSame(service2, service1);
      assertSame(service2, service4);
      assertSame(service2, service0);
      assertSame(service3, service2);
      assertSame(service3, service0);
      assertSame(service3, service1);
      assertSame(service3, service4);
      assertSame(service4, service2);
      assertSame(service4, service1);
      assertSame(service4, service0);
      assertSame(service4, service3);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      Service service1 = service0.threadPool(1799, 1799, 1799);
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      assertSame(service0, service2);
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
      
      Service service3 = service2.threadPool(1799);
      assertSame(service0, service2);
      assertSame(service0, service3);
      assertSame(service0, service1);
      assertSame(service1, service3);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertSame(service2, service3);
      assertSame(service3, service1);
      assertSame(service3, service0);
      assertSame(service3, service2);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service3);
      
      Service service4 = service3.staticFileLocation("; Secure");
      assertSame(service0, service2);
      assertSame(service0, service3);
      assertSame(service0, service1);
      assertSame(service0, service4);
      assertSame(service1, service4);
      assertSame(service1, service3);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertSame(service2, service3);
      assertSame(service2, service4);
      assertSame(service3, service1);
      assertSame(service3, service0);
      assertSame(service3, service2);
      assertSame(service3, service4);
      assertSame(service4, service0);
      assertSame(service4, service1);
      assertSame(service4, service3);
      assertSame(service4, service2);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service4);
      
      int int0 = service4.activeThreadCount();
      assertEquals(0, int0);
      assertSame(service0, service2);
      assertSame(service0, service3);
      assertSame(service0, service1);
      assertSame(service0, service4);
      assertSame(service1, service4);
      assertSame(service1, service3);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertSame(service2, service3);
      assertSame(service2, service4);
      assertSame(service3, service1);
      assertSame(service3, service0);
      assertSame(service3, service2);
      assertSame(service3, service4);
      assertSame(service4, service0);
      assertSame(service4, service1);
      assertSame(service4, service3);
      assertSame(service4, service2);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      Service service1 = service0.threadPool(3936, 3936, 851);
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      String string0 = "cl,D:#`]|A_";
      Service service2 = service1.secure("!'", "!'", "!'", "cl,D:#`]|A_", true);
      assertSame(service0, service2);
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
      
      service0.init();
      assertSame(service0, service2);
      assertSame(service0, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      service1.port = 576;
      // Undeclared exception!
      try { 
        service2.threadPool(142);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      Service service1 = service0.threadPool(1799, 1799, 1799);
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
      
      Service service3 = service2.threadPool(1799);
      assertSame(service0, service3);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service1, service3);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertSame(service2, service3);
      assertSame(service3, service1);
      assertSame(service3, service2);
      assertSame(service3, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service3);
      
      Service service4 = service3.staticFileLocation("; Secure");
      assertSame(service0, service3);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service0, service4);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service1, service3);
      assertSame(service1, service4);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertSame(service2, service3);
      assertSame(service2, service4);
      assertSame(service3, service1);
      assertSame(service3, service2);
      assertSame(service3, service0);
      assertSame(service3, service4);
      assertSame(service4, service1);
      assertSame(service4, service2);
      assertSame(service4, service3);
      assertSame(service4, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service4);
      
      int int0 = service4.activeThreadCount();
      assertEquals(0, int0);
      assertSame(service0, service3);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service0, service4);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service1, service3);
      assertSame(service1, service4);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertSame(service2, service3);
      assertSame(service2, service4);
      assertSame(service3, service1);
      assertSame(service3, service2);
      assertSame(service3, service0);
      assertSame(service3, service4);
      assertSame(service4, service1);
      assertSame(service4, service2);
      assertSame(service4, service3);
      assertSame(service4, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      String string0 = "";
      Service service1 = service0.secure("a|[i7u@", "D)Fr~^'./~8", "Z1\"`e|`d(x}5sy '5", "");
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      Service service2 = service1.threadPool(4567);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service2, service1);
      assertSame(service2, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
      
      service1.init();
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      String string1 = "3_ ,9u%v&Kr.WO";
      // Undeclared exception!
      try { 
        service2.ipAddress("3_ ,9u%v&Kr.WO");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      Service service1 = service0.staticFileLocation("'");
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      Service service2 = service1.secure("Ntn;:$mt<oqpHv", "Ntn;:$mt<oqpHv", "Ntn;:$mt<oqpHv", "96oC", "}>0sk;Iy~X>T'");
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service2);
      assertSame(service1, service0);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
      
      Service service3 = service2.secure("@f@\\]3ivp]", "EN:q1.e?(y?|yM}u", "}>0sk;Iy~X>T'", "", "}>0sk;Iy~X>T'", false);
      assertSame(service0, service1);
      assertSame(service0, service3);
      assertSame(service0, service2);
      assertSame(service1, service2);
      assertSame(service1, service0);
      assertSame(service1, service3);
      assertSame(service2, service0);
      assertSame(service2, service3);
      assertSame(service2, service1);
      assertSame(service3, service2);
      assertSame(service3, service1);
      assertSame(service3, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service3);
      
      // Undeclared exception!
      try { 
        service3.secure((String) null, "", "'", "Ntn;:$mt<oqpHv", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must provide a keystore file to run secured
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      Service service2 = service1.externalStaticFileLocation("");
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service2);
      assertSame(service1, service0);
      assertSame(service2, service1);
      assertSame(service2, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
      
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      assertSame(service0, service1);
      assertSame(service0, service3);
      assertSame(service0, service2);
      assertSame(service1, service2);
      assertSame(service1, service0);
      assertSame(service1, service3);
      assertSame(service2, service3);
      assertSame(service2, service1);
      assertSame(service2, service0);
      assertSame(service3, service0);
      assertSame(service3, service1);
      assertSame(service3, service2);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service3);
      
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      assertSame(service0, service1);
      assertSame(service0, service4);
      assertSame(service0, service3);
      assertSame(service0, service2);
      assertSame(service1, service2);
      assertSame(service1, service0);
      assertSame(service1, service4);
      assertSame(service1, service3);
      assertSame(service2, service3);
      assertSame(service2, service1);
      assertSame(service2, service4);
      assertSame(service2, service0);
      assertSame(service3, service4);
      assertSame(service3, service0);
      assertSame(service3, service1);
      assertSame(service3, service2);
      assertSame(service4, service1);
      assertSame(service4, service3);
      assertSame(service4, service2);
      assertSame(service4, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service4);
      
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      assertSame(service0, service1);
      assertSame(service0, service4);
      assertSame(service0, service3);
      assertSame(service0, service5);
      assertSame(service0, service2);
      assertSame(service1, service5);
      assertSame(service1, service2);
      assertSame(service1, service0);
      assertSame(service1, service4);
      assertSame(service1, service3);
      assertSame(service2, service3);
      assertSame(service2, service1);
      assertSame(service2, service4);
      assertSame(service2, service5);
      assertSame(service2, service0);
      assertSame(service3, service4);
      assertSame(service3, service0);
      assertSame(service3, service1);
      assertSame(service3, service5);
      assertSame(service3, service2);
      assertSame(service4, service1);
      assertSame(service4, service3);
      assertSame(service4, service5);
      assertSame(service4, service2);
      assertSame(service4, service0);
      assertSame(service5, service1);
      assertSame(service5, service4);
      assertSame(service5, service3);
      assertSame(service5, service0);
      assertSame(service5, service2);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service5);
      
      service5.awaitStop();
      assertSame(service0, service1);
      assertSame(service0, service4);
      assertSame(service0, service3);
      assertSame(service0, service5);
      assertSame(service0, service2);
      assertSame(service1, service5);
      assertSame(service1, service2);
      assertSame(service1, service0);
      assertSame(service1, service4);
      assertSame(service1, service3);
      assertSame(service2, service3);
      assertSame(service2, service1);
      assertSame(service2, service4);
      assertSame(service2, service5);
      assertSame(service2, service0);
      assertSame(service3, service4);
      assertSame(service3, service0);
      assertSame(service3, service1);
      assertSame(service3, service5);
      assertSame(service3, service2);
      assertSame(service4, service1);
      assertSame(service4, service3);
      assertSame(service4, service5);
      assertSame(service4, service2);
      assertSame(service4, service0);
      assertSame(service5, service1);
      assertSame(service5, service4);
      assertSame(service5, service3);
      assertSame(service5, service0);
      assertSame(service5, service2);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      int int0 = 474;
      Service service6 = service5.port(int0);
      assertSame(service0, service6);
      assertSame(service0, service1);
      assertSame(service0, service4);
      assertSame(service0, service3);
      assertSame(service0, service5);
      assertSame(service0, service2);
      assertSame(service1, service5);
      assertSame(service1, service2);
      assertSame(service1, service0);
      assertSame(service1, service4);
      assertSame(service1, service6);
      assertSame(service1, service3);
      assertSame(service2, service6);
      assertSame(service2, service3);
      assertSame(service2, service1);
      assertSame(service2, service4);
      assertSame(service2, service5);
      assertSame(service2, service0);
      assertSame(service3, service0);
      assertSame(service3, service4);
      assertSame(service3, service1);
      assertSame(service3, service6);
      assertSame(service3, service5);
      assertSame(service3, service2);
      assertSame(service4, service6);
      assertSame(service4, service1);
      assertSame(service4, service3);
      assertSame(service4, service5);
      assertSame(service4, service2);
      assertSame(service4, service0);
      assertSame(service5, service1);
      assertSame(service5, service4);
      assertSame(service5, service3);
      assertSame(service5, service6);
      assertSame(service5, service0);
      assertSame(service5, service2);
      assertSame(service6, service3);
      assertSame(service6, service4);
      assertSame(service6, service0);
      assertSame(service6, service2);
      assertSame(service6, service5);
      assertSame(service6, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service6);
      
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(templateViewRouteImpl0);
      
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(responseTransformerRouteImpl0);
      
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(routeImpl0);
      
      service6.addRoute(string2, routeImpl0);
      assertSame(service0, service6);
      assertSame(service0, service1);
      assertSame(service0, service4);
      assertSame(service0, service3);
      assertSame(service0, service5);
      assertSame(service0, service2);
      assertSame(service1, service5);
      assertSame(service1, service2);
      assertSame(service1, service0);
      assertSame(service1, service4);
      assertSame(service1, service6);
      assertSame(service1, service3);
      assertSame(service2, service6);
      assertSame(service2, service3);
      assertSame(service2, service1);
      assertSame(service2, service4);
      assertSame(service2, service5);
      assertSame(service2, service0);
      assertSame(service3, service0);
      assertSame(service3, service4);
      assertSame(service3, service1);
      assertSame(service3, service6);
      assertSame(service3, service5);
      assertSame(service3, service2);
      assertSame(service4, service6);
      assertSame(service4, service1);
      assertSame(service4, service3);
      assertSame(service4, service5);
      assertSame(service4, service2);
      assertSame(service4, service0);
      assertSame(service5, service1);
      assertSame(service5, service4);
      assertSame(service5, service3);
      assertSame(service5, service6);
      assertSame(service5, service0);
      assertSame(service5, service2);
      assertSame(service6, service3);
      assertSame(service6, service4);
      assertSame(service6, service0);
      assertSame(service6, service2);
      assertSame(service6, service5);
      assertSame(service6, service1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      String string5 = "!Ivk ";
      // Undeclared exception!
      try { 
        service3.staticFileLocation(string5);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      Service service2 = service1.externalStaticFileLocation("*/*");
      assertSame(service0, service2);
      assertSame(service0, service1);
      assertSame(service1, service2);
      assertSame(service1, service0);
      assertSame(service2, service1);
      assertSame(service2, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
      
      Service service3 = service2.threadPool((-1950));
      assertSame(service0, service2);
      assertSame(service0, service3);
      assertSame(service0, service1);
      assertSame(service1, service2);
      assertSame(service1, service3);
      assertSame(service1, service0);
      assertSame(service2, service1);
      assertSame(service2, service3);
      assertSame(service2, service0);
      assertSame(service3, service2);
      assertSame(service3, service0);
      assertSame(service3, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service3);
      
      Service service4 = service3.externalStaticFileLocation("eW9CED@0w,0mFR");
      assertSame(service0, service2);
      assertSame(service0, service3);
      assertSame(service0, service1);
      assertSame(service0, service4);
      assertSame(service1, service2);
      assertSame(service1, service4);
      assertSame(service1, service3);
      assertSame(service1, service0);
      assertSame(service2, service1);
      assertSame(service2, service3);
      assertSame(service2, service0);
      assertSame(service2, service4);
      assertSame(service3, service2);
      assertSame(service3, service4);
      assertSame(service3, service0);
      assertSame(service3, service1);
      assertSame(service4, service0);
      assertSame(service4, service1);
      assertSame(service4, service3);
      assertSame(service4, service2);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service4);
      
      service4.notFound("");
      assertSame(service0, service2);
      assertSame(service0, service3);
      assertSame(service0, service1);
      assertSame(service0, service4);
      assertSame(service1, service2);
      assertSame(service1, service4);
      assertSame(service1, service3);
      assertSame(service1, service0);
      assertSame(service2, service1);
      assertSame(service2, service3);
      assertSame(service2, service0);
      assertSame(service2, service4);
      assertSame(service3, service2);
      assertSame(service3, service4);
      assertSame(service3, service0);
      assertSame(service3, service1);
      assertSame(service4, service0);
      assertSame(service4, service1);
      assertSame(service4, service3);
      assertSame(service4, service2);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      // Undeclared exception!
      try { 
        service3.unmap("eW9CED@0w,0mFR");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      String string0 = "=`uwm<)x^O2KPA";
      String string1 = "rK =C.qB=qy[b";
      Service service1 = service0.secure("=`uwm<)x^O2KPA", "Qm>?GffDlyb!L", "rK =C.qB=qy[b", "Static file location has already been set", "Static file location has already been set", true);
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      String string2 = "";
      Service service2 = service1.secure("Static file location has already been set", "", "=`uwm<)x^O2KPA", "Static file location has already been set", "No such file {}");
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service2, service1);
      assertSame(service2, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
      
      // Undeclared exception!
      try { 
        service0.port();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done after route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      Service service2 = service1.port(1024);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service2);
      assertSame(service1, service0);
      assertSame(service2, service1);
      assertSame(service2, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
      
      Service service3 = service2.threadPool(0, 1024, 0);
      assertSame(service0, service1);
      assertSame(service0, service3);
      assertSame(service0, service2);
      assertSame(service1, service2);
      assertSame(service1, service3);
      assertSame(service1, service0);
      assertSame(service2, service3);
      assertSame(service2, service1);
      assertSame(service2, service0);
      assertSame(service3, service1);
      assertSame(service3, service2);
      assertSame(service3, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service3);
      
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      assertSame(service0, service4);
      assertSame(service0, service1);
      assertSame(service0, service3);
      assertSame(service0, service2);
      assertSame(service1, service2);
      assertSame(service1, service3);
      assertSame(service1, service0);
      assertSame(service1, service4);
      assertSame(service2, service3);
      assertSame(service2, service1);
      assertSame(service2, service0);
      assertSame(service2, service4);
      assertSame(service3, service1);
      assertSame(service3, service2);
      assertSame(service3, service0);
      assertSame(service3, service4);
      assertSame(service4, service0);
      assertSame(service4, service2);
      assertSame(service4, service1);
      assertSame(service4, service3);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service4);
      
      Service service5 = service4.staticFileLocation("");
      assertSame(service0, service4);
      assertSame(service0, service5);
      assertSame(service0, service1);
      assertSame(service0, service3);
      assertSame(service0, service2);
      assertSame(service1, service2);
      assertSame(service1, service3);
      assertSame(service1, service5);
      assertSame(service1, service0);
      assertSame(service1, service4);
      assertSame(service2, service3);
      assertSame(service2, service5);
      assertSame(service2, service1);
      assertSame(service2, service0);
      assertSame(service2, service4);
      assertSame(service3, service1);
      assertSame(service3, service2);
      assertSame(service3, service5);
      assertSame(service3, service0);
      assertSame(service3, service4);
      assertSame(service4, service0);
      assertSame(service4, service5);
      assertSame(service4, service2);
      assertSame(service4, service1);
      assertSame(service4, service3);
      assertSame(service5, service1);
      assertSame(service5, service3);
      assertSame(service5, service0);
      assertSame(service5, service4);
      assertSame(service5, service2);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service5);
      
      // Undeclared exception!
      try { 
        service5.port();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done after route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      String string0 = "";
      BadMessageException badMessageException0 = new BadMessageException();
      assertNotNull(badMessageException0);
      
      Throwable throwable0 = badMessageException0.getCause();
      assertEquals(400, badMessageException0.getCode());
      assertNull(badMessageException0.getReason());
      assertNull(throwable0);
      
      StackTraceElement[] stackTraceElementArray0 = badMessageException0.getStackTrace();
      assertEquals(3, stackTraceElementArray0.length);
      assertEquals(400, badMessageException0.getCode());
      assertNull(badMessageException0.getReason());
      assertNotNull(stackTraceElementArray0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("\"+\"", "", badMessageException0);
      assertEquals(400, badMessageException0.getCode());
      assertNull(badMessageException0.getReason());
      assertEquals("java.sql.SQLTransientConnectionException: \"+\"", sQLTransientConnectionException0.toString());
      assertEquals("\"+\"", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("", sQLTransientConnectionException0.getSQLState());
      assertNotNull(sQLTransientConnectionException0);
      
      service0.embeddedServerIdentifier((Object) sQLTransientConnectionException0);
      assertEquals(400, badMessageException0.getCode());
      assertNull(badMessageException0.getReason());
      assertEquals("java.sql.SQLTransientConnectionException: \"+\"", sQLTransientConnectionException0.toString());
      assertEquals("\"+\"", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("", sQLTransientConnectionException0.getSQLState());
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      // Undeclared exception!
      try { 
        service0.halt(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        service0.secure((String) null, (String) null, (String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must provide a keystore file to run secured
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      // Undeclared exception!
      try { 
        service0.routes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      Service service1 = service0.threadPool(4567);
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      assertNotNull(templateViewRouteImpl0);
      
      Service service2 = service0.threadPool(23, 23, 0);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
      
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      assertNotNull(routeImpl0);
      
      Service service3 = service0.ipAddress("");
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service0, service3);
      assertSame(service3, service2);
      assertSame(service3, service0);
      assertSame(service3, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service3);
      
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      assertSame(service0, service1);
      assertSame(service0, service4);
      assertSame(service0, service2);
      assertSame(service0, service3);
      assertSame(service4, service1);
      assertSame(service4, service3);
      assertSame(service4, service2);
      assertSame(service4, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service4);
      
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      assertFalse(routeImpl1.equals((Object)routeImpl0));
      assertNotNull(routeImpl1);
      
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      assertNotSame(routeImpl0, routeImpl2);
      assertNotSame(routeImpl2, routeImpl0);
      assertFalse(routeImpl0.equals((Object)routeImpl1));
      assertFalse(routeImpl2.equals((Object)routeImpl1));
      assertFalse(routeImpl2.equals((Object)routeImpl0));
      assertNotNull(routeImpl2);
      
      RouteImpl routeImpl3 = routeImpl2.withPrefix("B$s.");
      assertNotSame(routeImpl0, routeImpl3);
      assertNotSame(routeImpl0, routeImpl2);
      assertNotSame(routeImpl2, routeImpl0);
      assertSame(routeImpl2, routeImpl3);
      assertSame(routeImpl3, routeImpl2);
      assertNotSame(routeImpl3, routeImpl0);
      assertFalse(routeImpl0.equals((Object)routeImpl1));
      assertFalse(routeImpl0.equals((Object)routeImpl2));
      assertFalse(routeImpl2.equals((Object)routeImpl1));
      assertFalse(routeImpl2.equals((Object)routeImpl0));
      assertFalse(routeImpl3.equals((Object)routeImpl1));
      assertFalse(routeImpl3.equals((Object)routeImpl0));
      assertNotNull(routeImpl3);
      
      service1.addRoute("yty|j_=z4o3Q", routeImpl2);
      assertSame(service0, service1);
      assertSame(service0, service4);
      assertSame(service0, service2);
      assertSame(service0, service3);
      assertSame(service1, service4);
      assertSame(service1, service3);
      assertSame(service1, service2);
      assertSame(service1, service0);
      assertNotSame(routeImpl0, routeImpl3);
      assertNotSame(routeImpl0, routeImpl2);
      assertNotSame(routeImpl2, routeImpl0);
      assertSame(routeImpl2, routeImpl3);
      assertFalse(routeImpl0.equals((Object)routeImpl1));
      assertFalse(routeImpl0.equals((Object)routeImpl3));
      assertFalse(routeImpl0.equals((Object)routeImpl2));
      assertFalse(routeImpl2.equals((Object)routeImpl1));
      assertFalse(routeImpl2.equals((Object)routeImpl0));
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      boolean boolean0 = service1.unmap("t:Py&<Jyu(jW\"X!+qaV");
      assertFalse(boolean0);
      assertSame(service0, service1);
      assertSame(service0, service4);
      assertSame(service0, service2);
      assertSame(service0, service3);
      assertSame(service1, service4);
      assertSame(service1, service3);
      assertSame(service1, service2);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      service1.stop();
      assertSame(service0, service1);
      assertSame(service0, service4);
      assertSame(service0, service2);
      assertSame(service0, service3);
      assertSame(service1, service4);
      assertSame(service1, service3);
      assertSame(service1, service2);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      // Undeclared exception!
      try { 
        service0.halt((-1309), "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      Service service1 = service0.ipAddress("]^Ah");
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      Service service2 = service1.secure("", "WebSockets are only supported in the embedded server", "#~^q_+,P/", "0.0.0.0", "", false);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service2);
      assertSame(service1, service0);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
      
      Service service3 = service2.port(0);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service0, service3);
      assertSame(service1, service2);
      assertSame(service1, service3);
      assertSame(service1, service0);
      assertSame(service2, service0);
      assertSame(service2, service3);
      assertSame(service2, service1);
      assertSame(service3, service2);
      assertSame(service3, service0);
      assertSame(service3, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service3);
      
      // Undeclared exception!
      try { 
        service3.halt(0, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      Service service1 = service0.ipAddress("psW,:8np*&");
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service2, service1);
      assertSame(service2, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
      
      Service service3 = service2.threadPool(4567);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service0, service3);
      assertSame(service1, service0);
      assertSame(service1, service3);
      assertSame(service1, service2);
      assertSame(service2, service1);
      assertSame(service2, service0);
      assertSame(service2, service3);
      assertSame(service3, service0);
      assertSame(service3, service2);
      assertSame(service3, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service3);
      
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service0, service3);
      assertSame(service0, service4);
      assertSame(service1, service0);
      assertSame(service1, service4);
      assertSame(service1, service3);
      assertSame(service1, service2);
      assertSame(service2, service1);
      assertSame(service2, service0);
      assertSame(service2, service3);
      assertSame(service2, service4);
      assertSame(service3, service0);
      assertSame(service3, service4);
      assertSame(service3, service2);
      assertSame(service3, service1);
      assertSame(service4, service2);
      assertSame(service4, service3);
      assertSame(service4, service0);
      assertSame(service4, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service4);
      
      Service service5 = service4.port(238);
      assertSame(service0, service5);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service0, service3);
      assertSame(service0, service4);
      assertSame(service1, service5);
      assertSame(service1, service0);
      assertSame(service1, service4);
      assertSame(service1, service3);
      assertSame(service1, service2);
      assertSame(service2, service1);
      assertSame(service2, service0);
      assertSame(service2, service3);
      assertSame(service2, service4);
      assertSame(service2, service5);
      assertSame(service3, service5);
      assertSame(service3, service0);
      assertSame(service3, service4);
      assertSame(service3, service2);
      assertSame(service3, service1);
      assertSame(service4, service2);
      assertSame(service4, service3);
      assertSame(service4, service0);
      assertSame(service4, service1);
      assertSame(service4, service5);
      assertSame(service5, service1);
      assertSame(service5, service0);
      assertSame(service5, service2);
      assertSame(service5, service4);
      assertSame(service5, service3);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service5);
      
      SslStores sslStores0 = SslStores.create("^4y=pC]J%", (String) null, "tL_y;&", (String) null, (String) null, false);
      assertNull(sslStores0.trustStoreFile());
      assertNull(sslStores0.keystorePassword());
      assertEquals("^4y=pC]J%", sslStores0.keystoreFile());
      assertFalse(sslStores0.needsClientCert());
      assertEquals("tL_y;&", sslStores0.certAlias());
      assertNull(sslStores0.trustStorePassword());
      assertNotNull(sslStores0);
      
      service2.initialized = false;
      service5.sslStores = sslStores0;
      assertNull(sslStores0.trustStoreFile());
      assertNull(sslStores0.keystorePassword());
      assertEquals("^4y=pC]J%", sslStores0.keystoreFile());
      assertFalse(sslStores0.needsClientCert());
      assertEquals("tL_y;&", sslStores0.certAlias());
      assertNull(sslStores0.trustStorePassword());
      assertEquals("tL_y;&", service5.sslStores.certAlias());
      assertNull(service5.sslStores.trustStorePassword());
      assertFalse(service5.sslStores.needsClientCert());
      assertEquals("^4y=pC]J%", service5.sslStores.keystoreFile());
      assertNull(service5.sslStores.trustStoreFile());
      assertNull(service5.sslStores.keystorePassword());
      
      // Undeclared exception!
      try { 
        service5.unmap("l-Pd`SDu", "@>N0u[re?;{i)Fd_?");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      Service service1 = service0.port(0);
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service2);
      assertSame(service1, service0);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
      
      Service service3 = service2.threadPool(0);
      assertSame(service0, service1);
      assertSame(service0, service3);
      assertSame(service0, service2);
      assertSame(service1, service2);
      assertSame(service1, service3);
      assertSame(service1, service0);
      assertSame(service2, service3);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertSame(service3, service2);
      assertSame(service3, service1);
      assertSame(service3, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service3);
      
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      assertSame(service0, service1);
      assertSame(service0, service3);
      assertSame(service0, service2);
      assertSame(service0, service4);
      assertSame(service1, service2);
      assertSame(service1, service4);
      assertSame(service1, service3);
      assertSame(service1, service0);
      assertSame(service2, service3);
      assertSame(service2, service0);
      assertSame(service2, service4);
      assertSame(service2, service1);
      assertSame(service3, service2);
      assertSame(service3, service1);
      assertSame(service3, service0);
      assertSame(service3, service4);
      assertSame(service4, service2);
      assertSame(service4, service0);
      assertSame(service4, service3);
      assertSame(service4, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service4);
      
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      assertSame(service0, service1);
      assertSame(service0, service3);
      assertSame(service0, service2);
      assertSame(service0, service4);
      assertSame(service0, service5);
      assertSame(service1, service2);
      assertSame(service1, service4);
      assertSame(service1, service3);
      assertSame(service1, service0);
      assertSame(service1, service5);
      assertSame(service2, service5);
      assertSame(service2, service3);
      assertSame(service2, service0);
      assertSame(service2, service4);
      assertSame(service2, service1);
      assertSame(service3, service2);
      assertSame(service3, service1);
      assertSame(service3, service0);
      assertSame(service3, service5);
      assertSame(service3, service4);
      assertSame(service4, service5);
      assertSame(service4, service2);
      assertSame(service4, service0);
      assertSame(service4, service3);
      assertSame(service4, service1);
      assertSame(service5, service1);
      assertSame(service5, service3);
      assertSame(service5, service2);
      assertSame(service5, service4);
      assertSame(service5, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service5);
      
      service5.initExceptionHandler((Consumer<Exception>) null);
      assertSame(service0, service1);
      assertSame(service0, service3);
      assertSame(service0, service2);
      assertSame(service0, service4);
      assertSame(service0, service5);
      assertSame(service1, service2);
      assertSame(service1, service4);
      assertSame(service1, service3);
      assertSame(service1, service0);
      assertSame(service1, service5);
      assertSame(service2, service5);
      assertSame(service2, service3);
      assertSame(service2, service0);
      assertSame(service2, service4);
      assertSame(service2, service1);
      assertSame(service3, service2);
      assertSame(service3, service1);
      assertSame(service3, service0);
      assertSame(service3, service5);
      assertSame(service3, service4);
      assertSame(service4, service5);
      assertSame(service4, service2);
      assertSame(service4, service0);
      assertSame(service4, service3);
      assertSame(service4, service1);
      assertSame(service5, service1);
      assertSame(service5, service3);
      assertSame(service5, service2);
      assertSame(service5, service4);
      assertSame(service5, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      Service service1 = service0.threadPool((-1292), (-3040), (-837));
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "Content-Length", (String) null, "Must provide a keystore file to run secured");
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
      
      String string0 = "9OBpg[}";
      String string1 = "WebSockets are only supported in the embedded server";
      Service service3 = service2.secure("Must provide a keystore file to run secured", "9OBpg[}", "WebSockets are only supported in the embedded server", "9OBpg[}", false);
      assertSame(service0, service3);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service3);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertSame(service2, service3);
      assertSame(service3, service1);
      assertSame(service3, service0);
      assertSame(service3, service2);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service3);
      
      // Undeclared exception!
      try { 
        service3.staticFileLocation((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'folder' must not be null
         //
         verifyException("spark.utils.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service2);
      assertSame(service1, service0);
      assertSame(service2, service1);
      assertSame(service2, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
      
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service0, service3);
      assertSame(service1, service2);
      assertSame(service1, service0);
      assertSame(service1, service3);
      assertSame(service2, service3);
      assertSame(service2, service1);
      assertSame(service2, service0);
      assertSame(service3, service1);
      assertSame(service3, service2);
      assertSame(service3, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service3);
      
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      assertSame(service0, service1);
      assertSame(service0, service4);
      assertSame(service0, service2);
      assertSame(service0, service3);
      assertSame(service1, service2);
      assertSame(service1, service4);
      assertSame(service1, service0);
      assertSame(service1, service3);
      assertSame(service2, service3);
      assertSame(service2, service4);
      assertSame(service2, service1);
      assertSame(service2, service0);
      assertSame(service3, service1);
      assertSame(service3, service4);
      assertSame(service3, service2);
      assertSame(service3, service0);
      assertSame(service4, service1);
      assertSame(service4, service0);
      assertSame(service4, service2);
      assertSame(service4, service3);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service4);
      
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      assertEquals("K F[i1i6Lq5BRq;L/{ ", sslStores0.trustStoreFile());
      assertEquals(";!anPVhcn]2s(", sslStores0.certAlias());
      assertEquals("System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", sslStores0.keystorePassword());
      assertFalse(sslStores0.needsClientCert());
      assertNull(sslStores0.keystoreFile());
      assertEquals("K F[i1i6Lq5BRq;L/{ ", sslStores0.trustStorePassword());
      assertNotNull(sslStores0);
      
      service3.sslStores = sslStores0;
      assertEquals("K F[i1i6Lq5BRq;L/{ ", sslStores0.trustStoreFile());
      assertEquals(";!anPVhcn]2s(", sslStores0.certAlias());
      assertEquals("System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", sslStores0.keystorePassword());
      assertFalse(sslStores0.needsClientCert());
      assertNull(sslStores0.keystoreFile());
      assertEquals("K F[i1i6Lq5BRq;L/{ ", sslStores0.trustStorePassword());
      assertFalse(service3.sslStores.needsClientCert());
      assertNull(service3.sslStores.keystoreFile());
      assertEquals("System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", service3.sslStores.keystorePassword());
      assertEquals(";!anPVhcn]2s(", service3.sslStores.certAlias());
      assertEquals("K F[i1i6Lq5BRq;L/{ ", service3.sslStores.trustStorePassword());
      assertEquals("K F[i1i6Lq5BRq;L/{ ", service3.sslStores.trustStoreFile());
      
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      assertSame(service0, service1);
      assertSame(service0, service4);
      assertSame(service0, service5);
      assertSame(service0, service2);
      assertSame(service0, service3);
      assertSame(service1, service2);
      assertSame(service1, service4);
      assertSame(service1, service5);
      assertSame(service1, service0);
      assertSame(service1, service3);
      assertSame(service2, service3);
      assertSame(service2, service4);
      assertSame(service2, service1);
      assertSame(service2, service5);
      assertSame(service2, service0);
      assertSame(service3, service1);
      assertSame(service3, service4);
      assertSame(service3, service5);
      assertSame(service3, service2);
      assertSame(service3, service0);
      assertSame(service4, service1);
      assertSame(service4, service0);
      assertSame(service4, service2);
      assertSame(service4, service3);
      assertSame(service4, service5);
      assertSame(service5, service3);
      assertSame(service5, service2);
      assertSame(service5, service4);
      assertSame(service5, service0);
      assertSame(service5, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service5);
      
      Service service6 = service5.port(324);
      assertSame(service0, service1);
      assertSame(service0, service4);
      assertSame(service0, service5);
      assertSame(service0, service2);
      assertSame(service0, service6);
      assertSame(service0, service3);
      assertSame(service1, service2);
      assertSame(service1, service4);
      assertSame(service1, service5);
      assertSame(service1, service0);
      assertSame(service1, service3);
      assertSame(service1, service6);
      assertSame(service2, service3);
      assertSame(service2, service4);
      assertSame(service2, service1);
      assertSame(service2, service5);
      assertSame(service2, service0);
      assertSame(service2, service6);
      assertSame(service3, service1);
      assertSame(service3, service4);
      assertSame(service3, service5);
      assertSame(service3, service2);
      assertSame(service3, service6);
      assertSame(service3, service0);
      assertSame(service4, service1);
      assertSame(service4, service6);
      assertSame(service4, service0);
      assertSame(service4, service2);
      assertSame(service4, service3);
      assertSame(service4, service5);
      assertSame(service5, service3);
      assertSame(service5, service6);
      assertSame(service5, service2);
      assertSame(service5, service4);
      assertSame(service5, service0);
      assertSame(service5, service1);
      assertSame(service6, service1);
      assertSame(service6, service4);
      assertSame(service6, service2);
      assertSame(service6, service0);
      assertSame(service6, service3);
      assertSame(service6, service5);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service6);
      
      Service service7 = service0.ipAddress("; Path=");
      assertSame(service0, service1);
      assertSame(service0, service4);
      assertSame(service0, service5);
      assertSame(service0, service2);
      assertSame(service0, service6);
      assertSame(service0, service7);
      assertSame(service0, service3);
      assertSame(service7, service0);
      assertSame(service7, service5);
      assertSame(service7, service2);
      assertSame(service7, service4);
      assertSame(service7, service1);
      assertSame(service7, service6);
      assertSame(service7, service3);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service7);
      
      service5.awaitStop();
      assertSame(service0, service1);
      assertSame(service0, service4);
      assertSame(service0, service5);
      assertSame(service0, service2);
      assertSame(service0, service6);
      assertSame(service0, service7);
      assertSame(service0, service3);
      assertSame(service1, service2);
      assertSame(service1, service4);
      assertSame(service1, service5);
      assertSame(service1, service7);
      assertSame(service1, service0);
      assertSame(service1, service3);
      assertSame(service1, service6);
      assertSame(service2, service3);
      assertSame(service2, service4);
      assertSame(service2, service1);
      assertSame(service2, service5);
      assertSame(service2, service0);
      assertSame(service2, service7);
      assertSame(service2, service6);
      assertSame(service3, service1);
      assertSame(service3, service4);
      assertSame(service3, service5);
      assertSame(service3, service2);
      assertSame(service3, service6);
      assertSame(service3, service0);
      assertSame(service3, service7);
      assertSame(service4, service1);
      assertSame(service4, service6);
      assertSame(service4, service0);
      assertSame(service4, service2);
      assertSame(service4, service7);
      assertSame(service4, service3);
      assertSame(service4, service5);
      assertSame(service5, service3);
      assertSame(service5, service6);
      assertSame(service5, service2);
      assertSame(service5, service4);
      assertSame(service5, service0);
      assertSame(service5, service7);
      assertSame(service5, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      // Undeclared exception!
      try { 
        service3.getPaths();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      int int1 = 0;
      Service service2 = service1.threadPool(414, 593, 0);
      assertSame(service0, service2);
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
      
      String string0 = "0I5A)EoJU}GU<%F9";
      Service service3 = service2.staticFileLocation("0I5A)EoJU}GU<%F9");
      assertSame(service0, service2);
      assertSame(service0, service1);
      assertSame(service0, service3);
      assertSame(service1, service3);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service2, service0);
      assertSame(service2, service3);
      assertSame(service2, service1);
      assertSame(service3, service0);
      assertSame(service3, service1);
      assertSame(service3, service2);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service3);
      
      Service service4 = service3.ipAddress("0I5A)EoJU}GU<%F9");
      assertSame(service0, service2);
      assertSame(service0, service1);
      assertSame(service0, service3);
      assertSame(service0, service4);
      assertSame(service1, service3);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service1, service4);
      assertSame(service2, service0);
      assertSame(service2, service3);
      assertSame(service2, service4);
      assertSame(service2, service1);
      assertSame(service3, service0);
      assertSame(service3, service1);
      assertSame(service3, service2);
      assertSame(service3, service4);
      assertSame(service4, service0);
      assertSame(service4, service1);
      assertSame(service4, service3);
      assertSame(service4, service2);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service4);
      
      service4.routes = null;
      // Undeclared exception!
      try { 
        service4.halt(4567);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      Service service1 = service0.externalStaticFileLocation("");
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      // Undeclared exception!
      try { 
        service1.halt(4567);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      Service service1 = service0.ipAddress("");
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      assertSame(service0, service2);
      assertSame(service0, service1);
      assertSame(service1, service2);
      assertSame(service1, service0);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
      
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      assertSame(service0, service2);
      assertSame(service0, service1);
      assertSame(service0, service3);
      assertSame(service1, service3);
      assertSame(service1, service2);
      assertSame(service1, service0);
      assertSame(service2, service3);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertSame(service3, service1);
      assertSame(service3, service0);
      assertSame(service3, service2);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service3);
      
      Service service4 = service3.threadPool(4567);
      assertSame(service0, service2);
      assertSame(service0, service4);
      assertSame(service0, service1);
      assertSame(service0, service3);
      assertSame(service1, service3);
      assertSame(service1, service2);
      assertSame(service1, service4);
      assertSame(service1, service0);
      assertSame(service2, service3);
      assertSame(service2, service4);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertSame(service3, service1);
      assertSame(service3, service0);
      assertSame(service3, service2);
      assertSame(service3, service4);
      assertSame(service4, service1);
      assertSame(service4, service0);
      assertSame(service4, service3);
      assertSame(service4, service2);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service4);
      
      service3.init();
      assertSame(service0, service2);
      assertSame(service0, service4);
      assertSame(service0, service1);
      assertSame(service0, service3);
      assertSame(service1, service3);
      assertSame(service1, service2);
      assertSame(service1, service4);
      assertSame(service1, service0);
      assertSame(service2, service3);
      assertSame(service2, service4);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertSame(service3, service1);
      assertSame(service3, service0);
      assertSame(service3, service2);
      assertSame(service3, service4);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      // Undeclared exception!
      try { 
        service4.port((-1038));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      Service service1 = service0.threadPool(500);
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      Service service2 = service1.ipAddress("*/*");
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service2, service1);
      assertSame(service2, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
      
      Service service3 = service2.externalStaticFileLocation("*/*");
      assertSame(service0, service3);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service0);
      assertSame(service1, service3);
      assertSame(service1, service2);
      assertSame(service2, service3);
      assertSame(service2, service1);
      assertSame(service2, service0);
      assertSame(service3, service2);
      assertSame(service3, service0);
      assertSame(service3, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service3);
      
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service_StaticFiles0);
      
      service_StaticFiles0.header("~R TGQdg,5=& *", (String) null);
      assertSame(service0, service3);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service0);
      assertSame(service1, service3);
      assertSame(service1, service2);
      assertSame(service2, service3);
      assertSame(service2, service1);
      assertSame(service2, service0);
      assertSame(service3, service2);
      assertSame(service3, service0);
      assertSame(service3, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      String string0 = "No protocol factory for default protocol '";
      RouteGroup routeGroup0 = mock(RouteGroup.class, new ViolatedAssumptionAnswer());
      service0.path("No protocol factory for default protocol '", routeGroup0);
      assertSame(service0, service3);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        service1.webSocket((String) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // WebSocket handler must implement 'WebSocketListener' or be annotated as '@WebSocket'
         //
         verifyException("spark.embeddedserver.jetty.websocket.WebSocketHandlerWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      HttpMethod httpMethod0 = HttpMethod.post;
      String string0 = "[]GgO<*";
      String string1 = "qW*T=j $H";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("[]GgO<*", "qW*T=j $H", templateViewRoute0, templateEngine0);
      assertNotNull(templateViewRouteImpl0);
      
      service0.addRoute(httpMethod0, (RouteImpl) templateViewRouteImpl0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      String string2 = "server interrupted";
      // Undeclared exception!
      try { 
        service0.secure("gB~NUp7`w-P#*{Mj", "gB~NUp7`w-P#*{Mj", "server interrupted", "_:DuZ9QNUj7(j 7Z)?");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      service0.addFilter("spark.Service", filterImpl0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      Service service1 = service0.externalStaticFileLocation("");
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      Service service2 = service1.secure("", "", "", "", (String) null, false);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service2, service1);
      assertSame(service2, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
      
      Service service3 = service2.externalStaticFileLocation("");
      assertSame(service0, service3);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service0);
      assertSame(service1, service3);
      assertSame(service1, service2);
      assertSame(service2, service1);
      assertSame(service2, service0);
      assertSame(service2, service3);
      assertSame(service3, service1);
      assertSame(service3, service0);
      assertSame(service3, service2);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service3);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      Service.StaticFiles service_StaticFiles0 = service0.staticFiles;
      assertNotNull(service_StaticFiles0);
      
      Service service1 = service0.webSocketIdleTimeoutMillis(0);
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      service_StaticFiles0.expireTime(service0.SPARK_DEFAULT_PORT);
      assertSame(service0, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      String string0 = "";
      String string1 = "Must provide a keystore file to run secured";
      Service service2 = Service.ignite();
      assertNotSame(service2, service0);
      assertNotSame(service2, service1);
      assertFalse(service2.equals((Object)service0));
      assertFalse(service2.equals((Object)service1));
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
      
      service_StaticFiles0.externalLocation(string0);
      assertSame(service0, service1);
      assertNotSame(service0, service2);
      assertFalse(service0.equals((Object)service2));
      assertFalse(string0.equals((Object)string1));
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      service_StaticFiles0.registerMimeType(string0, string1);
      assertSame(service0, service1);
      assertNotSame(service0, service2);
      assertFalse(service0.equals((Object)service2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      String string2 = "Must provide a keystore file to run secured";
      service_StaticFiles0.header(string2, string2);
      assertSame(service0, service1);
      assertNotSame(service0, service2);
      assertFalse(service0.equals((Object)service2));
      assertFalse(string2.equals((Object)string0));
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      // Undeclared exception!
      try { 
        service0.unmap(string2, string2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      service0.port = 0;
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        service0.webSocket("Unsupported Content-Type [", class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // WebSocket handler must implement 'WebSocketListener' or be annotated as '@WebSocket'
         //
         verifyException("spark.embeddedserver.jetty.websocket.WebSocketHandlerWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      Service service1 = service0.threadPool(561, 561, 104);
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      Service service2 = service1.ipAddress("Qbu]4B 8");
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service2);
      assertSame(service1, service0);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
      
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      assertSame(service0, service1);
      assertSame(service0, service3);
      assertSame(service0, service2);
      assertSame(service1, service2);
      assertSame(service1, service3);
      assertSame(service1, service0);
      assertSame(service2, service3);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertSame(service3, service1);
      assertSame(service3, service0);
      assertSame(service3, service2);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service3);
      
      Service service4 = service3.staticFileLocation("");
      assertSame(service0, service1);
      assertSame(service0, service3);
      assertSame(service0, service4);
      assertSame(service0, service2);
      assertSame(service1, service2);
      assertSame(service1, service3);
      assertSame(service1, service0);
      assertSame(service1, service4);
      assertSame(service2, service3);
      assertSame(service2, service4);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertSame(service3, service4);
      assertSame(service3, service1);
      assertSame(service3, service0);
      assertSame(service3, service2);
      assertSame(service4, service0);
      assertSame(service4, service3);
      assertSame(service4, service1);
      assertSame(service4, service2);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service4);
      
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      assertSame(service0, service1);
      assertSame(service0, service3);
      assertSame(service0, service4);
      assertSame(service0, service2);
      assertSame(service0, service5);
      assertSame(service1, service2);
      assertSame(service1, service3);
      assertSame(service1, service0);
      assertSame(service1, service4);
      assertSame(service1, service5);
      assertSame(service2, service3);
      assertSame(service2, service4);
      assertSame(service2, service0);
      assertSame(service2, service5);
      assertSame(service2, service1);
      assertSame(service3, service4);
      assertSame(service3, service1);
      assertSame(service3, service0);
      assertSame(service3, service5);
      assertSame(service3, service2);
      assertSame(service4, service0);
      assertSame(service4, service3);
      assertSame(service4, service1);
      assertSame(service4, service2);
      assertSame(service4, service5);
      assertSame(service5, service1);
      assertSame(service5, service2);
      assertSame(service5, service3);
      assertSame(service5, service4);
      assertSame(service5, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service5);
      
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Interrupted by another thread", (TemplateViewRoute) null, (TemplateEngine) null);
      assertNotNull(templateViewRouteImpl0);
      
      service5.addRoute("", (RouteImpl) templateViewRouteImpl0);
      assertSame(service0, service1);
      assertSame(service0, service3);
      assertSame(service0, service4);
      assertSame(service0, service2);
      assertSame(service0, service5);
      assertSame(service1, service2);
      assertSame(service1, service3);
      assertSame(service1, service0);
      assertSame(service1, service4);
      assertSame(service1, service5);
      assertSame(service2, service3);
      assertSame(service2, service4);
      assertSame(service2, service0);
      assertSame(service2, service5);
      assertSame(service2, service1);
      assertSame(service3, service4);
      assertSame(service3, service1);
      assertSame(service3, service0);
      assertSame(service3, service5);
      assertSame(service3, service2);
      assertSame(service4, service0);
      assertSame(service4, service3);
      assertSame(service4, service1);
      assertSame(service4, service2);
      assertSame(service4, service5);
      assertSame(service5, service1);
      assertSame(service5, service2);
      assertSame(service5, service3);
      assertSame(service5, service4);
      assertSame(service5, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      Service.StaticFiles service_StaticFiles0 = service2.staticFiles;
      assertNotNull(service_StaticFiles0);
      
      // Undeclared exception!
      try { 
        service_StaticFiles0.location((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      Service service1 = service0.secure("Skipping ", "Skipping ", "Skipping ", "Skipping ");
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      Routes routes0 = Routes.create();
      assertNotNull(routes0);
      
      service0.routes = routes0;
      Service service2 = service1.externalStaticFileLocation("");
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service2);
      assertSame(service1, service0);
      assertSame(service2, service1);
      assertSame(service2, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
      
      Service service3 = service2.staticFileLocation(">=%^/b:; E<");
      assertSame(service0, service1);
      assertSame(service0, service3);
      assertSame(service0, service2);
      assertSame(service1, service2);
      assertSame(service1, service3);
      assertSame(service1, service0);
      assertSame(service2, service1);
      assertSame(service2, service3);
      assertSame(service2, service0);
      assertSame(service3, service0);
      assertSame(service3, service2);
      assertSame(service3, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service3);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        service3.unmap("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // path cannot be null or blank
         //
         verifyException("spark.route.Routes", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      Service service1 = service0.port(103);
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      assertSame(service0, service2);
      assertSame(service0, service1);
      assertSame(service1, service2);
      assertSame(service1, service0);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
      
      Service service3 = service2.externalStaticFileLocation("");
      assertSame(service0, service2);
      assertSame(service0, service1);
      assertSame(service0, service3);
      assertSame(service1, service2);
      assertSame(service1, service0);
      assertSame(service1, service3);
      assertSame(service2, service3);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertSame(service3, service0);
      assertSame(service3, service1);
      assertSame(service3, service2);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service3);
      
      Service service4 = service3.threadPool((-2712));
      assertSame(service0, service2);
      assertSame(service0, service4);
      assertSame(service0, service1);
      assertSame(service0, service3);
      assertSame(service1, service2);
      assertSame(service1, service0);
      assertSame(service1, service4);
      assertSame(service1, service3);
      assertSame(service2, service3);
      assertSame(service2, service4);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertSame(service3, service0);
      assertSame(service3, service1);
      assertSame(service3, service2);
      assertSame(service3, service4);
      assertSame(service4, service1);
      assertSame(service4, service2);
      assertSame(service4, service0);
      assertSame(service4, service3);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service4);
      
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      assertSame(service0, service2);
      assertSame(service0, service4);
      assertSame(service0, service1);
      assertSame(service0, service5);
      assertSame(service0, service3);
      assertSame(service1, service2);
      assertSame(service1, service0);
      assertSame(service1, service4);
      assertSame(service1, service5);
      assertSame(service1, service3);
      assertSame(service2, service3);
      assertSame(service2, service4);
      assertSame(service2, service5);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertSame(service3, service0);
      assertSame(service3, service1);
      assertSame(service3, service2);
      assertSame(service3, service4);
      assertSame(service3, service5);
      assertSame(service4, service1);
      assertSame(service4, service2);
      assertSame(service4, service0);
      assertSame(service4, service5);
      assertSame(service4, service3);
      assertSame(service5, service3);
      assertSame(service5, service1);
      assertSame(service5, service0);
      assertSame(service5, service2);
      assertSame(service5, service4);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service5);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        service5.webSocket(string0, (Object) service0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // WebSocket handler must implement 'WebSocketListener' or be annotated as '@WebSocket'
         //
         verifyException("spark.embeddedserver.jetty.websocket.WebSocketHandlerWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      Service service2 = service1.threadPool(4567, 4567, (-2));
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service2);
      assertSame(service1, service0);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
      
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service0, service3);
      assertSame(service1, service3);
      assertSame(service1, service2);
      assertSame(service1, service0);
      assertSame(service3, service0);
      assertSame(service3, service1);
      assertSame(service3, service2);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service3);
      
      Service service4 = service3.secure("", "", "", "<NlkIrv", "(ar3;&Hj3Xx\"KY4|>");
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service0, service3);
      assertSame(service0, service4);
      assertSame(service1, service3);
      assertSame(service1, service4);
      assertSame(service1, service2);
      assertSame(service1, service0);
      assertSame(service3, service0);
      assertSame(service3, service1);
      assertSame(service3, service4);
      assertSame(service3, service2);
      assertSame(service4, service2);
      assertSame(service4, service1);
      assertSame(service4, service0);
      assertSame(service4, service3);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service4);
      
      Service service5 = service0.port((-2));
      assertSame(service0, service1);
      assertSame(service0, service5);
      assertSame(service0, service2);
      assertSame(service0, service3);
      assertSame(service0, service4);
      assertSame(service5, service0);
      assertSame(service5, service1);
      assertSame(service5, service2);
      assertSame(service5, service3);
      assertSame(service5, service4);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service5);
      
      service5.embeddedServerIdentifier((Object) "");
      assertSame(service0, service1);
      assertSame(service0, service5);
      assertSame(service0, service2);
      assertSame(service0, service3);
      assertSame(service0, service4);
      assertSame(service5, service0);
      assertSame(service5, service1);
      assertSame(service5, service2);
      assertSame(service5, service3);
      assertSame(service5, service4);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      Service service1 = service0.threadPool(404, 404, 404);
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service_StaticFiles0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertNotNull(map0);
      
      service_StaticFiles0.headers(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      Service service1 = service0.port((-2799));
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      Service service2 = service1.webSocketIdleTimeoutMillis(100);
      assertSame(service0, service2);
      assertSame(service0, service1);
      assertSame(service1, service2);
      assertSame(service1, service0);
      assertSame(service2, service1);
      assertSame(service2, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
      
      service2.awaitStop();
      assertSame(service0, service2);
      assertSame(service0, service1);
      assertSame(service1, service2);
      assertSame(service1, service0);
      assertSame(service2, service1);
      assertSame(service2, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        service0.webSocket(string0, (Object) service1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // WebSocket handler must implement 'WebSocketListener' or be annotated as '@WebSocket'
         //
         verifyException("spark.embeddedserver.jetty.websocket.WebSocketHandlerWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      Service service2 = service1.threadPool(4567);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
      
      Service service3 = service2.ipAddress("always");
      assertSame(service0, service3);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service1, service3);
      assertSame(service2, service0);
      assertSame(service2, service3);
      assertSame(service2, service1);
      assertSame(service3, service0);
      assertSame(service3, service1);
      assertSame(service3, service2);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service3);
      
      service3.stop();
      assertSame(service0, service3);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service1, service3);
      assertSame(service2, service0);
      assertSame(service2, service3);
      assertSame(service2, service1);
      assertSame(service3, service0);
      assertSame(service3, service1);
      assertSame(service3, service2);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      assertSame(service0, service4);
      assertSame(service0, service3);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service1, service3);
      assertSame(service1, service4);
      assertSame(service2, service0);
      assertSame(service2, service4);
      assertSame(service2, service3);
      assertSame(service2, service1);
      assertSame(service3, service0);
      assertSame(service3, service1);
      assertSame(service3, service2);
      assertSame(service3, service4);
      assertSame(service4, service1);
      assertSame(service4, service3);
      assertSame(service4, service0);
      assertSame(service4, service2);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service4);
      
      Service service5 = service4.externalStaticFileLocation("always");
      assertSame(service0, service4);
      assertSame(service0, service3);
      assertSame(service0, service1);
      assertSame(service0, service5);
      assertSame(service0, service2);
      assertSame(service1, service0);
      assertSame(service1, service5);
      assertSame(service1, service2);
      assertSame(service1, service3);
      assertSame(service1, service4);
      assertSame(service2, service0);
      assertSame(service2, service4);
      assertSame(service2, service3);
      assertSame(service2, service5);
      assertSame(service2, service1);
      assertSame(service3, service0);
      assertSame(service3, service1);
      assertSame(service3, service5);
      assertSame(service3, service2);
      assertSame(service3, service4);
      assertSame(service4, service5);
      assertSame(service4, service1);
      assertSame(service4, service3);
      assertSame(service4, service0);
      assertSame(service4, service2);
      assertSame(service5, service4);
      assertSame(service5, service2);
      assertSame(service5, service1);
      assertSame(service5, service0);
      assertSame(service5, service3);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service5);
      
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, templateViewRoute0, (TemplateEngine) null);
      assertNotNull(templateViewRouteImpl0);
      
      service2.internalServerError((Route) templateViewRouteImpl0);
      assertSame(service0, service4);
      assertSame(service0, service3);
      assertSame(service0, service1);
      assertSame(service0, service5);
      assertSame(service0, service2);
      assertSame(service1, service0);
      assertSame(service1, service5);
      assertSame(service1, service2);
      assertSame(service1, service3);
      assertSame(service1, service4);
      assertSame(service2, service0);
      assertSame(service2, service4);
      assertSame(service2, service3);
      assertSame(service2, service5);
      assertSame(service2, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
      
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service0, service3);
      assertSame(service1, service0);
      assertSame(service1, service3);
      assertSame(service1, service2);
      assertSame(service2, service3);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertSame(service3, service1);
      assertSame(service3, service0);
      assertSame(service3, service2);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service3);
      
      Service service4 = service3.threadPool(4567, 4567, 4567);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service0, service4);
      assertSame(service0, service3);
      assertSame(service1, service0);
      assertSame(service1, service3);
      assertSame(service1, service2);
      assertSame(service1, service4);
      assertSame(service2, service4);
      assertSame(service2, service3);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertSame(service3, service1);
      assertSame(service3, service0);
      assertSame(service3, service2);
      assertSame(service3, service4);
      assertSame(service4, service2);
      assertSame(service4, service0);
      assertSame(service4, service1);
      assertSame(service4, service3);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service4);
      
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service0, service4);
      assertSame(service0, service3);
      assertSame(service0, service5);
      assertSame(service1, service0);
      assertSame(service1, service3);
      assertSame(service1, service5);
      assertSame(service1, service2);
      assertSame(service1, service4);
      assertSame(service2, service4);
      assertSame(service2, service3);
      assertSame(service2, service0);
      assertSame(service2, service5);
      assertSame(service2, service1);
      assertSame(service3, service1);
      assertSame(service3, service0);
      assertSame(service3, service2);
      assertSame(service3, service4);
      assertSame(service3, service5);
      assertSame(service4, service2);
      assertSame(service4, service5);
      assertSame(service4, service0);
      assertSame(service4, service1);
      assertSame(service4, service3);
      assertSame(service5, service0);
      assertSame(service5, service2);
      assertSame(service5, service4);
      assertSame(service5, service3);
      assertSame(service5, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service5);
      
      service5.notFound("erHEW^vwYJ-");
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service0, service4);
      assertSame(service0, service3);
      assertSame(service0, service5);
      assertSame(service1, service0);
      assertSame(service1, service3);
      assertSame(service1, service5);
      assertSame(service1, service2);
      assertSame(service1, service4);
      assertSame(service2, service4);
      assertSame(service2, service3);
      assertSame(service2, service0);
      assertSame(service2, service5);
      assertSame(service2, service1);
      assertSame(service3, service1);
      assertSame(service3, service0);
      assertSame(service3, service2);
      assertSame(service3, service4);
      assertSame(service3, service5);
      assertSame(service4, service2);
      assertSame(service4, service5);
      assertSame(service4, service0);
      assertSame(service4, service1);
      assertSame(service4, service3);
      assertSame(service5, service0);
      assertSame(service5, service2);
      assertSame(service5, service4);
      assertSame(service5, service3);
      assertSame(service5, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      Service service1 = service0.port((-2026));
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        service1.halt(4567, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      Service service1 = service0.threadPool(3759, 3759, 3759);
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      assertSame(service0, service2);
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
      
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      assertSame(service0, service3);
      assertSame(service0, service2);
      assertSame(service0, service1);
      assertSame(service1, service3);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertSame(service2, service3);
      assertSame(service3, service1);
      assertSame(service3, service0);
      assertSame(service3, service2);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service3);
      
      Service service4 = service3.threadPool(3759);
      assertSame(service0, service3);
      assertSame(service0, service4);
      assertSame(service0, service2);
      assertSame(service0, service1);
      assertSame(service1, service3);
      assertSame(service1, service0);
      assertSame(service1, service4);
      assertSame(service1, service2);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertSame(service2, service4);
      assertSame(service2, service3);
      assertSame(service3, service1);
      assertSame(service3, service4);
      assertSame(service3, service0);
      assertSame(service3, service2);
      assertSame(service4, service2);
      assertSame(service4, service0);
      assertSame(service4, service1);
      assertSame(service4, service3);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service4);
      
      Service service5 = service4.webSocketIdleTimeoutMillis(3759);
      assertSame(service0, service3);
      assertSame(service0, service4);
      assertSame(service0, service2);
      assertSame(service0, service1);
      assertSame(service0, service5);
      assertSame(service1, service3);
      assertSame(service1, service0);
      assertSame(service1, service5);
      assertSame(service1, service4);
      assertSame(service1, service2);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertSame(service2, service5);
      assertSame(service2, service4);
      assertSame(service2, service3);
      assertSame(service3, service1);
      assertSame(service3, service4);
      assertSame(service3, service0);
      assertSame(service3, service2);
      assertSame(service3, service5);
      assertSame(service4, service2);
      assertSame(service4, service0);
      assertSame(service4, service1);
      assertSame(service4, service5);
      assertSame(service4, service3);
      assertSame(service5, service3);
      assertSame(service5, service2);
      assertSame(service5, service1);
      assertSame(service5, service0);
      assertSame(service5, service4);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service5);
      
      int int0 = 2684;
      HttpMethod httpMethod0 = HttpMethod.after;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((FilterImpl) null).when(filterImpl0).withPrefix(anyString());
      // Undeclared exception!
      try { 
        service1.addFilter(httpMethod0, filterImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.route.Routes", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      Service service1 = service0.secure("", "", "", "", "", true);
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      Service service2 = service1.port((-1683));
      assertSame(service0, service2);
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
      
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      assertSame(service0, service3);
      assertSame(service0, service2);
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertSame(service1, service3);
      assertSame(service1, service2);
      assertSame(service2, service3);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertSame(service3, service1);
      assertSame(service3, service2);
      assertSame(service3, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service3);
      
      Service service4 = service3.externalStaticFileLocation("");
      assertSame(service0, service3);
      assertSame(service0, service4);
      assertSame(service0, service2);
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertSame(service1, service3);
      assertSame(service1, service2);
      assertSame(service1, service4);
      assertSame(service2, service3);
      assertSame(service2, service0);
      assertSame(service2, service4);
      assertSame(service2, service1);
      assertSame(service3, service1);
      assertSame(service3, service2);
      assertSame(service3, service4);
      assertSame(service3, service0);
      assertSame(service4, service3);
      assertSame(service4, service1);
      assertSame(service4, service0);
      assertSame(service4, service2);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service4);
      
      Service service5 = service4.secure("", "ALL", (String) null, (String) null);
      assertSame(service0, service3);
      assertSame(service0, service4);
      assertSame(service0, service2);
      assertSame(service0, service5);
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertSame(service1, service3);
      assertSame(service1, service5);
      assertSame(service1, service2);
      assertSame(service1, service4);
      assertSame(service2, service3);
      assertSame(service2, service0);
      assertSame(service2, service4);
      assertSame(service2, service5);
      assertSame(service2, service1);
      assertSame(service3, service5);
      assertSame(service3, service1);
      assertSame(service3, service2);
      assertSame(service3, service4);
      assertSame(service3, service0);
      assertSame(service4, service3);
      assertSame(service4, service1);
      assertSame(service4, service0);
      assertSame(service4, service2);
      assertSame(service4, service5);
      assertSame(service5, service2);
      assertSame(service5, service3);
      assertSame(service5, service0);
      assertSame(service5, service4);
      assertSame(service5, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service5);
      
      // Undeclared exception!
      try { 
        service5.halt();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      Service service1 = service0.staticFileLocation("lpFE^1; w7+`k");
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      String string0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        service1.secure((String) null, "lpFE^1; w7+`k", "", (String) null, "lpFE^1; w7+`k", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must provide a keystore file to run secured
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      Service service1 = service0.port(404);
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service2, service1);
      assertSame(service2, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
      
      Service service3 = service2.threadPool(4567, 4567, 404);
      assertSame(service0, service3);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service1, service3);
      assertSame(service2, service1);
      assertSame(service2, service3);
      assertSame(service2, service0);
      assertSame(service3, service1);
      assertSame(service3, service2);
      assertSame(service3, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service3);
      
      Service service4 = service3.threadPool(1384);
      assertSame(service0, service3);
      assertSame(service0, service4);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service1, service4);
      assertSame(service1, service3);
      assertSame(service2, service4);
      assertSame(service2, service1);
      assertSame(service2, service3);
      assertSame(service2, service0);
      assertSame(service3, service1);
      assertSame(service3, service2);
      assertSame(service3, service0);
      assertSame(service3, service4);
      assertSame(service4, service0);
      assertSame(service4, service1);
      assertSame(service4, service3);
      assertSame(service4, service2);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service4);
      
      Service service5 = service4.staticFileLocation("E*j-O-)Rf");
      assertSame(service0, service3);
      assertSame(service0, service4);
      assertSame(service0, service5);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service5);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service1, service4);
      assertSame(service1, service3);
      assertSame(service2, service4);
      assertSame(service2, service1);
      assertSame(service2, service3);
      assertSame(service2, service0);
      assertSame(service2, service5);
      assertSame(service3, service1);
      assertSame(service3, service2);
      assertSame(service3, service0);
      assertSame(service3, service5);
      assertSame(service3, service4);
      assertSame(service4, service0);
      assertSame(service4, service1);
      assertSame(service4, service3);
      assertSame(service4, service5);
      assertSame(service4, service2);
      assertSame(service5, service3);
      assertSame(service5, service2);
      assertSame(service5, service0);
      assertSame(service5, service4);
      assertSame(service5, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service5);
      
      // Undeclared exception!
      try { 
        service5.halt(4567, "E*j-O-)Rf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      String string0 = " 3!bXoIK5^ZQYfL";
      Service service1 = service0.staticFileLocation(" 3!bXoIK5^ZQYfL");
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      HttpMethod httpMethod0 = HttpMethod.options;
      // Undeclared exception!
      try { 
        service1.addFilter(httpMethod0, (FilterImpl) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      Service service1 = service0.threadPool(0, 1, 0);
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      Service service2 = service1.secure("", "", "", "jdl72", false);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service2);
      assertSame(service1, service0);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
      
      Service service3 = service2.webSocketIdleTimeoutMillis(1);
      assertSame(service0, service1);
      assertSame(service0, service3);
      assertSame(service0, service2);
      assertSame(service1, service3);
      assertSame(service1, service2);
      assertSame(service1, service0);
      assertSame(service2, service3);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertSame(service3, service1);
      assertSame(service3, service0);
      assertSame(service3, service2);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service3);
      
      // Undeclared exception!
      try { 
        service3.halt();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      Service service1 = service0.ipAddress("spark.Service$1");
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service2);
      assertSame(service1, service0);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
      
      Service service3 = service2.threadPool(92);
      assertSame(service0, service2);
      assertSame(service0, service1);
      assertSame(service0, service3);
      assertSame(service1, service2);
      assertSame(service1, service3);
      assertSame(service1, service0);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertSame(service2, service3);
      assertSame(service3, service0);
      assertSame(service3, service1);
      assertSame(service3, service2);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service3);
      
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      assertSame(service0, service2);
      assertSame(service0, service1);
      assertSame(service0, service3);
      assertSame(service0, service4);
      assertSame(service1, service4);
      assertSame(service1, service2);
      assertSame(service1, service3);
      assertSame(service1, service0);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertSame(service2, service3);
      assertSame(service2, service4);
      assertSame(service3, service0);
      assertSame(service3, service1);
      assertSame(service3, service4);
      assertSame(service3, service2);
      assertSame(service4, service0);
      assertSame(service4, service3);
      assertSame(service4, service2);
      assertSame(service4, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service4);
      
      Service service5 = service4.staticFileLocation("");
      assertSame(service0, service5);
      assertSame(service0, service2);
      assertSame(service0, service1);
      assertSame(service0, service3);
      assertSame(service0, service4);
      assertSame(service1, service4);
      assertSame(service1, service2);
      assertSame(service1, service3);
      assertSame(service1, service0);
      assertSame(service1, service5);
      assertSame(service2, service0);
      assertSame(service2, service5);
      assertSame(service2, service1);
      assertSame(service2, service3);
      assertSame(service2, service4);
      assertSame(service3, service0);
      assertSame(service3, service5);
      assertSame(service3, service1);
      assertSame(service3, service4);
      assertSame(service3, service2);
      assertSame(service4, service5);
      assertSame(service4, service0);
      assertSame(service4, service3);
      assertSame(service4, service2);
      assertSame(service4, service1);
      assertSame(service5, service3);
      assertSame(service5, service1);
      assertSame(service5, service0);
      assertSame(service5, service4);
      assertSame(service5, service2);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service5);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service2);
      assertSame(service1, service0);
      assertSame(service2, service1);
      assertSame(service2, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
      
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      assertSame(service0, service3);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service2);
      assertSame(service1, service0);
      assertSame(service1, service3);
      assertSame(service3, service1);
      assertSame(service3, service0);
      assertSame(service3, service2);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service3);
      
      Service service4 = service2.threadPool(4567);
      assertSame(service0, service3);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service0, service4);
      assertSame(service1, service2);
      assertSame(service1, service0);
      assertSame(service1, service4);
      assertSame(service1, service3);
      assertSame(service2, service1);
      assertSame(service2, service0);
      assertSame(service2, service4);
      assertSame(service2, service3);
      assertSame(service4, service3);
      assertSame(service4, service2);
      assertSame(service4, service0);
      assertSame(service4, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service4);
      
      Service service5 = service4.secure("z<='LC6pF|N|\",Z", "onKt$0z8`", "Pf^>7Xbyc_7L0\"0T", " could not connect to database; will try later", "ignore push in {}", true);
      assertSame(service0, service5);
      assertSame(service0, service3);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service0, service4);
      assertSame(service1, service2);
      assertSame(service1, service0);
      assertSame(service1, service4);
      assertSame(service1, service5);
      assertSame(service1, service3);
      assertSame(service2, service1);
      assertSame(service2, service5);
      assertSame(service2, service0);
      assertSame(service2, service4);
      assertSame(service2, service3);
      assertSame(service4, service3);
      assertSame(service4, service5);
      assertSame(service4, service2);
      assertSame(service4, service0);
      assertSame(service4, service1);
      assertSame(service5, service3);
      assertSame(service5, service1);
      assertSame(service5, service2);
      assertSame(service5, service0);
      assertSame(service5, service4);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service5);
      
      // Undeclared exception!
      try { 
        service5.halt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      Service service1 = service0.secure(" '", " '", " '", " '");
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      assertSame(service0, service2);
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
      
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      assertSame(service0, service3);
      assertSame(service0, service2);
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service1, service3);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertSame(service2, service3);
      assertSame(service3, service2);
      assertSame(service3, service1);
      assertSame(service3, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service3);
      
      Service service4 = service3.secure("Ua*Nl4eb&U", "`ZmVF>", "", "Ua*Nl4eb&U", false);
      assertSame(service0, service3);
      assertSame(service0, service2);
      assertSame(service0, service1);
      assertSame(service0, service4);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service1, service4);
      assertSame(service1, service3);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertSame(service2, service4);
      assertSame(service2, service3);
      assertSame(service3, service4);
      assertSame(service3, service2);
      assertSame(service3, service1);
      assertSame(service3, service0);
      assertSame(service4, service1);
      assertSame(service4, service3);
      assertSame(service4, service2);
      assertSame(service4, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service4);
      
      HttpMethod httpMethod0 = HttpMethod.unsupported;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(" '", templateViewRoute0, templateEngine0);
      assertNotNull(templateViewRouteImpl0);
      
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", "`ZmVF>", (Route) templateViewRouteImpl0, responseTransformer0);
      assertNotNull(responseTransformerRouteImpl0);
      
      service4.addRoute(httpMethod0, (RouteImpl) responseTransformerRouteImpl0);
      assertSame(service0, service3);
      assertSame(service0, service2);
      assertSame(service0, service1);
      assertSame(service0, service4);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service1, service4);
      assertSame(service1, service3);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertSame(service2, service4);
      assertSame(service2, service3);
      assertSame(service3, service4);
      assertSame(service3, service2);
      assertSame(service3, service1);
      assertSame(service3, service0);
      assertSame(service4, service1);
      assertSame(service4, service3);
      assertSame(service4, service2);
      assertSame(service4, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      String string2 = "";
      // Undeclared exception!
      try { 
        service0.secure("", "", ".+CSS?! }Ky(oQqzs", ".+CSS?! }Ky(oQqzs", ")");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      Service service1 = service0.secure("SWdOf+E&Pw.${q|=N", "SWdOf+E&Pw.${q|=N", "SWdOf+E&Pw.${q|=N", "B", " [");
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      // Undeclared exception!
      try { 
        service1.externalStaticFileLocation((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'folder' must not be null
         //
         verifyException("spark.utils.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service2, service1);
      assertSame(service2, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
      
      int int0 = 0;
      service1.awaitStop();
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      Service service3 = service2.threadPool(0, 4567, (-769));
      assertSame(service0, service3);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service3);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service2, service3);
      assertSame(service2, service1);
      assertSame(service2, service0);
      assertSame(service3, service0);
      assertSame(service3, service1);
      assertSame(service3, service2);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service3);
      
      String string1 = "Tdb1FI:-oNpBgY}Tn";
      Service service4 = service3.secure("Static file location has already been set", "", "_eqe2cQz;", (String) null, "Tdb1FI:-oNpBgY}Tn");
      assertSame(service0, service3);
      assertSame(service0, service1);
      assertSame(service0, service4);
      assertSame(service0, service2);
      assertSame(service1, service3);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service1, service4);
      assertSame(service2, service3);
      assertSame(service2, service1);
      assertSame(service2, service4);
      assertSame(service2, service0);
      assertSame(service3, service0);
      assertSame(service3, service1);
      assertSame(service3, service2);
      assertSame(service3, service4);
      assertSame(service4, service0);
      assertSame(service4, service3);
      assertSame(service4, service1);
      assertSame(service4, service2);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service4);
      
      // Undeclared exception!
      try { 
        service4.awaitInitialization();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Server has not been properly initialized
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      Service service1 = service0.externalStaticFileLocation("CAUSED BY %s%n");
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      assertNotNull(templateViewRouteImpl0);
      
      RouteImpl routeImpl0 = RouteImpl.create("CAUSED BY %s%n", (Route) templateViewRouteImpl0);
      assertNotNull(routeImpl0);
      
      service1.notFound((Route) routeImpl0);
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      // Undeclared exception!
      try { 
        service1.secure((String) null, (String) null, (String) null, "CAUSED BY %s%n", "org.eclipse.jetty.util.ssl.SslContextFactory");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must provide a keystore file to run secured
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      Service service1 = service0.staticFileLocation("");
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      Service service2 = service1.threadPool(4567, (-4302), (-4302));
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service2, service1);
      assertSame(service2, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
      
      HttpMethod httpMethod0 = HttpMethod.delete;
      RouteImpl routeImpl0 = RouteImpl.create("", "Executor must not be null!", (Route) null);
      assertNotNull(routeImpl0);
      
      service2.addRoute(httpMethod0, routeImpl0);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service2, service1);
      assertSame(service2, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      Service service1 = service0.port(81);
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      Service service2 = service1.secure("", "($", "", "*/*");
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
      
      Service service3 = service2.staticFileLocation("L!tr&xo?CH\"#");
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service0, service3);
      assertSame(service1, service0);
      assertSame(service1, service3);
      assertSame(service1, service2);
      assertSame(service2, service3);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertSame(service3, service0);
      assertSame(service3, service1);
      assertSame(service3, service2);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service3);
      
      String string0 = service3.getPaths();
      assertEquals("", string0);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service0, service3);
      assertSame(service1, service0);
      assertSame(service1, service3);
      assertSame(service1, service2);
      assertSame(service2, service3);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertSame(service3, service0);
      assertSame(service3, service1);
      assertSame(service3, service2);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
      
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service0, service3);
      assertSame(service2, service3);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertSame(service3, service0);
      assertSame(service3, service2);
      assertSame(service3, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service3);
      
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service0, service3);
      assertSame(service0, service4);
      assertSame(service2, service3);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertSame(service2, service4);
      assertSame(service3, service4);
      assertSame(service3, service0);
      assertSame(service3, service2);
      assertSame(service3, service1);
      assertSame(service4, service1);
      assertSame(service4, service2);
      assertSame(service4, service3);
      assertSame(service4, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service4);
      
      Service service5 = service4.externalStaticFileLocation(string0);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service0, service3);
      assertSame(service0, service5);
      assertSame(service0, service4);
      assertSame(service2, service3);
      assertSame(service2, service5);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertSame(service2, service4);
      assertSame(service3, service4);
      assertSame(service3, service0);
      assertSame(service3, service2);
      assertSame(service3, service1);
      assertSame(service3, service5);
      assertSame(service4, service1);
      assertSame(service4, service2);
      assertSame(service4, service3);
      assertSame(service4, service0);
      assertSame(service4, service5);
      assertSame(service5, service3);
      assertSame(service5, service4);
      assertSame(service5, service2);
      assertSame(service5, service1);
      assertSame(service5, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service5);
      
      String string1 = "2l/";
      String string2 = "";
      service5.minThreads = service2.SPARK_DEFAULT_PORT;
      service3.init();
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service0, service3);
      assertSame(service0, service5);
      assertSame(service0, service4);
      assertSame(service2, service3);
      assertSame(service2, service5);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertSame(service2, service4);
      assertSame(service3, service4);
      assertSame(service3, service0);
      assertSame(service3, service2);
      assertSame(service3, service1);
      assertSame(service3, service5);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      Class<Exception> class0 = Exception.class;
      ExceptionHandler<Exception> exceptionHandler0 = (ExceptionHandler<Exception>) mock(ExceptionHandler.class, new ViolatedAssumptionAnswer());
      service3.exception(class0, (ExceptionHandler<? super Exception>) exceptionHandler0);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service0, service3);
      assertSame(service0, service5);
      assertSame(service0, service4);
      assertSame(service2, service3);
      assertSame(service2, service5);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertSame(service2, service4);
      assertSame(service3, service4);
      assertSame(service3, service0);
      assertSame(service3, service2);
      assertSame(service3, service1);
      assertSame(service3, service5);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      
      // Undeclared exception!
      try { 
        service5.secure(string1, string1, string2, string2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      Service service1 = service0.secure("", "3c,+^t0oI,FAyv(bH", "9<9Z3\"ZueU<X<W.G%", "H");
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service_StaticFiles0);
      
      service_StaticFiles0.expireTime(4567);
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      String string0 = "&m9gK<";
      Service service1 = service0.staticFileLocation("&m9gK<");
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      String string1 = "{}unconsumed input {}";
      String string2 = "flushed incomplete";
      String string3 = null;
      // Undeclared exception!
      try { 
        service0.awaitInitialization();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Server has not been properly initialized
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      Service service1 = service0.secure("]4Lr", "]4Lr", "", "", true);
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("]4Lr", templateViewRoute0, templateEngine0);
      assertNotNull(templateViewRouteImpl0);
      
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("DSTa8!{<_xY|", "NwcqN$1,8Mrt/CoW<", (Route) templateViewRouteImpl0, responseTransformer0);
      assertNotNull(responseTransformerRouteImpl0);
      
      service1.notFound((Route) responseTransformerRouteImpl0);
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      Service service1 = service0.threadPool(0, 0, 0);
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      Service service2 = service1.webSocketIdleTimeoutMillis(0);
      assertSame(service0, service2);
      assertSame(service0, service1);
      assertSame(service1, service2);
      assertSame(service1, service0);
      assertSame(service2, service1);
      assertSame(service2, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
      
      String string0 = null;
      String string1 = "?!o|1c*,t)U.NO ?ML";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        service2.secure(string0, string0, string1, string0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must provide a keystore file to run secured
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Service service0 = Service.ignite();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service0);
      
      Service service1 = service0.secure("", "", "= d3Nn}W-ooKlu", (String) null, "");
      assertSame(service0, service1);
      assertSame(service1, service0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service1);
      
      Service service2 = service1.port(276);
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service2);
      
      Service.StaticFiles service_StaticFiles0 = service2.new StaticFiles();
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertNotNull(service_StaticFiles0);
      
      service_StaticFiles0.disableMimeTypeGuessing();
      assertSame(service0, service1);
      assertSame(service0, service2);
      assertSame(service1, service0);
      assertSame(service1, service2);
      assertSame(service2, service0);
      assertSame(service2, service1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Service service0 = Service.ignite();
      service0.embeddedServerIdentifier();
      service0.awaitStop();
      RouteGroup routeGroup0 = mock(RouteGroup.class, new ViolatedAssumptionAnswer());
      service0.path(",$d5s", routeGroup0);
      Class<Exception> class0 = Exception.class;
      ExceptionHandler<Exception> exceptionHandler0 = (ExceptionHandler<Exception>) mock(ExceptionHandler.class, new ViolatedAssumptionAnswer());
      service0.exception(class0, (ExceptionHandler<? super Exception>) exceptionHandler0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Service service0 = Service.ignite();
      // Undeclared exception!
      try { 
        service0.path("7D:(yoko:7w=jP8", (RouteGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("");
      Service service2 = service1.secure("", "", "", "", "");
      Service service3 = service2.webSocketIdleTimeoutMillis(0);
      service3.awaitStop();
      assertSame(service3, service0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Service service0 = Service.ignite();
      service0.internalServerError("'O1J<!ch'@(iv#s");
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Service service0 = Service.ignite();
      Service.StaticFiles service_StaticFiles0 = service0.new StaticFiles();
      service_StaticFiles0.externalLocation("");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("x6", "x6", "x6", "", false);
      Service service2 = service1.ipAddress("");
      Service service3 = service2.threadPool(4567);
      // Undeclared exception!
      try { 
        service3.halt("x6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("U1'W\"7C", "U1'W\"7C", "RH&H,L;SCm(,},V/1xD", "U1'W\"7C", "ignite failed");
      assertSame(service0, service1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Service service0 = Service.ignite();
      // Undeclared exception!
      try { 
        service0.unmap("&!");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "5'** 0";
      Service service1 = service0.webSocketIdleTimeoutMillis(4567);
      String string1 = "";
      String string2 = "ignite failed";
      String string3 = "";
      boolean boolean0 = true;
      Service service2 = service1.secure(string0, string1, string2, string0, string3, boolean0);
      String string4 = "`vV^ m]8;Z!B*nT0re";
      Service service3 = service2.secure(string2, string0, string4, string0, boolean0);
      Service service4 = service3.externalStaticFileLocation(string0);
      int int0 = (-155);
      int int1 = 140;
      Service service5 = service4.threadPool(int0, int1, service0.SPARK_DEFAULT_PORT);
      assertSame(service5, service2);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Service service0 = Service.ignite();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      service0.staticFiles.headers(map0);
      // Undeclared exception!
      try { 
        service0.awaitInitialization();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Server has not been properly initialized
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Service service0 = Service.ignite();
      HttpMethod httpMethod0 = HttpMethod.head;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl0).toString();
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service0.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl2).getAcceptType();
      doReturn("/GYNN6").when(filterImpl2).getPath();
      service0.addFilter("/GYNN6", filterImpl2);
      // Undeclared exception!
      try { 
        service0.threadPool(4567, 124, 4567);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = " 3!bXoIK5^ZQYfL";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(" 3!bXoIK5^ZQYfL", " 3!bXoIK5^ZQYfL", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(" 3!bXoIK5^ZQYfL", (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(" 3!bXoIK5^ZQYfL", " 3!bXoIK5^ZQYfL", (Route) responseTransformerRouteImpl0);
      service0.addRoute(" 3!bXoIK5^ZQYfL", routeImpl0);
      Consumer<Exception> consumer0 = (Consumer<Exception>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        service0.initExceptionHandler(consumer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("", "", "", "", "");
      service1.init();
      // Undeclared exception!
      try { 
        service0.port(4567);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Service service0 = Service.ignite();
      HttpMethod httpMethod0 = HttpMethod.connect;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("n", "n", templateViewRoute0, templateEngine0);
      service0.addRoute(httpMethod0, (RouteImpl) templateViewRouteImpl0);
      // Undeclared exception!
      try { 
        service0.ipAddress("n");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Consumer<Exception> consumer0 = (Consumer<Exception>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      service0.initExceptionHandler(consumer0);
      service1.initialized = true;
      // Undeclared exception!
      try { 
        service1.webSocketIdleTimeoutMillis(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(",", templateViewRoute0, templateEngine0);
      service0.threadPool(24, 24, 24);
      service0.activeThreadCount();
      service1.addRoute("yty|j_=z4o3Q", (RouteImpl) templateViewRouteImpl0);
      service1.unmap("yty|j_=z4o3Q");
      service1.stop();
      // Undeclared exception!
      try { 
        service0.halt(0, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Service service0 = Service.ignite();
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", "", (Route) null, responseTransformer0);
      service0.addRoute("6", (RouteImpl) responseTransformerRouteImpl0);
      // Undeclared exception!
      try { 
        service0.externalStaticFileLocation("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "s";
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("s", "s", (Route) null, responseTransformer0);
      service0.addRoute("s", (RouteImpl) responseTransformerRouteImpl0);
      // Undeclared exception!
      try { 
        service0.externalStaticFileLocation("s");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "/*";
      service0.staticFiles.header("/*", "/*");
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        service0.webSocket("/*", class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // WebSocket handler must implement 'WebSocketListener' or be annotated as '@WebSocket'
         //
         verifyException("spark.embeddedserver.jetty.websocket.WebSocketHandlerWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Service service0 = Service.ignite();
      service0.awaitStop();
      // Undeclared exception!
      try { 
        service0.routes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Service service0 = Service.ignite();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        service0.secure((String) null, (String) null, (String) null, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must provide a keystore file to run secured
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Service service0 = Service.ignite();
      // Undeclared exception!
      try { 
        service0.halt();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("always");
      service1.stop();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, templateViewRoute0, (TemplateEngine) null);
      service0.internalServerError((Route) templateViewRouteImpl0);
      // Undeclared exception!
      try { 
        service1.awaitInitialization();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Server has not been properly initialized
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Service service0 = Service.ignite();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(" 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", templateViewRoute0, templateEngine0);
      service0.addRoute(" 3!bXoIhK5^ZQYfL", (RouteImpl) templateViewRouteImpl0);
      service0.port();
      RouteGroup routeGroup0 = mock(RouteGroup.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        service0.embeddedServerIdentifier((Object) service0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Service service0 = Service.ignite();
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", (TemplateViewRoute) null, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", (Route) templateViewRouteImpl0, responseTransformer0);
      service0.addRoute("", (RouteImpl) responseTransformerRouteImpl0);
      // Undeclared exception!
      try { 
        service0.staticFileLocation("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.webSocketIdleTimeoutMillis(0);
      String string0 = "'";
      boolean boolean0 = false;
      Service service2 = service1.secure(string0, string0, string0, string0, boolean0);
      String string1 = "";
      TemplateViewRoute templateViewRoute0 = null;
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string1, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      service0.addRoute(string0, (RouteImpl) responseTransformerRouteImpl0);
      // Undeclared exception!
      try { 
        service2.staticFileLocation(string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Service service0 = Service.ignite();
      RouteGroup routeGroup0 = mock(RouteGroup.class, new ViolatedAssumptionAnswer());
      Class<Exception> class0 = Exception.class;
      service0.exception(class0, (ExceptionHandler<? super Exception>) null);
      service0.activeThreadCount();
      service0.path("", routeGroup0);
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        service0.halt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "0.0.0.0";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("0.0.0.0", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("0.0.0.0", "0.0.0.0", (Route) templateViewRouteImpl0, responseTransformer0);
      service0.notFound((Route) responseTransformerRouteImpl0);
      service0.staticFiles.disableMimeTypeGuessing();
      // Undeclared exception!
      try { 
        service0.halt(4567);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Service service0 = Service.ignite();
      BadMessageException badMessageException0 = new BadMessageException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("\"+\"", "", badMessageException0);
      service0.embeddedServerIdentifier((Object) sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        service0.unmap("", "\"+\"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(4567);
      Service service2 = Service.ignite();
      service0.internalServerError("Must provide a keystore file to run secured");
      service0.embeddedServerIdentifier();
      Service service3 = service0.staticFileLocation("Must provide a keystore file to run secured");
      service3.notFound("");
      service2.staticFiles.externalLocation("");
      service0.staticFiles.expireTime(4567);
      service0.staticFiles.registerMimeType("Must provide a keystore file to run secured", "");
      service1.staticFiles.location("Must provide a keystore file to run secured");
      service2.externalStaticFileLocation("Must provide a keystore file to run secured");
      // Undeclared exception!
      try { 
        service0.webSocket("Must provide a keystore file to run secured", (Object) service3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // WebSocket handler must implement 'WebSocketListener' or be annotated as '@WebSocket'
         //
         verifyException("spark.embeddedserver.jetty.websocket.WebSocketHandlerWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Service service0 = Service.ignite();
      // Undeclared exception!
      try { 
        service0.port();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done after route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }
}
