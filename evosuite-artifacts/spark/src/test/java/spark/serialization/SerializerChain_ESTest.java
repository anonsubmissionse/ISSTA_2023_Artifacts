/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 06 17:21:39 GMT 2022
 */

package spark.serialization;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;
import spark.serialization.SerializerChain;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SerializerChain_ESTest extends SerializerChain_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SerializerChain serializerChain0 = new SerializerChain();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      pipedInputStream0.markSupported();
      pipedInputStream0.markSupported();
      pipedOutputStream0.flush();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      serializerChain0.process(mockPrintStream0, pipedOutputStream0);
      // Undeclared exception!
      serializerChain0.process(mockPrintStream0, pipedInputStream0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SerializerChain serializerChain0 = new SerializerChain();
      String string0 = "I9\\/Mdg;VZ{a**N7g";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("I9/Mdg;VZ{a**N7g");
      serializerChain0.process(mockFileOutputStream0, "I9/Mdg;VZ{a**N7g");
      mockFileOutputStream0.close();
      String string1 = "]+|^AM,X|ed<*";
      String string2 = null;
      // Undeclared exception!
      try { 
        serializerChain0.process(mockFileOutputStream0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SerializerChain serializerChain0 = new SerializerChain();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      Object object0 = new Object();
      serializerChain0.process(filterOutputStream0, object0);
      String string0 = "[";
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "[";
      Object object1 = new Object();
      objectArray0[2] = object1;
      Object object2 = new Object();
      objectArray0[3] = object2;
      objectArray0[4] = (Object) filterOutputStream0;
      objectArray0[5] = (Object) mockPrintStream0;
      objectArray0[6] = (Object) mockPrintStream0;
      objectArray0[7] = (Object) pipedOutputStream0;
      PrintStream printStream0 = mockPrintStream0.printf("[", objectArray0);
      Object object3 = new Object();
      serializerChain0.process(printStream0, object3);
      Object object4 = new Object();
      try { 
        serializerChain0.process(pipedOutputStream0, object4);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SerializerChain serializerChain0 = new SerializerChain();
      OutputStream outputStream0 = null;
      String string0 = "xj;B";
      // Undeclared exception!
      try { 
        serializerChain0.process((OutputStream) null, "xj;B");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.serialization.DefaultSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SerializerChain serializerChain0 = new SerializerChain();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.close();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte) (-15);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)0;
      filterOutputStream0.write(byteArray0);
      Object object0 = new Object();
      serializerChain0.process(filterOutputStream0, object0);
  }
}
