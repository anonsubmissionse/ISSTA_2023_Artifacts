/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 06 15:36:04 GMT 2022
 */

package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.net.CookieManager;
import java.net.CookieStore;
import java.net.MalformedURLException;
import java.net.ProtocolFamily;
import java.net.Proxy;
import java.net.StandardProtocolFamily;
import java.net.URI;
import java.net.URL;
import java.nio.channels.DatagramChannel;
import java.nio.channels.Selector;
import java.nio.charset.IllegalCharsetNameException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.Executor;
import javax.net.ssl.SSLSocketFactory;
import org.eclipse.jetty.io.ManagedSelector;
import org.eclipse.jetty.io.SelectorManager;
import org.eclipse.jetty.util.HttpCookieStore;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.jsoup.Connection;
import org.jsoup.helper.HttpConnection;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpConnection_ESTest extends HttpConnection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      
      HttpConnection.Request httpConnection_Request1 = new HttpConnection.Request(httpConnection_Request0);
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection_Request1);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      
      HttpConnection httpConnection0 = new HttpConnection(httpConnection_Request1);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection0);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertNotNull(proxy0);
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request0.proxy(proxy0);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request2.equals((Object)httpConnection_Request1));
      assertNotNull(httpConnection_Request2);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertEquals(2097152, httpConnection_Request2.maxBodySize());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertNotSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      
      Connection connection0 = httpConnection0.data("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36", (InputStream) pipedInputStream0);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request2));
      assertNotNull(connection0);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(0, pipedInputStream0.available());
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      assertNotSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Connection connection1 = httpConnection0.timeout(94);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request2));
      assertNotNull(connection1);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      assertNotSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      
      // Undeclared exception!
      try { 
        connection1.method((Connection.Method) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The parameter 'method' must not be null.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      
      HttpConnection.Request httpConnection_Request1 = new HttpConnection.Request(httpConnection_Request0);
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection_Request1);
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      
      HttpConnection.Request httpConnection_Request2 = (HttpConnection.Request)httpConnection_Request0.addHeader("doctype-system", (String) null);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request2.equals((Object)httpConnection_Request1));
      assertNotNull(httpConnection_Request2);
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertEquals(2097152, httpConnection_Request2.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertNotSame(httpConnection_Request2, httpConnection_Request1);
      
      HttpConnection httpConnection0 = new HttpConnection(httpConnection_Request1);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request2));
      assertNotNull(httpConnection0);
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      
      // Undeclared exception!
      try { 
        httpConnection0.get();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL not set. Make sure to call #url(...) before executing the request.
         //
         verifyException("org.jsoup.helper.HttpConnection$Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      
      HttpConnection.Request httpConnection_Request1 = new HttpConnection.Request(httpConnection_Request0);
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection_Request1);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request1.timeout());
      
      HttpConnection httpConnection0 = new HttpConnection(httpConnection_Request1);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection0);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request1.timeout());
      
      // Undeclared exception!
      try { 
        httpConnection0.referrer((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The parameter 'referrer' must not be null.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HashSet<Connection.KeyVal> hashSet0 = new HashSet<Connection.KeyVal>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      Iterator<Connection.KeyVal> iterator0 = hashSet0.iterator();
      assertNotNull(iterator0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      Connection connection0 = httpConnection0.data((Collection<Connection.KeyVal>) hashSet0);
      assertNotNull(connection0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      int int0 = 89;
      Connection connection1 = httpConnection0.proxy("%#<#(A@45'n", 89);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      Connection.KeyVal connection_KeyVal0 = httpConnection0.data("|\"H uEE]%N}");
      assertNull(connection_KeyVal0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackPosition());
      assertFalse(parser0.isTrackErrors());
      
      String string0 = "useragent";
      // Undeclared exception!
      try { 
        connection0.data((Map<String, String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The parameter 'data' must not be null.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      
      String string0 = "";
      HttpConnection.Request httpConnection_Request1 = new HttpConnection.Request(httpConnection_Request0);
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection_Request1);
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      
      Connection.Request connection_Request0 = httpConnection_Request1.followRedirects(false);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertFalse(connection_Request0.equals((Object)httpConnection_Request0));
      assertNotNull(connection_Request0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertFalse(httpConnection_Request1.followRedirects());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(30000, connection_Request0.timeout());
      assertEquals(2097152, connection_Request0.maxBodySize());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
      assertNull(connection_Request0.requestBody());
      assertFalse(connection_Request0.followRedirects());
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertNotSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request1, connection_Request0);
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      assertNotSame(connection_Request0, httpConnection_Request0);
      assertSame(connection_Request0, httpConnection_Request1);
      
      String string1 = "";
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("some", uRL0.getAuthority());
      
      HttpConnection.Request httpConnection_Request2 = (HttpConnection.Request)httpConnection_Request1.url(uRL0);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request0.equals((Object)connection_Request0));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertFalse(httpConnection_Request2.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection_Request2);
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertFalse(httpConnection_Request1.followRedirects());
      assertNull(httpConnection_Request1.requestBody());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("some", uRL0.getAuthority());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals(2097152, httpConnection_Request2.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.followRedirects());
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertNotSame(httpConnection_Request0, connection_Request0);
      assertNotSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, connection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertNotSame(httpConnection_Request2, httpConnection_Request0);
      
      Collection<Connection.KeyVal> collection0 = httpConnection_Request1.data();
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request0.equals((Object)connection_Request0));
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request2));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(collection0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertFalse(httpConnection_Request1.followRedirects());
      assertNull(httpConnection_Request1.requestBody());
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertNotSame(httpConnection_Request0, connection_Request0);
      assertNotSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      
      URL uRL1 = HttpConnection.encodeUrl(uRL0);
      assertTrue(uRL1.equals((Object)uRL0));
      assertNotNull(uRL1);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("some", uRL0.getAuthority());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("file", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("some", uRL1.getHost());
      assertNull(uRL1.getQuery());
      assertEquals("some", uRL1.getAuthority());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      HttpConnection httpConnection0 = new HttpConnection(httpConnection_Request2);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request0.equals((Object)connection_Request0));
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request2));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertTrue(uRL0.equals((Object)uRL1));
      assertFalse(httpConnection_Request2.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertFalse(httpConnection_Request1.followRedirects());
      assertNull(httpConnection_Request1.requestBody());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("some", uRL0.getAuthority());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals(2097152, httpConnection_Request2.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.followRedirects());
      
      String string2 = "command";
      HttpConnection httpConnection1 = (HttpConnection)HttpConnection.connect(uRL1);
      assertTrue(uRL0.equals((Object)uRL1));
      assertTrue(uRL1.equals((Object)uRL0));
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertNotNull(httpConnection1);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("some", uRL0.getAuthority());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("file", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("some", uRL1.getHost());
      assertNull(uRL1.getQuery());
      assertEquals("some", uRL1.getAuthority());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(httpConnection1, httpConnection0);
      
      HttpConnection httpConnection2 = (HttpConnection)httpConnection0.proxy("command", 0);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request0.equals((Object)connection_Request0));
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request2));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertTrue(uRL0.equals((Object)uRL1));
      assertFalse(httpConnection_Request2.equals((Object)httpConnection_Request0));
      assertFalse(httpConnection0.equals((Object)httpConnection1));
      assertFalse(httpConnection2.equals((Object)httpConnection1));
      assertNotNull(httpConnection2);
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertFalse(httpConnection_Request1.followRedirects());
      assertNull(httpConnection_Request1.requestBody());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("some", uRL0.getAuthority());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals(2097152, httpConnection_Request2.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.followRedirects());
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertNotSame(httpConnection_Request0, connection_Request0);
      assertNotSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      assertNotSame(uRL0, uRL1);
      assertSame(httpConnection_Request2, connection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertNotSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection0, httpConnection2);
      assertNotSame(httpConnection0, httpConnection1);
      assertNotSame(httpConnection2, httpConnection1);
      assertSame(httpConnection2, httpConnection0);
      
      try { 
        httpConnection0.get();
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      
      HttpConnection.Request httpConnection_Request1 = new HttpConnection.Request(httpConnection_Request0);
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection_Request1);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      
      HttpConnection httpConnection0 = new HttpConnection(httpConnection_Request1);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      
      Connection.Method connection_Method0 = Connection.Method.PATCH;
      boolean boolean0 = true;
      Connection.Request connection_Request0 = httpConnection_Request1.followRedirects(true);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertFalse(connection_Request0.equals((Object)httpConnection_Request0));
      assertNotNull(connection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(connection_Request0.requestBody());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(30000, connection_Request0.timeout());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertEquals(2097152, connection_Request0.maxBodySize());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
      assertNotSame(httpConnection_Request0, connection_Request0);
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, connection_Request0);
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(connection_Request0, httpConnection_Request1);
      assertNotSame(connection_Request0, httpConnection_Request0);
      
      httpConnection_Request0.method = connection_Method0;
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertTrue(httpConnection_Request0.method.hasBody());
      
      Connection connection0 = httpConnection0.cookie("[}!:ti!a;3", "Unexpected unwrap result ");
      assertFalse(httpConnection_Request0.equals((Object)connection_Request0));
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(connection0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNotSame(httpConnection_Request0, connection_Request0);
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, connection_Request0);
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      // Undeclared exception!
      try { 
        HttpConnection.connect((URL) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The parameter 'url' must not be null.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      CookieStore cookieStore0 = httpConnection0.cookieStore();
      assertNotNull(cookieStore0);
      
      Connection connection0 = httpConnection0.cookieStore(cookieStore0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Connection connection1 = httpConnection0.data("Eete{u^\"eRux4u~w", "Eete{u^\"eRux4u~w");
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      
      Connection connection2 = httpConnection0.header("Eete{u^\"eRux4u~w", "Eete{u^\"eRux4u~w");
      assertNotNull(connection2);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection2, httpConnection0);
      assertSame(connection2, connection1);
      assertSame(connection2, connection0);
      
      Tag tag0 = Tag.valueOf("Eete{u^\"eRux4u~w");
      assertNotNull(tag0);
      assertFalse(tag0.preserveWhitespace());
      assertEquals("eete{u^\"erux4u~w", tag0.normalName());
      assertFalse(tag0.isSelfClosing());
      assertEquals("Eete{u^\"eRux4u~w", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertEquals("Eete{u^\"eRux4u~w", tag0.toString());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertTrue(attributes0.isEmpty());
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("fMY2@~GX8z5l", false);
      assertNotNull(attributes1);
      assertTrue(attributes0.isEmpty());
      assertEquals(0, attributes0.size());
      assertTrue(attributes1.isEmpty());
      assertEquals(0, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      attributes1.remove("application/x-www-form-urlencoded");
      assertTrue(attributes0.isEmpty());
      assertEquals(0, attributes0.size());
      assertTrue(attributes1.isEmpty());
      assertEquals(0, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "application/x-www-form-urlencoded", attributes1);
      assertNotNull(pseudoTextElement0);
      assertFalse(tag0.preserveWhitespace());
      assertEquals("eete{u^\"erux4u~w", tag0.normalName());
      assertFalse(tag0.isSelfClosing());
      assertEquals("Eete{u^\"eRux4u~w", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertEquals("Eete{u^\"eRux4u~w", tag0.toString());
      assertFalse(attributes0.isEmpty());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(attributes1.isEmpty());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("Eete{u^\"eRux4u~w", pseudoTextElement0.nodeName());
      assertEquals("eete{u^\"erux4u~w", pseudoTextElement0.normalName());
      assertEquals("Eete{u^\"eRux4u~w", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      
      List<Node> list0 = pseudoTextElement0.childNodes();
      assertNotNull(list0);
      assertFalse(tag0.preserveWhitespace());
      assertEquals("eete{u^\"erux4u~w", tag0.normalName());
      assertFalse(tag0.isSelfClosing());
      assertEquals("Eete{u^\"eRux4u~w", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertEquals("Eete{u^\"eRux4u~w", tag0.toString());
      assertFalse(attributes0.isEmpty());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(attributes1.isEmpty());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("Eete{u^\"eRux4u~w", pseudoTextElement0.nodeName());
      assertEquals("eete{u^\"erux4u~w", pseudoTextElement0.normalName());
      assertEquals("Eete{u^\"eRux4u~w", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Map<String, String> map0 = pseudoTextElement0.dataset();
      assertNotNull(map0);
      assertFalse(tag0.preserveWhitespace());
      assertEquals("eete{u^\"erux4u~w", tag0.normalName());
      assertFalse(tag0.isSelfClosing());
      assertEquals("Eete{u^\"eRux4u~w", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertEquals("Eete{u^\"eRux4u~w", tag0.toString());
      assertFalse(attributes0.isEmpty());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(attributes1.isEmpty());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("Eete{u^\"eRux4u~w", pseudoTextElement0.nodeName());
      assertEquals("eete{u^\"erux4u~w", pseudoTextElement0.normalName());
      assertEquals("Eete{u^\"eRux4u~w", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Connection connection3 = httpConnection0.cookies(map0);
      assertNotNull(connection3);
      assertFalse(tag0.preserveWhitespace());
      assertEquals("eete{u^\"erux4u~w", tag0.normalName());
      assertFalse(tag0.isSelfClosing());
      assertEquals("Eete{u^\"eRux4u~w", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertEquals("Eete{u^\"eRux4u~w", tag0.toString());
      assertFalse(attributes0.isEmpty());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(attributes1.isEmpty());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("Eete{u^\"eRux4u~w", pseudoTextElement0.nodeName());
      assertEquals("eete{u^\"erux4u~w", pseudoTextElement0.normalName());
      assertEquals("Eete{u^\"eRux4u~w", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertSame(httpConnection0, connection3);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(connection3, connection1);
      assertSame(connection3, connection0);
      assertSame(connection3, connection2);
      assertSame(connection3, httpConnection0);
      
      Connection.KeyVal connection_KeyVal0 = httpConnection0.data("Eete{u^\"eRux4u~w");
      assertNotNull(connection_KeyVal0);
      assertEquals("Eete{u^\"eRux4u~w", connection_KeyVal0.key());
      assertEquals("Eete{u^\"eRux4u~w", connection_KeyVal0.value());
      assertNull(connection_KeyVal0.contentType());
      assertFalse(connection_KeyVal0.hasInputStream());
      assertSame(httpConnection0, connection3);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      
      Connection connection4 = httpConnection0.data(map0);
      assertNotNull(connection4);
      assertFalse(tag0.preserveWhitespace());
      assertEquals("eete{u^\"erux4u~w", tag0.normalName());
      assertFalse(tag0.isSelfClosing());
      assertEquals("Eete{u^\"eRux4u~w", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertEquals("Eete{u^\"eRux4u~w", tag0.toString());
      assertFalse(attributes0.isEmpty());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(attributes1.isEmpty());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("Eete{u^\"eRux4u~w", pseudoTextElement0.nodeName());
      assertEquals("eete{u^\"erux4u~w", pseudoTextElement0.normalName());
      assertEquals("Eete{u^\"eRux4u~w", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertSame(httpConnection0, connection3);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection4);
      assertSame(httpConnection0, connection1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(connection4, connection0);
      assertSame(connection4, connection1);
      assertSame(connection4, connection3);
      assertSame(connection4, connection2);
      assertSame(connection4, httpConnection0);
      
      Connection connection5 = connection3.followRedirects(false);
      assertNotNull(connection5);
      assertFalse(tag0.preserveWhitespace());
      assertEquals("eete{u^\"erux4u~w", tag0.normalName());
      assertFalse(tag0.isSelfClosing());
      assertEquals("Eete{u^\"eRux4u~w", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertEquals("Eete{u^\"eRux4u~w", tag0.toString());
      assertFalse(attributes0.isEmpty());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(attributes1.isEmpty());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("Eete{u^\"eRux4u~w", pseudoTextElement0.nodeName());
      assertEquals("eete{u^\"erux4u~w", pseudoTextElement0.normalName());
      assertEquals("Eete{u^\"eRux4u~w", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertSame(connection5, connection4);
      assertSame(connection5, connection1);
      assertSame(connection5, connection3);
      assertSame(connection5, httpConnection0);
      assertSame(connection5, connection2);
      assertSame(connection5, connection0);
      assertSame(httpConnection0, connection3);
      assertSame(httpConnection0, connection5);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection4);
      assertSame(httpConnection0, connection1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(connection3, connection4);
      assertSame(connection3, connection1);
      assertSame(connection3, connection5);
      assertSame(connection3, connection0);
      assertSame(connection3, connection2);
      assertSame(connection3, httpConnection0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.charset());
      assertEquals(400, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertEquals("Request not made", httpConnection_Response0.statusMessage());
      
      HttpConnection.Response httpConnection_Response1 = httpConnection_Response0.charset("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36");
      assertNotNull(httpConnection_Response1);
      assertEquals(400, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertEquals("Request not made", httpConnection_Response0.statusMessage());
      assertEquals("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36", httpConnection_Response0.charset());
      assertEquals("Request not made", httpConnection_Response1.statusMessage());
      assertNull(httpConnection_Response1.contentType());
      assertEquals("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36", httpConnection_Response1.charset());
      assertEquals(400, httpConnection_Response1.statusCode());
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      
      // Undeclared exception!
      try { 
        httpConnection_Response1.bodyAsBytes();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.newRequest();
      assertFalse(connection0.equals((Object)httpConnection0));
      assertNotNull(connection0);
      assertNotSame(httpConnection0, connection0);
      assertNotSame(connection0, httpConnection0);
      
      String string0 = "}>^G]R7j).TR";
      String string1 = "{} removed {}";
      // Undeclared exception!
      try { 
        httpConnection0.url((URL) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The parameter 'url' must not be null.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      assertNotNull(sequenceInputStream0);
      assertFalse(fileDescriptor0.valid());
      
      Connection connection0 = httpConnection0.data("Eete{u^\"eRux4u~w", "Eete{u^\"eRux4u~w", (InputStream) sequenceInputStream0);
      assertNotNull(connection0);
      assertFalse(fileDescriptor0.valid());
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      CookieStore cookieStore0 = httpConnection0.cookieStore();
      assertNotNull(cookieStore0);
      assertSame(httpConnection0, connection0);
      
      Connection connection1 = httpConnection0.cookieStore(cookieStore0);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      Connection connection2 = httpConnection0.data("Eete{u^\"eRux4u~w", "Eete{u^\"eRux4u~w");
      assertNotNull(connection2);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection2);
      assertSame(connection2, httpConnection0);
      assertSame(connection2, connection0);
      assertSame(connection2, connection1);
      
      Connection connection3 = httpConnection0.header("Eete{u^\"eRux4u~w", "Eete{u^\"eRux4u~w");
      assertNotNull(connection3);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection3);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection2);
      assertSame(connection3, connection0);
      assertSame(connection3, connection2);
      assertSame(connection3, httpConnection0);
      assertSame(connection3, connection1);
      
      Tag tag0 = Tag.valueOf("Eete{u^\"eRux4u~w");
      assertNotNull(tag0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("eete{u^\"erux4u~w", tag0.normalName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertEquals("Eete{u^\"eRux4u~w", tag0.toString());
      assertEquals("Eete{u^\"eRux4u~w", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertTrue(attributes0.isEmpty());
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("fMY2@~GX8z5l", false);
      assertNotNull(attributes1);
      assertTrue(attributes0.isEmpty());
      assertEquals(0, attributes0.size());
      assertTrue(attributes1.isEmpty());
      assertEquals(0, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "application/x-www-form-urlencoded", attributes1);
      assertNotNull(pseudoTextElement0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("eete{u^\"erux4u~w", tag0.normalName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertEquals("Eete{u^\"eRux4u~w", tag0.toString());
      assertEquals("Eete{u^\"eRux4u~w", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals(1, attributes0.size());
      assertFalse(attributes0.isEmpty());
      assertEquals(1, attributes1.size());
      assertFalse(attributes1.isEmpty());
      assertEquals("Eete{u^\"eRux4u~w", pseudoTextElement0.nodeName());
      assertEquals("eete{u^\"erux4u~w", pseudoTextElement0.normalName());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("Eete{u^\"eRux4u~w", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertFalse(pseudoTextElement0.hasParent());
      
      List<Node> list0 = pseudoTextElement0.childNodes();
      assertNotNull(list0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("eete{u^\"erux4u~w", tag0.normalName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertEquals("Eete{u^\"eRux4u~w", tag0.toString());
      assertEquals("Eete{u^\"eRux4u~w", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals(1, attributes0.size());
      assertFalse(attributes0.isEmpty());
      assertEquals(1, attributes1.size());
      assertFalse(attributes1.isEmpty());
      assertEquals("Eete{u^\"eRux4u~w", pseudoTextElement0.nodeName());
      assertEquals("eete{u^\"erux4u~w", pseudoTextElement0.normalName());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("Eete{u^\"eRux4u~w", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertFalse(pseudoTextElement0.hasParent());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Map<String, String> map0 = pseudoTextElement0.dataset();
      assertNotNull(map0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("eete{u^\"erux4u~w", tag0.normalName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertEquals("Eete{u^\"eRux4u~w", tag0.toString());
      assertEquals("Eete{u^\"eRux4u~w", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals(1, attributes0.size());
      assertFalse(attributes0.isEmpty());
      assertEquals(1, attributes1.size());
      assertFalse(attributes1.isEmpty());
      assertEquals("Eete{u^\"eRux4u~w", pseudoTextElement0.nodeName());
      assertEquals("eete{u^\"erux4u~w", pseudoTextElement0.normalName());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("Eete{u^\"eRux4u~w", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertFalse(pseudoTextElement0.hasParent());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Connection connection4 = httpConnection0.cookies(map0);
      assertNotNull(connection4);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("eete{u^\"erux4u~w", tag0.normalName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertEquals("Eete{u^\"eRux4u~w", tag0.toString());
      assertEquals("Eete{u^\"eRux4u~w", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals(1, attributes0.size());
      assertFalse(attributes0.isEmpty());
      assertEquals(1, attributes1.size());
      assertFalse(attributes1.isEmpty());
      assertEquals("Eete{u^\"eRux4u~w", pseudoTextElement0.nodeName());
      assertEquals("eete{u^\"erux4u~w", pseudoTextElement0.normalName());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("Eete{u^\"eRux4u~w", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertFalse(pseudoTextElement0.hasParent());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection3);
      assertSame(httpConnection0, connection4);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(connection4, httpConnection0);
      assertSame(connection4, connection1);
      assertSame(connection4, connection2);
      assertSame(connection4, connection3);
      assertSame(connection4, connection0);
      
      Connection.KeyVal connection_KeyVal0 = httpConnection0.data("Eete{u^\"eRux4u~w");
      assertNotNull(connection_KeyVal0);
      assertNull(connection_KeyVal0.contentType());
      assertEquals("Eete{u^\"eRux4u~w", connection_KeyVal0.value());
      assertTrue(connection_KeyVal0.hasInputStream());
      assertEquals("Eete{u^\"eRux4u~w", connection_KeyVal0.key());
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection3);
      assertSame(httpConnection0, connection4);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection2);
      
      Connection connection5 = httpConnection0.data(map0);
      assertNotNull(connection5);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("eete{u^\"erux4u~w", tag0.normalName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertEquals("Eete{u^\"eRux4u~w", tag0.toString());
      assertEquals("Eete{u^\"eRux4u~w", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals(1, attributes0.size());
      assertFalse(attributes0.isEmpty());
      assertEquals(1, attributes1.size());
      assertFalse(attributes1.isEmpty());
      assertEquals("Eete{u^\"eRux4u~w", pseudoTextElement0.nodeName());
      assertEquals("eete{u^\"erux4u~w", pseudoTextElement0.normalName());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("Eete{u^\"eRux4u~w", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertFalse(pseudoTextElement0.hasParent());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertSame(httpConnection0, connection5);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection3);
      assertSame(httpConnection0, connection4);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection2);
      assertSame(connection5, connection2);
      assertSame(connection5, httpConnection0);
      assertSame(connection5, connection1);
      assertSame(connection5, connection4);
      assertSame(connection5, connection0);
      assertSame(connection5, connection3);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Connection connection6 = httpConnection0.data(" />", "multipart/form-data", (InputStream) mockFileInputStream0, "Content-Encoding");
      assertNotNull(connection6);
      assertFalse(fileDescriptor0.valid());
      assertSame(httpConnection0, connection5);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection3);
      assertSame(httpConnection0, connection4);
      assertSame(httpConnection0, connection6);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection2);
      assertSame(connection6, connection5);
      assertSame(connection6, connection3);
      assertSame(connection6, connection4);
      assertSame(connection6, connection1);
      assertSame(connection6, connection0);
      assertSame(connection6, httpConnection0);
      assertSame(connection6, connection2);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string0 = hashMap0.put("Content-Encoding", "Content-Encoding");
      assertNull(string0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      Connection connection0 = httpConnection0.data((Map<String, String>) hashMap0);
      assertNotNull(connection0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      HttpCookieStore.Empty httpCookieStore_Empty0 = new HttpCookieStore.Empty();
      assertNotNull(httpCookieStore_Empty0);
      assertFalse(httpCookieStore_Empty0.removeAll());
      
      String string1 = "am`";
      // Undeclared exception!
      try { 
        httpConnection0.url("am`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The supplied URL, 'am`', is malformed. Make sure it is an absolute URL, and starts with 'http://' or 'https://'. See https://jsoup.org/cookbook/extracting-data/working-with-urls
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      
      URL uRL0 = MockURL.getFtpExample();
      assertNotNull(uRL0);
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.data("referer", "F; ^88b");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      // Undeclared exception!
      try { 
        connection0.data("mq", (String) null, (InputStream) pipedInputStream0, "Content-Encoding");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The parameter 'value' must not be null.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      
      boolean boolean0 = false;
      String string0 = httpConnection_Request0.postDataCharset();
      assertNotNull(string0);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", string0);
      
      HttpConnection httpConnection0 = new HttpConnection(httpConnection_Request0);
      assertNotNull(httpConnection0);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertEquals("Request not made", httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(400, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.bufferUp();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      
      String string0 = httpConnection_Request0.postDataCharset();
      assertNotNull(string0);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", string0);
      
      HttpConnection.Request httpConnection_Request1 = new HttpConnection.Request();
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection_Request1);
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      
      HttpConnection httpConnection0 = new HttpConnection(httpConnection_Request1);
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection0);
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      
      Connection connection0 = httpConnection0.timeout(2468);
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(connection0);
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Connection connection1 = httpConnection0.referrer("UTF-8");
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(connection1);
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      String string1 = httpConnection_Request1.requestBody();
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNull(string1);
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      
      Connection.Method connection_Method0 = Connection.Method.OPTIONS;
      Connection connection2 = httpConnection0.method(connection_Method0);
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(connection2);
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection0);
      assertSame(connection2, connection1);
      assertSame(connection2, connection0);
      assertSame(connection2, httpConnection0);
      
      Connection connection3 = connection1.header("application/x-www-form-urlencoded", "[}!:ti!a;3");
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(connection3);
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection3);
      assertSame(httpConnection0, connection0);
      assertSame(connection1, connection3);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      assertSame(connection1, connection2);
      assertSame(connection3, httpConnection0);
      assertSame(connection3, connection2);
      assertSame(connection3, connection0);
      assertSame(connection3, connection1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      
      HttpConnection httpConnection0 = new HttpConnection(httpConnection_Request0);
      assertNotNull(httpConnection0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      
      CDataNode cDataNode0 = new CDataNode("");
      assertNotNull(cDataNode0);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      
      CDataNode cDataNode1 = cDataNode0.clone();
      assertFalse(cDataNode1.equals((Object)cDataNode0));
      assertNotNull(cDataNode1);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertFalse(cDataNode1.hasParent());
      assertEquals("#cdata", cDataNode1.nodeName());
      assertEquals(0, cDataNode1.siblingIndex());
      assertNotSame(cDataNode0, cDataNode1);
      assertNotSame(cDataNode1, cDataNode0);
      
      Attributes attributes0 = cDataNode1.attributes();
      assertFalse(cDataNode0.equals((Object)cDataNode1));
      assertFalse(cDataNode1.equals((Object)cDataNode0));
      assertNotNull(attributes0);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertFalse(cDataNode1.hasParent());
      assertEquals("#cdata", cDataNode1.nodeName());
      assertEquals(0, cDataNode1.siblingIndex());
      assertEquals(1, attributes0.size());
      assertFalse(attributes0.isEmpty());
      assertNotSame(cDataNode0, cDataNode1);
      assertNotSame(cDataNode1, cDataNode0);
      
      Attribute attribute0 = new Attribute("Content-Encoding", "w^w!*86zs", attributes0);
      assertFalse(cDataNode0.equals((Object)cDataNode1));
      assertFalse(cDataNode1.equals((Object)cDataNode0));
      assertNotNull(attribute0);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertFalse(cDataNode1.hasParent());
      assertEquals("#cdata", cDataNode1.nodeName());
      assertEquals(0, cDataNode1.siblingIndex());
      assertEquals(1, attributes0.size());
      assertFalse(attributes0.isEmpty());
      assertEquals("w^w!*86zs", attribute0.getValue());
      assertEquals("Content-Encoding", attribute0.getKey());
      assertTrue(attribute0.hasDeclaredValue());
      
      Attribute attribute1 = attribute0.clone();
      assertFalse(cDataNode0.equals((Object)cDataNode1));
      assertFalse(cDataNode1.equals((Object)cDataNode0));
      assertTrue(attribute1.equals((Object)attribute0));
      assertNotNull(attribute1);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertFalse(cDataNode1.hasParent());
      assertEquals("#cdata", cDataNode1.nodeName());
      assertEquals(0, cDataNode1.siblingIndex());
      assertEquals(1, attributes0.size());
      assertFalse(attributes0.isEmpty());
      assertEquals("w^w!*86zs", attribute0.getValue());
      assertEquals("Content-Encoding", attribute0.getKey());
      assertTrue(attribute0.hasDeclaredValue());
      assertTrue(attribute1.hasDeclaredValue());
      assertEquals("Content-Encoding", attribute1.getKey());
      assertEquals("w^w!*86zs", attribute1.getValue());
      assertNotSame(cDataNode0, cDataNode1);
      assertNotSame(cDataNode1, cDataNode0);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      
      Attributes attributes1 = attributes0.put(attribute1);
      assertFalse(cDataNode0.equals((Object)cDataNode1));
      assertFalse(cDataNode1.equals((Object)cDataNode0));
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertNotNull(attributes1);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertFalse(cDataNode1.hasParent());
      assertEquals("#cdata", cDataNode1.nodeName());
      assertEquals(0, cDataNode1.siblingIndex());
      assertEquals(2, attributes0.size());
      assertFalse(attributes0.isEmpty());
      assertEquals("w^w!*86zs", attribute0.getValue());
      assertEquals("Content-Encoding", attribute0.getKey());
      assertTrue(attribute0.hasDeclaredValue());
      assertTrue(attribute1.hasDeclaredValue());
      assertEquals("Content-Encoding", attribute1.getKey());
      assertEquals("w^w!*86zs", attribute1.getValue());
      assertEquals(2, attributes1.size());
      assertFalse(attributes1.isEmpty());
      assertNotSame(cDataNode0, cDataNode1);
      assertNotSame(cDataNode1, cDataNode0);
      assertSame(attributes0, attributes1);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes1, attributes0);
      
      Map<String, String> map0 = attributes1.dataset();
      assertFalse(cDataNode0.equals((Object)cDataNode1));
      assertFalse(cDataNode1.equals((Object)cDataNode0));
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertNotNull(map0);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertFalse(cDataNode1.hasParent());
      assertEquals("#cdata", cDataNode1.nodeName());
      assertEquals(0, cDataNode1.siblingIndex());
      assertEquals(2, attributes0.size());
      assertFalse(attributes0.isEmpty());
      assertEquals("w^w!*86zs", attribute0.getValue());
      assertEquals("Content-Encoding", attribute0.getKey());
      assertTrue(attribute0.hasDeclaredValue());
      assertTrue(attribute1.hasDeclaredValue());
      assertEquals("Content-Encoding", attribute1.getKey());
      assertEquals("w^w!*86zs", attribute1.getValue());
      assertEquals(2, attributes1.size());
      assertFalse(attributes1.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotSame(cDataNode0, cDataNode1);
      assertNotSame(cDataNode1, cDataNode0);
      assertSame(attributes0, attributes1);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes1, attributes0);
      
      Connection connection0 = httpConnection0.data(map0);
      assertFalse(cDataNode0.equals((Object)cDataNode1));
      assertFalse(cDataNode1.equals((Object)cDataNode0));
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertNotNull(connection0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertFalse(cDataNode1.hasParent());
      assertEquals("#cdata", cDataNode1.nodeName());
      assertEquals(0, cDataNode1.siblingIndex());
      assertEquals(2, attributes0.size());
      assertFalse(attributes0.isEmpty());
      assertEquals("w^w!*86zs", attribute0.getValue());
      assertEquals("Content-Encoding", attribute0.getKey());
      assertTrue(attribute0.hasDeclaredValue());
      assertTrue(attribute1.hasDeclaredValue());
      assertEquals("Content-Encoding", attribute1.getKey());
      assertEquals("w^w!*86zs", attribute1.getValue());
      assertEquals(2, attributes1.size());
      assertFalse(attributes1.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertSame(httpConnection0, connection0);
      assertNotSame(cDataNode0, cDataNode1);
      assertNotSame(cDataNode1, cDataNode0);
      assertSame(attributes0, attributes1);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes1, attributes0);
      assertSame(connection0, httpConnection0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      
      HttpConnection httpConnection0 = new HttpConnection(httpConnection_Request0);
      assertNotNull(httpConnection0);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertNotNull(httpConnection1);
      
      URL uRL0 = MockURL.getFtpExample();
      assertNotNull(uRL0);
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      
      Connection connection0 = httpConnection0.url(uRL0);
      assertFalse(httpConnection0.equals((Object)httpConnection1));
      assertFalse(connection0.equals((Object)httpConnection1));
      assertNotNull(connection0);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertSame(httpConnection0, connection0);
      assertNotSame(httpConnection0, httpConnection1);
      assertNotSame(connection0, httpConnection1);
      assertSame(connection0, httpConnection0);
      
      try { 
        httpConnection0.execute();
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.data("referer", "F; ^88b");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      byte[] byteArray0 = new byte[0];
      ArrayList<Connection.KeyVal> arrayList0 = new ArrayList<Connection.KeyVal>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Connection connection1 = connection0.data((Collection<Connection.KeyVal>) arrayList0);
      assertNotNull(connection1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, connection1);
      assertSame(connection0, httpConnection0);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      
      Connection connection2 = connection0.data("referer", "application/x-www-form-urlencoded", (InputStream) byteArrayInputStream0, "50?G9n=8c>:yz,e2");
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(connection2);
      assertEquals(0, byteArrayInputStream0.available());
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, connection1);
      assertSame(connection0, httpConnection0);
      assertSame(connection0, connection2);
      assertSame(connection2, connection1);
      assertSame(connection2, httpConnection0);
      assertSame(connection2, connection0);
      
      Connection.KeyVal connection_KeyVal0 = httpConnection0.data("Content-Encoding");
      assertNull(connection_KeyVal0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      
      HttpConnection.Request httpConnection_Request1 = new HttpConnection.Request(httpConnection_Request0);
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection_Request1);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.timeout(14);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertFalse(httpConnection_Request2.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection_Request2);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(14, httpConnection_Request1.timeout());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(2097152, httpConnection_Request2.maxBodySize());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(14, httpConnection_Request2.timeout());
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertNotSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      assertNotSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      
      Connection connection0 = httpConnection0.ignoreContentType(true);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Connection.Request connection_Request0 = httpConnection_Request1.followRedirects(true);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request2));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertFalse(connection_Request0.equals((Object)httpConnection_Request0));
      assertNotNull(connection_Request0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(14, httpConnection_Request1.timeout());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertNull(connection_Request0.requestBody());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(14, connection_Request0.timeout());
      assertEquals(2097152, connection_Request0.maxBodySize());
      assertFalse(connection_Request0.ignoreContentType());
      assertNotSame(httpConnection_Request0, connection_Request0);
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertNotSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(connection_Request0, httpConnection_Request1);
      assertNotSame(connection_Request0, httpConnection_Request0);
      assertSame(connection_Request0, httpConnection_Request2);
      
      Connection connection1 = httpConnection0.request(connection_Request0);
      assertFalse(httpConnection_Request0.equals((Object)connection_Request0));
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request2));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertFalse(connection_Request0.equals((Object)httpConnection_Request0));
      assertNotNull(connection1);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(14, httpConnection_Request1.timeout());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertNull(connection_Request0.requestBody());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(14, connection_Request0.timeout());
      assertEquals(2097152, connection_Request0.maxBodySize());
      assertFalse(connection_Request0.ignoreContentType());
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertNotSame(httpConnection_Request0, connection_Request0);
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertNotSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(connection_Request0, httpConnection_Request1);
      assertNotSame(connection_Request0, httpConnection_Request0);
      assertSame(connection_Request0, httpConnection_Request2);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      CookieManager cookieManager0 = httpConnection_Request1.cookieManager();
      assertFalse(httpConnection_Request0.equals((Object)connection_Request0));
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request2));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(cookieManager0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(14, httpConnection_Request1.timeout());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNotSame(httpConnection_Request0, connection_Request0);
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertNotSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)47;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-29), (byte)77, (byte)0, (byte) (-2), (byte)7, (byte)47}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-29), (byte)77, (byte)0, (byte) (-2), (byte)7, (byte)47}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(pushbackInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      
      Connection connection2 = httpConnection0.data("up7+0w\"", "https", (InputStream) pushbackInputStream0);
      assertArrayEquals(new byte[] {(byte) (-29), (byte)77, (byte)0, (byte) (-2), (byte)7, (byte)47}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(connection2);
      assertEquals(6, byteArrayInputStream0.available());
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection1);
      assertSame(connection2, httpConnection0);
      assertSame(connection2, connection1);
      assertSame(connection2, connection0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      String string0 = "|\"H uEE]%N}";
      Connection.KeyVal connection_KeyVal0 = httpConnection0.data("|\"H uEE]%N}");
      assertNull(connection_KeyVal0);
      
      HashSet<Connection.KeyVal> hashSet0 = new HashSet<Connection.KeyVal>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      boolean boolean0 = hashSet0.add((Connection.KeyVal) null);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(boolean0);
      
      Iterator<Connection.KeyVal> iterator0 = hashSet0.iterator();
      assertNotNull(iterator0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      
      // Undeclared exception!
      try { 
        httpConnection0.data((Collection<Connection.KeyVal>) hashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The parameter 'keyval' must not be null.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreContentType());
      
      HttpConnection httpConnection0 = new HttpConnection(httpConnection_Request0);
      assertNotNull(httpConnection0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreContentType());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertTrue(attributes0.isEmpty());
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.add("Content-Encoding", "%s@%x(size=%d)");
      assertNotNull(attributes1);
      assertFalse(attributes0.isEmpty());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(attributes1.isEmpty());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Attribute attribute0 = Attribute.createFromEncoded("Content-Encoding", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36");
      assertNotNull(attribute0);
      assertTrue(attribute0.hasDeclaredValue());
      assertEquals("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36", attribute0.getValue());
      assertEquals("Content-Encoding", attribute0.getKey());
      
      Attributes attributes2 = attributes1.put(attribute0);
      assertNotNull(attributes2);
      assertFalse(attributes0.isEmpty());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(attributes1.isEmpty());
      assertTrue(attribute0.hasDeclaredValue());
      assertEquals("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36", attribute0.getValue());
      assertEquals("Content-Encoding", attribute0.getKey());
      assertEquals(1, attributes2.size());
      assertFalse(attributes2.isEmpty());
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      
      Attributes attributes3 = attributes2.clone();
      assertTrue(attributes3.equals((Object)attributes1));
      assertTrue(attributes3.equals((Object)attributes2));
      assertTrue(attributes3.equals((Object)attributes0));
      assertNotNull(attributes3);
      assertFalse(attributes0.isEmpty());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(attributes1.isEmpty());
      assertTrue(attribute0.hasDeclaredValue());
      assertEquals("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36", attribute0.getValue());
      assertEquals("Content-Encoding", attribute0.getKey());
      assertEquals(1, attributes2.size());
      assertFalse(attributes2.isEmpty());
      assertFalse(attributes3.isEmpty());
      assertEquals(1, attributes3.size());
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes1);
      
      Map<String, String> map0 = attributes3.dataset();
      assertTrue(attributes0.equals((Object)attributes3));
      assertTrue(attributes1.equals((Object)attributes3));
      assertTrue(attributes2.equals((Object)attributes3));
      assertTrue(attributes3.equals((Object)attributes1));
      assertTrue(attributes3.equals((Object)attributes2));
      assertTrue(attributes3.equals((Object)attributes0));
      assertNotNull(map0);
      assertFalse(attributes0.isEmpty());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(attributes1.isEmpty());
      assertTrue(attribute0.hasDeclaredValue());
      assertEquals("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36", attribute0.getValue());
      assertEquals("Content-Encoding", attribute0.getKey());
      assertEquals(1, attributes2.size());
      assertFalse(attributes2.isEmpty());
      assertFalse(attributes3.isEmpty());
      assertEquals(1, attributes3.size());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes1);
      
      Connection connection0 = httpConnection0.cookies(map0);
      assertTrue(attributes0.equals((Object)attributes3));
      assertTrue(attributes1.equals((Object)attributes3));
      assertTrue(attributes2.equals((Object)attributes3));
      assertTrue(attributes3.equals((Object)attributes1));
      assertTrue(attributes3.equals((Object)attributes2));
      assertTrue(attributes3.equals((Object)attributes0));
      assertNotNull(connection0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertFalse(attributes0.isEmpty());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(attributes1.isEmpty());
      assertTrue(attribute0.hasDeclaredValue());
      assertEquals("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36", attribute0.getValue());
      assertEquals("Content-Encoding", attribute0.getKey());
      assertEquals(1, attributes2.size());
      assertFalse(attributes2.isEmpty());
      assertFalse(attributes3.isEmpty());
      assertEquals(1, attributes3.size());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertSame(httpConnection0, connection0);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes1);
      assertSame(connection0, httpConnection0);
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("%s@%x(size=%d)", "5~");
      assertNotNull(httpConnection_KeyVal0);
      assertEquals("5~", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("%s@%x(size=%d)", httpConnection_KeyVal0.key());
      
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key("r1Xz.~>");
      assertNotNull(httpConnection_KeyVal1);
      assertEquals("5~", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("r1Xz.~>", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("r1Xz.~>", httpConnection_KeyVal1.key());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertEquals("5~", httpConnection_KeyVal1.value());
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal1.value("application/x-www-form-urlencoded");
      assertNotNull(httpConnection_KeyVal2);
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("r1Xz.~>", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal1.value());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("r1Xz.~>", httpConnection_KeyVal1.key());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertEquals("r1Xz.~>", httpConnection_KeyVal2.key());
      assertFalse(httpConnection_KeyVal2.hasInputStream());
      assertNull(httpConnection_KeyVal2.contentType());
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal2.value());
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      
      InputStream inputStream0 = httpConnection_KeyVal2.inputStream();
      assertNull(inputStream0);
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("r1Xz.~>", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal1.value());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("r1Xz.~>", httpConnection_KeyVal1.key());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertEquals("r1Xz.~>", httpConnection_KeyVal2.key());
      assertFalse(httpConnection_KeyVal2.hasInputStream());
      assertNull(httpConnection_KeyVal2.contentType());
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal2.value());
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.charset());
      assertEquals("Request not made", httpConnection_Response0.statusMessage());
      assertEquals(400, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      
      HttpConnection.Response httpConnection_Response1 = httpConnection_Response0.charset("R7,");
      assertNotNull(httpConnection_Response1);
      assertEquals("R7,", httpConnection_Response0.charset());
      assertEquals("Request not made", httpConnection_Response0.statusMessage());
      assertEquals(400, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertEquals("R7,", httpConnection_Response1.charset());
      assertNull(httpConnection_Response1.contentType());
      assertEquals(400, httpConnection_Response1.statusCode());
      assertEquals("Request not made", httpConnection_Response1.statusMessage());
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      
      int int0 = httpConnection_Response1.statusCode();
      assertEquals("R7,", httpConnection_Response0.charset());
      assertEquals("Request not made", httpConnection_Response0.statusMessage());
      assertEquals(400, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertEquals("R7,", httpConnection_Response1.charset());
      assertNull(httpConnection_Response1.contentType());
      assertEquals(400, httpConnection_Response1.statusCode());
      assertEquals("Request not made", httpConnection_Response1.statusMessage());
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      assertEquals(400, int0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      
      HttpConnection httpConnection0 = new HttpConnection(httpConnection_Request0);
      assertNotNull(httpConnection0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      
      Connection connection0 = httpConnection0.ignoreHttpErrors(false);
      assertNotNull(connection0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Connection connection1 = httpConnection0.userAgent("W%s|+");
      assertNotNull(connection1);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      Connection.Method connection_Method0 = Connection.Method.OPTIONS;
      Connection connection2 = httpConnection0.method(connection_Method0);
      assertNotNull(connection2);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection2);
      assertSame(connection2, httpConnection0);
      assertSame(connection2, connection0);
      assertSame(connection2, connection1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Connection connection0 = httpConnection0.cookie("multipart/form-data; boundary=", "M}<kTI)aL]pn-N");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      String string0 = "cC)T;\"6";
      Connection connection1 = httpConnection0.referrer("cC)T;\"6");
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      Connection connection2 = httpConnection0.timeout(787);
      assertNotNull(connection2);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection1);
      assertSame(connection2, connection0);
      assertSame(connection2, connection1);
      assertSame(connection2, httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.execute();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL not set. Make sure to call #url(...) before executing the request.
         //
         verifyException("org.jsoup.helper.HttpConnection$Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.postDataCharset("referrer");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // referrer
         //
         verifyException("org.jsoup.helper.HttpConnection$Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertNotNull(proxy0);
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Content-Encoding";
      stringArray0[1] = "Content-Encoding";
      stringArray0[2] = "application/x-www-form-urlencoded";
      stringArray0[3] = "Content-Type";
      stringArray0[4] = "application/x-www-form-urlencoded";
      stringArray0[5] = "multipart/form-data";
      stringArray0[6] = "Content-Type";
      stringArray0[7] = "Content-Encoding";
      stringArray0[8] = "multipart/form-data";
      // Undeclared exception!
      try { 
        httpConnection0.data(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must supply an even number of key value pairs
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.request((Connection.Request) null);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.contentType());
      assertEquals("Request not made", httpConnection_Response0.statusMessage());
      assertEquals(400, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      
      String string0 = httpConnection_Response0.contentType();
      assertNull(string0);
      assertNull(httpConnection_Response0.contentType());
      assertEquals("Request not made", httpConnection_Response0.statusMessage());
      assertEquals(400, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      
      HttpConnection.Request httpConnection_Request1 = new HttpConnection.Request(httpConnection_Request0);
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection_Request1);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      
      Connection.Method connection_Method0 = Connection.Method.PATCH;
      httpConnection_Request1.method = connection_Method0;
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertTrue(httpConnection_Request1.method.hasBody());
      
      HttpConnection httpConnection0 = new HttpConnection(httpConnection_Request1);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      
      HttpCookieStore.Empty httpCookieStore_Empty0 = new HttpCookieStore.Empty();
      assertNotNull(httpCookieStore_Empty0);
      assertFalse(httpCookieStore_Empty0.removeAll());
      
      List<URI> list0 = httpCookieStore_Empty0.getURIs();
      assertNotNull(list0);
      assertFalse(httpCookieStore_Empty0.removeAll());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Connection connection0 = httpConnection0.cookieStore((CookieStore) httpCookieStore_Empty0);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(connection0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpCookieStore_Empty0.removeAll());
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "multipart/form-data");
      assertFalse(boolean0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2112), (-2730));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertEquals((-2730), byteArrayInputStream0.available());
      
      byteArrayInputStream0.mark((-2730));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-2730), byteArrayInputStream0.available());
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Content-Encoding", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36", (InputStream) byteArrayInputStream0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(httpConnection_KeyVal0);
      assertEquals((-2730), byteArrayInputStream0.available());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("Content-Encoding", httpConnection_KeyVal0.key());
      
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.inputStream((InputStream) byteArrayInputStream0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(httpConnection_KeyVal1);
      assertEquals((-2730), byteArrayInputStream0.available());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("Content-Encoding", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal1.contentType());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertEquals("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36", httpConnection_KeyVal1.value());
      assertEquals("Content-Encoding", httpConnection_KeyVal1.key());
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      
      String string0 = httpConnection_KeyVal1.value();
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(string0);
      assertEquals((-2730), byteArrayInputStream0.available());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("Content-Encoding", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal1.contentType());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertEquals("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36", httpConnection_KeyVal1.value());
      assertEquals("Content-Encoding", httpConnection_KeyVal1.key());
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertEquals("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36", string0);
      
      // Undeclared exception!
      try { 
        httpConnection0.execute();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL not set. Make sure to call #url(...) before executing the request.
         //
         verifyException("org.jsoup.helper.HttpConnection$Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("some", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      
      URL uRL1 = HttpConnection.encodeUrl(uRL0);
      assertTrue(uRL1.equals((Object)uRL0));
      assertNotNull(uRL1);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("some", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("file", uRL1.getProtocol());
      assertEquals("some", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals("some", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      
      HttpConnection.Request httpConnection_Request1 = new HttpConnection.Request(httpConnection_Request0);
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection_Request1);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      
      HttpConnection httpConnection0 = new HttpConnection(httpConnection_Request1);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection0);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertEquals("Request not made", httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertEquals(400, httpConnection_Response0.statusCode());
      
      HttpConnection.Response httpConnection_Response1 = httpConnection_Response0.charset("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36");
      assertNotNull(httpConnection_Response1);
      assertEquals("Request not made", httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(400, httpConnection_Response0.statusCode());
      assertEquals("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36", httpConnection_Response0.charset());
      assertEquals("Request not made", httpConnection_Response1.statusMessage());
      assertNull(httpConnection_Response1.contentType());
      assertEquals("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36", httpConnection_Response1.charset());
      assertEquals(400, httpConnection_Response1.statusCode());
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      
      Connection connection0 = httpConnection0.response((Connection.Response) httpConnection_Response1);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(connection0);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals("Request not made", httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(400, httpConnection_Response0.statusCode());
      assertEquals("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36", httpConnection_Response0.charset());
      assertEquals("Request not made", httpConnection_Response1.statusMessage());
      assertNull(httpConnection_Response1.contentType());
      assertEquals("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36", httpConnection_Response1.charset());
      assertEquals(400, httpConnection_Response1.statusCode());
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      assertSame(connection0, httpConnection0);
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertFalse(httpConnection1.equals((Object)connection0));
      assertNotNull(httpConnection1);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        httpConnection1.data((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'key' parameter must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      String string0 = "J!$N*Lbnwt";
      PipedInputStream pipedInputStream0 = new PipedInputStream(307);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 307);
      assertNotNull(pushbackInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Connection connection0 = httpConnection0.data(",yQW\"6%~K}AKF`o0EY", "J!$N*Lbnwt", (InputStream) pushbackInputStream0, ">Y(.^ ");
      assertNotNull(connection0);
      assertEquals(0, pipedInputStream0.available());
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      String string1 = "RS";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(">Y(.^ ", "RS");
      assertNotNull(httpConnection_KeyVal0);
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals(">Y(.^ ", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("RS", httpConnection_KeyVal0.value());
      
      try { 
        pipedInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.url("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'url' parameter must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertEquals(400, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertEquals("Request not made", httpConnection_Response0.statusMessage());
      
      HttpConnection.Response httpConnection_Response1 = (HttpConnection.Response)httpConnection_Response0.addHeader(".:Pv!63th['r)|}py", ".:Pv!63th['r)|}py");
      assertNotNull(httpConnection_Response1);
      assertEquals(400, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertEquals("Request not made", httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response1.contentType());
      assertEquals("Request not made", httpConnection_Response1.statusMessage());
      assertNull(httpConnection_Response1.charset());
      assertEquals(400, httpConnection_Response1.statusCode());
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      
      Map<String, List<String>> map0 = httpConnection_Response0.headers;
      assertNotNull(map0);
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      
      httpConnection_Response0.headers = map0;
      assertEquals(400, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertEquals("Request not made", httpConnection_Response0.statusMessage());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertFalse(httpConnection_Response0.headers.isEmpty());
      assertEquals(1, httpConnection_Response0.headers.size());
      
      String string0 = httpConnection_Response0.charset();
      assertNull(string0);
      assertEquals(400, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertEquals("Request not made", httpConnection_Response0.statusMessage());
      assertSame(httpConnection_Response0, httpConnection_Response1);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      
      HttpConnection.Request httpConnection_Request1 = new HttpConnection.Request(httpConnection_Request0);
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection_Request1);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      
      CookieManager cookieManager0 = httpConnection_Request1.cookieManager();
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(cookieManager0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      
      String string1 = httpConnection_Response0.charset();
      assertNull(string1);
      assertEquals(400, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertEquals("Request not made", httpConnection_Response0.statusMessage());
      assertSame(httpConnection_Response0, httpConnection_Response1);
      
      HttpConnection httpConnection0 = new HttpConnection(httpConnection_Request0);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertNotNull(httpConnection0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      
      httpConnection_Request0.headers = map0;
      assertEquals(400, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertEquals("Request not made", httpConnection_Response0.statusMessage());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1, httpConnection_Request0.headers.size());
      assertFalse(httpConnection_Request0.headers.isEmpty());
      
      String string2 = "/fp~IXn\"SvyZU'IX";
      Connection.KeyVal connection_KeyVal0 = httpConnection0.data("/fp~IXn\"SvyZU'IX");
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertNull(connection_KeyVal0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      
      HttpConnection httpConnection1 = (HttpConnection)httpConnection0.request((Connection.Request) httpConnection_Request1);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection1);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection0, httpConnection1);
      assertSame(httpConnection1, httpConnection0);
      
      HttpConnection httpConnection2 = (HttpConnection)httpConnection0.newRequest();
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection2.equals((Object)httpConnection1));
      assertFalse(httpConnection2.equals((Object)httpConnection0));
      assertNotNull(httpConnection2);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection0, httpConnection1);
      assertNotSame(httpConnection0, httpConnection2);
      assertNotSame(httpConnection2, httpConnection1);
      assertNotSame(httpConnection2, httpConnection0);
      
      String string3 = "nY-|K)i";
      MockFile mockFile0 = new MockFile(";G4");
      assertNotNull(mockFile0);
      
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertEquals("Request not made", httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertEquals(400, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      int int0 = (-4131);
      // Undeclared exception!
      try { 
        httpConnection0.proxy("", (-4131));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-4131
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      
      Connection connection0 = HttpConnection.connect(uRL0);
      assertNotNull(connection0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create("~P;A/|GTl<)Ks", (String) null, (InputStream) pipedInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The parameter 'value' must not be null.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      
      HttpConnection.Request httpConnection_Request1 = new HttpConnection.Request(httpConnection_Request0);
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection_Request1);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertNull(httpConnection_Request1.requestBody());
      
      // Undeclared exception!
      try { 
        httpConnection_Request0.maxBodySize((-425));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxSize must be 0 (unlimited) or larger
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        HttpConnection.connect("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'url' parameter must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = null;
      HttpConnection httpConnection0 = null;
      try {
        httpConnection0 = new HttpConnection((HttpConnection.Request) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection$Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.maxBodySize((-2351));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxSize must be 0 (unlimited) or larger
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      
      int int0 = httpConnection_Request0.timeout();
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals(30000, int0);
      
      boolean boolean0 = httpConnection_Request0.ignoreHttpErrors();
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertFalse(boolean0);
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      StandardProtocolFamily standardProtocolFamily0 = StandardProtocolFamily.INET6;
      assertEquals(StandardProtocolFamily.INET6, standardProtocolFamily0);
      
      DatagramChannel datagramChannel0 = DatagramChannel.open((ProtocolFamily) standardProtocolFamily0);
      assertNotNull(datagramChannel0);
      assertTrue(datagramChannel0.isBlocking());
      assertFalse(datagramChannel0.isRegistered());
      assertTrue(datagramChannel0.isOpen());
      assertFalse(datagramChannel0.isConnected());
      assertEquals(5, datagramChannel0.validOps());
      
      StandardProtocolFamily[] standardProtocolFamilyArray0 = StandardProtocolFamily.values();
      assertEquals(2, standardProtocolFamilyArray0.length);
      assertNotNull(standardProtocolFamilyArray0);
      
      SelectorManager selectorManager0 = mock(SelectorManager.class, new ViolatedAssumptionAnswer());
      doReturn((Executor) null).when(selectorManager0).getExecutor();
      ManagedSelector managedSelector0 = new ManagedSelector(selectorManager0, 30000);
      assertNotNull(managedSelector0);
      assertEquals(5000L, managedSelector0.getStopTimeout());
      assertFalse(managedSelector0.isStarting());
      assertTrue(managedSelector0.isStopped());
      assertFalse(managedSelector0.isStarted());
      assertFalse(managedSelector0.isFailed());
      assertFalse(managedSelector0.isRunning());
      assertEquals(0L, managedSelector0.getSelectCount());
      assertEquals("STOPPED", managedSelector0.getState());
      assertEquals(0, managedSelector0.size());
      assertFalse(managedSelector0.isStopping());
      
      Selector selector0 = Selector.open();
      assertNotNull(selector0);
      
      // Undeclared exception!
      try { 
        datagramChannel0.register(selector0, 30000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.channels.spi.AbstractSelectableChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.followRedirects(false);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      
      boolean boolean0 = httpConnection_Request0.ignoreHttpErrors();
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(boolean0);
      
      try { 
        MockURL.URL("*RJ-O)@ZnJ]={:", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36", 1, "|6bF ]'UE'd");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: *rj-o)@znj]={:
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser0.isTrackPosition());
      
      Document document0 = new Document("");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.normalName());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      
      HttpConnection.Request httpConnection_Request1 = (HttpConnection.Request)httpConnection_Request0.removeHeader("Scanner-");
      assertNotNull(httpConnection_Request1);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      assertNotNull(parseErrorList0);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      List<Node> list0 = Parser.parseFragment("^PDzdWYSFxmN)0h$", (Element) document0, "O+$PkM/", parseErrorList0);
      assertNotNull(list0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.normalName());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      Document document1 = parser0.parseInput("~rvxTxc", "~rvxTxc");
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser0.isTrackPosition());
      assertEquals("#root", document1.normalName());
      assertEquals("~rvxTxc", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertNotSame(document1, document0);
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request0.parser(parser0);
      assertNotNull(httpConnection_Request2);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser0.isTrackPosition());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertEquals(2097152, httpConnection_Request2.maxBodySize());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertTrue(httpConnection_Request2.followRedirects());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      
      HttpConnection.Request httpConnection_Request3 = new HttpConnection.Request(httpConnection_Request0);
      assertFalse(httpConnection_Request3.equals((Object)httpConnection_Request0));
      assertFalse(httpConnection_Request3.equals((Object)httpConnection_Request2));
      assertFalse(httpConnection_Request3.equals((Object)httpConnection_Request1));
      assertNotNull(httpConnection_Request3);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertEquals(30000, httpConnection_Request3.timeout());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals(2097152, httpConnection_Request3.maxBodySize());
      assertTrue(httpConnection_Request3.followRedirects());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertNull(httpConnection_Request3.requestBody());
      
      Connection.Method connection_Method0 = Connection.Method.POST;
      HttpConnection.Request httpConnection_Request4 = (HttpConnection.Request)httpConnection_Request0.method(connection_Method0);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request3));
      assertFalse(httpConnection_Request4.equals((Object)httpConnection_Request3));
      assertNotNull(httpConnection_Request4);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request4.requestBody());
      assertFalse(httpConnection_Request4.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request4.timeout());
      assertFalse(httpConnection_Request4.ignoreContentType());
      assertTrue(httpConnection_Request4.followRedirects());
      assertEquals("UTF-8", httpConnection_Request4.postDataCharset());
      assertEquals(2097152, httpConnection_Request4.maxBodySize());
      assertSame(httpConnection_Request0, httpConnection_Request4);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertNotSame(httpConnection_Request0, httpConnection_Request3);
      assertNotSame(httpConnection_Request4, httpConnection_Request3);
      assertSame(httpConnection_Request4, httpConnection_Request2);
      assertSame(httpConnection_Request4, httpConnection_Request0);
      assertSame(httpConnection_Request4, httpConnection_Request1);
      
      HttpConnection.Request httpConnection_Request5 = httpConnection_Request3.parser(parser0);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request3));
      assertFalse(httpConnection_Request3.equals((Object)httpConnection_Request0));
      assertFalse(httpConnection_Request3.equals((Object)httpConnection_Request4));
      assertFalse(httpConnection_Request3.equals((Object)httpConnection_Request2));
      assertFalse(httpConnection_Request3.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request5.equals((Object)httpConnection_Request2));
      assertFalse(httpConnection_Request5.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request5.equals((Object)httpConnection_Request4));
      assertFalse(httpConnection_Request5.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection_Request5);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser0.isTrackPosition());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertEquals(30000, httpConnection_Request3.timeout());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals(2097152, httpConnection_Request3.maxBodySize());
      assertTrue(httpConnection_Request3.followRedirects());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertNull(httpConnection_Request3.requestBody());
      assertEquals("UTF-8", httpConnection_Request5.postDataCharset());
      assertEquals(30000, httpConnection_Request5.timeout());
      assertFalse(httpConnection_Request5.ignoreContentType());
      assertEquals(2097152, httpConnection_Request5.maxBodySize());
      assertTrue(httpConnection_Request5.followRedirects());
      assertNull(httpConnection_Request5.requestBody());
      assertFalse(httpConnection_Request5.ignoreHttpErrors());
      assertSame(httpConnection_Request0, httpConnection_Request4);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertNotSame(httpConnection_Request0, httpConnection_Request3);
      assertNotSame(httpConnection_Request0, httpConnection_Request5);
      assertNotSame(httpConnection_Request3, httpConnection_Request0);
      assertNotSame(httpConnection_Request3, httpConnection_Request4);
      assertNotSame(httpConnection_Request3, httpConnection_Request2);
      assertNotSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request5);
      assertSame(httpConnection_Request5, httpConnection_Request3);
      assertNotSame(httpConnection_Request5, httpConnection_Request2);
      assertNotSame(httpConnection_Request5, httpConnection_Request1);
      assertNotSame(httpConnection_Request5, httpConnection_Request4);
      assertNotSame(httpConnection_Request5, httpConnection_Request0);
      
      boolean boolean0 = httpConnection_Request3.ignoreContentType();
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request3));
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request5));
      assertFalse(httpConnection_Request3.equals((Object)httpConnection_Request0));
      assertFalse(httpConnection_Request3.equals((Object)httpConnection_Request4));
      assertFalse(httpConnection_Request3.equals((Object)httpConnection_Request2));
      assertFalse(httpConnection_Request3.equals((Object)httpConnection_Request1));
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertEquals(30000, httpConnection_Request3.timeout());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals(2097152, httpConnection_Request3.maxBodySize());
      assertTrue(httpConnection_Request3.followRedirects());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertNull(httpConnection_Request3.requestBody());
      assertSame(httpConnection_Request0, httpConnection_Request4);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertNotSame(httpConnection_Request0, httpConnection_Request3);
      assertNotSame(httpConnection_Request0, httpConnection_Request5);
      assertNotSame(httpConnection_Request3, httpConnection_Request0);
      assertNotSame(httpConnection_Request3, httpConnection_Request4);
      assertNotSame(httpConnection_Request3, httpConnection_Request2);
      assertNotSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request5);
      assertFalse(boolean0);
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.data("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'key' parameter must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      
      HttpConnection httpConnection0 = new HttpConnection(httpConnection_Request0);
      assertNotNull(httpConnection0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      
      Connection connection0 = httpConnection0.url(uRL0);
      assertNotNull(connection0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Connection connection1 = httpConnection0.newRequest();
      assertFalse(connection1.equals((Object)connection0));
      assertFalse(connection1.equals((Object)httpConnection0));
      assertNotNull(connection1);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertSame(httpConnection0, connection0);
      assertNotSame(httpConnection0, connection1);
      assertNotSame(connection1, connection0);
      assertNotSame(connection1, httpConnection0);
      
      Connection.Request connection_Request0 = httpConnection_Request0.ignoreContentType(true);
      assertNotNull(connection_Request0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.ignoreContentType());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(connection_Request0.ignoreContentType());
      assertNull(connection_Request0.requestBody());
      assertEquals(30000, connection_Request0.timeout());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(2097152, connection_Request0.maxBodySize());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(connection_Request0, httpConnection_Request0);
      
      try { 
        httpConnection0.post();
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      
      Connection.Method connection_Method0 = Connection.Method.POST;
      Connection.Request connection_Request0 = httpConnection_Request0.ignoreHttpErrors(false);
      assertNotNull(connection_Request0);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(2097152, connection_Request0.maxBodySize());
      assertNull(connection_Request0.requestBody());
      assertTrue(connection_Request0.followRedirects());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertEquals(30000, connection_Request0.timeout());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(connection_Request0, httpConnection_Request0);
      
      int int0 = 51;
      Connection.Request connection_Request1 = httpConnection_Request0.maxBodySize(51);
      assertNotNull(connection_Request1);
      assertEquals(51, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(51, connection_Request1.maxBodySize());
      assertEquals(30000, connection_Request1.timeout());
      assertNull(connection_Request1.requestBody());
      assertFalse(connection_Request1.ignoreHttpErrors());
      assertFalse(connection_Request1.ignoreContentType());
      assertTrue(connection_Request1.followRedirects());
      assertEquals("UTF-8", connection_Request1.postDataCharset());
      assertSame(httpConnection_Request0, connection_Request1);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(connection_Request1, httpConnection_Request0);
      assertSame(connection_Request1, connection_Request0);
      
      HttpConnection.Request httpConnection_Request1 = (HttpConnection.Request)httpConnection_Request0.method(connection_Method0);
      assertNotNull(httpConnection_Request1);
      assertEquals(51, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals(51, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertSame(httpConnection_Request0, connection_Request1);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, connection_Request1);
      
      HttpConnection.Request httpConnection_Request2 = new HttpConnection.Request(httpConnection_Request0);
      assertFalse(httpConnection_Request2.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request2.equals((Object)connection_Request0));
      assertFalse(httpConnection_Request2.equals((Object)httpConnection_Request0));
      assertFalse(httpConnection_Request2.equals((Object)connection_Request1));
      assertNotNull(httpConnection_Request2);
      assertEquals(51, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(51, httpConnection_Request2.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertNull(httpConnection_Request2.requestBody());
      assertTrue(httpConnection_Request2.followRedirects());
      
      HttpConnection httpConnection0 = new HttpConnection(httpConnection_Request0);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request2));
      assertNotNull(httpConnection0);
      assertEquals(51, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      
      // Undeclared exception!
      try { 
        HttpConnection.encodeUrl((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      
      HttpConnection.Request httpConnection_Request1 = new HttpConnection.Request(httpConnection_Request0);
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection_Request1);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      
      Connection.Request connection_Request0 = httpConnection_Request1.requestBody("8P{lWyiOX5BKlNP%[");
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertFalse(connection_Request0.equals((Object)httpConnection_Request0));
      assertNotNull(connection_Request0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("8P{lWyiOX5BKlNP%[", httpConnection_Request1.requestBody());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(2097152, connection_Request0.maxBodySize());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(30000, connection_Request0.timeout());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals("8P{lWyiOX5BKlNP%[", connection_Request0.requestBody());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertNotSame(httpConnection_Request0, connection_Request0);
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, connection_Request0);
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(connection_Request0, httpConnection_Request1);
      assertNotSame(connection_Request0, httpConnection_Request0);
      
      HttpConnection httpConnection0 = new HttpConnection(httpConnection_Request0);
      assertFalse(httpConnection_Request0.equals((Object)connection_Request0));
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertNotNull(httpConnection0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      
      Connection connection0 = httpConnection0.header("org.jsoup.select.Evaluator$Attribute", "org.jsoup.select.Evaluator$Attribute");
      assertFalse(httpConnection_Request0.equals((Object)connection_Request0));
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertNotNull(connection0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertNotSame(httpConnection_Request0, connection_Request0);
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      boolean boolean0 = httpConnection_Request1.ignoreContentType();
      assertFalse(httpConnection_Request0.equals((Object)connection_Request0));
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("8P{lWyiOX5BKlNP%[", httpConnection_Request1.requestBody());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNotSame(httpConnection_Request0, connection_Request0);
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, connection_Request0);
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        httpConnection0.url("8P{lWyiOX5BKlNP%[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The supplied URL, '8P{lWyiOX5BKlNP%[', is malformed. Make sure it is an absolute URL, and starts with 'http://' or 'https://'. See https://jsoup.org/cookbook/extracting-data/working-with-urls
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      
      Connection.Request connection_Request0 = httpConnection_Request0.ignoreContentType(true);
      assertNotNull(connection_Request0);
      assertTrue(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, connection_Request0.maxBodySize());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertEquals(30000, connection_Request0.timeout());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertTrue(connection_Request0.ignoreContentType());
      assertNull(connection_Request0.requestBody());
      assertTrue(connection_Request0.followRedirects());
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(connection_Request0, httpConnection_Request0);
      
      HttpConnection httpConnection0 = new HttpConnection(httpConnection_Request0);
      assertNotNull(httpConnection0);
      assertTrue(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      
      Connection.Request connection_Request1 = httpConnection_Request0.ignoreContentType(false);
      assertNotNull(connection_Request1);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(connection_Request1.ignoreHttpErrors());
      assertNull(connection_Request1.requestBody());
      assertEquals("UTF-8", connection_Request1.postDataCharset());
      assertEquals(30000, connection_Request1.timeout());
      assertTrue(connection_Request1.followRedirects());
      assertEquals(2097152, connection_Request1.maxBodySize());
      assertFalse(connection_Request1.ignoreContentType());
      assertSame(httpConnection_Request0, connection_Request1);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(connection_Request1, httpConnection_Request0);
      assertSame(connection_Request1, connection_Request0);
      
      // Undeclared exception!
      try { 
        httpConnection0.header((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'name' parameter must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(853);
      assertNotNull(mockInetSocketAddress0);
      
      String string0 = mockInetSocketAddress0.getHostName();
      assertNotNull(string0);
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("192.168.1.42/192.168.1.42:853", mockInetSocketAddress0.toString());
      assertEquals(853, mockInetSocketAddress0.getPort());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals("192.168.1.42", string0);
      
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      assertNotNull(proxy0);
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("192.168.1.42/192.168.1.42:853", mockInetSocketAddress0.toString());
      assertEquals(853, mockInetSocketAddress0.getPort());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals("SOCKS @ 192.168.1.42/192.168.1.42:853", proxy0.toString());
      assertEquals(Proxy.Type.SOCKS, proxy0.type());
      
      Connection connection0 = httpConnection0.proxy(proxy0);
      assertNotNull(connection0);
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("192.168.1.42/192.168.1.42:853", mockInetSocketAddress0.toString());
      assertEquals(853, mockInetSocketAddress0.getPort());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals("SOCKS @ 192.168.1.42/192.168.1.42:853", proxy0.toString());
      assertEquals(Proxy.Type.SOCKS, proxy0.type());
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Connection connection1 = httpConnection0.maxBodySize(0);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      
      Connection connection2 = httpConnection0.userAgent("");
      assertNotNull(connection2);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection2, httpConnection0);
      assertSame(connection2, connection0);
      assertSame(connection2, connection1);
      
      // Undeclared exception!
      try { 
        httpConnection0.execute();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL not set. Make sure to call #url(...) before executing the request.
         //
         verifyException("org.jsoup.helper.HttpConnection$Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      
      HttpConnection.Request httpConnection_Request1 = new HttpConnection.Request(httpConnection_Request0);
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection_Request1);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      
      HttpConnection httpConnection0 = new HttpConnection(httpConnection_Request1);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      
      String string0 = "c#a[ ";
      // Undeclared exception!
      try { 
        httpConnection0.url("c#a[ ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The supplied URL, 'c#a[ ', is malformed. Make sure it is an absolute URL, and starts with 'http://' or 'https://'. See https://jsoup.org/cookbook/extracting-data/working-with-urls
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Document document0 = Parser.parse("%G77I=;qf", "%G77I=;qf");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.normalName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("%G77I=;qf", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      // Undeclared exception!
      try { 
        httpConnection0.timeout((-636197633));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timeout milliseconds must be 0 (infinite) or greater
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      
      // Undeclared exception!
      try { 
        httpConnection_Request0.timeout((-1313));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timeout milliseconds must be 0 (infinite) or greater
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection.Method connection_Method0 = Connection.Method.OPTIONS;
      Connection connection0 = httpConnection0.method(connection_Method0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte) (-15);
      byteArray0[4] = (byte)84;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-44), (byte) (-2));
      assertArrayEquals(new byte[] {(byte) (-2), (byte) (-64), (byte) (-44), (byte) (-15), (byte)84}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertEquals((-2), byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        httpConnection0.data("", "", (InputStream) byteArrayInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'key' parameter must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      
      HttpConnection.Request httpConnection_Request1 = new HttpConnection.Request(httpConnection_Request0);
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection_Request1);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      
      // Undeclared exception!
      try { 
        httpConnection_Request1.timeout((-507));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timeout milliseconds must be 0 (infinite) or greater
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      
      HttpConnection.Request httpConnection_Request1 = new HttpConnection.Request(httpConnection_Request0);
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection_Request1);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      
      HttpConnection httpConnection0 = new HttpConnection(httpConnection_Request1);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.timeout(109);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertFalse(httpConnection_Request2.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection_Request2);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(109, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertTrue(httpConnection_Request2.followRedirects());
      assertNull(httpConnection_Request2.requestBody());
      assertEquals(2097152, httpConnection_Request2.maxBodySize());
      assertEquals(109, httpConnection_Request2.timeout());
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertNotSame(httpConnection_Request0, httpConnection_Request2);
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertNotSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      
      httpConnection_Request0.cookies = (Map<String, String>) hashMap0;
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(httpConnection_Request0.cookies.isEmpty());
      assertEquals(0, httpConnection_Request0.cookies.size());
      
      URL uRL0 = MockURL.getFtpExample();
      assertNotNull(uRL0);
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      
      URL uRL1 = HttpConnection.encodeUrl(uRL0);
      assertTrue(uRL1.equals((Object)uRL0));
      assertNotNull(uRL1);
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("ftp", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      String string0 = "acx8<'szB}LE28";
      // Undeclared exception!
      try { 
        httpConnection0.get();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL not set. Make sure to call #url(...) before executing the request.
         //
         verifyException("org.jsoup.helper.HttpConnection$Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      
      String string0 = "7&bl8}elj`IIgh)\"F)[";
      CDataNode cDataNode0 = new CDataNode("7&bl8}elj`IIgh)\"F)[");
      assertNotNull(cDataNode0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertFalse(attributes0.isEmpty());
      assertEquals(1, attributes0.size());
      
      Attributes attributes1 = attributes0.put("z!#e:X{\"G;GO?v", "z/;4r");
      assertNotNull(attributes1);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertFalse(attributes0.isEmpty());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertFalse(attributes1.isEmpty());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Map<String, String> map0 = attributes1.dataset();
      assertNotNull(map0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertFalse(attributes0.isEmpty());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertFalse(attributes1.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      httpConnection_Request0.cookies = map0;
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertFalse(attributes0.isEmpty());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertFalse(attributes1.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, httpConnection_Request0.cookies.size());
      assertTrue(httpConnection_Request0.cookies.isEmpty());
      
      HttpConnection.Request httpConnection_Request1 = new HttpConnection.Request(httpConnection_Request0);
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection_Request1);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      
      String string1 = httpConnection_Request1.postDataCharset();
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      assertEquals("UTF-8", string1);
      
      Parser parser0 = httpConnection_Request1.parser();
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(parser0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertFalse(parser0.isTrackPosition());
      assertFalse(parser0.isTrackErrors());
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      
      String string2 = httpConnection_Request1.requestBody();
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNull(string2);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      
      attributes0.addAll(attributes1);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertFalse(attributes0.isEmpty());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertFalse(attributes1.isEmpty());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertNotNull(proxy0);
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      
      // Undeclared exception!
      try { 
        HttpConnection.encodeUrl((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        HttpConnection.connect("multipart/form-data");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The supplied URL, 'multipart/form-data', is malformed. Make sure it is an absolute URL, and starts with 'http://' or 'https://'. See https://jsoup.org/cookbook/extracting-data/working-with-urls
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpConnection.connect("]xx");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The supplied URL, ']xx', is malformed. Make sure it is an absolute URL, and starts with 'http://' or 'https://'. See https://jsoup.org/cookbook/extracting-data/working-with-urls
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(853);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      assertNotNull(sequenceInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      byte[] byteArray0 = new byte[0];
      int int0 = pipedInputStream0.read(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, int0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      pipedInputStream0.connect(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("H_", "H_", (InputStream) sequenceInputStream0);
      assertNotNull(httpConnection_KeyVal0);
      assertEquals(0, pipedInputStream0.available());
      assertNull(httpConnection_KeyVal0.contentType());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("H_", httpConnection_KeyVal0.value());
      assertEquals("H_", httpConnection_KeyVal0.key());
      
      HttpConnection.KeyVal httpConnection_KeyVal1 = HttpConnection.KeyVal.create("H_", "H_");
      assertFalse(httpConnection_KeyVal1.equals((Object)httpConnection_KeyVal0));
      assertNotNull(httpConnection_KeyVal1);
      assertEquals("H_", httpConnection_KeyVal1.key());
      assertNull(httpConnection_KeyVal1.contentType());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertEquals("H_", httpConnection_KeyVal1.value());
      assertNotSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      
      Connection.KeyVal connection_KeyVal0 = httpConnection_KeyVal0.contentType("H_");
      assertFalse(httpConnection_KeyVal0.equals((Object)httpConnection_KeyVal1));
      assertFalse(connection_KeyVal0.equals((Object)httpConnection_KeyVal1));
      assertNotNull(connection_KeyVal0);
      assertEquals(0, pipedInputStream0.available());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("H_", httpConnection_KeyVal0.value());
      assertEquals("H_", httpConnection_KeyVal0.contentType());
      assertEquals("H_", httpConnection_KeyVal0.key());
      assertEquals("H_", connection_KeyVal0.contentType());
      assertTrue(connection_KeyVal0.hasInputStream());
      assertEquals("H_", connection_KeyVal0.value());
      assertEquals("H_", connection_KeyVal0.key());
      assertNotSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, connection_KeyVal0);
      assertNotSame(connection_KeyVal0, httpConnection_KeyVal1);
      assertSame(connection_KeyVal0, httpConnection_KeyVal0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      
      HttpConnection.Request httpConnection_Request1 = new HttpConnection.Request(httpConnection_Request0);
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection_Request1);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      
      HttpConnection httpConnection0 = new HttpConnection(httpConnection_Request1);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection0);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertNotNull(proxy0);
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      
      Connection connection0 = httpConnection0.cookie("H_", "H_");
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(connection0);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      // Undeclared exception!
      try { 
        sequenceInputStream0.read(byteArray0, 3, 853);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      
      HttpConnection.Request httpConnection_Request1 = new HttpConnection.Request(httpConnection_Request0);
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection_Request1);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      
      HttpConnection httpConnection0 = new HttpConnection(httpConnection_Request1);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection0);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      
      Connection.Method connection_Method0 = Connection.Method.TRACE;
      HttpConnection.Request httpConnection_Request2 = (HttpConnection.Request)httpConnection_Request0.method(connection_Method0);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request2.equals((Object)httpConnection_Request1));
      assertNotNull(httpConnection_Request2);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(2097152, httpConnection_Request2.maxBodySize());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertNotSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      
      Connection.KeyVal connection_KeyVal0 = httpConnection0.data("FAILED ");
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request2));
      assertNull(connection_KeyVal0);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      assertNotSame(httpConnection_Request1, httpConnection_Request2);
      
      HttpConnection httpConnection1 = (HttpConnection)httpConnection0.userAgent("text/");
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request2));
      assertNotNull(httpConnection1);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      assertNotSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection0, httpConnection1);
      assertSame(httpConnection1, httpConnection0);
      
      HttpConnection.Request httpConnection_Request3 = new HttpConnection.Request(httpConnection_Request0);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request3.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request3.equals((Object)httpConnection_Request0));
      assertFalse(httpConnection_Request3.equals((Object)httpConnection_Request2));
      assertNotNull(httpConnection_Request3);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals(30000, httpConnection_Request3.timeout());
      assertEquals(2097152, httpConnection_Request3.maxBodySize());
      assertTrue(httpConnection_Request3.followRedirects());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertNull(httpConnection_Request3.requestBody());
      
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(httpConnection_Request3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL not set. Make sure to call #url(...) before executing the request.
         //
         verifyException("org.jsoup.helper.HttpConnection$Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpCookieStore httpCookieStore0 = new HttpCookieStore();
      assertNotNull(httpCookieStore0);
      
      boolean boolean0 = httpCookieStore0.removeAll();
      assertFalse(boolean0);
      
      Connection connection0 = httpConnection0.cookieStore((CookieStore) httpCookieStore0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.cookie("", " j#KC_:y\"~)!`SVLZg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'name' parameter must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertNotNull(proxy0);
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      assertNotNull(httpConnection_Request1);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      
      CookieManager cookieManager0 = httpConnection_Request0.cookieManager();
      assertNotNull(cookieManager0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      
      Proxy proxy1 = httpConnection_Request0.proxy();
      assertNotNull(proxy1);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy1.type());
      assertEquals("DIRECT", proxy1.toString());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(proxy1, proxy0);
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("b\"GSd\"/5(LYuJ+9a3", "b\"GSd\"/5(LYuJ+9a3");
      assertNotNull(httpConnection_KeyVal0);
      assertEquals("b\"GSd\"/5(LYuJ+9a3", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("b\"GSd\"/5(LYuJ+9a3", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal0.contentType());
      
      String string0 = httpConnection_KeyVal0.toString();
      assertNotNull(string0);
      assertEquals("b\"GSd\"/5(LYuJ+9a3", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("b\"GSd\"/5(LYuJ+9a3", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("b\"GSd\"/5(LYuJ+9a3=b\"GSd\"/5(LYuJ+9a3", string0);
      
      // Undeclared exception!
      try { 
        httpConnection_KeyVal0.value((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The parameter 'value' must not be null.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.contentType());
      assertEquals("Request not made", httpConnection_Response0.statusMessage());
      assertEquals(400, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyAsBytes();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("/c", "/c");
      assertNotNull(httpConnection_KeyVal0);
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("/c", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("/c", httpConnection_KeyVal0.key());
      
      String string0 = httpConnection_KeyVal0.toString();
      assertNotNull(string0);
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("/c", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("/c", httpConnection_KeyVal0.key());
      assertEquals("/c=/c", string0);
      
      String string1 = httpConnection_KeyVal0.contentType();
      assertNull(string1);
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("/c", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("/c", httpConnection_KeyVal0.key());
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      
      HttpConnection httpConnection0 = new HttpConnection(httpConnection_Request0);
      assertNotNull(httpConnection0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      
      HttpConnection.Request httpConnection_Request1 = new HttpConnection.Request();
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection_Request1);
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertTrue(httpConnection_Request1.followRedirects());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(httpConnection_Request1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL not set. Make sure to call #url(...) before executing the request.
         //
         verifyException("org.jsoup.helper.HttpConnection$Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      
      HttpConnection httpConnection0 = new HttpConnection(httpConnection_Request0);
      assertNotNull(httpConnection0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser0.isTrackPosition());
      
      String string0 = "org.jsoup.helper.HttpConnection$1";
      Parser parser1 = Parser.xmlParser();
      assertFalse(parser1.equals((Object)parser0));
      assertNotNull(parser1);
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser1.isTrackPosition());
      assertNotSame(parser1, parser0);
      
      // Undeclared exception!
      try { 
        httpConnection0.postDataCharset("org.jsoup.helper.HttpConnection$1");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // org.jsoup.helper.HttpConnection$1
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      
      HttpConnection.Request httpConnection_Request1 = new HttpConnection.Request(httpConnection_Request0);
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection_Request1);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      
      CDataNode cDataNode0 = new CDataNode("&o#");
      assertNotNull(cDataNode0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      
      CDataNode cDataNode1 = cDataNode0.clone();
      assertFalse(cDataNode1.equals((Object)cDataNode0));
      assertNotNull(cDataNode1);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertFalse(cDataNode1.hasParent());
      assertEquals(0, cDataNode1.siblingIndex());
      assertEquals("#cdata", cDataNode1.nodeName());
      assertNotSame(cDataNode0, cDataNode1);
      assertNotSame(cDataNode1, cDataNode0);
      
      int int0 = cDataNode0.attributesSize();
      assertFalse(cDataNode0.equals((Object)cDataNode1));
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertNotSame(cDataNode0, cDataNode1);
      assertEquals(0, int0);
      
      Attributes attributes0 = cDataNode1.attributes();
      assertFalse(cDataNode0.equals((Object)cDataNode1));
      assertFalse(cDataNode1.equals((Object)cDataNode0));
      assertNotNull(attributes0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertFalse(cDataNode1.hasParent());
      assertEquals(0, cDataNode1.siblingIndex());
      assertEquals("#cdata", cDataNode1.nodeName());
      assertFalse(attributes0.isEmpty());
      assertEquals(1, attributes0.size());
      assertNotSame(cDataNode0, cDataNode1);
      assertNotSame(cDataNode1, cDataNode0);
      
      HttpConnection.Request httpConnection_Request2 = (HttpConnection.Request)httpConnection_Request0.header("zwZ%ddNbmq9)x", "");
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request2.equals((Object)httpConnection_Request1));
      assertNotNull(httpConnection_Request2);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(2097152, httpConnection_Request2.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertTrue(httpConnection_Request2.followRedirects());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertNotSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      
      Map<String, String> map0 = attributes0.dataset();
      assertFalse(cDataNode0.equals((Object)cDataNode1));
      assertFalse(cDataNode1.equals((Object)cDataNode0));
      assertNotNull(map0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertFalse(cDataNode1.hasParent());
      assertEquals(0, cDataNode1.siblingIndex());
      assertEquals("#cdata", cDataNode1.nodeName());
      assertFalse(attributes0.isEmpty());
      assertEquals(1, attributes0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotSame(cDataNode0, cDataNode1);
      assertNotSame(cDataNode1, cDataNode0);
      
      httpConnection_Request0.cookies = map0;
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertFalse(cDataNode1.hasParent());
      assertEquals(0, cDataNode1.siblingIndex());
      assertEquals("#cdata", cDataNode1.nodeName());
      assertFalse(attributes0.isEmpty());
      assertEquals(1, attributes0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(httpConnection_Request0.cookies.isEmpty());
      assertEquals(0, httpConnection_Request0.cookies.size());
      
      HttpConnection.Request httpConnection_Request3 = (HttpConnection.Request)httpConnection_Request1.ignoreContentType(false);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request2));
      assertFalse(httpConnection_Request3.equals((Object)httpConnection_Request2));
      assertFalse(httpConnection_Request3.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection_Request3);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertEquals(2097152, httpConnection_Request3.maxBodySize());
      assertEquals(30000, httpConnection_Request3.timeout());
      assertTrue(httpConnection_Request3.followRedirects());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertNull(httpConnection_Request3.requestBody());
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertNotSame(httpConnection_Request0, httpConnection_Request3);
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      assertNotSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertNotSame(httpConnection_Request3, httpConnection_Request2);
      assertNotSame(httpConnection_Request3, httpConnection_Request0);
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection httpConnection1 = (HttpConnection)httpConnection0.referrer("&o#");
      assertNotNull(httpConnection1);
      assertSame(httpConnection0, httpConnection1);
      assertSame(httpConnection1, httpConnection0);
      
      HttpConnection httpConnection2 = (HttpConnection)httpConnection0.requestBody("&o#");
      assertNotNull(httpConnection2);
      assertSame(httpConnection0, httpConnection1);
      assertSame(httpConnection0, httpConnection2);
      assertSame(httpConnection2, httpConnection1);
      assertSame(httpConnection2, httpConnection0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.contentType());
      assertEquals("Request not made", httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertEquals(400, httpConnection_Response0.statusCode());
      
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(httpConnection_Request0, httpConnection_Response0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL not set. Make sure to call #url(...) before executing the request.
         //
         verifyException("org.jsoup.helper.HttpConnection$Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "application/x-www-form-urlencoded";
      stringArray0[1] = "(application|text)/w*+?xml.*";
      stringArray0[2] = "multipart/form-data";
      stringArray0[3] = "application/x-www-form-urlencoded";
      Connection connection0 = httpConnection0.data(stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.execute();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL not set. Make sure to call #url(...) before executing the request.
         //
         verifyException("org.jsoup.helper.HttpConnection$Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      CookieStore cookieStore0 = httpConnection0.cookieStore();
      assertNotNull(cookieStore0);
      
      Connection connection0 = httpConnection0.cookieStore(cookieStore0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.data((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The parameter 'keyvals' must not be null.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request0.requestBody());
      
      HttpConnection.Request httpConnection_Request1 = new HttpConnection.Request(httpConnection_Request0);
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection_Request1);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      
      Connection.Request connection_Request0 = httpConnection_Request1.followRedirects(true);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertFalse(connection_Request0.equals((Object)httpConnection_Request0));
      assertNotNull(connection_Request0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertNull(connection_Request0.requestBody());
      assertEquals(2097152, connection_Request0.maxBodySize());
      assertEquals(30000, connection_Request0.timeout());
      assertFalse(connection_Request0.ignoreContentType());
      assertTrue(connection_Request0.followRedirects());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertNotSame(httpConnection_Request0, connection_Request0);
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, connection_Request0);
      assertNotSame(connection_Request0, httpConnection_Request0);
      assertSame(connection_Request0, httpConnection_Request1);
      
      Connection connection0 = httpConnection0.request(connection_Request0);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request0.equals((Object)connection_Request0));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertFalse(connection_Request0.equals((Object)httpConnection_Request0));
      assertNotNull(connection0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertNull(connection_Request0.requestBody());
      assertEquals(2097152, connection_Request0.maxBodySize());
      assertEquals(30000, connection_Request0.timeout());
      assertFalse(connection_Request0.ignoreContentType());
      assertTrue(connection_Request0.followRedirects());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertSame(httpConnection0, connection0);
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertNotSame(httpConnection_Request0, connection_Request0);
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, connection_Request0);
      assertNotSame(connection_Request0, httpConnection_Request0);
      assertSame(connection_Request0, httpConnection_Request1);
      assertSame(connection0, httpConnection0);
      
      CookieManager cookieManager0 = httpConnection_Request1.cookieManager();
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request0.equals((Object)connection_Request0));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(cookieManager0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertNotSame(httpConnection_Request0, connection_Request0);
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, connection_Request0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("?|:>", "", (InputStream) null);
      assertNotNull(httpConnection_KeyVal0);
      assertEquals("", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("?|:>", httpConnection_KeyVal0.key());
      
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value("");
      assertNotNull(httpConnection_KeyVal1);
      assertEquals("", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("?|:>", httpConnection_KeyVal0.key());
      assertEquals("?|:>", httpConnection_KeyVal1.key());
      assertEquals("", httpConnection_KeyVal1.value());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertNull(httpConnection_KeyVal1.contentType());
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      
      // Undeclared exception!
      try { 
        httpConnection_KeyVal0.contentType("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertNotNull(proxy0);
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      assertNotNull(httpConnection_Request1);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.maxBodySize((-505));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxSize must be 0 (unlimited) or larger
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      
      HttpConnection.Request httpConnection_Request1 = new HttpConnection.Request(httpConnection_Request0);
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection_Request1);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      
      HttpConnection httpConnection0 = new HttpConnection(httpConnection_Request1);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection0);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      assertTrue(attributes0.isEmpty());
      
      Attribute attribute0 = new Attribute("Ej|X0QPm%P4'9(", "-5~]^6~=");
      assertNotNull(attribute0);
      assertTrue(attribute0.hasDeclaredValue());
      assertEquals("-5~]^6~=", attribute0.getValue());
      assertEquals("Ej|X0QPm%P4'9(", attribute0.getKey());
      
      Attributes attributes1 = attributes0.put(attribute0);
      assertNotNull(attributes1);
      assertFalse(attributes0.isEmpty());
      assertEquals(1, attributes0.size());
      assertTrue(attribute0.hasDeclaredValue());
      assertEquals("-5~]^6~=", attribute0.getValue());
      assertEquals("Ej|X0QPm%P4'9(", attribute0.getKey());
      assertEquals(1, attributes1.size());
      assertFalse(attributes1.isEmpty());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Map<String, String> map0 = attributes1.dataset();
      assertNotNull(map0);
      assertFalse(attributes0.isEmpty());
      assertEquals(1, attributes0.size());
      assertTrue(attribute0.hasDeclaredValue());
      assertEquals("-5~]^6~=", attribute0.getValue());
      assertEquals("Ej|X0QPm%P4'9(", attribute0.getKey());
      assertEquals(1, attributes1.size());
      assertFalse(attributes1.isEmpty());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Connection connection0 = httpConnection0.headers(map0);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(connection0);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(attributes0.isEmpty());
      assertEquals(1, attributes0.size());
      assertTrue(attribute0.hasDeclaredValue());
      assertEquals("-5~]^6~=", attribute0.getValue());
      assertEquals("Ej|X0QPm%P4'9(", attribute0.getKey());
      assertEquals(1, attributes1.size());
      assertFalse(attributes1.isEmpty());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection0, connection0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(connection0, httpConnection0);
      
      Connection connection1 = httpConnection0.requestBody("-5~]^6~=");
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(connection1);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      Tag tag0 = Tag.valueOf("org.jsoup.select.Collector$FirstFinder");
      assertNotNull(tag0);
      assertEquals("org.jsoup.select.collector$firstfinder", tag0.normalName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals("org.jsoup.select.Collector$FirstFinder", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("org.jsoup.select.Collector$FirstFinder", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      
      FormElement formElement0 = new FormElement(tag0, "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36", attributes1);
      assertNotNull(formElement0);
      assertEquals(2, attributes0.size());
      assertFalse(attributes0.isEmpty());
      assertTrue(attribute0.hasDeclaredValue());
      assertEquals("-5~]^6~=", attribute0.getValue());
      assertEquals("Ej|X0QPm%P4'9(", attribute0.getKey());
      assertEquals(2, attributes1.size());
      assertFalse(attributes1.isEmpty());
      assertEquals("org.jsoup.select.collector$firstfinder", tag0.normalName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals("org.jsoup.select.Collector$FirstFinder", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("org.jsoup.select.Collector$FirstFinder", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(formElement0.hasParent());
      assertEquals("org.jsoup.select.collector$firstfinder", formElement0.normalName());
      assertFalse(formElement0.isBlock());
      assertEquals("org.jsoup.select.Collector$FirstFinder", formElement0.tagName());
      assertEquals("org.jsoup.select.Collector$FirstFinder", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertNotNull(list0);
      assertEquals(2, attributes0.size());
      assertFalse(attributes0.isEmpty());
      assertTrue(attribute0.hasDeclaredValue());
      assertEquals("-5~]^6~=", attribute0.getValue());
      assertEquals("Ej|X0QPm%P4'9(", attribute0.getKey());
      assertEquals(2, attributes1.size());
      assertFalse(attributes1.isEmpty());
      assertEquals("org.jsoup.select.collector$firstfinder", tag0.normalName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals("org.jsoup.select.Collector$FirstFinder", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("org.jsoup.select.Collector$FirstFinder", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(formElement0.hasParent());
      assertEquals("org.jsoup.select.collector$firstfinder", formElement0.normalName());
      assertFalse(formElement0.isBlock());
      assertEquals("org.jsoup.select.Collector$FirstFinder", formElement0.tagName());
      assertEquals("org.jsoup.select.Collector$FirstFinder", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Connection connection2 = httpConnection0.data((Collection<Connection.KeyVal>) list0);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(connection2);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals(2, attributes0.size());
      assertFalse(attributes0.isEmpty());
      assertTrue(attribute0.hasDeclaredValue());
      assertEquals("-5~]^6~=", attribute0.getValue());
      assertEquals("Ej|X0QPm%P4'9(", attribute0.getKey());
      assertEquals(2, attributes1.size());
      assertFalse(attributes1.isEmpty());
      assertEquals("org.jsoup.select.collector$firstfinder", tag0.normalName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals("org.jsoup.select.Collector$FirstFinder", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("org.jsoup.select.Collector$FirstFinder", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(formElement0.hasParent());
      assertEquals("org.jsoup.select.collector$firstfinder", formElement0.normalName());
      assertFalse(formElement0.isBlock());
      assertEquals("org.jsoup.select.Collector$FirstFinder", formElement0.tagName());
      assertEquals("org.jsoup.select.Collector$FirstFinder", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(connection2, connection0);
      assertSame(connection2, connection1);
      assertSame(connection2, httpConnection0);
      
      Connection connection3 = httpConnection0.ignoreHttpErrors(false);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(connection3);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection0, connection3);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection2);
      assertSame(connection3, httpConnection0);
      assertSame(connection3, connection1);
      assertSame(connection3, connection2);
      assertSame(connection3, connection0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      
      SSLSocketFactory sSLSocketFactory0 = httpConnection_Request0.sslSocketFactory();
      assertNull(sSLSocketFactory0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      
      httpConnection_Request0.sslSocketFactory((SSLSocketFactory) null);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      
      HttpConnection.Request httpConnection_Request1 = new HttpConnection.Request(httpConnection_Request0);
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection_Request1);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      
      HttpConnection httpConnection0 = new HttpConnection(httpConnection_Request1);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertTrue(attributes0.isEmpty());
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("true", true);
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertFalse(attributes0.isEmpty());
      assertEquals(1, attributes1.size());
      assertFalse(attributes1.isEmpty());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Attributes attributes2 = attributes1.put("", "(");
      assertNotNull(attributes2);
      assertEquals(2, attributes0.size());
      assertFalse(attributes0.isEmpty());
      assertEquals(2, attributes1.size());
      assertFalse(attributes1.isEmpty());
      assertEquals(2, attributes2.size());
      assertFalse(attributes2.isEmpty());
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      
      Map<String, String> map0 = attributes2.dataset();
      assertNotNull(map0);
      assertEquals(2, attributes0.size());
      assertFalse(attributes0.isEmpty());
      assertEquals(2, attributes1.size());
      assertFalse(attributes1.isEmpty());
      assertEquals(2, attributes2.size());
      assertFalse(attributes2.isEmpty());
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      
      // Undeclared exception!
      try { 
        httpConnection0.headers(map0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      
      HttpConnection.Request httpConnection_Request1 = new HttpConnection.Request(httpConnection_Request0);
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection_Request1);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      
      HttpConnection.Request httpConnection_Request2 = (HttpConnection.Request)httpConnection_Request1.addHeader("_XnAHBlC~Jdp~6", "JPVUt");
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertFalse(httpConnection_Request2.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection_Request2);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(2097152, httpConnection_Request2.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertNotSame(httpConnection_Request0, httpConnection_Request2);
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      assertNotSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      
      HttpConnection.Request httpConnection_Request3 = (HttpConnection.Request)httpConnection_Request0.ignoreContentType(true);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request2));
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request3.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request3.equals((Object)httpConnection_Request2));
      assertNotNull(httpConnection_Request3);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request3.timeout());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertEquals(2097152, httpConnection_Request3.maxBodySize());
      assertTrue(httpConnection_Request3.followRedirects());
      assertTrue(httpConnection_Request3.ignoreContentType());
      assertNull(httpConnection_Request3.requestBody());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertNotSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertNotSame(httpConnection_Request3, httpConnection_Request1);
      assertNotSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request1.proxy("_XnAHBlC~Jdp~6", 0);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request2));
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request3));
      assertFalse(httpConnection_Request4.equals((Object)httpConnection_Request3));
      assertFalse(httpConnection_Request4.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection_Request4);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request4.requestBody());
      assertFalse(httpConnection_Request4.ignoreHttpErrors());
      assertTrue(httpConnection_Request4.followRedirects());
      assertEquals(30000, httpConnection_Request4.timeout());
      assertEquals(2097152, httpConnection_Request4.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request4.postDataCharset());
      assertFalse(httpConnection_Request4.ignoreContentType());
      assertNotSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertNotSame(httpConnection_Request0, httpConnection_Request4);
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request4);
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      assertNotSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request4, httpConnection_Request2);
      assertSame(httpConnection_Request4, httpConnection_Request1);
      assertNotSame(httpConnection_Request4, httpConnection_Request3);
      assertNotSame(httpConnection_Request4, httpConnection_Request0);
      
      String string0 = "\\YmOdmD`^PZBS>C.x";
      // Undeclared exception!
      try { 
        httpConnection_Request1.postDataCharset("YmOdmD`^PZBS>C.x");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // YmOdmD`^PZBS>C.x
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      
      // Undeclared exception!
      try { 
        httpConnection_Request0.proxy("", (-69));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-69
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      
      Connection.Request connection_Request0 = httpConnection_Request0.ignoreHttpErrors(false);
      assertNotNull(connection_Request0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(2097152, connection_Request0.maxBodySize());
      assertEquals(30000, connection_Request0.timeout());
      assertTrue(connection_Request0.followRedirects());
      assertNull(connection_Request0.requestBody());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(connection_Request0, httpConnection_Request0);
      
      HttpConnection httpConnection0 = new HttpConnection(httpConnection_Request0);
      assertNotNull(httpConnection0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      
      Connection connection0 = httpConnection0.data("text/", "text/");
      assertNotNull(connection0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Connection.Request connection_Request1 = httpConnection_Request0.maxBodySize(0);
      assertNotNull(connection_Request1);
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(0, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(connection_Request1.ignoreHttpErrors());
      assertNull(connection_Request1.requestBody());
      assertEquals("UTF-8", connection_Request1.postDataCharset());
      assertFalse(connection_Request1.ignoreContentType());
      assertEquals(30000, connection_Request1.timeout());
      assertEquals(0, connection_Request1.maxBodySize());
      assertTrue(connection_Request1.followRedirects());
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, connection_Request1);
      assertSame(connection_Request1, httpConnection_Request0);
      assertSame(connection_Request1, connection_Request0);
      
      Connection.Request connection_Request2 = httpConnection_Request0.followRedirects(false);
      assertNotNull(connection_Request2);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(0, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.followRedirects());
      assertFalse(connection_Request2.followRedirects());
      assertNull(connection_Request2.requestBody());
      assertFalse(connection_Request2.ignoreHttpErrors());
      assertFalse(connection_Request2.ignoreContentType());
      assertEquals(30000, connection_Request2.timeout());
      assertEquals("UTF-8", connection_Request2.postDataCharset());
      assertEquals(0, connection_Request2.maxBodySize());
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, connection_Request2);
      assertSame(httpConnection_Request0, connection_Request1);
      assertSame(connection_Request2, connection_Request0);
      assertSame(connection_Request2, connection_Request1);
      assertSame(connection_Request2, httpConnection_Request0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertEquals("Request not made", httpConnection_Response0.statusMessage());
      assertEquals(400, httpConnection_Response0.statusCode());
      
      String string0 = "";
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyStream();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      
      HttpConnection httpConnection0 = new HttpConnection(httpConnection_Request0);
      assertNotNull(httpConnection0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string0 = hashMap0.put("/[M", "P^ig^NGW");
      assertNull(string0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      HashMap<String, String> hashMap1 = new HashMap<String, String>(hashMap0);
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotNull(hashMap1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      
      Connection connection0 = httpConnection0.cookies(hashMap1);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotNull(connection0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertSame(httpConnection0, connection0);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(connection0, httpConnection0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.cookies((Map<String, String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The parameter 'cookies' must not be null.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      
      HttpConnection.Request httpConnection_Request1 = new HttpConnection.Request(httpConnection_Request0);
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection_Request1);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request1.timeout());
      
      String string0 = "WM?;V2b0{3_";
      HttpConnection.Request httpConnection_Request2 = (HttpConnection.Request)httpConnection_Request1.removeHeader("WM?;V2b0{3_");
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertFalse(httpConnection_Request2.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection_Request2);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals(2097152, httpConnection_Request2.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertNotSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertNotSame(httpConnection_Request2, httpConnection_Request0);
      
      int int0 = httpConnection_Request1.maxBodySize();
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request2));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertNotSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      assertEquals(2097152, int0);
      
      HttpConnection httpConnection0 = new HttpConnection(httpConnection_Request1);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request2));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection0);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request1.timeout());
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Content-Type", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36", (InputStream) null);
      assertNotNull(httpConnection_KeyVal0);
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("Content-Type", httpConnection_KeyVal0.key());
      assertEquals("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36", httpConnection_KeyVal0.value());
      
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request2));
      assertFalse(httpConnection_Request3.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request3.equals((Object)httpConnection_Request2));
      assertNotNull(httpConnection_Request3);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("Content-Type", httpConnection_KeyVal0.key());
      assertEquals("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36", httpConnection_KeyVal0.value());
      assertTrue(httpConnection_Request3.followRedirects());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertEquals(30000, httpConnection_Request3.timeout());
      assertEquals(2097152, httpConnection_Request3.maxBodySize());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertNull(httpConnection_Request3.requestBody());
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertNotSame(httpConnection_Request0, httpConnection_Request2);
      assertNotSame(httpConnection_Request3, httpConnection_Request1);
      assertNotSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      boolean boolean0 = pipedInputStream0.markSupported();
      assertEquals(0, pipedInputStream0.available());
      assertFalse(boolean0);
      
      HttpConnection httpConnection1 = (HttpConnection)httpConnection0.data("n#O47\"`Ou+", "yD4qCGEz<YQ% 'fu3 ", (InputStream) pipedInputStream0, "WM?;V2b0{3_");
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request2));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request3));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection1);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals(0, pipedInputStream0.available());
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertNotSame(httpConnection_Request0, httpConnection_Request2);
      assertNotSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection0, httpConnection1);
      assertSame(httpConnection1, httpConnection0);
      
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(httpConnection_Request1, (HttpConnection.Response) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL not set. Make sure to call #url(...) before executing the request.
         //
         verifyException("org.jsoup.helper.HttpConnection$Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("^76EGB4(", "");
      assertNotNull(httpConnection_KeyVal0);
      assertEquals("", httpConnection_KeyVal0.value());
      assertEquals("^76EGB4(", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key("c?_");
      assertNotNull(httpConnection_KeyVal1);
      assertEquals("", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("c?_", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("c?_", httpConnection_KeyVal1.key());
      assertEquals("", httpConnection_KeyVal1.value());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      
      String string0 = httpConnection_KeyVal1.key();
      assertNotNull(string0);
      assertEquals("", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("c?_", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("c?_", httpConnection_KeyVal1.key());
      assertEquals("", httpConnection_KeyVal1.value());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertEquals("c?_", string0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      
      HttpConnection.Request httpConnection_Request1 = new HttpConnection.Request(httpConnection_Request0);
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection_Request1);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      
      HttpConnection httpConnection0 = new HttpConnection(httpConnection_Request1);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      
      String string1 = "PQQ\\WRyM`^(Bn9*=&~G";
      String string2 = "\r\n\r\n";
      URL uRL0 = MockURL.getFtpExample();
      assertNotNull(uRL0);
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      // Undeclared exception!
      try { 
        MockURL.openStream(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request0.requestBody());
      
      Connection.Request connection_Request0 = httpConnection_Request0.followRedirects(false);
      assertNotNull(connection_Request0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(2097152, connection_Request0.maxBodySize());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
      assertNull(connection_Request0.requestBody());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertFalse(connection_Request0.followRedirects());
      assertEquals(30000, connection_Request0.timeout());
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(connection_Request0, httpConnection_Request0);
      
      Connection.Method connection_Method0 = Connection.Method.DELETE;
      httpConnection_Request0.method = connection_Method0;
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.method.hasBody());
      
      boolean boolean0 = false;
      Connection.Request connection_Request1 = httpConnection_Request0.ignoreContentType(false);
      assertNotNull(connection_Request1);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, connection_Request1.timeout());
      assertFalse(connection_Request1.ignoreContentType());
      assertEquals("UTF-8", connection_Request1.postDataCharset());
      assertNull(connection_Request1.requestBody());
      assertFalse(connection_Request1.ignoreHttpErrors());
      assertFalse(connection_Request1.followRedirects());
      assertEquals(2097152, connection_Request1.maxBodySize());
      assertSame(httpConnection_Request0, connection_Request1);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(connection_Request1, connection_Request0);
      assertSame(connection_Request1, httpConnection_Request0);
      
      Connection.Request connection_Request2 = httpConnection_Request0.maxBodySize(523);
      assertNotNull(connection_Request2);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(523, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertFalse(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", connection_Request2.postDataCharset());
      assertFalse(connection_Request2.ignoreContentType());
      assertFalse(connection_Request2.followRedirects());
      assertEquals(30000, connection_Request2.timeout());
      assertNull(connection_Request2.requestBody());
      assertFalse(connection_Request2.ignoreHttpErrors());
      assertEquals(523, connection_Request2.maxBodySize());
      assertSame(httpConnection_Request0, connection_Request2);
      assertSame(httpConnection_Request0, connection_Request1);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(connection_Request2, httpConnection_Request0);
      assertSame(connection_Request2, connection_Request1);
      assertSame(connection_Request2, connection_Request0);
      
      // Undeclared exception!
      try { 
        httpConnection_Request0.postDataCharset("0uUg");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 0uUg
         //
         verifyException("org.jsoup.helper.HttpConnection$Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      
      HttpConnection.Request httpConnection_Request1 = new HttpConnection.Request(httpConnection_Request0);
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection_Request1);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      
      // Undeclared exception!
      try { 
        httpConnection_Request1.postDataCharset("https");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // https
         //
         verifyException("org.jsoup.helper.HttpConnection$Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.postDataCharset("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      
      HttpConnection.Request httpConnection_Request1 = new HttpConnection.Request(httpConnection_Request0);
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection_Request1);
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request1.timeout());
      
      HttpConnection httpConnection0 = new HttpConnection(httpConnection_Request1);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection0);
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request1.timeout());
      
      // Undeclared exception!
      try { 
        httpConnection0.response();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // You must execute the request before getting a response.
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      String string0 = "R3}91gH[";
      Connection connection0 = httpConnection0.cookie("R3}91gH[", "R3}91gH[");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Connection.Method connection_Method0 = Connection.Method.PATCH;
      Connection connection1 = httpConnection0.method(connection_Method0);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertEquals("Request not made", httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(400, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.parse();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.contentType());
      assertEquals("Request not made", httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertEquals(400, httpConnection_Response0.statusCode());
      
      HttpConnection.Request httpConnection_Request1 = (HttpConnection.Request)httpConnection_Request0.addHeader("%~*z}V", "%~*z}V");
      assertNotNull(httpConnection_Request1);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertTrue(httpConnection_Request1.followRedirects());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      
      HttpConnection.Response httpConnection_Response1 = httpConnection_Response0.charset("CIDR bits non zero: ");
      assertNotNull(httpConnection_Response1);
      assertNull(httpConnection_Response0.contentType());
      assertEquals("Request not made", httpConnection_Response0.statusMessage());
      assertEquals(400, httpConnection_Response0.statusCode());
      assertEquals("CIDR bits non zero: ", httpConnection_Response0.charset());
      assertNull(httpConnection_Response1.contentType());
      assertEquals("Request not made", httpConnection_Response1.statusMessage());
      assertEquals(400, httpConnection_Response1.statusCode());
      assertEquals("CIDR bits non zero: ", httpConnection_Response1.charset());
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(httpConnection_Request0, httpConnection_Response1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL not set. Make sure to call #url(...) before executing the request.
         //
         verifyException("org.jsoup.helper.HttpConnection$Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.ignoreContentType(false);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Connection.Request connection_Request0 = httpConnection0.request();
      assertNotNull(connection_Request0);
      assertEquals(2097152, connection_Request0.maxBodySize());
      assertTrue(connection_Request0.followRedirects());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals(30000, connection_Request0.timeout());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertNull(connection_Request0.requestBody());
      assertSame(httpConnection0, connection0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertEquals(400, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertEquals("Request not made", httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      
      HttpConnection.Response httpConnection_Response1 = (HttpConnection.Response)httpConnection_Response0.removeCookie("Content-Encoding");
      assertNotNull(httpConnection_Response1);
      assertEquals(400, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertEquals("Request not made", httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response1.charset());
      assertNull(httpConnection_Response1.contentType());
      assertEquals("Request not made", httpConnection_Response1.statusMessage());
      assertEquals(400, httpConnection_Response1.statusCode());
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.removeCookie("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'name' parameter must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      
      HttpConnection httpConnection0 = new HttpConnection(httpConnection_Request0);
      assertNotNull(httpConnection0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      
      // Undeclared exception!
      try { 
        httpConnection0.get();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL not set. Make sure to call #url(...) before executing the request.
         //
         verifyException("org.jsoup.helper.HttpConnection$Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      
      HttpConnection.Request httpConnection_Request1 = new HttpConnection.Request(httpConnection_Request0);
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection_Request1);
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      
      int int0 = httpConnection_Request1.maxBodySize();
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      assertEquals(2097152, int0);
      
      Collection<Connection.KeyVal> collection0 = httpConnection_Request0.data();
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertNotNull(collection0);
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertEquals("Request not made", httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(400, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(httpConnection_Request1, httpConnection_Response0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL not set. Make sure to call #url(...) before executing the request.
         //
         verifyException("org.jsoup.helper.HttpConnection$Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("pb&WkR?Ki", ";X$h32DPtaFNi#", (InputStream) null);
      assertNotNull(httpConnection_KeyVal0);
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals(";X$h32DPtaFNi#", httpConnection_KeyVal0.value());
      assertEquals("pb&WkR?Ki", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      
      boolean boolean0 = httpConnection_KeyVal0.hasInputStream();
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals(";X$h32DPtaFNi#", httpConnection_KeyVal0.value());
      assertEquals("pb&WkR?Ki", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertFalse(boolean0);
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.get();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL not set. Make sure to call #url(...) before executing the request.
         //
         verifyException("org.jsoup.helper.HttpConnection$Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      
      HttpConnection.Request httpConnection_Request1 = new HttpConnection.Request(httpConnection_Request0);
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection_Request1);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      
      HttpConnection httpConnection0 = new HttpConnection(httpConnection_Request1);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection0);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      
      Connection.Method connection_Method0 = Connection.Method.DELETE;
      Connection connection0 = httpConnection0.referrer("");
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(connection0);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Connection connection1 = httpConnection0.method(connection_Method0);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(connection1);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.execute();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL not set. Make sure to call #url(...) before executing the request.
         //
         verifyException("org.jsoup.helper.HttpConnection$Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      
      Connection.Request connection_Request0 = httpConnection_Request0.followRedirects(false);
      assertNotNull(connection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, connection_Request0.timeout());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals(2097152, connection_Request0.maxBodySize());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertNull(connection_Request0.requestBody());
      assertFalse(connection_Request0.followRedirects());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(connection_Request0, httpConnection_Request0);
      
      String string0 = httpConnection_Request0.postDataCharset();
      assertNotNull(string0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertSame(httpConnection_Request0, connection_Request0);
      assertEquals("UTF-8", string0);
      
      HttpConnection.Request httpConnection_Request1 = new HttpConnection.Request();
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertFalse(httpConnection_Request1.equals((Object)connection_Request0));
      assertNotNull(httpConnection_Request1);
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      
      HttpConnection httpConnection0 = new HttpConnection(httpConnection_Request1);
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertFalse(httpConnection_Request1.equals((Object)connection_Request0));
      assertNotNull(httpConnection0);
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      
      Connection connection0 = httpConnection0.referrer("UTF-8");
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertFalse(httpConnection_Request1.equals((Object)connection_Request0));
      assertNotNull(connection0);
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      assertNotSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      String string1 = httpConnection_Request1.requestBody();
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertFalse(httpConnection_Request1.equals((Object)connection_Request0));
      assertNull(string1);
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      assertNotSame(httpConnection_Request1, connection_Request0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackPosition());
      assertFalse(parser0.isTrackErrors());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      assertNotNull(httpConnection_Request1);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(parser0.isTrackPosition());
      assertFalse(parser0.isTrackErrors());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.followRedirects());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      assertTrue(attributes0.isEmpty());
      
      Attributes attributes1 = attributes0.put("Content-Encoding", "multipart/form-data");
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertFalse(attributes0.isEmpty());
      assertFalse(attributes1.isEmpty());
      assertEquals(1, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        Attribute.createFromEncoded("", "Content-Encoding");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser0.isTrackPosition());
      
      Parser parser1 = parser0.setTrackPosition(false);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser0.isTrackPosition());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser1.isTrackPosition());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Connection connection0 = httpConnection0.parser(parser1);
      assertNotNull(connection0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser0.isTrackPosition());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser1.isTrackPosition());
      assertSame(httpConnection0, connection0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(connection0, httpConnection0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      
      HttpConnection httpConnection0 = new HttpConnection(httpConnection_Request0);
      assertNotNull(httpConnection0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      
      Connection connection0 = httpConnection0.proxy((Proxy) null);
      assertNotNull(connection0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      
      Connection connection1 = httpConnection0.url(uRL0);
      assertNotNull(connection1);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      
      try { 
        httpConnection0.execute();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // HTTP error fetching URL. Status=404, URL=[http://www.someFakeButWellFormedURL.org/fooExample]
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      
      HttpConnection httpConnection0 = new HttpConnection(httpConnection_Request0);
      assertNotNull(httpConnection0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      
      Connection.Method connection_Method0 = Connection.Method.TRACE;
      HttpConnection.Request httpConnection_Request1 = (HttpConnection.Request)httpConnection_Request0.method(connection_Method0);
      assertNotNull(httpConnection_Request1);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      
      Connection.KeyVal connection_KeyVal0 = httpConnection0.data("dir");
      assertNull(connection_KeyVal0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      
      HttpConnection.Request httpConnection_Request2 = new HttpConnection.Request(httpConnection_Request0);
      assertFalse(httpConnection_Request2.equals((Object)httpConnection_Request0));
      assertFalse(httpConnection_Request2.equals((Object)httpConnection_Request1));
      assertNotNull(httpConnection_Request2);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertEquals(2097152, httpConnection_Request2.maxBodySize());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(httpConnection_Request2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL not set. Make sure to call #url(...) before executing the request.
         //
         verifyException("org.jsoup.helper.HttpConnection$Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      
      HttpConnection.Request httpConnection_Request1 = new HttpConnection.Request(httpConnection_Request0);
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection_Request1);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      
      HttpConnection.Request httpConnection_Request2 = (HttpConnection.Request)httpConnection_Request0.cookie("<9=^CusxQ|n=yq", "O");
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request2.equals((Object)httpConnection_Request1));
      assertNotNull(httpConnection_Request2);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request2.requestBody());
      assertTrue(httpConnection_Request2.followRedirects());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals(2097152, httpConnection_Request2.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertNotSame(httpConnection_Request2, httpConnection_Request1);
      
      SSLSocketFactory sSLSocketFactory0 = httpConnection_Request1.sslSocketFactory();
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request2));
      assertNull(sSLSocketFactory0);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      assertNotSame(httpConnection_Request1, httpConnection_Request2);
      
      httpConnection_Request1.sslSocketFactory((SSLSocketFactory) null);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request2));
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      assertNotSame(httpConnection_Request1, httpConnection_Request2);
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection httpConnection1 = (HttpConnection)httpConnection0.proxy("<9=^CusxQ|n=yq", 0);
      assertNotNull(httpConnection1);
      assertSame(httpConnection0, httpConnection1);
      assertSame(httpConnection1, httpConnection0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      
      HttpConnection.Request httpConnection_Request1 = new HttpConnection.Request(httpConnection_Request0);
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection_Request1);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      
      HttpConnection httpConnection0 = new HttpConnection(httpConnection_Request1);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection0);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      
      // Undeclared exception!
      try { 
        httpConnection0.execute();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL not set. Make sure to call #url(...) before executing the request.
         //
         verifyException("org.jsoup.helper.HttpConnection$Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1099);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("userAgent", "userAgent", (InputStream) pipedInputStream0);
      assertNotNull(httpConnection_KeyVal0);
      assertEquals(0, pipedInputStream0.available());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("userAgent", httpConnection_KeyVal0.key());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("userAgent", httpConnection_KeyVal0.value());
      
      boolean boolean0 = httpConnection_KeyVal0.hasInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("userAgent", httpConnection_KeyVal0.key());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("userAgent", httpConnection_KeyVal0.value());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      
      HttpConnection.Request httpConnection_Request1 = new HttpConnection.Request(httpConnection_Request0);
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection_Request1);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      
      URL uRL0 = MockURL.getFtpExample();
      assertNotNull(uRL0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      
      HttpConnection.Request httpConnection_Request2 = (HttpConnection.Request)httpConnection_Request1.url(uRL0);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertFalse(httpConnection_Request2.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection_Request2);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals(2097152, httpConnection_Request2.maxBodySize());
      assertTrue(httpConnection_Request2.followRedirects());
      assertNotSame(httpConnection_Request0, httpConnection_Request2);
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertNotSame(httpConnection_Request2, httpConnection_Request0);
      
      HttpConnection.Request httpConnection_Request3 = (HttpConnection.Request)httpConnection_Request1.ignoreContentType(true);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request2));
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertFalse(httpConnection_Request3.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection_Request3);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(2097152, httpConnection_Request3.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertTrue(httpConnection_Request3.ignoreContentType());
      assertNull(httpConnection_Request3.requestBody());
      assertTrue(httpConnection_Request3.followRedirects());
      assertEquals(30000, httpConnection_Request3.timeout());
      assertNotSame(httpConnection_Request0, httpConnection_Request2);
      assertNotSame(httpConnection_Request0, httpConnection_Request3);
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertNotSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      
      boolean boolean0 = httpConnection_Request1.ignoreContentType();
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request2));
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request3));
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNotSame(httpConnection_Request0, httpConnection_Request2);
      assertNotSame(httpConnection_Request0, httpConnection_Request3);
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertTrue(boolean0);
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection.KeyVal connection_KeyVal0 = httpConnection0.data("http");
      assertNull(connection_KeyVal0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      
      Connection.Request connection_Request0 = httpConnection_Request0.ignoreContentType(false);
      assertNotNull(connection_Request0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(2097152, connection_Request0.maxBodySize());
      assertNull(connection_Request0.requestBody());
      assertTrue(connection_Request0.followRedirects());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertEquals(30000, connection_Request0.timeout());
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(connection_Request0, httpConnection_Request0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request0.requestBody());
      
      SSLSocketFactory sSLSocketFactory0 = httpConnection_Request0.sslSocketFactory();
      assertNull(sSLSocketFactory0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request0.requestBody());
      
      Connection connection0 = httpConnection0.sslSocketFactory((SSLSocketFactory) null);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Connection connection1 = httpConnection0.proxy("; filename=\"", 198);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      Connection.Request connection_Request0 = httpConnection_Request0.requestBody("; filename=\"");
      assertNotNull(connection_Request0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("; filename=\"", httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("; filename=\"", connection_Request0.requestBody());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertEquals(2097152, connection_Request0.maxBodySize());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals(30000, connection_Request0.timeout());
      assertTrue(connection_Request0.followRedirects());
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(connection_Request0, httpConnection_Request0);
      
      Connection.Request connection_Request1 = httpConnection0.request();
      assertFalse(connection_Request1.equals((Object)connection_Request0));
      assertFalse(connection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(connection_Request1);
      assertEquals("UTF-8", connection_Request1.postDataCharset());
      assertEquals(2097152, connection_Request1.maxBodySize());
      assertEquals(30000, connection_Request1.timeout());
      assertFalse(connection_Request1.ignoreContentType());
      assertTrue(connection_Request1.followRedirects());
      assertFalse(connection_Request1.ignoreHttpErrors());
      assertNull(connection_Request1.requestBody());
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertNotSame(connection_Request1, connection_Request0);
      assertNotSame(connection_Request1, httpConnection_Request0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      
      SSLSocketFactory sSLSocketFactory0 = httpConnection_Request0.sslSocketFactory();
      assertNull(sSLSocketFactory0);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      
      Connection.Request connection_Request0 = httpConnection_Request0.requestBody("KPTao/88]4}]");
      assertNotNull(connection_Request0);
      assertEquals("KPTao/88]4}]", httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(30000, connection_Request0.timeout());
      assertEquals("KPTao/88]4}]", connection_Request0.requestBody());
      assertEquals(2097152, connection_Request0.maxBodySize());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(connection_Request0, httpConnection_Request0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      
      Parser parser0 = httpConnection_Request0.parser();
      assertNotNull(parser0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser0.isTrackPosition());
      
      HttpConnection httpConnection0 = new HttpConnection(httpConnection_Request0);
      assertNotNull(httpConnection0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertNotNull(proxy0);
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      
      Connection connection0 = httpConnection0.proxy(proxy0);
      assertNotNull(connection0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Connection connection1 = httpConnection0.request((Connection.Request) httpConnection_Request0);
      assertNotNull(connection1);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.userAgent((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The parameter 'userAgent' must not be null.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertNotNull(proxy0);
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      
      Connection connection0 = httpConnection0.proxy(proxy0);
      assertNotNull(connection0);
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      HttpConnection.Request httpConnection_Request0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute((HttpConnection.Request) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      
      HttpConnection.Request httpConnection_Request1 = new HttpConnection.Request(httpConnection_Request0);
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection_Request1);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(30000, httpConnection_Request1.timeout());
      
      HttpConnection httpConnection0 = new HttpConnection(httpConnection_Request1);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(30000, httpConnection_Request1.timeout());
      
      // Undeclared exception!
      try { 
        httpConnection0.post();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL not set. Make sure to call #url(...) before executing the request.
         //
         verifyException("org.jsoup.helper.HttpConnection$Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      
      HttpConnection httpConnection0 = new HttpConnection(httpConnection_Request0);
      assertNotNull(httpConnection0);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      
      Connection.Request connection_Request0 = httpConnection_Request0.maxBodySize(30000);
      assertNotNull(connection_Request0);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, connection_Request0.maxBodySize());
      assertTrue(connection_Request0.followRedirects());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertEquals(30000, connection_Request0.timeout());
      assertNull(connection_Request0.requestBody());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(connection_Request0, httpConnection_Request0);
      
      HttpConnection.Request httpConnection_Request1 = (HttpConnection.Request)httpConnection_Request0.cookie("Content-Encoding", "");
      assertNotNull(httpConnection_Request1);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(30000, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      
      HttpConnection httpConnection1 = (HttpConnection)httpConnection0.followRedirects(false);
      assertNotNull(httpConnection1);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection0, httpConnection1);
      assertSame(httpConnection1, httpConnection0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      
      HttpConnection httpConnection0 = new HttpConnection(httpConnection_Request0);
      assertNotNull(httpConnection0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      
      httpConnection_Request0.headers = null;
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      
      Connection connection0 = httpConnection0.followRedirects(true);
      assertNotNull(connection0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.cookie("]u6", "]u6");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      
      Connection.Request connection_Request0 = httpConnection_Request0.followRedirects(true);
      assertNotNull(connection_Request0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertTrue(connection_Request0.followRedirects());
      assertNull(connection_Request0.requestBody());
      assertEquals(30000, connection_Request0.timeout());
      assertEquals(2097152, connection_Request0.maxBodySize());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(connection_Request0, httpConnection_Request0);
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection.Request connection_Request1 = httpConnection0.request();
      assertFalse(connection_Request1.equals((Object)connection_Request0));
      assertFalse(connection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(connection_Request1);
      assertFalse(connection_Request1.ignoreHttpErrors());
      assertNull(connection_Request1.requestBody());
      assertFalse(connection_Request1.ignoreContentType());
      assertEquals(2097152, connection_Request1.maxBodySize());
      assertEquals(30000, connection_Request1.timeout());
      assertTrue(connection_Request1.followRedirects());
      assertEquals("UTF-8", connection_Request1.postDataCharset());
      assertNotSame(connection_Request1, connection_Request0);
      assertNotSame(connection_Request1, httpConnection_Request0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertEquals("Request not made", httpConnection_Response0.statusMessage());
      assertEquals(400, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      httpConnection_Response0.processResponseHeaders(hashMap0);
      assertEquals("Request not made", httpConnection_Response0.statusMessage());
      assertEquals(400, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Set-Cookie", "Set-Cookie", (InputStream) null);
      assertNotNull(httpConnection_KeyVal0);
      assertEquals("Set-Cookie", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("Set-Cookie", httpConnection_KeyVal0.value());
      
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key("|Lrb$.M{A.Vx Hd~IU,");
      assertNotNull(httpConnection_KeyVal1);
      assertNull(httpConnection_KeyVal0.contentType());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("Set-Cookie", httpConnection_KeyVal0.value());
      assertEquals("|Lrb$.M{A.Vx Hd~IU,", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertEquals("Set-Cookie", httpConnection_KeyVal1.value());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("|Lrb$.M{A.Vx Hd~IU,", httpConnection_KeyVal1.key());
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.value("|Lrb$.M{A.Vx Hd~IU,");
      assertNotNull(httpConnection_KeyVal2);
      assertNull(httpConnection_KeyVal0.contentType());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("|Lrb$.M{A.Vx Hd~IU,", httpConnection_KeyVal0.key());
      assertEquals("|Lrb$.M{A.Vx Hd~IU,", httpConnection_KeyVal0.value());
      assertEquals("|Lrb$.M{A.Vx Hd~IU,", httpConnection_KeyVal2.key());
      assertNull(httpConnection_KeyVal2.contentType());
      assertEquals("|Lrb$.M{A.Vx Hd~IU,", httpConnection_KeyVal2.value());
      assertFalse(httpConnection_KeyVal2.hasInputStream());
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal2.inputStream((InputStream) null);
      assertNotNull(httpConnection_KeyVal3);
      assertNull(httpConnection_KeyVal0.contentType());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("|Lrb$.M{A.Vx Hd~IU,", httpConnection_KeyVal0.key());
      assertEquals("|Lrb$.M{A.Vx Hd~IU,", httpConnection_KeyVal0.value());
      assertEquals("|Lrb$.M{A.Vx Hd~IU,", httpConnection_KeyVal2.key());
      assertNull(httpConnection_KeyVal2.contentType());
      assertEquals("|Lrb$.M{A.Vx Hd~IU,", httpConnection_KeyVal2.value());
      assertFalse(httpConnection_KeyVal2.hasInputStream());
      assertEquals("|Lrb$.M{A.Vx Hd~IU,", httpConnection_KeyVal3.value());
      assertFalse(httpConnection_KeyVal3.hasInputStream());
      assertEquals("|Lrb$.M{A.Vx Hd~IU,", httpConnection_KeyVal3.key());
      assertNull(httpConnection_KeyVal3.contentType());
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal1);
      
      boolean boolean0 = httpConnection_KeyVal3.hasInputStream();
      assertNull(httpConnection_KeyVal0.contentType());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("|Lrb$.M{A.Vx Hd~IU,", httpConnection_KeyVal0.key());
      assertEquals("|Lrb$.M{A.Vx Hd~IU,", httpConnection_KeyVal0.value());
      assertEquals("|Lrb$.M{A.Vx Hd~IU,", httpConnection_KeyVal2.key());
      assertNull(httpConnection_KeyVal2.contentType());
      assertEquals("|Lrb$.M{A.Vx Hd~IU,", httpConnection_KeyVal2.value());
      assertFalse(httpConnection_KeyVal2.hasInputStream());
      assertEquals("|Lrb$.M{A.Vx Hd~IU,", httpConnection_KeyVal3.value());
      assertFalse(httpConnection_KeyVal3.hasInputStream());
      assertEquals("|Lrb$.M{A.Vx Hd~IU,", httpConnection_KeyVal3.key());
      assertNull(httpConnection_KeyVal3.contentType());
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      
      HttpConnection httpConnection0 = new HttpConnection(httpConnection_Request0);
      assertNotNull(httpConnection0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      
      Connection connection0 = httpConnection0.data("uf|X.f2coUxINGS", "uf|X.f2coUxINGS", (InputStream) null);
      assertNotNull(connection0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'key' parameter must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      String string0 = "";
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      assertNotNull(pushbackInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      boolean boolean0 = false;
      Connection connection0 = httpConnection0.ignoreHttpErrors(false);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.data("", "", (InputStream) pushbackInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'key' parameter must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.data("text/", "IX7;rN");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(1);
      assertNotNull(httpConnection_Request1);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(1, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.followRedirects());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      
      boolean boolean0 = httpConnection_Request0.followRedirects();
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      
      HttpConnection.Request httpConnection_Request1 = new HttpConnection.Request(httpConnection_Request0);
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection_Request1);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      
      Connection.Request connection_Request0 = httpConnection_Request1.requestBody("map");
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertFalse(connection_Request0.equals((Object)httpConnection_Request0));
      assertNotNull(connection_Request0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("map", httpConnection_Request1.requestBody());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals("map", connection_Request0.requestBody());
      assertEquals(30000, connection_Request0.timeout());
      assertEquals(2097152, connection_Request0.maxBodySize());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
      assertTrue(connection_Request0.followRedirects());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertNotSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request1, connection_Request0);
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(connection_Request0, httpConnection_Request1);
      assertNotSame(connection_Request0, httpConnection_Request0);
      
      HttpConnection.Request httpConnection_Request2 = new HttpConnection.Request(httpConnection_Request1);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request0.equals((Object)connection_Request0));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertFalse(httpConnection_Request2.equals((Object)httpConnection_Request0));
      assertFalse(httpConnection_Request2.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request2.equals((Object)connection_Request0));
      assertNotNull(httpConnection_Request2);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("map", httpConnection_Request1.requestBody());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals("map", httpConnection_Request2.requestBody());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertEquals(2097152, httpConnection_Request2.maxBodySize());
      assertTrue(httpConnection_Request2.followRedirects());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      
      HttpConnection httpConnection0 = new HttpConnection(httpConnection_Request2);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request2));
      assertFalse(httpConnection_Request0.equals((Object)connection_Request0));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request2));
      assertFalse(httpConnection_Request2.equals((Object)httpConnection_Request0));
      assertFalse(httpConnection_Request2.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request2.equals((Object)connection_Request0));
      assertNotNull(httpConnection0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("map", httpConnection_Request1.requestBody());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals("map", httpConnection_Request2.requestBody());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertEquals(2097152, httpConnection_Request2.maxBodySize());
      assertTrue(httpConnection_Request2.followRedirects());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      
      Connection.KeyVal connection_KeyVal0 = httpConnection0.data("map");
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request2));
      assertFalse(httpConnection_Request0.equals((Object)connection_Request0));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request2));
      assertFalse(httpConnection_Request2.equals((Object)httpConnection_Request0));
      assertFalse(httpConnection_Request2.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request2.equals((Object)connection_Request0));
      assertNull(connection_KeyVal0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("map", httpConnection_Request1.requestBody());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals("map", httpConnection_Request2.requestBody());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertEquals(2097152, httpConnection_Request2.maxBodySize());
      assertTrue(httpConnection_Request2.followRedirects());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertNotSame(httpConnection_Request0, httpConnection_Request2);
      assertNotSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request1, connection_Request0);
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      assertNotSame(httpConnection_Request1, httpConnection_Request2);
      assertNotSame(httpConnection_Request2, httpConnection_Request0);
      assertNotSame(httpConnection_Request2, httpConnection_Request1);
      assertNotSame(httpConnection_Request2, connection_Request0);
      
      // Undeclared exception!
      try { 
        httpConnection_Request1.data((Connection.KeyVal) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The parameter 'keyval' must not be null.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      
      Connection.Request connection_Request0 = httpConnection_Request0.maxBodySize(32768);
      assertNotNull(connection_Request0);
      assertEquals(32768, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(30000, connection_Request0.timeout());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertNull(connection_Request0.requestBody());
      assertTrue(connection_Request0.followRedirects());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals(32768, connection_Request0.maxBodySize());
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(connection_Request0, httpConnection_Request0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      HttpConnection httpConnection0 = new HttpConnection(httpConnection_Request0);
      assertNotNull(httpConnection0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      
      String string0 = null;
      String string1 = "@Pv,yv";
      // Undeclared exception!
      try { 
        httpConnection0.cookie((String) null, "@Pv,yv");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'name' parameter must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      
      HttpConnection httpConnection0 = new HttpConnection(httpConnection_Request0);
      assertNotNull(httpConnection0);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      
      Connection connection0 = httpConnection0.url(uRL0);
      assertNotNull(connection0);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Connection connection1 = httpConnection0.newRequest();
      assertFalse(connection1.equals((Object)httpConnection0));
      assertFalse(connection1.equals((Object)connection0));
      assertNotNull(connection1);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNotSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertNotSame(connection1, httpConnection0);
      assertNotSame(connection1, connection0);
      
      String[] stringArray0 = new String[1];
      Connection connection2 = connection1.requestBody("multipart/form-data");
      assertFalse(httpConnection0.equals((Object)connection1));
      assertFalse(connection1.equals((Object)httpConnection0));
      assertFalse(connection1.equals((Object)connection0));
      assertFalse(connection2.equals((Object)connection0));
      assertFalse(connection2.equals((Object)httpConnection0));
      assertNotNull(connection2);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNotSame(httpConnection0, connection1);
      assertNotSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection0);
      assertNotSame(connection1, httpConnection0);
      assertSame(connection1, connection2);
      assertNotSame(connection1, connection0);
      assertSame(connection2, connection1);
      assertNotSame(connection2, connection0);
      assertNotSame(connection2, httpConnection0);
      
      stringArray0[0] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36";
      // Undeclared exception!
      try { 
        connection1.data(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must supply an even number of key value pairs
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      
      HttpConnection httpConnection0 = new HttpConnection(httpConnection_Request0);
      assertNotNull(httpConnection0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      
      HttpConnection.Request httpConnection_Request1 = (HttpConnection.Request)httpConnection_Request0.cookie("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36", "multipart/form-data");
      assertNotNull(httpConnection_Request1);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      
      HttpConnection httpConnection1 = (HttpConnection)httpConnection0.maxBodySize(248);
      assertNotNull(httpConnection1);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection0, httpConnection1);
      assertSame(httpConnection1, httpConnection0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      SSLSocketFactory sSLSocketFactory0 = httpConnection_Request0.sslSocketFactory();
      assertNull(sSLSocketFactory0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      
      httpConnection_Request0.sslSocketFactory((SSLSocketFactory) null);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      
      HttpConnection httpConnection2 = (HttpConnection)httpConnection0.ignoreHttpErrors(true);
      assertNotNull(httpConnection2);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection0, httpConnection2);
      assertSame(httpConnection0, httpConnection1);
      assertSame(httpConnection2, httpConnection1);
      assertSame(httpConnection2, httpConnection0);
      
      HttpConnection httpConnection3 = (HttpConnection)httpConnection0.request((Connection.Request) httpConnection_Request0);
      assertNotNull(httpConnection3);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection0, httpConnection3);
      assertSame(httpConnection0, httpConnection2);
      assertSame(httpConnection0, httpConnection1);
      assertSame(httpConnection3, httpConnection2);
      assertSame(httpConnection3, httpConnection1);
      assertSame(httpConnection3, httpConnection0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertEquals("Request not made", httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertEquals(400, httpConnection_Response0.statusCode());
      
      HttpConnection.Response httpConnection_Response1 = httpConnection_Response0.charset("%nP7gw");
      assertNotNull(httpConnection_Response1);
      assertEquals("Request not made", httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals("%nP7gw", httpConnection_Response0.charset());
      assertEquals(400, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response1.contentType());
      assertEquals("%nP7gw", httpConnection_Response1.charset());
      assertEquals("Request not made", httpConnection_Response1.statusMessage());
      assertEquals(400, httpConnection_Response1.statusCode());
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains("%nP7gw"));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<String> list0 = hashMap0.put((String) null, linkedList0);
      assertFalse(linkedList0.contains("%nP7gw"));
      assertNull(list0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(0, linkedList0.size());
      
      httpConnection_Response1.processResponseHeaders(hashMap0);
      assertEquals("Request not made", httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals("%nP7gw", httpConnection_Response0.charset());
      assertEquals(400, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response1.contentType());
      assertEquals("%nP7gw", httpConnection_Response1.charset());
      assertEquals("Request not made", httpConnection_Response1.statusMessage());
      assertEquals(400, httpConnection_Response1.statusCode());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      assertNotNull(sequenceInputStream0);
      assertFalse(fileDescriptor0.valid());
      
      Connection connection0 = httpConnection0.data("Eete{u^\"eRux4u~w", "Eete{u^\"eRux4u~w", (InputStream) sequenceInputStream0);
      assertNotNull(connection0);
      assertFalse(fileDescriptor0.valid());
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      CookieStore cookieStore0 = httpConnection0.cookieStore();
      assertNotNull(cookieStore0);
      assertSame(httpConnection0, connection0);
      
      Connection connection1 = httpConnection0.cookieStore(cookieStore0);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      
      Connection connection2 = httpConnection0.data("Eete{u^\"eRux4u~w", "Eete{u^\"eRux4u~w");
      assertNotNull(connection2);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection1);
      assertSame(connection2, connection1);
      assertSame(connection2, httpConnection0);
      assertSame(connection2, connection0);
      
      Connection connection3 = httpConnection0.header("Eete{u^\"eRux4u~w", "Eete{u^\"eRux4u~w");
      assertNotNull(connection3);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection3);
      assertSame(httpConnection0, connection1);
      assertSame(connection3, connection1);
      assertSame(connection3, connection0);
      assertSame(connection3, httpConnection0);
      assertSame(connection3, connection2);
      
      Tag tag0 = Tag.valueOf("Eete{u^\"eRux4u~w");
      assertNotNull(tag0);
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertEquals("Eete{u^\"eRux4u~w", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("Eete{u^\"eRux4u~w", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("eete{u^\"erux4u~w", tag0.normalName());
      assertFalse(tag0.isSelfClosing());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertTrue(attributes0.isEmpty());
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("fMY2@~GX8z5l", false);
      assertNotNull(attributes1);
      assertTrue(attributes0.isEmpty());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertTrue(attributes1.isEmpty());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "application/x-www-form-urlencoded", attributes1);
      assertNotNull(pseudoTextElement0);
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertEquals("Eete{u^\"eRux4u~w", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("Eete{u^\"eRux4u~w", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("eete{u^\"erux4u~w", tag0.normalName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(attributes0.isEmpty());
      assertEquals(1, attributes0.size());
      assertFalse(attributes1.isEmpty());
      assertEquals(1, attributes1.size());
      assertEquals("Eete{u^\"eRux4u~w", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("eete{u^\"erux4u~w", pseudoTextElement0.normalName());
      assertEquals("Eete{u^\"eRux4u~w", pseudoTextElement0.tagName());
      
      List<Node> list0 = pseudoTextElement0.childNodes();
      assertNotNull(list0);
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertEquals("Eete{u^\"eRux4u~w", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("Eete{u^\"eRux4u~w", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("eete{u^\"erux4u~w", tag0.normalName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(attributes0.isEmpty());
      assertEquals(1, attributes0.size());
      assertFalse(attributes1.isEmpty());
      assertEquals(1, attributes1.size());
      assertEquals("Eete{u^\"eRux4u~w", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("eete{u^\"erux4u~w", pseudoTextElement0.normalName());
      assertEquals("Eete{u^\"eRux4u~w", pseudoTextElement0.tagName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Map<String, String> map0 = pseudoTextElement0.dataset();
      assertNotNull(map0);
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertEquals("Eete{u^\"eRux4u~w", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("Eete{u^\"eRux4u~w", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("eete{u^\"erux4u~w", tag0.normalName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(attributes0.isEmpty());
      assertEquals(1, attributes0.size());
      assertFalse(attributes1.isEmpty());
      assertEquals(1, attributes1.size());
      assertEquals("Eete{u^\"eRux4u~w", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("eete{u^\"erux4u~w", pseudoTextElement0.normalName());
      assertEquals("Eete{u^\"eRux4u~w", pseudoTextElement0.tagName());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Connection connection4 = httpConnection0.cookies(map0);
      assertNotNull(connection4);
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertEquals("Eete{u^\"eRux4u~w", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("Eete{u^\"eRux4u~w", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("eete{u^\"erux4u~w", tag0.normalName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(attributes0.isEmpty());
      assertEquals(1, attributes0.size());
      assertFalse(attributes1.isEmpty());
      assertEquals(1, attributes1.size());
      assertEquals("Eete{u^\"eRux4u~w", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("eete{u^\"erux4u~w", pseudoTextElement0.normalName());
      assertEquals("Eete{u^\"eRux4u~w", pseudoTextElement0.tagName());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection4);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection3);
      assertSame(httpConnection0, connection1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(connection4, connection1);
      assertSame(connection4, httpConnection0);
      assertSame(connection4, connection0);
      assertSame(connection4, connection3);
      assertSame(connection4, connection2);
      
      Connection connection5 = connection4.cookieStore(cookieStore0);
      assertNotNull(connection5);
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertEquals("Eete{u^\"eRux4u~w", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("Eete{u^\"eRux4u~w", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("eete{u^\"erux4u~w", tag0.normalName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(attributes0.isEmpty());
      assertEquals(1, attributes0.size());
      assertFalse(attributes1.isEmpty());
      assertEquals(1, attributes1.size());
      assertEquals("Eete{u^\"eRux4u~w", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("eete{u^\"erux4u~w", pseudoTextElement0.normalName());
      assertEquals("Eete{u^\"eRux4u~w", pseudoTextElement0.tagName());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertSame(connection5, connection1);
      assertSame(connection5, connection2);
      assertSame(connection5, connection4);
      assertSame(connection5, connection0);
      assertSame(connection5, httpConnection0);
      assertSame(connection5, connection3);
      assertSame(httpConnection0, connection5);
      assertSame(httpConnection0, connection4);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection3);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(connection4, connection5);
      assertSame(connection4, connection1);
      assertSame(connection4, httpConnection0);
      assertSame(connection4, connection0);
      assertSame(connection4, connection3);
      assertSame(connection4, connection2);
      
      Connection.KeyVal connection_KeyVal0 = httpConnection0.data("Eete{u^\"eRux4u~w");
      assertNotNull(connection_KeyVal0);
      assertEquals("Eete{u^\"eRux4u~w", connection_KeyVal0.value());
      assertNull(connection_KeyVal0.contentType());
      assertTrue(connection_KeyVal0.hasInputStream());
      assertEquals("Eete{u^\"eRux4u~w", connection_KeyVal0.key());
      assertSame(httpConnection0, connection5);
      assertSame(httpConnection0, connection4);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection3);
      
      Connection connection6 = httpConnection0.data(map0);
      assertNotNull(connection6);
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertEquals("Eete{u^\"eRux4u~w", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("Eete{u^\"eRux4u~w", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("eete{u^\"erux4u~w", tag0.normalName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(attributes0.isEmpty());
      assertEquals(1, attributes0.size());
      assertFalse(attributes1.isEmpty());
      assertEquals(1, attributes1.size());
      assertEquals("Eete{u^\"eRux4u~w", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("eete{u^\"erux4u~w", pseudoTextElement0.normalName());
      assertEquals("Eete{u^\"eRux4u~w", pseudoTextElement0.tagName());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertSame(httpConnection0, connection6);
      assertSame(httpConnection0, connection5);
      assertSame(httpConnection0, connection4);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection3);
      assertSame(connection6, httpConnection0);
      assertSame(connection6, connection3);
      assertSame(connection6, connection1);
      assertSame(connection6, connection4);
      assertSame(connection6, connection5);
      assertSame(connection6, connection2);
      assertSame(connection6, connection0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Connection connection7 = httpConnection0.data(" />", "multipart/form-data", (InputStream) mockFileInputStream0, "Content-Encoding");
      assertNotNull(connection7);
      assertFalse(fileDescriptor0.valid());
      assertSame(httpConnection0, connection6);
      assertSame(httpConnection0, connection5);
      assertSame(httpConnection0, connection4);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection3);
      assertSame(httpConnection0, connection7);
      assertSame(connection7, connection4);
      assertSame(connection7, connection1);
      assertSame(connection7, connection5);
      assertSame(connection7, connection0);
      assertSame(connection7, httpConnection0);
      assertSame(connection7, connection2);
      assertSame(connection7, connection3);
      assertSame(connection7, connection6);
      
      // Undeclared exception!
      try { 
        connection6.url("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The supplied URL, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36', is malformed. Make sure it is an absolute URL, and starts with 'http://' or 'https://'. See https://jsoup.org/cookbook/extracting-data/working-with-urls
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      
      HttpConnection.Request httpConnection_Request1 = new HttpConnection.Request(httpConnection_Request0);
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection_Request1);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      
      HttpConnection httpConnection0 = new HttpConnection(httpConnection_Request1);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection0);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertNotNull(proxy0);
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request0.proxy(proxy0);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request2.equals((Object)httpConnection_Request1));
      assertNotNull(httpConnection_Request2);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals(2097152, httpConnection_Request2.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertNotSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      
      Connection connection0 = httpConnection0.data("HTTP error fetching URL", "HTTP error fetching URL", (InputStream) pipedInputStream0);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request2));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(connection0);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals(0, pipedInputStream0.available());
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertNotSame(httpConnection_Request1, httpConnection_Request2);
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Connection connection1 = httpConnection0.timeout(94);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request2));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(connection1);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertNotSame(httpConnection_Request1, httpConnection_Request2);
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      Connection connection2 = httpConnection0.proxy("HTTP error fetching URL", 94);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request2));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(connection2);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertNotSame(httpConnection_Request1, httpConnection_Request2);
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection2);
      assertSame(connection2, httpConnection0);
      assertSame(connection2, connection1);
      assertSame(connection2, connection0);
      
      Connection.Method connection_Method0 = Connection.Method.HEAD;
      Connection connection3 = connection2.method(connection_Method0);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request2));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(connection3);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertNotSame(httpConnection_Request1, httpConnection_Request2);
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection0, connection3);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection2);
      assertSame(connection2, connection3);
      assertSame(connection2, httpConnection0);
      assertSame(connection2, connection1);
      assertSame(connection2, connection0);
      assertSame(connection3, connection1);
      assertSame(connection3, connection0);
      assertSame(connection3, httpConnection0);
      assertSame(connection3, connection2);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.contentType());
      assertEquals("Request not made", httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertEquals(400, httpConnection_Response0.statusCode());
      
      String string0 = httpConnection_Response0.statusMessage();
      assertNotNull(string0);
      assertNull(httpConnection_Response0.contentType());
      assertEquals("Request not made", httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertEquals(400, httpConnection_Response0.statusCode());
      assertEquals("Request not made", string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      
      HttpConnection.Request httpConnection_Request1 = new HttpConnection.Request(httpConnection_Request0);
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection_Request1);
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      
      HttpConnection httpConnection0 = new HttpConnection(httpConnection_Request1);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection0);
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Connection connection0 = httpConnection0.data("HTTP error fetching URL", "HTTP error fetching URL", (InputStream) pipedInputStream0);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(connection0);
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(0, pipedInputStream0.available());
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Connection connection1 = httpConnection0.timeout(94);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(connection1);
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      
      Connection connection2 = httpConnection0.proxy("HTTP error fetching URL", 94);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(connection2);
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertNotSame(httpConnection_Request0, httpConnection_Request1);
      assertNotSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection2, httpConnection0);
      assertSame(connection2, connection0);
      assertSame(connection2, connection1);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.contentType());
      assertEquals("Request not made", httpConnection_Response0.statusMessage());
      assertEquals(400, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      
      String string0 = httpConnection_Response0.statusMessage();
      assertNotNull(string0);
      assertNull(httpConnection_Response0.contentType());
      assertEquals("Request not made", httpConnection_Response0.statusMessage());
      assertEquals(400, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertEquals("Request not made", string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      System.setCurrentTimeMillis((-817L));
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      
      HttpConnection.Request httpConnection_Request1 = new HttpConnection.Request(httpConnection_Request0);
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection_Request1);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(30000, httpConnection_Request1.timeout());
      
      HttpConnection httpConnection0 = new HttpConnection(httpConnection_Request1);
      assertFalse(httpConnection_Request0.equals((Object)httpConnection_Request1));
      assertFalse(httpConnection_Request1.equals((Object)httpConnection_Request0));
      assertNotNull(httpConnection0);
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(30000, httpConnection_Request1.timeout());
      
      // Undeclared exception!
      try { 
        HttpConnection.connect("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The supplied URL, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36', is malformed. Make sure it is an absolute URL, and starts with 'http://' or 'https://'. See https://jsoup.org/cookbook/extracting-data/working-with-urls
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HashSet<Connection.KeyVal> hashSet0 = new HashSet<Connection.KeyVal>();
      hashSet0.iterator();
      Connection connection0 = httpConnection0.data((Collection<Connection.KeyVal>) hashSet0);
      httpConnection0.proxy("%#<#(A@45'n", 89);
      httpConnection0.data("|\"H uEE]%N}");
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("useragent", "multipart/form-data");
      Document document1 = document0.parser(parser0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(89);
      Document document2 = document1.outputSettings(document_OutputSettings1);
      hashSet0.add((Connection.KeyVal) null);
      Map<String, String> map0 = document2.dataset();
      httpConnection0.data(map0);
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(20);
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      connection0.proxy(proxy0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(853);
      mockInetSocketAddress0.getHostName();
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      httpConnection0.proxy(proxy0);
      Connection connection0 = httpConnection0.maxBodySize(0);
      httpConnection0.userAgent("");
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      connection0.timeout(2784);
      HttpConnection.Request httpConnection_Request1 = new HttpConnection.Request(httpConnection_Request0);
      httpConnection_Request0.sslSocketFactory();
      httpConnection_Request0.sslSocketFactory((SSLSocketFactory) null);
      Parser parser0 = Parser.xmlParser();
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      parser0.newInstance();
      httpConnection_Request1.parser(parser0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Content-Type", "Accept-Encoding");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte)14;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.inputStream((InputStream) byteArrayInputStream0);
      httpConnection_KeyVal1.key("192.168.1.42");
      // Undeclared exception!
      try { 
        httpConnection0.response();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // You must execute the request before getting a response.
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "";
      httpConnection_Request0.requestBody("");
      HttpConnection.Request httpConnection_Request1 = new HttpConnection.Request(httpConnection_Request0);
      httpConnection_Request1.followRedirects(false);
      URL uRL0 = MockURL.getFileExample();
      httpConnection_Request1.url(uRL0);
      httpConnection_Request1.data();
      URL uRL1 = HttpConnection.encodeUrl(uRL0);
      HttpConnection httpConnection0 = new HttpConnection();
      String string1 = "command";
      HttpConnection.connect(uRL1);
      httpConnection0.proxy("command", 0);
      // Undeclared exception!
      try { 
        httpConnection0.get();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL not set. Make sure to call #url(...) before executing the request.
         //
         verifyException("org.jsoup.helper.HttpConnection$Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      httpConnection_Request0.sslSocketFactory();
      httpConnection_Request0.sslSocketFactory((SSLSocketFactory) null);
      HttpConnection.Request httpConnection_Request1 = new HttpConnection.Request(httpConnection_Request0);
      HttpConnection httpConnection0 = new HttpConnection(httpConnection_Request1);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("true", true);
      Attributes attributes2 = attributes1.put("", "(");
      attributes2.dataset();
      httpConnection0.newRequest();
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals(30000, httpConnection_Request0.timeout());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      httpConnection_Request0.postDataCharset();
      HttpConnection.Request httpConnection_Request1 = new HttpConnection.Request();
      HttpConnection httpConnection0 = new HttpConnection(httpConnection_Request1);
      Connection connection0 = httpConnection0.referrer("UTF-8");
      httpConnection_Request1.requestBody();
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      
      // Undeclared exception!
      try { 
        connection0.postDataCharset("a>>,/VqV");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // a>>,/VqV
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(httpConnection_Request0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL not set. Make sure to call #url(...) before executing the request.
         //
         verifyException("org.jsoup.helper.HttpConnection$Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Request httpConnection_Request1 = new HttpConnection.Request(httpConnection_Request0);
      HttpConnection httpConnection0 = new HttpConnection(httpConnection_Request1);
      httpConnection0.cookieStore();
      assertEquals(2097152, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals(2097152, httpConnection_Request0.maxBodySize());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.headers((Map<String, String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The parameter 'headers' must not be null.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection httpConnection0 = new HttpConnection(httpConnection_Request0);
      httpConnection0.proxy((Proxy) null);
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = httpConnection0.url(uRL0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Content-Encoding";
      stringArray0[1] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36";
      stringArray0[2] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36";
      stringArray0[3] = "Content-Encoding";
      stringArray0[4] = "Content-Type";
      stringArray0[5] = "useragent";
      stringArray0[6] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36";
      stringArray0[7] = "Content-Encoding";
      connection0.data(stringArray0);
      try { 
        httpConnection0.execute();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // HTTP error fetching URL. Status=404, URL=[http://www.someFakeButWellFormedURL.org/fooExample?Content-Encoding=Mozilla%2F5.0+%28Windows+NT+10.0%3B+Win64%3B+x64%29+AppleWebKit%2F537.36+%28KHTML%2C+like+Gecko%29+Chrome%2F79.0.3945.130+Safari%2F537.36&Mozilla%2F5.0+%28Windows+NT+10.0%3B+Win64%3B+x64%29+AppleWebKit%2F537.36+%28KHTML%2C+like+Gecko%29+Chrome%2F79.0.3945.130+Safari%2F537.36=Content-Encoding&Content-Type=useragent&Mozilla%2F5.0+%28Windows+NT+10.0%3B+Win64%3B+x64%29+AppleWebKit%2F537.36+%28KHTML%2C+like+Gecko%29+Chrome%2F79.0.3945.130+Safari%2F537.36=Content-Encoding]
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }
}
