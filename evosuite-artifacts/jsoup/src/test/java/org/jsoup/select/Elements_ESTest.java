/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 06 15:27:10 GMT 2022
 */

package org.jsoup.select;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.List;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Collector;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.jsoup.select.NodeFilter;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Elements_ESTest extends Elements_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Element element0 = new Element("4.{K ");
      Elements elements0 = element0.getElementsContainingText("&amp;");
      Elements elements1 = elements0.eq(0);
      assertTrue(elements1.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.select.Evaluator$AttributeStarting");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "org.jsoup.select.Evaluator$AttributeStarting", attributes0);
      Elements elements0 = pseudoTextElement0.getElementsByAttribute("$vVz239gc\"FO;aN");
      Elements elements1 = elements0.wrap("$vVz239gc\"FO;aN");
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("5i?@7R ", "5i?@7R ");
      Elements elements0 = document0.getElementsByIndexLessThan(721);
      elements0.val("bgsound");
      String string0 = elements0.val();
      assertEquals("bgsound", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parse("`QgK:LWi3A7;jd#Z", "\">");
      Elements elements0 = document0.getElementsMatchingText("`QgK:LWi3A7;jd#Z");
      Elements elements1 = elements0.next();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Elements elements2 = elements1.traverse(nodeVisitor0);
      assertTrue(elements2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Document.createShell("N");
      Elements elements0 = document0.getAllElements();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Elements elements1 = elements0.traverse(nodeVisitor0);
      assertEquals(4, elements1.size());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Parser.parse("T&B``lI8y", "org.jsoup.select.Elements");
      Elements elements0 = document0.getElementsContainingText("T&B``lI8y");
      Elements elements1 = elements0.prevAll("org.jsoup.select.Elements");
      String string0 = elements1.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Document.createShell("l{");
      Elements elements0 = document0.nextElementSiblings();
      String string0 = elements0.text();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Element element0 = new Element("org.jsoup.select.Elements");
      Elements elements0 = element0.getElementsByAttributeValueEnding("mark", "mark");
      Elements elements1 = elements0.select("mark");
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Element[] elementArray0 = new Element[3];
      Document document0 = Parser.parse("qu)", "qu)");
      elementArray0[0] = (Element) document0;
      Tag tag0 = Tag.valueOf("IA");
      Element element0 = new Element(tag0, "IA");
      elementArray0[1] = element0;
      elementArray0[2] = (Element) document0;
      Elements elements0 = new Elements(elementArray0);
      Elements elements1 = elements0.select("IA");
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Document.createShell(")3^`r(");
      Elements elements0 = document0.children();
      Elements elements1 = elements0.removeAttr(")3^`r(");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parse("2n4^tg.P.&gU2*0yUTH", "2n4^tg.P.&gU2*0yUTH");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      Elements elements1 = elements0.prevAll((String) null);
      assertFalse(elements1.isEmpty());
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Parser.parse("sn4^t4.P.&gU2*0yMTH", "sn4^t4.P.&gU2*0yMTH");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      Elements elements1 = elements0.prevAll();
      assertEquals(1, elements1.size());
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Document.createShell("l{");
      Elements elements0 = document0.nextElementSiblings();
      Elements elements1 = elements0.prev("e6I");
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = new Document("completeWrite: {}");
      Elements elements0 = document0.getElementsMatchingText("SY<xl`");
      Elements elements1 = elements0.prev();
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Elements");
      Elements elements0 = document0.getElementsByAttributeValueNot("dNI91q'WQHD_G\"c", "4DgpDd~yB+:z5z  k");
      String string0 = elements0.outerHtml();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.Elements");
      Element element0 = document0.body();
      Elements elements0 = element0.previousElementSiblings();
      Elements elements1 = elements0.not("org.jsoup.select.Elements");
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Document.createShell("Content-Encoding");
      Elements elements0 = document0.getElementsByIndexLessThan(14);
      Elements elements1 = elements0.nextAll((String) null);
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Document.createShell(")3^`r(");
      Elements elements0 = document0.children();
      Elements elements1 = elements0.nextAll();
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parse("2n4^tg.P.&gU2*0yUTH", "2n4^tg.P.&gU2*0yUTH");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      Elements elements1 = elements0.prev();
      Elements elements2 = elements1.next();
      assertEquals(1, elements2.size());
      assertNotSame(elements2, elements1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parse("+B``lI8P", "m-BFA<0x=");
      Elements elements0 = document0.getElementsContainingText("+B``lI8P");
      Element element0 = elements0.last();
      assertEquals("body", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("org.jsoup.select.Elements", parseSettings0);
      Element element0 = new Element(tag0, "uv4vAF", (Attributes) null);
      Elements elements0 = element0.getElementsContainingOwnText("");
      Element element1 = elements0.last();
      assertEquals(0, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = new Document("completeWrite: {}");
      Elements elements0 = document0.getElementsMatchingText("SY<xl`");
      String string0 = elements0.html();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Document.createShell("N");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.nextAll();
      Element element0 = elements1.first();
      assertEquals(1, elements1.size());
      assertEquals("body", element0.normalName());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parse("sn4^t4.P.&gU2*0yMTH", "sn4^t4.P.&gU2*0yMTH");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      Evaluator.IsNthChild evaluator_IsNthChild0 = new Evaluator.IsNthChild((-1340), 4077);
      Collector.FirstFinder collector_FirstFinder0 = new Collector.FirstFinder(evaluator_IsNthChild0);
      Elements elements1 = elements0.filter(collector_FirstFinder0);
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parse(" k5", " k5");
      Pattern pattern0 = Pattern.compile("");
      Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
      Elements elements1 = elements0.eq(1);
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Elements");
      Elements elements0 = document0.getElementsByAttributeValueNot("dNI91q'WQHD_G\"c", "4DgpDd~yB+:z5z  k");
      Elements elements1 = elements0.next();
      Elements elements2 = elements1.empty();
      assertTrue(elements2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Parser.parse("sn4^t4.P.&gU2*0yMTH", "sn4^t4.P.&gU2*0yMTH");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      List<String> list0 = elements0.eachText();
      assertTrue(list0.contains("sn4^t4.P.&gU2*0yMTH"));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Elements");
      Elements elements0 = document0.getElementsByAttributeValueNot("dNI91q'WQHD_G\"c", "4DgpDd~yB+:z5z  k");
      Elements elements1 = elements0.next();
      elements1.attr("", "kC(:BS)ff-;hszA_X");
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.append("required");
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parse("T&B``lI8y", "org.jsoup.select.Elements");
      Elements elements0 = document0.getElementsContainingText("T&B``lI8y");
      Elements elements1 = elements0.addClass("org.jsoup.select.Elements");
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parse("2n4^tg.P.&gU2*0yUTH", "2n4^tg.P.&gU2*0yUTH");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      element0.replaceWith(document0);
      // Undeclared exception!
      elements0.wrap("2n4^tg.P.&gU2*0yUTH");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Element[] elementArray0 = new Element[7];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.wrap("qu)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parse("<L!", "<L!");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.wrap("<L!");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0
         //
         verifyException("java.util.Collections$EmptyList", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Elements elements0 = new Elements();
      elements0.add((Element) null);
      // Undeclared exception!
      try { 
        elements0.val("org.jsoup.select.Elements");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Element[] elementArray0 = new Element[3];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.val();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = new Document("5i?@7R ");
      document0.body();
      Elements elements0 = document0.getElementsByIndexLessThan(721);
      Elements elements1 = elements0.unwrap();
      // Undeclared exception!
      try { 
        elements1.unwrap();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Elements elements0 = new Elements(0);
      elements0.add((Element) null);
      // Undeclared exception!
      try { 
        elements0.unwrap();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parse("5i?@7R ", "5i?@7R ");
      Elements elements0 = document0.getElementsByIndexLessThan(731);
      elements0.html("5i?@7R ");
      // Undeclared exception!
      try { 
        elements0.unwrap();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Tag tag0 = Tag.valueOf("C");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "C", attributes0);
      Elements elements0 = element0.getElementsByAttributeValueNot("C", "C");
      element0.appendTo(element0);
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      elements0.traverse(nodeVisitor0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = new Document((String) null);
      Elements elements0 = document0.getElementsByIndexGreaterThan((-220));
      // Undeclared exception!
      try { 
        elements0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Elements elements0 = new Elements();
      elements0.add((Element) null);
      // Undeclared exception!
      try { 
        elements0.textNodes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Elements elements0 = new Elements();
      elements0.add((Element) null);
      // Undeclared exception!
      try { 
        elements0.text();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = new Document((String) null);
      Pattern pattern0 = Pattern.compile("");
      Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
      // Undeclared exception!
      try { 
        elements0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'tagName' parameter must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Element[] elementArray0 = new Element[2];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.tagName("org.jsoup.select.Elements");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Document.createShell("EEx)b(yZ");
      Elements elements0 = document0.getElementsByTag("nkvr)9\"A9y=yniv1k");
      // Undeclared exception!
      try { 
        elements0.select("nkvr)9\"A9y=yniv1k");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'nkvr)9\"A9y=yniv1k': unexpected token at ')9\"A9y=yniv1k'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parse("2n4^tg.P.&gU2*0yUTH", "2n4^tg.P.&gU2*0yUTH");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      // Undeclared exception!
      try { 
        elements0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Element element0 = new Element("5k5@_XM");
      Elements elements0 = element0.getElementsByAttributeValueNot("5k5@_XM", "C),*>bokd|G/ =[EE");
      // Undeclared exception!
      try { 
        elements0.removeAttr((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = new Document("5i?@7R ");
      document0.body();
      Elements elements0 = document0.getElementsByIndexLessThan(721);
      elements0.unwrap();
      // Undeclared exception!
      try { 
        elements0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Elements elements0 = new Elements();
      elements0.add((Element) null);
      // Undeclared exception!
      try { 
        elements0.remove();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("5i?@7R ", "5i?@7R ");
      Elements elements0 = document0.getElementsByIndexLessThan(721);
      elements0.html("5i?@7R ");
      // Undeclared exception!
      try { 
        elements0.remove();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parse("`QgK:LWi3A7;jd#Z", "\">");
      Elements elements0 = document0.getElementsMatchingText("`QgK:LWi3A7;jd#Z");
      // Undeclared exception!
      try { 
        elements0.prevAll("<html>\n <head></head>\n <body>\n  `QgK:LWi3A7;jd#Z\n </body>\n</html>-jY{Ccwn/myC.A\n<html>\n <head></head>\n <body>\n  `QgK:LWi3A7;jd#Z\n </body>\n</html>\n<body>\n `QgK:LWi3A7;jd#Z\n</body>");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '<html>
         //  <head></head>
         //  <body>
         //   `QgK:LWi3A7;jd#Z
         //  </body>
         // </html>-jY{Ccwn/myC.A
         // <html>
         //  <head></head>
         //  <body>
         //   `QgK:LWi3A7;jd#Z
         //  </body>
         // </html>
         // <body>
         //  `QgK:LWi3A7;jd#Z
         // </body>': unexpected token at '<html>
         //  <head></head>
         //  <body>
         //   `QgK:LWi3A7;jd#Z
         //  </body>
         // </html>-jY{Ccwn/myC.A
         // <html>
         //  <head></head>
         //  <body>
         //   `QgK:LWi3A7;jd#Z
         //  </body>
         // </html>
         // <body>
         //  `QgK:LWi3A7;jd#Z
         // </body>'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Elements elements0 = new Elements();
      elements0.add((Element) null);
      // Undeclared exception!
      try { 
        elements0.prevAll("org.jsoup.select.Elements");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Elements elements0 = new Elements();
      elements0.add((Element) null);
      // Undeclared exception!
      try { 
        elements0.prevAll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Element[] elementArray0 = new Element[1];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.prev();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = new Document("3pX;l-oE8vuMb");
      Pattern pattern0 = Pattern.compile("");
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      // Undeclared exception!
      try { 
        elements0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Tag tag0 = Tag.valueOf(">A:8JcF");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "H", attributes0);
      formElement0.addElement((Element) null);
      Elements elements0 = formElement0.elements();
      // Undeclared exception!
      try { 
        elements0.parents();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Document.createShell("Content-Encoding");
      Elements elements0 = document0.getElementsByIndexLessThan(0);
      // Undeclared exception!
      try { 
        elements0.not("application/x-www-form-urlencoded");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'application/x-www-form-urlencoded': unexpected token at '/x-www-form-urlencoded'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getElementsByAttributeValueNot("t/{D", "t/{D");
      // Undeclared exception!
      try { 
        elements0.not((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Document.createShell("l{");
      Elements elements0 = document0.nextElementSiblings();
      // Undeclared exception!
      try { 
        elements0.nextAll("\n");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Element[] elementArray0 = new Element[3];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.nextAll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Elements");
      Elements elements0 = document0.getElementsByAttributeValueNot("dNI91q'WQHD_G\"c", "4DgpDd~yB+:z5z  k");
      // Undeclared exception!
      try { 
        elements0.next("4DgpDd~yB+:z5z  k");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query ':z5z': unexpected token at ':z5z'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Elements elements0 = new Elements();
      elements0.add((Element) null);
      // Undeclared exception!
      try { 
        elements0.next("eof");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Element[] elementArray0 = new Element[3];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Evaluator.ContainsWholeText evaluator_ContainsWholeText0 = new Evaluator.ContainsWholeText("");
      Elements elements0 = document0.select((Evaluator) evaluator_ContainsWholeText0);
      // Undeclared exception!
      try { 
        elements0.is("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Elements elements0 = new Elements();
      elements0.add((Element) null);
      // Undeclared exception!
      try { 
        elements0.is("org.jsoup.select.Elements");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = new Document("5i?@7R ");
      document0.body();
      Elements elements0 = document0.getElementsByIndexLessThan(731);
      // Undeclared exception!
      try { 
        elements0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Document.createShell("Content-Encoding");
      Elements elements0 = document0.getElementsByIndexLessThan(14);
      Elements elements1 = elements0.append("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36");
      elements1.prepend("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36");
      String string0 = elements1.text();
      Elements elements2 = elements1.html(string0);
      elements2.outerHtml();
      // Undeclared exception!
      elements0.html();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Elements elements0 = new Elements();
      elements0.add((Element) null);
      // Undeclared exception!
      try { 
        elements0.html();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Element[] elementArray0 = new Element[3];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.hasText();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Elements elements0 = new Elements(0);
      elements0.add((Element) null);
      // Undeclared exception!
      try { 
        elements0.hasClass("J_jKI_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Element[] elementArray0 = new Element[3];
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("qu)", "qu)");
      elementArray0[0] = (Element) document0;
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.hasAttr((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Tag tag0 = Tag.valueOf("reservedWait");
      Element element0 = new Element(tag0, "org.jsoup.select.Elements", (Attributes) null);
      Elements elements0 = element0.previousElementSiblings();
      // Undeclared exception!
      try { 
        elements0.filter((NodeFilter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Document.createShell("sn4^t4.P.&gU2*0yMTH");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      Collector.FirstFinder collector_FirstFinder0 = new Collector.FirstFinder((Evaluator) null);
      // Undeclared exception!
      try { 
        elements0.filter(collector_FirstFinder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Collector$FirstFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Element[] elementArray0 = new Element[3];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.empty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Element[] elementArray0 = new Element[3];
      Document document0 = Parser.parse("qu)", "qu)");
      elementArray0[0] = (Element) document0;
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.eachAttr((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Elements elements0 = new Elements();
      elements0.add((Element) null);
      // Undeclared exception!
      try { 
        elements0.eachAttr("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Element[] elementArray0 = new Element[6];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.comments();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Parser.parse("{:!?6D?OWuVy:9cevH", "{:!?6D?OWuVy:9cevH");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      element0.after((Node) document0);
      // Undeclared exception!
      elements0.clone();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Elements elements0 = new Elements();
      elements0.add((Element) null);
      // Undeclared exception!
      try { 
        elements0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Bcp", "Bcp");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.before("Bcp");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.attr((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.attr((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Elements elements0 = new Elements();
      elements0.add((Element) null);
      // Undeclared exception!
      try { 
        elements0.attr("org.jsoup.select.Elements");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parse("T&B``lI8y", "org.jsoup.select.Elements");
      Elements elements0 = document0.getElementsContainingText("T&B``lI8y");
      // Undeclared exception!
      try { 
        elements0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Parser.parse("T&B``lI8y", "org.jsoup.select.Elements");
      Elements elements0 = document0.getElementsContainingText("T&B``lI8y");
      document0.prependChild(document0);
      // Undeclared exception!
      elements0.append("T&B``lI8y");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Element[] elementArray0 = new Element[7];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.append("%s@%x[size=%d]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = new Document("kLIfK");
      Elements elements0 = document0.getElementsMatchingOwnText("");
      // Undeclared exception!
      try { 
        elements0.after("org.jsoup.select.Elements");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Elements elements0 = new Elements();
      elements0.add((Element) null);
      // Undeclared exception!
      try { 
        elements0.after("^G9hyVBH'S.:Il_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Document.createShell("Content-Encoding");
      Elements elements0 = document0.getElementsByIndexLessThan(50);
      elements0.empty();
      // Undeclared exception!
      try { 
        elements0.after("org.jsoup.select.Elements");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Elements elements0 = new Elements();
      elements0.add((Element) null);
      // Undeclared exception!
      try { 
        elements0.addClass("vLc/_g/S(W0p=f");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Elements elements0 = null;
      try {
        elements0 = new Elements((Element[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Elements elements0 = null;
      try {
        elements0 = new Elements((List<Element>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Elements elements0 = null;
      try {
        elements0 = new Elements((Collection<Element>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Elements elements0 = null;
      try {
        elements0 = new Elements((-631));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -631
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Document.createShell("N");
      Elements elements0 = document0.getAllElements();
      Document document1 = (Document)elements0.first();
      assertFalse(document1.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Document.createShell("N");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = new Elements((List<Element>) elements0);
      assertTrue(elements1.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = new Document((String) null);
      Elements elements0 = document0.getElementsByIndexGreaterThan((-220));
      Elements elements1 = new Elements((Collection<Element>) elements0);
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parse("2n4^tg.P.&gU2*0yUTH", "2n4^tg.P.&gU2*0yUTH");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      List<TextNode> list0 = elements0.textNodes();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("@%V*", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "@%V*", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      Elements elements0 = formElement0.elements();
      List<FormElement> list0 = elements0.forms();
      assertTrue(list0.contains(formElement1));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = new Document("5i?@7R ");
      document0.body();
      Elements elements0 = document0.getElementsByIndexLessThan(731);
      List<FormElement> list0 = elements0.forms();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Elements elements0 = new Elements(0);
      Element element0 = elements0.last();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Elements elements0 = new Elements(0);
      Element element0 = elements0.first();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parse("2n4^tg.P.&gU2*0yUTH", "2n4^tg.P.&gU2*0yUTH");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      Elements elements1 = elements0.parents();
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Element[] elementArray0 = new Element[3];
      Document document0 = Parser.parse("qu)", "qu)");
      elementArray0[0] = (Element) document0;
      Tag tag0 = Tag.valueOf("IA");
      Element element0 = new Element(tag0, "IA");
      elementArray0[1] = element0;
      Elements elements0 = new Elements(elementArray0);
      boolean boolean0 = elements0.is("IA");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parse("T&B``lI8y", "org.jsoup.select.Elements");
      Elements elements0 = document0.getElementsContainingText("T&B``lI8y");
      boolean boolean0 = elements0.is("org.jsoup.select.Elements");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Element element0 = new Element("fbn4h");
      Elements elements0 = element0.getElementsByAttributeValue("org.jsoup.select.Elements", " ");
      // Undeclared exception!
      try { 
        elements0.eq((-2402));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Document.createShell("Content-Encoding");
      Elements elements0 = document0.getElementsByIndexLessThan(14);
      Elements elements1 = elements0.eq(14);
      assertFalse(elements1.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = new Document("5i?@7R ");
      document0.body();
      Elements elements0 = document0.getElementsByIndexLessThan(721);
      Elements elements1 = elements0.remove();
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Elements elements0 = new Elements(0);
      Elements elements1 = elements0.remove();
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = new Document("5i?@7R ");
      Elements elements0 = document0.getElementsByIndexLessThan(731);
      Elements elements1 = elements0.unwrap();
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Document.createShell("Content-Encoding");
      Elements elements0 = document0.getElementsByIndexLessThan(50);
      elements0.after("org.jsoup.select.Elements");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = new Document("5i?@7R ");
      document0.body();
      Elements elements0 = document0.getElementsByIndexLessThan(742);
      Elements elements1 = elements0.before("<html value=\"5i?@7R \">\n <body value=\"5i?@7R \"></body>\n</html>\n<body value=\"5i?@7R \"></body>");
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = new Document("5i?@7R ");
      Elements elements0 = document0.getElementsByIndexLessThan(742);
      Elements elements1 = elements0.before("<html value=\"5i?@7R \">\n <body value=\"5i?@7R \"></body>\n</html>\n<body value=\"5i?@7R \"></body>");
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Elements elements0 = new Elements(0);
      Elements elements1 = elements0.prepend("oAvBzMo^");
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = new Document("5i?@7R ");
      Elements elements0 = document0.getElementsByIndexLessThan(731);
      Elements elements1 = elements0.html("5i?@7R ");
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parse("2n4^tg.P.&gU2*0yUTH", "2n4^tg.P.&gU2*0yUTH");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      Elements elements1 = elements0.tagName("2n4^tg.P.&gU2*0yUTH");
      assertEquals(1, elements1.size());
      assertEquals("head", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Elements elements0 = new Elements(0);
      Elements elements1 = elements0.tagName("f");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Document.createShell("Content-Encoding");
      Elements elements0 = document0.getElementsByIndexLessThan(14);
      String string0 = elements0.html();
      assertEquals("<head></head>\n<body></body>\n\n", string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Element[] elementArray0 = new Element[3];
      Document document0 = Parser.parse("qu)", "qu)");
      elementArray0[0] = (Element) document0;
      Tag tag0 = Tag.valueOf("IA");
      Element element0 = new Element(tag0, "IA");
      elementArray0[1] = element0;
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.eachText();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Elements elements0 = new Elements(0);
      List<String> list0 = elements0.eachText();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Element[] elementArray0 = new Element[3];
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("qu)", "qu)");
      elementArray0[0] = (Element) document0;
      Elements elements0 = new Elements(elementArray0);
      boolean boolean0 = elements0.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = new Document("5i?@7R ");
      document0.body();
      Elements elements0 = document0.getElementsByIndexLessThan(742);
      boolean boolean0 = elements0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = new Document("5i?@7R ");
      Elements elements0 = document0.getElementsByIndexLessThan(731);
      Elements elements1 = elements0.val("bgsound");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = new Document("5i?@7R ");
      document0.body();
      Elements elements0 = document0.getElementsByIndexLessThan(731);
      String string0 = elements0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Elements elements0 = new Elements(0);
      String string0 = elements0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = new Document("5i?@7R ");
      document0.body();
      Elements elements0 = document0.getElementsByIndexLessThan(731);
      boolean boolean0 = elements0.hasClass("bgsound");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = new Document("5i?@7R ");
      document0.body();
      Elements elements0 = document0.getElementsByIndexLessThan(731);
      Elements elements1 = elements0.toggleClass("5i?@7R ");
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = new Document("5i?@7R ");
      Elements elements0 = document0.getElementsByIndexLessThan(731);
      Elements elements1 = elements0.toggleClass("5i?@7R ");
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = new Document("5i?@7R ");
      document0.body();
      Elements elements0 = document0.getElementsByIndexLessThan(731);
      Elements elements1 = elements0.removeClass("~sU)ZxB|?~eYSJ-2");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = new Document("5i?@7R ");
      Elements elements0 = document0.getElementsByIndexLessThan(731);
      Elements elements1 = elements0.removeClass("~sU)ZxB|?~eYSJ-2");
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = new Document("5i?@7R ");
      document0.body();
      Elements elements0 = document0.getElementsByIndexLessThan(731);
      // Undeclared exception!
      try { 
        elements0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Elements elements0 = new Elements(0);
      Elements elements1 = elements0.addClass("f");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Elements elements0 = new Elements();
      elements0.add((Element) null);
      // Undeclared exception!
      try { 
        elements0.removeAttr("org.jsoup.select.Elements");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.removeAttr("org.jsoup.select.Elements");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Elements elements0 = document0.getAllElements();
      elements0.attr("", "");
      List<String> list0 = elements0.eachAttr("");
      assertTrue(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parse("T&B``lI8y", "org.jsoup.select.Elements");
      Elements elements0 = document0.getElementsContainingText("T&B``lI8y");
      List<String> list0 = elements0.eachAttr("BEuT:S");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Tag tag0 = Tag.valueOf("C");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("M", "b;NR{s`PIzj3I_'E3B");
      Element element0 = new Element(tag0, "C", attributes1);
      Elements elements0 = element0.getElementsByAttributeValueNot("C", "C");
      boolean boolean0 = elements0.hasAttr("M");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parse("T&B``lI8y", "org.jsoup.select.Elements");
      Elements elements0 = document0.getElementsContainingText("T&B``lI8y");
      boolean boolean0 = elements0.hasAttr("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Tag tag0 = Tag.valueOf("C");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("M", "b;NR{s`PIzj3I_'E3B");
      Element element0 = new Element(tag0, "C", attributes1);
      Elements elements0 = element0.getElementsByAttributeValueNot("C", "C");
      String string0 = elements0.attr("M");
      assertEquals("b;NR{s`PIzj3I_'E3B", string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parse("5i?@7R ", "5i?@7R ");
      Elements elements0 = document0.getElementsByIndexLessThan(731);
      String string0 = elements0.attr("I.L");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Parser.parse("2n4^tg.P.&gU2*0yUTH", "2n4^tg.P.&gU2*0yUTH");
      Elements elements0 = document0.nextElementSiblings();
      List<TextNode> list0 = elements0.textNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("5i?@7R ", "5i?@7R ");
      Elements elements0 = document0.getElementsByIndexLessThan(721);
      List<Comment> list0 = elements0.comments();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parse("T&B``lI8y", "org.jsoup.select.Elements");
      Elements elements0 = document0.getElementsContainingText("T&B``lI8y");
      String string0 = elements0.toString();
      assertEquals("<html>\n <head></head>\n <body>\n  T&amp;B``lI8y\n </body>\n</html>\n<html>\n <head></head>\n <body>\n  T&amp;B``lI8y\n </body>\n</html>\n<body>\n T&amp;B``lI8y\n</body>", string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Document.createShell("Content-Encoding");
      Elements elements0 = document0.getElementsByIndexLessThan(14);
      // Undeclared exception!
      try { 
        elements0.prev("application/x-www-form-urlencoded");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'application/x-www-form-urlencoded': unexpected token at '/x-www-form-urlencoded'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("bgsound", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "5i?{7R ", attributes0);
      Elements elements0 = element0.getElementsByClass("5i?{7R ");
      Elements elements1 = elements0.not("bgsound");
      assertTrue(elements1.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Element[] elementArray0 = new Element[3];
      Elements elements0 = new Elements(elementArray0);
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        elements0.traverse(nodeVisitor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parse("2n4^tg.P.&gU2*0yUTH", "2n4^tg.P.&gU2*0yUTH");
      Elements elements0 = document0.nextElementSiblings();
      Elements elements1 = elements0.parents();
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Parser.parse("2n4^tg.P.&gU2*0yUTH", "2n4^tg.P.&gU2*0yUTH");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      Elements elements1 = elements0.wrap("2n4^tg.P.&gU2*0yUTH");
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("5i?@7R ", "5i?@7R ");
      Elements elements0 = document0.getElementsByIndexLessThan(721);
      List<DataNode> list0 = elements0.dataNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parse("T&B``lI8y", "org.jsoup.select.Elements");
      Elements elements0 = document0.getElementsContainingText("T&B``lI8y");
      Elements elements1 = elements0.clone();
      assertNotSame(elements1, elements0);
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Document.createShell("sn4^t4.P.&gU2*0yMTH");
      Elements elements0 = document0.nextElementSiblings();
      Collector.FirstFinder collector_FirstFinder0 = new Collector.FirstFinder((Evaluator) null);
      Elements elements1 = elements0.filter(collector_FirstFinder0);
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parse("T&B``lI8y", "org.jsoup.select.Elements");
      Elements elements0 = document0.getElementsContainingText("T&B``lI8y");
      Elements elements1 = elements0.prevAll("org.jsoup.select.Elements");
      Elements elements2 = elements1.clone();
      elements2.after("org.jsoup.select.Elements");
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.next("eof");
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.prevAll();
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.nextAll("org.jsoup.select.Elements");
      assertNotSame(elements1, elements0);
  }
}
