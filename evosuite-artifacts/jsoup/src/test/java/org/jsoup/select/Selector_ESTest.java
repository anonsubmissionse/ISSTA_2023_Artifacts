/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 06 15:37:30 GMT 2022
 */

package org.jsoup.select;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.PriorityQueue;
import java.util.Vector;
import java.util.concurrent.SynchronousQueue;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.CombiningEvaluator;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.jsoup.select.Selector;
import org.jsoup.select.StructuralEvaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Selector_ESTest extends Selector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Element element0 = new Element("menu");
      Element element1 = Selector.selectFirst("menu", element0);
      assertEquals("menu", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Tag tag0 = Tag.valueOf("i");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "i", attributes0);
      Element element0 = Selector.selectFirst("i", formElement0);
      assertEquals("i", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Tag tag0 = Tag.valueOf("i");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "i", attributes0);
      Element element0 = formElement0.appendChild(formElement0);
      Element element1 = Selector.selectFirst("i", formElement0);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Evaluator.AllElements evaluator_AllElements0 = new Evaluator.AllElements();
      Document document0 = Parser.parse("#", "#");
      Elements elements0 = Selector.select((Evaluator) evaluator_AllElements0, (Element) document0);
      assertEquals(4, elements0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Parser.parse("#ISLU;jGJiLuGQ|27,I", "form");
      // Undeclared exception!
      try { 
        Selector.selectFirst("org.jsoup.nodes.Document$OutputSettings", document0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'org.jsoup.nodes.Document$OutputSettings': unexpected token at '$OutputSettings'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Parser.parse("fyDmv", "_IU:l3)*gK");
      // Undeclared exception!
      try { 
        Selector.selectFirst("", document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document("jogaE");
      Element element0 = document0.text("g}`O9 Zv1");
      Vector<Evaluator> vector0 = new Vector<Evaluator>();
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(vector0);
      StructuralEvaluator.Has structuralEvaluator_Has0 = new StructuralEvaluator.Has(combiningEvaluator_And0);
      Elements elements0 = document0.select((Evaluator) structuralEvaluator_Has0);
      document0.prependChildren(elements0);
      // Undeclared exception!
      Selector.selectFirst("jogaE", element0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("org.jsoup.select.Selector$SelectorParseException", (-131));
      Evaluator.Matches evaluator_Matches0 = new Evaluator.Matches(pattern0);
      // Undeclared exception!
      try { 
        Selector.select((Evaluator) evaluator_Matches0, (Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Tag tag0 = Tag.valueOf("i");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "i", attributes0);
      Element element0 = formElement0.appendChild(formElement0);
      Evaluator.Class evaluator_Class0 = new Evaluator.Class("i");
      // Undeclared exception!
      Selector.select((Evaluator) evaluator_Class0, element0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Evaluator.Matches evaluator_Matches0 = new Evaluator.Matches((Pattern) null);
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        Selector.select((Evaluator) evaluator_Matches0, (Element) document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document("");
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      // Undeclared exception!
      try { 
        Selector.select((Evaluator) evaluator_IsRoot0, (Element) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0
         //
         verifyException("java.util.Collections$EmptyList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document("noembed");
      // Undeclared exception!
      try { 
        Selector.select("CLmH~w$9l &?dYwq/@", (Element) document0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'w$9l': unexpected token at '$9l'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        Selector.select("", (Element) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Tag tag0 = Tag.valueOf("i");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "i", attributes0);
      formElement0.appendChild(formElement0);
      // Undeclared exception!
      Selector.select("i", (Element) formElement0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SynchronousQueue<Element> synchronousQueue0 = new SynchronousQueue<Element>();
      // Undeclared exception!
      try { 
        Selector.select("", (Iterable<Element>) synchronousQueue0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PriorityQueue<Element> priorityQueue0 = new PriorityQueue<Element>();
      Tag tag0 = Tag.valueOf("i");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "i", attributes0);
      formElement0.appendChild(formElement0);
      priorityQueue0.add(formElement0);
      // Undeclared exception!
      Selector.select("i", (Iterable<Element>) priorityQueue0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        Selector.filterOut((Collection<Element>) null, (Collection<Element>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Selector", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Selector.SelectorParseException selector_SelectorParseException0 = new Selector.SelectorParseException("fyDmv", objectArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Tag tag0 = Tag.valueOf("i");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "i", attributes0);
      Evaluator.Class evaluator_Class0 = new Evaluator.Class("i");
      Elements elements0 = Selector.select((Evaluator) evaluator_Class0, (Element) formElement0);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PriorityQueue<Element> priorityQueue0 = new PriorityQueue<Element>();
      Tag tag0 = Tag.valueOf("i");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "i", attributes0);
      FormElement formElement1 = formElement0.clone();
      priorityQueue0.add(formElement1);
      Elements elements0 = Selector.select("i", (Element) formElement0);
      Elements elements1 = Selector.select("i", (Iterable<Element>) priorityQueue0);
      Elements elements2 = Selector.filterOut(elements1, elements0);
      assertFalse(elements2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PriorityQueue<Element> priorityQueue0 = new PriorityQueue<Element>();
      Tag tag0 = Tag.valueOf("i");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "i", attributes0);
      FormElement formElement1 = formElement0.clone();
      formElement1.appendChild(formElement0);
      priorityQueue0.add(formElement1);
      Elements elements0 = Selector.select("i", (Iterable<Element>) priorityQueue0);
      Elements elements1 = Selector.select("i", (Iterable<Element>) elements0);
      assertEquals(2, elements1.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PriorityQueue<Element> priorityQueue0 = new PriorityQueue<Element>();
      Elements elements0 = Selector.select("i", (Iterable<Element>) priorityQueue0);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Selector.SelectorParseException selector_SelectorParseException0 = new Selector.SelectorParseException("K)@yCbl+uE/O>%E\">");
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("total", "total");
      Elements elements0 = Selector.select("total", (Element) document0);
      // Undeclared exception!
      try { 
        Selector.select("{PjY9GaC;|[x8$4_]Df", (Iterable<Element>) elements0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '{PjY9GaC;|[x8$4_]Df': unexpected token at '{PjY9GaC;|[x8$4_]Df'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("total", "total");
      Element element0 = Selector.selectFirst("total", document0);
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Tag tag0 = Tag.valueOf("i");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "i", attributes0);
      Elements elements0 = Selector.select("i", (Element) formElement0);
      Elements elements1 = Selector.filterOut(elements0, elements0);
      assertEquals(0, elements1.size());
  }
}
