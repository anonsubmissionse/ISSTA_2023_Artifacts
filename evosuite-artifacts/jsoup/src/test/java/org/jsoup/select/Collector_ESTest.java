/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 06 15:41:01 GMT 2022
 */

package org.jsoup.select;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.PriorityQueue;
import java.util.regex.Pattern;
import org.eclipse.jetty.io.LeakTrackingByteBufferPool;
import org.eclipse.jetty.io.LogarithmicArrayByteBufferPool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.select.Collector;
import org.jsoup.select.CombiningEvaluator;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.jsoup.select.NodeFilter;
import org.jsoup.select.StructuralEvaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Collector_ESTest extends Collector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LogarithmicArrayByteBufferPool logarithmicArrayByteBufferPool0 = new LogarithmicArrayByteBufferPool();
      LeakTrackingByteBufferPool leakTrackingByteBufferPool0 = new LeakTrackingByteBufferPool(logarithmicArrayByteBufferPool0);
      Class<Evaluator> class0 = Evaluator.class;
      Collection<Evaluator> collection0 = leakTrackingByteBufferPool0.getBeans(class0);
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or(collection0);
      Document document0 = Parser.parseBodyFragment("STOPPING", "FAILED");
      Evaluator[] evaluatorArray0 = new Evaluator[4];
      evaluatorArray0[0] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[1] = (Evaluator) combiningEvaluator_Or0;
      document0.ownText();
      Evaluator.AttributeWithValue evaluator_AttributeWithValue0 = new Evaluator.AttributeWithValue("x,:k@`", "STARTING");
      evaluatorArray0[2] = (Evaluator) evaluator_AttributeWithValue0;
      evaluatorArray0[3] = (Evaluator) combiningEvaluator_Or0;
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(evaluatorArray0);
      combiningEvaluator_Or0.add(combiningEvaluator_And0);
      Document document1 = document0.normalise();
      document1.createElement("STOPPED");
      // Undeclared exception!
      try { 
        Collector.findFirst(combiningEvaluator_Or0, document0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      long long0 = 4252L;
      System.setCurrentTimeMillis(4252L);
      Evaluator.TagEndsWith evaluator_TagEndsWith0 = new Evaluator.TagEndsWith("_w6mT^.nQ'L,N");
      Document document0 = Parser.parseBodyFragment("", "");
      evaluator_TagEndsWith0.toString();
      Document document1 = document0.clone();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Element element0 = document0.prepend("");
      Document document2 = document1.normalise();
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      document2.hasSameValue(evaluator_IsRoot0);
      Element element1 = element0.prependChild(document0);
      element0.removeAttr("j");
      Collector.collect(evaluator_TagEndsWith0, document2);
      element1.childNodes();
      System.setCurrentTimeMillis(4252L);
      evaluator_TagEndsWith0.toString();
      document0.after((Node) element1);
      // Undeclared exception!
      Collector.collect(evaluator_TagEndsWith0, element0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PriorityQueue<Evaluator> priorityQueue0 = new PriorityQueue<Evaluator>();
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or(priorityQueue0);
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTrackErrors(0);
      combiningEvaluator_Or0.num = 5389;
      Document document0 = parser1.parseInput("", "GS+W");
      document0.connection();
      // Undeclared exception!
      try { 
        Collector.findFirst(combiningEvaluator_Or0, document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Evaluator.ContainsWholeText evaluator_ContainsWholeText0 = new Evaluator.ContainsWholeText((String) null);
      Comment comment0 = new Comment("/q\"adSD<");
      comment0.clone();
      StructuralEvaluator.PreviousSibling structuralEvaluator_PreviousSibling0 = new StructuralEvaluator.PreviousSibling(evaluator_ContainsWholeText0);
      Document document0 = Document.createShell(":6KU#yNdaq-");
      Element element0 = document0.body();
      Document document1 = element0.ownerDocument();
      // Undeclared exception!
      try { 
        Collector.findFirst(evaluator_ContainsWholeText0, document1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Evaluator evaluator0 = null;
      StructuralEvaluator.Parent structuralEvaluator_Parent0 = new StructuralEvaluator.Parent((Evaluator) null);
      Parser parser0 = Parser.xmlParser();
      String string0 = "";
      Document document0 = parser0.parseInput("", "");
      String string1 = "org.jsoup.select.Evaluator$IsNthLastChild";
      Element element0 = document0.text("org.jsoup.select.Evaluator$IsNthLastChild");
      String string2 = "org.jsoup.select.Collector";
      element0.getElementsContainingOwnText("org.jsoup.select.Collector");
      Pattern pattern0 = Pattern.compile("", 0);
      pattern0.splitAsStream("");
      element0.getElementsMatchingOwnText(pattern0);
      // Undeclared exception!
      try { 
        Collector.collect(structuralEvaluator_Parent0, element0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.StructuralEvaluator$Parent", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Evaluator.ContainsData evaluator_ContainsData0 = new Evaluator.ContainsData("");
      StructuralEvaluator.Parent structuralEvaluator_Parent0 = new StructuralEvaluator.Parent(evaluator_ContainsData0);
      Element element0 = null;
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("{eL&", "{eL&");
      evaluator_ContainsData0.matches((Element) null, document0);
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      parseSettings0.normalizeTag("");
      parser0.settings(parseSettings0);
      structuralEvaluator_Parent0.toString();
      // Undeclared exception!
      try { 
        Collector.collect(structuralEvaluator_Parent0, (Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("org.jsoup.select.Collector$Accumulator", (-906021636));
      Evaluator.Matches evaluator_Matches0 = new Evaluator.Matches(pattern0);
      Document document0 = Parser.parse("org.jsoup.select.Collector$Accumulator", "org.jsoup.select.Collector$Accumulator");
      Elements elements0 = Collector.collect(evaluator_Matches0, document0);
      assertEquals(3, elements0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Evaluator.ContainsOwnText evaluator_ContainsOwnText0 = new Evaluator.ContainsOwnText("@Rt{oO");
      StructuralEvaluator.ImmediateParent structuralEvaluator_ImmediateParent0 = new StructuralEvaluator.ImmediateParent(evaluator_ContainsOwnText0);
      StructuralEvaluator.Not structuralEvaluator_Not0 = new StructuralEvaluator.Not(structuralEvaluator_ImmediateParent0);
      StructuralEvaluator.Has structuralEvaluator_Has0 = new StructuralEvaluator.Has(structuralEvaluator_Not0);
      structuralEvaluator_Has0.toString();
      evaluator_ContainsOwnText0.toString();
      Collector.FirstFinder collector_FirstFinder0 = structuralEvaluator_Has0.finder;
      Comment comment0 = new Comment("@Rt{oO");
      Document document0 = Parser.parse("@Rt{oO", "@Rt{oO");
      collector_FirstFinder0.head(document0, 658);
      Element element0 = document0.body();
      Element element1 = new Element(":containsOwn(@rt{oo)");
      collector_FirstFinder0.find(element1, document0);
      collector_FirstFinder0.head(element0, 1);
      structuralEvaluator_Not0.matches(document0, document0);
      evaluator_ContainsOwnText0.toString();
      structuralEvaluator_Not0.matches(document0, element0);
      collector_FirstFinder0.tail(comment0, 1);
      collector_FirstFinder0.tail(document0, 1);
      Collector.findFirst(structuralEvaluator_ImmediateParent0, element0);
      NodeFilter.FilterResult nodeFilter_FilterResult0 = collector_FirstFinder0.head(document0, 1);
      assertEquals(NodeFilter.FilterResult.STOP, nodeFilter_FilterResult0);
      
      collector_FirstFinder0.tail(document0, 658);
      document0.prepend("");
      Collector.FirstFinder collector_FirstFinder1 = new Collector.FirstFinder(structuralEvaluator_Has0);
      Collector.findFirst(evaluator_ContainsOwnText0, element0);
      NodeFilter.FilterResult nodeFilter_FilterResult1 = collector_FirstFinder0.tail(element1, 31);
      assertNotSame(nodeFilter_FilterResult1, nodeFilter_FilterResult0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Evaluator.IsFirstOfType evaluator_IsFirstOfType0 = new Evaluator.IsFirstOfType();
      Document document0 = new Document("org.jsoup.select.Collector");
      Element element0 = document0.body();
      element0.selectFirst((Evaluator) evaluator_IsFirstOfType0);
      Element element1 = Collector.findFirst(evaluator_IsFirstOfType0, element0);
      StructuralEvaluator.Has structuralEvaluator_Has0 = new StructuralEvaluator.Has(evaluator_IsFirstOfType0);
      Collector.FirstFinder collector_FirstFinder0 = structuralEvaluator_Has0.finder;
      collector_FirstFinder0.tail(element1, 0);
      Element element2 = collector_FirstFinder0.find(element1, element0);
      assertEquals(0, element2.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedHashSet<Evaluator> linkedHashSet0 = new LinkedHashSet<Evaluator>();
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(linkedHashSet0);
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.newInstance();
      Parser parser2 = parser1.setTrackPosition(false);
      Document document0 = parser2.parseInput("  ", "  ");
      Element element0 = Collector.findFirst(combiningEvaluator_And0, document0);
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Evaluator.IndexEquals evaluator_IndexEquals0 = new Evaluator.IndexEquals(122);
      Document document0 = Parser.parseBodyFragment("Zp1ZX2", "Zp1ZX2");
      Element element0 = Collector.findFirst(evaluator_IndexEquals0, document0);
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Evaluator.Attribute evaluator_Attribute0 = new Evaluator.Attribute((String) null);
      Collector.FirstFinder collector_FirstFinder0 = new Collector.FirstFinder(evaluator_Attribute0);
      Document document0 = new Document((String) null);
      Document document1 = document0.clone();
      // Undeclared exception!
      try { 
        collector_FirstFinder0.find(document1, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Evaluator.AllElements evaluator_AllElements0 = new Evaluator.AllElements();
      StructuralEvaluator.Has structuralEvaluator_Has0 = new StructuralEvaluator.Has(evaluator_AllElements0);
      Collector.FirstFinder collector_FirstFinder0 = structuralEvaluator_Has0.finder;
      Document document0 = Document.createShell("org.jsoup.select.Collector$Accumulator");
      Document document1 = document0.shallowClone();
      Element element0 = collector_FirstFinder0.find(document1, document1);
      assertFalse(element0.hasParent());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Evaluator.Tag evaluator_Tag0 = new Evaluator.Tag("C\"(z");
      StructuralEvaluator.Has structuralEvaluator_Has0 = new StructuralEvaluator.Has(evaluator_Tag0);
      Collector.FirstFinder collector_FirstFinder0 = structuralEvaluator_Has0.finder;
      Element element0 = new Element("C\"(z");
      NodeFilter.FilterResult nodeFilter_FilterResult0 = collector_FirstFinder0.head(element0, 0);
      assertEquals(NodeFilter.FilterResult.CONTINUE, nodeFilter_FilterResult0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Evaluator.ContainsOwnText evaluator_ContainsOwnText0 = new Evaluator.ContainsOwnText("T~5d7AP< ");
      Document document0 = Parser.parseBodyFragment("T~5d7AP< ", "T~5d7AP< ");
      Collector.collect(evaluator_ContainsOwnText0, document0);
      Collector.collect(evaluator_ContainsOwnText0, document0);
      Collector.FirstFinder collector_FirstFinder0 = new Collector.FirstFinder(evaluator_ContainsOwnText0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Evaluator.IsLastChild evaluator_IsLastChild0 = new Evaluator.IsLastChild();
      Collector.FirstFinder collector_FirstFinder0 = new Collector.FirstFinder(evaluator_IsLastChild0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LogarithmicArrayByteBufferPool logarithmicArrayByteBufferPool0 = new LogarithmicArrayByteBufferPool();
      LeakTrackingByteBufferPool leakTrackingByteBufferPool0 = new LeakTrackingByteBufferPool(logarithmicArrayByteBufferPool0);
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or();
      Document document0 = Parser.parse("STOPPED", "STARTED");
      Element element0 = Collector.findFirst(combiningEvaluator_Or0, document0);
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Evaluator.IsFirstOfType evaluator_IsFirstOfType0 = new Evaluator.IsFirstOfType();
      Document document0 = Parser.parse("V0]tdEP*W4", "V0]tdEP*W4");
      Document document1 = document0.normalise();
      document1.selectFirst((Evaluator) evaluator_IsFirstOfType0);
  }
}
