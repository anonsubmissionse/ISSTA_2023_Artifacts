/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 06 15:37:53 GMT 2022
 */

package org.jsoup.examples;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.examples.HtmlToPlainText;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HtmlToPlainText_ESTest extends HtmlToPlainText_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HtmlToPlainText htmlToPlainText0 = new HtmlToPlainText();
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("KK;$5NC", "KK;$5NC");
      document0.normalise();
      htmlToPlainText0.getPlainText(document0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        HtmlToPlainText.main(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // usage: java -cp jsoup.jar org.jsoup.examples.HtmlToPlainText url [selector]
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        HtmlToPlainText.main((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.examples.HtmlToPlainText", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "^8_q)BUN\"@tWn7!4";
      // Undeclared exception!
      try { 
        HtmlToPlainText.main(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The supplied URL, '^8_q)BUN\"@tWn7!4', is malformed. Make sure it is an absolute URL, and starts with 'http://' or 'https://'. See https://jsoup.org/cookbook/extracting-data/working-with-urls
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HtmlToPlainText htmlToPlainText0 = new HtmlToPlainText();
      // Undeclared exception!
      try { 
        htmlToPlainText0.getPlainText((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HtmlToPlainText htmlToPlainText0 = new HtmlToPlainText();
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("GjZDV", "|=Fto4P>GI#@k#Y3");
      document0.appendTo(document0);
      // Undeclared exception!
      htmlToPlainText0.getPlainText(document0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HtmlToPlainText htmlToPlainText0 = new HtmlToPlainText();
      Document document0 = Parser.parseBodyFragment("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36", "");
      String string0 = htmlToPlainText0.getPlainText(document0);
      assertEquals("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like \nGecko) Chrome/79.0.3945.130 Safari/537.36", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HtmlToPlainText htmlToPlainText0 = new HtmlToPlainText();
      Document document0 = Parser.parseBodyFragment("  ", "  ");
      htmlToPlainText0.getPlainText(document0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HtmlToPlainText htmlToPlainText0 = new HtmlToPlainText();
      Tag tag0 = Tag.valueOf("h3");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "Q5lpj'z?MQ5[b9a", attributes0);
      String string0 = htmlToPlainText0.getPlainText(pseudoTextElement0);
      assertEquals("\n\n", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HtmlToPlainText htmlToPlainText0 = new HtmlToPlainText();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("dt", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("qGy :+WJKH");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      String string0 = htmlToPlainText0.getPlainText(formElement0);
      assertEquals("  \n", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HtmlToPlainText htmlToPlainText0 = new HtmlToPlainText();
      Element element0 = new Element("li");
      String string0 = htmlToPlainText0.getPlainText(element0);
      assertEquals("\n * ", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        HtmlToPlainText.main(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // usage: java -cp jsoup.jar org.jsoup.examples.HtmlToPlainText url [selector]
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        HtmlToPlainText.main(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'url' parameter must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
