/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 06 15:31:30 GMT 2022
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.nio.charset.IllegalCharsetNameException;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.Connection;
import org.jsoup.helper.HttpConnection;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Document_ESTest extends Document_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
      
      document_OutputSettings0.maxPaddingWidth((-1));
      assertEquals((-1), document_OutputSettings0.maxPaddingWidth());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(1334);
      assertEquals(1334, document_OutputSettings0.indentAmount());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("Zv", "Zv");
      document0.appendText("Zv");
      document0.normalise();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prepareEncoder();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      int int0 = document_OutputSettings0.maxPaddingWidth();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      int int0 = document_OutputSettings0.indentAmount();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, int0);
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
      assertTrue(document_OutputSettings0.prettyPrint());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.escapeMode();
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Document document0 = new Document((String) null);
      document0.charset(charset0);
      boolean boolean0 = document0.updateMetaCharsetElement();
      assertEquals(1, document0.childNodeSize());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = new Document("");
      document0.setSiblingIndex(523);
      Document document1 = (Document)document0.text("|%QK");
      assertFalse(document1.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$Hj*L\"4.Xgl", ":eq(");
      HttpConnection httpConnection0 = new HttpConnection();
      Document document1 = document0.connection((Connection) httpConnection0);
      document1.siblingIndex = (-1065);
      Document document2 = (Document)document0.text("-_1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ");
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(":eq(", document2.location());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.helper.HttpConnection$Base", "org.jsoup.helper.HttpConnection$Base");
      Element element0 = document0.tagName("body");
      Document document1 = (Document)element0.text("org.eclipse.jetty.io.ByteBufferPool$Bucket");
      assertEquals("org.jsoup.helper.HttpConnection$Base", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Document.createShell("EHMfc\"ldm?D");
      Document document1 = document0.shallowClone();
      document1.reparentChild(document0);
      assertFalse(document1.hasParent());
      
      Document document2 = (Document)document0.text("#root");
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("EHMfc\"ldm?D", document2.location());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$Hj*L\"4.Xgl", ":eq(");
      HttpConnection httpConnection0 = new HttpConnection();
      Document document1 = document0.connection((Connection) httpConnection0);
      document1.siblingIndex = (-1065);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      assertEquals(":eq(", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.helper.HttpConnection$Base", "org.jsoup.helper.HttpConnection$Base");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = (Document)document0.tagName("body");
      Document document2 = document1.quirksMode(document_QuirksMode0);
      assertEquals("org.jsoup.helper.HttpConnection$Base", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("meta", "meta");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      document0.appendChild(document0);
      document0.quirksMode(document_QuirksMode0);
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = new Document("T_!5]_q)+<[b*F>Qo");
      Charset charset0 = document0.charset();
      document0.charset(charset0);
      Parser parser0 = Parser.htmlParser();
      document0.parser(parser0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$Hj*L\"4.Xgl", ":eq(");
      HttpConnection httpConnection0 = new HttpConnection();
      Document document1 = document0.connection((Connection) httpConnection0);
      document1.siblingIndex = (-1065);
      Document document2 = document1.parser((Parser) null);
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(":eq(", document2.location());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.helper.HttpConnection$Base", "org.jsoup.helper.HttpConnection$Base");
      Document document1 = (Document)document0.tagName("body");
      Parser parser0 = Parser.htmlParser();
      Document document2 = document1.parser(parser0);
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("org.jsoup.helper.HttpConnection$Base", document2.location());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("meta", "meta");
      document0.appendChild(document0);
      Parser parser0 = Parser.xmlParser();
      document0.parser(parser0);
      assertEquals(1, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("XTf3ITB#||G$*", "XTf3ITB#||G$*");
      Document document1 = document0.shallowClone();
      Document document2 = document1.parser((Parser) null);
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("XTf3ITB#||G$*", document2.location());
      assertEquals(0, document2.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("XTf3ITB#||G$*", "XTf3ITB#||G$*");
      document0.parser((Parser) null);
      document0.parser();
      assertEquals("XTf3ITB#||G$*", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Document$OutputSettings");
      Parser parser0 = Parser.xmlParser();
      parser0.setTrackPosition(true);
      document0.parser(parser0);
      document0.parser();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Document$OutputSettings", document0.location());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.setTrackErrors(396);
      Document document0 = parser1.parseInput("1.0", "Y'");
      document0.parser();
      assertEquals("Y'", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Charset charset0 = Charset.defaultCharset();
      Document document0 = new Document((String) null);
      document0.charset(charset0);
      document0.outputSettings(document_OutputSettings0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$Class", "org.jsoup.select.Evaluator$Class");
      Document document1 = document0.normalise();
      document1.siblingIndex = 144;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document2 = document0.outputSettings(document_OutputSettings0);
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals("org.jsoup.select.Evaluator$Class", document2.location());
      assertEquals(1, document2.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$Hj*L\"4.Xgl", ":eq(");
      HttpConnection httpConnection0 = new HttpConnection();
      Document document1 = document0.connection((Connection) httpConnection0);
      document1.siblingIndex = (-1065);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document2 = document0.outputSettings(document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document2.childNodeSize());
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
      assertEquals(":eq(", document2.location());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document2.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.helper.HttpConnection$Base", "org.jsoup.helper.HttpConnection$Base");
      document0.tagName("body");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document1 = document0.outputSettings(document_OutputSettings0);
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals("org.jsoup.helper.HttpConnection$Base", document1.location());
      assertFalse(document_OutputSettings0.outline());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("Zv", "Zv");
      document0.parentNode = (Node) document0;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document1 = document0.outputSettings(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals("Zv", document1.location());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
      assertFalse(document1.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("\"[)/mg*=[=T(ZN|e", "/vm]sB^c>.}X");
      Document document1 = document0.shallowClone();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document2 = document1.outputSettings(document_OutputSettings0);
      assertEquals("/vm]sB^c>.}X", document2.location());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
      assertEquals(0, document2.childNodeSize());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$Class", "eet");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      
      document_OutputSettings0.prettyPrint(false);
      document0.outputSettings(document_OutputSettings0);
      assertFalse(document_OutputSettings0.prettyPrint());
      
      Document.OutputSettings document_OutputSettings1 = document0.outputSettings();
      assertEquals(30, document_OutputSettings1.maxPaddingWidth());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Document.createShell("<d|zoq");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      
      document_OutputSettings0.outline(true);
      Document document1 = document0.outputSettings(document_OutputSettings0);
      document1.outputSettings();
      assertTrue(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$Class", "eet");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
      
      document_OutputSettings0.maxPaddingWidth(0);
      document0.outputSettings(document_OutputSettings0);
      assertEquals(0, document_OutputSettings0.maxPaddingWidth());
      
      Document.OutputSettings document_OutputSettings1 = document0.outputSettings();
      assertEquals(0, document_OutputSettings1.maxPaddingWidth());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$Class", "org.jsoup.select.Evaluator$Class");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outputSettings(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      
      document_OutputSettings0.indentAmount(0);
      assertEquals(0, document_OutputSettings0.indentAmount());
      
      Document.OutputSettings document_OutputSettings1 = document0.outputSettings();
      assertEquals(0, document_OutputSettings1.indentAmount());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = new Document("1-.~lk(1\"v");
      document0.outerHtml();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("1-.~lk(1\"v", document0.location());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parse("tJQTyx&rb+>", "tJQTyx&rb+>");
      Element element0 = document0.doClone((Node) null);
      document0.appendTo(element0);
      Document document1 = document0.normalise();
      assertEquals(1, document1.childNodeSize());
      assertEquals("tJQTyx&rb+>", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$Class", "eet");
      document0.setSiblingIndex((-1420));
      Document document1 = document0.normalise();
      assertEquals("eet", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Document.createShell("Oh|_q4D!w Z/5J#VY}");
      String string0 = document0.location();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Oh|_q4D!w Z/5J#VY}", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("GDq3P^q?", "");
      document0.location();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("<html>\n <head></head>\n <body>\n  &lt;1iwgWWe`g&amp;\n </body>\n</html>", "<html>\n <head></head>\n <body>\n  &lt;1iwgWWe`g&amp;\n </body>\n</html>");
      Element element0 = document0.head();
      assertEquals("<html>\n <head></head>\n <body>\n  &lt;1iwgWWe`g&amp;\n </body>\n</html>", document0.location());
      assertEquals(1, element0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parse("'Fnr&(8G/:JVt \"Ad!!", "'Fnr&(8G/:JVt \"Ad!!");
      document0.title("");
      Element element0 = document0.head();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("'Fnr&(8G/:JVt \"Ad!!", document0.location());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$Class", "eet");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      DocumentType documentType0 = new DocumentType("eet", "eet", "SYSTEM");
      Charset charset0 = Charset.defaultCharset();
      document1.prependChild(documentType0);
      document0.charset(charset0);
      document1.documentType();
      assertEquals(3, document1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$Class", "eet");
      assertFalse(document0.updateMetaCharsetElement());
      
      Charset charset0 = Charset.defaultCharset();
      document0.charset(charset0);
      HttpConnection httpConnection0 = new HttpConnection();
      document0.connection((Connection) httpConnection0);
      assertTrue(document0.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$Hj*L\"4.Xgl", ":eq(");
      HttpConnection httpConnection0 = new HttpConnection();
      Document document1 = document0.connection((Connection) httpConnection0);
      document1.siblingIndex = (-1065);
      Document document2 = document1.connection((Connection) httpConnection0);
      assertEquals(":eq(", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.helper.HttpConnection$Base", "org.jsoup.helper.HttpConnection$Base");
      Document document1 = (Document)document0.tagName("body");
      HttpConnection httpConnection0 = new HttpConnection();
      Document document2 = document1.connection((Connection) httpConnection0);
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("org.jsoup.helper.HttpConnection$Base", document2.location());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("meta", "meta");
      HttpConnection httpConnection0 = new HttpConnection();
      document0.appendChild(document0);
      document0.connection((Connection) httpConnection0);
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("\"[)/mg*=[=T(ZN|e", "/vm]sB^c>.}X");
      Document document1 = document0.shallowClone();
      HttpConnection httpConnection0 = new HttpConnection();
      Document document2 = document1.connection((Connection) httpConnection0);
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("/vm]sB^c>.}X", document2.location());
      assertEquals(0, document2.childNodeSize());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("XTf3ITB#||G$*", "XTf3ITB#||G$*");
      Charset charset0 = document0.charset();
      assertFalse(document0.updateMetaCharsetElement());
      
      document0.charset(charset0);
      document0.clone();
      assertTrue(document0.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.helper.HttpConnection$Base", "org.jsoup.helper.HttpConnection$Base");
      Document document1 = (Document)document0.tagName("body");
      Document document2 = document1.clone();
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("org.jsoup.helper.HttpConnection$Base", document2.location());
      assertNotSame(document2, document0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("\"[)/mg*=[=T(ZN|e", "/vm]sB^c>.}X");
      Document document1 = document0.shallowClone();
      Document document2 = document1.clone();
      assertNotSame(document2, document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("/vm]sB^c>.}X", document2.location());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Document.createShell(")canvas");
      document0.text(")canvas");
      Element element0 = document0.body();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, element0.childNodeSize());
      assertEquals(")canvas", document0.location());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("1.0", "Y'");
      // Undeclared exception!
      try { 
        document0.title((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("1.0", "body");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.title("1.0");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("1.0", "body");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.title("1.0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = new Document(":-b.Xm2DyL");
      Document document1 = document0.shallowClone();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      List<Node> list0 = Parser.parseFragment(":-b.Xm2DyL", (Element) document0, "L06t/s;4", parseErrorList0);
      document1.childNodes = list0;
      // Undeclared exception!
      try { 
        document1.title();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = new Document("html");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.title();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = new Document("html");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("i9QVrrz{P+TOK`~wv`|", false);
      document0.parentNode = (Node) xmlDeclaration0;
      // Undeclared exception!
      try { 
        document0.title();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Document.createShell("an;->)Cw&7tldi{");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.text("");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = new Document((String) null);
      document0.appendTo(document0);
      // Undeclared exception!
      document0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("A|7Y5'", "A|7Y5'");
      // Undeclared exception!
      try { 
        document0.outputSettings((Document.OutputSettings) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("Zv", "Zv");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.normalise();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Document.createShell("_S1");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Parser parser0 = Parser.xmlParser();
      ParseErrorList parseErrorList0 = parser0.getErrors();
      List<Node> list0 = Parser.parseFragment("_S1", (Element) document1, "nj", parseErrorList0);
      document1.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.normalise();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("Zv", "Zv");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.normalise();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Document.createShell(")canvas");
      Document document1 = (Document)document0.empty();
      document0.setParentNode(document0);
      // Undeclared exception!
      document1.head();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("zv:)u%yXlM~-TOC07", "zv:)u%yXlM~-TOC07");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.head();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        Document.createShell((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("meta", "meta");
      // Undeclared exception!
      try { 
        document0.createElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("i]n", "i]n");
      Element element0 = document0.clearAttributes();
      document0.reparentChild(element0);
      // Undeclared exception!
      document0.createElement("org.jsoup.nodes.Document$QuirksMode");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = new Document("<\"_>x");
      // Undeclared exception!
      try { 
        document0.connection((Connection) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = new Document("x55{}|`rK`R-gKcq8");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = new Document("1-.~lk(1\"v");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.childNodes = null;
      // Undeclared exception!
      try { 
        document1.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$Class", "org.jsoup.select.Evaluator$Class");
      document0.appendChild(document0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      document0.charset(charset0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.charset((Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$Class", "org.jsoup.select.Evaluator$Class");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      document0.outputSettings(document_OutputSettings1);
      Charset charset0 = Charset.defaultCharset();
      document0.empty();
      // Undeclared exception!
      try { 
        document0.charset(charset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Document document0 = new Document((String) null);
      Comment comment0 = new Comment((String) null);
      document0.parentNode = (Node) comment0;
      // Undeclared exception!
      try { 
        document0.charset(charset0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Document.createShell("`~6x]QJ(6qO");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      document0.empty();
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      document0.body();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$Hj*L\"4.Xgl", ":eq(");
      HttpConnection httpConnection0 = new HttpConnection();
      Document document1 = document0.connection((Connection) httpConnection0);
      document1.childNodes = null;
      // Undeclared exception!
      try { 
        document1.body();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Document.createShell(")canvas");
      Element element0 = document0.body();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(")canvas", document0.location());
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = new Document("");
      document0.body();
      assertFalse(document0.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(30, document_OutputSettings1.maxPaddingWidth());
      assertEquals(1, document_OutputSettings1.indentAmount());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.syntax();
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document_OutputSettings0.charset("#root");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // #root
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.quirksMode();
      assertFalse(document0.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Document.createShell("d.?7zMT)>Tbz`");
      Document document1 = document0.parser((Parser) null);
      // Undeclared exception!
      try { 
        document1.text("d.?7zMT)>Tbz`");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("XTf3ITB#||G$*", "XTf3ITB#||G$*");
      assertFalse(document0.updateMetaCharsetElement());
      
      document0.updateMetaCharsetElement(true);
      assertTrue(document0.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = document_OutputSettings0.prettyPrint();
      assertTrue(boolean0);
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(30, document_OutputSettings1.maxPaddingWidth());
      assertEquals(1, document_OutputSettings1.indentAmount());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document_OutputSettings0.maxPaddingWidth((-758));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document_OutputSettings0.indentAmount((-1630));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      CharsetEncoder charsetEncoder0 = document_OutputSettings0.encoder();
      assertNotNull(charsetEncoder0);
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Evaluator$Class");
      Document document1 = document0.normalise();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document document2 = document0.outputSettings(document_OutputSettings1);
      Charset charset0 = Charset.defaultCharset();
      document1.charset(charset0);
      document2.normalise();
      assertEquals(2, document2.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$Class", "eet");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax((Document.OutputSettings.Syntax) null);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      assertFalse(document1.updateMetaCharsetElement());
      
      Charset charset0 = Charset.defaultCharset();
      document0.charset(charset0);
      assertTrue(document0.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("<1iwgWWe`g&", "<1iwgWWe`g&");
      Charset charset0 = document0.charset();
      assertFalse(document0.updateMetaCharsetElement());
      
      document0.charset(charset0);
      document0.normalise();
      assertTrue(document0.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = new Document((String) null);
      Document document1 = document0.shallowClone();
      assertNotSame(document1, document0);
      assertFalse(document1.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.helper.HttpConnection$Base", "org.jsoup.helper.HttpConnection$Base");
      document0.tagName("body");
      document0.normalise();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("1.0", "body");
      Element element0 = document0.createElement("body");
      document0.appendChild(element0);
      document0.normalise();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("<html>\n <head></head>\n <body>\n  &lt;1iwgWWe`g&amp;\n </body>\n</html>", "<html>\n <head></head>\n <body>\n  &lt;1iwgWWe`g&amp;\n </body>\n</html>");
      Document document1 = document0.normalise();
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("<html>\n <head></head>\n <body>\n  &lt;1iwgWWe`g&amp;\n </body>\n</html>", document1.location());
      assertEquals(1, document1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("1.0", "body");
      document0.title("1.0");
      document0.title("body");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("1.0", "body");
      document0.title("1.0");
      document0.title();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parse("html", "html");
      document0.title();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("html", document0.location());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Parser.parse("html", "html");
      Document document1 = document0.shallowClone();
      document1.text("PUBLIC");
      document1.head();
      assertNotSame(document1, document0);
      assertEquals(1, document1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = new Document("x55{}|`rK`R-gKcq8");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.title();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Evaluator$Class");
      Document document1 = document0.normalise();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document document2 = document0.outputSettings(document_OutputSettings1);
      Charset charset0 = Charset.defaultCharset();
      document1.charset(charset0);
      document2.documentType();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Evaluator$Class");
      DocumentType documentType0 = new DocumentType("eet", "eet", "SYSTEM");
      document0.prependChild(documentType0);
      DocumentType documentType1 = document0.documentType();
      assertEquals("org.jsoup.select.Evaluator$Class", document0.location());
      assertNotNull(documentType1);
      assertFalse(document0.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = new Document("");
      document0.documentType();
      assertFalse(document0.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Evaluator$Class");
      Connection connection0 = document0.connection();
      assertEquals("org.jsoup.select.Evaluator$Class", document0.location());
      assertNotNull(connection0);
      assertFalse(document0.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$Hj*L\"4.Xgl", ":eq(");
      HttpConnection httpConnection0 = new HttpConnection();
      Document document1 = document0.connection((Connection) httpConnection0);
      Connection connection0 = document1.connection();
      assertEquals(1, document1.childNodeSize());
      assertSame(connection0, httpConnection0);
      assertEquals(":eq(", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = new Document((String) null);
      String string0 = document0.nodeName();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = new Document((String) null);
      String string0 = document0.location();
      assertFalse(document0.updateMetaCharsetElement());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = new Document((String) null);
      boolean boolean0 = document0.updateMetaCharsetElement();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = new Document((String) null);
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$Class", "eet");
      document0.createElement("PUBLIC");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("eet", document0.location());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = document_OutputSettings0.outline();
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(boolean0);
      assertTrue(document_OutputSettings0.prettyPrint());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertEquals(30, document_OutputSettings1.maxPaddingWidth());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Document document0 = new Document((String) null);
      document0.charset(charset0);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      document0.quirksMode(document_QuirksMode0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.charset();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$Hj*L\"4.Xgl", ":eq(");
      String string0 = document0.outerHtml();
      assertEquals(":eq(", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("<html>\n <head></head>\n <body>\n  $Hj*L\"4.Xgl\n </body>\n</html>", string0);
  }
}
