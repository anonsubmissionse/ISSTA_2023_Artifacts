/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 06 15:37:00 GMT 2022
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.Range;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(0, 102, (-2763));
      Range range0 = new Range(range_Position0, range_Position0);
      range0.hashCode();
      assertEquals(102, range_Position0.lineNumber());
      assertEquals(0, range_Position0.pos());
      assertEquals((-2763), range_Position0.columnNumber());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position((-2), (-2), (-2));
      Range.Position range_Position1 = new Range.Position((-2), (-2), 267);
      boolean boolean0 = range_Position0.equals(range_Position1);
      assertEquals((-2), range_Position1.lineNumber());
      assertFalse(range_Position1.equals((Object)range_Position0));
      assertEquals(267, range_Position1.columnNumber());
      assertFalse(boolean0);
      assertEquals((-2), range_Position1.pos());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position((-2), (-1763), (-2163));
      Range.Position range_Position1 = new Range.Position((-2), (-2604), 31);
      boolean boolean0 = range_Position0.equals(range_Position1);
      assertEquals((-2604), range_Position1.lineNumber());
      assertEquals((-2), range_Position1.pos());
      assertEquals(31, range_Position1.columnNumber());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = new Range((Range.Position) null, (Range.Position) null);
      Range.Position range_Position0 = range0.start();
      assertNull(range_Position0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(0, 0, 0);
      Range range0 = new Range(range_Position0, range_Position0);
      Range.Position range_Position1 = range0.start();
      assertEquals(0, range_Position1.columnNumber());
      assertEquals(0, range_Position1.pos());
      assertEquals(0, range_Position1.lineNumber());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(229, 229, 31);
      Range range0 = new Range(range_Position0, range_Position0);
      Range.Position range_Position1 = range0.start();
      assertEquals(229, range_Position1.pos());
      assertEquals(31, range_Position1.columnNumber());
      assertEquals(229, range_Position1.lineNumber());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(0, 0, 0);
      Range range0 = new Range(range_Position0, range_Position0);
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("jsoup.sourceRange", ">m/&p");
      range0.track(document0, false);
      assertEquals(0, range_Position0.lineNumber());
      assertEquals(0, range_Position0.pos());
      assertEquals(0, range_Position0.columnNumber());
      
      Range range1 = Range.of(document0, false);
      assertTrue(range1.isTracked());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = new Range((Range.Position) null, (Range.Position) null);
      Range.Position range_Position0 = range0.end();
      assertNull(range_Position0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(0, 0, 0);
      Range range0 = new Range(range_Position0, range_Position0);
      Range.Position range_Position1 = range0.end();
      assertEquals(0, range_Position1.lineNumber());
      assertEquals(0, range_Position1.columnNumber());
      assertEquals(0, range_Position1.pos());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = Parser.parse("QJ`ywNmvQbV", ",#QT6*0.Ogf)F+}AOzY");
      Range range0 = document0.endSourceRange();
      Range.Position range_Position0 = range0.end();
      assertEquals((-1), range_Position0.pos());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(0, 0, 0);
      Range range0 = new Range(range_Position0, range_Position0);
      // Undeclared exception!
      try { 
        range0.track((Node) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode((String) null);
      Range range0 = cDataNode0.sourceRange();
      Object object0 = new Object();
      cDataNode0.value = object0;
      // Undeclared exception!
      try { 
        range0.track(cDataNode0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of((Node) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode((String) null);
      Range range0 = Range.of(cDataNode0, true);
      cDataNode0.value = (Object) range0;
      // Undeclared exception!
      try { 
        Range.of(cDataNode0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.Range cannot be cast to java.lang.String
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = new Range((Range.Position) null, (Range.Position) null);
      // Undeclared exception!
      try { 
        range0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(0, 0, 0);
      Range range0 = new Range((Range.Position) null, range_Position0);
      Range range1 = new Range(range_Position0, range_Position0);
      // Undeclared exception!
      try { 
        range0.equals(range1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position((-2), (-1763), (-2163));
      Range.Position range_Position1 = new Range.Position((-1763), (-2604), 31);
      boolean boolean0 = range_Position0.equals(range_Position1);
      assertEquals((-2604), range_Position1.lineNumber());
      assertEquals(31, range_Position1.columnNumber());
      assertEquals((-1763), range_Position1.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position((-2), (-2), (-2));
      Range.Position range_Position1 = new Range.Position((-2), (-2), (-1185));
      boolean boolean0 = range_Position0.equals(range_Position1);
      assertEquals((-2), range_Position1.pos());
      assertFalse(boolean0);
      assertEquals((-2), range_Position1.lineNumber());
      assertFalse(range_Position1.equals((Object)range_Position0));
      assertEquals((-2), range_Position0.columnNumber());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position((-2), (-1763), (-1763));
      Range.Position range_Position1 = new Range.Position((-2), (-2), (-2));
      boolean boolean0 = range_Position0.equals(range_Position1);
      assertEquals((-2), range_Position0.pos());
      assertEquals((-1763), range_Position0.lineNumber());
      assertFalse(boolean0);
      assertEquals((-1763), range_Position0.columnNumber());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position((-2), (-2), (-2));
      Range.Position range_Position1 = new Range.Position((-2), (-2), (-2));
      boolean boolean0 = range_Position0.equals(range_Position1);
      assertEquals((-2), range_Position1.lineNumber());
      assertTrue(boolean0);
      assertEquals((-2), range_Position1.columnNumber());
      assertEquals((-2), range_Position1.pos());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode((String) null);
      Range.Position range_Position0 = new Range.Position(0, 102, (-2763));
      boolean boolean0 = range_Position0.equals(cDataNode0);
      assertEquals(0, range_Position0.pos());
      assertEquals(102, range_Position0.lineNumber());
      assertFalse(boolean0);
      assertEquals((-2763), range_Position0.columnNumber());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(1, 1, 1);
      boolean boolean0 = range_Position0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(1, range_Position0.lineNumber());
      assertEquals(1, range_Position0.columnNumber());
      assertEquals(1, range_Position0.pos());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position((-4065), (-4065), (-4065));
      boolean boolean0 = range_Position0.isTracked();
      assertEquals((-4065), range_Position0.columnNumber());
      assertEquals((-4065), range_Position0.lineNumber());
      assertEquals((-4065), range_Position0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(0, 0, 0);
      Range range0 = new Range(range_Position0, range_Position0);
      Range range1 = new Range(range_Position0, range_Position0);
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
      assertEquals(0, range_Position0.pos());
      assertEquals(0, range_Position0.columnNumber());
      assertEquals(0, range_Position0.lineNumber());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position((-2932), 31, (-2932));
      Range range0 = new Range(range_Position0, range_Position0);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertEquals((-2932), range_Position0.pos());
      assertEquals((-2932), range_Position0.columnNumber());
      assertEquals(31, range_Position0.lineNumber());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(0, 0, 0);
      Range range0 = new Range(range_Position0, range_Position0);
      boolean boolean0 = range0.equals((Object) null);
      assertEquals(0, range_Position0.pos());
      assertEquals(0, range_Position0.columnNumber());
      assertFalse(boolean0);
      assertEquals(0, range_Position0.lineNumber());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("-4065,-4065:-4065");
      Range range0 = cDataNode0.sourceRange();
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode((String) null);
      Range.Position range_Position0 = new Range.Position(0, 102, (-2763));
      Range range0 = Range.of(cDataNode0, true);
      Range range1 = new Range(range_Position0, range_Position0);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertEquals(102, range_Position0.lineNumber());
      assertEquals((-2763), range_Position0.columnNumber());
      assertEquals(0, range_Position0.pos());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(0, 0, 0);
      Range range0 = new Range(range_Position0, range_Position0);
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("jsoup.sourceRange", ">m/&p");
      range0.track(document0, true);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(0, 0, 0);
      Range range0 = new Range(range_Position0, range_Position0);
      boolean boolean0 = range0.isTracked();
      assertEquals(0, range_Position0.columnNumber());
      assertTrue(boolean0);
      assertEquals(0, range_Position0.pos());
      assertEquals(0, range_Position0.lineNumber());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("-4065,-4065:-4065");
      Range range0 = cDataNode0.sourceRange();
      boolean boolean0 = range0.isTracked();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("-4065,-4065:-4065");
      Range range0 = cDataNode0.sourceRange();
      Range.Position range_Position0 = range0.start();
      boolean boolean0 = range_Position0.isTracked();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("-4065,-4065:-4065");
      Range range0 = cDataNode0.sourceRange();
      String string0 = range0.toString();
      assertEquals("-1,-1:-1--1,-1:-1", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(68, 68, 68);
      Range range0 = new Range(range_Position0, range_Position0);
      Range.Position range_Position1 = range0.end();
      assertEquals(68, range_Position1.columnNumber());
      assertEquals(68, range_Position1.lineNumber());
      assertEquals(68, range_Position1.pos());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(68, 68, 68);
      String string0 = range_Position0.toString();
      assertEquals("68,68:68", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(0, 102, (-2763));
      int int0 = range_Position0.lineNumber();
      assertEquals((-2763), range_Position0.columnNumber());
      assertEquals(0, range_Position0.pos());
      assertEquals(102, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position((-2), (-1763), (-2133));
      int int0 = range_Position0.columnNumber();
      assertEquals((-2), range_Position0.pos());
      assertEquals((-2133), int0);
      assertEquals((-1763), range_Position0.lineNumber());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(68, 68, 68);
      int int0 = range_Position0.pos();
      assertEquals(68, int0);
      assertEquals(68, range_Position0.lineNumber());
      assertEquals(68, range_Position0.columnNumber());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(1, 1, 1);
      Range range0 = new Range(range_Position0, range_Position0);
      range0.hashCode();
      assertEquals(1, range_Position0.lineNumber());
      assertEquals(1, range_Position0.columnNumber());
      assertEquals(1, range_Position0.pos());
  }
}
