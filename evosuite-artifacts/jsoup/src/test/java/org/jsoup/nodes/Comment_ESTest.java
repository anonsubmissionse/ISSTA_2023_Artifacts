/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 06 15:35:58 GMT 2022
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.PipedWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.XmlDeclaration;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Comment_ESTest extends Comment_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comment comment0 = new Comment("7Y_15bI]*Ix1f=");
      comment0.siblingIndex = 2548;
      String string0 = comment0.toString();
      assertEquals("<!--7Y_15bI]*Ix1f=-->", string0);
      
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      assertNotNull(xmlDeclaration0);
      assertEquals("#comment", comment0.nodeName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comment comment0 = new Comment(".]O>\"tDEQI!Ma9mi$z");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) ".]O>\"tDEQI!Ma9mi$z");
      comment0.outerHtmlTail(stringBuilder0, 0, (Document.OutputSettings) null);
      assertFalse(comment0.hasParent());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comment comment0 = new Comment("7Y_15bI]*Ix1f=");
      comment0.siblingIndex = 2548;
      Comment comment1 = comment0.setData("type");
      assertEquals("#comment", comment1.nodeName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comment comment0 = new Comment("7Y_15bI]*Ix1f=");
      comment0.siblingIndex = (-2328);
      Comment comment1 = comment0.setData("type");
      assertEquals("#comment", comment1.nodeName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comment comment0 = new Comment("");
      Comment comment1 = comment0.setData("");
      comment1.parentNode = (Node) comment0;
      Comment comment2 = comment1.setData("~");
      assertEquals("#comment", comment2.nodeName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comment comment0 = new Comment((String) null);
      comment0.getData();
      assertEquals("#comment", comment0.nodeName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comment comment0 = new Comment("");
      comment0.getData();
      assertEquals("#comment", comment0.nodeName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Comment comment0 = new Comment("<!--");
      comment0.reparentChild(comment0);
      // Undeclared exception!
      comment0.toString();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Comment comment0 = new Comment("-!)35kO+\"KB\"F|4/: ");
      Comment comment1 = comment0.clone();
      Object object0 = new Object();
      comment1.value = object0;
      // Undeclared exception!
      try { 
        comment1.toString();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comment comment0 = new Comment("-!)35kO+\"KB\"F|4/: ");
      Comment comment1 = (Comment)comment0.wrap("-!)35kO+\"KB\"F|4/: ");
      comment1.setSiblingIndex((-28578680));
      // Undeclared exception!
      try { 
        comment1.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Comment comment0 = new Comment("registerTree? {}");
      comment0.setData("registerTree? {}");
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.outline(true);
      // Undeclared exception!
      try { 
        comment0.outerHtmlHead(stringBuilder0, (-396), document_OutputSettings3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be >= 0
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Comment comment0 = new Comment("-->");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "<!---->-->");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        comment0.outerHtmlHead(charBuffer0, 3148996, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Comment comment0 = new Comment("|*");
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        comment0.outerHtmlHead(charBuffer0, 0, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Comment comment0 = new Comment("");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        comment0.outerHtmlHead((Appendable) null, 1, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Comment", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Comment comment0 = new Comment((String) null);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      comment0.value = (Object) document_OutputSettings0;
      // Undeclared exception!
      try { 
        comment0.outerHtmlHead(charArrayWriter0, 1, document_OutputSettings0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.Document$OutputSettings cannot be cast to java.lang.String
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Comment comment0 = new Comment("!!)35kO+\"KB\"F|4/:");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        comment0.outerHtmlHead(pipedWriter0, 785, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Comment comment0 = new Comment("C,<L2x^a+B>G_-S{}}");
      Comment comment1 = comment0.setData((String) null);
      // Undeclared exception!
      try { 
        comment1.isXmlDeclaration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Comment", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Comment comment0 = new Comment("?Hy,}I6(]w:");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      comment0.value = (Object) xmlDeclaration0;
      // Undeclared exception!
      try { 
        comment0.isXmlDeclaration();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.XmlDeclaration cannot be cast to java.lang.String
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Comment comment0 = new Comment("");
      Comment comment1 = comment0.setData("");
      comment1.parentNode = (Node) comment0;
      // Undeclared exception!
      comment0.clone();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Comment comment0 = new Comment("");
      // Undeclared exception!
      try { 
        comment0.asXmlDeclaration();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Comment comment0 = new Comment((String) null);
      // Undeclared exception!
      try { 
        comment0.asXmlDeclaration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Comment", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Comment comment0 = new Comment("`ual_+F=6fBTEN)L");
      Comment comment1 = comment0.clone();
      comment1.value = (Object) comment0;
      // Undeclared exception!
      try { 
        comment1.asXmlDeclaration();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.Comment cannot be cast to java.lang.String
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Comment comment0 = new Comment("");
      comment0.toString();
      comment0.isXmlDeclaration();
      String string0 = "";
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Comment comment0 = new Comment((String) null);
      Comment comment1 = comment0.clone();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('v');
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      charArrayWriter0.append('J');
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      comment1.outerHtmlHead(charArrayWriter1, 35, document_OutputSettings1);
      assertEquals(13, charArrayWriter1.size());
      assertEquals("#comment", comment0.nodeName());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Comment comment0 = new Comment((String) null);
      String string0 = comment0.nodeName();
      assertEquals("#comment", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Comment comment0 = new Comment("I/;7uBqEd3QbO");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      assertNull(xmlDeclaration0);
      
      comment0.getData();
      assertEquals("#comment", comment0.nodeName());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Comment comment0 = new Comment("<!--");
      comment0.asXmlDeclaration();
      assertEquals("#comment", comment0.nodeName());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Comment comment0 = new Comment("?Hy,}I6(]w:");
      comment0.isXmlDeclaration();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<!--:-->");
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Comment comment0 = new Comment((String) null);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      comment0.outerHtmlHead(charArrayWriter0, 1, document_OutputSettings0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.maxPaddingWidth(729);
      assertSame(document_OutputSettings2, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Comment comment0 = new Comment("-!)35kO+\"KB\"F|4/: ");
      Node node0 = comment0.wrap("-!)35kO+\"KB\"F|4/: ");
      Comment comment1 = comment0.clone();
      String string0 = node0.toString();
      assertEquals("\n<!---!)35kO+\"KB\"F|4/: -->", string0);
      
      Comment comment2 = comment1.clone();
      assertEquals("#comment", comment2.nodeName());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Comment comment0 = new Comment("7Y_15bI]*Ix1f=");
      comment0.siblingIndex = (-2301);
      comment0.toString();
      int int0 = (-157482134);
  }
}
