/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 06 15:32:03 GMT 2022
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.util.concurrent.Callable;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TextNode_ESTest extends TextNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "Server channel not bound");
      char[] charArray0 = new char[3];
      stringBuilder0.append(charArray0);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("$Dq68ljtvGU");
      TextNode textNode1 = textNode0.text("$Dq68ljtvGU");
      textNode1.siblingIndex = 2986;
      String string0 = textNode1.toString();
      assertEquals("$Dq68ljtvGU", string0);
      assertEquals("#text", textNode1.nodeName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("");
      // Undeclared exception!
      try { 
        cDataNode0.splitText(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("T");
      cDataNode0.siblingIndex = 3098;
      TextNode textNode0 = cDataNode0.text("org.jsoup.nodes.TextNode");
      assertSame(textNode0, cDataNode0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("f/EdL{&M_TdWba8@");
      textNode0.siblingIndex = (-1151);
      TextNode textNode1 = textNode0.text("g.");
      assertEquals("#text", textNode1.nodeName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("");
      Document document0 = Parser.parse("", "");
      textNode0.setParentNode(document0);
      TextNode textNode1 = textNode0.text("");
      assertEquals("#text", textNode1.nodeName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode((String) null);
      String string0 = cDataNode0.text();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextNode textNode0 = new TextNode("");
      textNode0.text();
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = TextNode.stripLeadingWhitespace("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = TextNode.normaliseWhitespace("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("");
      boolean boolean0 = cDataNode0.isBlank();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TextNode textNode0 = new TextNode((String) null);
      textNode0.getWholeText();
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TextNode textNode0 = new TextNode("Split offset must be not be negative");
      TextNode textNode1 = textNode0.text("");
      textNode1.getWholeText();
      assertEquals("#text", textNode1.nodeName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("-:Le0eW^:Yx#(-[{mW");
      cDataNode0.wrap("-:Le0eW^:Yx#(-[{mW");
      TextNode textNode0 = cDataNode0.clone();
      assertTrue(textNode0.hasParent());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("F");
      TextNode textNode1 = textNode0.text("F");
      textNode1.parentNode = (Node) textNode0;
      // Undeclared exception!
      textNode1.toString();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TextNode textNode0 = new TextNode((String) null);
      // Undeclared exception!
      try { 
        textNode0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Entities", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TextNode textNode0 = new TextNode("");
      StringBuffer stringBuffer0 = new StringBuffer();
      textNode0.value = (Object) stringBuffer0;
      // Undeclared exception!
      try { 
        textNode0.toString();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.StringBuffer cannot be cast to java.lang.String
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TextNode textNode0 = new TextNode("^s+");
      Document document0 = Parser.parse("^s+", "^s+");
      textNode0.setSiblingIndex((-1177));
      textNode0.setParentNode(document0);
      // Undeclared exception!
      try { 
        textNode0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("q");
      textNode0.reparentChild(textNode0);
      textNode0.sourceRange();
      // Undeclared exception!
      textNode0.text("]C@29O)jpj,FPu2$");
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("xxJP87MZ%n/M@2");
      TextNode textNode1 = textNode0.clone();
      textNode1.value = null;
      // Undeclared exception!
      try { 
        textNode1.text();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("wE^RRrM=k(");
      Document document0 = Parser.parse("wE^RRrM=k(", "OmGO ok:}ViB0P#a`J");
      textNode0.value = (Object) document0;
      // Undeclared exception!
      try { 
        textNode0.text();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.Document cannot be cast to java.lang.String
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        TextNode.stripLeadingWhitespace((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode((String) null);
      // Undeclared exception!
      try { 
        cDataNode0.splitText(32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TextNode textNode0 = new TextNode("wE 0wo^*&9oz+:[a,Ah");
      TextNode textNode1 = (TextNode)textNode0.wrap("wE 0wo^*&amp;9oz+:[a,Ah");
      TextNode textNode2 = (TextNode)textNode0.before((Node) textNode0);
      textNode2.siblingIndex = 1081;
      // Undeclared exception!
      try { 
        textNode1.splitText(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1082, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("'.y");
      TextNode textNode0 = cDataNode0.text("");
      textNode0.value = (Object) cDataNode0;
      // Undeclared exception!
      try { 
        cDataNode0.splitText(0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.CDataNode cannot be cast to java.lang.String
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        cDataNode0.outerHtmlTail(charBuffer0, 4064, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("78T{cdjuzx+Z{d~lle");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        cDataNode0.outerHtmlTail((Appendable) null, 0, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.CDataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TextNode textNode0 = new TextNode("wE 0wo^*&9oz+:[a,Ah");
      textNode0.wrap("wE 0wo^*&amp;9oz+:[a,Ah");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      StringBuilder stringBuilder0 = new StringBuilder("f\"=iF;{B1GnT");
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead(stringBuilder0, (-2109), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be >= 0
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TextNode textNode0 = new TextNode("d^)}c}Y\"x5X<[+eGb");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "d^)}c}Y\"x5X<[+eGb");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead(charBuffer0, 2890, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("60$nvs10{(?hZK");
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead(charBuffer0, 32, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("Data value must not be null");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        cDataNode0.outerHtmlHead((Appendable) null, 17, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.CDataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("");
      Document document0 = Parser.parse("", "");
      Document document1 = document0.shallowClone();
      textNode0.setParentNode(document1);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead((Appendable) null, 1, document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("");
      Document document0 = Parser.parse("", "");
      textNode0.setParentNode(document0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      textNode0.reparentChild(document0);
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead((Appendable) null, 1, document_OutputSettings0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.TextNode cannot be cast to org.jsoup.nodes.Element
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TextNode textNode0 = new TextNode("wE 0wo^*&9oz+:[a,Ah");
      TextNode textNode1 = (TextNode)textNode0.wrap("wE 0wo^*&amp;9oz+:[a,Ah");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      textNode1.setSiblingIndex((-1157));
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead(stringBuilder0, 1081, document_OutputSettings0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode(":matchText");
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        cDataNode0.outerHtmlHead(pipedWriter0, 1, (Document.OutputSettings) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        TextNode.normaliseWhitespace((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        TextNode.lastCharIsWhitespace((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("");
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1150, threadPoolExecutor_DiscardOldestPolicy0);
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ScheduledFuture<Object> scheduledFuture0 = scheduledThreadPoolExecutor0.schedule(callable0, 1L, timeUnit0);
      textNode0.value = (Object) scheduledFuture0;
      // Undeclared exception!
      try { 
        textNode0.isBlank();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask cannot be cast to java.lang.String
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        TextNode.createFromEncoded((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("ii-)w5dA2,j=<yBo,R");
      cDataNode0.setParentNode(cDataNode0);
      // Undeclared exception!
      cDataNode0.clone();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("q");
      String string0 = textNode0.nodeName();
      assertEquals("#text", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("-:Le0eW^:Yx#(-[{mW");
      boolean boolean0 = cDataNode0.isBlank();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TextNode textNode0 = new TextNode("Split offset must be not be negative");
      textNode0.getWholeText();
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("org.jsoup.nodes.TextNode");
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(32);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("org.jsoup.nodes.TextNode");
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("");
      Document document0 = Document.createShell("");
      textNode0.setParentNode(document0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      textNode0.outerHtmlHead((Appendable) null, 1, document_OutputSettings0);
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      textNode0.outerHtmlHead((Appendable) null, 1, document_OutputSettings0);
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("");
      Document document0 = Document.createShell("");
      document0.appendText("");
      textNode0.setParentNode(document0);
      textNode0.toString();
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TextNode textNode0 = new TextNode("^s+");
      Document document0 = Parser.parse("^s+", "^s+");
      document0.appendText("");
      textNode0.setParentNode(document0);
      String string0 = textNode0.toString();
      assertEquals("\n^s+", string0);
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TextNode textNode0 = new TextNode("^s+");
      Document document0 = Parser.parse("^s+", "^s+");
      Document document1 = new Document("^s+");
      Document document2 = document1.normalise();
      document2.appendChild(document0);
      textNode0.setParentNode(document2);
      String string0 = textNode0.toString();
      assertEquals("\n^s+", string0);
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("x?p=x)TK$GU3|#");
      TextNode textNode1 = (TextNode)textNode0.wrap("x?p=x)TK$GU3|#");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      TextNode textNode2 = textNode1.splitText(0);
      assertEquals(1, textNode2.siblingIndex());
      
      StringBuilder stringBuilder0 = new StringBuilder();
      textNode0.outerHtmlHead(stringBuilder0, (-1157), document_OutputSettings0);
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TextNode textNode0 = new TextNode("'.RR'])pF\"&c\"");
      StringWriter stringWriter0 = new StringWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      textNode0.outerHtmlHead(stringWriter0, 0, document_OutputSettings0);
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("");
      // Undeclared exception!
      try { 
        textNode0.splitText(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("|.5G}7:,");
      // Undeclared exception!
      try { 
        cDataNode0.splitText((-1130));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0, 1619);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      textNode0.outerHtmlTail(bufferedWriter0, (-357), document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("f/EdL{&M_TdWba8@");
      TextNode textNode1 = textNode0.splitText(0);
      assertEquals("#text", textNode1.nodeName());
      assertNotSame(textNode1, textNode0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = TextNode.stripLeadingWhitespace("7Xbu\u0002~9*");
      assertEquals("7Xbu\u0002~9*", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = TextNode.normaliseWhitespace("vxFUEg[Iux3` sE`5E");
      assertEquals("vxFUEg[Iux3` sE`5E", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("q");
      textNode0.text();
  }
}
