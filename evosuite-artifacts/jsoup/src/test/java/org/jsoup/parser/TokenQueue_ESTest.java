/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 06 15:24:30 GMT 2022
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.parser.TokenQueue;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TokenQueue_ESTest extends TokenQueue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("\"I(z");
      assertEquals("\"I(z", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.chompBalanced('!', ')');
      assertTrue(tokenQueue0.matchesWord());
      assertEquals("I(z", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("3'");
      assertEquals("3'", tokenQueue0.toString());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.consumeWord();
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("'", tokenQueue0.toString());
      assertEquals("3", string0);
      assertNotNull(string0);
      
      String string1 = tokenQueue0.chompBalanced('!', '!');
      assertFalse(string1.equals((Object)string0));
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("3s'm~");
      assertEquals("3s'm~", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertNotNull(tokenQueue0);
      
      tokenQueue0.advance();
      assertEquals("s'm~", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      
      // Undeclared exception!
      try { 
        tokenQueue0.chompBalanced('s', 'Z');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced marker at ''
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("org.jsoup.parser.TokenQueue");
      assertEquals("org.jsoup.parser.TokenQueue", tokenQueue0.toString());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      tokenQueue0.addFirst("Oes >&}");
      assertEquals("Oes >&}org.jsoup.parser.TokenQueue", tokenQueue0.toString());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      
      String string0 = tokenQueue0.chompTo("org.jsoup.parser.TokenQueue");
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertEquals("Oes >&}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("#");
      assertEquals("#", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(tokenQueue0);
      
      tokenQueue0.consume("#");
      assertEquals("", tokenQueue0.toString());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("B.9Jt(s)vJrz1j");
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("B.9Jt(s)vJrz1j", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      tokenQueue0.consume("");
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("B.9Jt(s)vJrz1j", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = TokenQueue.unescape("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("    ");
      assertEquals("    ", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.chompToIgnoreCase("    ");
      assertEquals("", tokenQueue0.toString());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = tokenQueue0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals("", tokenQueue0.toString());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.remainder();
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("               ");
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("               ", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.consumeElementSelector();
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("               ", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("                 ");
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("                 ", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.consumeCssIdentifier();
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("                 ", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("5DA=");
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("5DA=", tokenQueue0.toString());
      assertTrue(tokenQueue0.matchesWord());
      assertNotNull(tokenQueue0);
      
      char char0 = tokenQueue0.consume();
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals("DA=", tokenQueue0.toString());
      assertEquals('5', char0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("  ");
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("  ", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.chompTo("fWe8");
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals("", tokenQueue0.toString());
      assertEquals("  ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        TokenQueue.unescape((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("qpYkz?`~IHl*");
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("qpYkz?`~IHl*", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      // Undeclared exception!
      try { 
        tokenQueue0.matchesAny((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      // Undeclared exception!
      try { 
        tokenQueue0.matches((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("_");
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("_", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      // Undeclared exception!
      try { 
        tokenQueue0.matchChomp((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("E3m}OKHTuHs!yG!");
      assertEquals("E3m}OKHTuHs!yG!", tokenQueue0.toString());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      // Undeclared exception!
      try { 
        tokenQueue0.consumeToIgnoreCase("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("*|");
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("*|", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      // Undeclared exception!
      try { 
        tokenQueue0.consumeToIgnoreCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("./t-\"");
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("./t-\"", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      String[] stringArray0 = new String[9];
      // Undeclared exception!
      try { 
        tokenQueue0.consumeToAny(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("yhn[J");
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("yhn[J", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      // Undeclared exception!
      try { 
        tokenQueue0.consumeTo((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("'Q~m@r`?S");
      assertEquals("'Q~m@r`?S", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(tokenQueue0);
      
      // Undeclared exception!
      try { 
        tokenQueue0.consume((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      // Undeclared exception!
      try { 
        tokenQueue0.consume();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("*|");
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("*|", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      // Undeclared exception!
      try { 
        tokenQueue0.chompToIgnoreCase("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("org.jsoup.internal.StringUtil$1");
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals("org.jsoup.internal.StringUtil$1", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      // Undeclared exception!
      try { 
        tokenQueue0.chompToIgnoreCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TokenQueue tokenQueue0 = null;
      try {
        tokenQueue0 = new TokenQueue((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("M");
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals("M", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      tokenQueue0.addFirst("^e&o*!");
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("^e&o*!M", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      
      tokenQueue0.addFirst("M");
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals("M^e&o*!M", tokenQueue0.toString());
      
      // Undeclared exception!
      try { 
        tokenQueue0.chompBalanced('M', 'M');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced marker at '^e&o*!M'
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("                 ");
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("                 ", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.consumeToIgnoreCase("                 ");
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("                 ", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("    ");
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("    ", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      char char0 = tokenQueue0.consume();
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("   ", tokenQueue0.toString());
      assertEquals(' ', char0);
      
      String string0 = tokenQueue0.consumeTo("    ");
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertEquals("   ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("*|");
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("*|", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.consumeElementSelector();
      assertEquals("", tokenQueue0.toString());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("*|", string0);
      assertNotNull(string0);
      
      boolean boolean0 = tokenQueue0.matchesWord();
      assertEquals("", tokenQueue0.toString());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("*|");
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("*|", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      boolean boolean0 = tokenQueue0.matchesWord();
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("*|", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Queue did not match expected sequence");
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals("Queue did not match expected sequence", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      boolean boolean0 = tokenQueue0.matchesWord();
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals("Queue did not match expected sequence", tokenQueue0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      boolean boolean0 = tokenQueue0.matchesWhitespace();
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("_");
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("_", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      boolean boolean0 = tokenQueue0.matchesWhitespace();
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("_", tokenQueue0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("                 ");
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("                 ", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(tokenQueue0);
      
      boolean boolean0 = tokenQueue0.matchesWhitespace();
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("                 ", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("*|");
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("*|", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(tokenQueue0);
      
      char[] charArray0 = new char[9];
      charArray0[5] = '*';
      boolean boolean0 = tokenQueue0.matchesAny(charArray0);
      assertEquals(9, charArray0.length);
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("*|", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '*', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("                 ");
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("                 ", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      char[] charArray0 = new char[5];
      boolean boolean0 = tokenQueue0.matchesAny(charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("                 ", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("[0CkZ;I");
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("[0CkZ;I", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      // Undeclared exception!
      try { 
        tokenQueue0.matchesAny((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Queue not long enough to consume sequence");
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("Queue not long enough to consume sequence", tokenQueue0.toString());
      assertTrue(tokenQueue0.matchesWord());
      assertNotNull(tokenQueue0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Queue not long enough to consume sequence";
      boolean boolean0 = tokenQueue0.matchesAny(stringArray0);
      assertEquals(4, stringArray0.length);
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("Queue not long enough to consume sequence", tokenQueue0.toString());
      assertTrue(tokenQueue0.matchesWord());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("\"I(z");
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("\"I(z", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.chompToIgnoreCase("\"I(z");
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = tokenQueue0.isEmpty();
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertTrue(tokenQueue0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("\"I(z");
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("\"I(z", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      boolean boolean0 = tokenQueue0.isEmpty();
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("\"I(z", tokenQueue0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("\"I(z");
      assertEquals("\"I(z", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.remainder();
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals("\"I(z", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("\"GWi{%");
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("\"GWi{%", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      boolean boolean0 = tokenQueue0.matches("\"GWi{%");
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("\"GWi{%", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = TokenQueue.unescape("\\xNNp8z{xf':)U");
      assertEquals("xNNp8z{xf':)U", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("\"GWi{%");
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("\"GWi{%", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.chompBalanced('\"', 'i');
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("{%", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("GW", string0);
      assertNotNull(string0);
      
      boolean boolean0 = tokenQueue0.matches("\"GWi{%");
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("{%", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("M");
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals("M", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      tokenQueue0.addFirst("m\"2un3<'jni+y9qh g'");
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("m\"2un3<'jni+y9qh g'M", tokenQueue0.toString());
      assertTrue(tokenQueue0.matchesWord());
      
      tokenQueue0.addFirst("m\"2un3<'jni+y9qh g'");
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals("m\"2un3<'jni+y9qh g'm\"2un3<'jni+y9qh g'M", tokenQueue0.toString());
      
      tokenQueue0.addFirst("M");
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("Mm\"2un3<'jni+y9qh g'm\"2un3<'jni+y9qh g'M", tokenQueue0.toString());
      assertTrue(tokenQueue0.matchesWord());
      
      // Undeclared exception!
      try { 
        tokenQueue0.chompBalanced('M', 'M');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced marker at 'm\"2un3<'jni+y9qh g'm\"2un3<'jni+y9qh g'M'
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("M");
      assertEquals("M", tokenQueue0.toString());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      tokenQueue0.addFirst("ww%:T^C6t'5XP\"A");
      assertEquals("ww%:T^C6t'5XP\"AM", tokenQueue0.toString());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      
      tokenQueue0.addFirst("M");
      assertTrue(tokenQueue0.matchesWord());
      assertEquals("Mww%:T^C6t'5XP\"AM", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      
      // Undeclared exception!
      try { 
        tokenQueue0.chompBalanced('M', 'M');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced marker at 'ww%:T^C6t'
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("3'");
      assertEquals("3'", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.consumeWord();
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("'", tokenQueue0.toString());
      assertEquals("3", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        tokenQueue0.chompBalanced('\'', '\'');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced marker at ''
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Queue not long enough to consume sequence");
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals("Queue not long enough to consume sequence", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      String[] stringArray0 = new String[10];
      stringArray0[0] = "Queue not long enough to consume sequence";
      String string0 = tokenQueue0.consumeToAny(stringArray0);
      assertEquals(10, stringArray0.length);
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals("Queue not long enough to consume sequence", tokenQueue0.toString());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Queue not long enough to consume sequence");
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals("Queue not long enough to consume sequence", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.consumeElementSelector();
      assertFalse(tokenQueue0.isEmpty());
      assertEquals(" not long enough to consume sequence", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("Queue", string0);
      assertNotNull(string0);
      
      String string1 = tokenQueue0.consumeToIgnoreCase("Queue not long enough to consume sequence");
      assertFalse(string1.equals((Object)string0));
      assertTrue(tokenQueue0.isEmpty());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals(" not long enough to consume sequence", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Queue not long enough to consume sequence");
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("Queue not long enough to consume sequence", tokenQueue0.toString());
      assertTrue(tokenQueue0.matchesWord());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.consumeTo("");
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("Queue not long enough to consume sequence", tokenQueue0.toString());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Queue not long enough to consume sequence");
      assertEquals("Queue not long enough to consume sequence", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertNotNull(tokenQueue0);
      
      // Undeclared exception!
      try { 
        tokenQueue0.consume("      ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Queue did not match expected sequence
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("3s'm~");
      assertEquals("3s'm~", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertNotNull(tokenQueue0);
      
      tokenQueue0.advance();
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals("s'm~", tokenQueue0.toString());
      
      char char0 = tokenQueue0.consume();
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("'m~", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('s', char0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("-");
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("-", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.consumeElementSelector();
      assertTrue(tokenQueue0.isEmpty());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("-", string0);
      assertNotNull(string0);
      
      tokenQueue0.advance();
      assertTrue(tokenQueue0.isEmpty());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("m\"2UN3<'JNi+Y9QH R");
      assertEquals("m\"2UN3<'JNi+Y9QH R", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.chompToIgnoreCase("'");
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals("JNi+Y9QH R", tokenQueue0.toString());
      assertEquals("m\"2UN3<", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "'";
      stringArray0[1] = "m\"2UN3<";
      stringArray0[2] = "m\"2UN3<'JNi+Y9QH R";
      String string1 = tokenQueue0.consumeToAny(stringArray0);
      assertEquals(3, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertEquals("JNi+Y9QH R", string1);
      assertNotNull(string1);
      
      String string2 = tokenQueue0.consumeWord();
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Queue not long enough to consume sequence");
      assertEquals("Queue not long enough to consume sequence", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.consumeElementSelector();
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals(" not long enough to consume sequence", tokenQueue0.toString());
      assertEquals("Queue", string0);
      assertNotNull(string0);
      
      boolean boolean0 = tokenQueue0.consumeWhitespace();
      assertEquals("not long enough to consume sequence", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Queue not long enough to consume sequence");
      assertTrue(tokenQueue0.matchesWord());
      assertEquals("Queue not long enough to consume sequence", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      boolean boolean0 = tokenQueue0.consumeWhitespace();
      assertTrue(tokenQueue0.matchesWord());
      assertEquals("Queue not long enough to consume sequence", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Queue not long enough to consume sequence");
      assertEquals("Queue not long enough to consume sequence", tokenQueue0.toString());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.consumeToIgnoreCase("        ");
      assertTrue(tokenQueue0.isEmpty());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("Queue not long enough to consume sequence", string0);
      assertNotNull(string0);
      
      boolean boolean0 = tokenQueue0.consumeWhitespace();
      assertTrue(tokenQueue0.isEmpty());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Queue not long enough to consume sequence");
      assertEquals("Queue not long enough to consume sequence", tokenQueue0.toString());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      boolean boolean0 = tokenQueue0.matchChomp("");
      assertEquals("Queue not long enough to consume sequence", tokenQueue0.toString());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("org.jsoup.internal.StringUtil$1");
      assertTrue(tokenQueue0.matchesWord());
      assertEquals("org.jsoup.internal.StringUtil$1", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.consumeCssIdentifier();
      assertFalse(tokenQueue0.matchesWord());
      assertEquals(".jsoup.internal.StringUtil$1", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("org", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Queue not long enough to consume sequence");
      tokenQueue0.consumeToIgnoreCase("        ");
      boolean boolean0 = tokenQueue0.matchesAny((char[]) null);
      assertEquals("", tokenQueue0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("-");
      String string0 = tokenQueue0.consumeCssIdentifier();
      assertEquals("", tokenQueue0.toString());
      assertEquals("-", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("[QHb|H[&");
      tokenQueue0.consume();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "[QHb|H[&";
      stringArray0[1] = "[QHb|H[&";
      stringArray0[2] = "[QHb|H[&";
      stringArray0[3] = "[QHb|H[&";
      boolean boolean0 = tokenQueue0.matchesAny(stringArray0);
      assertEquals("QHb|H[&", tokenQueue0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("-");
      String string0 = tokenQueue0.consumeElementSelector();
      assertEquals("-", string0);
      
      tokenQueue0.chompTo("-");
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("-");
      String string0 = tokenQueue0.toString();
      assertEquals("-", string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("E3m}OKHTuHs!yG!");
      boolean boolean0 = tokenQueue0.matchChomp("$z8");
      assertFalse(boolean0);
      assertEquals("E3m}OKHTuHs!yG!", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      // Undeclared exception!
      try { 
        tokenQueue0.chompTo((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
