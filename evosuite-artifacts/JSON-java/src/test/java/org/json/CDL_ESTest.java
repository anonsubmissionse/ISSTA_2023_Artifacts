/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 06 14:31:30 GMT 2022
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.StringReader;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Locale;
import java.util.Map;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.json.CDL;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CDL_ESTest extends CDL_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("java.lang.String@0000000002\njava.lang.String@0000000013\n");
      assertFalse(jSONTokener0.end());
      assertNotNull(jSONTokener0);
      
      JSONArray jSONArray0 = CDL.toJSONArray(jSONTokener0);
      assertTrue(jSONTokener0.end());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertNotNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?^P4Wr9L+");
      assertNotNull(stringReader0);
      
      JSONTokener jSONTokener0 = new JSONTokener(stringReader0);
      assertFalse(jSONTokener0.end());
      assertNotNull(jSONTokener0);
      
      JSONArray jSONArray0 = CDL.rowToJSONArray(jSONTokener0);
      assertTrue(jSONTokener0.end());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = CDL.toJSONArray(jSONArray0, "?^P4Wr9L+");
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
      assertTrue(jSONTokener0.end());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONArray jSONArray0 = CDL.toJSONArray("java.lang.String@0000000020\njava.lang.String@0000000011\n");
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertNotNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      arrayDeque0.push("sE\"<y");
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(arrayDeque0.contains("sE\"<y"));
      
      boolean boolean0 = arrayDeque0.add("sE\"<y");
      assertTrue(boolean0);
      assertEquals(2, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(arrayDeque0.contains("sE\"<y"));
      
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) arrayDeque0);
      assertEquals(2, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertTrue(arrayDeque0.contains("sE\"<y"));
      assertNotNull(jSONArray0);
      
      StringReader stringReader0 = new StringReader("?`UmzKh}Me%Q:");
      assertNotNull(stringReader0);
      
      JSONTokener jSONTokener0 = new JSONTokener(stringReader0);
      assertFalse(jSONTokener0.end());
      assertNotNull(jSONTokener0);
      
      JSONObject jSONObject0 = CDL.rowToJSONObject(jSONArray0, jSONTokener0);
      assertEquals(2, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertTrue(jSONTokener0.end());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertTrue(arrayDeque0.contains("sE\"<y"));
      assertFalse(arrayDeque0.contains("?`UmzKh}Me%Q:"));
      assertNotNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("`0O!w_zBb");
      assertFalse(jSONTokener0.end());
      assertNotNull(jSONTokener0);
      
      JSONArray jSONArray0 = CDL.rowToJSONArray(jSONTokener0);
      assertTrue(jSONTokener0.end());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      HashMap<Locale.Category, Locale.Category> hashMap0 = new HashMap<Locale.Category, Locale.Category>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONArray jSONArray1 = jSONArray0.put((Map<?, ?>) hashMap0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertTrue(jSONTokener0.end());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      try { 
        CDL.toString(jSONArray0, jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1] is not a String (class org.json.JSONObject).
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("`0O!w_zBb");
      assertFalse(jSONTokener0.end());
      assertNotNull(jSONTokener0);
      
      JSONArray jSONArray0 = CDL.rowToJSONArray(jSONTokener0);
      assertTrue(jSONTokener0.end());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      // Undeclared exception!
      try { 
        CDL.toString(jSONArray0, (JSONArray) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.CDL", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        CDL.toString((JSONArray) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.CDL", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("'.");
      assertFalse(jSONTokener0.end());
      assertNotNull(jSONTokener0);
      
      try { 
        CDL.toJSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing close quote '''. at 2 [character 3 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        CDL.toJSONArray((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.CDL", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1228), (byte)84);
      assertEquals(84, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      JSONTokener jSONTokener0 = new JSONTokener(byteArrayInputStream0);
      assertEquals(84, byteArrayInputStream0.available());
      assertFalse(jSONTokener0.end());
      assertNotNull(jSONTokener0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      // Undeclared exception!
      try { 
        CDL.toJSONArray(jSONTokener0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      arrayDeque0.push("<y8)y");
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertFalse(stack0.contains("<y8)y"));
      assertTrue(arrayDeque0.contains("<y8)y"));
      
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) arrayDeque0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertFalse(stack0.contains("<y8)y"));
      assertTrue(arrayDeque0.contains("<y8)y"));
      assertNotNull(jSONArray0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(1685);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JSONTokener jSONTokener0 = new JSONTokener(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONTokener0.end());
      assertNotNull(jSONTokener0);
      
      try { 
        CDL.toJSONArray(jSONArray0, jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put((-1201.610880411483));
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      // Undeclared exception!
      try { 
        CDL.toJSONArray(jSONArray1, (JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.CDL", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      try { 
        CDL.toJSONArray(jSONArray0, " kM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a String (class java.lang.Integer : 0).
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        CDL.toJSONArray((JSONArray) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        CDL.toJSONArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        CDL.rowToString((JSONArray) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.CDL", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      JSONTokener jSONTokener0 = new JSONTokener("?&s&#:TkzMf{");
      assertFalse(jSONTokener0.end());
      assertNotNull(jSONTokener0);
      
      JSONArray jSONArray1 = jSONArray0.put(0, (Object) null);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      try { 
        CDL.rowToJSONObject(jSONArray0, jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        CDL.rowToJSONObject((JSONArray) null, (JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.CDL", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        CDL.rowToJSONArray((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.CDL", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-867), (byte)44);
      assertEquals(44, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      JSONTokener jSONTokener0 = new JSONTokener(byteArrayInputStream0);
      assertEquals(44, byteArrayInputStream0.available());
      assertFalse(jSONTokener0.end());
      assertNotNull(jSONTokener0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      // Undeclared exception!
      try { 
        CDL.rowToJSONArray(jSONTokener0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      arrayDeque0.push("sE\"<y");
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertTrue(arrayDeque0.contains("sE\"<y"));
      
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) arrayDeque0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertTrue(arrayDeque0.contains("sE\"<y"));
      assertNotNull(jSONArray0);
      
      String string0 = CDL.toString(jSONArray0, jSONArray0);
      assertEquals("", string0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertFalse(arrayDeque0.contains(string0));
      assertTrue(arrayDeque0.contains("sE\"<y"));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("~0");
      assertFalse(jSONTokener0.end());
      assertNotNull(jSONTokener0);
      
      JSONArray jSONArray0 = CDL.rowToJSONArray(jSONTokener0);
      assertTrue(jSONTokener0.end());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = CDL.toJSONArray(jSONArray0, jSONTokener0);
      assertTrue(jSONTokener0.end());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashSet<Locale.Category> hashSet0 = new HashSet<Locale.Category>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = CDL.toJSONArray(jSONArray0, (JSONTokener) null);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONArray jSONArray0 = CDL.toJSONArray((JSONArray) null, (JSONTokener) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(0, (Object) null);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      String string0 = CDL.rowToString(jSONArray1);
      assertEquals("\n", string0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(1955, (-362.26F));
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1956, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1956, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      String string0 = CDL.rowToString(jSONArray0);
      assertSame(jSONArray0, jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1956, jSONArray0.length());
      assertNotNull(string0);
      
      JSONTokener jSONTokener0 = new JSONTokener(string0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1956, jSONArray0.length());
      assertFalse(jSONTokener0.end());
      assertNotNull(jSONTokener0);
      
      // Undeclared exception!
      CDL.toJSONArray(jSONTokener0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONTokener jSONTokener0 = new JSONTokener("");
      assertFalse(jSONTokener0.end());
      assertNotNull(jSONTokener0);
      
      JSONObject jSONObject0 = CDL.rowToJSONObject(jSONArray0, jSONTokener0);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertTrue(jSONTokener0.end());
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("java.lang.String@0000000002,java.lang.String@0000000003,java.lang.String@0000000002\n");
      assertFalse(jSONTokener0.end());
      assertNotNull(jSONTokener0);
      
      JSONArray jSONArray0 = CDL.rowToJSONArray(jSONTokener0);
      assertFalse(jSONTokener0.end());
      assertEquals(3, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-84);
      byteArray0[2] = (byte)71;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-84), (byte)0, (byte)71, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, (byte)98);
      assertEquals(9, byteArrayInputStream0.available());
      assertNotNull(pushbackInputStream0);
      assertArrayEquals(new byte[] {(byte) (-84), (byte)0, (byte)71, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      assertEquals(9, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte) (-84), (byte)0, (byte)71, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0);
      assertEquals(9, byteArrayInputStream0.available());
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte) (-84), (byte)0, (byte)71, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      JSONTokener jSONTokener0 = new JSONTokener(bufferedInputStream0);
      assertEquals(9, byteArrayInputStream0.available());
      assertFalse(jSONTokener0.end());
      assertNotNull(jSONTokener0);
      assertArrayEquals(new byte[] {(byte) (-84), (byte)0, (byte)71, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      try { 
        CDL.rowToJSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Bad character 'G' (71). at 2 [character 3 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("\n");
      assertFalse(jSONTokener0.end());
      assertNotNull(jSONTokener0);
      
      JSONArray jSONArray0 = CDL.rowToJSONArray(jSONTokener0);
      assertFalse(jSONTokener0.end());
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("~0");
      assertFalse(jSONTokener0.end());
      assertNotNull(jSONTokener0);
      
      JSONArray jSONArray0 = CDL.rowToJSONArray(jSONTokener0);
      assertTrue(jSONTokener0.end());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = CDL.rowToJSONArray(jSONTokener0);
      assertTrue(jSONTokener0.end());
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      arrayDeque0.push("sE\"<y");
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(arrayDeque0.contains("sE\"<y"));
      
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) arrayDeque0);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertTrue(arrayDeque0.contains("sE\"<y"));
      assertNotNull(jSONArray0);
      
      StringReader stringReader0 = new StringReader("Unable to write JSONObject value for key: ");
      assertNotNull(stringReader0);
      
      JSONTokener jSONTokener0 = new JSONTokener(stringReader0);
      assertFalse(jSONTokener0.end());
      assertNotNull(jSONTokener0);
      
      JSONArray jSONArray1 = CDL.toJSONArray(jSONArray0, jSONTokener0);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertTrue(jSONTokener0.end());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertTrue(arrayDeque0.contains("sE\"<y"));
      assertFalse(arrayDeque0.contains("Unable to write JSONObject value for key: "));
      assertNotNull(jSONArray1);
      
      JSONArray jSONArray2 = jSONArray1.put(2145.4F);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertTrue(jSONTokener0.end());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(2, jSONArray1.length());
      assertEquals(2, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertTrue(arrayDeque0.contains("sE\"<y"));
      assertFalse(arrayDeque0.contains("Unable to write JSONObject value for key: "));
      assertNotNull(jSONArray2);
      
      String string0 = CDL.toString(jSONArray1);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray1, jSONArray0);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertTrue(jSONTokener0.end());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(2, jSONArray1.length());
      assertTrue(arrayDeque0.contains("sE\"<y"));
      assertFalse(arrayDeque0.contains("Unable to write JSONObject value for key: "));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      String string0 = CDL.toString(jSONArray0, jSONArray0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = CDL.toString((JSONArray) null, (JSONArray) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      arrayDeque0.push("sE\"<y");
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(arrayDeque0.contains("sE\"<y"));
      
      boolean boolean0 = arrayDeque0.add("sE\"<y");
      assertTrue(boolean0);
      assertEquals(2, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(arrayDeque0.contains("sE\"<y"));
      
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) arrayDeque0);
      assertEquals(2, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertTrue(arrayDeque0.contains("sE\"<y"));
      assertNotNull(jSONArray0);
      
      StringReader stringReader0 = new StringReader("sE\"<y");
      assertNotNull(stringReader0);
      
      JSONTokener jSONTokener0 = new JSONTokener(stringReader0);
      assertFalse(jSONTokener0.end());
      assertNotNull(jSONTokener0);
      
      JSONArray jSONArray1 = CDL.toJSONArray(jSONArray0, jSONTokener0);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
      assertEquals(2, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertTrue(jSONTokener0.end());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertTrue(arrayDeque0.contains("sE\"<y"));
      assertNotNull(jSONArray1);
      
      String string0 = CDL.toString(jSONArray1);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
      assertEquals(2, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertTrue(jSONTokener0.end());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertTrue(arrayDeque0.contains("sE\"<y"));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      String string0 = CDL.toString(jSONArray0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      arrayDeque0.push("sE\"<y");
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertTrue(arrayDeque0.contains("sE\"<y"));
      
      boolean boolean0 = arrayDeque0.add("Unable to write JSONObject value for key: ");
      assertTrue(boolean0);
      assertEquals(2, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(arrayDeque0.contains("sE\"<y"));
      
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) arrayDeque0);
      assertEquals(2, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertTrue(arrayDeque0.contains("sE\"<y"));
      assertNotNull(jSONArray0);
      
      StringReader stringReader0 = new StringReader("Unable to write JSONObject value for key: ");
      assertNotNull(stringReader0);
      
      JSONTokener jSONTokener0 = new JSONTokener(stringReader0);
      assertFalse(jSONTokener0.end());
      assertNotNull(jSONTokener0);
      
      JSONArray jSONArray1 = CDL.toJSONArray(jSONArray0, jSONTokener0);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
      assertEquals(2, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertTrue(jSONTokener0.end());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertTrue(arrayDeque0.contains("sE\"<y"));
      assertNotNull(jSONArray1);
      
      String string0 = CDL.toString(jSONArray0, jSONArray1);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
      assertEquals(2, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertTrue(jSONTokener0.end());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(arrayDeque0.contains(string0));
      assertTrue(arrayDeque0.contains("sE\"<y"));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("~0");
      assertFalse(jSONTokener0.end());
      assertNotNull(jSONTokener0);
      
      JSONArray jSONArray0 = CDL.rowToJSONArray(jSONTokener0);
      assertTrue(jSONTokener0.end());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-89);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      JSONTokener jSONTokener1 = new JSONTokener(byteArrayInputStream0);
      assertFalse(jSONTokener1.equals((Object)jSONTokener0));
      assertEquals(4, byteArrayInputStream0.available());
      assertFalse(jSONTokener1.end());
      assertNotNull(jSONTokener1);
      assertArrayEquals(new byte[] {(byte) (-89), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      JSONObject jSONObject0 = CDL.rowToJSONObject(jSONArray0, jSONTokener1);
      assertFalse(jSONTokener0.equals((Object)jSONTokener1));
      assertFalse(jSONTokener1.equals((Object)jSONTokener0));
      assertNotSame(jSONTokener0, jSONTokener1);
      assertNotSame(jSONTokener1, jSONTokener0);
      assertTrue(jSONTokener0.end());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(jSONTokener1.end());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)85;
      byteArray0[4] = (byte)13;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)44, (byte) (-44), (byte)85, (byte)0, (byte)13, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      JSONTokener jSONTokener0 = new JSONTokener(byteArrayInputStream0);
      assertEquals(9, byteArrayInputStream0.available());
      assertFalse(jSONTokener0.end());
      assertNotNull(jSONTokener0);
      assertArrayEquals(new byte[] {(byte)44, (byte) (-44), (byte)85, (byte)0, (byte)13, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      JSONArray jSONArray0 = CDL.rowToJSONArray(jSONTokener0);
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(jSONTokener0.end());
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      assertArrayEquals(new byte[] {(byte)44, (byte) (-44), (byte)85, (byte)0, (byte)13, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSONArray jSONArray0 = CDL.toJSONArray("java.lang.String@0000000002\n");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("\n");
      assertFalse(jSONTokener0.end());
      assertNotNull(jSONTokener0);
      
      JSONArray jSONArray0 = CDL.toJSONArray(jSONTokener0);
      assertFalse(jSONTokener0.end());
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      try { 
        CDL.toJSONArray("' and insn^ad s'aw '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Bad character 'a' (97). at 17 [character 18 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("' and instead saw '");
      assertFalse(jSONTokener0.end());
      assertNotNull(jSONTokener0);
      
      JSONArray jSONArray0 = CDL.toJSONArray(jSONTokener0);
      assertTrue(jSONTokener0.end());
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      try { 
        CDL.toJSONArray("\"3Mwzuy0YyrO~<` K~A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing close quote '\"'. at 19 [character 20 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CDL cDL0 = new CDL();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = CDL.toJSONArray(jSONArray0, "o");
      assertNull(jSONArray1);
  }
}
