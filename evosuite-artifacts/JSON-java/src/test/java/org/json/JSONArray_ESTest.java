/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 06 14:32:04 GMT 2022
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.nio.CharBuffer;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.SortedSet;
import java.util.Spliterator;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;
import org.mockito.Answers;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      HashMap<BatchUpdateException, SQLTimeoutException> hashMap0 = new HashMap<BatchUpdateException, SQLTimeoutException>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      int int0 = 538;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      
      BigDecimal bigDecimal2 = bigDecimal0.multiply(bigDecimal1);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)100, bigDecimal2.byteValue());
      assertEquals((short)100, bigDecimal2.shortValue());
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotNull(bigDecimal2);
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      
      int int1 = 1264;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      assertEquals(0, linkedList0.size());
      assertNotNull(jSONPointer0);
      
      int int2 = (-1378);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("[98U))bG0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or ']' at 9 [character 10 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(1395.0F);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = jSONArray0.similar(jSONArray1);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      JSONArray jSONArray2 = jSONArray1.put(8, (-26L));
      assertEquals(9, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(9, jSONArray1.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(9, jSONArray2.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertNotNull(jSONArray2);
      
      JSONArray jSONArray3 = jSONArray0.putAll((Object) jSONArray1);
      assertEquals(18, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(18, jSONArray1.length());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(18, jSONArray3.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray0);
      assertNotNull(jSONArray3);
      
      float float0 = jSONArray3.optFloat(8);
      assertEquals(18, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(18, jSONArray1.length());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(18, jSONArray3.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray0);
      assertEquals((-26.0F), float0, 0.01F);
      
      SQLWarning sQLWarning0 = new SQLWarning((Throwable) null);
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getMessage());
      assertNotNull(sQLWarning0);
      
      long long0 = jSONArray0.optLong(1415);
      assertEquals(18, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertEquals(0L, long0);
      
      JSONArray jSONArray4 = jSONArray0.putAll((Object) sQLWarning0);
      assertEquals(19, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getMessage());
      assertEquals(19, jSONArray4.length());
      assertFalse(jSONArray4.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray4, jSONArray3);
      assertSame(jSONArray4, jSONArray2);
      assertSame(jSONArray4, jSONArray0);
      assertSame(jSONArray4, jSONArray1);
      assertNotNull(jSONArray4);
      
      int int0 = 11;
      try { 
        jSONArray0.getDouble(11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[11] is not a double (class org.json.JSONObject$Null : null).
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      JSONArray jSONArray1 = jSONArray0.put(1774, (Collection<?>) arrayList0);
      assertEquals(1775, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1775, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      long long0 = jSONArray0.optLong(574);
      assertEquals(1775, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertEquals(0L, long0);
      
      Number number0 = jSONArray1.optNumber(815);
      assertEquals(1775, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1775, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNull(number0);
      
      JSONArray jSONArray2 = jSONArray1.put(2438, (Collection<?>) arrayList0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2439, jSONArray0.length());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(2439, jSONArray1.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(2439, jSONArray2.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertNotNull(jSONArray2);
      
      JSONArray jSONArray3 = jSONArray0.put(true);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2440, jSONArray0.length());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(2440, jSONArray3.length());
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray1);
      assertNotNull(jSONArray3);
      
      int int0 = jSONArray0.length();
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2440, jSONArray0.length());
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertEquals(2440, int0);
      
      MockFile mockFile0 = new MockFile("|", "|");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) jSONObject0;
      objectArray0[2] = (Object) jSONArray2;
      objectArray0[3] = (Object) mockFile0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) mockFile0;
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) arrayList0;
      PrintWriter printWriter0 = mockPrintWriter0.format("|", objectArray0);
      assertEquals("/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/JSON-java/|/|", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals("|", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/JSON-java/|", mockFile0.getParent());
      assertSame(printWriter0, mockPrintWriter0);
      assertSame(mockPrintWriter0, printWriter0);
      assertEquals(9, objectArray0.length);
      assertNotNull(printWriter0);
      
      Writer writer0 = jSONArray2.write((Writer) printWriter0, 2191, (-2290));
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2440, jSONArray0.length());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(2440, jSONArray1.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(2440, jSONArray2.length());
      assertEquals("/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/JSON-java/|/|", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals("|", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/JSON-java/|", mockFile0.getParent());
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertSame(printWriter0, mockPrintWriter0);
      assertSame(printWriter0, writer0);
      assertSame(writer0, mockPrintWriter0);
      assertSame(writer0, printWriter0);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertSame(mockPrintWriter0, writer0);
      assertSame(mockPrintWriter0, printWriter0);
      assertEquals(9, objectArray0.length);
      assertNotNull(writer0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      int int0 = 909;
      JSONArray jSONArray1 = jSONArray0.put(909);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      JSONArray jSONArray2 = jSONArray0.putAll(jSONArray1);
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(2, jSONArray1.length());
      assertEquals(2, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertNotNull(jSONArray2);
      
      Class<Answers> class0 = Answers.class;
      Answers answers0 = Answers.RETURNS_MOCKS;
      Answers answers1 = jSONArray2.optEnum(class0, 909, answers0);
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(2, jSONArray1.length());
      assertEquals(2, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(answers0, answers1);
      assertSame(answers1, answers0);
      assertEquals(Answers.RETURNS_MOCKS, answers1);
      
      JSONArray jSONArray3 = jSONArray1.put(909, (Object) answers0);
      assertEquals(910, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(910, jSONArray1.length());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(910, jSONArray3.length());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(answers0, answers1);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray0);
      assertNotNull(jSONArray3);
      
      float float0 = jSONArray2.optFloat((-3348), (float) (-3348));
      assertEquals(910, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(910, jSONArray1.length());
      assertEquals(910, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertEquals((-3348.0F), float0, 0.01F);
      
      Spliterator<Object> spliterator0 = jSONArray2.spliterator();
      assertEquals(910, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(910, jSONArray1.length());
      assertEquals(910, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertNotNull(spliterator0);
      
      Class<Answers> class1 = Answers.class;
      String string0 = jSONArray0.optString(909);
      assertEquals(910, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertNotNull(string0);
      
      try { 
        jSONArray3.getBigInteger((-3348));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-3348] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      int int0 = 0;
      float float0 = jSONArray0.optFloat(44);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertEquals(Float.NaN, float0, 0.01F);
      
      JSONArray jSONArray1 = jSONArray0.put(0, 1L);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      JSONArray jSONArray2 = jSONArray1.put(920, (Object) jSONArray0);
      assertEquals(921, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(921, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(921, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertNotNull(jSONArray2);
      
      int int1 = 0;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNotNull(sQLClientInfoException0);
      
      long long0 = jSONArray0.optLong(0);
      assertEquals(921, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertEquals(1L, long0);
      
      Throwable[] throwableArray0 = sQLClientInfoException0.getSuppressed();
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals(0, throwableArray0.length);
      assertNotNull(throwableArray0);
      
      sQLClientInfoException0.setNextException((SQLException) null);
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      
      DataTruncation dataTruncation0 = new DataTruncation(0, false, true, 0, 0, sQLClientInfoException0);
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertNotNull(dataTruncation0);
      
      JSONArray jSONArray3 = jSONArray0.putAll((Object) dataTruncation0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(923, jSONArray0.length());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(923, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray0);
      assertNotNull(jSONArray3);
      
      JSONArray jSONArray4 = jSONArray1.put(0.0F);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(924, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(924, jSONArray1.length());
      assertFalse(jSONArray4.isEmpty());
      assertEquals(924, jSONArray4.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray4);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray4, jSONArray1);
      assertSame(jSONArray4, jSONArray2);
      assertSame(jSONArray4, jSONArray3);
      assertSame(jSONArray4, jSONArray0);
      assertNotNull(jSONArray4);
      
      // Undeclared exception!
      jSONArray0.toList();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      LinkedHashSet<Double> linkedHashSet0 = new LinkedHashSet<Double>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = linkedHashSet0.add((Double) null);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean0);
      
      Double double0 = new Double(Double.NaN);
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      boolean boolean1 = linkedHashSet0.add(double0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(linkedHashSet0.contains(Double.NaN));
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      // Undeclared exception!
      try { 
        jSONArray0.putAll((Collection<?>) linkedHashSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ArrayDeque<SQLDataException> arrayDeque0 = new ArrayDeque<SQLDataException>(1162);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      BigInteger bigInteger0 = jSONArray0.optBigInteger((-3204), (BigInteger) null);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertTrue(jSONArray1.isEmpty());
      assertEquals(0, jSONArray1.length());
      assertNotNull(jSONArray1);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      
      float float0 = jSONArray0.optFloat(44);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotSame(jSONArray0, jSONArray1);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertEquals(Float.NaN, float0, 0.01F);
      
      JSONArray jSONArray2 = jSONArray1.put(0, 1L);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertEquals(1, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertNotNull(jSONArray2);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      
      int int0 = 0;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNotNull(sQLClientInfoException0);
      
      long long0 = jSONArray0.optLong(0);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray0, jSONArray1);
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertEquals(0L, long0);
      
      Throwable[] throwableArray0 = sQLClientInfoException0.getSuppressed();
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals(0, throwableArray0.length);
      assertNotNull(throwableArray0);
      
      sQLClientInfoException0.setNextException((SQLException) null);
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      
      DataTruncation dataTruncation0 = new DataTruncation(0, false, true, 0, 0, sQLClientInfoException0);
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertNotNull(dataTruncation0);
      
      JSONArray jSONArray3 = jSONArray0.putAll((Object) dataTruncation0);
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(2, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray3, jSONArray2);
      assertNotSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray0);
      assertNotNull(jSONArray3);
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray3.equals((Object)jSONArray2));
      assertFalse(jSONArray3.equals((Object)jSONArray1));
      
      JSONArray jSONArray4 = jSONArray2.put(0.0F);
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(2, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(2, jSONArray4.length());
      assertFalse(jSONArray4.isEmpty());
      assertNotSame(jSONArray0, jSONArray4);
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray4);
      assertSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray2, jSONArray3);
      assertNotSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray4);
      assertSame(jSONArray4, jSONArray1);
      assertNotSame(jSONArray4, jSONArray3);
      assertNotSame(jSONArray4, jSONArray0);
      assertSame(jSONArray4, jSONArray2);
      assertNotNull(jSONArray4);
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray1.equals((Object)jSONArray3));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray3));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertFalse(jSONArray4.equals((Object)jSONArray3));
      assertFalse(jSONArray4.equals((Object)jSONArray0));
      
      // Undeclared exception!
      try { 
        jSONArray4.query("/q@]~8&-}@/>qMf.VE&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // q@]~8&-}@ is not an array index
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      int int0 = 909;
      JSONArray jSONArray1 = jSONArray0.put(909);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      JSONArray jSONArray2 = jSONArray0.put(909, 0.0);
      assertEquals(910, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(910, jSONArray2.length());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertNotNull(jSONArray2);
      
      JSONArray jSONArray3 = jSONArray0.putAll(jSONArray1);
      assertEquals(1820, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1820, jSONArray1.length());
      assertEquals(1820, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray1);
      assertNotNull(jSONArray3);
      
      Class<Answers> class0 = Answers.class;
      Answers answers0 = Answers.RETURNS_MOCKS;
      Answers answers1 = jSONArray3.optEnum(class0, 909, answers0);
      assertEquals(1820, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1820, jSONArray1.length());
      assertEquals(1820, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray1);
      assertSame(answers0, answers1);
      assertSame(answers1, answers0);
      assertEquals(Answers.RETURNS_MOCKS, answers1);
      
      float float0 = jSONArray3.optFloat((-3348), (float) (-3348));
      assertEquals(1820, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1820, jSONArray1.length());
      assertEquals(1820, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray1);
      assertEquals((-3348.0F), float0, 0.01F);
      
      Spliterator<Object> spliterator0 = jSONArray3.spliterator();
      assertEquals(1820, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1820, jSONArray1.length());
      assertEquals(1820, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray1);
      assertNotNull(spliterator0);
      
      Class<Answers> class1 = Answers.class;
      try { 
        jSONArray3.getEnum(class1, 909);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[909] is not a enum of type java.io.StringWriter@0000000010 (class java.lang.Double : 0.0).
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Vector<SQLFeatureNotSupportedException> vector0 = new Vector<SQLFeatureNotSupportedException>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, "    verify(mock, atLeastOnce()).someMethod();", 22);
      assertEquals("    verify(mock, atLeastOnce()).someMethod();", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(22, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("K}_'8T;$4YR", (String) null, sQLIntegrityConstraintViolationException0);
      assertEquals("    verify(mock, atLeastOnce()).someMethod();", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(22, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("K}_'8T;$4YR", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: K}_'8T;$4YR", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      SQLWarning sQLWarning0 = new SQLWarning(sQLFeatureNotSupportedException0);
      assertEquals("    verify(mock, atLeastOnce()).someMethod();", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(22, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("K}_'8T;$4YR", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: K}_'8T;$4YR", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: java.sql.SQLFeatureNotSupportedException: K}_'8T;$4YR", sQLWarning0.toString());
      assertEquals("java.sql.SQLFeatureNotSupportedException: K}_'8T;$4YR", sQLWarning0.getMessage());
      assertNotNull(sQLWarning0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(sQLWarning0);
      assertEquals("    verify(mock, atLeastOnce()).someMethod();", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(22, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("K}_'8T;$4YR", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: K}_'8T;$4YR", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: java.sql.SQLFeatureNotSupportedException: K}_'8T;$4YR", sQLWarning0.toString());
      assertEquals("java.sql.SQLFeatureNotSupportedException: K}_'8T;$4YR", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: java.sql.SQLFeatureNotSupportedException: K}_'8T;$4YR", sQLFeatureNotSupportedException1.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLWarning: java.sql.SQLFeatureNotSupportedException: K}_'8T;$4YR", sQLFeatureNotSupportedException1.toString());
      assertNull(sQLFeatureNotSupportedException1.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException1);
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      
      boolean boolean0 = vector0.add(sQLFeatureNotSupportedException1);
      assertEquals(1, vector0.size());
      assertEquals("[java.sql.SQLFeatureNotSupportedException: java.sql.SQLWarning: java.sql.SQLFeatureNotSupportedException: K}_'8T;$4YR]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("    verify(mock, atLeastOnce()).someMethod();", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(22, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("K}_'8T;$4YR", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: K}_'8T;$4YR", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: java.sql.SQLFeatureNotSupportedException: K}_'8T;$4YR", sQLWarning0.toString());
      assertEquals("java.sql.SQLFeatureNotSupportedException: K}_'8T;$4YR", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: java.sql.SQLFeatureNotSupportedException: K}_'8T;$4YR", sQLFeatureNotSupportedException1.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLWarning: java.sql.SQLFeatureNotSupportedException: K}_'8T;$4YR", sQLFeatureNotSupportedException1.toString());
      assertNull(sQLFeatureNotSupportedException1.getSQLState());
      assertNotSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
      assertNotSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException0);
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertTrue(boolean0);
      assertTrue(vector0.contains(sQLFeatureNotSupportedException1));
      assertFalse(vector0.contains(sQLFeatureNotSupportedException0));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ArrayList<SQLNonTransientException> arrayList0 = new ArrayList<SQLNonTransientException>(vector0);
      assertEquals(1, vector0.size());
      assertEquals("[java.sql.SQLFeatureNotSupportedException: java.sql.SQLWarning: java.sql.SQLFeatureNotSupportedException: K}_'8T;$4YR]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNotNull(arrayList0);
      assertTrue(vector0.contains(sQLFeatureNotSupportedException1));
      assertFalse(vector0.contains(sQLFeatureNotSupportedException0));
      
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) arrayList0);
      assertEquals(1, vector0.size());
      assertEquals("[java.sql.SQLFeatureNotSupportedException: java.sql.SQLWarning: java.sql.SQLFeatureNotSupportedException: K}_'8T;$4YR]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertNotNull(jSONArray0);
      assertTrue(vector0.contains(sQLFeatureNotSupportedException1));
      assertFalse(vector0.contains(sQLFeatureNotSupportedException0));
      
      JSONArray jSONArray1 = jSONArray0.put(130, (-1.0F));
      assertEquals(1, vector0.size());
      assertEquals("[java.sql.SQLFeatureNotSupportedException: java.sql.SQLWarning: java.sql.SQLFeatureNotSupportedException: K}_'8T;$4YR]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(131, jSONArray0.length());
      assertEquals(131, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertTrue(vector0.contains(sQLFeatureNotSupportedException1));
      assertFalse(vector0.contains(sQLFeatureNotSupportedException0));
      
      long long0 = jSONArray1.optLong(2181, (long) 130);
      assertEquals(1, vector0.size());
      assertEquals("[java.sql.SQLFeatureNotSupportedException: java.sql.SQLWarning: java.sql.SQLFeatureNotSupportedException: K}_'8T;$4YR]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(131, jSONArray0.length());
      assertEquals(131, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(130L, long0);
      assertTrue(vector0.contains(sQLFeatureNotSupportedException1));
      assertFalse(vector0.contains(sQLFeatureNotSupportedException0));
      
      String string0 = jSONArray1.join("miJm<0;k;0Ap@^");
      assertEquals(1, vector0.size());
      assertEquals("[java.sql.SQLFeatureNotSupportedException: java.sql.SQLWarning: java.sql.SQLFeatureNotSupportedException: K}_'8T;$4YR]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(131, jSONArray0.length());
      assertEquals(131, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(string0);
      assertTrue(vector0.contains(sQLFeatureNotSupportedException1));
      assertFalse(vector0.contains(sQLFeatureNotSupportedException0));
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Cannot instantiate @InjectMocks field named '");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = (-5);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      JSONArray jSONArray2 = jSONArray0.put(1260, (-5));
      assertEquals(1, vector0.size());
      assertEquals("[java.sql.SQLFeatureNotSupportedException: java.sql.SQLWarning: java.sql.SQLFeatureNotSupportedException: K}_'8T;$4YR]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1261, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(1261, jSONArray2.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertNotNull(jSONArray2);
      assertTrue(vector0.contains(sQLFeatureNotSupportedException1));
      assertFalse(vector0.contains(sQLFeatureNotSupportedException0));
      
      int int1 = jSONArray2.getInt(1260);
      assertEquals(1, vector0.size());
      assertEquals("[java.sql.SQLFeatureNotSupportedException: java.sql.SQLWarning: java.sql.SQLFeatureNotSupportedException: K}_'8T;$4YR]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1261, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(1261, jSONArray2.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertTrue(int1 == int0);
      assertEquals((-5), int1);
      assertTrue(vector0.contains(sQLFeatureNotSupportedException1));
      assertFalse(vector0.contains(sQLFeatureNotSupportedException0));
      
      JSONArray jSONArray3 = jSONArray1.putAll((Collection<?>) vector0);
      assertEquals(1, vector0.size());
      assertEquals("[java.sql.SQLFeatureNotSupportedException: java.sql.SQLWarning: java.sql.SQLFeatureNotSupportedException: K}_'8T;$4YR]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(1262, jSONArray3.length());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1262, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1262, jSONArray1.length());
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray2);
      assertNotNull(jSONArray3);
      assertTrue(vector0.contains(sQLFeatureNotSupportedException1));
      assertFalse(vector0.contains(sQLFeatureNotSupportedException0));
      
      JSONArray jSONArray4 = jSONArray3.put(false);
      assertEquals(1, vector0.size());
      assertEquals("[java.sql.SQLFeatureNotSupportedException: java.sql.SQLWarning: java.sql.SQLFeatureNotSupportedException: K}_'8T;$4YR]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(1263, jSONArray3.length());
      assertEquals(1263, jSONArray4.length());
      assertFalse(jSONArray4.isEmpty());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1263, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1263, jSONArray1.length());
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray4);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray4, jSONArray2);
      assertSame(jSONArray4, jSONArray3);
      assertSame(jSONArray4, jSONArray1);
      assertSame(jSONArray4, jSONArray0);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray4);
      assertSame(jSONArray1, jSONArray2);
      assertNotNull(jSONArray4);
      assertTrue(vector0.contains(sQLFeatureNotSupportedException1));
      assertFalse(vector0.contains(sQLFeatureNotSupportedException0));
      
      // Undeclared exception!
      try { 
        jSONArray2.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(1395.0F);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = jSONArray0.similar(jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      JSONArray jSONArray2 = jSONArray1.put(8, (-26L));
      assertFalse(jSONArray0.isEmpty());
      assertEquals(9, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(9, jSONArray1.length());
      assertEquals(9, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertNotNull(jSONArray2);
      
      JSONArray jSONArray3 = jSONArray0.putAll((Object) jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(18, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(18, jSONArray1.length());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(18, jSONArray3.length());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray2);
      assertNotNull(jSONArray3);
      
      SQLWarning sQLWarning0 = new SQLWarning((Throwable) null);
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertNotNull(sQLWarning0);
      
      long long0 = jSONArray0.optLong(8);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(18, jSONArray0.length());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertEquals((-26L), long0);
      
      JSONArray jSONArray4 = jSONArray0.putAll((Object) sQLWarning0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(19, jSONArray0.length());
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertFalse(jSONArray4.isEmpty());
      assertEquals(19, jSONArray4.length());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray4, jSONArray2);
      assertSame(jSONArray4, jSONArray3);
      assertSame(jSONArray4, jSONArray1);
      assertSame(jSONArray4, jSONArray0);
      assertNotNull(jSONArray4);
      
      int int0 = 11;
      try { 
        jSONArray0.getDouble(11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[11] is not a double (class org.json.JSONObject$Null : null).
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      //  // Unstable assertion: assertEquals(0, stack0.size());
      //  // Unstable assertion: assertTrue(stack0.empty());
      //  // Unstable assertion: assertTrue(stack0.isEmpty());
      //  // Unstable assertion: assertEquals(10, stack0.capacity());
      //  // Unstable assertion: assertEquals("[]", stack0.toString());
      //  // Unstable assertion: assertNotNull(stack0);
      
      stack0.setSize(939);
      //  // Unstable assertion: assertEquals(939, stack0.size());
      //  // Unstable assertion: assertEquals(939, stack0.capacity());
      //  // Unstable assertion: assertFalse(stack0.isEmpty());
      //  // Unstable assertion: assertFalse(stack0.empty());
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) stack0);
      //  // Unstable assertion: assertEquals(939, stack0.size());
      //  // Unstable assertion: assertEquals(939, stack0.capacity());
      //  // Unstable assertion: assertFalse(stack0.isEmpty());
      //  // Unstable assertion: assertFalse(stack0.empty());
      //  // Unstable assertion: assertEquals(939, jSONArray0.length());
      //  // Unstable assertion: assertFalse(jSONArray0.isEmpty());
      //  // Unstable assertion: assertNotNull(jSONArray0);
      
      String string0 = jSONArray0.toString();
      //  // Unstable assertion: assertEquals(939, stack0.size());
      //  // Unstable assertion: assertEquals(939, stack0.capacity());
      //  // Unstable assertion: assertFalse(stack0.isEmpty());
      //  // Unstable assertion: assertFalse(stack0.empty());
      //  // Unstable assertion: assertEquals(939, jSONArray0.length());
      //  // Unstable assertion: assertFalse(jSONArray0.isEmpty());
      //  // Unstable assertion: assertNull(string0);
      
      String string1 = jSONArray0.optString(939, (String) null);
      //  // Unstable assertion: assertEquals(939, stack0.size());
      //  // Unstable assertion: assertEquals(939, stack0.capacity());
      //  // Unstable assertion: assertFalse(stack0.isEmpty());
      //  // Unstable assertion: assertFalse(stack0.empty());
      //  // Unstable assertion: assertEquals(939, jSONArray0.length());
      //  // Unstable assertion: assertFalse(jSONArray0.isEmpty());
      //  // Unstable assertion: assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) null);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      int int0 = (-604);
      Number number0 = jSONArray0.optNumber((-604));
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNull(number0);
      
      int int1 = 0;
      Object object0 = jSONArray0.remove(0);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNull(object0);
      
      String string0 = "[wLmjX1'(Ba`A@GDh";
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray("[wLmjX1'(Ba`A@GDh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or ']' at 17 [character 18 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(1395.0F);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = jSONArray0.similar(jSONArray1);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      JSONArray jSONArray2 = jSONArray1.put(8, (-26L));
      assertEquals(9, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(9, jSONArray1.length());
      assertEquals(9, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertNotNull(jSONArray2);
      
      JSONArray jSONArray3 = jSONArray0.putAll((Object) jSONArray1);
      assertEquals(18, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(18, jSONArray1.length());
      assertEquals(18, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray1);
      assertNotNull(jSONArray3);
      
      SQLWarning sQLWarning0 = new SQLWarning((Throwable) null);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertNotNull(sQLWarning0);
      
      long long0 = jSONArray0.optLong(1415);
      assertEquals(18, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertEquals(0L, long0);
      
      JSONArray jSONArray4 = jSONArray0.putAll((Object) sQLWarning0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(19, jSONArray0.length());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertFalse(jSONArray4.isEmpty());
      assertEquals(19, jSONArray4.length());
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray4, jSONArray3);
      assertSame(jSONArray4, jSONArray2);
      assertSame(jSONArray4, jSONArray1);
      assertSame(jSONArray4, jSONArray0);
      assertNotNull(jSONArray4);
      
      int int0 = 11;
      JSONArray jSONArray5 = jSONArray0.put(11, (float) (-26L));
      assertFalse(jSONArray0.isEmpty());
      assertEquals(19, jSONArray0.length());
      assertFalse(jSONArray5.isEmpty());
      assertEquals(19, jSONArray5.length());
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray5);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray5, jSONArray3);
      assertSame(jSONArray5, jSONArray2);
      assertSame(jSONArray5, jSONArray1);
      assertSame(jSONArray5, jSONArray4);
      assertSame(jSONArray5, jSONArray0);
      assertNotNull(jSONArray5);
      
      double double0 = jSONArray0.getDouble(11);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(19, jSONArray0.length());
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray5);
      assertSame(jSONArray0, jSONArray4);
      assertEquals((-26.0), double0, 0.01);
      
      try { 
        jSONArray2.getJSONArray(101);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[101] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      LinkedHashSet<Double> linkedHashSet0 = new LinkedHashSet<Double>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = linkedHashSet0.add((Double) null);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedHashSet0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.putAll((Collection<?>) linkedHashSet0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(2, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      boolean boolean2 = jSONArray0.optBoolean(5592);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertSame(jSONArray0, jSONArray1);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      JSONArray jSONArray2 = jSONArray1.put(0.0F);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(3, jSONArray1.length());
      assertEquals(3, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertNotNull(jSONArray2);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      JSONArray jSONArray3 = jSONArray2.put(258, 0.0F);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(259, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(259, jSONArray1.length());
      assertEquals(259, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(259, jSONArray3.length());
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray2);
      assertNotNull(jSONArray3);
      
      String string0 = jSONArray0.join("@&YNW_<aXx)2p'#gl");
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(259, jSONArray0.length());
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[8] = (byte) (-14);
      byteArray0[1] = (byte)0;
      HashSet<SQLDataException> hashSet0 = new HashSet<SQLDataException>((byte)0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      JSONArray jSONArray4 = new JSONArray((Iterable<?>) hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(0, jSONArray4.length());
      assertTrue(jSONArray4.isEmpty());
      assertNotNull(jSONArray4);
      assertFalse(jSONArray4.equals((Object)jSONArray2));
      assertFalse(jSONArray4.equals((Object)jSONArray3));
      assertFalse(jSONArray4.equals((Object)jSONArray0));
      assertFalse(jSONArray4.equals((Object)jSONArray1));
      
      boolean boolean3 = jSONArray0.similar(jSONArray4);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(259, jSONArray0.length());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(0, jSONArray4.length());
      assertTrue(jSONArray4.isEmpty());
      assertNotSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray4, jSONArray2);
      assertNotSame(jSONArray4, jSONArray3);
      assertNotSame(jSONArray4, jSONArray0);
      assertNotSame(jSONArray4, jSONArray1);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(jSONArray0.equals((Object)jSONArray4));
      assertFalse(jSONArray4.equals((Object)jSONArray2));
      assertFalse(jSONArray4.equals((Object)jSONArray3));
      assertFalse(jSONArray4.equals((Object)jSONArray0));
      assertFalse(jSONArray4.equals((Object)jSONArray1));
      assertFalse(boolean3);
      
      byteArray0[4] = (byte)91;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)93;
      byteArray0[7] = (byte)91;
      byteArray0[8] = (byte)95;
      boolean boolean4 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(9, byteArray0.length);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)5, (byte)48, (byte)5, (byte)93, (byte)91, (byte)95}, byteArray0);
      
      LinkedHashSet linkedHashSet1 = (LinkedHashSet)linkedHashSet0.clone();
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(1, linkedHashSet1.size());
      assertFalse(linkedHashSet1.isEmpty());
      assertNotNull(linkedHashSet1);
      
      try { 
        jSONArray3.toJSONObject(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a String (class org.json.JSONObject$Null : null).
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = "\n";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n");
      assertFalse(boolean0);
      
      int int0 = 2242;
      HashSet<Locale.LanguageRange> hashSet0 = new HashSet<Locale.LanguageRange>(2242);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(2242, (double) 2242);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2243, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(2243, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      int int1 = (-2823);
      // Undeclared exception!
      jSONArray0.toString(1018);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      TreeSet<SQLFeatureNotSupportedException> treeSet0 = new TreeSet<SQLFeatureNotSupportedException>();
      assertNotNull(treeSet0);
      
      HashSet<SQLFeatureNotSupportedException> hashSet0 = new HashSet<SQLFeatureNotSupportedException>(treeSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      int int0 = 957;
      // Undeclared exception!
      try { 
        jSONArray0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      HashMap<BatchUpdateException, SQLTimeoutException> hashMap0 = new HashMap<BatchUpdateException, SQLTimeoutException>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONArray jSONArray1 = new JSONArray();
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      
      JSONArray jSONArray2 = jSONArray0.put((Collection<?>) null);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertNotNull(jSONArray2);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      
      boolean boolean1 = jSONArray1.similar(jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray1, jSONArray2);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(jSONArray1.equals((Object)jSONArray2));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = jSONArray2.toString(538);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertNotNull(string0);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      
      BigDecimal bigDecimal2 = bigDecimal0.multiply(bigDecimal1);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((short)100, bigDecimal2.shortValue());
      assertEquals((byte)100, bigDecimal2.byteValue());
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotNull(bigDecimal2);
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      
      BigDecimal bigDecimal3 = jSONArray0.optBigDecimal(114, bigDecimal0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((byte)10, bigDecimal3.byteValue());
      assertEquals((short)10, bigDecimal3.shortValue());
      assertSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal3);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal3, bigDecimal0);
      assertSame(bigDecimal3, bigDecimal1);
      assertNotSame(bigDecimal3, bigDecimal2);
      assertNotNull(bigDecimal3);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal3.equals((Object)bigDecimal2));
      
      JSONArray jSONArray3 = jSONArray2.put(1264, (Map<?, ?>) hashMap0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1265, jSONArray0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1265, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(1265, jSONArray3.length());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray3, jSONArray2);
      assertNotSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray0);
      assertNotNull(jSONArray3);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertFalse(jSONArray3.equals((Object)jSONArray1));
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(string0));
      
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      assertEquals(0, linkedList0.size());
      assertNotNull(jSONPointer0);
      assertFalse(linkedList0.contains(string0));
      
      JSONArray jSONArray4 = (JSONArray)jSONArray2.query(jSONPointer0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1265, jSONArray0.length());
      assertEquals(1265, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(1265, jSONArray4.length());
      assertFalse(jSONArray4.isEmpty());
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray4);
      assertSame(jSONArray4, jSONArray0);
      assertSame(jSONArray4, jSONArray2);
      assertSame(jSONArray4, jSONArray3);
      assertNotSame(jSONArray4, jSONArray1);
      assertNotNull(jSONArray4);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertFalse(jSONArray4.equals((Object)jSONArray1));
      assertFalse(linkedList0.contains(string0));
      
      JSONArray jSONArray5 = jSONArray0.put(114, (long) 114);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1265, jSONArray0.length());
      assertEquals(1265, jSONArray5.length());
      assertFalse(jSONArray5.isEmpty());
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray5);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertNotSame(jSONArray0, jSONArray1);
      assertSame(jSONArray5, jSONArray3);
      assertSame(jSONArray5, jSONArray2);
      assertNotSame(jSONArray5, jSONArray1);
      assertSame(jSONArray5, jSONArray4);
      assertSame(jSONArray5, jSONArray0);
      assertNotNull(jSONArray5);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray5.equals((Object)jSONArray1));
      
      try { 
        jSONArray1.getJSONObject((-1378));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1378] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(1573);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      Iterator<Object> iterator0 = jSONArray1.iterator();
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(iterator0);
      
      JSONObject jSONObject0 = jSONArray0.optJSONObject(1573);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertSame(jSONArray0, jSONArray1);
      assertNull(jSONObject0);
      
      Object object0 = jSONArray1.opt(1573);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNull(object0);
      
      int int0 = 617;
      boolean boolean0 = jSONArray0.isNull(617);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertSame(jSONArray0, jSONArray1);
      assertTrue(boolean0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Zk$%eC.H)kH", "V+sJ1o");
      assertEquals("V+sJ1o", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Zk$%eC.H)kH", sQLFeatureNotSupportedException0.toString());
      assertEquals("Zk$%eC.H)kH", sQLFeatureNotSupportedException0.getMessage());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      String string0 = jSONArray0.toString();
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertSame(jSONArray0, jSONArray1);
      assertNotNull(string0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      JSONArray jSONArray2 = jSONArray1.put((Object) jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(2, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertNotNull(jSONArray2);
      
      Object object2 = jSONArray2.remove((-1304));
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(2, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertNull(object2);
      
      JSONPointer.Builder jSONPointer_Builder0 = JSONPointer.builder();
      assertNotNull(jSONPointer_Builder0);
      
      BigDecimal bigDecimal0 = jSONArray2.optBigDecimal(617, (BigDecimal) null);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(2, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertNull(bigDecimal0);
      
      JSONArray jSONArray3 = jSONArray1.put(617, (Collection<?>) null);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(618, jSONArray0.length());
      assertEquals(618, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(618, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray2);
      assertNotNull(jSONArray3);
      
      try { 
        jSONArray2.getBigInteger(617);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[617] is not a BigInteger (class org.json.JSONArray).
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ArrayList<SQLClientInfoException> arrayList0 = new ArrayList<SQLClientInfoException>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      TreeSet<SQLClientInfoException> treeSet0 = new TreeSet<SQLClientInfoException>(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(treeSet0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) treeSet0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      Class<Answers> class0 = Answers.class;
      Answers answers0 = Answers.RETURNS_SMART_NULLS;
      Answers answers1 = jSONArray0.optEnum(class0, 1712, answers0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertSame(answers0, answers1);
      assertSame(answers1, answers0);
      assertEquals(Answers.RETURNS_SMART_NULLS, answers1);
      
      JSONArray jSONArray1 = jSONArray0.put(1712, (double) 1712);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1713, jSONArray0.length());
      assertEquals(1713, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      TreeSet<Integer> treeSet1 = new TreeSet<Integer>();
      assertNotNull(treeSet1);
      assertFalse(treeSet1.contains(1712));
      
      JSONArray jSONArray2 = jSONArray1.put((Collection<?>) treeSet1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1714, jSONArray0.length());
      assertEquals(1714, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(1714, jSONArray2.length());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertNotNull(jSONArray2);
      assertFalse(treeSet1.contains(1712));
      
      long long0 = jSONArray1.getLong(1712);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1714, jSONArray0.length());
      assertEquals(1714, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertEquals(1712L, long0);
      
      int int0 = 2479;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNotNull(sQLClientInfoException0);
      
      boolean boolean1 = arrayList0.add(sQLClientInfoException0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(arrayList0.contains(sQLClientInfoException0));
      
      try { 
        jSONArray0.getBigInteger(2479);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[2479] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = 916;
      JSONArray jSONArray0 = new JSONArray(916);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      JSONArray jSONArray1 = jSONArray0.put((Collection<?>) priorityQueue0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(0, priorityQueue0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      List<Object> list0 = jSONArray1.toList();
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(0, priorityQueue0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(list0);
      assertFalse(list0.contains(916));
      
      try { 
        jSONArray1.getNumber(916);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[916] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(1573);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      Iterator<Object> iterator0 = jSONArray1.iterator();
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(iterator0);
      
      JSONObject jSONObject0 = jSONArray0.optJSONObject(1573);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertNull(jSONObject0);
      
      Object object0 = jSONArray1.opt(1573);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNull(object0);
      
      int int0 = 617;
      boolean boolean0 = jSONArray0.isNull(617);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertTrue(boolean0);
      
      JSONArray jSONArray2 = jSONArray1.put((float) 617);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(2, jSONArray2.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertNotNull(jSONArray2);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Zk$%eC.H)kH", "V+sJ1o");
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Zk$%eC.H)kH", sQLFeatureNotSupportedException0.toString());
      assertEquals("V+sJ1o", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("Zk$%eC.H)kH", sQLFeatureNotSupportedException0.getMessage());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      JSONArray jSONArray3 = jSONArray1.putAll((Object) sQLFeatureNotSupportedException0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3, jSONArray0.length());
      assertEquals(3, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Zk$%eC.H)kH", sQLFeatureNotSupportedException0.toString());
      assertEquals("V+sJ1o", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("Zk$%eC.H)kH", sQLFeatureNotSupportedException0.getMessage());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(3, jSONArray3.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray2);
      assertNotNull(jSONArray3);
      
      String string0 = jSONArray3.toString();
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3, jSONArray0.length());
      assertEquals(3, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Zk$%eC.H)kH", sQLFeatureNotSupportedException0.toString());
      assertEquals("V+sJ1o", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("Zk$%eC.H)kH", sQLFeatureNotSupportedException0.getMessage());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(3, jSONArray3.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray2);
      assertNotNull(string0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      JSONArray jSONArray4 = jSONArray3.put((Object) jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(4, jSONArray0.length());
      assertEquals(4, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Zk$%eC.H)kH", sQLFeatureNotSupportedException0.toString());
      assertEquals("V+sJ1o", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("Zk$%eC.H)kH", sQLFeatureNotSupportedException0.getMessage());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(4, jSONArray3.length());
      assertFalse(jSONArray4.isEmpty());
      assertEquals(4, jSONArray4.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray4);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray4);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray4, jSONArray0);
      assertSame(jSONArray4, jSONArray2);
      assertSame(jSONArray4, jSONArray3);
      assertSame(jSONArray4, jSONArray1);
      assertNotNull(jSONArray4);
      
      JSONPointer.Builder jSONPointer_Builder0 = JSONPointer.builder();
      assertNotNull(jSONPointer_Builder0);
      
      JSONArray jSONArray5 = jSONArray1.put(617, (Collection<?>) null);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(618, jSONArray0.length());
      assertEquals(618, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray5.isEmpty());
      assertEquals(618, jSONArray5.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray5);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray5);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray4);
      assertSame(jSONArray5, jSONArray0);
      assertSame(jSONArray5, jSONArray2);
      assertSame(jSONArray5, jSONArray1);
      assertSame(jSONArray5, jSONArray4);
      assertSame(jSONArray5, jSONArray3);
      assertNotNull(jSONArray5);
      
      boolean boolean1 = jSONArray4.isEmpty();
      assertFalse(jSONArray0.isEmpty());
      assertEquals(618, jSONArray0.length());
      assertEquals(618, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Zk$%eC.H)kH", sQLFeatureNotSupportedException0.toString());
      assertEquals("V+sJ1o", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("Zk$%eC.H)kH", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(618, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(618, jSONArray4.length());
      assertFalse(jSONArray4.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray5);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray5);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray4);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray4);
      assertSame(jSONArray3, jSONArray5);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray4, jSONArray0);
      assertSame(jSONArray4, jSONArray2);
      assertSame(jSONArray4, jSONArray5);
      assertSame(jSONArray4, jSONArray3);
      assertSame(jSONArray4, jSONArray1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      StringWriter stringWriter0 = new StringWriter(617);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringWriter stringWriter1 = stringWriter0.append('.');
      assertEquals(".", stringWriter0.toString());
      assertEquals(".", stringWriter1.toString());
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringWriter1);
      
      try { 
        jSONArray5.write((Writer) stringWriter1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to write JSONArray value at index: 3
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(1573);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      Iterator<Object> iterator0 = jSONArray1.iterator();
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(iterator0);
      
      JSONObject jSONObject0 = jSONArray0.optJSONObject(1573);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertSame(jSONArray0, jSONArray1);
      assertNull(jSONObject0);
      
      Object object0 = jSONArray1.opt(1573);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNull(object0);
      
      int int0 = 617;
      boolean boolean0 = jSONArray0.isNull(617);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertSame(jSONArray0, jSONArray1);
      assertTrue(boolean0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Zk$%eC.H)kH", "V+sJ1o");
      assertEquals("java.sql.SQLFeatureNotSupportedException: Zk$%eC.H)kH", sQLFeatureNotSupportedException0.toString());
      assertEquals("V+sJ1o", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("Zk$%eC.H)kH", sQLFeatureNotSupportedException0.getMessage());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      JSONArray jSONArray2 = jSONArray1.putAll((Object) sQLFeatureNotSupportedException0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Zk$%eC.H)kH", sQLFeatureNotSupportedException0.toString());
      assertEquals("V+sJ1o", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("Zk$%eC.H)kH", sQLFeatureNotSupportedException0.getMessage());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(2, jSONArray2.length());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertNotNull(jSONArray2);
      
      String string0 = jSONArray2.toString();
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Zk$%eC.H)kH", sQLFeatureNotSupportedException0.toString());
      assertEquals("V+sJ1o", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("Zk$%eC.H)kH", sQLFeatureNotSupportedException0.getMessage());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(2, jSONArray2.length());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertNotNull(string0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      JSONArray jSONArray3 = jSONArray2.put((Object) jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3, jSONArray0.length());
      assertEquals(3, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Zk$%eC.H)kH", sQLFeatureNotSupportedException0.toString());
      assertEquals("V+sJ1o", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("Zk$%eC.H)kH", sQLFeatureNotSupportedException0.getMessage());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(3, jSONArray2.length());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(3, jSONArray3.length());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray1);
      assertNotNull(jSONArray3);
      
      JSONPointer.Builder jSONPointer_Builder0 = JSONPointer.builder();
      assertNotNull(jSONPointer_Builder0);
      
      JSONArray jSONArray4 = jSONArray1.put(617, (Collection<?>) null);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(618, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(618, jSONArray1.length());
      assertEquals(618, jSONArray4.length());
      assertFalse(jSONArray4.isEmpty());
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray4);
      assertSame(jSONArray4, jSONArray1);
      assertSame(jSONArray4, jSONArray3);
      assertSame(jSONArray4, jSONArray2);
      assertSame(jSONArray4, jSONArray0);
      assertNotNull(jSONArray4);
      
      try { 
        jSONArray4.toString(1573);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to write JSONArray value at index: 2
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      HashMap<BatchUpdateException, SQLTimeoutException> hashMap0 = new HashMap<BatchUpdateException, SQLTimeoutException>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONArray jSONArray1 = jSONArray0.put((Map<?, ?>) hashMap0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      JSONArray jSONArray2 = jSONArray0.put((Collection<?>) null);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertEquals(2, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertNotNull(jSONArray2);
      
      boolean boolean1 = jSONArray1.similar(jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string0 = jSONArray2.toString(538);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertEquals(2, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertNotNull(string0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      
      BigDecimal bigDecimal2 = bigDecimal0.multiply(bigDecimal1);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((byte)100, bigDecimal2.byteValue());
      assertEquals((short)100, bigDecimal2.shortValue());
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotNull(bigDecimal2);
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      
      BigDecimal bigDecimal3 = jSONArray0.optBigDecimal(114, bigDecimal0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((byte)10, bigDecimal3.byteValue());
      assertEquals((short)10, bigDecimal3.shortValue());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal3);
      assertSame(bigDecimal3, bigDecimal0);
      assertSame(bigDecimal3, bigDecimal1);
      assertNotSame(bigDecimal3, bigDecimal2);
      assertNotNull(bigDecimal3);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal3.equals((Object)bigDecimal2));
      
      JSONArray jSONArray3 = jSONArray2.put(1264, (Map<?, ?>) hashMap0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1265, jSONArray0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1265, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(1265, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray1);
      assertNotNull(jSONArray3);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(string0));
      
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      assertEquals(0, linkedList0.size());
      assertNotNull(jSONPointer0);
      assertFalse(linkedList0.contains(string0));
      
      JSONArray jSONArray4 = (JSONArray)jSONArray2.query(jSONPointer0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1265, jSONArray0.length());
      assertEquals(1265, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(1265, jSONArray4.length());
      assertFalse(jSONArray4.isEmpty());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray4);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray4, jSONArray0);
      assertSame(jSONArray4, jSONArray1);
      assertSame(jSONArray4, jSONArray3);
      assertSame(jSONArray4, jSONArray2);
      assertNotNull(jSONArray4);
      assertFalse(linkedList0.contains(string0));
      
      JSONArray jSONArray5 = jSONArray0.put(114, (long) 114);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1265, jSONArray0.length());
      assertEquals(1265, jSONArray5.length());
      assertFalse(jSONArray5.isEmpty());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray5);
      assertSame(jSONArray5, jSONArray1);
      assertSame(jSONArray5, jSONArray0);
      assertSame(jSONArray5, jSONArray4);
      assertSame(jSONArray5, jSONArray3);
      assertSame(jSONArray5, jSONArray2);
      assertNotNull(jSONArray5);
      
      try { 
        jSONArray1.getJSONObject((-1378));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1378] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      LinkedHashSet<Double> linkedHashSet0 = new LinkedHashSet<Double>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = linkedHashSet0.add((Double) null);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedHashSet0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.putAll((Collection<?>) linkedHashSet0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(2, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      boolean boolean2 = jSONArray0.optBoolean(5592);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      JSONArray jSONArray2 = new JSONArray();
      assertTrue(jSONArray2.isEmpty());
      assertEquals(0, jSONArray2.length());
      assertNotNull(jSONArray2);
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      JSONArray jSONArray3 = new JSONArray(5592);
      assertTrue(jSONArray3.isEmpty());
      assertEquals(0, jSONArray3.length());
      assertNotNull(jSONArray3);
      assertFalse(jSONArray3.equals((Object)jSONArray1));
      assertFalse(jSONArray3.equals((Object)jSONArray2));
      assertFalse(jSONArray3.equals((Object)jSONArray0));
      
      String string0 = jSONArray0.join("Z28b9.a(tOP0");
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertNotSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertNotNull(string0);
      assertFalse(jSONArray0.equals((Object)jSONArray3));
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertEquals("nullZ28b9.a(tOP0null", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte) (-14);
      byteArray0[4] = (byte)91;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)93;
      byteArray0[7] = (byte)91;
      byteArray0[8] = (byte)95;
      boolean boolean3 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(9, byteArray0.length);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      assertArrayEquals(new byte[] {(byte) (-14), (byte) (-14), (byte)0, (byte)5, (byte)48, (byte)5, (byte)93, (byte)91, (byte)95}, byteArray0);
      
      LinkedHashSet linkedHashSet1 = (LinkedHashSet)linkedHashSet0.clone();
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet1.isEmpty());
      assertEquals(1, linkedHashSet1.size());
      assertNotNull(linkedHashSet1);
      
      JSONObject jSONObject0 = jSONArray3.toJSONObject(jSONArray0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertTrue(jSONArray3.isEmpty());
      assertEquals(0, jSONArray3.length());
      assertNotSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray3, jSONArray1);
      assertNotSame(jSONArray3, jSONArray2);
      assertNotSame(jSONArray3, jSONArray0);
      assertNull(jSONObject0);
      assertFalse(jSONArray0.equals((Object)jSONArray3));
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray3.equals((Object)jSONArray1));
      assertFalse(jSONArray3.equals((Object)jSONArray2));
      assertFalse(jSONArray3.equals((Object)jSONArray0));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      LinkedHashSet<DataTruncation> linkedHashSet0 = new LinkedHashSet<DataTruncation>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      JSONArray jSONArray1 = jSONArray0.putAll((Collection<?>) linkedHashSet0);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      JSONArray jSONArray2 = new JSONArray();
      assertEquals(0, jSONArray2.length());
      assertTrue(jSONArray2.isEmpty());
      assertNotNull(jSONArray2);
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      
      JSONArray jSONArray3 = jSONArray1.put(396, 618);
      assertEquals(397, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(397, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(397, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray1, jSONArray2);
      assertSame(jSONArray3, jSONArray0);
      assertNotSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray1);
      assertNotNull(jSONArray3);
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray1.equals((Object)jSONArray2));
      assertFalse(jSONArray3.equals((Object)jSONArray2));
      
      String string0 = jSONArray1.optString(618);
      assertEquals(397, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(397, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray1, jSONArray2);
      assertNotNull(string0);
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray1.equals((Object)jSONArray2));
      assertEquals("", string0);
      
      JSONObject jSONObject0 = jSONArray2.toJSONObject(jSONArray1);
      assertEquals(397, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(397, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(0, jSONArray2.length());
      assertTrue(jSONArray2.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray2, jSONArray3);
      assertNotSame(jSONArray2, jSONArray0);
      assertNotSame(jSONArray2, jSONArray1);
      assertNull(jSONObject0);
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray1.equals((Object)jSONArray2));
      assertFalse(jSONArray2.equals((Object)jSONArray3));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray1));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(1573);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      Iterator<Object> iterator0 = jSONArray1.iterator();
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(iterator0);
      
      JSONObject jSONObject0 = jSONArray0.optJSONObject(1573);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertSame(jSONArray0, jSONArray1);
      assertNull(jSONObject0);
      
      Object object0 = jSONArray1.opt(1573);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNull(object0);
      
      int int0 = 617;
      boolean boolean0 = jSONArray0.isNull(617);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertSame(jSONArray0, jSONArray1);
      assertTrue(boolean0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Zk$%eC.H)kH", "V+sJ1o");
      assertEquals("java.sql.SQLFeatureNotSupportedException: Zk$%eC.H)kH", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("V+sJ1o", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("Zk$%eC.H)kH", sQLFeatureNotSupportedException0.getMessage());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      JSONArray jSONArray2 = jSONArray1.putAll((Object) sQLFeatureNotSupportedException0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Zk$%eC.H)kH", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("V+sJ1o", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("Zk$%eC.H)kH", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(2, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertNotNull(jSONArray2);
      
      String string0 = jSONArray2.toString();
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Zk$%eC.H)kH", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("V+sJ1o", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("Zk$%eC.H)kH", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(2, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertNotNull(string0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      JSONArray jSONArray3 = jSONArray2.put((Object) jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3, jSONArray0.length());
      assertEquals(3, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Zk$%eC.H)kH", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("V+sJ1o", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("Zk$%eC.H)kH", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(3, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(3, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray1);
      assertNotNull(jSONArray3);
      
      JSONPointer.Builder jSONPointer_Builder0 = JSONPointer.builder();
      assertNotNull(jSONPointer_Builder0);
      
      JSONArray jSONArray4 = jSONArray1.put(617, (Collection<?>) null);
      assertEquals(618, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(618, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(618, jSONArray4.length());
      assertFalse(jSONArray4.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray4);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray4, jSONArray0);
      assertSame(jSONArray4, jSONArray3);
      assertSame(jSONArray4, jSONArray1);
      assertSame(jSONArray4, jSONArray2);
      assertNotNull(jSONArray4);
      
      int int1 = jSONArray4.optInt(1573);
      assertEquals(618, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(618, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(618, jSONArray4.length());
      assertFalse(jSONArray4.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray4);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray4, jSONArray0);
      assertSame(jSONArray4, jSONArray3);
      assertSame(jSONArray4, jSONArray1);
      assertSame(jSONArray4, jSONArray2);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      JSONArray jSONArray5 = jSONArray3.put(617, (long) 0);
      assertEquals(618, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(618, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Zk$%eC.H)kH", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("V+sJ1o", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("Zk$%eC.H)kH", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(618, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(618, jSONArray3.length());
      assertFalse(jSONArray5.isEmpty());
      assertEquals(618, jSONArray5.length());
      assertSame(jSONArray0, jSONArray5);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray4);
      assertSame(jSONArray1, jSONArray5);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray4);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray5);
      assertSame(jSONArray3, jSONArray5);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray4);
      assertSame(jSONArray5, jSONArray4);
      assertSame(jSONArray5, jSONArray0);
      assertSame(jSONArray5, jSONArray3);
      assertSame(jSONArray5, jSONArray2);
      assertSame(jSONArray5, jSONArray1);
      assertNotNull(jSONArray5);
      
      BigInteger bigInteger0 = jSONArray3.getBigInteger(617);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals(618, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(618, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Zk$%eC.H)kH", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("V+sJ1o", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("Zk$%eC.H)kH", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(618, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(618, jSONArray3.length());
      assertSame(jSONArray0, jSONArray5);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray4);
      assertSame(jSONArray1, jSONArray5);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray4);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray5);
      assertSame(jSONArray3, jSONArray5);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray4);
      assertNotNull(bigInteger0);
      
      JSONArray jSONArray6 = jSONArray2.put(751, (long) 751);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(752, jSONArray0.length());
      assertEquals(752, jSONArray6.length());
      assertFalse(jSONArray6.isEmpty());
      assertEquals(752, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Zk$%eC.H)kH", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("V+sJ1o", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("Zk$%eC.H)kH", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(752, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertSame(jSONArray0, jSONArray5);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray6);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray6, jSONArray1);
      assertSame(jSONArray6, jSONArray4);
      assertSame(jSONArray6, jSONArray3);
      assertSame(jSONArray6, jSONArray0);
      assertSame(jSONArray6, jSONArray5);
      assertSame(jSONArray6, jSONArray2);
      assertSame(jSONArray1, jSONArray6);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray4);
      assertSame(jSONArray1, jSONArray5);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray6);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray4);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray5);
      assertNotNull(jSONArray6);
      
      int int2 = 0;
      Object object2 = jSONArray6.remove(0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(751, jSONArray0.length());
      assertEquals(751, jSONArray6.length());
      assertFalse(jSONArray6.isEmpty());
      assertEquals(751, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Zk$%eC.H)kH", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("V+sJ1o", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("Zk$%eC.H)kH", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(751, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertSame(jSONArray0, jSONArray5);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray6);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray6, jSONArray1);
      assertSame(jSONArray6, jSONArray4);
      assertSame(jSONArray6, jSONArray3);
      assertSame(jSONArray6, jSONArray0);
      assertSame(jSONArray6, jSONArray5);
      assertSame(jSONArray6, jSONArray2);
      assertSame(jSONArray1, jSONArray6);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray4);
      assertSame(jSONArray1, jSONArray5);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray6);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray4);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray5);
      assertNotNull(object2);
      assertFalse(object2.equals((Object)int1));
      assertFalse(object2.equals((Object)int0));
      assertFalse(object2.equals((Object)int2));
      assertEquals(1573, object2);
      
      try { 
        jSONArray6.getNumber(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a number (class java.sql.SQLFeatureNotSupportedException).
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      TreeSet<SQLFeatureNotSupportedException> treeSet0 = new TreeSet<SQLFeatureNotSupportedException>();
      assertNotNull(treeSet0);
      
      HashSet<SQLFeatureNotSupportedException> hashSet0 = new HashSet<SQLFeatureNotSupportedException>(treeSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(957, 0.0F);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(958, jSONArray0.length());
      assertEquals(958, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      int int0 = jSONArray0.optInt(948);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(958, jSONArray0.length());
      assertSame(jSONArray0, jSONArray1);
      assertEquals(0, int0);
      
      long long0 = jSONArray1.getLong(957);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(958, jSONArray0.length());
      assertEquals(958, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0L, long0);
      
      float float0 = jSONArray0.optFloat(1288, Float.NaN);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(958, jSONArray0.length());
      assertSame(jSONArray0, jSONArray1);
      assertEquals(Float.NaN, float0, 0.01F);
      
      Class<Answers> class0 = Answers.class;
      try { 
        jSONArray1.getEnum(class0, 2148);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[2148] is not a enum of type java.io.StringWriter@0000000006 (null).
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ArrayDeque<SQLTimeoutException> arrayDeque0 = new ArrayDeque<SQLTimeoutException>();
      //  // Unstable assertion: assertTrue(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals(0, arrayDeque0.size());
      //  // Unstable assertion: assertNotNull(arrayDeque0);
      
      SQLDataException sQLDataException0 = new SQLDataException(").");
      //  // Unstable assertion: assertEquals("java.sql.SQLDataException: ).", sQLDataException0.toString());
      //  // Unstable assertion: assertNull(sQLDataException0.getSQLState());
      //  // Unstable assertion: assertEquals(0, sQLDataException0.getErrorCode());
      //  // Unstable assertion: assertEquals(").", sQLDataException0.getMessage());
      //  // Unstable assertion: assertNotNull(sQLDataException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      //  // Unstable assertion: assertNull(sQLRecoverableException0.getMessage());
      //  // Unstable assertion: assertNull(sQLRecoverableException0.getSQLState());
      //  // Unstable assertion: assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      //  // Unstable assertion: assertEquals(0, sQLRecoverableException0.getErrorCode());
      //  // Unstable assertion: assertNotNull(sQLRecoverableException0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(432);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertNotNull(byteArrayOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      //  // Unstable assertion: assertNotNull(mockPrintStream0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) ").";
      objectArray0[1] = (Object) ").";
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) byteArrayOutputStream0;
      objectArray0[5] = (Object) arrayDeque0;
      SQLRecoverableException sQLRecoverableException1 = (SQLRecoverableException)sQLRecoverableException0.fillInStackTrace();
      //  // Unstable assertion: assertNull(sQLRecoverableException0.getMessage());
      //  // Unstable assertion: assertNull(sQLRecoverableException0.getSQLState());
      //  // Unstable assertion: assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      //  // Unstable assertion: assertEquals(0, sQLRecoverableException0.getErrorCode());
      //  // Unstable assertion: assertEquals(0, sQLRecoverableException1.getErrorCode());
      //  // Unstable assertion: assertNull(sQLRecoverableException1.getMessage());
      //  // Unstable assertion: assertNull(sQLRecoverableException1.getSQLState());
      //  // Unstable assertion: assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException1.toString());
      //  // Unstable assertion: assertSame(sQLRecoverableException0, sQLRecoverableException1);
      //  // Unstable assertion: assertSame(sQLRecoverableException1, sQLRecoverableException0);
      //  // Unstable assertion: assertNotNull(sQLRecoverableException1);
      
      objectArray0[6] = (Object) byteArrayOutputStream0;
      objectArray0[7] = (Object) sQLRecoverableException0;
      MockPrintStream mockPrintStream1 = (MockPrintStream)mockPrintStream0.format("_e~\"BGa$/oH", objectArray0);
      //  // Unstable assertion: assertEquals(11, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("_e~\"BGa$/oH", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertSame(mockPrintStream0, mockPrintStream1);
      //  // Unstable assertion: assertSame(mockPrintStream1, mockPrintStream0);
      //  // Unstable assertion: assertEquals(8, objectArray0.length);
      //  // Unstable assertion: assertNotNull(mockPrintStream1);
      
      sQLRecoverableException0.printStackTrace((PrintStream) mockPrintStream1);
      //  // Unstable assertion: assertNull(sQLRecoverableException0.getMessage());
      //  // Unstable assertion: assertNull(sQLRecoverableException0.getSQLState());
      //  // Unstable assertion: assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      //  // Unstable assertion: assertEquals(0, sQLRecoverableException0.getErrorCode());
      //  // Unstable assertion: assertEquals(1043, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertSame(sQLRecoverableException0, sQLRecoverableException1);
      //  // Unstable assertion: assertSame(mockPrintStream0, mockPrintStream1);
      //  // Unstable assertion: assertSame(mockPrintStream1, mockPrintStream0);
      //  // Unstable assertion: assertEquals(8, objectArray0.length);
      
      sQLDataException0.addSuppressed(sQLRecoverableException0);
      //  // Unstable assertion: assertEquals("java.sql.SQLDataException: ).", sQLDataException0.toString());
      //  // Unstable assertion: assertNull(sQLDataException0.getSQLState());
      //  // Unstable assertion: assertEquals(0, sQLDataException0.getErrorCode());
      //  // Unstable assertion: assertEquals(").", sQLDataException0.getMessage());
      //  // Unstable assertion: assertNull(sQLRecoverableException0.getMessage());
      //  // Unstable assertion: assertNull(sQLRecoverableException0.getSQLState());
      //  // Unstable assertion: assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      //  // Unstable assertion: assertEquals(0, sQLRecoverableException0.getErrorCode());
      //  // Unstable assertion: assertSame(sQLRecoverableException0, sQLRecoverableException1);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(").", "hy/MqSH3U~ESI&~", 432, sQLDataException0);
      //  // Unstable assertion: assertEquals("java.sql.SQLTimeoutException: ).", sQLTimeoutException0.toString());
      //  // Unstable assertion: assertEquals(432, sQLTimeoutException0.getErrorCode());
      //  // Unstable assertion: assertEquals(").", sQLTimeoutException0.getMessage());
      //  // Unstable assertion: assertEquals("hy/MqSH3U~ESI&~", sQLTimeoutException0.getSQLState());
      //  // Unstable assertion: assertEquals("java.sql.SQLDataException: ).", sQLDataException0.toString());
      //  // Unstable assertion: assertNull(sQLDataException0.getSQLState());
      //  // Unstable assertion: assertEquals(0, sQLDataException0.getErrorCode());
      //  // Unstable assertion: assertEquals(").", sQLDataException0.getMessage());
      //  // Unstable assertion: assertNotNull(sQLTimeoutException0);
      
      boolean boolean0 = arrayDeque0.add(sQLTimeoutException0);
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals("java.sql.SQLTimeoutException: ).", sQLTimeoutException0.toString());
      //  // Unstable assertion: assertEquals(432, sQLTimeoutException0.getErrorCode());
      //  // Unstable assertion: assertEquals(").", sQLTimeoutException0.getMessage());
      //  // Unstable assertion: assertEquals("hy/MqSH3U~ESI&~", sQLTimeoutException0.getSQLState());
      //  // Unstable assertion: assertEquals("java.sql.SQLDataException: ).", sQLDataException0.toString());
      //  // Unstable assertion: assertNull(sQLDataException0.getSQLState());
      //  // Unstable assertion: assertEquals(0, sQLDataException0.getErrorCode());
      //  // Unstable assertion: assertEquals(").", sQLDataException0.getMessage());
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) arrayDeque0);
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals(1, jSONArray0.length());
      //  // Unstable assertion: assertFalse(jSONArray0.isEmpty());
      //  // Unstable assertion: assertNotNull(jSONArray0);
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      JSONArray jSONArray1 = jSONArray0.put(432, true);
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertFalse(jSONArray0.isEmpty());
      //  // Unstable assertion: assertEquals(433, jSONArray0.length());
      //  // Unstable assertion: assertEquals(433, jSONArray1.length());
      //  // Unstable assertion: assertFalse(jSONArray1.isEmpty());
      //  // Unstable assertion: assertSame(jSONArray0, jSONArray1);
      //  // Unstable assertion: assertSame(jSONArray1, jSONArray0);
      //  // Unstable assertion: assertNotNull(jSONArray1);
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      JSONArray jSONArray2 = new JSONArray(jSONArray0);
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertFalse(jSONArray0.isEmpty());
      //  // Unstable assertion: assertEquals(433, jSONArray0.length());
      //  // Unstable assertion: assertEquals(433, jSONArray2.length());
      //  // Unstable assertion: assertFalse(jSONArray2.isEmpty());
      //  // Unstable assertion: assertNotNull(jSONArray2);
      //  // Unstable assertion: assertFalse(jSONArray2.equals((Object)jSONArray0));
      //  // Unstable assertion: assertFalse(jSONArray2.equals((Object)jSONArray1));
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      boolean boolean1 = jSONArray2.optBoolean(0, true);
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertFalse(jSONArray0.isEmpty());
      //  // Unstable assertion: assertEquals(433, jSONArray0.length());
      //  // Unstable assertion: assertEquals(433, jSONArray2.length());
      //  // Unstable assertion: assertFalse(jSONArray2.isEmpty());
      //  // Unstable assertion: assertNotSame(jSONArray0, jSONArray2);
      //  // Unstable assertion: assertSame(jSONArray0, jSONArray1);
      //  // Unstable assertion: assertNotSame(jSONArray2, jSONArray0);
      //  // Unstable assertion: assertNotSame(jSONArray2, jSONArray1);
      //  // Unstable assertion: assertFalse(jSONArray0.equals((Object)jSONArray2));
      //  // Unstable assertion: assertFalse(jSONArray2.equals((Object)jSONArray0));
      //  // Unstable assertion: assertFalse(jSONArray2.equals((Object)jSONArray1));
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertTrue(boolean1);
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      float float0 = jSONArray2.optFloat((-431), (-166.505F));
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertFalse(jSONArray0.isEmpty());
      //  // Unstable assertion: assertEquals(433, jSONArray0.length());
      //  // Unstable assertion: assertEquals(433, jSONArray2.length());
      //  // Unstable assertion: assertFalse(jSONArray2.isEmpty());
      //  // Unstable assertion: assertNotSame(jSONArray0, jSONArray2);
      //  // Unstable assertion: assertSame(jSONArray0, jSONArray1);
      //  // Unstable assertion: assertNotSame(jSONArray2, jSONArray0);
      //  // Unstable assertion: assertNotSame(jSONArray2, jSONArray1);
      //  // Unstable assertion: assertFalse(jSONArray0.equals((Object)jSONArray2));
      //  // Unstable assertion: assertFalse(jSONArray2.equals((Object)jSONArray0));
      //  // Unstable assertion: assertFalse(jSONArray2.equals((Object)jSONArray1));
      //  // Unstable assertion: assertEquals((-166.505F), float0, 0.01F);
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      String string0 = (String)jSONArray0.opt(0);
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertFalse(jSONArray0.isEmpty());
      //  // Unstable assertion: assertEquals(433, jSONArray0.length());
      //  // Unstable assertion: assertNotSame(jSONArray0, jSONArray2);
      //  // Unstable assertion: assertSame(jSONArray0, jSONArray1);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertFalse(jSONArray0.equals((Object)jSONArray2));
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      boolean boolean2 = jSONArray0.optBoolean(432);
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertFalse(jSONArray0.isEmpty());
      //  // Unstable assertion: assertEquals(433, jSONArray0.length());
      //  // Unstable assertion: assertNotSame(jSONArray0, jSONArray2);
      //  // Unstable assertion: assertSame(jSONArray0, jSONArray1);
      //  // Unstable assertion: assertFalse(jSONArray0.equals((Object)jSONArray2));
      //  // Unstable assertion: assertTrue(boolean2 == boolean0);
      //  // Unstable assertion: assertTrue(boolean2 == boolean1);
      //  // Unstable assertion: assertTrue(boolean2);
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      String string1 = jSONArray2.optString((-431), " (null).");
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertFalse(jSONArray0.isEmpty());
      //  // Unstable assertion: assertEquals(433, jSONArray0.length());
      //  // Unstable assertion: assertEquals(433, jSONArray2.length());
      //  // Unstable assertion: assertFalse(jSONArray2.isEmpty());
      //  // Unstable assertion: assertNotSame(jSONArray0, jSONArray2);
      //  // Unstable assertion: assertSame(jSONArray0, jSONArray1);
      //  // Unstable assertion: assertNotSame(jSONArray2, jSONArray0);
      //  // Unstable assertion: assertNotSame(jSONArray2, jSONArray1);
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertFalse(jSONArray0.equals((Object)jSONArray2));
      //  // Unstable assertion: assertFalse(jSONArray2.equals((Object)jSONArray0));
      //  // Unstable assertion: assertFalse(jSONArray2.equals((Object)jSONArray1));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertEquals(" (null).", string1);
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      try { 
        jSONArray2.getEnum(class0, 0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a enum of type java.io.StringWriter@0000000011 (class java.lang.String : java.sql.SQLTimeoutException@0000000001).
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(959, 634L);
      assertEquals(960, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(960, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      Spliterator<Object> spliterator0 = jSONArray1.spliterator();
      assertEquals(960, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(960, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(spliterator0);
      
      JSONArray jSONArray2 = jSONArray0.put((-2416L));
      assertEquals(961, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(961, jSONArray2.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertNotNull(jSONArray2);
      
      double double0 = jSONArray0.optDouble(959);
      assertEquals(961, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertEquals(634.0, double0, 0.01);
      
      JSONArray jSONArray3 = jSONArray1.put(0L);
      assertEquals(962, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(962, jSONArray1.length());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(962, jSONArray3.length());
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray0);
      assertNotNull(jSONArray3);
      
      Number number0 = jSONArray2.optNumber(959);
      assertEquals(962, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(962, jSONArray2.length());
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray0);
      assertNotNull(number0);
      assertEquals(634L, number0);
      
      JSONArray jSONArray4 = jSONArray3.put((double) (-2416L));
      assertEquals(963, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(963, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(963, jSONArray3.length());
      assertEquals(963, jSONArray4.length());
      assertFalse(jSONArray4.isEmpty());
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray4);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray4);
      assertSame(jSONArray4, jSONArray3);
      assertSame(jSONArray4, jSONArray1);
      assertSame(jSONArray4, jSONArray2);
      assertSame(jSONArray4, jSONArray0);
      assertNotNull(jSONArray4);
      
      int int0 = jSONArray1.getInt(959);
      assertEquals(963, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(963, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray4);
      assertEquals(634, int0);
      
      Class<Answers> class0 = Answers.class;
      try { 
        jSONArray0.getEnum(class0, 959);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[959] is not a enum of type java.io.StringWriter@0000000015 (class java.lang.Long : 634).
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      int int0 = 909;
      JSONArray jSONArray1 = jSONArray0.put(909);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      JSONArray jSONArray2 = new JSONArray(909);
      assertEquals(0, jSONArray2.length());
      assertTrue(jSONArray2.isEmpty());
      assertNotNull(jSONArray2);
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      
      String string0 = jSONArray1.join("NNr8u8fR`Iz_qUB");
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray1, jSONArray2);
      assertNotNull(string0);
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray1.equals((Object)jSONArray2));
      
      HashMap<ClientInfoStatus, JSONObject> hashMap0 = new HashMap<ClientInfoStatus, JSONObject>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONArray jSONArray3 = jSONArray2.put(909, (Map<?, ?>) hashMap0);
      assertEquals(910, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(910, jSONArray3.length());
      assertNotSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray3);
      assertNotSame(jSONArray2, jSONArray0);
      assertNotSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray2);
      assertNotSame(jSONArray3, jSONArray0);
      assertNotNull(jSONArray3);
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertFalse(jSONArray3.equals((Object)jSONArray1));
      assertFalse(jSONArray3.equals((Object)jSONArray0));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-10);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-10)}, byteArray0);
      
      float float0 = jSONArray2.optFloat(909, (float) 909);
      assertEquals(910, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertNotSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray3);
      assertNotSame(jSONArray2, jSONArray0);
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertEquals(909.0F, float0, 0.01F);
      
      Spliterator<Object> spliterator0 = jSONArray2.spliterator();
      assertEquals(910, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertNotSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray3);
      assertNotSame(jSONArray2, jSONArray0);
      assertNotNull(spliterator0);
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      
      Class<Answers> class0 = Answers.class;
      try { 
        jSONArray2.getEnum(class0, 909);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[909] is not a enum of type java.io.StringWriter@0000000013 (class org.json.JSONObject).
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      float float0 = jSONArray0.optFloat(44);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertEquals(Float.NaN, float0, 0.01F);
      
      JSONArray jSONArray1 = jSONArray0.put(0, 1L);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNotNull(sQLClientInfoException0);
      
      long long0 = jSONArray0.optLong(0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertSame(jSONArray0, jSONArray1);
      assertEquals(1L, long0);
      
      Throwable[] throwableArray0 = sQLClientInfoException0.getSuppressed();
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals(0, throwableArray0.length);
      assertNotNull(throwableArray0);
      
      sQLClientInfoException0.setNextException((SQLException) null);
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      
      DataTruncation dataTruncation0 = new DataTruncation(0, false, true, 0, 0, sQLClientInfoException0);
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertNotNull(dataTruncation0);
      
      JSONArray jSONArray2 = jSONArray0.putAll((Object) dataTruncation0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3, jSONArray0.length());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(3, jSONArray2.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertNotNull(jSONArray2);
      
      JSONArray jSONArray3 = jSONArray1.put(0.0F);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(4, jSONArray0.length());
      assertEquals(4, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(4, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray0);
      assertNotNull(jSONArray3);
      
      List<Object> list0 = jSONArray0.toList();
      assertFalse(jSONArray0.isEmpty());
      assertEquals(4, jSONArray0.length());
      assertFalse(list0.isEmpty());
      assertEquals(4, list0.size());
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertNotNull(list0);
      assertTrue(list0.contains(0.0F));
      assertFalse(list0.contains(false));
      
      Object object0 = jSONArray0.remove(0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3, jSONArray0.length());
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertNotNull(object0);
      assertTrue(object0.equals((Object)long0));
      assertEquals(1L, object0);
      
      int int0 = 0;
      double double0 = Double.NaN;
      String string0 = jSONArray2.toString((-701));
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3, jSONArray0.length());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(3, jSONArray2.length());
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertNotNull(string0);
      
      boolean boolean0 = jSONArray0.optBoolean(11);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3, jSONArray0.length());
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertFalse(boolean0);
      
      try { 
        jSONArray2.getJSONObject(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a JSONObject (class java.sql.DataTruncation).
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Float float0 = Float.valueOf((-287.649F));
      assertNotNull(float0);
      assertEquals((-287.649F), (float)float0, 0.01F);
      
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put((double) (-287.649F));
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      JSONArray jSONArray2 = jSONArray0.put((Object) float0);
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(2, jSONArray2.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertNotNull(jSONArray2);
      
      float float1 = jSONArray2.optFloat(1, (float) 1);
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(2, jSONArray2.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertEquals((-287.649F), float1, 0.01F);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte) (-51);
      byteArray0[7] = (byte)50;
      byteArray0[8] = (byte) (-78);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals((byte) (-78), bigInteger0.byteValue());
      assertEquals((short)12978, bigInteger0.shortValue());
      assertEquals(9, byteArray0.length);
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte)96, (byte)41, (byte)10, (byte) (-98), (byte) (-101), (byte)123, (byte) (-51), (byte)50, (byte) (-78)}, byteArray0);
      
      BigInteger bigInteger1 = jSONArray0.optBigInteger((-1261), bigInteger0);
      assertEquals((short)12978, bigInteger1.shortValue());
      assertEquals((byte) (-78), bigInteger1.byteValue());
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals((byte) (-78), bigInteger0.byteValue());
      assertEquals((short)12978, bigInteger0.shortValue());
      assertSame(bigInteger1, bigInteger0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(bigInteger0, bigInteger1);
      assertEquals(9, byteArray0.length);
      assertNotNull(bigInteger1);
      assertArrayEquals(new byte[] {(byte)96, (byte)41, (byte)10, (byte) (-98), (byte) (-101), (byte)123, (byte) (-51), (byte)50, (byte) (-78)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      LinkedHashSet<Double> linkedHashSet0 = new LinkedHashSet<Double>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = linkedHashSet0.add((Double) null);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedHashSet0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.putAll((Collection<?>) linkedHashSet0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      boolean boolean2 = jSONArray0.optBoolean(5592);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertSame(jSONArray0, jSONArray1);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      JSONArray jSONArray2 = jSONArray1.put(0.0F);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3, jSONArray0.length());
      assertEquals(3, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(3, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertNotNull(jSONArray2);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      JSONArray jSONArray3 = jSONArray2.put(5592, 0.0F);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(5593, jSONArray0.length());
      assertEquals(5593, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(5593, jSONArray2.length());
      assertEquals(5593, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray2);
      assertNotNull(jSONArray3);
      
      // Undeclared exception!
      jSONArray0.join("Z28b9.a(tOP0");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(79, (long) 79);
      assertEquals(80, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(80, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      BigDecimal bigDecimal0 = jSONArray1.getBigDecimal(79);
      assertEquals(80, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(80, jSONArray1.length());
      assertEquals((byte)79, bigDecimal0.byteValue());
      assertEquals((short)79, bigDecimal0.shortValue());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(bigDecimal0);
      
      Number number0 = jSONArray1.getNumber(79);
      assertEquals(80, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(80, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(number0);
      assertEquals(79L, number0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3071);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(3071, 0L);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3072, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(3072, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      JSONArray jSONArray2 = jSONArray0.put(3071, (Object) null);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3072, jSONArray0.length());
      assertEquals(3072, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertNotNull(jSONArray2);
      
      try { 
        jSONArray0.getLong(427);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[427] is not a long (class org.json.JSONObject$Null : null).
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put((-2416L));
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      Number number0 = jSONArray1.optNumber(0);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(number0);
      assertEquals((-2416L), number0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JSONArray jSONArray2 = jSONArray1.put(0.0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(2, jSONArray2.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertNotNull(jSONArray2);
      
      TreeSet<DataTruncation> treeSet0 = new TreeSet<DataTruncation>();
      assertNotNull(treeSet0);
      
      JSONArray jSONArray3 = jSONArray1.putAll((Collection<?>) treeSet0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(2, jSONArray3.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray0);
      assertNotNull(jSONArray3);
      
      Short short0 = new Short((short) (-677));
      assertNotNull(short0);
      assertEquals((short) (-677), (short)short0);
      
      try { 
        jSONArray0.putAll((Object) short0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      ArrayDeque<SQLTransactionRollbackException> arrayDeque1 = arrayDeque0.clone();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertNotNull(arrayDeque1);
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) arrayDeque1);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      
      boolean boolean0 = jSONArray0.optBoolean(11, true);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertTrue(boolean0);
      
      JSONArray jSONArray1 = jSONArray0.put(11, 0.0F);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(12, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(12, jSONArray1.length());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      
      JSONTokener jSONTokener0 = new JSONTokener("Y1fzc;/\"HpT+Zr");
      assertFalse(jSONTokener0.end());
      assertNotNull(jSONTokener0);
      
      char char0 = jSONTokener0.skipTo(']');
      assertTrue(jSONTokener0.end());
      assertEquals('\u0000', char0);
      
      JSONException jSONException0 = jSONTokener0.syntaxError("number");
      assertTrue(jSONTokener0.end());
      assertNotNull(jSONException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Y1fzc;/\"HpT+Zr", jSONException0);
      assertTrue(jSONTokener0.end());
      assertEquals("Y1fzc;/\"HpT+Zr", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: Y1fzc;/\"HpT+Zr", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNotNull(sQLTransactionRollbackException0);
      
      boolean boolean1 = arrayDeque0.offer(sQLTransactionRollbackException0);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(jSONTokener0.end());
      assertEquals("Y1fzc;/\"HpT+Zr", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: Y1fzc;/\"HpT+Zr", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      
      HashMap<SQLIntegrityConstraintViolationException, SQLException> hashMap0 = new HashMap<SQLIntegrityConstraintViolationException, SQLException>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONArray jSONArray2 = jSONArray1.put(0, (Map<?, ?>) hashMap0);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(12, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(12, jSONArray1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(12, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertNotNull(jSONArray2);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      assertFalse(arrayDeque1.contains(sQLTransactionRollbackException0));
      
      List<Object> list0 = jSONArray0.toList();
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(12, jSONArray0.length());
      assertFalse(list0.isEmpty());
      assertEquals(12, list0.size());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertNotNull(list0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      assertFalse(arrayDeque1.contains(sQLTransactionRollbackException0));
      assertFalse(list0.contains("number"));
      assertTrue(list0.contains(0.0F));
      
      float float0 = jSONArray1.getFloat(11);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(12, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(12, jSONArray1.length());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      assertFalse(arrayDeque1.contains(sQLTransactionRollbackException0));
      
      long long0 = jSONArray1.optLong((-583));
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(12, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(12, jSONArray1.length());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertEquals(0L, long0);
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      assertFalse(arrayDeque1.contains(sQLTransactionRollbackException0));
      
      double double0 = jSONArray0.getDouble(11);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(12, jSONArray0.length());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertEquals(0.0, double0, 0.01);
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      assertFalse(arrayDeque1.contains(sQLTransactionRollbackException0));
      
      JSONArray jSONArray3 = new JSONArray(11);
      assertEquals(0, jSONArray3.length());
      assertTrue(jSONArray3.isEmpty());
      assertNotNull(jSONArray3);
      assertFalse(jSONArray3.equals((Object)jSONArray1));
      assertFalse(jSONArray3.equals((Object)jSONArray2));
      assertFalse(jSONArray3.equals((Object)jSONArray0));
      
      Number number0 = jSONArray1.getNumber(11);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(12, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(12, jSONArray1.length());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray1, jSONArray3);
      assertNotNull(number0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertTrue(number0.equals((Object)float0));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertFalse(jSONArray0.equals((Object)jSONArray3));
      assertFalse(jSONArray1.equals((Object)jSONArray3));
      assertEquals(0.0F, number0);
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      assertFalse(arrayDeque1.contains(sQLTransactionRollbackException0));
      
      int int0 = 0;
      boolean boolean2 = jSONArray2.similar(hashMap0);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(12, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(12, jSONArray1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(12, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray1, jSONArray3);
      assertNotSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertFalse(jSONArray0.equals((Object)jSONArray3));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(jSONArray1.equals((Object)jSONArray3));
      assertFalse(jSONArray2.equals((Object)jSONArray3));
      assertFalse(boolean2);
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      assertFalse(arrayDeque1.contains(sQLTransactionRollbackException0));
      
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      ArrayDeque<SQLTransactionRollbackException> arrayDeque1 = arrayDeque0.clone();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertNotNull(arrayDeque1);
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) arrayDeque1);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      
      boolean boolean0 = jSONArray0.optBoolean(11, true);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertTrue(boolean0);
      
      int int0 = jSONArray0.optInt((-583), 11);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertEquals(11, int0);
      
      JSONArray jSONArray1 = jSONArray0.put(11, 0.0F);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(12, jSONArray0.length());
      assertEquals(12, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONTokener jSONTokener0 = new JSONTokener("Y1fzc;/\"HpT+Zr");
      assertFalse(jSONTokener0.end());
      assertNotNull(jSONTokener0);
      
      char char0 = jSONTokener0.skipTo(']');
      assertTrue(jSONTokener0.end());
      assertEquals('\u0000', char0);
      
      JSONException jSONException0 = jSONTokener0.syntaxError("number");
      assertTrue(jSONTokener0.end());
      assertNotNull(jSONException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Y1fzc;/\"HpT+Zr", jSONException0);
      assertTrue(jSONTokener0.end());
      assertEquals("java.sql.SQLTransactionRollbackException: Y1fzc;/\"HpT+Zr", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("Y1fzc;/\"HpT+Zr", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNotNull(sQLTransactionRollbackException0);
      
      boolean boolean1 = arrayDeque0.offer(sQLTransactionRollbackException0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertTrue(jSONTokener0.end());
      assertEquals("java.sql.SQLTransactionRollbackException: Y1fzc;/\"HpT+Zr", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("Y1fzc;/\"HpT+Zr", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      
      HashMap<SQLIntegrityConstraintViolationException, SQLException> hashMap0 = new HashMap<SQLIntegrityConstraintViolationException, SQLException>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONArray jSONArray2 = jSONArray1.put(0, (Map<?, ?>) hashMap0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(12, jSONArray0.length());
      assertEquals(12, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(12, jSONArray2.length());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertNotNull(jSONArray2);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      assertFalse(arrayDeque1.contains(sQLTransactionRollbackException0));
      
      List<Object> list0 = jSONArray0.toList();
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(12, jSONArray0.length());
      assertFalse(list0.isEmpty());
      assertEquals(12, list0.size());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertNotNull(list0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      assertFalse(arrayDeque1.contains(sQLTransactionRollbackException0));
      assertFalse(list0.contains("number"));
      assertTrue(list0.contains(0.0F));
      
      float float0 = jSONArray1.getFloat(11);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(12, jSONArray0.length());
      assertEquals(12, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      assertFalse(arrayDeque1.contains(sQLTransactionRollbackException0));
      
      long long0 = jSONArray1.optLong((-583));
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(12, jSONArray0.length());
      assertEquals(12, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertEquals(0L, long0);
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      assertFalse(arrayDeque1.contains(sQLTransactionRollbackException0));
      
      JSONArray jSONArray3 = new JSONArray(11);
      assertEquals(0, jSONArray3.length());
      assertTrue(jSONArray3.isEmpty());
      assertNotNull(jSONArray3);
      assertFalse(jSONArray3.equals((Object)jSONArray1));
      assertFalse(jSONArray3.equals((Object)jSONArray0));
      assertFalse(jSONArray3.equals((Object)jSONArray2));
      
      Number number0 = jSONArray1.getNumber(11);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(12, jSONArray0.length());
      assertEquals(12, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertNotNull(number0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertTrue(number0.equals((Object)float0));
      assertFalse(jSONArray0.equals((Object)jSONArray3));
      assertFalse(jSONArray1.equals((Object)jSONArray3));
      assertEquals(0.0F, number0);
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      assertFalse(arrayDeque1.contains(sQLTransactionRollbackException0));
      
      int int1 = 0;
      boolean boolean2 = jSONArray2.similar(hashMap0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(12, jSONArray0.length());
      assertEquals(12, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(12, jSONArray2.length());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertNotSame(jSONArray2, jSONArray3);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertFalse(jSONArray0.equals((Object)jSONArray3));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(jSONArray1.equals((Object)jSONArray3));
      assertFalse(jSONArray2.equals((Object)jSONArray3));
      assertFalse(boolean2);
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      assertFalse(arrayDeque1.contains(sQLTransactionRollbackException0));
      
      Number number1 = jSONArray2.optNumber((-1639), number0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(12, jSONArray0.length());
      assertEquals(12, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(12, jSONArray2.length());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertNotSame(jSONArray2, jSONArray3);
      assertNotNull(number1);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertTrue(number0.equals((Object)float0));
      assertFalse(jSONArray0.equals((Object)jSONArray3));
      assertTrue(number1.equals((Object)float0));
      assertFalse(jSONArray1.equals((Object)jSONArray3));
      assertFalse(jSONArray2.equals((Object)jSONArray3));
      assertEquals(0.0F, number1);
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      assertFalse(arrayDeque1.contains(sQLTransactionRollbackException0));
      
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      int int0 = 959;
      JSONArray jSONArray1 = jSONArray0.put(959, 634L);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(960, jSONArray0.length());
      assertEquals(960, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      Spliterator<Object> spliterator0 = jSONArray1.spliterator();
      assertFalse(jSONArray0.isEmpty());
      assertEquals(960, jSONArray0.length());
      assertEquals(960, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(spliterator0);
      
      JSONArray jSONArray2 = jSONArray0.put((-2416L));
      assertFalse(jSONArray0.isEmpty());
      assertEquals(961, jSONArray0.length());
      assertEquals(961, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertNotNull(jSONArray2);
      
      JSONArray jSONArray3 = jSONArray1.put((-2416L));
      assertFalse(jSONArray0.isEmpty());
      assertEquals(962, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(962, jSONArray1.length());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(962, jSONArray3.length());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray0);
      assertNotNull(jSONArray3);
      
      double double0 = jSONArray0.optDouble(959);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(962, jSONArray0.length());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertEquals(634.0, double0, 0.01);
      
      String string0 = jSONArray1.toString((-1479));
      assertFalse(jSONArray0.isEmpty());
      assertEquals(962, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(962, jSONArray1.length());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(string0);
      
      JSONArray jSONArray4 = jSONArray3.put(0L);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(963, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(963, jSONArray1.length());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(963, jSONArray3.length());
      assertFalse(jSONArray4.isEmpty());
      assertEquals(963, jSONArray4.length());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray4);
      assertSame(jSONArray3, jSONArray4);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray4, jSONArray1);
      assertSame(jSONArray4, jSONArray0);
      assertSame(jSONArray4, jSONArray2);
      assertSame(jSONArray4, jSONArray3);
      assertNotNull(jSONArray4);
      
      Number number0 = jSONArray2.optNumber(0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(963, jSONArray0.length());
      assertEquals(963, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray4);
      assertSame(jSONArray2, jSONArray3);
      assertNull(number0);
      
      try { 
        jSONArray1.getInt(93);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[93] is not a int (class org.json.JSONObject$Null : null).
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      ArrayDeque<SQLTransactionRollbackException> arrayDeque1 = arrayDeque0.clone();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertNotNull(arrayDeque1);
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) arrayDeque1);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      
      int int0 = 11;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = jSONArray0.optInt((-583), 11);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertTrue(int1 == int0);
      assertEquals(11, int1);
      
      JSONArray jSONArray1 = jSONArray0.put(11, (float) (-583));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(12, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(12, jSONArray1.length());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      
      JSONArray jSONArray2 = jSONArray1.put(11, (float) 11);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(12, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(12, jSONArray1.length());
      assertEquals(12, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertNotNull(jSONArray2);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      
      JSONTokener jSONTokener0 = new JSONTokener("Y1fzc;/\"HpT+Zr");
      assertFalse(jSONTokener0.end());
      assertNotNull(jSONTokener0);
      
      JSONException jSONException0 = jSONTokener0.syntaxError("number");
      assertFalse(jSONTokener0.end());
      assertNotNull(jSONException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Y1fzc;/\"HpT+Zr", jSONException0);
      assertFalse(jSONTokener0.end());
      assertEquals("java.sql.SQLTransactionRollbackException: Y1fzc;/\"HpT+Zr", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("Y1fzc;/\"HpT+Zr", sQLTransactionRollbackException0.getMessage());
      assertNotNull(sQLTransactionRollbackException0);
      
      boolean boolean2 = arrayDeque0.offer(sQLTransactionRollbackException0);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertFalse(jSONTokener0.end());
      assertEquals("java.sql.SQLTransactionRollbackException: Y1fzc;/\"HpT+Zr", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("Y1fzc;/\"HpT+Zr", sQLTransactionRollbackException0.getMessage());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      
      HashMap<SQLIntegrityConstraintViolationException, SQLException> hashMap0 = new HashMap<SQLIntegrityConstraintViolationException, SQLException>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Throwable[] throwableArray0 = sQLTransactionRollbackException0.getSuppressed();
      assertFalse(jSONTokener0.end());
      assertEquals("java.sql.SQLTransactionRollbackException: Y1fzc;/\"HpT+Zr", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("Y1fzc;/\"HpT+Zr", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, throwableArray0.length);
      assertNotNull(throwableArray0);
      
      JSONArray jSONArray3 = jSONArray1.put(0, (Map<?, ?>) hashMap0);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(12, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(12, jSONArray1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(12, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray1);
      assertNotNull(jSONArray3);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      assertFalse(arrayDeque1.contains(sQLTransactionRollbackException0));
      
      List<Object> list0 = jSONArray0.toList();
      assertEquals(12, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(12, jSONArray0.length());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertNotNull(list0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertFalse(list0.contains((-583)));
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      assertFalse(arrayDeque1.contains(sQLTransactionRollbackException0));
      
      float float0 = jSONArray1.getFloat(11);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(12, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(12, jSONArray1.length());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertEquals(11.0F, float0, 0.01F);
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      assertFalse(arrayDeque1.contains(sQLTransactionRollbackException0));
      
      try { 
        jSONArray3.put((-4803), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-4803] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ArrayDeque<SQLTimeoutException> arrayDeque0 = new ArrayDeque<SQLTimeoutException>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      SQLDataException sQLDataException0 = new SQLDataException(").");
      assertEquals("java.sql.SQLDataException: ).", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals(").", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertNotNull(sQLDataException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getMessage());
      assertNotNull(sQLRecoverableException0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) ").";
      objectArray0[1] = (Object) ").";
      objectArray0[3] = (Object) sQLDataException0;
      objectArray0[5] = (Object) arrayDeque0;
      objectArray0[7] = (Object) sQLRecoverableException0;
      Throwable[] throwableArray0 = sQLRecoverableException0.getSuppressed();
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals(0, throwableArray0.length);
      assertNotNull(throwableArray0);
      
      sQLDataException0.addSuppressed(sQLRecoverableException0);
      assertEquals("java.sql.SQLDataException: ).", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals(").", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getMessage());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(").", "hy/MqSH3U~ESI&~", 432, sQLDataException0);
      assertEquals("java.sql.SQLDataException: ).", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals(").", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(432, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: ).", sQLTimeoutException0.toString());
      assertEquals(").", sQLTimeoutException0.getMessage());
      assertEquals("hy/MqSH3U~ESI&~", sQLTimeoutException0.getSQLState());
      assertNotNull(sQLTimeoutException0);
      
      boolean boolean0 = arrayDeque0.add(sQLTimeoutException0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals("java.sql.SQLDataException: ).", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals(").", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(432, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: ).", sQLTimeoutException0.toString());
      assertEquals(").", sQLTimeoutException0.getMessage());
      assertEquals("hy/MqSH3U~ESI&~", sQLTimeoutException0.getSQLState());
      assertTrue(boolean0);
      assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) arrayDeque0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertNotNull(jSONArray0);
      assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      JSONArray jSONArray1 = new JSONArray((JSONArray) null);
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      
      boolean boolean1 = jSONArray1.optBoolean(0, true);
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertNotSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      float float0 = jSONArray1.optFloat((-431), (-166.505F));
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertNotSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertEquals((-166.505F), float0, 0.01F);
      
      Object object0 = jSONArray0.opt(0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertNotSame(jSONArray0, jSONArray1);
      assertNotNull(object0);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      String string0 = jSONArray1.optString((-431), " (null).");
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertNotSame(jSONArray1, jSONArray0);
      assertNotNull(string0);
      assertFalse(string0.equals((Object)object0));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertEquals(" (null).", string0);
      
      String string1 = jSONArray1.optString(1475, ").");
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertNotSame(jSONArray1, jSONArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)object0));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertEquals(").", string1);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("U\">QJ<DjR5\"M'tw fIS");
      assertNotNull(mockPrintWriter0);
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("de", locale1.toString());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      
      PrintWriter printWriter0 = mockPrintWriter0.format(locale1, "timeout() should not be used with atMost() because...", objectArray0);
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("de", locale1.toString());
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals(8, objectArray0.length);
      assertNotNull(printWriter0);
      
      Writer writer0 = jSONArray0.write((Writer) printWriter0, 45, 45);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("de", locale1.toString());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertSame(mockPrintWriter0, writer0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertSame(printWriter0, writer0);
      assertSame(printWriter0, mockPrintWriter0);
      assertSame(writer0, mockPrintWriter0);
      assertSame(writer0, printWriter0);
      assertNotSame(jSONArray0, jSONArray1);
      assertEquals(8, objectArray0.length);
      assertNotNull(writer0);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertTrue(arrayDeque0.contains(sQLTimeoutException0));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(2289, (float) 2289);
      assertEquals(2290, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(2290, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      double double0 = jSONArray0.optDouble(2289, (-769.7851534029484));
      assertEquals(2290, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertEquals(2289.0, double0, 0.01);
      
      BigInteger bigInteger0 = jSONArray0.getBigInteger(2289);
      assertEquals(2290, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals((short)2289, bigInteger0.shortValue());
      assertEquals((byte) (-15), bigInteger0.byteValue());
      assertSame(jSONArray0, jSONArray1);
      assertNotNull(bigInteger0);
      
      long long0 = jSONArray0.optLong(2289, (-665L));
      assertEquals(2290, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertEquals(2289L, long0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(1395.0F);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      boolean boolean0 = jSONArray0.similar(jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertTrue(boolean0);
      
      JSONArray jSONArray2 = jSONArray0.putAll((Object) jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(2, jSONArray2.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertNotNull(jSONArray2);
      
      SQLWarning sQLWarning0 = new SQLWarning((Throwable) null);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertNotNull(sQLWarning0);
      
      JSONArray jSONArray3 = jSONArray1.put(251, 0.0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(252, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(252, jSONArray1.length());
      assertEquals(252, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray1);
      assertNotNull(jSONArray3);
      
      long long0 = jSONArray0.optLong(1415);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(252, jSONArray0.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertEquals(0L, long0);
      
      JSONArray jSONArray4 = jSONArray0.putAll((Object) sQLWarning0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(253, jSONArray0.length());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(253, jSONArray4.length());
      assertFalse(jSONArray4.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray4, jSONArray2);
      assertSame(jSONArray4, jSONArray3);
      assertSame(jSONArray4, jSONArray1);
      assertSame(jSONArray4, jSONArray0);
      assertNotNull(jSONArray4);
      
      int int0 = 11;
      try { 
        jSONArray0.getDouble(11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[11] is not a double (class org.json.JSONObject$Null : null).
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      ArrayDeque<SQLTransactionRollbackException> arrayDeque1 = arrayDeque0.clone();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertNotNull(arrayDeque1);
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) arrayDeque1);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      
      boolean boolean0 = jSONArray0.optBoolean(11, true);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertTrue(boolean0);
      
      int int0 = jSONArray0.optInt((-583), 11);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertEquals(11, int0);
      
      JSONArray jSONArray1 = jSONArray0.put(11, 0.0F);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(12, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(12, jSONArray1.length());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      
      JSONTokener jSONTokener0 = new JSONTokener("Y1fzc;/\"HpT+Zr");
      assertFalse(jSONTokener0.end());
      assertNotNull(jSONTokener0);
      
      char char0 = jSONTokener0.skipTo(']');
      assertTrue(jSONTokener0.end());
      assertEquals('\u0000', char0);
      
      JSONException jSONException0 = jSONTokener0.syntaxError("number");
      assertTrue(jSONTokener0.end());
      assertNotNull(jSONException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Y1fzc;/\"HpT+Zr", jSONException0);
      assertTrue(jSONTokener0.end());
      assertEquals("java.sql.SQLTransactionRollbackException: Y1fzc;/\"HpT+Zr", sQLTransactionRollbackException0.toString());
      assertEquals("Y1fzc;/\"HpT+Zr", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNotNull(sQLTransactionRollbackException0);
      
      boolean boolean1 = arrayDeque0.offer(sQLTransactionRollbackException0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertTrue(jSONTokener0.end());
      assertEquals("java.sql.SQLTransactionRollbackException: Y1fzc;/\"HpT+Zr", sQLTransactionRollbackException0.toString());
      assertEquals("Y1fzc;/\"HpT+Zr", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      
      HashMap<SQLIntegrityConstraintViolationException, SQLException> hashMap0 = new HashMap<SQLIntegrityConstraintViolationException, SQLException>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONArray jSONArray2 = jSONArray1.put(0, (Map<?, ?>) hashMap0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(12, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(12, jSONArray1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(12, jSONArray2.length());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertNotNull(jSONArray2);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      assertFalse(arrayDeque1.contains(sQLTransactionRollbackException0));
      
      Number number0 = jSONArray2.optNumber(11);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(12, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(12, jSONArray1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(12, jSONArray2.length());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertNotNull(number0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertEquals(0.0F, number0);
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      assertFalse(arrayDeque1.contains(sQLTransactionRollbackException0));
      
      List<Object> list0 = jSONArray0.toList();
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(12, jSONArray0.length());
      assertFalse(list0.isEmpty());
      assertEquals(12, list0.size());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertNotNull(list0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      assertFalse(arrayDeque1.contains(sQLTransactionRollbackException0));
      assertFalse(list0.contains(11));
      assertTrue(list0.contains(0.0F));
      
      float float0 = jSONArray1.getFloat(11);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(12, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(12, jSONArray1.length());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      assertFalse(arrayDeque1.contains(sQLTransactionRollbackException0));
      
      long long0 = jSONArray1.optLong((-583));
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(12, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(12, jSONArray1.length());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertEquals(0L, long0);
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      assertFalse(arrayDeque1.contains(sQLTransactionRollbackException0));
      
      JSONArray jSONArray3 = new JSONArray(11);
      assertEquals(0, jSONArray3.length());
      assertTrue(jSONArray3.isEmpty());
      assertNotNull(jSONArray3);
      assertFalse(jSONArray3.equals((Object)jSONArray0));
      assertFalse(jSONArray3.equals((Object)jSONArray1));
      assertFalse(jSONArray3.equals((Object)jSONArray2));
      
      Number number1 = jSONArray1.getNumber(11);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(12, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(12, jSONArray1.length());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray0, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray2);
      assertNotNull(number1);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertTrue(number1.equals((Object)float0));
      assertFalse(jSONArray0.equals((Object)jSONArray3));
      assertFalse(jSONArray1.equals((Object)jSONArray3));
      assertEquals(0.0F, number1);
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      assertFalse(arrayDeque1.contains(sQLTransactionRollbackException0));
      
      int int1 = 0;
      boolean boolean2 = jSONArray2.similar(hashMap0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(12, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(12, jSONArray1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(12, jSONArray2.length());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray0, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertFalse(jSONArray0.equals((Object)jSONArray3));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(jSONArray1.equals((Object)jSONArray3));
      assertFalse(jSONArray2.equals((Object)jSONArray3));
      assertFalse(boolean2);
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      assertFalse(arrayDeque1.contains(sQLTransactionRollbackException0));
      
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      LinkedHashSet<Double> linkedHashSet0 = new LinkedHashSet<Double>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.putAll((Collection<?>) linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = jSONArray0.optBoolean(5592);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertSame(jSONArray0, jSONArray1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      JSONArray jSONArray2 = jSONArray1.put(0.0F);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(1, jSONArray2.length());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertNotNull(jSONArray2);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      JSONArray jSONArray3 = jSONArray2.put(258, (-274.1419F));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(259, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(259, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(259, jSONArray2.length());
      assertEquals(259, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray2);
      assertNotNull(jSONArray3);
      
      String string0 = jSONArray0.join("Z28b9.a(tOP0");
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(259, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)17;
      byte byte0 = (byte)91;
      StringWriter stringWriter0 = new StringWriter(5592);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      // Undeclared exception!
      jSONArray2.write((Writer) stringWriter0, (int) (byte)17, (int) (byte)91);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ArrayDeque<SQLTimeoutException> arrayDeque0 = new ArrayDeque<SQLTimeoutException>();
      //  // Unstable assertion: assertEquals(0, arrayDeque0.size());
      //  // Unstable assertion: assertTrue(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertNotNull(arrayDeque0);
      
      SQLDataException sQLDataException0 = new SQLDataException(").");
      //  // Unstable assertion: assertNull(sQLDataException0.getSQLState());
      //  // Unstable assertion: assertEquals(0, sQLDataException0.getErrorCode());
      //  // Unstable assertion: assertEquals("java.sql.SQLDataException: ).", sQLDataException0.toString());
      //  // Unstable assertion: assertEquals(").", sQLDataException0.getMessage());
      //  // Unstable assertion: assertNotNull(sQLDataException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      //  // Unstable assertion: assertEquals(0, sQLRecoverableException0.getErrorCode());
      //  // Unstable assertion: assertNull(sQLRecoverableException0.getSQLState());
      //  // Unstable assertion: assertNull(sQLRecoverableException0.getMessage());
      //  // Unstable assertion: assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      //  // Unstable assertion: assertNotNull(sQLRecoverableException0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(432);
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertNotNull(byteArrayOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      //  // Unstable assertion: assertNotNull(mockPrintStream0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) ").";
      objectArray0[1] = (Object) ").";
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) sQLDataException0;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      //  // Unstable assertion: assertFalse(boolean0);
      
      objectArray0[4] = (Object) byteArrayOutputStream0;
      objectArray0[5] = (Object) arrayDeque0;
      objectArray0[6] = (Object) byteArrayOutputStream0;
      objectArray0[7] = (Object) sQLRecoverableException0;
      PrintStream printStream0 = mockPrintStream0.format("_e~\"BGa$/oH", objectArray0);
      //  // Unstable assertion: assertEquals("_e~\"BGa$/oH", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(11, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertSame(mockPrintStream0, printStream0);
      //  // Unstable assertion: assertSame(printStream0, mockPrintStream0);
      //  // Unstable assertion: assertEquals(8, objectArray0.length);
      //  // Unstable assertion: assertNotNull(printStream0);
      
      sQLRecoverableException0.printStackTrace(printStream0);
      //  // Unstable assertion: assertEquals(0, sQLRecoverableException0.getErrorCode());
      //  // Unstable assertion: assertNull(sQLRecoverableException0.getSQLState());
      //  // Unstable assertion: assertNull(sQLRecoverableException0.getMessage());
      //  // Unstable assertion: assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      //  // Unstable assertion: assertEquals(1102, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertSame(mockPrintStream0, printStream0);
      //  // Unstable assertion: assertSame(printStream0, mockPrintStream0);
      //  // Unstable assertion: assertEquals(8, objectArray0.length);
      
      Throwable[] throwableArray0 = sQLRecoverableException0.getSuppressed();
      //  // Unstable assertion: assertEquals(0, sQLRecoverableException0.getErrorCode());
      //  // Unstable assertion: assertNull(sQLRecoverableException0.getSQLState());
      //  // Unstable assertion: assertNull(sQLRecoverableException0.getMessage());
      //  // Unstable assertion: assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      //  // Unstable assertion: assertEquals(0, throwableArray0.length);
      //  // Unstable assertion: assertNotNull(throwableArray0);
      
      sQLDataException0.addSuppressed(sQLRecoverableException0);
      //  // Unstable assertion: assertNull(sQLDataException0.getSQLState());
      //  // Unstable assertion: assertEquals(0, sQLDataException0.getErrorCode());
      //  // Unstable assertion: assertEquals("java.sql.SQLDataException: ).", sQLDataException0.toString());
      //  // Unstable assertion: assertEquals(").", sQLDataException0.getMessage());
      //  // Unstable assertion: assertEquals(0, sQLRecoverableException0.getErrorCode());
      //  // Unstable assertion: assertNull(sQLRecoverableException0.getSQLState());
      //  // Unstable assertion: assertNull(sQLRecoverableException0.getMessage());
      //  // Unstable assertion: assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(").", "hy/MqSH3U~ESI&~", 432, sQLDataException0);
      //  // Unstable assertion: assertNull(sQLDataException0.getSQLState());
      //  // Unstable assertion: assertEquals(0, sQLDataException0.getErrorCode());
      //  // Unstable assertion: assertEquals("java.sql.SQLDataException: ).", sQLDataException0.toString());
      //  // Unstable assertion: assertEquals(").", sQLDataException0.getMessage());
      //  // Unstable assertion: assertEquals("java.sql.SQLTimeoutException: ).", sQLTimeoutException0.toString());
      //  // Unstable assertion: assertEquals("hy/MqSH3U~ESI&~", sQLTimeoutException0.getSQLState());
      //  // Unstable assertion: assertEquals(432, sQLTimeoutException0.getErrorCode());
      //  // Unstable assertion: assertEquals(").", sQLTimeoutException0.getMessage());
      //  // Unstable assertion: assertNotNull(sQLTimeoutException0);
      
      boolean boolean1 = arrayDeque0.add(sQLTimeoutException0);
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertNull(sQLDataException0.getSQLState());
      //  // Unstable assertion: assertEquals(0, sQLDataException0.getErrorCode());
      //  // Unstable assertion: assertEquals("java.sql.SQLDataException: ).", sQLDataException0.toString());
      //  // Unstable assertion: assertEquals(").", sQLDataException0.getMessage());
      //  // Unstable assertion: assertEquals("java.sql.SQLTimeoutException: ).", sQLTimeoutException0.toString());
      //  // Unstable assertion: assertEquals("hy/MqSH3U~ESI&~", sQLTimeoutException0.getSQLState());
      //  // Unstable assertion: assertEquals(432, sQLTimeoutException0.getErrorCode());
      //  // Unstable assertion: assertEquals(").", sQLTimeoutException0.getMessage());
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertTrue(boolean1);
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) arrayDeque0);
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertEquals(1, jSONArray0.length());
      //  // Unstable assertion: assertFalse(jSONArray0.isEmpty());
      //  // Unstable assertion: assertNotNull(jSONArray0);
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertEquals(1, jSONArray0.length());
      //  // Unstable assertion: assertFalse(jSONArray0.isEmpty());
      //  // Unstable assertion: assertEquals(1, jSONArray1.length());
      //  // Unstable assertion: assertFalse(jSONArray1.isEmpty());
      //  // Unstable assertion: assertNotNull(jSONArray1);
      //  // Unstable assertion: assertFalse(jSONArray1.equals((Object)jSONArray0));
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      boolean boolean2 = jSONArray1.optBoolean(0, true);
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertEquals(1, jSONArray0.length());
      //  // Unstable assertion: assertFalse(jSONArray0.isEmpty());
      //  // Unstable assertion: assertEquals(1, jSONArray1.length());
      //  // Unstable assertion: assertFalse(jSONArray1.isEmpty());
      //  // Unstable assertion: assertNotSame(jSONArray0, jSONArray1);
      //  // Unstable assertion: assertNotSame(jSONArray1, jSONArray0);
      //  // Unstable assertion: assertFalse(jSONArray0.equals((Object)jSONArray1));
      //  // Unstable assertion: assertFalse(jSONArray1.equals((Object)jSONArray0));
      //  // Unstable assertion: assertTrue(boolean2 == boolean1);
      //  // Unstable assertion: assertFalse(boolean2 == boolean0);
      //  // Unstable assertion: assertTrue(boolean2);
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      float float0 = jSONArray1.optFloat((-431), (-166.505F));
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertEquals(1, jSONArray0.length());
      //  // Unstable assertion: assertFalse(jSONArray0.isEmpty());
      //  // Unstable assertion: assertEquals(1, jSONArray1.length());
      //  // Unstable assertion: assertFalse(jSONArray1.isEmpty());
      //  // Unstable assertion: assertNotSame(jSONArray0, jSONArray1);
      //  // Unstable assertion: assertNotSame(jSONArray1, jSONArray0);
      //  // Unstable assertion: assertFalse(jSONArray0.equals((Object)jSONArray1));
      //  // Unstable assertion: assertFalse(jSONArray1.equals((Object)jSONArray0));
      //  // Unstable assertion: assertEquals((-166.505F), float0, 0.01F);
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      Object object0 = jSONArray0.opt(0);
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertEquals(1, jSONArray0.length());
      //  // Unstable assertion: assertFalse(jSONArray0.isEmpty());
      //  // Unstable assertion: assertNotSame(jSONArray0, jSONArray1);
      //  // Unstable assertion: assertNotNull(object0);
      //  // Unstable assertion: assertFalse(jSONArray0.equals((Object)jSONArray1));
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      String string0 = jSONArray1.optString((-431), " (null).");
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertEquals(1, jSONArray0.length());
      //  // Unstable assertion: assertFalse(jSONArray0.isEmpty());
      //  // Unstable assertion: assertEquals(1, jSONArray1.length());
      //  // Unstable assertion: assertFalse(jSONArray1.isEmpty());
      //  // Unstable assertion: assertNotSame(jSONArray0, jSONArray1);
      //  // Unstable assertion: assertNotSame(jSONArray1, jSONArray0);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertFalse(jSONArray0.equals((Object)jSONArray1));
      //  // Unstable assertion: assertFalse(jSONArray1.equals((Object)jSONArray0));
      //  // Unstable assertion: assertFalse(string0.equals((Object)object0));
      //  // Unstable assertion: assertEquals(" (null).", string0);
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      String string1 = jSONArray0.optString(432, "");
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertEquals(1, jSONArray0.length());
      //  // Unstable assertion: assertFalse(jSONArray0.isEmpty());
      //  // Unstable assertion: assertNotSame(jSONArray0, jSONArray1);
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertFalse(jSONArray0.equals((Object)jSONArray1));
      //  // Unstable assertion: assertFalse(string1.equals((Object)object0));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertEquals("", string1);
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      Iterator<Object> iterator0 = jSONArray0.iterator();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(iterator0);
      
      int int0 = 615;
      boolean boolean0 = jSONArray0.isNull(615);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertTrue(boolean0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("You have a NullPointerException here:", "V+sJ1o", 615);
      assertEquals(615, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("You have a NullPointerException here:", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: You have a NullPointerException here:", sQLFeatureNotSupportedException0.toString());
      assertEquals("V+sJ1o", sQLFeatureNotSupportedException0.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      JSONArray jSONArray1 = jSONArray0.putAll((Object) sQLFeatureNotSupportedException0);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(615, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("You have a NullPointerException here:", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: You have a NullPointerException here:", sQLFeatureNotSupportedException0.toString());
      assertEquals("V+sJ1o", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      String string0 = jSONArray1.toString();
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(615, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("You have a NullPointerException here:", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: You have a NullPointerException here:", sQLFeatureNotSupportedException0.toString());
      assertEquals("V+sJ1o", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(string0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = jSONArray1.optBigDecimal(615, bigDecimal0);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(615, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("You have a NullPointerException here:", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: You have a NullPointerException here:", sQLFeatureNotSupportedException0.toString());
      assertEquals("V+sJ1o", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      
      Object object0 = jSONArray0.remove(615);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertNull(object0);
      
      JSONArray jSONArray2 = jSONArray1.put((Object) jSONArray0);
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(615, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("You have a NullPointerException here:", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: You have a NullPointerException here:", sQLFeatureNotSupportedException0.toString());
      assertEquals("V+sJ1o", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(2, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertNotNull(jSONArray2);
      
      JSONPointer jSONPointer0 = null;
      try {
        jSONPointer0 = new JSONPointer("You have a NullPointerException here:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(1395.0F);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      boolean boolean1 = jSONArray0.optBoolean((-324), true);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertSame(jSONArray0, jSONArray1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = jSONArray0.similar(jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      try { 
        jSONArray1.put((-1), 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ArrayDeque<SQLTimeoutException> arrayDeque0 = new ArrayDeque<SQLTimeoutException>();
      //  // Unstable assertion: assertTrue(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals(0, arrayDeque0.size());
      //  // Unstable assertion: assertNotNull(arrayDeque0);
      
      SQLDataException sQLDataException0 = new SQLDataException(").");
      //  // Unstable assertion: assertNull(sQLDataException0.getSQLState());
      //  // Unstable assertion: assertEquals("java.sql.SQLDataException: ).", sQLDataException0.toString());
      //  // Unstable assertion: assertEquals(").", sQLDataException0.getMessage());
      //  // Unstable assertion: assertEquals(0, sQLDataException0.getErrorCode());
      //  // Unstable assertion: assertNotNull(sQLDataException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      //  // Unstable assertion: assertNull(sQLRecoverableException0.getSQLState());
      //  // Unstable assertion: assertNull(sQLRecoverableException0.getMessage());
      //  // Unstable assertion: assertEquals(0, sQLRecoverableException0.getErrorCode());
      //  // Unstable assertion: assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      //  // Unstable assertion: assertNotNull(sQLRecoverableException0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(432);
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertNotNull(byteArrayOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      //  // Unstable assertion: assertNotNull(mockPrintStream0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) ").";
      objectArray0[1] = (Object) ").";
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) sQLDataException0;
      objectArray0[4] = (Object) byteArrayOutputStream0;
      objectArray0[5] = (Object) arrayDeque0;
      objectArray0[6] = (Object) byteArrayOutputStream0;
      byteArrayOutputStream0.writeTo(mockPrintStream0);
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      
      objectArray0[7] = (Object) sQLRecoverableException0;
      PrintStream printStream0 = mockPrintStream0.format("_e~\"BGa$/oH", objectArray0);
      //  // Unstable assertion: assertEquals(11, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("_e~\"BGa$/oH", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertSame(mockPrintStream0, printStream0);
      //  // Unstable assertion: assertSame(printStream0, mockPrintStream0);
      //  // Unstable assertion: assertEquals(8, objectArray0.length);
      //  // Unstable assertion: assertNotNull(printStream0);
      
      sQLRecoverableException0.printStackTrace(printStream0);
      //  // Unstable assertion: assertNull(sQLRecoverableException0.getSQLState());
      //  // Unstable assertion: assertNull(sQLRecoverableException0.getMessage());
      //  // Unstable assertion: assertEquals(0, sQLRecoverableException0.getErrorCode());
      //  // Unstable assertion: assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      //  // Unstable assertion: assertEquals(1102, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertSame(mockPrintStream0, printStream0);
      //  // Unstable assertion: assertSame(printStream0, mockPrintStream0);
      //  // Unstable assertion: assertEquals(8, objectArray0.length);
      
      Throwable[] throwableArray0 = sQLRecoverableException0.getSuppressed();
      //  // Unstable assertion: assertNull(sQLRecoverableException0.getSQLState());
      //  // Unstable assertion: assertNull(sQLRecoverableException0.getMessage());
      //  // Unstable assertion: assertEquals(0, sQLRecoverableException0.getErrorCode());
      //  // Unstable assertion: assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      //  // Unstable assertion: assertEquals(0, throwableArray0.length);
      //  // Unstable assertion: assertNotNull(throwableArray0);
      
      sQLDataException0.addSuppressed(sQLRecoverableException0);
      //  // Unstable assertion: assertNull(sQLDataException0.getSQLState());
      //  // Unstable assertion: assertEquals("java.sql.SQLDataException: ).", sQLDataException0.toString());
      //  // Unstable assertion: assertEquals(").", sQLDataException0.getMessage());
      //  // Unstable assertion: assertEquals(0, sQLDataException0.getErrorCode());
      //  // Unstable assertion: assertNull(sQLRecoverableException0.getSQLState());
      //  // Unstable assertion: assertNull(sQLRecoverableException0.getMessage());
      //  // Unstable assertion: assertEquals(0, sQLRecoverableException0.getErrorCode());
      //  // Unstable assertion: assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(").", "hy/MqSH3U~ESI&~", 432, sQLDataException0);
      //  // Unstable assertion: assertNull(sQLDataException0.getSQLState());
      //  // Unstable assertion: assertEquals("java.sql.SQLDataException: ).", sQLDataException0.toString());
      //  // Unstable assertion: assertEquals(").", sQLDataException0.getMessage());
      //  // Unstable assertion: assertEquals(0, sQLDataException0.getErrorCode());
      //  // Unstable assertion: assertEquals(").", sQLTimeoutException0.getMessage());
      //  // Unstable assertion: assertEquals("java.sql.SQLTimeoutException: ).", sQLTimeoutException0.toString());
      //  // Unstable assertion: assertEquals(432, sQLTimeoutException0.getErrorCode());
      //  // Unstable assertion: assertEquals("hy/MqSH3U~ESI&~", sQLTimeoutException0.getSQLState());
      //  // Unstable assertion: assertNotNull(sQLTimeoutException0);
      
      boolean boolean0 = arrayDeque0.add(sQLTimeoutException0);
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertNull(sQLDataException0.getSQLState());
      //  // Unstable assertion: assertEquals("java.sql.SQLDataException: ).", sQLDataException0.toString());
      //  // Unstable assertion: assertEquals(").", sQLDataException0.getMessage());
      //  // Unstable assertion: assertEquals(0, sQLDataException0.getErrorCode());
      //  // Unstable assertion: assertEquals(").", sQLTimeoutException0.getMessage());
      //  // Unstable assertion: assertEquals("java.sql.SQLTimeoutException: ).", sQLTimeoutException0.toString());
      //  // Unstable assertion: assertEquals(432, sQLTimeoutException0.getErrorCode());
      //  // Unstable assertion: assertEquals("hy/MqSH3U~ESI&~", sQLTimeoutException0.getSQLState());
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) arrayDeque0);
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertEquals(1, jSONArray0.length());
      //  // Unstable assertion: assertFalse(jSONArray0.isEmpty());
      //  // Unstable assertion: assertNotNull(jSONArray0);
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertEquals(1, jSONArray0.length());
      //  // Unstable assertion: assertFalse(jSONArray0.isEmpty());
      //  // Unstable assertion: assertFalse(jSONArray1.isEmpty());
      //  // Unstable assertion: assertEquals(1, jSONArray1.length());
      //  // Unstable assertion: assertNotNull(jSONArray1);
      //  // Unstable assertion: assertFalse(jSONArray1.equals((Object)jSONArray0));
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      boolean boolean1 = jSONArray1.optBoolean(0, true);
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertEquals(1, jSONArray0.length());
      //  // Unstable assertion: assertFalse(jSONArray0.isEmpty());
      //  // Unstable assertion: assertFalse(jSONArray1.isEmpty());
      //  // Unstable assertion: assertEquals(1, jSONArray1.length());
      //  // Unstable assertion: assertNotSame(jSONArray0, jSONArray1);
      //  // Unstable assertion: assertNotSame(jSONArray1, jSONArray0);
      //  // Unstable assertion: assertFalse(jSONArray0.equals((Object)jSONArray1));
      //  // Unstable assertion: assertFalse(jSONArray1.equals((Object)jSONArray0));
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertTrue(boolean1);
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      float float0 = jSONArray1.optFloat((-431), (-166.505F));
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertEquals(1, jSONArray0.length());
      //  // Unstable assertion: assertFalse(jSONArray0.isEmpty());
      //  // Unstable assertion: assertFalse(jSONArray1.isEmpty());
      //  // Unstable assertion: assertEquals(1, jSONArray1.length());
      //  // Unstable assertion: assertNotSame(jSONArray0, jSONArray1);
      //  // Unstable assertion: assertNotSame(jSONArray1, jSONArray0);
      //  // Unstable assertion: assertFalse(jSONArray0.equals((Object)jSONArray1));
      //  // Unstable assertion: assertFalse(jSONArray1.equals((Object)jSONArray0));
      //  // Unstable assertion: assertEquals((-166.505F), float0, 0.01F);
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      Object object0 = jSONArray0.opt(0);
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertEquals(1, jSONArray0.length());
      //  // Unstable assertion: assertFalse(jSONArray0.isEmpty());
      //  // Unstable assertion: assertNotSame(jSONArray0, jSONArray1);
      //  // Unstable assertion: assertNotNull(object0);
      //  // Unstable assertion: assertFalse(jSONArray0.equals((Object)jSONArray1));
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      String string0 = jSONArray1.optString((-431), " (null).");
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertEquals(1, jSONArray0.length());
      //  // Unstable assertion: assertFalse(jSONArray0.isEmpty());
      //  // Unstable assertion: assertFalse(jSONArray1.isEmpty());
      //  // Unstable assertion: assertEquals(1, jSONArray1.length());
      //  // Unstable assertion: assertNotSame(jSONArray0, jSONArray1);
      //  // Unstable assertion: assertNotSame(jSONArray1, jSONArray0);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertFalse(jSONArray0.equals((Object)jSONArray1));
      //  // Unstable assertion: assertFalse(jSONArray1.equals((Object)jSONArray0));
      //  // Unstable assertion: assertFalse(string0.equals((Object)object0));
      //  // Unstable assertion: assertEquals(" (null).", string0);
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      JSONObject jSONObject0 = jSONArray1.toJSONObject(jSONArray0);
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertEquals(1, jSONArray0.length());
      //  // Unstable assertion: assertFalse(jSONArray0.isEmpty());
      //  // Unstable assertion: assertFalse(jSONArray1.isEmpty());
      //  // Unstable assertion: assertEquals(1, jSONArray1.length());
      //  // Unstable assertion: assertFalse(jSONObject0.isEmpty());
      //  // Unstable assertion: assertEquals(1, jSONObject0.length());
      //  // Unstable assertion: assertNotSame(jSONArray0, jSONArray1);
      //  // Unstable assertion: assertNotSame(jSONArray1, jSONArray0);
      //  // Unstable assertion: assertNotNull(jSONObject0);
      //  // Unstable assertion: assertFalse(jSONArray0.equals((Object)jSONArray1));
      //  // Unstable assertion: assertFalse(jSONArray1.equals((Object)jSONArray0));
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2289);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5qiU+EkSg@1t;?");
      assertFalse(boolean0);
      
      JSONArray jSONArray1 = jSONArray0.put(2289, (float) 2289);
      assertEquals(2290, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2290, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      double double0 = jSONArray0.optDouble(2289, (-782.046528081565));
      assertEquals(2290, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertEquals(2289.0, double0, 0.01);
      
      BigInteger bigInteger0 = jSONArray0.getBigInteger(2289);
      assertEquals(2290, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals((byte) (-15), bigInteger0.byteValue());
      assertEquals((short)2289, bigInteger0.shortValue());
      assertSame(jSONArray0, jSONArray1);
      assertNotNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      HashMap<SQLRecoverableException, SQLSyntaxErrorException> hashMap0 = new HashMap<SQLRecoverableException, SQLSyntaxErrorException>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONArray jSONArray1 = jSONArray0.put((Map<?, ?>) hashMap0);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertNotNull(sQLClientInfoException0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 5573;
      intArray0[2] = 0;
      intArray0[3] = 5573;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 5573;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", ";0LcP6i}8F^l}Vq-x", 5573, intArray0);
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals(";0LcP6i}8F^l}Vq-x", batchUpdateException0.getSQLState());
      assertEquals(5573, batchUpdateException0.getErrorCode());
      assertEquals("", batchUpdateException0.getMessage());
      assertEquals(7, intArray0.length);
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {0, 5573, 0, 5573, 0, 0, 5573}, intArray0);
      
      sQLClientInfoException0.addSuppressed(batchUpdateException0);
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals(";0LcP6i}8F^l}Vq-x", batchUpdateException0.getSQLState());
      assertEquals(5573, batchUpdateException0.getErrorCode());
      assertEquals("", batchUpdateException0.getMessage());
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 5573, 0, 5573, 0, 0, 5573}, intArray0);
      
      JSONArray jSONArray2 = jSONArray1.putAll((Object) sQLClientInfoException0);
      assertFalse(jSONArray2.isEmpty());
      assertEquals(2, jSONArray2.length());
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray2);
      
      JSONObject jSONObject0 = jSONArray1.getJSONObject(0);
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONObject0);
      
      Class<Answers> class0 = Answers.class;
      Object object0 = JSONObject.stringToValue("JSONArray initial value should be a string or collection or array.");
      assertNotNull(object0);
      assertEquals("JSONArray initial value should be a string or collection or array.", object0);
      
      try { 
        jSONArray0.getEnum(class0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a enum of type java.io.StringWriter@0000000012 (class org.json.JSONObject).
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      
      int int0 = 0;
      JSONArray jSONArray2 = new JSONArray();
      assertTrue(jSONArray2.isEmpty());
      assertEquals(0, jSONArray2.length());
      assertNotNull(jSONArray2);
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      
      JSONArray jSONArray3 = jSONArray2.put(44, false);
      assertFalse(jSONArray2.isEmpty());
      assertEquals(45, jSONArray2.length());
      assertEquals(45, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertNotSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray3);
      assertNotSame(jSONArray2, jSONArray0);
      assertNotSame(jSONArray3, jSONArray1);
      assertNotSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray2);
      assertNotNull(jSONArray3);
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertFalse(jSONArray3.equals((Object)jSONArray1));
      assertFalse(jSONArray3.equals((Object)jSONArray0));
      
      int int1 = 0;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNotNull(sQLClientInfoException0);
      
      Throwable[] throwableArray0 = sQLClientInfoException0.getSuppressed();
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, throwableArray0.length);
      assertNotNull(throwableArray0);
      
      sQLClientInfoException0.setNextException(sQLClientInfoException0);
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 0, 0, sQLClientInfoException0);
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertNotNull(dataTruncation0);
      
      JSONArray jSONArray4 = jSONArray0.putAll((Object) dataTruncation0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(2, jSONArray4.length());
      assertFalse(jSONArray4.isEmpty());
      assertNotSame(jSONArray0, jSONArray3);
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray4);
      assertNotSame(jSONArray4, jSONArray1);
      assertNotSame(jSONArray4, jSONArray2);
      assertSame(jSONArray4, jSONArray0);
      assertNotSame(jSONArray4, jSONArray3);
      assertNotNull(jSONArray4);
      assertFalse(jSONArray0.equals((Object)jSONArray3));
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray4.equals((Object)jSONArray1));
      assertFalse(jSONArray4.equals((Object)jSONArray2));
      assertFalse(jSONArray4.equals((Object)jSONArray3));
      
      JSONArray jSONArray5 = jSONArray2.put((float) 0);
      assertFalse(jSONArray2.isEmpty());
      assertEquals(46, jSONArray2.length());
      assertEquals(46, jSONArray5.length());
      assertFalse(jSONArray5.isEmpty());
      assertNotSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray3);
      assertNotSame(jSONArray2, jSONArray4);
      assertSame(jSONArray2, jSONArray5);
      assertNotSame(jSONArray2, jSONArray0);
      assertSame(jSONArray5, jSONArray3);
      assertNotSame(jSONArray5, jSONArray0);
      assertNotSame(jSONArray5, jSONArray4);
      assertSame(jSONArray5, jSONArray2);
      assertNotSame(jSONArray5, jSONArray1);
      assertNotNull(jSONArray5);
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertFalse(jSONArray2.equals((Object)jSONArray4));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertFalse(jSONArray5.equals((Object)jSONArray0));
      assertFalse(jSONArray5.equals((Object)jSONArray4));
      assertFalse(jSONArray5.equals((Object)jSONArray1));
      
      List<Object> list0 = jSONArray0.toList();
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotSame(jSONArray0, jSONArray3);
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray0, jSONArray5);
      assertSame(jSONArray0, jSONArray4);
      assertNotNull(list0);
      assertFalse(jSONArray0.equals((Object)jSONArray3));
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray0.equals((Object)jSONArray5));
      assertFalse(list0.contains(0));
      
      DataTruncation dataTruncation1 = (DataTruncation)jSONArray0.remove(0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(0, dataTruncation1.getErrorCode());
      assertEquals("Data truncation", dataTruncation1.getMessage());
      assertEquals("22001", dataTruncation1.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation1.toString());
      assertNotSame(jSONArray0, jSONArray3);
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray0, jSONArray5);
      assertSame(jSONArray0, jSONArray4);
      assertSame(dataTruncation1, dataTruncation0);
      assertNotNull(dataTruncation1);
      assertFalse(jSONArray0.equals((Object)jSONArray3));
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray0.equals((Object)jSONArray5));
      
      JSONArray jSONArray6 = jSONArray5.put(0, 1.0);
      assertFalse(jSONArray2.isEmpty());
      assertEquals(46, jSONArray2.length());
      assertEquals(46, jSONArray5.length());
      assertFalse(jSONArray5.isEmpty());
      assertFalse(jSONArray6.isEmpty());
      assertEquals(46, jSONArray6.length());
      assertNotSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray3);
      assertNotSame(jSONArray2, jSONArray4);
      assertSame(jSONArray2, jSONArray5);
      assertSame(jSONArray2, jSONArray6);
      assertNotSame(jSONArray2, jSONArray0);
      assertSame(jSONArray5, jSONArray3);
      assertSame(jSONArray5, jSONArray6);
      assertNotSame(jSONArray5, jSONArray0);
      assertNotSame(jSONArray5, jSONArray4);
      assertSame(jSONArray5, jSONArray2);
      assertNotSame(jSONArray5, jSONArray1);
      assertSame(jSONArray6, jSONArray5);
      assertSame(jSONArray6, jSONArray2);
      assertNotSame(jSONArray6, jSONArray0);
      assertNotSame(jSONArray6, jSONArray1);
      assertNotSame(jSONArray6, jSONArray4);
      assertSame(jSONArray6, jSONArray3);
      assertNotNull(jSONArray6);
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertFalse(jSONArray2.equals((Object)jSONArray4));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertFalse(jSONArray5.equals((Object)jSONArray0));
      assertFalse(jSONArray5.equals((Object)jSONArray4));
      assertFalse(jSONArray5.equals((Object)jSONArray1));
      assertFalse(jSONArray6.equals((Object)jSONArray0));
      assertFalse(jSONArray6.equals((Object)jSONArray1));
      assertFalse(jSONArray6.equals((Object)jSONArray4));
      
      boolean boolean0 = jSONArray2.isEmpty();
      assertFalse(jSONArray2.isEmpty());
      assertEquals(46, jSONArray2.length());
      assertNotSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray3);
      assertNotSame(jSONArray2, jSONArray4);
      assertSame(jSONArray2, jSONArray5);
      assertSame(jSONArray2, jSONArray6);
      assertNotSame(jSONArray2, jSONArray0);
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertFalse(jSONArray2.equals((Object)jSONArray4));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertFalse(boolean0);
      
      StringWriter stringWriter0 = new StringWriter(0);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-2577));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      ArrayDeque<SQLTransactionRollbackException> arrayDeque1 = arrayDeque0.clone();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertNotNull(arrayDeque1);
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) arrayDeque1);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      
      int int0 = 11;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = jSONArray0.optBoolean(11, true);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int1 = jSONArray0.optInt((-583), 11);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertTrue(int1 == int0);
      assertEquals(11, int1);
      
      JSONArray jSONArray1 = jSONArray0.put(11, 0.0F);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(12, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(12, jSONArray1.length());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      
      JSONTokener jSONTokener0 = new JSONTokener("Y1fzc;/\"HpT+Zr");
      assertFalse(jSONTokener0.end());
      assertNotNull(jSONTokener0);
      
      JSONException jSONException0 = jSONTokener0.syntaxError("number");
      assertFalse(jSONTokener0.end());
      assertNotNull(jSONException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Y1fzc;/\"HpT+Zr", jSONException0);
      assertFalse(jSONTokener0.end());
      assertEquals("Y1fzc;/\"HpT+Zr", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: Y1fzc;/\"HpT+Zr", sQLTransactionRollbackException0.toString());
      assertNotNull(sQLTransactionRollbackException0);
      
      boolean boolean2 = arrayDeque0.offer(sQLTransactionRollbackException0);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertFalse(jSONTokener0.end());
      assertEquals("Y1fzc;/\"HpT+Zr", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: Y1fzc;/\"HpT+Zr", sQLTransactionRollbackException0.toString());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      
      HashMap<SQLIntegrityConstraintViolationException, SQLException> hashMap0 = new HashMap<SQLIntegrityConstraintViolationException, SQLException>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONArray jSONArray2 = jSONArray1.put(0, (Map<?, ?>) hashMap0);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(12, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(12, jSONArray1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(12, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertNotNull(jSONArray2);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      assertFalse(arrayDeque1.contains(sQLTransactionRollbackException0));
      
      List<Object> list0 = jSONArray0.toList();
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(12, jSONArray0.length());
      assertFalse(list0.isEmpty());
      assertEquals(12, list0.size());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertNotNull(list0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      assertFalse(arrayDeque1.contains(sQLTransactionRollbackException0));
      assertTrue(list0.contains(0.0F));
      assertFalse(list0.contains((-583)));
      
      float float0 = jSONArray1.getFloat(11);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(12, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(12, jSONArray1.length());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      assertFalse(arrayDeque1.contains(sQLTransactionRollbackException0));
      
      int int2 = jSONArray2.optInt(11, (-1227));
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(12, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(12, jSONArray1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(12, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertEquals(0, int2);
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      assertFalse(arrayDeque1.contains(sQLTransactionRollbackException0));
      
      try { 
        jSONArray2.put((-4803), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-4803] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      String string0 = jSONArray0.toString();
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(string0);
      assertFalse(stack0.contains(string0));
      
      JSONArray jSONArray1 = jSONArray0.put(252, 2934.7);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(253, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(253, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertFalse(stack0.contains(string0));
      
      boolean boolean0 = stack0.add("`,<WvZmrzG:?B0");
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[`,<WvZmrzG:?B0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(boolean0);
      assertFalse(stack0.contains(string0));
      assertTrue(stack0.contains("`,<WvZmrzG:?B0"));
      
      boolean boolean1 = jSONArray0.optBoolean((-46));
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[`,<WvZmrzG:?B0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(253, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(stack0.contains(string0));
      assertTrue(stack0.contains("`,<WvZmrzG:?B0"));
      
      double double0 = jSONArray0.optDouble(252, 2934.7);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[`,<WvZmrzG:?B0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(253, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertEquals(2934.7, double0, 0.01);
      assertFalse(stack0.contains(string0));
      assertTrue(stack0.contains("`,<WvZmrzG:?B0"));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TreeSet<DataTruncation> treeSet0 = new TreeSet<DataTruncation>();
      assertNotNull(treeSet0);
      
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) treeSet0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      Object object0 = treeSet0.clone();
      assertNotNull(object0);
      
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      
      int int0 = 1718;
      HashMap<SQLFeatureNotSupportedException, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<SQLFeatureNotSupportedException, SQLInvalidAuthorizationSpecException>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException1.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException1.toString());
      assertNotNull(sQLInvalidAuthorizationSpecException1);
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException0));
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = hashMap0.put((SQLFeatureNotSupportedException) null, sQLInvalidAuthorizationSpecException1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException1.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException1.toString());
      assertNotSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertNotSame(sQLInvalidAuthorizationSpecException1, sQLInvalidAuthorizationSpecException0);
      assertNull(sQLInvalidAuthorizationSpecException2);
      assertFalse(sQLInvalidAuthorizationSpecException0.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException0));
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = hashMap0.put((SQLFeatureNotSupportedException) null, sQLInvalidAuthorizationSpecException0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException3.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException3.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException3.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException3.toString());
      assertNotSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException3);
      assertNotSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertSame(sQLInvalidAuthorizationSpecException3, sQLInvalidAuthorizationSpecException1);
      assertNotSame(sQLInvalidAuthorizationSpecException3, sQLInvalidAuthorizationSpecException0);
      assertNotNull(sQLInvalidAuthorizationSpecException3);
      assertFalse(sQLInvalidAuthorizationSpecException0.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertFalse(sQLInvalidAuthorizationSpecException3.equals((Object)sQLInvalidAuthorizationSpecException0));
      
      // Undeclared exception!
      try { 
        jSONArray1.put(1718, (Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ArrayDeque<SQLTimeoutException> arrayDeque0 = new ArrayDeque<SQLTimeoutException>();
      //  // Unstable assertion: assertEquals(0, arrayDeque0.size());
      //  // Unstable assertion: assertTrue(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertNotNull(arrayDeque0);
      
      SQLDataException sQLDataException0 = new SQLDataException(").");
      //  // Unstable assertion: assertEquals(").", sQLDataException0.getMessage());
      //  // Unstable assertion: assertNull(sQLDataException0.getSQLState());
      //  // Unstable assertion: assertEquals(0, sQLDataException0.getErrorCode());
      //  // Unstable assertion: assertEquals("java.sql.SQLDataException: ).", sQLDataException0.toString());
      //  // Unstable assertion: assertNotNull(sQLDataException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      //  // Unstable assertion: assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      //  // Unstable assertion: assertNull(sQLRecoverableException0.getSQLState());
      //  // Unstable assertion: assertNull(sQLRecoverableException0.getMessage());
      //  // Unstable assertion: assertEquals(0, sQLRecoverableException0.getErrorCode());
      //  // Unstable assertion: assertNotNull(sQLRecoverableException0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(432);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertNotNull(byteArrayOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      //  // Unstable assertion: assertNotNull(mockPrintStream0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) ").";
      objectArray0[1] = (Object) ").";
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) sQLDataException0;
      objectArray0[4] = (Object) byteArrayOutputStream0;
      objectArray0[5] = (Object) arrayDeque0;
      objectArray0[6] = (Object) byteArrayOutputStream0;
      objectArray0[7] = (Object) sQLRecoverableException0;
      PrintStream printStream0 = mockPrintStream0.format("_e~\"BGa$/oH", objectArray0);
      //  // Unstable assertion: assertEquals(11, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("_e~\"BGa$/oH", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertSame(mockPrintStream0, printStream0);
      //  // Unstable assertion: assertSame(printStream0, mockPrintStream0);
      //  // Unstable assertion: assertEquals(8, objectArray0.length);
      //  // Unstable assertion: assertNotNull(printStream0);
      
      sQLRecoverableException0.printStackTrace(printStream0);
      //  // Unstable assertion: assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      //  // Unstable assertion: assertNull(sQLRecoverableException0.getSQLState());
      //  // Unstable assertion: assertNull(sQLRecoverableException0.getMessage());
      //  // Unstable assertion: assertEquals(0, sQLRecoverableException0.getErrorCode());
      //  // Unstable assertion: assertEquals(1102, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertSame(mockPrintStream0, printStream0);
      //  // Unstable assertion: assertSame(printStream0, mockPrintStream0);
      //  // Unstable assertion: assertEquals(8, objectArray0.length);
      
      Throwable[] throwableArray0 = sQLRecoverableException0.getSuppressed();
      //  // Unstable assertion: assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      //  // Unstable assertion: assertNull(sQLRecoverableException0.getSQLState());
      //  // Unstable assertion: assertNull(sQLRecoverableException0.getMessage());
      //  // Unstable assertion: assertEquals(0, sQLRecoverableException0.getErrorCode());
      //  // Unstable assertion: assertEquals(0, throwableArray0.length);
      //  // Unstable assertion: assertNotNull(throwableArray0);
      
      sQLDataException0.addSuppressed(sQLRecoverableException0);
      //  // Unstable assertion: assertEquals(").", sQLDataException0.getMessage());
      //  // Unstable assertion: assertNull(sQLDataException0.getSQLState());
      //  // Unstable assertion: assertEquals(0, sQLDataException0.getErrorCode());
      //  // Unstable assertion: assertEquals("java.sql.SQLDataException: ).", sQLDataException0.toString());
      //  // Unstable assertion: assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      //  // Unstable assertion: assertNull(sQLRecoverableException0.getSQLState());
      //  // Unstable assertion: assertNull(sQLRecoverableException0.getMessage());
      //  // Unstable assertion: assertEquals(0, sQLRecoverableException0.getErrorCode());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(").", "hy/MqSH3U~ESI&~", 432, sQLDataException0);
      //  // Unstable assertion: assertEquals(").", sQLDataException0.getMessage());
      //  // Unstable assertion: assertNull(sQLDataException0.getSQLState());
      //  // Unstable assertion: assertEquals(0, sQLDataException0.getErrorCode());
      //  // Unstable assertion: assertEquals("java.sql.SQLDataException: ).", sQLDataException0.toString());
      //  // Unstable assertion: assertEquals(").", sQLTimeoutException0.getMessage());
      //  // Unstable assertion: assertEquals("hy/MqSH3U~ESI&~", sQLTimeoutException0.getSQLState());
      //  // Unstable assertion: assertEquals(432, sQLTimeoutException0.getErrorCode());
      //  // Unstable assertion: assertEquals("java.sql.SQLTimeoutException: ).", sQLTimeoutException0.toString());
      //  // Unstable assertion: assertNotNull(sQLTimeoutException0);
      
      boolean boolean0 = arrayDeque0.add(sQLTimeoutException0);
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals(").", sQLDataException0.getMessage());
      //  // Unstable assertion: assertNull(sQLDataException0.getSQLState());
      //  // Unstable assertion: assertEquals(0, sQLDataException0.getErrorCode());
      //  // Unstable assertion: assertEquals("java.sql.SQLDataException: ).", sQLDataException0.toString());
      //  // Unstable assertion: assertEquals(").", sQLTimeoutException0.getMessage());
      //  // Unstable assertion: assertEquals("hy/MqSH3U~ESI&~", sQLTimeoutException0.getSQLState());
      //  // Unstable assertion: assertEquals(432, sQLTimeoutException0.getErrorCode());
      //  // Unstable assertion: assertEquals("java.sql.SQLTimeoutException: ).", sQLTimeoutException0.toString());
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) arrayDeque0);
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertFalse(jSONArray0.isEmpty());
      //  // Unstable assertion: assertEquals(1, jSONArray0.length());
      //  // Unstable assertion: assertNotNull(jSONArray0);
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertFalse(jSONArray0.isEmpty());
      //  // Unstable assertion: assertEquals(1, jSONArray0.length());
      //  // Unstable assertion: assertFalse(jSONArray1.isEmpty());
      //  // Unstable assertion: assertEquals(1, jSONArray1.length());
      //  // Unstable assertion: assertNotNull(jSONArray1);
      //  // Unstable assertion: assertFalse(jSONArray1.equals((Object)jSONArray0));
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      boolean boolean1 = jSONArray1.optBoolean(0, true);
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertFalse(jSONArray0.isEmpty());
      //  // Unstable assertion: assertEquals(1, jSONArray0.length());
      //  // Unstable assertion: assertFalse(jSONArray1.isEmpty());
      //  // Unstable assertion: assertEquals(1, jSONArray1.length());
      //  // Unstable assertion: assertNotSame(jSONArray0, jSONArray1);
      //  // Unstable assertion: assertNotSame(jSONArray1, jSONArray0);
      //  // Unstable assertion: assertFalse(jSONArray0.equals((Object)jSONArray1));
      //  // Unstable assertion: assertFalse(jSONArray1.equals((Object)jSONArray0));
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertTrue(boolean1);
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      int int0 = (-431);
      float float0 = jSONArray1.optFloat((-431), (-166.505F));
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertFalse(jSONArray0.isEmpty());
      //  // Unstable assertion: assertEquals(1, jSONArray0.length());
      //  // Unstable assertion: assertFalse(jSONArray1.isEmpty());
      //  // Unstable assertion: assertEquals(1, jSONArray1.length());
      //  // Unstable assertion: assertNotSame(jSONArray0, jSONArray1);
      //  // Unstable assertion: assertNotSame(jSONArray1, jSONArray0);
      //  // Unstable assertion: assertFalse(jSONArray0.equals((Object)jSONArray1));
      //  // Unstable assertion: assertFalse(jSONArray1.equals((Object)jSONArray0));
      //  // Unstable assertion: assertEquals((-166.505F), float0, 0.01F);
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      Object object0 = jSONArray0.opt(0);
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertFalse(jSONArray0.isEmpty());
      //  // Unstable assertion: assertEquals(1, jSONArray0.length());
      //  // Unstable assertion: assertNotSame(jSONArray0, jSONArray1);
      //  // Unstable assertion: assertNotNull(object0);
      //  // Unstable assertion: assertFalse(jSONArray0.equals((Object)jSONArray1));
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      String string0 = jSONArray1.optString((-431), " (null).");
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertFalse(jSONArray0.isEmpty());
      //  // Unstable assertion: assertEquals(1, jSONArray0.length());
      //  // Unstable assertion: assertFalse(jSONArray1.isEmpty());
      //  // Unstable assertion: assertEquals(1, jSONArray1.length());
      //  // Unstable assertion: assertNotSame(jSONArray0, jSONArray1);
      //  // Unstable assertion: assertNotSame(jSONArray1, jSONArray0);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertFalse(jSONArray0.equals((Object)jSONArray1));
      //  // Unstable assertion: assertFalse(jSONArray1.equals((Object)jSONArray0));
      //  // Unstable assertion: assertFalse(string0.equals((Object)object0));
      //  // Unstable assertion: assertEquals(" (null).", string0);
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      try { 
        jSONArray1.getJSONObject(0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a JSONObject (class java.lang.String : java.sql.SQLTimeoutException@0000000001).
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(0, 4315L);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      BigDecimal bigDecimal0 = jSONArray0.getBigDecimal(0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals((byte) (-37), bigDecimal0.byteValue());
      assertEquals((short)4315, bigDecimal0.shortValue());
      assertSame(jSONArray0, jSONArray1);
      assertNotNull(bigDecimal0);
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      long long1 = Long.max(0L, 0);
      assertEquals(0L, long1);
      
      Object object0 = jSONArray0.get(0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertSame(jSONArray0, jSONArray1);
      assertNotNull(object0);
      assertFalse(object0.equals((Object)long1));
      assertFalse(object0.equals((Object)long0));
      assertEquals(4315L, object0);
      
      Number number0 = jSONArray0.optNumber(0, (Number) long0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertSame(jSONArray0, jSONArray1);
      assertNotNull(number0);
      assertTrue(long0.equals((Object)long1));
      assertFalse(long0.equals((Object)object0));
      assertFalse(number0.equals((Object)long0));
      assertFalse(number0.equals((Object)long1));
      assertEquals(4315L, number0);
      
      try { 
        jSONArray0.getBoolean(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a boolean (class java.lang.Long : 4315).
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      ArrayDeque<SQLTransactionRollbackException> arrayDeque1 = arrayDeque0.clone();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertNotNull(arrayDeque1);
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) arrayDeque1);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      
      int int0 = 11;
      boolean boolean0 = jSONArray0.optBoolean(11, true);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertTrue(boolean0);
      
      int int1 = jSONArray0.optInt((-583), 11);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertTrue(int1 == int0);
      assertEquals(11, int1);
      
      JSONArray jSONArray1 = jSONArray0.put(11, 0.0F);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(12, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(12, jSONArray1.length());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      
      String string0 = "Y1fzc;/\"HpT+Zr";
      JSONTokener jSONTokener0 = new JSONTokener("Y1fzc;/\"HpT+Zr");
      assertFalse(jSONTokener0.end());
      assertNotNull(jSONTokener0);
      
      JSONException jSONException0 = jSONTokener0.syntaxError("number");
      assertFalse(jSONTokener0.end());
      assertNotNull(jSONException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Y1fzc;/\"HpT+Zr", jSONException0);
      assertFalse(jSONTokener0.end());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: Y1fzc;/\"HpT+Zr", sQLTransactionRollbackException0.toString());
      assertEquals("Y1fzc;/\"HpT+Zr", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNotNull(sQLTransactionRollbackException0);
      
      boolean boolean1 = arrayDeque0.offer(sQLTransactionRollbackException0);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertFalse(jSONTokener0.end());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: Y1fzc;/\"HpT+Zr", sQLTransactionRollbackException0.toString());
      assertEquals("Y1fzc;/\"HpT+Zr", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      
      HashMap<SQLIntegrityConstraintViolationException, SQLException> hashMap0 = new HashMap<SQLIntegrityConstraintViolationException, SQLException>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONArray jSONArray2 = jSONArray1.put(0, (Map<?, ?>) hashMap0);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(12, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(12, jSONArray1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(12, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertNotNull(jSONArray2);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      assertFalse(arrayDeque1.contains(sQLTransactionRollbackException0));
      
      List<Object> list0 = jSONArray0.toList();
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(12, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(12, list0.size());
      assertFalse(list0.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertNotNull(list0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      assertFalse(arrayDeque1.contains(sQLTransactionRollbackException0));
      assertTrue(list0.contains(0.0F));
      assertFalse(list0.contains((-583)));
      
      try { 
        jSONArray2.getLong(5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[5] is not a long (class org.json.JSONObject$Null : null).
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      ArrayDeque<SQLTransactionRollbackException> arrayDeque1 = arrayDeque0.clone();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertNotNull(arrayDeque1);
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) arrayDeque1);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      
      boolean boolean0 = jSONArray0.optBoolean(11, true);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertTrue(boolean0);
      
      int int0 = jSONArray0.optInt((-583), 11);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertEquals(11, int0);
      
      JSONArray jSONArray1 = jSONArray0.put(11, (float) (-583));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(12, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(12, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      
      JSONTokener jSONTokener0 = new JSONTokener("Y1fzc;/\"HpT+Zr");
      assertFalse(jSONTokener0.end());
      assertNotNull(jSONTokener0);
      
      JSONException jSONException0 = jSONTokener0.syntaxError("number");
      assertFalse(jSONTokener0.end());
      assertNotNull(jSONException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Y1fzc;/\"HpT+Zr", jSONException0);
      assertFalse(jSONTokener0.end());
      assertEquals("Y1fzc;/\"HpT+Zr", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: Y1fzc;/\"HpT+Zr", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNotNull(sQLTransactionRollbackException0);
      
      boolean boolean1 = arrayDeque0.offer(sQLTransactionRollbackException0);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertFalse(jSONTokener0.end());
      assertEquals("Y1fzc;/\"HpT+Zr", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: Y1fzc;/\"HpT+Zr", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      
      HashMap<SQLIntegrityConstraintViolationException, SQLException> hashMap0 = new HashMap<SQLIntegrityConstraintViolationException, SQLException>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONArray jSONArray2 = jSONArray1.put(0, (Map<?, ?>) hashMap0);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(12, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(12, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(12, jSONArray2.length());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertNotNull(jSONArray2);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      assertFalse(arrayDeque1.contains(sQLTransactionRollbackException0));
      
      List<Object> list0 = jSONArray0.toList();
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(12, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(12, list0.size());
      assertFalse(list0.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertNotNull(list0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      assertFalse(arrayDeque1.contains(sQLTransactionRollbackException0));
      assertFalse(list0.contains(true));
      
      float float0 = jSONArray1.getFloat(11);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(12, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(12, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertEquals((-583.0F), float0, 0.01F);
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      assertFalse(arrayDeque1.contains(sQLTransactionRollbackException0));
      
      Number number0 = jSONArray1.getNumber(11);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(12, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(12, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertNotNull(number0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertTrue(number0.equals((Object)float0));
      assertEquals((-583.0F), number0);
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      assertFalse(arrayDeque1.contains(sQLTransactionRollbackException0));
      
      int int1 = 0;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      LinkedHashSet<Double> linkedHashSet0 = new LinkedHashSet<Double>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = linkedHashSet0.add((Double) null);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedHashSet0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.putAll((Collection<?>) linkedHashSet0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      int int0 = 5592;
      boolean boolean2 = jSONArray0.optBoolean(5592);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      JSONArray jSONArray2 = jSONArray1.put(0.0F);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(3, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(3, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertNotNull(jSONArray2);
      
      int int1 = 258;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      JSONArray jSONArray3 = jSONArray2.put(258, (-274.1419F));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(259, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(259, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(259, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(259, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray0);
      assertNotNull(jSONArray3);
      
      String string0 = jSONArray0.join("Z28b9.a(tOP0");
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(259, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte) (-71);
      byteArray0[6] = (byte)93;
      byteArray0[7] = (byte)10;
      byteArray0[8] = (byte)95;
      boolean boolean3 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(9, byteArray0.length);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      assertArrayEquals(new byte[] {(byte) (-14), (byte)17, (byte)91, (byte)5, (byte)47, (byte) (-71), (byte)93, (byte)10, (byte)95}, byteArray0);
      
      LinkedHashSet linkedHashSet1 = (LinkedHashSet)linkedHashSet0.clone();
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet1.size());
      assertFalse(linkedHashSet1.isEmpty());
      assertNotNull(linkedHashSet1);
      
      try { 
        jSONArray3.toJSONObject(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a String (class org.json.JSONObject$Null : null).
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      String string0 = jSONArray0.toString();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(string0);
      assertFalse(stack0.contains(string0));
      
      boolean boolean0 = jSONArray0.optBoolean((-46));
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertFalse(boolean0);
      assertFalse(stack0.contains(string0));
      
      long long0 = jSONArray0.optLong((-46));
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertEquals(0L, long0);
      assertFalse(stack0.contains(string0));
      
      JSONArray jSONArray1 = jSONArray0.put(3540);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertFalse(stack0.contains(string0));
      
      String string1 = jSONArray0.optString(97, "java.io.StringWriter@0000000002");
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertSame(jSONArray0, jSONArray1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertFalse(stack0.contains("java.io.StringWriter@0000000002"));
      
      String string2 = jSONArray0.optString(996);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertSame(jSONArray0, jSONArray1);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertFalse(stack0.contains("java.io.StringWriter@0000000002"));
      
      Object object0 = jSONArray1.opt((-46));
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNull(object0);
      assertFalse(stack0.contains("java.io.StringWriter@0000000002"));
      
      JSONArray jSONArray2 = jSONArray0.putAll((Collection<?>) stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertNotNull(jSONArray2);
      assertFalse(stack0.contains("java.io.StringWriter@0000000002"));
      
      JSONObject jSONObject0 = jSONArray1.optJSONObject(1357);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertNull(jSONObject0);
      assertFalse(stack0.contains("java.io.StringWriter@0000000002"));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      ArrayDeque<SQLTransactionRollbackException> arrayDeque1 = arrayDeque0.clone();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertNotNull(arrayDeque1);
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) arrayDeque1);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      
      int int0 = 11;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = jSONArray0.optInt((-583), 11);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertTrue(int1 == int0);
      assertEquals(11, int1);
      
      JSONArray jSONArray1 = jSONArray0.put(11, 0.0F);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(12, jSONArray0.length());
      assertEquals(12, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      
      JSONArray jSONArray2 = jSONArray1.put(11, (-2383.953F));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(12, jSONArray0.length());
      assertEquals(12, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(12, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertNotNull(jSONArray2);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      
      JSONTokener jSONTokener0 = new JSONTokener("Y1fzc;/\"HpT+Zr");
      assertFalse(jSONTokener0.end());
      assertNotNull(jSONTokener0);
      
      JSONException jSONException0 = jSONTokener0.syntaxError("number");
      assertFalse(jSONTokener0.end());
      assertNotNull(jSONException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Y1fzc;/\"HpT+Zr", jSONException0);
      assertFalse(jSONTokener0.end());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: Y1fzc;/\"HpT+Zr", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("Y1fzc;/\"HpT+Zr", sQLTransactionRollbackException0.getMessage());
      assertNotNull(sQLTransactionRollbackException0);
      
      boolean boolean2 = arrayDeque0.offer(sQLTransactionRollbackException0);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertFalse(jSONTokener0.end());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: Y1fzc;/\"HpT+Zr", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("Y1fzc;/\"HpT+Zr", sQLTransactionRollbackException0.getMessage());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      
      HashMap<SQLIntegrityConstraintViolationException, SQLException> hashMap0 = new HashMap<SQLIntegrityConstraintViolationException, SQLException>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Throwable[] throwableArray0 = sQLTransactionRollbackException0.getSuppressed();
      assertFalse(jSONTokener0.end());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: Y1fzc;/\"HpT+Zr", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("Y1fzc;/\"HpT+Zr", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, throwableArray0.length);
      assertNotNull(throwableArray0);
      
      JSONArray jSONArray3 = jSONArray1.put(0, (Map<?, ?>) hashMap0);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(12, jSONArray0.length());
      assertEquals(12, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(12, jSONArray3.length());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray1);
      assertNotNull(jSONArray3);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      assertFalse(arrayDeque1.contains(sQLTransactionRollbackException0));
      
      List<Object> list0 = jSONArray0.toList();
      assertFalse(list0.isEmpty());
      assertEquals(12, list0.size());
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(12, jSONArray0.length());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertNotNull(list0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertFalse(list0.contains("Y1fzc;/\"HpT+Zr"));
      assertTrue(list0.contains((-2383.953F)));
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      assertFalse(arrayDeque1.contains(sQLTransactionRollbackException0));
      
      float float0 = jSONArray1.getFloat(11);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(12, jSONArray0.length());
      assertEquals(12, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertEquals((-2383.953F), float0, 0.01F);
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      assertFalse(arrayDeque1.contains(sQLTransactionRollbackException0));
      
      try { 
        jSONArray3.put((-4803), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-4803] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ArrayDeque<SQLTimeoutException> arrayDeque0 = new ArrayDeque<SQLTimeoutException>();
      //  // Unstable assertion: assertTrue(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals(0, arrayDeque0.size());
      //  // Unstable assertion: assertNotNull(arrayDeque0);
      
      SQLDataException sQLDataException0 = new SQLDataException(").");
      //  // Unstable assertion: assertEquals("java.sql.SQLDataException: ).", sQLDataException0.toString());
      //  // Unstable assertion: assertEquals(0, sQLDataException0.getErrorCode());
      //  // Unstable assertion: assertNull(sQLDataException0.getSQLState());
      //  // Unstable assertion: assertEquals(").", sQLDataException0.getMessage());
      //  // Unstable assertion: assertNotNull(sQLDataException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      //  // Unstable assertion: assertEquals(0, sQLRecoverableException0.getErrorCode());
      //  // Unstable assertion: assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      //  // Unstable assertion: assertNull(sQLRecoverableException0.getSQLState());
      //  // Unstable assertion: assertNull(sQLRecoverableException0.getMessage());
      //  // Unstable assertion: assertNotNull(sQLRecoverableException0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(432);
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertNotNull(byteArrayOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      //  // Unstable assertion: assertNotNull(mockPrintStream0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) ").";
      objectArray0[1] = (Object) ").";
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) sQLDataException0;
      objectArray0[4] = (Object) byteArrayOutputStream0;
      objectArray0[5] = (Object) arrayDeque0;
      objectArray0[6] = (Object) byteArrayOutputStream0;
      objectArray0[7] = (Object) sQLRecoverableException0;
      PrintStream printStream0 = mockPrintStream0.format("_e~\"BGa$/oH", objectArray0);
      //  // Unstable assertion: assertEquals(11, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("_e~\"BGa$/oH", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertSame(mockPrintStream0, printStream0);
      //  // Unstable assertion: assertSame(printStream0, mockPrintStream0);
      //  // Unstable assertion: assertEquals(8, objectArray0.length);
      //  // Unstable assertion: assertNotNull(printStream0);
      
      printStream0.println((Object) arrayDeque0);
      //  // Unstable assertion: assertTrue(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals(0, arrayDeque0.size());
      //  // Unstable assertion: assertEquals(14, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("_e~\"BGa$/oH[]\n", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertSame(mockPrintStream0, printStream0);
      //  // Unstable assertion: assertSame(printStream0, mockPrintStream0);
      //  // Unstable assertion: assertEquals(8, objectArray0.length);
      
      sQLRecoverableException0.printStackTrace(printStream0);
      //  // Unstable assertion: assertEquals(0, sQLRecoverableException0.getErrorCode());
      //  // Unstable assertion: assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      //  // Unstable assertion: assertNull(sQLRecoverableException0.getSQLState());
      //  // Unstable assertion: assertNull(sQLRecoverableException0.getMessage());
      //  // Unstable assertion: assertEquals(1105, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertSame(mockPrintStream0, printStream0);
      //  // Unstable assertion: assertSame(printStream0, mockPrintStream0);
      //  // Unstable assertion: assertEquals(8, objectArray0.length);
      
      Throwable[] throwableArray0 = sQLRecoverableException0.getSuppressed();
      //  // Unstable assertion: assertEquals(0, sQLRecoverableException0.getErrorCode());
      //  // Unstable assertion: assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      //  // Unstable assertion: assertNull(sQLRecoverableException0.getSQLState());
      //  // Unstable assertion: assertNull(sQLRecoverableException0.getMessage());
      //  // Unstable assertion: assertEquals(0, throwableArray0.length);
      //  // Unstable assertion: assertNotNull(throwableArray0);
      
      sQLDataException0.addSuppressed(sQLRecoverableException0);
      //  // Unstable assertion: assertEquals("java.sql.SQLDataException: ).", sQLDataException0.toString());
      //  // Unstable assertion: assertEquals(0, sQLDataException0.getErrorCode());
      //  // Unstable assertion: assertNull(sQLDataException0.getSQLState());
      //  // Unstable assertion: assertEquals(").", sQLDataException0.getMessage());
      //  // Unstable assertion: assertEquals(0, sQLRecoverableException0.getErrorCode());
      //  // Unstable assertion: assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      //  // Unstable assertion: assertNull(sQLRecoverableException0.getSQLState());
      //  // Unstable assertion: assertNull(sQLRecoverableException0.getMessage());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(").", "hy/MqSH3U~ESI&~", 432, sQLDataException0);
      //  // Unstable assertion: assertEquals("java.sql.SQLDataException: ).", sQLDataException0.toString());
      //  // Unstable assertion: assertEquals(0, sQLDataException0.getErrorCode());
      //  // Unstable assertion: assertNull(sQLDataException0.getSQLState());
      //  // Unstable assertion: assertEquals(").", sQLDataException0.getMessage());
      //  // Unstable assertion: assertEquals("hy/MqSH3U~ESI&~", sQLTimeoutException0.getSQLState());
      //  // Unstable assertion: assertEquals(").", sQLTimeoutException0.getMessage());
      //  // Unstable assertion: assertEquals(432, sQLTimeoutException0.getErrorCode());
      //  // Unstable assertion: assertEquals("java.sql.SQLTimeoutException: ).", sQLTimeoutException0.toString());
      //  // Unstable assertion: assertNotNull(sQLTimeoutException0);
      
      boolean boolean0 = arrayDeque0.add(sQLTimeoutException0);
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals("java.sql.SQLDataException: ).", sQLDataException0.toString());
      //  // Unstable assertion: assertEquals(0, sQLDataException0.getErrorCode());
      //  // Unstable assertion: assertNull(sQLDataException0.getSQLState());
      //  // Unstable assertion: assertEquals(").", sQLDataException0.getMessage());
      //  // Unstable assertion: assertEquals("hy/MqSH3U~ESI&~", sQLTimeoutException0.getSQLState());
      //  // Unstable assertion: assertEquals(").", sQLTimeoutException0.getMessage());
      //  // Unstable assertion: assertEquals(432, sQLTimeoutException0.getErrorCode());
      //  // Unstable assertion: assertEquals("java.sql.SQLTimeoutException: ).", sQLTimeoutException0.toString());
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) arrayDeque0);
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertFalse(jSONArray0.isEmpty());
      //  // Unstable assertion: assertEquals(1, jSONArray0.length());
      //  // Unstable assertion: assertNotNull(jSONArray0);
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertFalse(jSONArray0.isEmpty());
      //  // Unstable assertion: assertEquals(1, jSONArray0.length());
      //  // Unstable assertion: assertFalse(jSONArray1.isEmpty());
      //  // Unstable assertion: assertEquals(1, jSONArray1.length());
      //  // Unstable assertion: assertNotNull(jSONArray1);
      //  // Unstable assertion: assertFalse(jSONArray1.equals((Object)jSONArray0));
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      boolean boolean1 = jSONArray1.optBoolean(0, true);
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertFalse(jSONArray0.isEmpty());
      //  // Unstable assertion: assertEquals(1, jSONArray0.length());
      //  // Unstable assertion: assertFalse(jSONArray1.isEmpty());
      //  // Unstable assertion: assertEquals(1, jSONArray1.length());
      //  // Unstable assertion: assertNotSame(jSONArray0, jSONArray1);
      //  // Unstable assertion: assertNotSame(jSONArray1, jSONArray0);
      //  // Unstable assertion: assertFalse(jSONArray0.equals((Object)jSONArray1));
      //  // Unstable assertion: assertFalse(jSONArray1.equals((Object)jSONArray0));
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertTrue(boolean1);
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      float float0 = jSONArray1.optFloat((-431), (-166.505F));
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertFalse(jSONArray0.isEmpty());
      //  // Unstable assertion: assertEquals(1, jSONArray0.length());
      //  // Unstable assertion: assertFalse(jSONArray1.isEmpty());
      //  // Unstable assertion: assertEquals(1, jSONArray1.length());
      //  // Unstable assertion: assertNotSame(jSONArray0, jSONArray1);
      //  // Unstable assertion: assertNotSame(jSONArray1, jSONArray0);
      //  // Unstable assertion: assertFalse(jSONArray0.equals((Object)jSONArray1));
      //  // Unstable assertion: assertFalse(jSONArray1.equals((Object)jSONArray0));
      //  // Unstable assertion: assertEquals((-166.505F), float0, 0.01F);
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      Object object0 = jSONArray0.opt(0);
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertFalse(jSONArray0.isEmpty());
      //  // Unstable assertion: assertEquals(1, jSONArray0.length());
      //  // Unstable assertion: assertNotSame(jSONArray0, jSONArray1);
      //  // Unstable assertion: assertNotNull(object0);
      //  // Unstable assertion: assertFalse(jSONArray0.equals((Object)jSONArray1));
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      String string0 = jSONArray1.optString((-431), " (null).");
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertFalse(jSONArray0.isEmpty());
      //  // Unstable assertion: assertEquals(1, jSONArray0.length());
      //  // Unstable assertion: assertFalse(jSONArray1.isEmpty());
      //  // Unstable assertion: assertEquals(1, jSONArray1.length());
      //  // Unstable assertion: assertNotSame(jSONArray0, jSONArray1);
      //  // Unstable assertion: assertNotSame(jSONArray1, jSONArray0);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertFalse(jSONArray0.equals((Object)jSONArray1));
      //  // Unstable assertion: assertFalse(jSONArray1.equals((Object)jSONArray0));
      //  // Unstable assertion: assertFalse(string0.equals((Object)object0));
      //  // Unstable assertion: assertEquals(" (null).", string0);
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      JSONArray jSONArray2 = jSONArray1.put((-544.5887F));
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertFalse(jSONArray0.isEmpty());
      //  // Unstable assertion: assertEquals(1, jSONArray0.length());
      //  // Unstable assertion: assertFalse(jSONArray1.isEmpty());
      //  // Unstable assertion: assertEquals(2, jSONArray1.length());
      //  // Unstable assertion: assertFalse(jSONArray2.isEmpty());
      //  // Unstable assertion: assertEquals(2, jSONArray2.length());
      //  // Unstable assertion: assertNotSame(jSONArray0, jSONArray2);
      //  // Unstable assertion: assertNotSame(jSONArray0, jSONArray1);
      //  // Unstable assertion: assertSame(jSONArray1, jSONArray2);
      //  // Unstable assertion: assertNotSame(jSONArray1, jSONArray0);
      //  // Unstable assertion: assertNotSame(jSONArray2, jSONArray0);
      //  // Unstable assertion: assertSame(jSONArray2, jSONArray1);
      //  // Unstable assertion: assertNotNull(jSONArray2);
      //  // Unstable assertion: assertFalse(jSONArray0.equals((Object)jSONArray1));
      //  // Unstable assertion: assertFalse(jSONArray1.equals((Object)jSONArray0));
      //  // Unstable assertion: assertFalse(jSONArray2.equals((Object)jSONArray0));
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      // Undeclared exception!
      try { 
        jSONArray1.write((Writer) null);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray1.isEmpty());
      assertEquals(0, jSONArray1.length());
      assertNotNull(jSONArray1);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      
      float float0 = jSONArray0.optFloat(44);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotSame(jSONArray0, jSONArray1);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertEquals(Float.NaN, float0, 0.01F);
      
      JSONArray jSONArray2 = jSONArray1.put(0, 1L);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(1, jSONArray2.length());
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertNotNull(jSONArray2);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      
      HashMap<SQLSyntaxErrorException, SQLNonTransientException> hashMap0 = new HashMap<SQLSyntaxErrorException, SQLNonTransientException>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONArray jSONArray3 = jSONArray2.put((Map<?, ?>) hashMap0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(2, jSONArray2.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(2, jSONArray3.length());
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray0, jSONArray3);
      assertSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray3);
      assertNotSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray3);
      assertNotSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray1);
      assertNotNull(jSONArray3);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertFalse(jSONArray3.equals((Object)jSONArray0));
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertNotNull(sQLClientInfoException0);
      
      Throwable[] throwableArray0 = sQLClientInfoException0.getSuppressed();
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, throwableArray0.length);
      assertNotNull(throwableArray0);
      
      sQLClientInfoException0.setNextException((SQLException) null);
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      
      DataTruncation dataTruncation0 = new DataTruncation(0, true, false, 0, 0, sQLClientInfoException0);
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertNotNull(dataTruncation0);
      
      JSONArray jSONArray4 = jSONArray0.putAll((Object) dataTruncation0);
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertFalse(jSONArray4.isEmpty());
      assertEquals(2, jSONArray4.length());
      assertNotSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray4);
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray0, jSONArray3);
      assertNotSame(jSONArray4, jSONArray3);
      assertNotSame(jSONArray4, jSONArray2);
      assertSame(jSONArray4, jSONArray0);
      assertNotSame(jSONArray4, jSONArray1);
      assertNotNull(jSONArray4);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray0.equals((Object)jSONArray3));
      assertFalse(jSONArray4.equals((Object)jSONArray3));
      assertFalse(jSONArray4.equals((Object)jSONArray2));
      assertFalse(jSONArray4.equals((Object)jSONArray1));
      
      JSONArray jSONArray5 = jSONArray2.put((-2198.0F));
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(3, jSONArray1.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(3, jSONArray2.length());
      assertEquals(3, jSONArray5.length());
      assertFalse(jSONArray5.isEmpty());
      assertNotSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray4);
      assertNotSame(jSONArray0, jSONArray5);
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray0, jSONArray3);
      assertSame(jSONArray1, jSONArray5);
      assertSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray1, jSONArray4);
      assertSame(jSONArray1, jSONArray3);
      assertNotSame(jSONArray2, jSONArray4);
      assertNotSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray5);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray5, jSONArray1);
      assertNotSame(jSONArray5, jSONArray4);
      assertSame(jSONArray5, jSONArray3);
      assertNotSame(jSONArray5, jSONArray0);
      assertSame(jSONArray5, jSONArray2);
      assertNotNull(jSONArray5);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray0.equals((Object)jSONArray3));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(jSONArray1.equals((Object)jSONArray4));
      assertFalse(jSONArray2.equals((Object)jSONArray4));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertFalse(jSONArray5.equals((Object)jSONArray4));
      assertFalse(jSONArray5.equals((Object)jSONArray0));
      
      List<Object> list0 = jSONArray0.toList();
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray4);
      assertNotSame(jSONArray0, jSONArray5);
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray0, jSONArray3);
      assertNotNull(list0);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray0.equals((Object)jSONArray5));
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray0.equals((Object)jSONArray3));
      assertFalse(list0.contains(false));
      
      DataTruncation dataTruncation1 = (DataTruncation)jSONArray0.remove(0);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, dataTruncation1.getErrorCode());
      assertEquals("22001", dataTruncation1.getSQLState());
      assertEquals("Data truncation", dataTruncation1.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation1.toString());
      assertNotSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray4);
      assertNotSame(jSONArray0, jSONArray5);
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray0, jSONArray3);
      assertSame(dataTruncation1, dataTruncation0);
      assertNotNull(dataTruncation1);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray0.equals((Object)jSONArray5));
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray0.equals((Object)jSONArray3));
      
      int int0 = 120;
      try { 
        jSONArray2.getJSONArray(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a JSONArray (class java.lang.Long : 1).
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNotNull(sQLTransactionRollbackException0);
      
      sQLTransactionRollbackException0.setNextException((SQLException) null);
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      
      Throwable[] throwableArray0 = sQLTransactionRollbackException0.getSuppressed();
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertEquals(0, throwableArray0.length);
      assertNotNull(throwableArray0);
      
      HashMap<SQLRecoverableException, SQLTransactionRollbackException> hashMap0 = new HashMap<SQLRecoverableException, SQLTransactionRollbackException>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) null);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      StringWriter stringWriter0 = new StringWriter(2637);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "F+WZ<{^[(ZOa>");
      assertEquals("F+WZ<{^[(ZOa>", stringWriter0.toString());
      assertEquals("F+WZ<{^[(ZOa>", stringWriter1.toString());
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringWriter1);
      
      StringWriter stringWriter2 = stringWriter1.append('\\');
      assertEquals("F+WZ<{^[(ZOa>\\", stringWriter0.toString());
      assertEquals("F+WZ<{^[(ZOa>\\", stringWriter1.toString());
      assertEquals("F+WZ<{^[(ZOa>\\", stringWriter2.toString());
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringWriter2, stringWriter0);
      assertNotNull(stringWriter2);
      
      Writer writer0 = jSONArray0.write((Writer) stringWriter2, 2637, (-4));
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertEquals("F+WZ<{^[(ZOa>\\[]", stringWriter0.toString());
      assertEquals("F+WZ<{^[(ZOa>\\[]", stringWriter1.toString());
      assertEquals("F+WZ<{^[(ZOa>\\[]", stringWriter2.toString());
      assertEquals("F+WZ<{^[(ZOa>\\[]", writer0.toString());
      assertSame(stringWriter0, writer0);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, writer0);
      assertSame(stringWriter2, writer0);
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringWriter2, stringWriter0);
      assertSame(writer0, stringWriter2);
      assertSame(writer0, stringWriter1);
      assertSame(writer0, stringWriter0);
      assertNotNull(writer0);
      
      // Undeclared exception!
      try { 
        jSONArray0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNotNull(sQLTransactionRollbackException0);
      
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      Writer writer0 = jSONArray0.write((Writer) stringWriter0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertEquals("[]", stringWriter0.toString());
      assertEquals("[]", writer0.toString());
      assertSame(stringWriter0, writer0);
      assertSame(writer0, stringWriter0);
      assertNotNull(writer0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("^K@?Ri$6n3FE");
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ^K@?Ri$6n3FE", sQLRecoverableException0.toString());
      assertEquals("^K@?Ri$6n3FE", sQLRecoverableException0.getMessage());
      assertNotNull(sQLRecoverableException0);
      
      sQLTransactionRollbackException0.addSuppressed(sQLRecoverableException0);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ^K@?Ri$6n3FE", sQLRecoverableException0.toString());
      assertEquals("^K@?Ri$6n3FE", sQLRecoverableException0.getMessage());
      
      Writer writer1 = jSONArray0.write(writer0, 1434, (-860));
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertEquals("[][]", stringWriter0.toString());
      assertEquals("[][]", writer0.toString());
      assertEquals("[][]", writer1.toString());
      assertSame(stringWriter0, writer0);
      assertSame(stringWriter0, writer1);
      assertSame(writer0, writer1);
      assertSame(writer0, stringWriter0);
      assertSame(writer1, writer0);
      assertSame(writer1, stringWriter0);
      assertNotNull(writer1);
      
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Spliterator<Throwable> spliterator0 = sQLTransactionRollbackException0.spliterator();
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNotNull(spliterator0);
      
      JSONArray jSONArray1 = jSONArray0.put((Map<?, ?>) hashMap0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      Throwable[] throwableArray0 = sQLTransactionRollbackException0.getSuppressed();
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals(1, throwableArray0.length);
      assertNotNull(throwableArray0);
      
      int int0 = 2;
      try { 
        jSONArray0.getJSONObject(2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[2] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      
      float float0 = jSONArray0.optFloat(44);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotSame(jSONArray0, jSONArray1);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertEquals(Float.NaN, float0, 0.01F);
      
      JSONArray jSONArray2 = jSONArray1.put(0, 1L);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(1, jSONArray2.length());
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertNotNull(jSONArray2);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      
      int int0 = 0;
      String string0 = jSONArray1.toString(1237);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray1, jSONArray0);
      assertNotNull(string0);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertNotNull(sQLClientInfoException0);
      
      Throwable[] throwableArray0 = sQLClientInfoException0.getSuppressed();
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, throwableArray0.length);
      assertNotNull(throwableArray0);
      
      sQLClientInfoException0.setNextException((SQLException) null);
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      
      DataTruncation dataTruncation0 = new DataTruncation(0, false, true, 0, 0, sQLClientInfoException0);
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertNotNull(dataTruncation0);
      
      JSONArray jSONArray3 = jSONArray0.putAll((Object) dataTruncation0);
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(2, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertNotSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray3, jSONArray1);
      assertNotSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray0);
      assertNotNull(jSONArray3);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray3.equals((Object)jSONArray1));
      assertFalse(jSONArray3.equals((Object)jSONArray2));
      
      JSONArray jSONArray4 = jSONArray2.put(0.0F);
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(2, jSONArray2.length());
      assertFalse(jSONArray4.isEmpty());
      assertEquals(2, jSONArray4.length());
      assertNotSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertNotSame(jSONArray0, jSONArray4);
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray4);
      assertNotSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray1, jSONArray3);
      assertNotSame(jSONArray2, jSONArray3);
      assertNotSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray4);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray4, jSONArray1);
      assertNotSame(jSONArray4, jSONArray0);
      assertSame(jSONArray4, jSONArray2);
      assertNotSame(jSONArray4, jSONArray3);
      assertNotNull(jSONArray4);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(jSONArray1.equals((Object)jSONArray3));
      assertFalse(jSONArray2.equals((Object)jSONArray3));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertFalse(jSONArray4.equals((Object)jSONArray0));
      assertFalse(jSONArray4.equals((Object)jSONArray3));
      
      List<Object> list0 = jSONArray0.toList();
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertNotSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertNotSame(jSONArray0, jSONArray4);
      assertNotSame(jSONArray0, jSONArray2);
      assertNotNull(list0);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray0.equals((Object)jSONArray4));
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(list0.contains(1L));
      
      DataTruncation dataTruncation1 = (DataTruncation)jSONArray0.remove(0);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals("01004", dataTruncation1.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation1.toString());
      assertEquals(0, dataTruncation1.getErrorCode());
      assertEquals("Data truncation", dataTruncation1.getMessage());
      assertNotSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertNotSame(jSONArray0, jSONArray4);
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(dataTruncation1, dataTruncation0);
      assertNotNull(dataTruncation1);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray0.equals((Object)jSONArray4));
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      
      try { 
        jSONArray4.put(0, Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      
      float float0 = jSONArray0.optFloat(44);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotSame(jSONArray0, jSONArray1);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertEquals(Float.NaN, float0, 0.01F);
      
      JSONArray jSONArray2 = jSONArray1.put(0, 1L);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(1, jSONArray2.length());
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertNotSame(jSONArray2, jSONArray0);
      assertNotNull(jSONArray2);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      
      int int0 = 0;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNotNull(sQLClientInfoException0);
      
      Throwable[] throwableArray0 = sQLClientInfoException0.getSuppressed();
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals(0, throwableArray0.length);
      assertNotNull(throwableArray0);
      
      sQLClientInfoException0.setNextException((SQLException) null);
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 0, 0, sQLClientInfoException0);
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertNotNull(dataTruncation0);
      
      JSONArray jSONArray3 = jSONArray0.putAll((Object) dataTruncation0);
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals(2, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray3, jSONArray2);
      assertNotSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray0);
      assertNotNull(jSONArray3);
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray3.equals((Object)jSONArray2));
      assertFalse(jSONArray3.equals((Object)jSONArray1));
      
      Object object0 = jSONArray2.get(0);
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(1, jSONArray2.length());
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertNotSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray1, jSONArray3);
      assertSame(jSONArray2, jSONArray1);
      assertNotSame(jSONArray2, jSONArray3);
      assertNotSame(jSONArray2, jSONArray0);
      assertNotNull(object0);
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(jSONArray1.equals((Object)jSONArray3));
      assertFalse(jSONArray2.equals((Object)jSONArray3));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertEquals(1L, object0);
      
      JSONArray jSONArray4 = jSONArray2.put(0.0F);
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(2, jSONArray2.length());
      assertFalse(jSONArray4.isEmpty());
      assertEquals(2, jSONArray4.length());
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray3);
      assertNotSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray4);
      assertNotSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray1, jSONArray3);
      assertSame(jSONArray2, jSONArray1);
      assertNotSame(jSONArray2, jSONArray3);
      assertNotSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray4);
      assertSame(jSONArray4, jSONArray1);
      assertNotSame(jSONArray4, jSONArray3);
      assertSame(jSONArray4, jSONArray2);
      assertNotSame(jSONArray4, jSONArray0);
      assertNotNull(jSONArray4);
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(jSONArray1.equals((Object)jSONArray3));
      assertFalse(jSONArray2.equals((Object)jSONArray3));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertFalse(jSONArray4.equals((Object)jSONArray3));
      assertFalse(jSONArray4.equals((Object)jSONArray0));
      
      List<Object> list0 = jSONArray0.toList();
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray3);
      assertNotSame(jSONArray0, jSONArray1);
      assertNotNull(list0);
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray0.equals((Object)jSONArray4));
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(list0.contains(true));
      
      DataTruncation dataTruncation1 = (DataTruncation)jSONArray0.remove(0);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals("Data truncation", dataTruncation1.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation1.toString());
      assertEquals("01004", dataTruncation1.getSQLState());
      assertEquals(0, dataTruncation1.getErrorCode());
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray3);
      assertNotSame(jSONArray0, jSONArray1);
      assertSame(dataTruncation1, dataTruncation0);
      assertNotNull(dataTruncation1);
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray0.equals((Object)jSONArray4));
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      
      try { 
        jSONArray4.put(0, Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LinkedHashSet<SQLNonTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientConnectionException>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("java.sql.sqltimeoutexception@0000000001", "!tO_/5oh/~.+{");
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("!tO_/5oh/~.+{", sQLNonTransientConnectionException0.getSQLState());
      assertNotNull(sQLNonTransientConnectionException0);
      
      boolean boolean0 = linkedHashSet0.add(sQLNonTransientConnectionException0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("!tO_/5oh/~.+{", sQLNonTransientConnectionException0.getSQLState());
      assertTrue(boolean0);
      assertTrue(linkedHashSet0.contains(sQLNonTransientConnectionException0));
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedHashSet0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertNotNull(jSONArray0);
      assertTrue(linkedHashSet0.contains(sQLNonTransientConnectionException0));
      
      JSONArray jSONArray1 = jSONArray0.put(0L);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(2, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertTrue(linkedHashSet0.contains(sQLNonTransientConnectionException0));
      
      int int0 = jSONArray0.length();
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertEquals(2, int0);
      assertTrue(linkedHashSet0.contains(sQLNonTransientConnectionException0));
      
      List<Object> list0 = jSONArray0.toList();
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertSame(jSONArray0, jSONArray1);
      assertNotNull(list0);
      assertTrue(linkedHashSet0.contains(sQLNonTransientConnectionException0));
      assertTrue(list0.contains(0L));
      assertFalse(list0.contains("java.sql.sqltimeoutexception@0000000001"));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(898);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      HashMap<JSONArray, SQLIntegrityConstraintViolationException> hashMap0 = new HashMap<JSONArray, SQLIntegrityConstraintViolationException>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONArray jSONArray1 = jSONArray0.put(898, (Map<?, ?>) hashMap0);
      assertEquals(899, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(899, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertNotNull(sQLClientInfoException0);
      
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(map0);
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("y", "y", (Map<String, ClientInfoStatus>) null);
      assertEquals("java.sql.SQLClientInfoException: y", sQLClientInfoException1.toString());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("y", sQLClientInfoException1.getMessage());
      assertEquals("y", sQLClientInfoException1.getSQLState());
      assertNotNull(sQLClientInfoException1);
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(" : ", "", 1293, sQLClientInfoException1);
      assertEquals("java.sql.SQLClientInfoException: y", sQLClientInfoException1.toString());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("y", sQLClientInfoException1.getMessage());
      assertEquals("y", sQLClientInfoException1.getSQLState());
      assertEquals(" : ", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException:  : ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(1293, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = hashMap0.put(jSONArray1, sQLIntegrityConstraintViolationException0);
      assertEquals(899, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(899, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals("java.sql.SQLClientInfoException: y", sQLClientInfoException1.toString());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("y", sQLClientInfoException1.getMessage());
      assertEquals("y", sQLClientInfoException1.getSQLState());
      assertEquals(" : ", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException:  : ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(1293, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotSame(sQLClientInfoException1, sQLClientInfoException0);
      assertNull(sQLIntegrityConstraintViolationException1);
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      
      boolean boolean0 = jSONArray1.optBoolean(898, false);
      assertEquals(899, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(899, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(boolean0);
      
      try { 
        jSONArray1.put(Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      int int0 = jSONArray0.length();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, int0);
      
      JSONObject jSONObject0 = jSONArray0.toJSONObject((JSONArray) null);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNull(jSONObject0);
      
      int int1 = 3642;
      JSONArray jSONArray1 = jSONArray0.put(3642, false);
      assertEquals(3643, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(3643, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      try { 
        jSONArray0.getBoolean((-870));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-870] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONObject jSONObject0 = jSONArray0.toJSONObject((JSONArray) null);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNull(jSONObject0);
      
      JSONArray jSONArray1 = jSONArray0.optJSONArray(609);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = 2473;
      HashSet<Integer> hashSet0 = new HashSet<Integer>(2473, 2473);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains(2473));
      
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      assertFalse(hashSet0.contains(2473));
      
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(hashSet0.contains(2473));
      
      Spliterator<Object> spliterator0 = jSONArray0.spliterator();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotSame(jSONArray0, jSONArray1);
      assertNotNull(spliterator0);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(hashSet0.contains(2473));
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      boolean boolean0 = hashSet0.removeAll(vector0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(boolean0);
      assertFalse(hashSet0.contains(2473));
      
      Iterator<Object> iterator0 = jSONArray1.iterator();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
      assertNotNull(iterator0);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(hashSet0.contains(2473));
      
      JSONArray jSONArray2 = jSONArray1.putAll(jSONArray0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertEquals(0, jSONArray2.length());
      assertTrue(jSONArray2.isEmpty());
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertNotNull(jSONArray2);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertFalse(hashSet0.contains(2473));
      
      JSONArray jSONArray3 = jSONArray0.put(0.0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(1, jSONArray3.length());
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray3, jSONArray2);
      assertNotSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray0);
      assertNotNull(jSONArray3);
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray3.equals((Object)jSONArray2));
      assertFalse(jSONArray3.equals((Object)jSONArray1));
      assertFalse(hashSet0.contains(2473));
      
      HashMap<SQLClientInfoException, BatchUpdateException> hashMap0 = new HashMap<SQLClientInfoException, BatchUpdateException>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONArray jSONArray4 = jSONArray3.put(2473, (Map<?, ?>) hashMap0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2474, jSONArray0.length());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(2474, jSONArray3.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(jSONArray4.isEmpty());
      assertEquals(2474, jSONArray4.length());
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray3);
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray3, jSONArray2);
      assertNotSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray4);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray4, jSONArray3);
      assertNotSame(jSONArray4, jSONArray1);
      assertSame(jSONArray4, jSONArray0);
      assertNotSame(jSONArray4, jSONArray2);
      assertNotNull(jSONArray4);
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray3.equals((Object)jSONArray2));
      assertFalse(jSONArray3.equals((Object)jSONArray1));
      assertFalse(jSONArray4.equals((Object)jSONArray1));
      assertFalse(jSONArray4.equals((Object)jSONArray2));
      assertFalse(hashSet0.contains(2473));
      
      int int1 = (-2839);
      try { 
        jSONArray3.getLong((-2839));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-2839] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      Iterator<Object> iterator0 = jSONArray0.iterator();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(iterator0);
      
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNull(jSONObject0);
      
      int int0 = 615;
      JSONArray jSONArray1 = jSONArray0.put(615, 35.28);
      assertEquals(616, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(616, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      boolean boolean0 = jSONArray0.isNull(615);
      assertEquals(616, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertFalse(boolean0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Zk$%eC.H)kH", "V+sJ1o");
      assertEquals("Zk$%eC.H)kH", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Zk$%eC.H)kH", sQLFeatureNotSupportedException0.toString());
      assertEquals("V+sJ1o", sQLFeatureNotSupportedException0.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      JSONArray jSONArray2 = jSONArray0.putAll((Object) sQLFeatureNotSupportedException0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(617, jSONArray0.length());
      assertEquals("Zk$%eC.H)kH", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Zk$%eC.H)kH", sQLFeatureNotSupportedException0.toString());
      assertEquals("V+sJ1o", sQLFeatureNotSupportedException0.getSQLState());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(617, jSONArray2.length());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertNotNull(jSONArray2);
      
      String string0 = jSONArray2.toString();
      assertFalse(jSONArray0.isEmpty());
      assertEquals(617, jSONArray0.length());
      assertEquals("Zk$%eC.H)kH", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Zk$%eC.H)kH", sQLFeatureNotSupportedException0.toString());
      assertEquals("V+sJ1o", sQLFeatureNotSupportedException0.getSQLState());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(617, jSONArray2.length());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertNotNull(string0);
      
      Object object0 = jSONArray0.remove(615);
      assertEquals(616, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertNotNull(object0);
      assertEquals(35.28, object0);
      
      JSONArray jSONArray3 = jSONArray2.put((Object) jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(617, jSONArray0.length());
      assertEquals("Zk$%eC.H)kH", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Zk$%eC.H)kH", sQLFeatureNotSupportedException0.toString());
      assertEquals("V+sJ1o", sQLFeatureNotSupportedException0.getSQLState());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(617, jSONArray2.length());
      assertEquals(617, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray2);
      assertNotNull(jSONArray3);
      
      JSONPointer jSONPointer0 = null;
      try {
        jSONPointer0 = new JSONPointer("Zk$%eC.H)kH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNotNull(sQLClientInfoException0);
      
      JSONArray jSONArray2 = jSONArray1.put(44, (float) 0);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(45, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(45, jSONArray2.length());
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertNotSame(jSONArray2, jSONArray0);
      assertNotNull(jSONArray2);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      
      Throwable[] throwableArray0 = sQLClientInfoException0.getSuppressed();
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, throwableArray0.length);
      assertNotNull(throwableArray0);
      
      sQLClientInfoException0.setNextException((SQLException) null);
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      
      DataTruncation dataTruncation0 = new DataTruncation(44, false, true, 0, 44, sQLClientInfoException0);
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertNotNull(dataTruncation0);
      
      List<Object> list0 = jSONArray0.toList();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertNotNull(list0);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(list0.contains(true));
      
      int int0 = 0;
      try { 
        jSONArray1.getNumber(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a number (class org.json.JSONObject$Null : null).
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      int int0 = 615;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      HashMap<SQLNonTransientConnectionException, SQLException> hashMap0 = new HashMap<SQLNonTransientConnectionException, SQLException>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONArray jSONArray1 = jSONArray0.put((Map<?, ?>) hashMap0);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Z,$LfC.H)kH", "V+sJ1o");
      assertEquals("V+sJ1o", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("Z,$LfC.H)kH", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Z,$LfC.H)kH", sQLFeatureNotSupportedException0.toString());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      JSONArray jSONArray2 = jSONArray0.putAll((Object) sQLFeatureNotSupportedException0);
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals("V+sJ1o", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("Z,$LfC.H)kH", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Z,$LfC.H)kH", sQLFeatureNotSupportedException0.toString());
      assertEquals(2, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertNotNull(jSONArray2);
      
      String string0 = jSONArray2.toString();
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals("V+sJ1o", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("Z,$LfC.H)kH", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Z,$LfC.H)kH", sQLFeatureNotSupportedException0.toString());
      assertEquals(2, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertNotNull(string0);
      
      Object object0 = jSONArray0.remove(615);
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertNull(object0);
      
      JSONArray jSONArray3 = jSONArray2.put((Object) jSONArray0);
      assertEquals(3, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals("V+sJ1o", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("Z,$LfC.H)kH", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Z,$LfC.H)kH", sQLFeatureNotSupportedException0.toString());
      assertEquals(3, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(3, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray1);
      assertNotNull(jSONArray3);
      
      JSONPointer jSONPointer0 = null;
      try {
        jSONPointer0 = new JSONPointer("Z,$LfC.H)kH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Float float0 = Float.valueOf((-287.649F));
      assertNotNull(float0);
      assertEquals((-287.649F), (float)float0, 0.01F);
      
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      String string0 = jSONArray0.toString(2193);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(string0);
      
      JSONArray jSONArray1 = jSONArray0.put((double) (-287.649F));
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      try { 
        jSONArray0.getFloat(93);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[93] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = 2919;
      JSONArray jSONArray0 = new JSONArray(2919);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      int int1 = 0;
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = jSONArray0.optBigInteger(0, bigInteger0);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      
      try { 
        jSONArray0.getBoolean(2919);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[2919] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ArrayDeque<SQLTimeoutException> arrayDeque0 = new ArrayDeque<SQLTimeoutException>();
      //  // Unstable assertion: assertTrue(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals(0, arrayDeque0.size());
      //  // Unstable assertion: assertNotNull(arrayDeque0);
      
      SQLDataException sQLDataException0 = new SQLDataException(").");
      //  // Unstable assertion: assertNull(sQLDataException0.getSQLState());
      //  // Unstable assertion: assertEquals(").", sQLDataException0.getMessage());
      //  // Unstable assertion: assertEquals("java.sql.SQLDataException: ).", sQLDataException0.toString());
      //  // Unstable assertion: assertEquals(0, sQLDataException0.getErrorCode());
      //  // Unstable assertion: assertNotNull(sQLDataException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      //  // Unstable assertion: assertEquals(0, sQLRecoverableException0.getErrorCode());
      //  // Unstable assertion: assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      //  // Unstable assertion: assertNull(sQLRecoverableException0.getSQLState());
      //  // Unstable assertion: assertNull(sQLRecoverableException0.getMessage());
      //  // Unstable assertion: assertNotNull(sQLRecoverableException0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(432);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertNotNull(byteArrayOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      //  // Unstable assertion: assertNotNull(mockPrintStream0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) ").";
      objectArray0[1] = (Object) ").";
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) sQLDataException0;
      objectArray0[4] = (Object) byteArrayOutputStream0;
      objectArray0[5] = (Object) arrayDeque0;
      objectArray0[6] = (Object) byteArrayOutputStream0;
      objectArray0[7] = (Object) sQLRecoverableException0;
      PrintStream printStream0 = mockPrintStream0.format("_e~\"BGa$/oH", objectArray0);
      //  // Unstable assertion: assertEquals("_e~\"BGa$/oH", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(11, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertSame(mockPrintStream0, printStream0);
      //  // Unstable assertion: assertSame(printStream0, mockPrintStream0);
      //  // Unstable assertion: assertEquals(8, objectArray0.length);
      //  // Unstable assertion: assertNotNull(printStream0);
      
      sQLRecoverableException0.printStackTrace(printStream0);
      //  // Unstable assertion: assertEquals(0, sQLRecoverableException0.getErrorCode());
      //  // Unstable assertion: assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      //  // Unstable assertion: assertNull(sQLRecoverableException0.getSQLState());
      //  // Unstable assertion: assertNull(sQLRecoverableException0.getMessage());
      //  // Unstable assertion: assertEquals(1102, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertSame(mockPrintStream0, printStream0);
      //  // Unstable assertion: assertSame(printStream0, mockPrintStream0);
      //  // Unstable assertion: assertEquals(8, objectArray0.length);
      
      Throwable[] throwableArray0 = sQLRecoverableException0.getSuppressed();
      //  // Unstable assertion: assertEquals(0, sQLRecoverableException0.getErrorCode());
      //  // Unstable assertion: assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      //  // Unstable assertion: assertNull(sQLRecoverableException0.getSQLState());
      //  // Unstable assertion: assertNull(sQLRecoverableException0.getMessage());
      //  // Unstable assertion: assertEquals(0, throwableArray0.length);
      //  // Unstable assertion: assertNotNull(throwableArray0);
      
      sQLDataException0.addSuppressed(sQLRecoverableException0);
      //  // Unstable assertion: assertNull(sQLDataException0.getSQLState());
      //  // Unstable assertion: assertEquals(").", sQLDataException0.getMessage());
      //  // Unstable assertion: assertEquals("java.sql.SQLDataException: ).", sQLDataException0.toString());
      //  // Unstable assertion: assertEquals(0, sQLDataException0.getErrorCode());
      //  // Unstable assertion: assertEquals(0, sQLRecoverableException0.getErrorCode());
      //  // Unstable assertion: assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      //  // Unstable assertion: assertNull(sQLRecoverableException0.getSQLState());
      //  // Unstable assertion: assertNull(sQLRecoverableException0.getMessage());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(").", "hy/MqSH3U~ESI&~", 432, sQLDataException0);
      //  // Unstable assertion: assertNull(sQLDataException0.getSQLState());
      //  // Unstable assertion: assertEquals(").", sQLDataException0.getMessage());
      //  // Unstable assertion: assertEquals("java.sql.SQLDataException: ).", sQLDataException0.toString());
      //  // Unstable assertion: assertEquals(0, sQLDataException0.getErrorCode());
      //  // Unstable assertion: assertEquals("hy/MqSH3U~ESI&~", sQLTimeoutException0.getSQLState());
      //  // Unstable assertion: assertEquals(").", sQLTimeoutException0.getMessage());
      //  // Unstable assertion: assertEquals("java.sql.SQLTimeoutException: ).", sQLTimeoutException0.toString());
      //  // Unstable assertion: assertEquals(432, sQLTimeoutException0.getErrorCode());
      //  // Unstable assertion: assertNotNull(sQLTimeoutException0);
      
      boolean boolean0 = arrayDeque0.add(sQLTimeoutException0);
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertNull(sQLDataException0.getSQLState());
      //  // Unstable assertion: assertEquals(").", sQLDataException0.getMessage());
      //  // Unstable assertion: assertEquals("java.sql.SQLDataException: ).", sQLDataException0.toString());
      //  // Unstable assertion: assertEquals(0, sQLDataException0.getErrorCode());
      //  // Unstable assertion: assertEquals("hy/MqSH3U~ESI&~", sQLTimeoutException0.getSQLState());
      //  // Unstable assertion: assertEquals(").", sQLTimeoutException0.getMessage());
      //  // Unstable assertion: assertEquals("java.sql.SQLTimeoutException: ).", sQLTimeoutException0.toString());
      //  // Unstable assertion: assertEquals(432, sQLTimeoutException0.getErrorCode());
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) arrayDeque0);
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertFalse(jSONArray0.isEmpty());
      //  // Unstable assertion: assertEquals(1, jSONArray0.length());
      //  // Unstable assertion: assertNotNull(jSONArray0);
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertFalse(jSONArray0.isEmpty());
      //  // Unstable assertion: assertEquals(1, jSONArray0.length());
      //  // Unstable assertion: assertFalse(jSONArray1.isEmpty());
      //  // Unstable assertion: assertEquals(1, jSONArray1.length());
      //  // Unstable assertion: assertNotNull(jSONArray1);
      //  // Unstable assertion: assertFalse(jSONArray1.equals((Object)jSONArray0));
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      boolean boolean1 = jSONArray1.optBoolean(0, true);
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertFalse(jSONArray0.isEmpty());
      //  // Unstable assertion: assertEquals(1, jSONArray0.length());
      //  // Unstable assertion: assertFalse(jSONArray1.isEmpty());
      //  // Unstable assertion: assertEquals(1, jSONArray1.length());
      //  // Unstable assertion: assertNotSame(jSONArray0, jSONArray1);
      //  // Unstable assertion: assertNotSame(jSONArray1, jSONArray0);
      //  // Unstable assertion: assertFalse(jSONArray0.equals((Object)jSONArray1));
      //  // Unstable assertion: assertFalse(jSONArray1.equals((Object)jSONArray0));
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertTrue(boolean1);
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      float float0 = jSONArray1.optFloat((-431), (-166.505F));
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertFalse(jSONArray0.isEmpty());
      //  // Unstable assertion: assertEquals(1, jSONArray0.length());
      //  // Unstable assertion: assertFalse(jSONArray1.isEmpty());
      //  // Unstable assertion: assertEquals(1, jSONArray1.length());
      //  // Unstable assertion: assertNotSame(jSONArray0, jSONArray1);
      //  // Unstable assertion: assertNotSame(jSONArray1, jSONArray0);
      //  // Unstable assertion: assertFalse(jSONArray0.equals((Object)jSONArray1));
      //  // Unstable assertion: assertFalse(jSONArray1.equals((Object)jSONArray0));
      //  // Unstable assertion: assertEquals((-166.505F), float0, 0.01F);
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      Object object0 = jSONArray0.opt(0);
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertFalse(jSONArray0.isEmpty());
      //  // Unstable assertion: assertEquals(1, jSONArray0.length());
      //  // Unstable assertion: assertNotSame(jSONArray0, jSONArray1);
      //  // Unstable assertion: assertNotNull(object0);
      //  // Unstable assertion: assertFalse(jSONArray0.equals((Object)jSONArray1));
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      String string0 = jSONArray1.optString((-431), " (null).");
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertFalse(jSONArray0.isEmpty());
      //  // Unstable assertion: assertEquals(1, jSONArray0.length());
      //  // Unstable assertion: assertFalse(jSONArray1.isEmpty());
      //  // Unstable assertion: assertEquals(1, jSONArray1.length());
      //  // Unstable assertion: assertNotSame(jSONArray0, jSONArray1);
      //  // Unstable assertion: assertNotSame(jSONArray1, jSONArray0);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertFalse(jSONArray0.equals((Object)jSONArray1));
      //  // Unstable assertion: assertFalse(jSONArray1.equals((Object)jSONArray0));
      //  // Unstable assertion: assertFalse(string0.equals((Object)object0));
      //  // Unstable assertion: assertEquals(" (null).", string0);
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      int int0 = jSONArray0.optInt(0);
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertFalse(jSONArray0.isEmpty());
      //  // Unstable assertion: assertEquals(1, jSONArray0.length());
      //  // Unstable assertion: assertNotSame(jSONArray0, jSONArray1);
      //  // Unstable assertion: assertFalse(jSONArray0.equals((Object)jSONArray1));
      //  // Unstable assertion: assertEquals(0, int0);
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      ArrayDeque<SQLTransactionRollbackException> arrayDeque1 = arrayDeque0.clone();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertNotNull(arrayDeque1);
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) arrayDeque1);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      
      int int0 = 11;
      boolean boolean0 = jSONArray0.optBoolean(11, true);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertTrue(boolean0);
      
      int int1 = jSONArray0.optInt((-583), 11);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertTrue(int1 == int0);
      assertEquals(11, int1);
      
      JSONArray jSONArray1 = jSONArray0.put(11, 0.0F);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertEquals(12, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(12, jSONArray1.length());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      
      JSONTokener jSONTokener0 = new JSONTokener("Y1fzc;/\"HpT+Zr");
      assertFalse(jSONTokener0.end());
      assertNotNull(jSONTokener0);
      
      JSONException jSONException0 = jSONTokener0.syntaxError("number");
      assertFalse(jSONTokener0.end());
      assertNotNull(jSONException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Y1fzc;/\"HpT+Zr", jSONException0);
      assertFalse(jSONTokener0.end());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("Y1fzc;/\"HpT+Zr", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: Y1fzc;/\"HpT+Zr", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNotNull(sQLTransactionRollbackException0);
      
      boolean boolean1 = arrayDeque0.offer(sQLTransactionRollbackException0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertFalse(jSONTokener0.end());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("Y1fzc;/\"HpT+Zr", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: Y1fzc;/\"HpT+Zr", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      
      double double0 = jSONArray1.optDouble(0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertEquals(12, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(12, jSONArray1.length());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertEquals(Double.NaN, double0, 0.01);
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      assertFalse(arrayDeque1.contains(sQLTransactionRollbackException0));
      
      HashMap<SQLIntegrityConstraintViolationException, SQLException> hashMap0 = new HashMap<SQLIntegrityConstraintViolationException, SQLException>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONArray jSONArray2 = jSONArray1.put(0, (Map<?, ?>) hashMap0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertEquals(12, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(12, jSONArray1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(12, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertNotNull(jSONArray2);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      assertFalse(arrayDeque1.contains(sQLTransactionRollbackException0));
      
      List<Object> list0 = jSONArray0.toList();
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertEquals(12, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(12, list0.size());
      assertFalse(list0.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertNotNull(list0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      assertFalse(arrayDeque1.contains(sQLTransactionRollbackException0));
      assertFalse(list0.contains(11));
      assertTrue(list0.contains(0.0F));
      
      float float0 = jSONArray1.getFloat(11);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertEquals(12, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(12, jSONArray1.length());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      assertFalse(arrayDeque1.contains(sQLTransactionRollbackException0));
      
      long long0 = jSONArray1.optLong(11);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertEquals(12, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(12, jSONArray1.length());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertEquals(0L, long0);
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      assertFalse(arrayDeque1.contains(sQLTransactionRollbackException0));
      
      try { 
        jSONArray2.put((-4803), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-4803] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TreeSet<SQLTransactionRollbackException> treeSet0 = new TreeSet<SQLTransactionRollbackException>();
      assertNotNull(treeSet0);
      
      TreeSet<SQLTransactionRollbackException> treeSet1 = new TreeSet<SQLTransactionRollbackException>((SortedSet<SQLTransactionRollbackException>) treeSet0);
      assertNotNull(treeSet1);
      assertTrue(treeSet1.equals((Object)treeSet0));
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = treeSet1.pollLast();
      assertNotSame(treeSet0, treeSet1);
      assertNotSame(treeSet1, treeSet0);
      assertNull(sQLTransactionRollbackException0);
      assertTrue(treeSet0.equals((Object)treeSet1));
      assertTrue(treeSet1.equals((Object)treeSet0));
      
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) treeSet1);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      assertTrue(treeSet0.equals((Object)treeSet1));
      assertTrue(treeSet1.equals((Object)treeSet0));
      
      JSONArray jSONArray1 = new JSONArray((Iterable<?>) treeSet0);
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      assertTrue(treeSet0.equals((Object)treeSet1));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      
      boolean boolean0 = jSONArray0.similar(jSONArray1);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertNotSame(treeSet0, treeSet1);
      assertNotSame(treeSet1, treeSet0);
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
      assertTrue(treeSet0.equals((Object)treeSet1));
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertTrue(boolean0);
      
      boolean boolean1 = jSONArray0.similar("false");
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotSame(treeSet0, treeSet1);
      assertNotSame(treeSet1, treeSet0);
      assertNotSame(jSONArray0, jSONArray1);
      assertTrue(treeSet0.equals((Object)treeSet1));
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      ArrayDeque<SQLTransactionRollbackException> arrayDeque1 = arrayDeque0.clone();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertNotNull(arrayDeque1);
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) arrayDeque1);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      
      int int0 = 11;
      boolean boolean0 = jSONArray0.optBoolean(11, true);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertTrue(boolean0);
      
      int int1 = jSONArray0.optInt((-583), 11);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertTrue(int1 == int0);
      assertEquals(11, int1);
      
      JSONArray jSONArray1 = jSONArray0.put(11, 0.0F);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(12, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(12, jSONArray1.length());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONTokener jSONTokener0 = new JSONTokener("Y1fzc;/\"HpT+Zr");
      assertFalse(jSONTokener0.end());
      assertNotNull(jSONTokener0);
      
      JSONException jSONException0 = jSONTokener0.syntaxError("number");
      assertFalse(jSONTokener0.end());
      assertNotNull(jSONException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Y1fzc;/\"HpT+Zr", jSONException0);
      assertFalse(jSONTokener0.end());
      assertEquals("Y1fzc;/\"HpT+Zr", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: Y1fzc;/\"HpT+Zr", sQLTransactionRollbackException0.toString());
      assertNotNull(sQLTransactionRollbackException0);
      
      boolean boolean1 = arrayDeque0.offer(sQLTransactionRollbackException0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertFalse(jSONTokener0.end());
      assertEquals("Y1fzc;/\"HpT+Zr", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: Y1fzc;/\"HpT+Zr", sQLTransactionRollbackException0.toString());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      
      HashMap<SQLIntegrityConstraintViolationException, SQLException> hashMap0 = new HashMap<SQLIntegrityConstraintViolationException, SQLException>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONArray jSONArray2 = jSONArray1.put((Map<?, ?>) hashMap0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(13, jSONArray0.length());
      assertEquals(13, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(13, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertNotNull(jSONArray2);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      assertFalse(arrayDeque1.contains(sQLTransactionRollbackException0));
      
      JSONArray jSONArray3 = jSONArray1.put(0, (Map<?, ?>) hashMap0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(13, jSONArray0.length());
      assertEquals(13, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(13, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray2);
      assertNotNull(jSONArray3);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      assertFalse(arrayDeque1.contains(sQLTransactionRollbackException0));
      
      List<Object> list0 = jSONArray0.toList();
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(13, jSONArray0.length());
      assertEquals(13, list0.size());
      assertFalse(list0.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertNotNull(list0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      assertFalse(arrayDeque1.contains(sQLTransactionRollbackException0));
      assertTrue(list0.contains(0.0F));
      assertFalse(list0.contains(0));
      
      float float0 = jSONArray1.getFloat(11);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(13, jSONArray0.length());
      assertEquals(13, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      assertFalse(arrayDeque1.contains(sQLTransactionRollbackException0));
      
      try { 
        jSONArray3.put((-4803), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-4803] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      assertNull(sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNotNull(sQLNonTransientException0);
      
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      SQLDataException sQLDataException0 = new SQLDataException("Px91}U", (String) null, 334);
      assertEquals(334, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: Px91}U", sQLDataException0.toString());
      assertEquals("Px91}U", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertNotNull(sQLDataException0);
      
      boolean boolean0 = jSONArray0.similar(sQLDataException0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(334, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: Px91}U", sQLDataException0.toString());
      assertEquals("Px91}U", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertFalse(boolean0);
      assertFalse(stack0.contains("Px91}U"));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte) (-126);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals((byte) (-126), bigInteger0.byteValue());
      assertEquals((short) (-12926), bigInteger0.shortValue());
      assertEquals(2, byteArray0.length);
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte) (-51), (byte) (-126)}, byteArray0);
      
      BigInteger bigInteger1 = jSONArray0.optBigInteger(91, bigInteger0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals((byte) (-126), bigInteger0.byteValue());
      assertEquals((short) (-12926), bigInteger0.shortValue());
      assertEquals((short) (-12926), bigInteger1.shortValue());
      assertEquals((byte) (-126), bigInteger1.byteValue());
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertEquals(2, byteArray0.length);
      assertNotNull(bigInteger1);
      assertFalse(stack0.contains("Px91}U"));
      assertArrayEquals(new byte[] {(byte) (-51), (byte) (-126)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = new JSONArray();
      assertTrue(jSONArray1.isEmpty());
      assertEquals(0, jSONArray1.length());
      assertNotNull(jSONArray1);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      
      Iterator<Object> iterator0 = jSONArray1.iterator();
      assertTrue(jSONArray1.isEmpty());
      assertEquals(0, jSONArray1.length());
      assertNotSame(jSONArray1, jSONArray0);
      assertNotNull(iterator0);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      
      JSONObject jSONObject0 = jSONArray1.toJSONObject(jSONArray0);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertTrue(jSONArray1.isEmpty());
      assertEquals(0, jSONArray1.length());
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
      assertNull(jSONObject0);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      
      int int0 = 615;
      boolean boolean0 = jSONArray0.isNull(615);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotSame(jSONArray0, jSONArray1);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertTrue(boolean0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Zk$%eC.H)kH", "V+sJ1o");
      assertEquals("V+sJ1o", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Zk$%eC.H)kH", sQLFeatureNotSupportedException0.toString());
      assertEquals("Zk$%eC.H)kH", sQLFeatureNotSupportedException0.getMessage());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      JSONArray jSONArray2 = jSONArray1.putAll((Object) sQLFeatureNotSupportedException0);
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals("V+sJ1o", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Zk$%eC.H)kH", sQLFeatureNotSupportedException0.toString());
      assertEquals("Zk$%eC.H)kH", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(1, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertNotSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertNotSame(jSONArray2, jSONArray0);
      assertNotNull(jSONArray2);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      
      String string0 = jSONArray2.toString();
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals("V+sJ1o", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Zk$%eC.H)kH", sQLFeatureNotSupportedException0.toString());
      assertEquals("Zk$%eC.H)kH", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(1, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertNotSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertNotSame(jSONArray2, jSONArray0);
      assertNotNull(string0);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      
      Object object0 = jSONArray1.remove(615);
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertNull(object0);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      
      JSONArray jSONArray3 = jSONArray2.put((Object) jSONArray0);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals("V+sJ1o", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Zk$%eC.H)kH", sQLFeatureNotSupportedException0.toString());
      assertEquals("Zk$%eC.H)kH", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(2, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(2, jSONArray3.length());
      assertNotSame(jSONArray0, jSONArray3);
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertNotSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray2);
      assertNotSame(jSONArray3, jSONArray0);
      assertNotNull(jSONArray3);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertFalse(jSONArray3.equals((Object)jSONArray0));
      
      JSONPointer jSONPointer0 = null;
      try {
        jSONPointer0 = new JSONPointer("Zk$%eC.H)kH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertTrue(jSONArray1.isEmpty());
      assertEquals(0, jSONArray1.length());
      assertNotNull(jSONArray1);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      
      float float0 = jSONArray0.optFloat(44);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotSame(jSONArray0, jSONArray1);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertEquals(Float.NaN, float0, 0.01F);
      
      JSONArray jSONArray2 = jSONArray1.put(0, 1L);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(1, jSONArray2.length());
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertNotSame(jSONArray2, jSONArray0);
      assertNotNull(jSONArray2);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      
      int int0 = 0;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNotNull(sQLClientInfoException0);
      
      Throwable[] throwableArray0 = sQLClientInfoException0.getSuppressed();
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals(0, throwableArray0.length);
      assertNotNull(throwableArray0);
      
      sQLClientInfoException0.setNextException((SQLException) null);
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      
      DataTruncation dataTruncation0 = new DataTruncation(0, false, true, 0, 0, sQLClientInfoException0);
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertNotNull(dataTruncation0);
      
      JSONArray jSONArray3 = jSONArray0.putAll((Object) dataTruncation0);
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals(2, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertNotSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray0);
      assertNotSame(jSONArray3, jSONArray2);
      assertNotNull(jSONArray3);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray3.equals((Object)jSONArray1));
      assertFalse(jSONArray3.equals((Object)jSONArray2));
      
      JSONArray jSONArray4 = jSONArray2.put(0.0F);
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(2, jSONArray2.length());
      assertEquals(2, jSONArray4.length());
      assertFalse(jSONArray4.isEmpty());
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray3);
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray4);
      assertNotSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray4);
      assertNotSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray1);
      assertNotSame(jSONArray2, jSONArray0);
      assertSame(jSONArray4, jSONArray1);
      assertNotSame(jSONArray4, jSONArray0);
      assertNotSame(jSONArray4, jSONArray3);
      assertSame(jSONArray4, jSONArray2);
      assertNotNull(jSONArray4);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray1.equals((Object)jSONArray3));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray3));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertFalse(jSONArray4.equals((Object)jSONArray0));
      assertFalse(jSONArray4.equals((Object)jSONArray3));
      
      List<Object> list0 = jSONArray0.toList();
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray3);
      assertNotSame(jSONArray0, jSONArray2);
      assertNotNull(list0);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray0.equals((Object)jSONArray4));
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(list0.contains(false));
      
      DataTruncation dataTruncation1 = (DataTruncation)jSONArray0.remove(0);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, dataTruncation1.getErrorCode());
      assertEquals("Data truncation", dataTruncation1.getMessage());
      assertEquals("01004", dataTruncation1.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation1.toString());
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray3);
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(dataTruncation1, dataTruncation0);
      assertNotNull(dataTruncation1);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray0.equals((Object)jSONArray4));
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      
      JSONArray jSONArray5 = jSONArray4.put(0, (double) 0);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(2, jSONArray2.length());
      assertEquals(2, jSONArray4.length());
      assertFalse(jSONArray4.isEmpty());
      assertEquals(2, jSONArray5.length());
      assertFalse(jSONArray5.isEmpty());
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray3);
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray0, jSONArray5);
      assertNotSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray4);
      assertNotSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray5);
      assertSame(jSONArray2, jSONArray4);
      assertNotSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray5);
      assertNotSame(jSONArray2, jSONArray0);
      assertSame(jSONArray4, jSONArray1);
      assertSame(jSONArray4, jSONArray5);
      assertNotSame(jSONArray4, jSONArray0);
      assertNotSame(jSONArray4, jSONArray3);
      assertSame(jSONArray4, jSONArray2);
      assertNotSame(jSONArray5, jSONArray0);
      assertSame(jSONArray5, jSONArray4);
      assertNotSame(jSONArray5, jSONArray3);
      assertSame(jSONArray5, jSONArray2);
      assertSame(jSONArray5, jSONArray1);
      assertNotNull(jSONArray5);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray0.equals((Object)jSONArray4));
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray1.equals((Object)jSONArray3));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray3));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertFalse(jSONArray4.equals((Object)jSONArray0));
      assertFalse(jSONArray4.equals((Object)jSONArray3));
      assertFalse(jSONArray5.equals((Object)jSONArray0));
      assertFalse(jSONArray5.equals((Object)jSONArray3));
      
      BigDecimal bigDecimal0 = jSONArray1.getBigDecimal(0);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(2, jSONArray1.length());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray3);
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray0, jSONArray5);
      assertNotSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray4);
      assertNotSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray5);
      assertNotNull(bigDecimal0);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray0.equals((Object)jSONArray4));
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray0.equals((Object)jSONArray5));
      assertFalse(jSONArray1.equals((Object)jSONArray3));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      
      JSONArray jSONArray6 = new JSONArray(jSONArray5);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(2, jSONArray2.length());
      assertEquals(2, jSONArray4.length());
      assertFalse(jSONArray4.isEmpty());
      assertEquals(2, jSONArray5.length());
      assertFalse(jSONArray5.isEmpty());
      assertFalse(jSONArray6.isEmpty());
      assertEquals(2, jSONArray6.length());
      assertNotNull(jSONArray6);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray0.equals((Object)jSONArray4));
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray0.equals((Object)jSONArray5));
      assertFalse(jSONArray1.equals((Object)jSONArray3));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray3));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertFalse(jSONArray4.equals((Object)jSONArray0));
      assertFalse(jSONArray4.equals((Object)jSONArray3));
      assertFalse(jSONArray5.equals((Object)jSONArray0));
      assertFalse(jSONArray5.equals((Object)jSONArray3));
      assertFalse(jSONArray6.equals((Object)jSONArray4));
      assertFalse(jSONArray6.equals((Object)jSONArray3));
      assertFalse(jSONArray6.equals((Object)jSONArray5));
      assertFalse(jSONArray6.equals((Object)jSONArray0));
      assertFalse(jSONArray6.equals((Object)jSONArray1));
      assertFalse(jSONArray6.equals((Object)jSONArray2));
      
      JSONPointer jSONPointer0 = null;
      try {
        jSONPointer0 = new JSONPointer("~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      
      float float0 = jSONArray0.optFloat(44);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotSame(jSONArray0, jSONArray1);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertEquals(Float.NaN, float0, 0.01F);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNotNull(sQLClientInfoException0);
      
      Throwable[] throwableArray0 = sQLClientInfoException0.getSuppressed();
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals(0, throwableArray0.length);
      assertNotNull(throwableArray0);
      
      sQLClientInfoException0.setNextException((SQLException) null);
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      
      DataTruncation dataTruncation0 = new DataTruncation(0, false, true, 0, 0, sQLClientInfoException0);
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertNotNull(dataTruncation0);
      
      JSONArray jSONArray2 = jSONArray0.putAll((Object) dataTruncation0);
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(2, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertNotSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray2, jSONArray0);
      assertNotSame(jSONArray2, jSONArray1);
      assertNotNull(jSONArray2);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      
      List<Object> list0 = jSONArray0.toList();
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertNotNull(list0);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(list0.contains(true));
      
      BigDecimal bigDecimal0 = new BigDecimal(44);
      assertEquals((short)44, bigDecimal0.shortValue());
      assertEquals((byte)44, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = jSONArray0.optBoolean(0, true);
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertNotSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      ArrayDeque<SQLTransactionRollbackException> arrayDeque1 = arrayDeque0.clone();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertNotNull(arrayDeque1);
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) arrayDeque1);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      
      boolean boolean0 = jSONArray0.optBoolean(11, true);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertTrue(boolean0);
      
      JSONArray jSONArray1 = jSONArray0.put(11, 0.0F);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertEquals(12, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(12, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      
      HashMap<SQLIntegrityConstraintViolationException, SQLException> hashMap0 = new HashMap<SQLIntegrityConstraintViolationException, SQLException>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONArray jSONArray2 = jSONArray1.put(0, (Map<?, ?>) hashMap0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertEquals(12, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(12, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(12, jSONArray2.length());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertNotNull(jSONArray2);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      
      List<Object> list0 = jSONArray0.toList();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertEquals(12, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(12, list0.size());
      assertFalse(list0.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertNotNull(list0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertTrue(list0.contains(0.0F));
      assertFalse(list0.contains(11));
      
      float float0 = jSONArray1.getFloat(11);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertEquals(12, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(12, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertEquals(0.0F, float0, 0.01F);
      
      Number number0 = jSONArray1.getNumber(11);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertEquals(12, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(12, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(number0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertTrue(number0.equals((Object)float0));
      assertEquals(0.0F, number0);
      
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = 2752;
      JSONArray jSONArray0 = new JSONArray(2752);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      int int1 = (-3010);
      JSONArray jSONArray2 = jSONArray0.put(false);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertNotSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertNotNull(jSONArray2);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      BigInteger bigInteger0 = bigDecimal0.unscaledValue();
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      short short0 = bigDecimal0.shortValueExact();
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, short0);
      
      BigDecimal bigDecimal1 = jSONArray2.optBigDecimal((-3010), bigDecimal0);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertNotSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      
      try { 
        jSONArray2.put((-3010), (-2296));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-3010] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = 1076;
      JSONArray jSONArray0 = new JSONArray(1076);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      TreeSet<JSONObject> treeSet0 = new TreeSet<JSONObject>();
      assertNotNull(treeSet0);
      
      JSONArray jSONArray1 = new JSONArray((Collection<?>) treeSet0);
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      
      JSONArray jSONArray2 = jSONArray1.putAll((Collection<?>) treeSet0);
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertTrue(jSONArray2.isEmpty());
      assertEquals(0, jSONArray2.length());
      assertNotSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertNotSame(jSONArray2, jSONArray0);
      assertNotNull(jSONArray2);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>(0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      JSONArray jSONArray3 = jSONArray0.put(0, 0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray3, jSONArray2);
      assertNotSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray0);
      assertNotNull(jSONArray3);
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray3.equals((Object)jSONArray2));
      assertFalse(jSONArray3.equals((Object)jSONArray1));
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) hashSet0, locale_FilteringMode0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      ArrayList<String> arrayList1 = new ArrayList<String>(list0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) locale_FilteringMode0);
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = predicate0.negate();
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      JSONArray jSONArray4 = jSONArray1.put(1076, true);
      assertEquals(1077, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray4.isEmpty());
      assertEquals(1077, jSONArray4.length());
      assertSame(jSONArray1, jSONArray4);
      assertNotSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray1, jSONArray3);
      assertSame(jSONArray4, jSONArray2);
      assertNotSame(jSONArray4, jSONArray3);
      assertNotSame(jSONArray4, jSONArray0);
      assertSame(jSONArray4, jSONArray1);
      assertNotNull(jSONArray4);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(jSONArray1.equals((Object)jSONArray3));
      assertFalse(jSONArray4.equals((Object)jSONArray3));
      assertFalse(jSONArray4.equals((Object)jSONArray0));
      
      Predicate<Object> predicate2 = predicate1.and(predicate1);
      assertNotNull(predicate2);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      
      Predicate<Object> predicate3 = predicate2.or(predicate0);
      assertNotNull(predicate3);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      
      Predicate<Object> predicate4 = predicate3.or(predicate2);
      assertNotSame(predicate4, predicate3);
      assertNotSame(predicate3, predicate4);
      assertNotNull(predicate4);
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      
      boolean boolean0 = arrayList1.removeIf(predicate3);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotSame(predicate3, predicate4);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(boolean0);
      
      JSONPointer jSONPointer0 = new JSONPointer(arrayList1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(jSONPointer0);
      
      try { 
        jSONArray4.getBigInteger(93);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[93] is not a BigInteger (class org.json.JSONObject$Null : null).
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(1L);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      double double0 = jSONArray1.getDouble(0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(1.0, double0, 0.01);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("JSONObject");
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: JSONObject", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("JSONObject", sQLIntegrityConstraintViolationException0.getMessage());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      SQLDataException sQLDataException0 = new SQLDataException("JSONObject", sQLIntegrityConstraintViolationException0);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: JSONObject", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("JSONObject", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("JSONObject", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: JSONObject", sQLDataException0.toString());
      assertNotNull(sQLDataException0);
      
      Integer integer0 = Integer.getInteger("", (-488));
      assertNotNull(integer0);
      assertEquals((-488), (int)integer0);
      
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      double double1 = jSONArray0.optDouble(0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertSame(jSONArray0, jSONArray1);
      assertEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PriorityQueue<BatchUpdateException> priorityQueue0 = new PriorityQueue<BatchUpdateException>(3441);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(3441);
      assertEquals(0, priorityQueue0.size());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      JSONArray jSONArray2 = jSONArray1.putAll((Collection<?>) priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertNotNull(jSONArray2);
      
      BigDecimal bigDecimal0 = new BigDecimal((-820));
      assertEquals((byte) (-52), bigDecimal0.byteValue());
      assertEquals((short) (-820), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = jSONArray2.optBigDecimal((-2764), bigDecimal0);
      assertEquals(0, priorityQueue0.size());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals((byte) (-52), bigDecimal0.byteValue());
      assertEquals((short) (-820), bigDecimal0.shortValue());
      assertEquals((byte) (-52), bigDecimal1.byteValue());
      assertEquals((short) (-820), bigDecimal1.shortValue());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      
      Double double0 = new Double((-2716.338294879));
      assertNotNull(double0);
      assertEquals((-2716.338294879), (double)double0, 0.01);
      
      Number number0 = jSONArray2.optNumber(1049, (Number) double0);
      assertEquals(0, priorityQueue0.size());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertNotNull(number0);
      assertEquals((-2716.338294879), number0);
      
      JSONObject jSONObject0 = jSONArray0.optJSONObject((-683));
      assertEquals(0, priorityQueue0.size());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertNull(jSONObject0);
      
      int int0 = 807;
      Object object0 = jSONArray1.opt(807);
      assertEquals(0, priorityQueue0.size());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        jSONArray0.putAll((Iterable<?>) jSONArray1);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      Object object0 = jSONArray0.opt(10);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNull(object0);
      
      try { 
        jSONArray0.getBoolean(10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[10] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Vector<SQLException> vector0 = new Vector<SQLException>(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) vector0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      BigDecimal bigDecimal0 = new BigDecimal(44);
      assertEquals((short)44, bigDecimal0.shortValue());
      assertEquals((byte)44, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Number number0 = jSONArray0.optNumber((-275), (Number) bigDecimal0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals((short)44, bigDecimal0.shortValue());
      assertEquals((byte)44, bigDecimal0.byteValue());
      assertEquals((byte)44, number0.byteValue());
      assertEquals((short)44, number0.shortValue());
      assertSame(bigDecimal0, number0);
      assertSame(number0, bigDecimal0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      List<Object> list0 = jSONArray0.toList();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      jSONArray0.forEach(consumer0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      
      JSONArray jSONArray1 = jSONArray0.put((Object) null);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      int int0 = 1865;
      JSONArray jSONArray2 = jSONArray1.put(1865);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(2, jSONArray1.length());
      assertEquals(2, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertNotNull(jSONArray2);
      
      try { 
        jSONArray2.put(Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray1.isEmpty());
      assertEquals(0, jSONArray1.length());
      assertNotNull(jSONArray1);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      
      float float0 = jSONArray0.optFloat(44);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotSame(jSONArray0, jSONArray1);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertEquals(Float.NaN, float0, 0.01F);
      
      JSONArray jSONArray2 = jSONArray1.put(0, 1L);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(1, jSONArray2.length());
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertNotNull(jSONArray2);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      
      int int0 = 0;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNotNull(sQLClientInfoException0);
      
      Throwable[] throwableArray0 = sQLClientInfoException0.getSuppressed();
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals(0, throwableArray0.length);
      assertNotNull(throwableArray0);
      
      sQLClientInfoException0.setNextException((SQLException) null);
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      
      DataTruncation dataTruncation0 = new DataTruncation(0, false, true, 0, 0, sQLClientInfoException0);
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertNotNull(dataTruncation0);
      
      JSONArray jSONArray3 = jSONArray0.putAll((Object) dataTruncation0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(2, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray3, jSONArray0);
      assertNotSame(jSONArray3, jSONArray1);
      assertNotSame(jSONArray3, jSONArray2);
      assertNotNull(jSONArray3);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray3.equals((Object)jSONArray1));
      assertFalse(jSONArray3.equals((Object)jSONArray2));
      
      JSONArray jSONArray4 = jSONArray2.put(0.0F);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(2, jSONArray2.length());
      assertEquals(2, jSONArray4.length());
      assertFalse(jSONArray4.isEmpty());
      assertNotSame(jSONArray0, jSONArray4);
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertNotSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray4);
      assertNotSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray4);
      assertNotSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray4, jSONArray2);
      assertSame(jSONArray4, jSONArray1);
      assertNotSame(jSONArray4, jSONArray3);
      assertNotSame(jSONArray4, jSONArray0);
      assertNotNull(jSONArray4);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(jSONArray1.equals((Object)jSONArray3));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray3));
      assertFalse(jSONArray4.equals((Object)jSONArray3));
      assertFalse(jSONArray4.equals((Object)jSONArray0));
      
      List<Object> list0 = jSONArray0.toList();
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotSame(jSONArray0, jSONArray4);
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertNotNull(list0);
      assertFalse(jSONArray0.equals((Object)jSONArray4));
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(list0.contains(0));
      
      DataTruncation dataTruncation1 = (DataTruncation)jSONArray0.remove(0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation1.toString());
      assertEquals("Data truncation", dataTruncation1.getMessage());
      assertEquals("01004", dataTruncation1.getSQLState());
      assertEquals(0, dataTruncation1.getErrorCode());
      assertNotSame(jSONArray0, jSONArray4);
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(dataTruncation1, dataTruncation0);
      assertNotNull(dataTruncation1);
      assertFalse(jSONArray0.equals((Object)jSONArray4));
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      
      BigDecimal bigDecimal0 = jSONArray1.getBigDecimal(0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotSame(jSONArray0, jSONArray4);
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertNotSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray4);
      assertNotSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray2);
      assertNotNull(bigDecimal0);
      assertFalse(jSONArray0.equals((Object)jSONArray4));
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(jSONArray1.equals((Object)jSONArray3));
      
      JSONArray jSONArray5 = new JSONArray(jSONArray2);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(2, jSONArray2.length());
      assertEquals(2, jSONArray5.length());
      assertFalse(jSONArray5.isEmpty());
      assertNotNull(jSONArray5);
      assertFalse(jSONArray0.equals((Object)jSONArray4));
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(jSONArray1.equals((Object)jSONArray3));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray3));
      assertFalse(jSONArray5.equals((Object)jSONArray0));
      assertFalse(jSONArray5.equals((Object)jSONArray3));
      assertFalse(jSONArray5.equals((Object)jSONArray1));
      assertFalse(jSONArray5.equals((Object)jSONArray2));
      assertFalse(jSONArray5.equals((Object)jSONArray4));
      
      JSONArray jSONArray6 = jSONArray0.putAll((Object) jSONArray5);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3, jSONArray0.length());
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(2, jSONArray2.length());
      assertEquals(2, jSONArray5.length());
      assertFalse(jSONArray5.isEmpty());
      assertEquals(3, jSONArray6.length());
      assertFalse(jSONArray6.isEmpty());
      assertNotSame(jSONArray0, jSONArray4);
      assertNotSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray6);
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray0, jSONArray5);
      assertSame(jSONArray0, jSONArray3);
      assertNotSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray1, jSONArray6);
      assertSame(jSONArray1, jSONArray4);
      assertNotSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray1, jSONArray5);
      assertNotSame(jSONArray2, jSONArray0);
      assertNotSame(jSONArray2, jSONArray6);
      assertSame(jSONArray2, jSONArray4);
      assertNotSame(jSONArray2, jSONArray3);
      assertNotSame(jSONArray2, jSONArray5);
      assertSame(jSONArray2, jSONArray1);
      assertNotSame(jSONArray5, jSONArray0);
      assertNotSame(jSONArray5, jSONArray6);
      assertNotSame(jSONArray5, jSONArray3);
      assertNotSame(jSONArray5, jSONArray1);
      assertNotSame(jSONArray5, jSONArray2);
      assertNotSame(jSONArray5, jSONArray4);
      assertNotSame(jSONArray6, jSONArray1);
      assertSame(jSONArray6, jSONArray3);
      assertNotSame(jSONArray6, jSONArray5);
      assertSame(jSONArray6, jSONArray0);
      assertNotSame(jSONArray6, jSONArray4);
      assertNotSame(jSONArray6, jSONArray2);
      assertNotNull(jSONArray6);
      assertFalse(jSONArray0.equals((Object)jSONArray4));
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray0.equals((Object)jSONArray5));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(jSONArray1.equals((Object)jSONArray3));
      assertFalse(jSONArray1.equals((Object)jSONArray5));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray3));
      assertFalse(jSONArray2.equals((Object)jSONArray5));
      assertFalse(jSONArray5.equals((Object)jSONArray0));
      assertFalse(jSONArray5.equals((Object)jSONArray3));
      assertFalse(jSONArray5.equals((Object)jSONArray1));
      assertFalse(jSONArray5.equals((Object)jSONArray2));
      assertFalse(jSONArray5.equals((Object)jSONArray4));
      assertFalse(jSONArray6.equals((Object)jSONArray1));
      assertFalse(jSONArray6.equals((Object)jSONArray5));
      assertFalse(jSONArray6.equals((Object)jSONArray4));
      assertFalse(jSONArray6.equals((Object)jSONArray2));
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray6.forEach(consumer0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3, jSONArray0.length());
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(2, jSONArray2.length());
      assertEquals(2, jSONArray5.length());
      assertFalse(jSONArray5.isEmpty());
      assertEquals(3, jSONArray6.length());
      assertFalse(jSONArray6.isEmpty());
      assertNotSame(jSONArray0, jSONArray4);
      assertNotSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray6);
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray0, jSONArray5);
      assertSame(jSONArray0, jSONArray3);
      assertNotSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray1, jSONArray6);
      assertSame(jSONArray1, jSONArray4);
      assertNotSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray1, jSONArray5);
      assertNotSame(jSONArray2, jSONArray0);
      assertNotSame(jSONArray2, jSONArray6);
      assertSame(jSONArray2, jSONArray4);
      assertNotSame(jSONArray2, jSONArray3);
      assertNotSame(jSONArray2, jSONArray5);
      assertSame(jSONArray2, jSONArray1);
      assertNotSame(jSONArray5, jSONArray0);
      assertNotSame(jSONArray5, jSONArray6);
      assertNotSame(jSONArray5, jSONArray3);
      assertNotSame(jSONArray5, jSONArray1);
      assertNotSame(jSONArray5, jSONArray2);
      assertNotSame(jSONArray5, jSONArray4);
      assertNotSame(jSONArray6, jSONArray1);
      assertSame(jSONArray6, jSONArray3);
      assertNotSame(jSONArray6, jSONArray5);
      assertSame(jSONArray6, jSONArray0);
      assertNotSame(jSONArray6, jSONArray4);
      assertNotSame(jSONArray6, jSONArray2);
      assertFalse(jSONArray0.equals((Object)jSONArray4));
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray0.equals((Object)jSONArray5));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(jSONArray1.equals((Object)jSONArray6));
      assertFalse(jSONArray1.equals((Object)jSONArray3));
      assertFalse(jSONArray1.equals((Object)jSONArray5));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray6));
      assertFalse(jSONArray2.equals((Object)jSONArray3));
      assertFalse(jSONArray2.equals((Object)jSONArray5));
      assertFalse(jSONArray5.equals((Object)jSONArray0));
      assertFalse(jSONArray5.equals((Object)jSONArray6));
      assertFalse(jSONArray5.equals((Object)jSONArray3));
      assertFalse(jSONArray5.equals((Object)jSONArray1));
      assertFalse(jSONArray5.equals((Object)jSONArray2));
      assertFalse(jSONArray5.equals((Object)jSONArray4));
      assertFalse(jSONArray6.equals((Object)jSONArray1));
      assertFalse(jSONArray6.equals((Object)jSONArray5));
      assertFalse(jSONArray6.equals((Object)jSONArray4));
      assertFalse(jSONArray6.equals((Object)jSONArray2));
      
      try { 
        jSONArray0.getNumber((-3459));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-3459] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ArrayList<JSONArray> arrayList0 = new ArrayList<JSONArray>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      assertFalse(arrayList0.contains(jSONArray0));
      
      int int0 = 802;
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNull(jSONObject0);
      assertFalse(arrayList0.contains(jSONArray0));
      
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)93;
      byte byte0 = (byte)114;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte)10;
      int int0 = 44;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-16), 44);
      assertEquals(21, byteArrayInputStream0.available());
      assertEquals(5, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-16), (byte)93, (byte)114, (byte) (-4), (byte)10}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(21, byteArrayInputStream0.available());
      assertEquals(5, byteArray0.length);
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte) (-16), (byte)93, (byte)114, (byte) (-4), (byte)10}, byteArray0);
      
      JSONTokener jSONTokener0 = new JSONTokener(dataInputStream0);
      assertEquals(21, byteArrayInputStream0.available());
      assertFalse(jSONTokener0.end());
      assertEquals(5, byteArray0.length);
      assertNotNull(jSONTokener0);
      assertArrayEquals(new byte[] {(byte) (-16), (byte)93, (byte)114, (byte) (-4), (byte)10}, byteArray0);
      
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      Class<Answers> class0 = Answers.class;
      Answers answers0 = Answers.RETURNS_DEEP_STUBS;
      Answers answers1 = jSONArray0.optEnum(class0, (-5), answers0);
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertSame(answers0, answers1);
      assertSame(answers1, answers0);
      assertEquals(Answers.RETURNS_DEEP_STUBS, answers1);
      
      HashMap<SQLDataException, Long> hashMap0 = new HashMap<SQLDataException, Long>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      try { 
        jSONArray0.put((-5), (Map<?, ?>) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-5] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      int int0 = 0;
      Object object0 = jSONArray0.remove(0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNull(object0);
      
      float float0 = jSONArray0.optFloat(0, 0.0F);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertEquals(0.0F, float0, 0.01F);
      
      int int1 = 0;
      try { 
        jSONArray0.getString(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TreeSet<SQLTransientConnectionException> treeSet0 = new TreeSet<SQLTransientConnectionException>();
      assertNotNull(treeSet0);
      
      PriorityQueue<SQLTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLTransientConnectionException>((SortedSet<? extends SQLTransientConnectionException>) treeSet0);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      int int0 = 1;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("w", "P LI}}oVN^", 1);
      assertEquals(1, sQLTransientConnectionException0.getErrorCode());
      assertEquals("P LI}}oVN^", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: w", sQLTransientConnectionException0.toString());
      assertEquals("w", sQLTransientConnectionException0.getMessage());
      assertNotNull(sQLTransientConnectionException0);
      
      boolean boolean0 = priorityQueue0.add(sQLTransientConnectionException0);
      assertEquals(1, priorityQueue0.size());
      assertEquals(1, sQLTransientConnectionException0.getErrorCode());
      assertEquals("P LI}}oVN^", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: w", sQLTransientConnectionException0.toString());
      assertEquals("w", sQLTransientConnectionException0.getMessage());
      assertTrue(boolean0);
      assertTrue(priorityQueue0.contains(sQLTransientConnectionException0));
      
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) sQLTransientConnectionException0);
      assertEquals(1, sQLTransientConnectionException0.getErrorCode());
      assertEquals("P LI}}oVN^", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: w", sQLTransientConnectionException0.toString());
      assertEquals("w", sQLTransientConnectionException0.getMessage());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("w");
      assertNotNull(mockPrintWriter0);
      
      Writer writer0 = jSONArray0.write((Writer) mockPrintWriter0);
      assertEquals(1, sQLTransientConnectionException0.getErrorCode());
      assertEquals("P LI}}oVN^", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: w", sQLTransientConnectionException0.toString());
      assertEquals("w", sQLTransientConnectionException0.getMessage());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertSame(mockPrintWriter0, writer0);
      assertSame(writer0, mockPrintWriter0);
      assertNotNull(writer0);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(writer0, true);
      assertNotNull(mockPrintWriter1);
      assertFalse(mockPrintWriter1.equals((Object)writer0));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) treeSet0;
      objectArray0[2] = (Object) sQLTransientConnectionException0;
      PrintWriter printWriter0 = mockPrintWriter1.printf("P LI}}oVN^", objectArray0);
      assertEquals(1, sQLTransientConnectionException0.getErrorCode());
      assertEquals("P LI}}oVN^", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: w", sQLTransientConnectionException0.toString());
      assertEquals("w", sQLTransientConnectionException0.getMessage());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertSame(mockPrintWriter0, writer0);
      assertNotSame(mockPrintWriter0, printWriter0);
      assertSame(writer0, mockPrintWriter0);
      assertNotSame(writer0, printWriter0);
      assertNotSame(writer0, mockPrintWriter1);
      assertNotSame(mockPrintWriter1, writer0);
      assertSame(mockPrintWriter1, printWriter0);
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      assertNotSame(printWriter0, mockPrintWriter0);
      assertSame(printWriter0, mockPrintWriter1);
      assertNotSame(printWriter0, writer0);
      assertEquals(3, objectArray0.length);
      assertNotNull(printWriter0);
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(writer0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter1.equals((Object)writer0));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertFalse(printWriter0.equals((Object)mockPrintWriter0));
      assertFalse(printWriter0.equals((Object)writer0));
      
      sQLTransientConnectionException0.printStackTrace(printWriter0);
      assertEquals(1, sQLTransientConnectionException0.getErrorCode());
      assertEquals("P LI}}oVN^", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: w", sQLTransientConnectionException0.toString());
      assertEquals("w", sQLTransientConnectionException0.getMessage());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertSame(mockPrintWriter0, writer0);
      assertNotSame(mockPrintWriter0, printWriter0);
      assertSame(writer0, mockPrintWriter0);
      assertNotSame(writer0, printWriter0);
      assertNotSame(writer0, mockPrintWriter1);
      assertNotSame(mockPrintWriter1, writer0);
      assertSame(mockPrintWriter1, printWriter0);
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      assertNotSame(printWriter0, mockPrintWriter0);
      assertSame(printWriter0, mockPrintWriter1);
      assertNotSame(printWriter0, writer0);
      assertEquals(3, objectArray0.length);
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter0.equals((Object)printWriter0));
      assertFalse(writer0.equals((Object)printWriter0));
      assertFalse(writer0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter1.equals((Object)writer0));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertFalse(printWriter0.equals((Object)mockPrintWriter0));
      assertFalse(printWriter0.equals((Object)writer0));
      
      JSONArray jSONArray1 = new JSONArray((Collection<?>) priorityQueue0);
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, priorityQueue0.size());
      assertNotNull(jSONArray1);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertTrue(priorityQueue0.contains(sQLTransientConnectionException0));
      
      float float0 = jSONArray1.optFloat(1, 1892.0F);
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, priorityQueue0.size());
      assertNotSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertEquals(1892.0F, float0, 0.01F);
      assertTrue(priorityQueue0.contains(sQLTransientConnectionException0));
      
      // Undeclared exception!
      try { 
        jSONArray1.query("eSJF]HeYuylIy^llq?&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) linkedList0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      
      int int0 = 10;
      Integer integer0 = new Integer(10);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(10, (int)integer0);
      
      boolean boolean0 = jSONArray0.similar(integer0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotSame(jSONArray0, jSONArray1);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(boolean0);
      
      int int1 = 0;
      HashMap<Integer, SQLNonTransientException> hashMap0 = new HashMap<Integer, SQLNonTransientException>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONArray jSONArray2 = jSONArray1.put(0, (Map<?, ?>) hashMap0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertNotSame(jSONArray2, jSONArray0);
      assertNotNull(jSONArray2);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      
      float float0 = 0.0F;
      JSONArray jSONArray3 = jSONArray2.put(false);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(2, jSONArray1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(2, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(2, jSONArray3.length());
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray0, jSONArray3);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertNotSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertNotSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray3);
      assertNotSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray1);
      assertNotNull(jSONArray3);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertFalse(jSONArray3.equals((Object)jSONArray0));
      
      try { 
        jSONArray2.getFloat(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a float (class org.json.JSONObject).
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(1599);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      Iterator<Object> iterator0 = jSONArray1.iterator();
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(iterator0);
      
      try { 
        jSONArray1.toJSONObject(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a String (class java.lang.Integer : 1599).
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ArrayDeque<JSONArray> arrayDeque0 = new ArrayDeque<JSONArray>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      assertFalse(arrayDeque0.contains(jSONArray0));
      
      int int0 = (-1057);
      double double0 = jSONArray0.optDouble((-1057), 0.0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0.0, double0, 0.01);
      assertFalse(arrayDeque0.contains(jSONArray0));
      
      Class<Answers> class0 = Answers.class;
      Answers answers0 = Answers.RETURNS_DEFAULTS;
      Answers answers1 = jSONArray0.optEnum(class0, (-1057), answers0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertSame(answers0, answers1);
      assertSame(answers1, answers0);
      assertEquals(Answers.RETURNS_DEFAULTS, answers1);
      assertFalse(arrayDeque0.contains(jSONArray0));
      
      JSONArray jSONArray1 = jSONArray0.putAll((Iterable<?>) arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertTrue(jSONArray1.isEmpty());
      assertEquals(0, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertFalse(arrayDeque0.contains(jSONArray0));
      
      try { 
        jSONArray1.getFloat((-1057));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1057] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ArrayDeque<JSONArray> arrayDeque0 = new ArrayDeque<JSONArray>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      assertFalse(arrayDeque0.contains(jSONArray0));
      
      boolean boolean0 = arrayDeque0.add(jSONArray0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertTrue(boolean0);
      assertTrue(arrayDeque0.contains(jSONArray0));
      
      JSONArray jSONArray1 = new JSONArray((Collection<?>) arrayDeque0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertTrue(arrayDeque0.contains(jSONArray0));
      assertFalse(arrayDeque0.contains(jSONArray1));
      
      Iterator<Object> iterator0 = jSONArray1.iterator();
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotSame(jSONArray1, jSONArray0);
      assertNotNull(iterator0);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertTrue(arrayDeque0.contains(jSONArray0));
      assertFalse(arrayDeque0.contains(jSONArray1));
      
      Object object0 = jSONArray1.remove((-1905));
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotSame(jSONArray1, jSONArray0);
      assertNull(object0);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertTrue(arrayDeque0.contains(jSONArray0));
      assertFalse(arrayDeque0.contains(jSONArray1));
      
      float float0 = jSONArray1.optFloat((-1905));
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertEquals(Float.NaN, float0, 0.01F);
      assertTrue(arrayDeque0.contains(jSONArray0));
      assertFalse(arrayDeque0.contains(jSONArray1));
      
      boolean boolean1 = arrayDeque0.add(jSONArray1);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(2, arrayDeque0.size());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(arrayDeque0.contains(jSONArray0));
      
      boolean boolean2 = arrayDeque0.add(jSONArray1);
      assertEquals(3, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertTrue(arrayDeque0.contains(jSONArray0));
      
      int int0 = 563;
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      Number number0 = jSONArray1.optNumber(563, (Number) bigInteger0);
      assertEquals(3, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, number0.byteValue());
      assertEquals((short)0, number0.shortValue());
      assertNotSame(jSONArray1, jSONArray0);
      assertSame(bigInteger0, number0);
      assertSame(number0, bigInteger0);
      assertNotNull(number0);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertTrue(arrayDeque0.contains(jSONArray0));
      
      try { 
        jSONArray1.getString(563);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[563] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      long long0 = 1L;
      JSONArray jSONArray1 = jSONArray0.put(1L);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      Class<Answers> class0 = Answers.class;
      int int0 = 0;
      jSONArray0.optEnum(class0, 0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertSame(jSONArray0, jSONArray1);
      
      double double0 = jSONArray1.getDouble(0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(1.0, double0, 0.01);
      
      int int1 = 91;
      try { 
        jSONArray1.getInt(91);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[91] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(1L);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      int int0 = 0;
      double double0 = jSONArray1.getDouble(0);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(1.0, double0, 0.01);
      
      try { 
        jSONArray1.getInt(91);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[91] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PriorityQueue<SQLDataException> priorityQueue0 = new PriorityQueue<SQLDataException>(1768);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      SQLDataException sQLDataException0 = new SQLDataException("boolean", "boolean", (Throwable) null);
      assertEquals("java.sql.SQLDataException: boolean", sQLDataException0.toString());
      assertEquals("boolean", sQLDataException0.getSQLState());
      assertEquals("boolean", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNotNull(sQLDataException0);
      
      boolean boolean0 = priorityQueue0.add(sQLDataException0);
      assertEquals(1, priorityQueue0.size());
      assertEquals("java.sql.SQLDataException: boolean", sQLDataException0.toString());
      assertEquals("boolean", sQLDataException0.getSQLState());
      assertEquals("boolean", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertTrue(boolean0);
      assertTrue(priorityQueue0.contains(sQLDataException0));
      
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) priorityQueue0);
      assertEquals(1, priorityQueue0.size());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      assertTrue(priorityQueue0.contains(sQLDataException0));
      
      JSONArray jSONArray1 = jSONArray0.put((-224));
      assertEquals(1, priorityQueue0.size());
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(2, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertTrue(priorityQueue0.contains(sQLDataException0));
      
      try { 
        jSONArray0.getBoolean((-224));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-224] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONArray jSONArray0 = null;
      JSONArray jSONArray1 = new JSONArray((JSONArray) null);
      assertTrue(jSONArray1.isEmpty());
      assertEquals(0, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      List<Object> list0 = jSONArray1.toList();
      assertTrue(jSONArray1.isEmpty());
      assertEquals(0, jSONArray1.length());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      int int0 = 218;
      try { 
        jSONArray1.getNumber(218);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[218] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>(925);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(925, vector0.capacity());
      assertNotNull(vector0);
      assertFalse(vector0.contains(925));
      
      vector0.removeAllElements();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(925, vector0.capacity());
      assertFalse(vector0.contains(925));
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(925, vector0.capacity());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      assertFalse(vector0.contains(925));
      
      try { 
        jSONArray0.getNumber(925);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[925] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LinkedHashSet<DataTruncation> linkedHashSet0 = new LinkedHashSet<DataTruncation>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      DataTruncation dataTruncation0 = new DataTruncation((-2345), false, true, (-1526), (-2345));
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertNotNull(dataTruncation0);
      
      boolean boolean0 = dataTruncation0.getParameter();
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertFalse(boolean0);
      
      boolean boolean1 = linkedHashSet0.add(dataTruncation0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(linkedHashSet0.contains(dataTruncation0));
      
      long long0 = jSONArray0.optLong(0, (long) (-1526));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals((-1526L), long0);
      assertTrue(linkedHashSet0.contains(dataTruncation0));
      
      boolean boolean2 = linkedHashSet0.add((DataTruncation) null);
      assertEquals(2, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertTrue(linkedHashSet0.contains(dataTruncation0));
      
      try { 
        jSONArray0.getString(93);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[93] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ArrayList<SQLTransactionRollbackException> arrayList0 = new ArrayList<SQLTransactionRollbackException>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      LinkedHashSet<SQLTransientException> linkedHashSet0 = new LinkedHashSet<SQLTransientException>(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNotNull(sQLTransactionRollbackException0);
      
      boolean boolean0 = arrayList0.add(sQLTransactionRollbackException0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(sQLTransactionRollbackException0));
      
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("?7Dv4SK9[@QB#(-Y");
      assertEquals("?7Dv4SK9[@QB#(-Y", sQLTransactionRollbackException1.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: ?7Dv4SK9[@QB#(-Y", sQLTransactionRollbackException1.toString());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertNull(sQLTransactionRollbackException1.getSQLState());
      assertNotNull(sQLTransactionRollbackException1);
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      
      boolean boolean1 = arrayList0.add(sQLTransactionRollbackException1);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("?7Dv4SK9[@QB#(-Y", sQLTransactionRollbackException1.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: ?7Dv4SK9[@QB#(-Y", sQLTransactionRollbackException1.toString());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertNull(sQLTransactionRollbackException1.getSQLState());
      assertNotSame(sQLTransactionRollbackException1, sQLTransactionRollbackException0);
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(arrayList0.contains(sQLTransactionRollbackException1));
      
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) linkedHashSet0);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      assertTrue(arrayList0.contains(sQLTransactionRollbackException1));
      
      JSONArray jSONArray1 = jSONArray0.put((-947.1));
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertTrue(arrayList0.contains(sQLTransactionRollbackException1));
      
      jSONArray0.clear();
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertSame(jSONArray0, jSONArray1);
      assertTrue(arrayList0.contains(sQLTransactionRollbackException1));
      
      try { 
        jSONArray1.put((-2217), (float) (-2217));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-2217] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = 1680;
      JSONArray jSONArray0 = new JSONArray(1680);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      Number number0 = jSONArray0.optNumber(1680);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNull(number0);
      
      JSONArray jSONArray1 = jSONArray0.put(true);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      // Undeclared exception!
      try { 
        jSONArray0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(156, false);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(157, jSONArray0.length());
      assertEquals(157, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      int int0 = (-1217);
      try { 
        jSONArray0.getJSONArray((-1217));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1217] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      PriorityQueue<SQLTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLTransientConnectionException>((Comparator<? super SQLTransientConnectionException>) null);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      Class<Answers> class0 = Answers.class;
      Answers answers0 = Answers.RETURNS_SMART_NULLS;
      Answers answers1 = jSONArray0.optEnum(class0, 70, answers0);
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertSame(answers0, answers1);
      assertSame(answers1, answers0);
      assertEquals(Answers.RETURNS_SMART_NULLS, answers1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("You cannot use argument matchers outside of verification or stubbing.", "%", (-2017));
      assertEquals("%", sQLSyntaxErrorException0.getSQLState());
      assertEquals((-2017), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: You cannot use argument matchers outside of verification or stubbing.", sQLSyntaxErrorException0.toString());
      assertEquals("You cannot use argument matchers outside of verification or stubbing.", sQLSyntaxErrorException0.getMessage());
      assertNotNull(sQLSyntaxErrorException0);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) sQLSyntaxErrorException0);
      assertEquals("%", sQLSyntaxErrorException0.getSQLState());
      assertEquals((-2017), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: You cannot use argument matchers outside of verification or stubbing.", sQLSyntaxErrorException0.toString());
      assertEquals("You cannot use argument matchers outside of verification or stubbing.", sQLSyntaxErrorException0.getMessage());
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      assertEquals("%", sQLSyntaxErrorException0.getSQLState());
      assertEquals((-2017), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: You cannot use argument matchers outside of verification or stubbing.", sQLSyntaxErrorException0.toString());
      assertEquals("You cannot use argument matchers outside of verification or stubbing.", sQLSyntaxErrorException0.getMessage());
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      Predicate<Object> predicate2 = predicate1.negate();
      assertEquals("%", sQLSyntaxErrorException0.getSQLState());
      assertEquals((-2017), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: You cannot use argument matchers outside of verification or stubbing.", sQLSyntaxErrorException0.toString());
      assertEquals("You cannot use argument matchers outside of verification or stubbing.", sQLSyntaxErrorException0.getMessage());
      assertNotNull(predicate2);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      assertEquals("%", sQLSyntaxErrorException0.getSQLState());
      assertEquals((-2017), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: You cannot use argument matchers outside of verification or stubbing.", sQLSyntaxErrorException0.toString());
      assertEquals("You cannot use argument matchers outside of verification or stubbing.", sQLSyntaxErrorException0.getMessage());
      assertNotNull(predicate3);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      
      boolean boolean0 = stack0.removeIf(predicate3);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals("%", sQLSyntaxErrorException0.getSQLState());
      assertEquals((-2017), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: You cannot use argument matchers outside of verification or stubbing.", sQLSyntaxErrorException0.toString());
      assertEquals("You cannot use argument matchers outside of verification or stubbing.", sQLSyntaxErrorException0.getMessage());
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(boolean0);
      
      double double0 = jSONArray0.optDouble(939, 1113.54);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(1113.54, double0, 0.01);
      
      int int0 = jSONArray0.optInt(939);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      int int0 = 59;
      JSONArray jSONArray1 = jSONArray0.put(59, (-1720L));
      assertEquals(0, linkedList0.size());
      assertEquals(60, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(60, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      JSONArray jSONArray2 = jSONArray0.putAll((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(60, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(60, jSONArray2.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertNotNull(jSONArray2);
      
      JSONArray jSONArray3 = jSONArray1.put((long) 59);
      assertEquals(0, linkedList0.size());
      assertEquals(61, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(61, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(61, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray1);
      assertNotNull(jSONArray3);
      
      JSONArray jSONArray4 = jSONArray0.putAll(jSONArray2);
      assertEquals(0, linkedList0.size());
      assertEquals(122, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(122, jSONArray2.length());
      assertFalse(jSONArray4.isEmpty());
      assertEquals(122, jSONArray4.length());
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray2, jSONArray4);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray4, jSONArray2);
      assertSame(jSONArray4, jSONArray1);
      assertSame(jSONArray4, jSONArray3);
      assertSame(jSONArray4, jSONArray0);
      assertNotNull(jSONArray4);
      
      JSONArray jSONArray5 = jSONArray4.put(59, (Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(122, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(122, jSONArray2.length());
      assertFalse(jSONArray4.isEmpty());
      assertEquals(122, jSONArray4.length());
      assertFalse(jSONArray5.isEmpty());
      assertEquals(122, jSONArray5.length());
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray5);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray2, jSONArray4);
      assertSame(jSONArray2, jSONArray5);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray4, jSONArray5);
      assertSame(jSONArray4, jSONArray2);
      assertSame(jSONArray4, jSONArray1);
      assertSame(jSONArray4, jSONArray3);
      assertSame(jSONArray4, jSONArray0);
      assertSame(jSONArray5, jSONArray0);
      assertSame(jSONArray5, jSONArray2);
      assertSame(jSONArray5, jSONArray1);
      assertSame(jSONArray5, jSONArray3);
      assertSame(jSONArray5, jSONArray4);
      assertNotNull(jSONArray5);
      
      try { 
        jSONArray4.getFloat(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a float (class org.json.JSONObject$Null : null).
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      PriorityQueue<Float> priorityQueue0 = new PriorityQueue<Float>(10, comparator0);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      long long0 = jSONArray0.optLong(10, 1024L);
      assertEquals(0, priorityQueue0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertEquals(1024L, long0);
      
      Object object0 = jSONArray0.remove(10);
      assertEquals(0, priorityQueue0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNull(object0);
      
      boolean boolean0 = priorityQueue0.isEmpty();
      assertEquals(0, priorityQueue0.size());
      assertTrue(boolean0);
      
      Class<Answers> class0 = Answers.class;
      jSONArray0.optEnum(class0, 10);
      assertEquals(0, priorityQueue0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      boolean boolean1 = priorityQueue0.add(float0);
      assertEquals(1, priorityQueue0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(priorityQueue0.contains(float0));
      
      Float float1 = new Float(341.0F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(341.0F, (float)float1, 0.01F);
      
      boolean boolean2 = Float.isFinite((-1339.2F));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = priorityQueue0.add(float1);
      assertEquals(2, priorityQueue0.size());
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
      assertTrue(priorityQueue0.contains(float0));
      assertFalse(priorityQueue0.contains((-1339.2F)));
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      double double1 = Double.min(0.0, (-287.49466));
      assertEquals((-287.49466), double1, 0.01);
      
      JSONArray jSONArray1 = jSONArray0.put((Object) double0);
      assertEquals(2, priorityQueue0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertTrue(priorityQueue0.contains(float0));
      assertFalse(priorityQueue0.contains((-1339.2F)));
      
      Iterator<Object> iterator0 = jSONArray0.iterator();
      assertEquals(2, priorityQueue0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertSame(jSONArray0, jSONArray1);
      assertNotNull(iterator0);
      assertTrue(priorityQueue0.contains(float0));
      assertFalse(priorityQueue0.contains((-1339.2F)));
      
      // Undeclared exception!
      try { 
        jSONArray1.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      // Undeclared exception!
      try { 
        jSONArray0.write((Writer) null, 44, 44);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LinkedHashSet<SQLTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLTransientConnectionException>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      SQLException sQLException0 = new SQLException("");
      assertEquals("", sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertNotNull(sQLException0);
      
      Collection<ClientInfoStatus> collection0 = hashMap0.values();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(collection0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getMessage());
      assertNotNull(sQLTimeoutException0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 16;
      intArray0[1] = 946;
      intArray0[2] = 4215;
      intArray0[3] = 0;
      intArray0[4] = 44;
      intArray0[5] = (-846);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "  <- Vararg", intArray0, sQLException0);
      assertEquals("", sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertEquals("  <- Vararg", batchUpdateException0.getSQLState());
      assertEquals("", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals(6, intArray0.length);
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {16, 946, 4215, 0, 44, (-846)}, intArray0);
      
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      boolean boolean0 = hashMap0.remove((Object) batchUpdateException0, (Object) jSONArray0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("", sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertEquals("  <- Vararg", batchUpdateException0.getSQLState());
      assertEquals("", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(6, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {16, 946, 4215, 0, 44, (-846)}, intArray0);
      
      sQLException0.setNextException(sQLTimeoutException0);
      assertEquals("", sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getMessage());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("  <- Vararg", hashMap0, sQLException0);
      assertEquals("java.sql.SQLClientInfoException:   <- Vararg", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("  <- Vararg", sQLClientInfoException0.getMessage());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("", sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertNotNull(sQLClientInfoException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("rcO7!$=", "rcO7!$=", sQLClientInfoException0);
      assertEquals("java.sql.SQLClientInfoException:   <- Vararg", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("  <- Vararg", sQLClientInfoException0.getMessage());
      assertEquals("rcO7!$=", sQLTransientConnectionException0.getSQLState());
      assertEquals("rcO7!$=", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: rcO7!$=", sQLTransientConnectionException0.toString());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("", sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertNotNull(sQLTransientConnectionException0);
      
      Throwable[] throwableArray0 = sQLTransientConnectionException0.getSuppressed();
      assertEquals("java.sql.SQLClientInfoException:   <- Vararg", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("  <- Vararg", sQLClientInfoException0.getMessage());
      assertEquals("rcO7!$=", sQLTransientConnectionException0.getSQLState());
      assertEquals("rcO7!$=", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: rcO7!$=", sQLTransientConnectionException0.toString());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("", sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertEquals(0, throwableArray0.length);
      assertNotNull(throwableArray0);
      
      boolean boolean1 = linkedHashSet0.add(sQLTransientConnectionException0);
      assertEquals("java.sql.SQLClientInfoException:   <- Vararg", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("  <- Vararg", sQLClientInfoException0.getMessage());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("rcO7!$=", sQLTransientConnectionException0.getSQLState());
      assertEquals("rcO7!$=", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: rcO7!$=", sQLTransientConnectionException0.toString());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("", sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(linkedHashSet0.contains(sQLTransientConnectionException0));
      
      JSONArray jSONArray1 = new JSONArray((Iterable<?>) linkedHashSet0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertTrue(linkedHashSet0.contains(sQLTransientConnectionException0));
      
      JSONObject jSONObject0 = jSONArray1.optJSONObject(44);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertNotSame(jSONArray1, jSONArray0);
      assertNull(jSONObject0);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertTrue(linkedHashSet0.contains(sQLTransientConnectionException0));
      
      JSONArray jSONArray2 = jSONArray1.put(538, collection0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(539, jSONArray1.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(539, jSONArray2.length());
      assertSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertNotSame(jSONArray2, jSONArray0);
      assertNotNull(jSONArray2);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertTrue(linkedHashSet0.contains(sQLTransientConnectionException0));
      
      double double0 = jSONArray1.optDouble(3, 0.0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(539, jSONArray1.length());
      assertSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertEquals(0.0, double0, 0.01);
      assertTrue(linkedHashSet0.contains(sQLTransientConnectionException0));
      
      try { 
        jSONArray1.getBigDecimal(44);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[44] is not a BigDecimal (class org.json.JSONObject$Null : null).
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LinkedHashSet<SQLTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLTransientConnectionException>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      SQLException sQLException0 = new SQLException("");
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getSQLState());
      assertEquals("", sQLException0.getMessage());
      assertNotNull(sQLException0);
      
      Collection<ClientInfoStatus> collection0 = hashMap0.values();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(collection0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNotNull(sQLTimeoutException0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 16;
      intArray0[1] = 946;
      intArray0[2] = 4215;
      intArray0[3] = 0;
      intArray0[4] = 44;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "rcO7!$=", intArray0, sQLException0);
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getSQLState());
      assertEquals("", sQLException0.getMessage());
      assertEquals("rcO7!$=", batchUpdateException0.getSQLState());
      assertEquals("", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals(6, intArray0.length);
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {16, 946, 4215, 0, 44, 0}, intArray0);
      
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      boolean boolean0 = hashMap0.remove((Object) batchUpdateException0, (Object) jSONArray0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getSQLState());
      assertEquals("", sQLException0.getMessage());
      assertEquals("rcO7!$=", batchUpdateException0.getSQLState());
      assertEquals("", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(6, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {16, 946, 4215, 0, 44, 0}, intArray0);
      
      sQLException0.setNextException(sQLTimeoutException0);
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getSQLState());
      assertEquals("", sQLException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("rcO7!$=", hashMap0, sQLException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getSQLState());
      assertEquals("", sQLException0.getMessage());
      assertEquals("rcO7!$=", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: rcO7!$=", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNotNull(sQLClientInfoException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("rcO7!$=", "rcO7!$=", sQLClientInfoException0);
      assertEquals("java.sql.SQLTransientConnectionException: rcO7!$=", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("rcO7!$=", sQLTransientConnectionException0.getMessage());
      assertEquals("rcO7!$=", sQLTransientConnectionException0.getSQLState());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getSQLState());
      assertEquals("", sQLException0.getMessage());
      assertEquals("rcO7!$=", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: rcO7!$=", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNotNull(sQLTransientConnectionException0);
      
      Throwable[] throwableArray0 = sQLTransientConnectionException0.getSuppressed();
      assertEquals("java.sql.SQLTransientConnectionException: rcO7!$=", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("rcO7!$=", sQLTransientConnectionException0.getMessage());
      assertEquals("rcO7!$=", sQLTransientConnectionException0.getSQLState());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getSQLState());
      assertEquals("", sQLException0.getMessage());
      assertEquals("rcO7!$=", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: rcO7!$=", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, throwableArray0.length);
      assertNotNull(throwableArray0);
      
      boolean boolean1 = linkedHashSet0.add(sQLTransientConnectionException0);
      assertEquals("java.sql.SQLTransientConnectionException: rcO7!$=", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("rcO7!$=", sQLTransientConnectionException0.getMessage());
      assertEquals("rcO7!$=", sQLTransientConnectionException0.getSQLState());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getSQLState());
      assertEquals("", sQLException0.getMessage());
      assertEquals("rcO7!$=", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: rcO7!$=", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(linkedHashSet0.contains(sQLTransientConnectionException0));
      
      JSONArray jSONArray1 = new JSONArray((Iterable<?>) linkedHashSet0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertTrue(linkedHashSet0.contains(sQLTransientConnectionException0));
      
      JSONObject jSONObject0 = jSONArray1.optJSONObject(44);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotSame(jSONArray1, jSONArray0);
      assertNull(jSONObject0);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertTrue(linkedHashSet0.contains(sQLTransientConnectionException0));
      
      JSONArray jSONArray2 = jSONArray1.put(538, collection0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(539, jSONArray1.length());
      assertEquals(539, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertNotSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertNotSame(jSONArray2, jSONArray0);
      assertNotNull(jSONArray2);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertTrue(linkedHashSet0.contains(sQLTransientConnectionException0));
      
      double double0 = jSONArray1.optDouble(3, 0.0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(539, jSONArray1.length());
      assertNotSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertEquals(0.0, double0, 0.01);
      assertTrue(linkedHashSet0.contains(sQLTransientConnectionException0));
      
      try { 
        jSONArray1.getBigDecimal(44);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[44] is not a BigDecimal (class org.json.JSONObject$Null : null).
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(0.0);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      int int0 = 0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("c0`E", "c0`E");
      assertEquals("java.sql.SQLNonTransientConnectionException: c0`E", sQLNonTransientConnectionException0.toString());
      assertEquals("c0`E", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("c0`E", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("\f", "XNs", 69, sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: c0`E", sQLNonTransientConnectionException0.toString());
      assertEquals("c0`E", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("c0`E", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("XNs", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: \f", sQLTransactionRollbackException0.toString());
      assertEquals(69, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("\f", sQLTransactionRollbackException0.getMessage());
      assertNotNull(sQLTransactionRollbackException0);
      
      JSONArray jSONArray2 = jSONArray0.put(60, (Object) sQLTransactionRollbackException0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(61, jSONArray0.length());
      assertEquals("java.sql.SQLNonTransientConnectionException: c0`E", sQLNonTransientConnectionException0.toString());
      assertEquals("c0`E", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("c0`E", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("XNs", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: \f", sQLTransactionRollbackException0.toString());
      assertEquals(69, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("\f", sQLTransactionRollbackException0.getMessage());
      assertEquals(61, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertNotNull(jSONArray2);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      
      // Undeclared exception!
      try { 
        bigDecimal0.divideAndRemainder(bigDecimal1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Division undefined
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONObject jSONObject0 = new JSONObject(98);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray1 = jSONArray0.put((Object) jSONObject0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(58);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      // Undeclared exception!
      try { 
        jSONArray0.putAll((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ArrayDeque<SQLRecoverableException> arrayDeque0 = new ArrayDeque<SQLRecoverableException>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      ArrayDeque<SQLRecoverableException> arrayDeque1 = arrayDeque0.clone();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertNotNull(arrayDeque1);
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) arrayDeque1);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      
      Spliterator<SQLRecoverableException> spliterator0 = arrayDeque1.spliterator();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertNotNull(spliterator0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      
      String string0 = "EO)$D";
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      float float0 = bigInteger0.floatValue();
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(0.0F, float0, 0.01F);
      
      BigInteger bigInteger1 = jSONArray0.optBigInteger(0, bigInteger0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      
      String string1 = jSONArray0.join("EO)$D");
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertNotNull(string1);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("whose type '", "EO)$D", 3515);
      assertEquals(3515, sQLRecoverableException0.getErrorCode());
      assertEquals("whose type '", sQLRecoverableException0.getMessage());
      assertEquals("EO)$D", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: whose type '", sQLRecoverableException0.toString());
      assertNotNull(sQLRecoverableException0);
      
      boolean boolean0 = arrayDeque0.add(sQLRecoverableException0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals(3515, sQLRecoverableException0.getErrorCode());
      assertEquals("whose type '", sQLRecoverableException0.getMessage());
      assertEquals("EO)$D", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: whose type '", sQLRecoverableException0.toString());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertTrue(boolean0);
      assertTrue(arrayDeque0.contains(sQLRecoverableException0));
      
      try { 
        jSONArray0.put((-214), (Collection<?>) arrayDeque0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-214] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Vector<JSONArray> vector0 = new Vector<JSONArray>(58, 58);
      assertEquals(58, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) vector0);
      assertEquals(58, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      assertFalse(vector0.contains(jSONArray0));
      
      JSONTokener jSONTokener0 = new JSONTokener("eK>");
      assertFalse(jSONTokener0.end());
      assertNotNull(jSONTokener0);
      
      JSONException jSONException0 = jSONTokener0.syntaxError("O8t(cz");
      assertFalse(jSONTokener0.end());
      assertNotNull(jSONException0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("I=:`.Q+#", "I=:`.Q+#", 58, jSONException0);
      assertFalse(jSONTokener0.end());
      assertEquals("I=:`.Q+#", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("I=:`.Q+#", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: I=:`.Q+#", sQLFeatureNotSupportedException0.toString());
      assertEquals(58, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      boolean boolean0 = jSONArray0.similar(sQLFeatureNotSupportedException0);
      assertEquals(58, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertFalse(jSONTokener0.end());
      assertEquals("I=:`.Q+#", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("I=:`.Q+#", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: I=:`.Q+#", sQLFeatureNotSupportedException0.toString());
      assertEquals(58, sQLFeatureNotSupportedException0.getErrorCode());
      assertFalse(boolean0);
      assertFalse(vector0.contains(jSONArray0));
      
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      assertEquals(58, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(vector0.contains(jSONArray1));
      
      JSONObject jSONObject0 = jSONArray1.optJSONObject(58);
      assertEquals(58, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
      assertNull(jSONObject0);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(vector0.contains(jSONArray1));
      
      JSONArray jSONArray2 = jSONArray1.put(58, (Collection<?>) vector0);
      assertEquals(58, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(59, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(59, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertNotNull(jSONArray2);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertFalse(vector0.contains(jSONArray2));
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((JSONArray) null);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      int int0 = 0;
      int int1 = 5673;
      boolean boolean0 = jSONArray0.optBoolean(5673, true);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertTrue(boolean0);
      
      Spliterator<Object> spliterator0 = jSONArray0.spliterator();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(spliterator0);
      
      boolean boolean1 = jSONArray0.optBoolean(0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JSONArray jSONArray1 = jSONArray0.optJSONArray(0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNull(jSONArray1);
      
      float float0 = 1312.8826F;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("$@_z<Ri=4", "$@_z<Ri=4");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // $@_z<Ri=4
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HashSet<JSONArray> hashSet0 = new HashSet<JSONArray>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      assertFalse(hashSet0.contains(jSONArray0));
      
      Class<Answers> class0 = Answers.class;
      // Undeclared exception!
      try { 
        jSONArray0.putAll((JSONArray) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) null);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      int int0 = 1395;
      Vector<String> vector0 = new Vector<String>(1395);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(1395, vector0.capacity());
      assertNotNull(vector0);
      
      vector0.addElement("t;0mC:~AFp");
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(1395, vector0.capacity());
      assertEquals("[t;0mC:~AFp]", vector0.toString());
      assertTrue(vector0.contains("t;0mC:~AFp"));
      
      JSONPointer jSONPointer0 = new JSONPointer(vector0);
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(1395, vector0.capacity());
      assertEquals("[t;0mC:~AFp]", vector0.toString());
      assertNotNull(jSONPointer0);
      assertTrue(vector0.contains("t;0mC:~AFp"));
      
      String string0 = jSONPointer0.toURIFragment();
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(1395, vector0.capacity());
      assertEquals("[t;0mC:~AFp]", vector0.toString());
      assertNotNull(string0);
      assertEquals("#/t%3B0mC%3A%7EAFp", string0);
      assertFalse(vector0.contains(string0));
      assertTrue(vector0.contains("t;0mC:~AFp"));
      
      Object object0 = jSONArray0.optQuery(jSONPointer0);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(1395, vector0.capacity());
      assertEquals("[t;0mC:~AFp]", vector0.toString());
      assertNull(object0);
      assertFalse(vector0.contains(string0));
      assertTrue(vector0.contains("t;0mC:~AFp"));
      
      int int1 = 0;
      String string1 = jSONArray0.toString(0);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      try { 
        jSONArray0.getInt(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      try { 
        jSONArray0.getInt((-976));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-976] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = new JSONArray();
      assertTrue(jSONArray1.isEmpty());
      assertEquals(0, jSONArray1.length());
      assertNotNull(jSONArray1);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      
      JSONArray jSONArray2 = jSONArray1.put(349.6288F);
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(1, jSONArray2.length());
      assertNotSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertNotSame(jSONArray2, jSONArray0);
      assertNotNull(jSONArray2);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      
      try { 
        jSONArray1.getBoolean(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a boolean (class java.lang.Float : 349.6288).
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HashSet<SQLNonTransientException> hashSet0 = new HashSet<SQLNonTransientException>(0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      long long0 = jSONArray0.optLong(0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0L, long0);
      
      Number number0 = jSONArray0.optNumber(0, (Number) null);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) null);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      double double0 = jSONArray0.optDouble(0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertEquals(Double.NaN, double0, 0.01);
      
      // Undeclared exception!
      try { 
        jSONArray0.putAll((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      
      float float0 = jSONArray0.optFloat(44);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotSame(jSONArray0, jSONArray1);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertEquals(Float.NaN, float0, 0.01F);
      
      JSONArray jSONArray2 = jSONArray1.put(0, 1L);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertNotNull(jSONArray2);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      
      int int0 = 0;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertNotNull(sQLClientInfoException0);
      
      Throwable[] throwableArray0 = sQLClientInfoException0.getSuppressed();
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, throwableArray0.length);
      assertNotNull(throwableArray0);
      
      sQLClientInfoException0.setNextException((SQLException) null);
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      
      DataTruncation dataTruncation0 = new DataTruncation(0, false, true, 0, 0, sQLClientInfoException0);
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertNotNull(dataTruncation0);
      
      JSONArray jSONArray3 = jSONArray0.putAll((Object) dataTruncation0);
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(2, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertNotSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray0);
      assertNotSame(jSONArray3, jSONArray2);
      assertNotNull(jSONArray3);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray3.equals((Object)jSONArray1));
      assertFalse(jSONArray3.equals((Object)jSONArray2));
      
      JSONArray jSONArray4 = jSONArray2.put(0.0F);
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(2, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertFalse(jSONArray4.isEmpty());
      assertEquals(2, jSONArray4.length());
      assertNotSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray0, jSONArray4);
      assertSame(jSONArray1, jSONArray4);
      assertNotSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertNotSame(jSONArray2, jSONArray0);
      assertNotSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray4);
      assertNotSame(jSONArray4, jSONArray0);
      assertSame(jSONArray4, jSONArray1);
      assertNotSame(jSONArray4, jSONArray3);
      assertSame(jSONArray4, jSONArray2);
      assertNotNull(jSONArray4);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray1.equals((Object)jSONArray3));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray3));
      assertFalse(jSONArray4.equals((Object)jSONArray0));
      assertFalse(jSONArray4.equals((Object)jSONArray3));
      
      List<Object> list0 = jSONArray0.toList();
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray0, jSONArray4);
      assertNotNull(list0);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray0.equals((Object)jSONArray4));
      assertFalse(list0.contains(true));
      
      DataTruncation dataTruncation1 = (DataTruncation)jSONArray0.remove(0);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation1.toString());
      assertEquals(0, dataTruncation1.getErrorCode());
      assertEquals("Data truncation", dataTruncation1.getMessage());
      assertEquals("01004", dataTruncation1.getSQLState());
      assertNotSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray0, jSONArray4);
      assertSame(dataTruncation1, dataTruncation0);
      assertNotNull(dataTruncation1);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray0.equals((Object)jSONArray4));
      
      try { 
        jSONArray4.put(0, Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((JSONArray) null);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      int int0 = (-3816);
      int int1 = jSONArray0.optInt(0, (-3816));
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertTrue(int1 == int0);
      assertEquals((-3816), int1);
      
      String string0 = "    verify(mock, times(10)).someMethod();";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("    verify(mock, times(10)).someMethod();");
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException:     verify(mock, times(10)).someMethod();", sQLTimeoutException0.toString());
      assertEquals("    verify(mock, times(10)).someMethod();", sQLTimeoutException0.getMessage());
      assertNotNull(sQLTimeoutException0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("    verify(mock, times(10)).someMethod();", "    verify(mock, times(10)).someMethod();", hashMap0, sQLTimeoutException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException:     verify(mock, times(10)).someMethod();", sQLTimeoutException0.toString());
      assertEquals("    verify(mock, times(10)).someMethod();", sQLTimeoutException0.getMessage());
      assertEquals("    verify(mock, times(10)).someMethod();", sQLClientInfoException0.getSQLState());
      assertEquals("    verify(mock, times(10)).someMethod();", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException:     verify(mock, times(10)).someMethod();", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNotNull(sQLClientInfoException0);
      
      Throwable[] throwableArray0 = sQLClientInfoException0.getSuppressed();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException:     verify(mock, times(10)).someMethod();", sQLTimeoutException0.toString());
      assertEquals("    verify(mock, times(10)).someMethod();", sQLTimeoutException0.getMessage());
      assertEquals("    verify(mock, times(10)).someMethod();", sQLClientInfoException0.getSQLState());
      assertEquals("    verify(mock, times(10)).someMethod();", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException:     verify(mock, times(10)).someMethod();", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals(0, throwableArray0.length);
      assertNotNull(throwableArray0);
      
      JSONArray jSONArray1 = jSONArray0.putAll((Object) sQLClientInfoException0);
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException:     verify(mock, times(10)).someMethod();", sQLTimeoutException0.toString());
      assertEquals("    verify(mock, times(10)).someMethod();", sQLTimeoutException0.getMessage());
      assertEquals("    verify(mock, times(10)).someMethod();", sQLClientInfoException0.getSQLState());
      assertEquals("    verify(mock, times(10)).someMethod();", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException:     verify(mock, times(10)).someMethod();", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      String string1 = jSONArray0.optString(0, "    verify(mock, times(10)).someMethod();");
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = jSONArray1.optBoolean((-3816), true);
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException:     verify(mock, times(10)).someMethod();", sQLTimeoutException0.toString());
      assertEquals("    verify(mock, times(10)).someMethod();", sQLTimeoutException0.getMessage());
      assertEquals("    verify(mock, times(10)).someMethod();", sQLClientInfoException0.getSQLState());
      assertEquals("    verify(mock, times(10)).someMethod();", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException:     verify(mock, times(10)).someMethod();", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertTrue(boolean0);
      
      try { 
        jSONArray0.getJSONObject((-3816));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-3816] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      int int0 = 3967;
      boolean boolean0 = jSONArray0.optBoolean(3967, true);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        jSONArray0.optQuery("c$Lmu>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Collection<SQLSyntaxErrorException> collection0 = null;
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      int int0 = jSONArray0.optInt((-3077));
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, int0);
      
      boolean boolean0 = jSONArray0.isEmpty();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertTrue(boolean0);
      
      String string0 = jSONArray0.join("pCBqt<5~<09vFJK~\"-");
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = jSONArray0.join("j#$]8ncVdna5sg.4-r");
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(string1);
      assertEquals("", string1);
      
      Number number0 = jSONArray0.optNumber(0);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNull(number0);
      
      try { 
        jSONArray0.putAll((Object) "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Vector<SQLClientInfoException> vector0 = new Vector<SQLClientInfoException>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      ArrayDeque<SQLClientInfoException> arrayDeque0 = new ArrayDeque<SQLClientInfoException>(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      boolean boolean0 = arrayDeque0.removeAll(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(boolean0);
      
      HashSet<SQLClientInfoException> hashSet0 = new HashSet<SQLClientInfoException>(arrayDeque0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      HashSet hashSet1 = (HashSet)hashSet0.clone();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet1.size());
      assertTrue(hashSet1.isEmpty());
      assertNotNull(hashSet1);
      
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) hashSet0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.putAll((Object) vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      JSONArray jSONArray2 = jSONArray0.put(10, true);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(11, jSONArray0.length());
      assertEquals(11, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertNotNull(jSONArray2);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = 898;
      JSONArray jSONArray0 = new JSONArray(898);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      try { 
        jSONArray0.getBigInteger(898);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[898] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2289);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      double double0 = jSONArray0.optDouble(2289, (-782.046528081565));
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals((-782.046528081565), double0, 0.01);
      
      try { 
        jSONArray0.getBigInteger(2289);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[2289] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Object object0 = null;
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      try { 
        jSONArray0.getJSONObject((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      boolean boolean0 = jSONArray0.isNull((-1));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertTrue(boolean0);
      
      String string0 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2919);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      int int0 = 0;
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = jSONArray0.optBigInteger(0, bigInteger0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      
      try { 
        jSONArray0.getBoolean(2919);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[2919] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      PriorityQueue<Float> priorityQueue0 = new PriorityQueue<Float>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      long long0 = jSONArray0.optLong((-2412), 0L);
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      ArrayDeque<SQLTransactionRollbackException> arrayDeque1 = arrayDeque0.clone();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertNotNull(arrayDeque1);
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) arrayDeque1);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      
      int int0 = 11;
      boolean boolean0 = jSONArray0.optBoolean(11, true);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertTrue(boolean0);
      
      int int1 = jSONArray0.optInt((-583), 11);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertTrue(int1 == int0);
      assertEquals(11, int1);
      
      JSONArray jSONArray1 = jSONArray0.put(11, 0.0F);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(12, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(12, jSONArray1.length());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      
      JSONTokener jSONTokener0 = new JSONTokener("Y1fzc;/\"HpT+Zr");
      assertFalse(jSONTokener0.end());
      assertNotNull(jSONTokener0);
      
      JSONException jSONException0 = jSONTokener0.syntaxError("number");
      assertFalse(jSONTokener0.end());
      assertNotNull(jSONException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Y1fzc;/\"HpT+Zr", jSONException0);
      assertFalse(jSONTokener0.end());
      assertEquals("Y1fzc;/\"HpT+Zr", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: Y1fzc;/\"HpT+Zr", sQLTransactionRollbackException0.toString());
      assertNotNull(sQLTransactionRollbackException0);
      
      boolean boolean1 = arrayDeque0.offer(sQLTransactionRollbackException0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertFalse(jSONTokener0.end());
      assertEquals("Y1fzc;/\"HpT+Zr", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: Y1fzc;/\"HpT+Zr", sQLTransactionRollbackException0.toString());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      
      HashMap<SQLIntegrityConstraintViolationException, SQLException> hashMap0 = new HashMap<SQLIntegrityConstraintViolationException, SQLException>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONArray jSONArray2 = jSONArray1.put(0, (Map<?, ?>) hashMap0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(12, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(12, jSONArray1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(12, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertNotNull(jSONArray2);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      assertFalse(arrayDeque1.contains(sQLTransactionRollbackException0));
      
      List<Object> list0 = jSONArray0.toList();
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(12, jSONArray0.length());
      assertFalse(list0.isEmpty());
      assertEquals(12, list0.size());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertNotNull(list0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      assertFalse(arrayDeque1.contains(sQLTransactionRollbackException0));
      assertTrue(list0.contains(0.0F));
      assertFalse(list0.contains((-583)));
      
      float float0 = jSONArray1.getFloat(11);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(12, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(12, jSONArray1.length());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(arrayDeque0.contains(sQLTransactionRollbackException0));
      assertFalse(arrayDeque1.contains(sQLTransactionRollbackException0));
      
      try { 
        jSONArray2.put((-4803), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-4803] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int int0 = 832;
      JSONArray jSONArray0 = new JSONArray(832);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(973.2636F);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      try { 
        jSONArray1.getString(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a String (class java.lang.Float : 973.2636).
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int int0 = 1076;
      JSONArray jSONArray0 = new JSONArray(1076);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      TreeSet<JSONObject> treeSet0 = new TreeSet<JSONObject>();
      assertNotNull(treeSet0);
      
      JSONArray jSONArray1 = new JSONArray((Collection<?>) treeSet0);
      assertTrue(jSONArray1.isEmpty());
      assertEquals(0, jSONArray1.length());
      assertNotNull(jSONArray1);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      
      int int1 = 0;
      JSONArray jSONArray2 = jSONArray1.putAll((Collection<?>) treeSet0);
      assertTrue(jSONArray1.isEmpty());
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray2.isEmpty());
      assertEquals(0, jSONArray2.length());
      assertSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertNotNull(jSONArray2);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>(0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      JSONArray jSONArray3 = jSONArray0.put(0, 0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(1, jSONArray3.length());
      assertSame(jSONArray0, jSONArray3);
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray3, jSONArray1);
      assertNotSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray0);
      assertNotNull(jSONArray3);
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray3.equals((Object)jSONArray1));
      assertFalse(jSONArray3.equals((Object)jSONArray2));
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) hashSet0, locale_FilteringMode0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      ArrayList<String> arrayList1 = new ArrayList<String>(list0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) locale_FilteringMode0);
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = predicate0.negate();
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      Predicate<Object> predicate2 = predicate1.and(predicate1);
      assertNotNull(predicate2);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      
      Predicate<Object> predicate3 = predicate2.or(predicate0);
      assertNotNull(predicate3);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      
      boolean boolean0 = arrayList1.removeIf(predicate3);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(boolean0);
      
      JSONPointer jSONPointer0 = new JSONPointer(arrayList1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(jSONPointer0);
      
      JSONArray jSONArray4 = (JSONArray)jSONArray1.optQuery(jSONPointer0);
      assertTrue(jSONArray4.isEmpty());
      assertEquals(0, jSONArray4.length());
      assertTrue(jSONArray1.isEmpty());
      assertEquals(0, jSONArray1.length());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertSame(jSONArray4, jSONArray2);
      assertNotSame(jSONArray4, jSONArray3);
      assertSame(jSONArray4, jSONArray1);
      assertNotSame(jSONArray4, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray1, jSONArray3);
      assertNotSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray4);
      assertNotNull(jSONArray4);
      assertFalse(jSONArray4.equals((Object)jSONArray3));
      assertFalse(jSONArray4.equals((Object)jSONArray0));
      assertFalse(jSONArray1.equals((Object)jSONArray3));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      
      JSONArray jSONArray5 = jSONArray0.putAll(jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray5.length());
      assertFalse(jSONArray5.isEmpty());
      assertTrue(jSONArray1.isEmpty());
      assertEquals(0, jSONArray1.length());
      assertSame(jSONArray0, jSONArray5);
      assertSame(jSONArray0, jSONArray3);
      assertNotSame(jSONArray0, jSONArray4);
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray0, jSONArray1);
      assertSame(jSONArray5, jSONArray0);
      assertNotSame(jSONArray5, jSONArray2);
      assertNotSame(jSONArray5, jSONArray1);
      assertSame(jSONArray5, jSONArray3);
      assertNotSame(jSONArray5, jSONArray4);
      assertSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray1, jSONArray3);
      assertNotSame(jSONArray1, jSONArray5);
      assertNotSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray4);
      assertNotNull(jSONArray5);
      assertFalse(jSONArray0.equals((Object)jSONArray4));
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray5.equals((Object)jSONArray2));
      assertFalse(jSONArray5.equals((Object)jSONArray1));
      assertFalse(jSONArray5.equals((Object)jSONArray4));
      assertFalse(jSONArray1.equals((Object)jSONArray3));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      
      try { 
        jSONArray0.getLong(1076);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1076] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      TreeSet<String> treeSet0 = new TreeSet<String>(linkedList1);
      assertEquals(0, linkedList1.size());
      assertNotNull(treeSet0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) treeSet0, locale_FilteringMode0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(jSONPointer0);
      
      JSONArray jSONArray1 = (JSONArray)jSONArray0.optQuery(jSONPointer0);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HashSet<SQLTransientConnectionException> hashSet0 = new HashSet<SQLTransientConnectionException>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      int int0 = (-713);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("`q4y)gAq,", "xz)d{");
      assertEquals("`q4y)gAq,", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: `q4y)gAq,", sQLTransientConnectionException0.toString());
      assertEquals("xz)d{", sQLTransientConnectionException0.getSQLState());
      assertNotNull(sQLTransientConnectionException0);
      
      boolean boolean0 = hashSet0.add(sQLTransientConnectionException0);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertEquals("`q4y)gAq,", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: `q4y)gAq,", sQLTransientConnectionException0.toString());
      assertEquals("xz)d{", sQLTransientConnectionException0.getSQLState());
      assertTrue(boolean0);
      assertTrue(hashSet0.contains(sQLTransientConnectionException0));
      
      jSONArray0.optEnum(class0, (-713));
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertTrue(hashSet0.contains(sQLTransientConnectionException0));
      
      int int1 = (-1095);
      try { 
        jSONArray0.put((-1095), (long) (-1095));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1095] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(0, (-2309));
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      float float0 = jSONArray1.optFloat(2710);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(Float.NaN, float0, 0.01F);
      
      Class<Answers> class0 = Answers.class;
      try { 
        jSONArray0.getEnum(class0, 46);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[46] is not a enum of type java.io.StringWriter@0000000006 (null).
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Integer integer0 = new Integer(794);
      assertNotNull(integer0);
      assertEquals(794, (int)integer0);
      
      boolean boolean0 = linkedList0.add(integer0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(794));
      
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>(linkedList0);
      assertEquals(1, linkedList0.size());
      assertNotNull(treeSet0);
      assertTrue(linkedList0.contains(794));
      assertTrue(treeSet0.contains(794));
      
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) treeSet0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      assertTrue(linkedList0.contains(794));
      assertTrue(treeSet0.contains(794));
      
      int int0 = (-3285);
      Number number0 = jSONArray0.optNumber((-3285));
      assertEquals(1, linkedList0.size());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertNull(number0);
      assertFalse(linkedList0.contains((-3285)));
      assertTrue(linkedList0.contains(integer0));
      assertTrue(treeSet0.contains(integer0));
      assertFalse(treeSet0.contains((-3285)));
      
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(linkedList0.contains((-3285)));
      assertTrue(linkedList0.contains(integer0));
      assertTrue(treeSet0.contains(integer0));
      assertFalse(treeSet0.contains((-3285)));
      
      JSONArray jSONArray2 = jSONArray0.putAll(jSONArray1);
      assertEquals(1, linkedList0.size());
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertEquals(2, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray0);
      assertNotSame(jSONArray2, jSONArray1);
      assertNotNull(jSONArray2);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertFalse(linkedList0.contains((-3285)));
      assertTrue(linkedList0.contains(integer0));
      assertTrue(treeSet0.contains(integer0));
      assertFalse(treeSet0.contains((-3285)));
      
      JSONArray jSONArray3 = jSONArray2.putAll((Collection<?>) treeSet0);
      assertEquals(1, linkedList0.size());
      assertEquals(3, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertEquals(3, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(3, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray1, jSONArray3);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray3);
      assertNotSame(jSONArray2, jSONArray1);
      assertNotSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray2);
      assertNotNull(jSONArray3);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray1.equals((Object)jSONArray2));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertFalse(jSONArray3.equals((Object)jSONArray1));
      assertFalse(linkedList0.contains((-3285)));
      assertTrue(linkedList0.contains(integer0));
      assertTrue(treeSet0.contains(integer0));
      assertFalse(treeSet0.contains((-3285)));
      
      try { 
        jSONArray3.getString((-3368));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-3368] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      long long0 = jSONArray0.optLong(1425);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0L, long0);
      
      // Undeclared exception!
      try { 
        jSONArray0.putAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      int int0 = (-4338);
      JSONArray jSONArray1 = (JSONArray)jSONArray0.query("");
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray1.isEmpty());
      assertEquals(0, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      try { 
        jSONArray0.get((-4338));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-4338] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(4148);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = (JSONArray)jSONArray0.optQuery("");
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      Vector<String> vector0 = new Vector<String>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      assertFalse(vector0.contains(""));
      
      JSONPointer jSONPointer0 = new JSONPointer(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(jSONPointer0);
      assertFalse(vector0.contains(""));
      
      JSONArray jSONArray2 = (JSONArray)jSONArray0.query(jSONPointer0);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(0, jSONArray2.length());
      assertTrue(jSONArray2.isEmpty());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertNotNull(jSONArray2);
      assertFalse(vector0.contains(""));
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int int0 = 1866;
      JSONArray jSONArray0 = new JSONArray(1866);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      int int1 = (-1179);
      int int2 = jSONArray0.optInt((-1179));
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      boolean boolean0 = jSONArray0.isEmpty();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertTrue(boolean0);
      
      try { 
        jSONArray0.getLong(1866);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1866] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<SQLTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLTransientConnectionException>(comparator0);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      int int0 = 12;
      try { 
        jSONArray0.getString(12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[12] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      HashSet<SQLNonTransientConnectionException> hashSet0 = new HashSet<SQLNonTransientConnectionException>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      boolean boolean0 = hashSet0.remove((Object) null);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(boolean0);
      
      boolean boolean1 = hashSet0.add((SQLNonTransientConnectionException) null);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = hashSet0.add((SQLNonTransientConnectionException) null);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) hashSet0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONPointer jSONPointer0 = null;
      try {
        jSONPointer0 = new JSONPointer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      LinkedHashSet<JSONObject> linkedHashSet0 = new LinkedHashSet<JSONObject>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      
      JSONArray jSONArray2 = jSONArray0.putAll((Object) jSONArray1);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertTrue(jSONArray2.isEmpty());
      assertEquals(0, jSONArray2.length());
      assertSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray0);
      assertNotSame(jSONArray2, jSONArray1);
      assertNotNull(jSONArray2);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      
      JSONArray jSONArray3 = jSONArray0.put((Collection<?>) linkedHashSet0);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(1, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertNotSame(jSONArray0, jSONArray1);
      assertSame(jSONArray3, jSONArray0);
      assertNotSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray2);
      assertNotNull(jSONArray3);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray3.equals((Object)jSONArray1));
      
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(".", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(528);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      try { 
        jSONArray0.getString((-1173));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1173] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      Stack<SQLNonTransientException> stack0 = new Stack<SQLNonTransientException>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1031;
      intArray0[1] = 1031;
      intArray0[2] = 172;
      intArray0[3] = 1031;
      intArray0[4] = 1031;
      intArray0[5] = 1031;
      intArray0[6] = 1031;
      intArray0[7] = 1031;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "boolean", 1031);
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals("boolean", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals(1031, sQLRecoverableException0.getErrorCode());
      assertNotNull(sQLRecoverableException0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLRecoverableException0);
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals("boolean", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals(1031, sQLRecoverableException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLRecoverableException: ", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals(8, intArray0.length);
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {1031, 1031, 172, 1031, 1031, 1031, 1031, 1031}, intArray0);
      
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(batchUpdateException0);
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals("boolean", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals(1031, sQLRecoverableException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLRecoverableException: ", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: java.sql.BatchUpdateException: java.sql.SQLRecoverableException: ", batchUpdateException1.toString());
      assertNull(batchUpdateException1.getSQLState());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLRecoverableException: ", batchUpdateException1.getMessage());
      assertEquals(8, intArray0.length);
      assertNotNull(batchUpdateException1);
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      assertArrayEquals(new int[] {1031, 1031, 172, 1031, 1031, 1031, 1031, 1031}, intArray0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", " (null).", 1031, batchUpdateException1);
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals("boolean", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals(1031, sQLRecoverableException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLRecoverableException: ", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: java.sql.BatchUpdateException: java.sql.SQLRecoverableException: ", batchUpdateException1.toString());
      assertNull(batchUpdateException1.getSQLState());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLRecoverableException: ", batchUpdateException1.getMessage());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(1031, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(" (null).", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(8, intArray0.length);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      assertArrayEquals(new int[] {1031, 1031, 172, 1031, 1031, 1031, 1031, 1031}, intArray0);
      
      boolean boolean0 = stack0.add((SQLNonTransientException) sQLIntegrityConstraintViolationException0);
      assertEquals("[java.sql.SQLIntegrityConstraintViolationException: ]", stack0.toString());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals("boolean", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals(1031, sQLRecoverableException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLRecoverableException: ", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: java.sql.BatchUpdateException: java.sql.SQLRecoverableException: ", batchUpdateException1.toString());
      assertNull(batchUpdateException1.getSQLState());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLRecoverableException: ", batchUpdateException1.getMessage());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(1031, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(" (null).", sQLIntegrityConstraintViolationException0.getSQLState());
      assertNotSame(batchUpdateException0, batchUpdateException1);
      assertNotSame(batchUpdateException1, batchUpdateException0);
      assertEquals(8, intArray0.length);
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      assertTrue(boolean0);
      assertArrayEquals(new int[] {1031, 1031, 172, 1031, 1031, 1031, 1031, 1031}, intArray0);
      
      JSONArray jSONArray1 = jSONArray0.putAll((Iterable<?>) stack0);
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals("[java.sql.SQLIntegrityConstraintViolationException: ]", stack0.toString());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray0, jSONArray1);
      assertNotNull(jSONArray1);
      
      Object object0 = jSONArray0.optQuery("/V9(z");
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      int int0 = 0;
      List<Object> list0 = jSONArray0.toList();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      try { 
        jSONArray0.getDouble(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) null);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      int int0 = (-604);
      Number number0 = jSONArray0.optNumber((-604));
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNull(number0);
      
      Object object0 = jSONArray0.remove(0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNull(object0);
      
      String string0 = "[w\"LmjX1'(Bka`A@GDh";
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray("[w\"LmjX1'(Bka`A@GDh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or ']' at 3 [character 4 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      List<Object> list0 = jSONArray0.toList();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      int int0 = 345;
      Long long0 = new Long(345);
      assertNotNull(long0);
      assertEquals(345L, (long)long0);
      
      String string0 = "";
      try { 
        Long.parseUnsignedLong("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      String string0 = jSONArray0.join("");
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = 372;
      boolean boolean0 = jSONArray0.optBoolean(128, false);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertFalse(boolean0);
      
      try { 
        jSONArray0.getDouble(372);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[372] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int int0 = (-708);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((-708));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial capacity cannot be negative.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("t4Cs]G4S.Ar92");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      int int0 = (-754);
      float float0 = jSONArray0.optFloat((-841));
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(Float.NaN, float0, 0.01F);
      
      try { 
        jSONArray0.put((-754), (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-754] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>(2710);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      // Undeclared exception!
      try { 
        jSONArray0.query("^rMEym%O)VQebQ\u0000gE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      try { 
        jSONArray0.put((-707), (float) (-707));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-707] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      Object object0 = jSONArray0.opt(1037);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      
      int int0 = 0;
      try { 
        jSONArray1.getFloat(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = "+5#)iWq&`E:BOnH";
      SQLTransientException sQLTransientException0 = new SQLTransientException("+5#)iWq&`E:BOnH");
      assertEquals("+5#)iWq&`E:BOnH", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: +5#)iWq&`E:BOnH", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      assertNotNull(sQLTransientException0);
      
      Spliterator<Throwable> spliterator0 = sQLTransientException0.spliterator();
      assertEquals("+5#)iWq&`E:BOnH", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: +5#)iWq&`E:BOnH", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      assertNotNull(spliterator0);
      
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) sQLTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Incorrect use of API detected here:");
      assertNotNull(stringReader0);
      
      JSONTokener jSONTokener0 = new JSONTokener(stringReader0);
      assertFalse(jSONTokener0.end());
      assertNotNull(jSONTokener0);
      
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Vector<SQLTransientException> vector0 = new Vector<SQLTransientException>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      try { 
        jSONArray0.getFloat(39);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[39] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      try { 
        jSONArray0.getJSONArray(2800);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[2800] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      LinkedHashSet<JSONObject> linkedHashSet0 = new LinkedHashSet<JSONObject>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      
      JSONArray jSONArray2 = jSONArray1.put(0, (-1.0));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(1, jSONArray2.length());
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertNotSame(jSONArray2, jSONArray0);
      assertNotNull(jSONArray2);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((JSONArray) null);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      HashMap<Integer, SQLClientInfoException> hashMap0 = new HashMap<Integer, SQLClientInfoException>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONArray jSONArray1 = jSONArray0.put(272, (Map<?, ?>) hashMap0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(273, jSONArray0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(273, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = "7BJKj{Z.c";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("7BJKj{Z.c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("UMaOPTefu{F)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      Short short0 = new Short((short) (-3054));
      assertNotNull(short0);
      assertEquals((short) (-3054), (short)short0);
      
      jSONArray0.clear();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      
      short short1 = (short)3062;
      int int0 = Short.compare((short) (-3054), (short)3062);
      assertEquals((-6116), int0);
      
      int int1 = Short.toUnsignedInt((short)0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      try { 
        jSONArray0.putAll((Object) short0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(160, (Map<?, ?>) null);
      assertEquals(161, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(161, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Locale locale0 = Locale.forLanguageTag("");
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains(""));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) set0, locale_FilteringMode0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(set0.contains(""));
      assertFalse(list0.contains(""));
      
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(jSONPointer0);
      assertFalse(set0.contains(""));
      assertFalse(list0.contains(""));
      
      JSONArray jSONArray2 = (JSONArray)jSONArray1.optQuery(jSONPointer0);
      assertEquals(161, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(161, jSONArray1.length());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(161, jSONArray2.length());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertNotNull(jSONArray2);
      assertFalse(set0.contains(""));
      assertFalse(list0.contains(""));
      
      float float0 = jSONArray1.optFloat(2736, 0.0F);
      assertEquals(161, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(161, jSONArray1.length());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertEquals(0.0F, float0, 0.01F);
      
      try { 
        jSONArray1.getInt(160);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[160] is not a int (class org.json.JSONObject).
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((JSONArray) null);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      // Undeclared exception!
      try { 
        jSONArray0.query("false");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      int int0 = 3071;
      JSONArray jSONArray0 = new JSONArray(3071);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(3071, false);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3072, jSONArray0.length());
      assertEquals(3072, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      jSONArray0.clear();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertSame(jSONArray0, jSONArray1);
      
      try { 
        jSONArray0.getLong(2920);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[2920] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      int int0 = (-1);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial capacity cannot be negative.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ArrayDeque<SQLTimeoutException> arrayDeque0 = new ArrayDeque<SQLTimeoutException>();
      //  // Unstable assertion: assertTrue(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals(0, arrayDeque0.size());
      //  // Unstable assertion: assertNotNull(arrayDeque0);
      
      SQLDataException sQLDataException0 = new SQLDataException(").");
      //  // Unstable assertion: assertEquals("java.sql.SQLDataException: ).", sQLDataException0.toString());
      //  // Unstable assertion: assertEquals(0, sQLDataException0.getErrorCode());
      //  // Unstable assertion: assertNull(sQLDataException0.getSQLState());
      //  // Unstable assertion: assertEquals(").", sQLDataException0.getMessage());
      //  // Unstable assertion: assertNotNull(sQLDataException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      //  // Unstable assertion: assertNull(sQLRecoverableException0.getSQLState());
      //  // Unstable assertion: assertNull(sQLRecoverableException0.getMessage());
      //  // Unstable assertion: assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      //  // Unstable assertion: assertEquals(0, sQLRecoverableException0.getErrorCode());
      //  // Unstable assertion: assertNotNull(sQLRecoverableException0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(432);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertNotNull(byteArrayOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      //  // Unstable assertion: assertNotNull(mockPrintStream0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) ").";
      objectArray0[1] = (Object) ").";
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) byteArrayOutputStream0;
      objectArray0[5] = (Object) arrayDeque0;
      SQLRecoverableException sQLRecoverableException1 = (SQLRecoverableException)sQLRecoverableException0.fillInStackTrace();
      //  // Unstable assertion: assertNull(sQLRecoverableException0.getSQLState());
      //  // Unstable assertion: assertNull(sQLRecoverableException0.getMessage());
      //  // Unstable assertion: assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      //  // Unstable assertion: assertEquals(0, sQLRecoverableException0.getErrorCode());
      //  // Unstable assertion: assertNull(sQLRecoverableException1.getSQLState());
      //  // Unstable assertion: assertNull(sQLRecoverableException1.getMessage());
      //  // Unstable assertion: assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException1.toString());
      //  // Unstable assertion: assertEquals(0, sQLRecoverableException1.getErrorCode());
      //  // Unstable assertion: assertSame(sQLRecoverableException0, sQLRecoverableException1);
      //  // Unstable assertion: assertSame(sQLRecoverableException1, sQLRecoverableException0);
      //  // Unstable assertion: assertNotNull(sQLRecoverableException1);
      
      objectArray0[6] = (Object) byteArrayOutputStream0;
      objectArray0[7] = (Object) sQLRecoverableException0;
      MockPrintStream mockPrintStream1 = (MockPrintStream)mockPrintStream0.format("_e~\"BGa$/oH", objectArray0);
      //  // Unstable assertion: assertEquals("_e~\"BGa$/oH", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(11, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertSame(mockPrintStream0, mockPrintStream1);
      //  // Unstable assertion: assertSame(mockPrintStream1, mockPrintStream0);
      //  // Unstable assertion: assertEquals(8, objectArray0.length);
      //  // Unstable assertion: assertNotNull(mockPrintStream1);
      
      sQLRecoverableException0.printStackTrace((PrintStream) mockPrintStream1);
      //  // Unstable assertion: assertNull(sQLRecoverableException0.getSQLState());
      //  // Unstable assertion: assertNull(sQLRecoverableException0.getMessage());
      //  // Unstable assertion: assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      //  // Unstable assertion: assertEquals(0, sQLRecoverableException0.getErrorCode());
      //  // Unstable assertion: assertEquals(1043, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertSame(sQLRecoverableException0, sQLRecoverableException1);
      //  // Unstable assertion: assertSame(mockPrintStream0, mockPrintStream1);
      //  // Unstable assertion: assertSame(mockPrintStream1, mockPrintStream0);
      //  // Unstable assertion: assertEquals(8, objectArray0.length);
      
      sQLDataException0.addSuppressed(sQLRecoverableException0);
      //  // Unstable assertion: assertEquals("java.sql.SQLDataException: ).", sQLDataException0.toString());
      //  // Unstable assertion: assertEquals(0, sQLDataException0.getErrorCode());
      //  // Unstable assertion: assertNull(sQLDataException0.getSQLState());
      //  // Unstable assertion: assertEquals(").", sQLDataException0.getMessage());
      //  // Unstable assertion: assertNull(sQLRecoverableException0.getSQLState());
      //  // Unstable assertion: assertNull(sQLRecoverableException0.getMessage());
      //  // Unstable assertion: assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      //  // Unstable assertion: assertEquals(0, sQLRecoverableException0.getErrorCode());
      //  // Unstable assertion: assertSame(sQLRecoverableException0, sQLRecoverableException1);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(").", "hy/MqSH3U~ESI&~", 432, sQLDataException0);
      //  // Unstable assertion: assertEquals(432, sQLTimeoutException0.getErrorCode());
      //  // Unstable assertion: assertEquals("hy/MqSH3U~ESI&~", sQLTimeoutException0.getSQLState());
      //  // Unstable assertion: assertEquals(").", sQLTimeoutException0.getMessage());
      //  // Unstable assertion: assertEquals("java.sql.SQLTimeoutException: ).", sQLTimeoutException0.toString());
      //  // Unstable assertion: assertEquals("java.sql.SQLDataException: ).", sQLDataException0.toString());
      //  // Unstable assertion: assertEquals(0, sQLDataException0.getErrorCode());
      //  // Unstable assertion: assertNull(sQLDataException0.getSQLState());
      //  // Unstable assertion: assertEquals(").", sQLDataException0.getMessage());
      //  // Unstable assertion: assertNotNull(sQLTimeoutException0);
      
      StackTraceElement[] stackTraceElementArray0 = sQLTimeoutException0.getStackTrace();
      //  // Unstable assertion: assertEquals(432, sQLTimeoutException0.getErrorCode());
      //  // Unstable assertion: assertEquals("hy/MqSH3U~ESI&~", sQLTimeoutException0.getSQLState());
      //  // Unstable assertion: assertEquals(").", sQLTimeoutException0.getMessage());
      //  // Unstable assertion: assertEquals("java.sql.SQLTimeoutException: ).", sQLTimeoutException0.toString());
      //  // Unstable assertion: assertEquals("java.sql.SQLDataException: ).", sQLDataException0.toString());
      //  // Unstable assertion: assertEquals(0, sQLDataException0.getErrorCode());
      //  // Unstable assertion: assertNull(sQLDataException0.getSQLState());
      //  // Unstable assertion: assertEquals(").", sQLDataException0.getMessage());
      //  // Unstable assertion: assertEquals(13, stackTraceElementArray0.length);
      //  // Unstable assertion: assertNotNull(stackTraceElementArray0);
      
      boolean boolean0 = arrayDeque0.add(sQLTimeoutException0);
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertEquals(432, sQLTimeoutException0.getErrorCode());
      //  // Unstable assertion: assertEquals("hy/MqSH3U~ESI&~", sQLTimeoutException0.getSQLState());
      //  // Unstable assertion: assertEquals(").", sQLTimeoutException0.getMessage());
      //  // Unstable assertion: assertEquals("java.sql.SQLTimeoutException: ).", sQLTimeoutException0.toString());
      //  // Unstable assertion: assertEquals("java.sql.SQLDataException: ).", sQLDataException0.toString());
      //  // Unstable assertion: assertEquals(0, sQLDataException0.getErrorCode());
      //  // Unstable assertion: assertNull(sQLDataException0.getSQLState());
      //  // Unstable assertion: assertEquals(").", sQLDataException0.getMessage());
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) arrayDeque0);
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertEquals(1, jSONArray0.length());
      //  // Unstable assertion: assertFalse(jSONArray0.isEmpty());
      //  // Unstable assertion: assertNotNull(jSONArray0);
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      JSONArray jSONArray1 = jSONArray0.put(432, false);
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertEquals(433, jSONArray0.length());
      //  // Unstable assertion: assertFalse(jSONArray0.isEmpty());
      //  // Unstable assertion: assertEquals(433, jSONArray1.length());
      //  // Unstable assertion: assertFalse(jSONArray1.isEmpty());
      //  // Unstable assertion: assertSame(jSONArray0, jSONArray1);
      //  // Unstable assertion: assertSame(jSONArray1, jSONArray0);
      //  // Unstable assertion: assertNotNull(jSONArray1);
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      JSONArray jSONArray2 = new JSONArray(jSONArray0);
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertEquals(433, jSONArray0.length());
      //  // Unstable assertion: assertFalse(jSONArray0.isEmpty());
      //  // Unstable assertion: assertFalse(jSONArray2.isEmpty());
      //  // Unstable assertion: assertEquals(433, jSONArray2.length());
      //  // Unstable assertion: assertNotNull(jSONArray2);
      //  // Unstable assertion: assertFalse(jSONArray2.equals((Object)jSONArray0));
      //  // Unstable assertion: assertFalse(jSONArray2.equals((Object)jSONArray1));
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      boolean boolean1 = jSONArray2.optBoolean(0, true);
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertEquals(433, jSONArray0.length());
      //  // Unstable assertion: assertFalse(jSONArray0.isEmpty());
      //  // Unstable assertion: assertFalse(jSONArray2.isEmpty());
      //  // Unstable assertion: assertEquals(433, jSONArray2.length());
      //  // Unstable assertion: assertNotSame(jSONArray0, jSONArray2);
      //  // Unstable assertion: assertSame(jSONArray0, jSONArray1);
      //  // Unstable assertion: assertNotSame(jSONArray2, jSONArray0);
      //  // Unstable assertion: assertNotSame(jSONArray2, jSONArray1);
      //  // Unstable assertion: assertFalse(jSONArray0.equals((Object)jSONArray2));
      //  // Unstable assertion: assertFalse(jSONArray2.equals((Object)jSONArray0));
      //  // Unstable assertion: assertFalse(jSONArray2.equals((Object)jSONArray1));
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertTrue(boolean1);
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      float float0 = jSONArray2.optFloat((-431), (-166.505F));
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertEquals(433, jSONArray0.length());
      //  // Unstable assertion: assertFalse(jSONArray0.isEmpty());
      //  // Unstable assertion: assertFalse(jSONArray2.isEmpty());
      //  // Unstable assertion: assertEquals(433, jSONArray2.length());
      //  // Unstable assertion: assertNotSame(jSONArray0, jSONArray2);
      //  // Unstable assertion: assertSame(jSONArray0, jSONArray1);
      //  // Unstable assertion: assertNotSame(jSONArray2, jSONArray0);
      //  // Unstable assertion: assertNotSame(jSONArray2, jSONArray1);
      //  // Unstable assertion: assertFalse(jSONArray0.equals((Object)jSONArray2));
      //  // Unstable assertion: assertFalse(jSONArray2.equals((Object)jSONArray0));
      //  // Unstable assertion: assertFalse(jSONArray2.equals((Object)jSONArray1));
      //  // Unstable assertion: assertEquals((-166.505F), float0, 0.01F);
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      String string0 = (String)jSONArray0.opt(0);
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertEquals(433, jSONArray0.length());
      //  // Unstable assertion: assertFalse(jSONArray0.isEmpty());
      //  // Unstable assertion: assertNotSame(jSONArray0, jSONArray2);
      //  // Unstable assertion: assertSame(jSONArray0, jSONArray1);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertFalse(jSONArray0.equals((Object)jSONArray2));
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      boolean boolean2 = jSONArray0.optBoolean(432);
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertEquals(433, jSONArray0.length());
      //  // Unstable assertion: assertFalse(jSONArray0.isEmpty());
      //  // Unstable assertion: assertNotSame(jSONArray0, jSONArray2);
      //  // Unstable assertion: assertSame(jSONArray0, jSONArray1);
      //  // Unstable assertion: assertFalse(jSONArray0.equals((Object)jSONArray2));
      //  // Unstable assertion: assertFalse(boolean2 == boolean0);
      //  // Unstable assertion: assertFalse(boolean2 == boolean1);
      //  // Unstable assertion: assertFalse(boolean2);
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      String string1 = jSONArray2.optString((-431), " (null).");
      //  // Unstable assertion: assertFalse(arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertEquals(433, jSONArray0.length());
      //  // Unstable assertion: assertFalse(jSONArray0.isEmpty());
      //  // Unstable assertion: assertFalse(jSONArray2.isEmpty());
      //  // Unstable assertion: assertEquals(433, jSONArray2.length());
      //  // Unstable assertion: assertNotSame(jSONArray0, jSONArray2);
      //  // Unstable assertion: assertSame(jSONArray0, jSONArray1);
      //  // Unstable assertion: assertNotSame(jSONArray2, jSONArray0);
      //  // Unstable assertion: assertNotSame(jSONArray2, jSONArray1);
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertFalse(jSONArray0.equals((Object)jSONArray2));
      //  // Unstable assertion: assertFalse(jSONArray2.equals((Object)jSONArray0));
      //  // Unstable assertion: assertFalse(jSONArray2.equals((Object)jSONArray1));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertEquals(" (null).", string1);
      //  // Unstable assertion: assertTrue(arrayDeque0.contains(sQLTimeoutException0));
      
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      try { 
        jSONArray2.getEnum(class0, 0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a enum of type java.io.StringWriter@0000000011 (class java.lang.String : java.sql.SQLTimeoutException@0000000001).
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONTokener jSONTokener0 = new JSONTokener("o9BTxU {%C?c>4ed\"");
      assertFalse(jSONTokener0.end());
      assertNotNull(jSONTokener0);
      
      char char0 = jSONTokener0.skipTo('m');
      assertTrue(jSONTokener0.end());
      assertEquals('\u0000', char0);
      
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      PriorityQueue<Short> priorityQueue0 = new PriorityQueue<Short>(2968);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Short short0 = new Short((short)93);
      assertNotNull(short0);
      assertEquals((short)93, (short)short0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      long long0 = Short.toUnsignedLong((short)93);
      assertEquals(93L, long0);
      
      Stream<Short> stream0 = priorityQueue0.stream();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(stream0);
      assertFalse(priorityQueue0.contains((short)93));
      
      boolean boolean1 = priorityQueue0.add(short0);
      assertEquals(1, priorityQueue0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(priorityQueue0.contains((short)93));
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) priorityQueue0);
      assertEquals(1, priorityQueue0.size());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      assertTrue(priorityQueue0.contains((short)93));
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "v?F,i(loBd!yT");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      JSONArray jSONArray1 = jSONArray0.putAll((Iterable<?>) priorityQueue0);
      assertEquals(1, priorityQueue0.size());
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertTrue(priorityQueue0.contains((short)93));
      
      int int0 = 1890;
      JSONArray jSONArray2 = jSONArray1.put((int) (short)93, 1890);
      assertEquals(1, priorityQueue0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(94, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(94, jSONArray1.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(94, jSONArray2.length());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertNotNull(jSONArray2);
      assertTrue(priorityQueue0.contains((short)93));
      
      try { 
        jSONArray0.getJSONObject((short)93);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[93] is not a JSONObject (class java.lang.Integer : 1890).
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) null);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      int int0 = (-2);
      Object object0 = jSONArray0.remove((-2));
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNull(object0);
      
      String string0 = "[w\"LmjX1'(Bka`A@GDh";
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray("[w\"LmjX1'(Bka`A@GDh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or ']' at 3 [character 4 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      int int0 = 2242;
      HashSet<Locale.LanguageRange> hashSet0 = new HashSet<Locale.LanguageRange>(2242);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(2242, (double) 2242);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2243, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(2243, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      int int1 = (-2823);
      Iterator<Object> iterator0 = jSONArray0.iterator();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2243, jSONArray0.length());
      assertSame(jSONArray0, jSONArray1);
      assertNotNull(iterator0);
      
      BigInteger bigInteger0 = jSONArray0.getBigInteger(2242);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2243, jSONArray0.length());
      assertEquals((short)2242, bigInteger0.shortValue());
      assertEquals((byte) (-62), bigInteger0.byteValue());
      assertSame(jSONArray0, jSONArray1);
      assertNotNull(bigInteger0);
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      try { 
        jSONArray0.getNumber(111);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[111] is not a number (class org.json.JSONObject$Null : null).
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      LinkedHashSet<DataTruncation> linkedHashSet0 = new LinkedHashSet<DataTruncation>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      JSONArray jSONArray1 = jSONArray0.putAll((Collection<?>) linkedHashSet0);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      JSONArray jSONArray2 = jSONArray1.put(1.0F);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertNotNull(jSONArray2);
      
      String string0 = jSONArray1.optString(607);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertNotNull(string0);
      assertEquals("", string0);
      
      try { 
        jSONArray2.toJSONObject(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a String (class java.lang.Float : 1.0).
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      HashMap<BatchUpdateException, SQLTimeoutException> hashMap0 = new HashMap<BatchUpdateException, SQLTimeoutException>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONArray jSONArray1 = jSONArray0.put((Map<?, ?>) hashMap0);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      JSONArray jSONArray2 = jSONArray0.put((Collection<?>) null);
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(2, jSONArray2.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertNotNull(jSONArray2);
      
      boolean boolean1 = jSONArray1.similar(jSONArray0);
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string0 = jSONArray2.toString(538);
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(2, jSONArray2.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertNotNull(string0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      
      BigDecimal bigDecimal2 = bigDecimal0.multiply(bigDecimal1);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)100, bigDecimal2.shortValue());
      assertEquals((byte)100, bigDecimal2.byteValue());
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotNull(bigDecimal2);
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      
      BigDecimal bigDecimal3 = jSONArray0.optBigDecimal(114, bigDecimal0);
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((short)10, bigDecimal3.shortValue());
      assertEquals((byte)10, bigDecimal3.byteValue());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal3, bigDecimal2);
      assertSame(bigDecimal3, bigDecimal0);
      assertSame(bigDecimal3, bigDecimal1);
      assertNotNull(bigDecimal3);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal3.equals((Object)bigDecimal2));
      
      JSONArray jSONArray3 = jSONArray2.put(1264, (Map<?, ?>) hashMap0);
      assertEquals(1265, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(1265, jSONArray2.length());
      assertEquals(1265, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray2);
      assertNotNull(jSONArray3);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(string0));
      
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      assertEquals(0, linkedList0.size());
      assertNotNull(jSONPointer0);
      assertFalse(linkedList0.contains(string0));
      
      JSONArray jSONArray4 = (JSONArray)jSONArray2.query(jSONPointer0);
      assertEquals(1265, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(1265, jSONArray2.length());
      assertEquals(0, linkedList0.size());
      assertEquals(1265, jSONArray4.length());
      assertFalse(jSONArray4.isEmpty());
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray4);
      assertSame(jSONArray4, jSONArray2);
      assertSame(jSONArray4, jSONArray0);
      assertSame(jSONArray4, jSONArray3);
      assertSame(jSONArray4, jSONArray1);
      assertNotNull(jSONArray4);
      assertFalse(linkedList0.contains(string0));
      
      JSONArray jSONArray5 = new JSONArray(jSONArray3);
      assertEquals(1265, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(1265, jSONArray2.length());
      assertEquals(1265, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(1265, jSONArray5.length());
      assertFalse(jSONArray5.isEmpty());
      assertNotNull(jSONArray5);
      assertFalse(jSONArray5.equals((Object)jSONArray4));
      assertFalse(jSONArray5.equals((Object)jSONArray2));
      assertFalse(jSONArray5.equals((Object)jSONArray0));
      assertFalse(jSONArray5.equals((Object)jSONArray3));
      assertFalse(jSONArray5.equals((Object)jSONArray1));
      
      try { 
        jSONArray1.getJSONObject((-1378));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1378] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Vector<SQLFeatureNotSupportedException> vector0 = new Vector<SQLFeatureNotSupportedException>();
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, "    verify(mock, atLeastOnce()).someMethod();", 22);
      assertEquals(22, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("    verify(mock, atLeastOnce()).someMethod();", sQLIntegrityConstraintViolationException0.getSQLState());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("K}_'8T;$4YR", (String) null, sQLIntegrityConstraintViolationException0);
      assertEquals(22, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("    verify(mock, atLeastOnce()).someMethod();", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: K}_'8T;$4YR", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("K}_'8T;$4YR", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      SQLWarning sQLWarning0 = new SQLWarning(sQLFeatureNotSupportedException0);
      assertEquals(22, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("    verify(mock, atLeastOnce()).someMethod();", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: K}_'8T;$4YR", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("K}_'8T;$4YR", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: K}_'8T;$4YR", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: java.sql.SQLFeatureNotSupportedException: K}_'8T;$4YR", sQLWarning0.toString());
      assertNotNull(sQLWarning0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(sQLWarning0);
      assertEquals(22, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("    verify(mock, atLeastOnce()).someMethod();", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: K}_'8T;$4YR", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("K}_'8T;$4YR", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: K}_'8T;$4YR", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: java.sql.SQLFeatureNotSupportedException: K}_'8T;$4YR", sQLWarning0.toString());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertNull(sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLWarning: java.sql.SQLFeatureNotSupportedException: K}_'8T;$4YR", sQLFeatureNotSupportedException1.toString());
      assertEquals("java.sql.SQLWarning: java.sql.SQLFeatureNotSupportedException: K}_'8T;$4YR", sQLFeatureNotSupportedException1.getMessage());
      assertNotNull(sQLFeatureNotSupportedException1);
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      
      boolean boolean0 = vector0.add(sQLFeatureNotSupportedException1);
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[java.sql.SQLFeatureNotSupportedException: java.sql.SQLWarning: java.sql.SQLFeatureNotSupportedException: K}_'8T;$4YR]", vector0.toString());
      assertEquals(22, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("    verify(mock, atLeastOnce()).someMethod();", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: K}_'8T;$4YR", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("K}_'8T;$4YR", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: K}_'8T;$4YR", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: java.sql.SQLFeatureNotSupportedException: K}_'8T;$4YR", sQLWarning0.toString());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertNull(sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLWarning: java.sql.SQLFeatureNotSupportedException: K}_'8T;$4YR", sQLFeatureNotSupportedException1.toString());
      assertEquals("java.sql.SQLWarning: java.sql.SQLFeatureNotSupportedException: K}_'8T;$4YR", sQLFeatureNotSupportedException1.getMessage());
      assertNotSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
      assertNotSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException0);
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertTrue(boolean0);
      assertTrue(vector0.contains(sQLFeatureNotSupportedException1));
      assertFalse(vector0.contains(sQLFeatureNotSupportedException0));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ArrayList<SQLNonTransientException> arrayList0 = new ArrayList<SQLNonTransientException>(vector0);
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[java.sql.SQLFeatureNotSupportedException: java.sql.SQLWarning: java.sql.SQLFeatureNotSupportedException: K}_'8T;$4YR]", vector0.toString());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertTrue(vector0.contains(sQLFeatureNotSupportedException1));
      assertFalse(vector0.contains(sQLFeatureNotSupportedException0));
      
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) arrayList0);
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[java.sql.SQLFeatureNotSupportedException: java.sql.SQLWarning: java.sql.SQLFeatureNotSupportedException: K}_'8T;$4YR]", vector0.toString());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      assertTrue(vector0.contains(sQLFeatureNotSupportedException1));
      assertFalse(vector0.contains(sQLFeatureNotSupportedException0));
      
      JSONArray jSONArray1 = jSONArray0.put(93, (-1.0F));
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[java.sql.SQLFeatureNotSupportedException: java.sql.SQLWarning: java.sql.SQLFeatureNotSupportedException: K}_'8T;$4YR]", vector0.toString());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(94, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(94, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertTrue(vector0.contains(sQLFeatureNotSupportedException1));
      assertFalse(vector0.contains(sQLFeatureNotSupportedException0));
      
      long long0 = jSONArray1.optLong(2181, (long) 93);
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[java.sql.SQLFeatureNotSupportedException: java.sql.SQLWarning: java.sql.SQLFeatureNotSupportedException: K}_'8T;$4YR]", vector0.toString());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(94, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(94, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(93L, long0);
      assertTrue(vector0.contains(sQLFeatureNotSupportedException1));
      assertFalse(vector0.contains(sQLFeatureNotSupportedException0));
      
      String string0 = jSONArray1.join("miJm<0;k;0Ap@^");
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[java.sql.SQLFeatureNotSupportedException: java.sql.SQLWarning: java.sql.SQLFeatureNotSupportedException: K}_'8T;$4YR]", vector0.toString());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(94, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(94, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(string0);
      assertTrue(vector0.contains(sQLFeatureNotSupportedException1));
      assertFalse(vector0.contains(sQLFeatureNotSupportedException0));
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Cannot instantiate @InjectMocks field named '");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = 44;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      JSONArray jSONArray2 = jSONArray0.put(1260, 44);
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[java.sql.SQLFeatureNotSupportedException: java.sql.SQLWarning: java.sql.SQLFeatureNotSupportedException: K}_'8T;$4YR]", vector0.toString());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1261, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1261, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertNotNull(jSONArray2);
      assertTrue(vector0.contains(sQLFeatureNotSupportedException1));
      assertFalse(vector0.contains(sQLFeatureNotSupportedException0));
      
      int int1 = jSONArray2.getInt(1260);
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[java.sql.SQLFeatureNotSupportedException: java.sql.SQLWarning: java.sql.SQLFeatureNotSupportedException: K}_'8T;$4YR]", vector0.toString());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1261, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1261, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertTrue(int1 == int0);
      assertEquals(44, int1);
      assertTrue(vector0.contains(sQLFeatureNotSupportedException1));
      assertFalse(vector0.contains(sQLFeatureNotSupportedException0));
      
      boolean boolean2 = arrayList0.add((SQLNonTransientException) sQLFeatureNotSupportedException1);
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[java.sql.SQLFeatureNotSupportedException: java.sql.SQLWarning: java.sql.SQLFeatureNotSupportedException: K}_'8T;$4YR]", vector0.toString());
      assertEquals(22, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("    verify(mock, atLeastOnce()).someMethod();", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: K}_'8T;$4YR", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("K}_'8T;$4YR", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: K}_'8T;$4YR", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: java.sql.SQLFeatureNotSupportedException: K}_'8T;$4YR", sQLWarning0.toString());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertNull(sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLWarning: java.sql.SQLFeatureNotSupportedException: K}_'8T;$4YR", sQLFeatureNotSupportedException1.toString());
      assertEquals("java.sql.SQLWarning: java.sql.SQLFeatureNotSupportedException: K}_'8T;$4YR", sQLFeatureNotSupportedException1.getMessage());
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
      assertNotSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertTrue(boolean2);
      assertTrue(vector0.contains(sQLFeatureNotSupportedException1));
      assertFalse(vector0.contains(sQLFeatureNotSupportedException0));
      
      JSONArray jSONArray3 = jSONArray1.putAll((Collection<?>) vector0);
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[java.sql.SQLFeatureNotSupportedException: java.sql.SQLWarning: java.sql.SQLFeatureNotSupportedException: K}_'8T;$4YR]", vector0.toString());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(1262, jSONArray3.length());
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1262, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1262, jSONArray1.length());
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray2);
      assertNotNull(jSONArray3);
      assertTrue(vector0.contains(sQLFeatureNotSupportedException1));
      assertFalse(vector0.contains(sQLFeatureNotSupportedException0));
      
      JSONArray jSONArray4 = jSONArray3.put(false);
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[java.sql.SQLFeatureNotSupportedException: java.sql.SQLWarning: java.sql.SQLFeatureNotSupportedException: K}_'8T;$4YR]", vector0.toString());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(1263, jSONArray3.length());
      assertEquals(1263, jSONArray4.length());
      assertFalse(jSONArray4.isEmpty());
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1263, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1263, jSONArray1.length());
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray4);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray4, jSONArray3);
      assertSame(jSONArray4, jSONArray0);
      assertSame(jSONArray4, jSONArray1);
      assertSame(jSONArray4, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray4);
      assertSame(jSONArray1, jSONArray2);
      assertNotNull(jSONArray4);
      assertTrue(vector0.contains(sQLFeatureNotSupportedException1));
      assertFalse(vector0.contains(sQLFeatureNotSupportedException0));
      
      double double0 = jSONArray0.optDouble(666);
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[java.sql.SQLFeatureNotSupportedException: java.sql.SQLWarning: java.sql.SQLFeatureNotSupportedException: K}_'8T;$4YR]", vector0.toString());
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1263, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray2);
      assertEquals(Double.NaN, double0, 0.01);
      assertTrue(vector0.contains(sQLFeatureNotSupportedException1));
      assertFalse(vector0.contains(sQLFeatureNotSupportedException0));
      
      long long1 = jSONArray2.getLong(1260);
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[java.sql.SQLFeatureNotSupportedException: java.sql.SQLWarning: java.sql.SQLFeatureNotSupportedException: K}_'8T;$4YR]", vector0.toString());
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1263, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1263, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray2, jSONArray4);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray1);
      assertFalse(long1 == long0);
      assertEquals(44L, long1);
      assertTrue(vector0.contains(sQLFeatureNotSupportedException1));
      assertFalse(vector0.contains(sQLFeatureNotSupportedException0));
      
      // Undeclared exception!
      try { 
        jSONArray2.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      TreeSet<SQLFeatureNotSupportedException> treeSet0 = new TreeSet<SQLFeatureNotSupportedException>();
      assertNotNull(treeSet0);
      
      HashSet<SQLFeatureNotSupportedException> hashSet0 = new HashSet<SQLFeatureNotSupportedException>(treeSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(957, 0.0F);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(958, jSONArray0.length());
      assertEquals(958, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      int int0 = jSONArray0.optInt(948);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(958, jSONArray0.length());
      assertSame(jSONArray0, jSONArray1);
      assertEquals(0, int0);
      
      int int1 = 1288;
      try { 
        jSONArray1.getLong(934);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[934] is not a long (class org.json.JSONObject$Null : null).
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("Tn");
      assertEquals("Tn", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: Tn", sQLWarning0.toString());
      assertNotNull(sQLWarning0);
      
      SQLException sQLException0 = new SQLException("false", "false", (-298), sQLWarning0);
      assertEquals("Tn", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: Tn", sQLWarning0.toString());
      assertEquals((-298), sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: false", sQLException0.toString());
      assertEquals("false", sQLException0.getMessage());
      assertEquals("false", sQLException0.getSQLState());
      assertNotNull(sQLException0);
      
      SQLDataException sQLDataException0 = new SQLDataException("false", sQLException0);
      assertEquals("Tn", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: Tn", sQLWarning0.toString());
      assertEquals((-298), sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: false", sQLException0.toString());
      assertEquals("false", sQLException0.getMessage());
      assertEquals("false", sQLException0.getSQLState());
      assertEquals("false", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: false", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertNotNull(sQLDataException0);
      
      SQLException sQLException1 = (SQLException)sQLException0.fillInStackTrace();
      assertEquals("Tn", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: Tn", sQLWarning0.toString());
      assertEquals((-298), sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: false", sQLException0.toString());
      assertEquals("false", sQLException0.getMessage());
      assertEquals("false", sQLException0.getSQLState());
      assertEquals("false", sQLException1.getMessage());
      assertEquals("false", sQLException1.getSQLState());
      assertEquals("java.sql.SQLException: false", sQLException1.toString());
      assertEquals((-298), sQLException1.getErrorCode());
      assertSame(sQLException0, sQLException1);
      assertSame(sQLException1, sQLException0);
      assertNotNull(sQLException1);
      
      Throwable[] throwableArray0 = sQLDataException0.getSuppressed();
      assertEquals("Tn", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: Tn", sQLWarning0.toString());
      assertEquals((-298), sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: false", sQLException0.toString());
      assertEquals("false", sQLException0.getMessage());
      assertEquals("false", sQLException0.getSQLState());
      assertEquals("false", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: false", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertSame(sQLException0, sQLException1);
      assertEquals(0, throwableArray0.length);
      assertNotNull(throwableArray0);
      
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertTrue(jSONArray1.isEmpty());
      assertEquals(0, jSONArray1.length());
      assertNotNull(jSONArray1);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      
      float float0 = jSONArray0.optFloat(44);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotSame(jSONArray0, jSONArray1);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertEquals(Float.NaN, float0, 0.01F);
      
      JSONArray jSONArray2 = jSONArray1.put(0, 1L);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertEquals(1, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertNotSame(jSONArray2, jSONArray0);
      assertNotNull(jSONArray2);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNotNull(sQLClientInfoException0);
      
      long long0 = jSONArray0.optLong(0);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertEquals(0L, long0);
      
      Throwable[] throwableArray0 = sQLClientInfoException0.getSuppressed();
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, throwableArray0.length);
      assertNotNull(throwableArray0);
      
      sQLClientInfoException0.setNextException((SQLException) null);
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      
      DataTruncation dataTruncation0 = new DataTruncation(0, false, true, 0, 0, sQLClientInfoException0);
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertNotNull(dataTruncation0);
      
      JSONArray jSONArray3 = jSONArray0.putAll((Object) dataTruncation0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(2, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertSame(jSONArray0, jSONArray3);
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray0);
      assertNotSame(jSONArray3, jSONArray1);
      assertNotNull(jSONArray3);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray3.equals((Object)jSONArray2));
      assertFalse(jSONArray3.equals((Object)jSONArray1));
      
      float float1 = 0.0F;
      JSONArray jSONArray4 = jSONArray2.put(0.0F);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(2, jSONArray2.length());
      assertFalse(jSONArray4.isEmpty());
      assertEquals(2, jSONArray4.length());
      assertSame(jSONArray0, jSONArray3);
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray0, jSONArray4);
      assertNotSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray4);
      assertSame(jSONArray2, jSONArray1);
      assertNotSame(jSONArray2, jSONArray0);
      assertNotSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray4);
      assertNotSame(jSONArray4, jSONArray0);
      assertNotSame(jSONArray4, jSONArray3);
      assertSame(jSONArray4, jSONArray2);
      assertSame(jSONArray4, jSONArray1);
      assertNotNull(jSONArray4);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(jSONArray1.equals((Object)jSONArray3));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray3));
      assertFalse(jSONArray4.equals((Object)jSONArray0));
      assertFalse(jSONArray4.equals((Object)jSONArray3));
      
      List<Object> list0 = jSONArray0.toList();
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertSame(jSONArray0, jSONArray3);
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray0, jSONArray4);
      assertNotNull(list0);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray0.equals((Object)jSONArray4));
      assertFalse(list0.contains(false));
      
      DataTruncation dataTruncation1 = (DataTruncation)jSONArray0.remove(0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals("01004", dataTruncation1.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation1.toString());
      assertEquals(0, dataTruncation1.getErrorCode());
      assertEquals("Data truncation", dataTruncation1.getMessage());
      assertSame(jSONArray0, jSONArray3);
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray0, jSONArray4);
      assertSame(dataTruncation1, dataTruncation0);
      assertNotNull(dataTruncation1);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray0.equals((Object)jSONArray4));
      
      int int0 = 0;
      String string0 = jSONArray3.toString((-701));
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(1, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertSame(jSONArray0, jSONArray3);
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray0, jSONArray4);
      assertSame(dataTruncation0, dataTruncation1);
      assertNotSame(jSONArray3, jSONArray2);
      assertNotSame(jSONArray3, jSONArray4);
      assertSame(jSONArray3, jSONArray0);
      assertNotSame(jSONArray3, jSONArray1);
      assertNotNull(string0);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray0.equals((Object)jSONArray4));
      assertFalse(jSONArray3.equals((Object)jSONArray2));
      assertFalse(jSONArray3.equals((Object)jSONArray4));
      assertFalse(jSONArray3.equals((Object)jSONArray1));
      
      boolean boolean0 = jSONArray0.optBoolean(11);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertSame(jSONArray0, jSONArray3);
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray0, jSONArray4);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray0.equals((Object)jSONArray4));
      assertFalse(boolean0);
      
      try { 
        jSONArray3.getJSONObject(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a JSONObject (class java.sql.SQLClientInfoException).
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      int int0 = 959;
      JSONArray jSONArray1 = jSONArray0.put(959, 634L);
      assertEquals(960, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(960, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      Spliterator<Object> spliterator0 = jSONArray1.spliterator();
      assertEquals(960, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(960, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(spliterator0);
      
      JSONArray jSONArray2 = jSONArray0.put((-2416L));
      assertEquals(961, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(961, jSONArray2.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertNotNull(jSONArray2);
      
      JSONArray jSONArray3 = jSONArray1.put((-2416L));
      assertEquals(962, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(962, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(962, jSONArray3.length());
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray1);
      assertNotNull(jSONArray3);
      
      double double0 = jSONArray0.optDouble(959);
      assertEquals(962, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertEquals(634.0, double0, 0.01);
      
      JSONArray jSONArray4 = jSONArray3.put(0L);
      assertEquals(963, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(963, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(963, jSONArray3.length());
      assertEquals(963, jSONArray4.length());
      assertFalse(jSONArray4.isEmpty());
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray4);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray3, jSONArray4);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray4, jSONArray3);
      assertSame(jSONArray4, jSONArray1);
      assertSame(jSONArray4, jSONArray0);
      assertSame(jSONArray4, jSONArray2);
      assertNotNull(jSONArray4);
      
      Number number0 = jSONArray2.optNumber(0);
      assertEquals(963, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(963, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray4);
      assertNull(number0);
      
      try { 
        jSONArray1.getInt(93);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[93] is not a int (class org.json.JSONObject$Null : null).
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(1395.0F);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = jSONArray0.similar(jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      JSONArray jSONArray2 = jSONArray1.put(8, (-26L));
      assertFalse(jSONArray0.isEmpty());
      assertEquals(9, jSONArray0.length());
      assertEquals(9, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(9, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertNotNull(jSONArray2);
      
      JSONArray jSONArray3 = jSONArray0.putAll((Object) jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(18, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(18, jSONArray1.length());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(18, jSONArray3.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray0);
      assertNotNull(jSONArray3);
      
      SQLWarning sQLWarning0 = new SQLWarning((Throwable) null);
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNotNull(sQLWarning0);
      
      long long0 = jSONArray0.optLong(1415);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(18, jSONArray0.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertEquals(0L, long0);
      
      JSONArray jSONArray4 = jSONArray0.putAll((Object) sQLWarning0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(19, jSONArray0.length());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertFalse(jSONArray4.isEmpty());
      assertEquals(19, jSONArray4.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray4, jSONArray1);
      assertSame(jSONArray4, jSONArray0);
      assertSame(jSONArray4, jSONArray2);
      assertSame(jSONArray4, jSONArray3);
      assertNotNull(jSONArray4);
      
      int int0 = 11;
      try { 
        jSONArray0.getDouble(11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[11] is not a double (class org.json.JSONObject$Null : null).
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(1395.0F);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = jSONArray0.similar(jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      JSONArray jSONArray2 = jSONArray1.put(8, (-26L));
      assertEquals(9, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(9, jSONArray1.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(9, jSONArray2.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertNotNull(jSONArray2);
      
      float float0 = jSONArray2.optFloat(8, (float) (-26L));
      assertEquals(9, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(9, jSONArray1.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(9, jSONArray2.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertEquals((-26.0F), float0, 0.01F);
      
      JSONArray jSONArray3 = jSONArray0.putAll((Object) jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(18, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(18, jSONArray1.length());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(18, jSONArray3.length());
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray1);
      assertNotNull(jSONArray3);
      
      boolean boolean3 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "4m4'");
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      SQLWarning sQLWarning0 = new SQLWarning((Throwable) null);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertNotNull(sQLWarning0);
      
      long long0 = jSONArray0.optLong(1415);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(18, jSONArray0.length());
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertEquals(0L, long0);
      
      JSONArray jSONArray4 = jSONArray0.putAll((Object) sQLWarning0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(19, jSONArray0.length());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertFalse(jSONArray4.isEmpty());
      assertEquals(19, jSONArray4.length());
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray4, jSONArray0);
      assertSame(jSONArray4, jSONArray1);
      assertSame(jSONArray4, jSONArray2);
      assertSame(jSONArray4, jSONArray3);
      assertNotNull(jSONArray4);
      
      int int0 = 11;
      try { 
        jSONArray0.getDouble(11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[11] is not a double (class org.json.JSONObject$Null : null).
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      try { 
        jSONArray0.put((-1), (-1399));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.optJSONArray(609);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      LinkedHashSet<Double> linkedHashSet0 = new LinkedHashSet<Double>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = linkedHashSet0.add((Double) null);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedHashSet0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.putAll((Collection<?>) linkedHashSet0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      boolean boolean2 = jSONArray0.optBoolean(5592);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      JSONArray jSONArray2 = jSONArray1.put(0.0F);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(3, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(3, jSONArray2.length());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertNotNull(jSONArray2);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      JSONArray jSONArray3 = jSONArray2.put(258, 0.0F);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(259, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(259, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(259, jSONArray2.length());
      assertEquals(259, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray0);
      assertNotNull(jSONArray3);
      
      String string0 = jSONArray0.join("Z28b9.a(tOP0");
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(259, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte) (-14);
      byteArray0[4] = (byte)91;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)93;
      byteArray0[7] = (byte)91;
      byteArray0[8] = (byte)95;
      boolean boolean3 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(9, byteArray0.length);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      assertArrayEquals(new byte[] {(byte) (-14), (byte) (-14), (byte)0, (byte)5, (byte)48, (byte)5, (byte)93, (byte)91, (byte)95}, byteArray0);
      
      LinkedHashSet linkedHashSet1 = (LinkedHashSet)linkedHashSet0.clone();
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet1.isEmpty());
      assertEquals(1, linkedHashSet1.size());
      assertNotNull(linkedHashSet1);
      
      try { 
        jSONArray3.toJSONObject(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a String (class org.json.JSONObject$Null : null).
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      
      float float0 = jSONArray0.optFloat(44);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotSame(jSONArray0, jSONArray1);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertEquals(Float.NaN, float0, 0.01F);
      
      JSONArray jSONArray2 = new JSONArray();
      assertEquals(0, jSONArray2.length());
      assertTrue(jSONArray2.isEmpty());
      assertNotNull(jSONArray2);
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      assertNotNull(sQLClientInfoException0);
      
      Throwable[] throwableArray0 = sQLClientInfoException0.getSuppressed();
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, throwableArray0.length);
      assertNotNull(throwableArray0);
      
      sQLClientInfoException0.setNextException((SQLException) null);
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      
      DataTruncation dataTruncation0 = new DataTruncation(0, false, true, 0, 0, sQLClientInfoException0);
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertNotNull(dataTruncation0);
      
      float float1 = jSONArray2.optFloat(0);
      assertEquals(0, jSONArray2.length());
      assertTrue(jSONArray2.isEmpty());
      assertNotSame(jSONArray2, jSONArray1);
      assertNotSame(jSONArray2, jSONArray0);
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertEquals(float1, float0, 0.01F);
      assertEquals(Float.NaN, float1, 0.01F);
      
      String string0 = jSONArray2.join("JSONArray");
      assertEquals(0, jSONArray2.length());
      assertTrue(jSONArray2.isEmpty());
      assertNotSame(jSONArray2, jSONArray1);
      assertNotSame(jSONArray2, jSONArray0);
      assertNotNull(string0);
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertEquals("", string0);
      
      JSONArray jSONArray3 = jSONArray0.putAll((Object) dataTruncation0);
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(2, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertSame(jSONArray0, jSONArray3);
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray0, jSONArray1);
      assertSame(jSONArray3, jSONArray0);
      assertNotSame(jSONArray3, jSONArray1);
      assertNotSame(jSONArray3, jSONArray2);
      assertNotNull(jSONArray3);
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray3.equals((Object)jSONArray1));
      assertFalse(jSONArray3.equals((Object)jSONArray2));
      
      JSONArray jSONArray4 = jSONArray2.put(0.0F);
      assertFalse(jSONArray2.isEmpty());
      assertEquals(1, jSONArray2.length());
      assertFalse(jSONArray4.isEmpty());
      assertEquals(1, jSONArray4.length());
      assertNotSame(jSONArray2, jSONArray3);
      assertNotSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray4);
      assertNotSame(jSONArray2, jSONArray0);
      assertNotSame(jSONArray4, jSONArray1);
      assertNotSame(jSONArray4, jSONArray0);
      assertNotSame(jSONArray4, jSONArray3);
      assertSame(jSONArray4, jSONArray2);
      assertNotNull(jSONArray4);
      assertFalse(jSONArray2.equals((Object)jSONArray3));
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertFalse(jSONArray4.equals((Object)jSONArray1));
      assertFalse(jSONArray4.equals((Object)jSONArray0));
      assertFalse(jSONArray4.equals((Object)jSONArray3));
      
      List<Object> list0 = jSONArray0.toList();
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertSame(jSONArray0, jSONArray3);
      assertNotSame(jSONArray0, jSONArray4);
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray0, jSONArray1);
      assertNotNull(list0);
      assertFalse(jSONArray0.equals((Object)jSONArray4));
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(list0.contains(true));
      
      boolean boolean0 = jSONArray1.isEmpty();
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray3);
      assertNotSame(jSONArray0, jSONArray4);
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray1, jSONArray4);
      assertNotSame(jSONArray1, jSONArray3);
      assertFalse(jSONArray0.equals((Object)jSONArray4));
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray1.equals((Object)jSONArray2));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(jSONArray1.equals((Object)jSONArray4));
      assertFalse(jSONArray1.equals((Object)jSONArray3));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "E+u>J!");
      assertFalse(boolean0);
      
      JSONArray jSONArray0 = new JSONArray(2297);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = jSONArray0.optBigInteger(2297, bigInteger0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double double0 = jSONArray0.optDouble(2297, (-782.046528081565));
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertEquals((-782.046528081565), double0, 0.01);
      
      Class<Answers> class0 = Answers.class;
      jSONArray0.optEnum(class0, 433);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      
      try { 
        jSONArray0.getBigInteger(2297);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[2297] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      Iterator<Object> iterator0 = jSONArray0.iterator();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(iterator0);
      
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray0);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNull(jSONObject0);
      
      int int0 = 615;
      boolean boolean0 = jSONArray0.isNull(615);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertTrue(boolean0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("You have a NullPointerException here:", "V+sJ1o", 615);
      assertEquals(615, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("V+sJ1o", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("You have a NullPointerException here:", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: You have a NullPointerException here:", sQLFeatureNotSupportedException0.toString());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      JSONArray jSONArray1 = jSONArray0.putAll((Object) sQLFeatureNotSupportedException0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(615, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("V+sJ1o", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("You have a NullPointerException here:", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: You have a NullPointerException here:", sQLFeatureNotSupportedException0.toString());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      String string0 = jSONArray1.toString();
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(615, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("V+sJ1o", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("You have a NullPointerException here:", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: You have a NullPointerException here:", sQLFeatureNotSupportedException0.toString());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(string0);
      
      Object object0 = jSONArray0.remove(615);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertSame(jSONArray0, jSONArray1);
      assertNull(object0);
      
      JSONArray jSONArray2 = jSONArray1.put((Object) jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertEquals(615, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("V+sJ1o", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("You have a NullPointerException here:", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: You have a NullPointerException here:", sQLFeatureNotSupportedException0.toString());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(2, jSONArray2.length());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertNotNull(jSONArray2);
      
      JSONPointer jSONPointer0 = null;
      try {
        jSONPointer0 = new JSONPointer("You have a NullPointerException here:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1573);
      jSONArray1.iterator();
      jSONArray0.optJSONObject(1573);
      jSONArray1.opt(1573);
      int int0 = 617;
      jSONArray0.isNull(617);
      jSONArray1.put((float) 617);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Zk$%eC.H)kH", "V+sJ1o");
      JSONArray jSONArray2 = jSONArray1.putAll((Object) sQLFeatureNotSupportedException0);
      jSONArray2.toString();
      Object object0 = new Object();
      sQLFeatureNotSupportedException0.getSuppressed();
      JSONArray jSONArray3 = jSONArray2.put((Object) jSONArray0);
      JSONPointer.builder();
      JSONArray jSONArray4 = jSONArray1.put(617, (Collection<?>) null);
      jSONArray3.isEmpty();
      StringWriter stringWriter0 = new StringWriter(617);
      jSONArray4.optDouble(1573, (double) 617);
      StringWriter stringWriter1 = stringWriter0.append('.');
      jSONArray2.put((double) 617);
      try { 
        jSONArray4.write((Writer) stringWriter1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to write JSONArray value at index: 3
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1587);
      jSONArray1.iterator();
      jSONArray0.optJSONObject(1587);
      jSONArray1.opt(1587);
      int int0 = 606;
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Zk$%eC.H)kH", "V+sJ1o");
      JSONArray jSONArray2 = jSONArray1.putAll((Object) sQLFeatureNotSupportedException0);
      jSONArray2.toString();
      Object object0 = new Object();
      JSONArray jSONArray3 = jSONArray2.put((Object) jSONArray0);
      JSONPointer.builder();
      jSONArray1.put(606, (Collection<?>) null);
      try { 
        jSONArray3.getBigInteger(606);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[606] is not a BigInteger (class org.json.JSONArray).
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(8188);
      jSONArray0.put(8188, (float) 8188);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        jSONArray0.getFloat(93);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[93] is not a float (class org.json.JSONObject$Null : null).
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      ArrayDeque<SQLTimeoutException> arrayDeque0 = new ArrayDeque<SQLTimeoutException>();
      SQLDataException sQLDataException0 = new SQLDataException(").");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(432);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) ").";
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) sQLDataException0;
      objectArray0[4] = (Object) byteArrayOutputStream0;
      objectArray0[5] = (Object) arrayDeque0;
      objectArray0[5] = (Object) byteArrayOutputStream0;
      objectArray0[7] = (Object) sQLRecoverableException0;
      PrintStream printStream0 = mockPrintStream0.format("_e~\"BGa$/oH", objectArray0);
      sQLRecoverableException0.printStackTrace(printStream0);
      sQLRecoverableException0.getSuppressed();
      sQLDataException0.addSuppressed(sQLRecoverableException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(").", ").", 432, sQLDataException0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ").");
      arrayDeque0.add(sQLTimeoutException0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) arrayDeque0);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      jSONArray1.optBoolean(0, true);
      jSONArray1.optFloat(0, (-166.505F));
      jSONArray1.optString(0, " (null).");
      JSONArray jSONArray2 = jSONArray1.put(false);
      try { 
        jSONArray2.getBigDecimal(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a BigDecimal (class java.lang.String : java.sql.SQLTimeoutException@0000000001).
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      ArrayDeque<SQLTimeoutException> arrayDeque0 = new ArrayDeque<SQLTimeoutException>();
      SQLDataException sQLDataException0 = new SQLDataException(").");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(412);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) ").";
      objectArray0[1] = (Object) "hy/MqSH3U~ESI&~";
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) byteArrayOutputStream0;
      objectArray0[5] = (Object) arrayDeque0;
      sQLRecoverableException0.fillInStackTrace();
      objectArray0[4] = (Object) byteArrayOutputStream0;
      objectArray0[7] = (Object) sQLRecoverableException0;
      PrintStream printStream0 = mockPrintStream0.format("_e~\"BGa$/oH", objectArray0);
      sQLRecoverableException0.printStackTrace(printStream0);
      sQLDataException0.addSuppressed(sQLRecoverableException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(").", "hy/MqSH3U~ESI&~", 412, sQLDataException0);
      arrayDeque0.add(sQLTimeoutException0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) arrayDeque0);
      jSONArray0.put(412, true);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      jSONArray1.optBoolean(0, true);
      jSONArray1.optDouble(412, (-1.0));
      jSONArray1.optFloat((-431), (-166.505F));
      jSONArray0.opt(0);
      jSONArray0.optBoolean(412);
      jSONArray1.optString((-431), " (null).");
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      try { 
        jSONArray1.getEnum(class0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a enum of type java.io.StringWriter@0000000011 (class java.lang.String : java.sql.SQLTimeoutException@0000000001).
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
      ArrayDeque<SQLTransactionRollbackException> arrayDeque1 = arrayDeque0.clone();
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) arrayDeque1);
      jSONArray0.optBoolean(11, true);
      JSONArray jSONArray1 = jSONArray0.put(11, (float) (-583));
      JSONTokener jSONTokener0 = new JSONTokener("Y1fzc;/\"HpT+Zr");
      JSONException jSONException0 = jSONTokener0.syntaxError("number");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Y1fzc;/\"HpT+Zr", jSONException0);
      arrayDeque0.offer(sQLTransactionRollbackException0);
      sQLTransactionRollbackException0.getStackTrace();
      HashMap<SQLIntegrityConstraintViolationException, SQLException> hashMap0 = new HashMap<SQLIntegrityConstraintViolationException, SQLException>();
      JSONArray jSONArray2 = jSONArray1.put(0, (Map<?, ?>) hashMap0);
      jSONArray2.put(true);
      jSONArray0.toList();
      jSONArray1.getFloat(11);
      jSONArray1.optLong((-583));
      JSONArray jSONArray3 = new JSONArray(11);
      jSONArray1.getNumber(11);
      sQLTransactionRollbackException0.fillInStackTrace();
      int int0 = 0;
      jSONArray2.similar(hashMap0);
      String string0 = "";
      try { 
        jSONArray1.getJSONArray(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a JSONArray (class org.json.JSONObject).
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
      ArrayDeque<SQLTransactionRollbackException> arrayDeque1 = new ArrayDeque<SQLTransactionRollbackException>();
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) arrayDeque1);
      jSONArray0.optBoolean(11, true);
      jSONArray0.optInt((-583), 11);
      JSONArray jSONArray1 = jSONArray0.put(11, 0.0F);
      JSONTokener jSONTokener0 = new JSONTokener("Y1fzc;/\"HpT+Zr");
      JSONException jSONException0 = jSONTokener0.syntaxError("number");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Y1fzc;/\"HpT+Zr", jSONException0);
      arrayDeque0.offer(sQLTransactionRollbackException0);
      sQLTransactionRollbackException0.getStackTrace();
      HashMap<SQLIntegrityConstraintViolationException, SQLException> hashMap0 = new HashMap<SQLIntegrityConstraintViolationException, SQLException>();
      JSONArray jSONArray2 = jSONArray1.put(0, (Map<?, ?>) hashMap0);
      jSONArray0.toList();
      jSONArray1.getFloat(11);
      jSONArray1.optLong((-583));
      JSONArray jSONArray3 = new JSONArray(11);
      jSONArray1.getNumber(11);
      sQLTransactionRollbackException0.spliterator();
      int int0 = 0;
      jSONArray2.similar(hashMap0);
      String string0 = "";
      try { 
        jSONArray1.getJSONArray(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a JSONArray (class org.json.JSONObject).
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 909;
      JSONArray jSONArray1 = jSONArray0.put(909);
      JSONArray jSONArray2 = jSONArray0.putAll(jSONArray1);
      Class<Answers> class0 = Answers.class;
      Answers answers0 = Answers.RETURNS_MOCKS;
      jSONArray2.optEnum(class0, 909, answers0);
      jSONArray2.optFloat((-3348), (float) (-3348));
      jSONArray2.spliterator();
      Class<Answers> class1 = Answers.class;
      try { 
        jSONArray2.getEnum(class1, 909);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[909] is not a enum of type java.io.StringWriter@0000000006 (null).
         //
         verifyException("org.json.JSONArray", e);
      }
  }
}
