/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 06 14:37:14 GMT 2022
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterInputStream;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.TreeSet;
import java.util.Vector;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;
import org.mockito.Answers;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      File file0 = MockFile.createTempFile("R&U`B/uS=;iz4,", "You cannot use argument matchers outside of verification or stubbing.");
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals("uS=;iz4,0You cannot use argument matchers outside of verification or stubbing.", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("/tmp/R&U`B/uS=;iz4,0You cannot use argument matchers outside of verification or stubbing.", file0.toString());
      assertEquals("/tmp/R&U`B", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertNotNull(file0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      assertNotNull(mockPrintWriter0);
      
      JSONObject.indent(mockPrintWriter0, (-622));
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals("uS=;iz4,0You cannot use argument matchers outside of verification or stubbing.", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("/tmp/R&U`B/uS=;iz4,0You cannot use argument matchers outside of verification or stubbing.", file0.toString());
      assertEquals("/tmp/R&U`B", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      Short short0 = new Short((short)75);
      assertEquals((short)75, (short)short0);
      assertNotNull(short0);
      
      boolean boolean0 = JSONObject.isNumberSimilar(bigInteger0, short0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = JSONObject.isNumberSimilar(0, 1972);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-34);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-34), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-34), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(bufferedInputStream0);
      
      int int0 = byteArrayInputStream0.read();
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-34), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, int0);
      
      JSONTokener jSONTokener0 = new JSONTokener(bufferedInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertFalse(jSONTokener0.end());
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-34), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(jSONTokener0);
      
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1307);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      JSONObject.indent(charArrayWriter0, 1307);
      assertEquals(1307, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Answers answers0 = Answers.RETURNS_DEEP_STUBS;
      JSONObject jSONObject0 = new JSONObject(answers0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 0 [character 1 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(6);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      Writer writer0 = JSONObject.writeValue(stringWriter0, "-355.85023791", 6, 1738);
      assertSame(stringWriter0, writer0);
      assertSame(writer0, stringWriter0);
      assertNotNull(writer0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = (JSONObject)jSONObject0.query("");
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      String string0 = jSONObject0.optString((String) null, (String) null);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<SQLException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLTransientConnectionException>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      String string0 = jSONObject0.optString("", "");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      JSONObject jSONObject1 = jSONObject0.put("", map0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      
      String string0 = jSONObject0.optString("");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(48);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      String[] stringArray0 = new String[7];
      JSONObject jSONObject0 = new JSONObject(jSONArray0, stringArray0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(7, stringArray0.length);
      assertNotNull(jSONObject0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add("");
      assertTrue(arrayList0.contains(""));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      JSONPointer jSONPointer0 = new JSONPointer(arrayList0);
      assertTrue(arrayList0.contains(""));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotNull(jSONPointer0);
      
      Object object0 = jSONObject0.optQuery(jSONPointer0);
      assertTrue(arrayList0.contains(""));
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(7, stringArray0.length);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<SQLException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLTransientConnectionException>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = (JSONObject)jSONObject0.optQuery("");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      Number number0 = jSONObject0.optNumber("`U!u}", (Number) null);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(21);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject(stringBuffer0, stringArray0);
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(4, stringArray0.length);
      assertNotNull(jSONObject0);
      
      Float float0 = new Float(Float.NaN);
      assertEquals(Float.NaN, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Number number0 = jSONObject0.optNumber((String) null, (Number) float0);
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(4, stringArray0.length);
      assertEquals(Float.NaN, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(8192);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      Byte byte0 = new Byte((byte)125);
      assertEquals((byte)125, (byte)byte0);
      assertNotNull(byte0);
      
      Number number0 = jSONObject0.optNumber("extraInterfaces() requires at least one interface.", (Number) byte0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals((byte)125, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      JSONObject jSONObject0 = new JSONObject(sequenceInputStream0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      Number number0 = jSONObject0.optNumber((String) null, (Number) bigDecimal0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((short)0, number0.shortValue());
      assertEquals((byte)0, number0.byteValue());
      assertSame(bigDecimal0, number0);
      assertSame(number0, bigDecimal0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Short short0 = new Short((short)47);
      assertEquals((short)47, (short)short0);
      assertNotNull(short0);
      
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(0, stringArray0.length);
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.increment(" : ");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(0, stringArray0.length);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      
      Number number0 = jSONObject0.optNumber(" : ");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(0, stringArray0.length);
      assertEquals(1, number0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Short short0 = new Short((short)47);
      assertEquals((short)47, (short)short0);
      assertNotNull(short0);
      
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(0, stringArray0.length);
      assertNotNull(jSONObject0);
      
      long long0 = jSONObject0.optLong((String) null, 0L);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(0, stringArray0.length);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Short short0 = new Short((short)47);
      assertEquals((short)47, (short)short0);
      assertNotNull(short0);
      
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, stringArray0.length);
      assertNotNull(jSONObject0);
      
      long long0 = jSONObject0.optLong((String) null, (-1L));
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, stringArray0.length);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<ByteArrayOutputStream, FilterInputStream> hashMap0 = new HashMap<ByteArrayOutputStream, FilterInputStream>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null, (JSONObject) null);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("getDeclaringClass", (int[]) null);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: getDeclaringClass", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("getDeclaringClass", batchUpdateException0.getMessage());
      assertNotNull(batchUpdateException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("getDeclaringClass", batchUpdateException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: getDeclaringClass", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("getDeclaringClass", batchUpdateException0.getMessage());
      assertEquals("getDeclaringClass", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: getDeclaringClass", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("getDeclaringClass", "getDeclaringClass", 15, sQLTransientConnectionException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: getDeclaringClass", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("getDeclaringClass", batchUpdateException0.getMessage());
      assertEquals("getDeclaringClass", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: getDeclaringClass", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(15, sQLNonTransientException0.getErrorCode());
      assertEquals("getDeclaringClass", sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: getDeclaringClass", sQLNonTransientException0.toString());
      assertEquals("getDeclaringClass", sQLNonTransientException0.getMessage());
      assertNotNull(sQLNonTransientException0);
      
      JSONObject jSONObject0 = new JSONObject(sQLNonTransientException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: getDeclaringClass", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("getDeclaringClass", batchUpdateException0.getMessage());
      assertEquals("getDeclaringClass", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: getDeclaringClass", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(15, sQLNonTransientException0.getErrorCode());
      assertEquals("getDeclaringClass", sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: getDeclaringClass", sQLNonTransientException0.toString());
      assertEquals("getDeclaringClass", sQLNonTransientException0.getMessage());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("getDeclaringClass", false);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: getDeclaringClass", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("getDeclaringClass", batchUpdateException0.getMessage());
      assertEquals("getDeclaringClass", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: getDeclaringClass", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(15, sQLNonTransientException0.getErrorCode());
      assertEquals("getDeclaringClass", sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: getDeclaringClass", sQLNonTransientException0.toString());
      assertEquals("getDeclaringClass", sQLNonTransientException0.getMessage());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      
      JSONObject jSONObject2 = jSONObject0.optJSONObject("U%-HPRi( 6\"iB?w", jSONObject1);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: getDeclaringClass", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("getDeclaringClass", batchUpdateException0.getMessage());
      assertEquals("getDeclaringClass", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: getDeclaringClass", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(15, sQLNonTransientException0.getErrorCode());
      assertEquals("getDeclaringClass", sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: getDeclaringClass", sQLNonTransientException0.toString());
      assertEquals("getDeclaringClass", sQLNonTransientException0.getMessage());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertNotNull(jSONObject2);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      int int0 = jSONObject0.optInt("", 0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<Float, SQLSyntaxErrorException> hashMap0 = new HashMap<Float, SQLSyntaxErrorException>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      int int0 = jSONObject0.optInt("}WH(/K,0xa", (-3406));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals((-3406), int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<SQLException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLTransientConnectionException>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      float float0 = jSONObject0.optFloat("ko", 0.0F);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<Float, SQLSyntaxErrorException> hashMap0 = new HashMap<Float, SQLSyntaxErrorException>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      float float0 = jSONObject0.optFloat("'I -2w+:6Z`*Q/;p+U^", (-3243.842F));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals((-3243.842F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(35);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      double double0 = jSONObject0.optDouble("`RJ.6U_J", 0.0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<SQLException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLTransientConnectionException>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      double double0 = jSONObject0.optDouble((String) null, (-1188.998915325));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals((-1188.998915325), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<Object, MockFileWriter> hashMap0 = new HashMap<Object, MockFileWriter>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      BigInteger bigInteger0 = jSONObject0.optBigInteger("-0", (BigInteger) null);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Short short0 = new Short((short)47);
      assertEquals((short)47, (short)short0);
      assertNotNull(short0);
      
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, stringArray0.length);
      assertNotNull(jSONObject0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[6] = (byte) (-41);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals((short) (-10496), bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-41), (byte)0}, byteArray0);
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = jSONObject0.optBigInteger("toL", bigInteger0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals((short) (-10496), bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short) (-10496), bigInteger1.shortValue());
      assertEquals(0, stringArray0.length);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-41), (byte)0}, byteArray0);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(34);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = jSONObject0.optBigInteger("nv?5]:#uf339K_VB<a", bigInteger0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Short short0 = new Short((short)47);
      assertEquals((short)47, (short)short0);
      assertNotNull(short0);
      
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, stringArray0.length);
      assertNotNull(jSONObject0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[7] = (byte) (-38);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals((byte) (-38), bigInteger0.byteValue());
      assertEquals((short)218, bigInteger0.shortValue());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-38)}, byteArray0);
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = jSONObject0.optBigInteger("toL", bigInteger0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals((byte) (-38), bigInteger0.byteValue());
      assertEquals((short)218, bigInteger0.shortValue());
      assertEquals((byte) (-38), bigInteger1.byteValue());
      assertEquals((short)218, bigInteger1.shortValue());
      assertEquals(0, stringArray0.length);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-38)}, byteArray0);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("JSONArray", bigDecimal0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Answers answers0 = Answers.RETURNS_DEEP_STUBS;
      JSONObject jSONObject0 = new JSONObject(answers0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      BigDecimal bigDecimal0 = new BigDecimal(4336.741712);
      assertEquals((byte) (-16), bigDecimal0.byteValue());
      assertEquals((short)4336, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("java.lang.Long@00000000210", bigDecimal0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals((byte) (-16), bigDecimal0.byteValue());
      assertEquals((short)4336, bigDecimal0.shortValue());
      assertEquals((byte) (-16), bigDecimal1.byteValue());
      assertEquals((short)4336, bigDecimal1.shortValue());
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(120);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put(";s#q,knk[,gty?mPk)", 357.72293F);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      
      Object object0 = jSONObject0.opt(";s#q,knk[,gty?mPk)");
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(357.72293F, object0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigInteger bigInteger0 = JSONObject.objectToBigInteger((Object) null, (BigInteger) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(").");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-101);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals((short) (-25856), bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-101), (byte)0}, byteArray0);
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = JSONObject.objectToBigInteger(mockPrintStream0, bigInteger0);
      assertEquals((short) (-25856), bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short) (-25856), bigInteger1.shortValue());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-101), (byte)0}, byteArray0);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(48);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      String[] stringArray0 = new String[7];
      JSONObject jSONObject0 = new JSONObject(jSONArray0, stringArray0);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(7, stringArray0.length);
      assertNotNull(jSONObject0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = JSONObject.objectToBigInteger(jSONObject0, bigInteger0);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals(7, stringArray0.length);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      File file0 = MockFile.createTempFile("toString", "toS");
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/toString0toS", file0.toString());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("toString0toS", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertNotNull(file0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte) (-101);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals((byte) (-101), bigInteger0.byteValue());
      assertEquals((short)155, bigInteger0.shortValue());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-101)}, byteArray0);
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = JSONObject.objectToBigInteger(mockPrintStream0, bigInteger0);
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/toString0toS", file0.toString());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("toString0toS", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals((byte) (-101), bigInteger0.byteValue());
      assertEquals((short)155, bigInteger0.shortValue());
      assertEquals((byte) (-101), bigInteger1.byteValue());
      assertEquals((short)155, bigInteger1.shortValue());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-101)}, byteArray0);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(pushbackInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(dataInputStream0);
      
      BigDecimal bigDecimal0 = JSONObject.objectToBigDecimal(dataInputStream0, (BigDecimal) null, true);
      assertFalse(fileDescriptor0.valid());
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BigDecimal bigDecimal0 = new BigDecimal((-5));
      assertEquals((short) (-5), bigDecimal0.shortValue());
      assertEquals((byte) (-5), bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = JSONObject.objectToBigDecimal(pipedWriter0, bigDecimal0, true);
      assertEquals((short) (-5), bigDecimal0.shortValue());
      assertEquals((byte) (-5), bigDecimal0.byteValue());
      assertEquals((byte) (-5), bigDecimal1.byteValue());
      assertEquals((short) (-5), bigDecimal1.shortValue());
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException0);
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = JSONObject.objectToBigDecimal(sQLNonTransientConnectionException0, bigDecimal0, false);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigDecimal bigDecimal0 = JSONObject.objectToBigDecimal((Object) null, (BigDecimal) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("S9)6VQ7");
      assertEquals("S9)6VQ7", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: S9)6VQ7", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertNotNull(sQLWarning0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("iR(hk2 _Bz{;Tk,N", sQLWarning0);
      assertEquals("S9)6VQ7", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: S9)6VQ7", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: iR(hk2 _Bz{;Tk,N", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("iR(hk2 _Bz{;Tk,N", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = JSONObject.objectToBigDecimal(sQLInvalidAuthorizationSpecException0, bigDecimal0);
      assertEquals("S9)6VQ7", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: S9)6VQ7", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: iR(hk2 _Bz{;Tk,N", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("iR(hk2 _Bz{;Tk,N", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      BigDecimal bigDecimal0 = new BigDecimal((-244L));
      assertEquals((byte)12, bigDecimal0.byteValue());
      assertEquals((short) (-244), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = JSONObject.objectToBigDecimal(jSONObject0, bigDecimal0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals((byte)12, bigDecimal0.byteValue());
      assertEquals((short) (-244), bigDecimal0.shortValue());
      assertEquals((short) (-244), bigDecimal1.shortValue());
      assertEquals((byte)12, bigDecimal1.byteValue());
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(3277L);
      assertEquals((byte) (-51), bigDecimal0.byteValue());
      assertEquals((short)3277, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = JSONObject.objectToBigDecimal("get", bigDecimal0);
      assertEquals((byte) (-51), bigDecimal0.byteValue());
      assertEquals((short)3277, bigDecimal0.shortValue());
      assertEquals((short)3277, bigDecimal1.shortValue());
      assertEquals((byte) (-51), bigDecimal1.byteValue());
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Answers answers0 = Answers.RETURNS_DEEP_STUBS;
      JSONObject jSONObject0 = new JSONObject(answers0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("iR(hk2 _Bz{;Tk,N", 2789);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      
      float float0 = jSONObject0.getFloat("iR(hk2 _Bz{;Tk,N");
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2789.0F, float0, 0.01F);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, (Object) null, 55, 2528);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Short short0 = new Short((short)47);
      assertEquals((short)47, (short)short0);
      assertNotNull(short0);
      
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, stringArray0.length);
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.increment(" : ");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(0, stringArray0.length);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      
      HashMap<Answers, BufferedWriter> hashMap0 = new HashMap<Answers, BufferedWriter>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject2 = jSONObject1.put("ishashCode", (Map<?, ?>) hashMap0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertEquals(0, stringArray0.length);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertNotNull(jSONObject2);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      // Undeclared exception!
      jSONObject1.write((Writer) stringWriter0, 8192, 8192);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(59);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null, 59, 2529);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      try { 
        jSONObject0.write((Writer) pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "W{%LoTBHHo&H");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(109);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Long@00000000150", (-214));
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      
      JSONObject jSONObject2 = jSONObject1.put(";s#q,knk[,gty?mPk)", 357.72293F);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertNotNull(jSONObject2);
      
      JSONObject jSONObject3 = jSONObject0.accumulate(";s#q,knk[,gty?mPk)", ";s#q,knk[,gty?mPk)");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject3.isEmpty());
      assertEquals(2, jSONObject3.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject2);
      assertNotNull(jSONObject3);
      
      try { 
        jSONObject0.toString(2513);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to write JSONObject value for key: ;s#q,knk[,gty?mPk)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      try { 
        JSONObject.quote("    ArgumentCaptor<Person> argument = ArgumentCaptor.forClass(Person.class);", (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<SQLNonTransientConnectionException, Character> hashMap0 = new HashMap<SQLNonTransientConnectionException, Character>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      // Undeclared exception!
      try { 
        jSONObject0.query("Vn$T&'8>1*m4!RWT&ZZ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<ObjectOutputStream, SQLFeatureNotSupportedException> hashMap0 = new HashMap<ObjectOutputStream, SQLFeatureNotSupportedException>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      PriorityQueue<PipedOutputStream> priorityQueue0 = new PriorityQueue<PipedOutputStream>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Collection<?>) priorityQueue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 3746L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, Float.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Integer integer0 = new Integer(58);
      assertEquals(58, (int)integer0);
      assertNotNull(integer0);
      
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(2, stringArray0.length);
      assertNotNull(jSONObject0);
      
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (double) 58);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<SQLTransientConnectionException, SQLException> hashMap0 = new HashMap<SQLTransientConnectionException, SQLException>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(31);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.isNumberSimilar((Number) null, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.isDecimalNotation((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.indent((Writer) null, 50);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Short short0 = new Short((short)47);
      assertEquals((short)47, (short)short0);
      assertNotNull(short0);
      
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, stringArray0.length);
      assertNotNull(jSONObject0);
      
      // Undeclared exception!
      try { 
        jSONObject0.increment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HashMap<SQLWarning, FilterOutputStream> hashMap0 = new HashMap<SQLWarning, FilterOutputStream>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1722247170), (byte)94);
      assertEquals(94, byteArrayInputStream0.available());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      // Undeclared exception!
      try { 
        jSONObject0.accumulate((String) null, byteArrayInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("JxIg(7tM%9uVedQL", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name JxIg(7tM%9uVedQL, locale ko
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-3559));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -3559
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HashMap<SQLException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLTransientConnectionException>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      assertNotNull(dataOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      Writer writer0 = jSONObject0.write((Writer) mockPrintWriter0, (-824), (-824));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertSame(mockPrintWriter0, writer0);
      assertSame(writer0, mockPrintWriter0);
      assertNotNull(writer0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(35);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      HashMap<PipedWriter, Character> hashMap0 = new HashMap<PipedWriter, Character>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject1 = jSONObject0.put("eGG ]f[", (Map<?, ?>) hashMap0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(35);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      CharArrayWriter charArrayWriter1 = (CharArrayWriter)jSONObject1.write((Writer) charArrayWriter0, 35, 35);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(37, charArrayWriter0.size());
      assertEquals(37, charArrayWriter1.size());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertNotNull(charArrayWriter1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Answers answers0 = Answers.RETURNS_DEEP_STUBS;
      JSONObject jSONObject0 = new JSONObject(answers0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      SQLWarning sQLWarning0 = new SQLWarning("S9)6VQ7");
      assertNull(sQLWarning0.getSQLState());
      assertEquals("S9)6VQ7", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: S9)6VQ7", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNotNull(sQLWarning0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.json.JSONObject", sQLWarning0);
      assertNull(sQLWarning0.getSQLState());
      assertEquals("S9)6VQ7", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: S9)6VQ7", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("org.json.JSONObject", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: org.json.JSONObject", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNotNull(sQLNonTransientConnectionException0);
      
      JSONObject jSONObject1 = jSONObject0.putOpt("iR(hk2 _Bz{;Tk,N", sQLNonTransientConnectionException0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("S9)6VQ7", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: S9)6VQ7", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("org.json.JSONObject", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: org.json.JSONObject", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      CharArrayWriter charArrayWriter1 = (CharArrayWriter)jSONObject1.write((Writer) charArrayWriter0, (-536), (-536));
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("S9)6VQ7", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: S9)6VQ7", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("org.json.JSONObject", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: org.json.JSONObject", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(90, charArrayWriter0.size());
      assertEquals(90, charArrayWriter1.size());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertNotNull(charArrayWriter1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(bigInteger0, stringArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(2, stringArray0.length);
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("[nJ", false);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, stringArray0.length);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("7L");
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("7L", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: 7L", sQLSyntaxErrorException0.toString());
      assertNotNull(sQLSyntaxErrorException0);
      
      JSONObject jSONObject2 = jSONObject0.append("]p|)dt#J$", sQLSyntaxErrorException0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("7L", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: 7L", sQLSyntaxErrorException0.toString());
      assertEquals(2, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, stringArray0.length);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertNotNull(jSONObject2);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("7L");
      assertNotNull(mockPrintWriter0);
      
      Writer writer0 = jSONObject0.write((Writer) mockPrintWriter0, 1, 905);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, stringArray0.length);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(mockPrintWriter0, writer0);
      assertSame(writer0, mockPrintWriter0);
      assertNotNull(writer0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Answers answers0 = Answers.RETURNS_DEEP_STUBS;
      JSONObject jSONObject0 = new JSONObject(answers0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      JSONObject jSONObject1 = jSONObject0.put("ZA6^l(#-88l0", (Collection<?>) hashSet0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      
      String string0 = jSONObject0.toString();
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject.testValidity("FBqQ.<yILV$mv");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      JSONObject.testValidity(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("Error reading value at index position ");
      assertEquals("Error reading value at index position ", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[TDF`^rL}C#C");
      assertNotNull(mockPrintWriter0);
      
      Writer writer0 = JSONObject.quote("iR(hk2 _Bz{;Tk,N", (Writer) mockPrintWriter0);
      assertSame(mockPrintWriter0, writer0);
      assertSame(writer0, mockPrintWriter0);
      assertNotNull(writer0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.quote("", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.quote((String) null, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<Answers> class0 = Answers.class;
      Answers answers0 = Answers.RETURNS_DEEP_STUBS;
      JSONObject jSONObject0 = new JSONObject(answers0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOnce((String) null, class0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(916);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOnce(";s#q,knk[,gty?mPk)", (Object) null);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet0 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      boolean boolean0 = linkedHashSet0.add(sQLFeatureNotSupportedException0);
      assertTrue(linkedHashSet0.contains(sQLFeatureNotSupportedException0));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertTrue(boolean0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedHashSet0);
      assertTrue(linkedHashSet0.contains(sQLFeatureNotSupportedException0));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray0);
      assertTrue(linkedHashSet0.contains(sQLFeatureNotSupportedException0));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Object) linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String string0 = jSONObject0.optString("double", "wfm/ukrxn$>,Hkan!Z");
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals("wfm/ukrxn$>,Hkan!Z", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Byte byte0 = new Byte((byte)79);
      assertEquals((byte)79, (byte)byte0);
      assertNotNull(byte0);
      
      String[] stringArray0 = new String[7];
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(7, stringArray0.length);
      assertNotNull(jSONObject0);
      
      Double double0 = new Double((-563.2260543570557));
      assertEquals((-563.2260543570557), (double)double0, 0.01);
      assertNotNull(double0);
      
      Number number0 = jSONObject0.optNumber("isname", (Number) double0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(7, stringArray0.length);
      assertEquals((-563.2260543570557), number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<ObjectOutputStream, SQLFeatureNotSupportedException> hashMap0 = new HashMap<ObjectOutputStream, SQLFeatureNotSupportedException>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      long long0 = jSONObject0.optLong("double", 1547L);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(1547L, long0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("getDeclaringClass", (int[]) null);
      assertEquals("java.sql.BatchUpdateException: getDeclaringClass", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("getDeclaringClass", batchUpdateException0.getMessage());
      assertNotNull(batchUpdateException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("getDeclaringClass", batchUpdateException0);
      assertEquals("java.sql.BatchUpdateException: getDeclaringClass", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("getDeclaringClass", batchUpdateException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("getDeclaringClass", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: getDeclaringClass", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("getDeclaringClass", "getDeclaringClass", 15, sQLTransientConnectionException0);
      assertEquals("java.sql.BatchUpdateException: getDeclaringClass", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("getDeclaringClass", batchUpdateException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("getDeclaringClass", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: getDeclaringClass", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals(15, sQLNonTransientException0.getErrorCode());
      assertEquals("getDeclaringClass", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: getDeclaringClass", sQLNonTransientException0.toString());
      assertEquals("getDeclaringClass", sQLNonTransientException0.getSQLState());
      assertNotNull(sQLNonTransientException0);
      
      JSONObject jSONObject0 = new JSONObject(sQLNonTransientException0);
      assertEquals("java.sql.BatchUpdateException: getDeclaringClass", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("getDeclaringClass", batchUpdateException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("getDeclaringClass", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: getDeclaringClass", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals(15, sQLNonTransientException0.getErrorCode());
      assertEquals("getDeclaringClass", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: getDeclaringClass", sQLNonTransientException0.toString());
      assertEquals("getDeclaringClass", sQLNonTransientException0.getSQLState());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.optJSONObject("U%-HPRi( 6\"iB?w", jSONObject0);
      assertEquals("java.sql.BatchUpdateException: getDeclaringClass", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("getDeclaringClass", batchUpdateException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("getDeclaringClass", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: getDeclaringClass", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals(15, sQLNonTransientException0.getErrorCode());
      assertEquals("getDeclaringClass", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: getDeclaringClass", sQLNonTransientException0.toString());
      assertEquals("getDeclaringClass", sQLNonTransientException0.getSQLState());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("W{%LoTBHHo&H");
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: W{%LoTBHHo&H", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("W{%LoTBHHo&H", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLDataException sQLDataException0 = new SQLDataException("W{%LoTBHHo&H", sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: W{%LoTBHHo&H", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("W{%LoTBHHo&H", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("W{%LoTBHHo&H", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: W{%LoTBHHo&H", sQLDataException0.toString());
      assertNotNull(sQLDataException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.mockito.exceptions.verification.VerificationInOrderFailure", "8-@\"S,n", sQLDataException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: W{%LoTBHHo&H", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("W{%LoTBHHo&H", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("W{%LoTBHHo&H", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: W{%LoTBHHo&H", sQLDataException0.toString());
      assertEquals("java.sql.SQLTransactionRollbackException: org.mockito.exceptions.verification.VerificationInOrderFailure", sQLTransactionRollbackException0.toString());
      assertEquals("8-@\"S,n", sQLTransactionRollbackException0.getSQLState());
      assertEquals("org.mockito.exceptions.verification.VerificationInOrderFailure", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNotNull(sQLTransactionRollbackException0);
      
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(sQLTransactionRollbackException0, stringArray0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: W{%LoTBHHo&H", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("W{%LoTBHHo&H", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("W{%LoTBHHo&H", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: W{%LoTBHHo&H", sQLDataException0.toString());
      assertEquals("java.sql.SQLTransactionRollbackException: org.mockito.exceptions.verification.VerificationInOrderFailure", sQLTransactionRollbackException0.toString());
      assertEquals("8-@\"S,n", sQLTransactionRollbackException0.getSQLState());
      assertEquals("org.mockito.exceptions.verification.VerificationInOrderFailure", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject0);
      
      int int0 = jSONObject0.optInt("W{%LoTBHHo&H", 47);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: W{%LoTBHHo&H", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("W{%LoTBHHo&H", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("W{%LoTBHHo&H", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: W{%LoTBHHo&H", sQLDataException0.toString());
      assertEquals("java.sql.SQLTransactionRollbackException: org.mockito.exceptions.verification.VerificationInOrderFailure", sQLTransactionRollbackException0.toString());
      assertEquals("8-@\"S,n", sQLTransactionRollbackException0.getSQLState());
      assertEquals("org.mockito.exceptions.verification.VerificationInOrderFailure", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(1, stringArray0.length);
      assertEquals(47, int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      float float0 = jSONObject0.optFloat(".Q", 2526.356F);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(2526.356F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HashMap<SQLException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLTransientConnectionException>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("", 12);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      
      double double0 = jSONObject0.optDouble("", 1837.3629417);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(12.0, double0, 0.01);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<SQLException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLTransientConnectionException>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("", 12);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      
      boolean boolean0 = jSONObject1.optBoolean("", true);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertTrue(boolean0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<Float, SQLSyntaxErrorException> hashMap0 = new HashMap<Float, SQLSyntaxErrorException>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      boolean boolean0 = jSONObject0.optBoolean("#^o{", false);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HashMap<SQLWarning, FilterOutputStream> hashMap0 = new HashMap<SQLWarning, FilterOutputStream>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      Class<Answers> class0 = Answers.class;
      Answers answers0 = Answers.RETURNS_DEEP_STUBS;
      Answers answers1 = jSONObject0.optEnum(class0, (String) null, answers0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(Answers.RETURNS_DEEP_STUBS, answers1);
      assertSame(answers0, answers1);
      assertSame(answers1, answers0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Byte byte0 = new Byte((byte)79);
      assertEquals((byte)79, (byte)byte0);
      assertNotNull(byte0);
      
      String[] stringArray0 = new String[7];
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(7, stringArray0.length);
      assertNotNull(jSONObject0);
      
      Object object0 = jSONObject0.opt("mo");
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(7, stringArray0.length);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(bigInteger0);
      
      String string0 = JSONObject.numberToString(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(bigInteger0, stringArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(2, stringArray0.length);
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("[nJ", false);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, stringArray0.length);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      
      boolean boolean0 = jSONObject1.isEmpty();
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      boolean boolean0 = jSONObject0.isEmpty();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HashMap<SQLIntegrityConstraintViolationException, SQLNonTransientException> hashMap0 = new HashMap<SQLIntegrityConstraintViolationException, SQLNonTransientException>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOnce("Ko", sQLIntegrityConstraintViolationException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      
      try { 
        jSONObject1.getBoolean("Ko");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a Boolean (class java.sql.SQLIntegrityConstraintViolationException).
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Short short0 = new Short((short)47);
      assertEquals((short)47, (short)short0);
      assertNotNull(short0);
      
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(0, stringArray0.length);
      assertNotNull(jSONObject0);
      
      HashMap<Answers, BufferedWriter> hashMap0 = new HashMap<Answers, BufferedWriter>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject1 = jSONObject0.put("ishashCode", (Map<?, ?>) hashMap0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(0, stringArray0.length);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      
      JSONObject jSONObject2 = (JSONObject)jSONObject0.get("ishashCode");
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertTrue(jSONObject2.isEmpty());
      assertEquals(0, jSONObject2.length());
      assertEquals(0, stringArray0.length);
      assertNotSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject2, jSONObject1);
      assertNotSame(jSONObject2, jSONObject0);
      assertNotNull(jSONObject2);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashMap<BufferedInputStream, JSONObject> hashMap0 = new HashMap<BufferedInputStream, JSONObject>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      try { 
        jSONObject0.get("The index need to be a positive number that indicates the position of the argument to return.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SQLException sQLException0 = new SQLException("DFSR^vax6", "DFSR^vax6");
      assertEquals("java.sql.SQLException: DFSR^vax6", sQLException0.toString());
      assertEquals("DFSR^vax6", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("DFSR^vax6", sQLException0.getSQLState());
      assertNotNull(sQLException0);
      
      SQLDataException sQLDataException0 = new SQLDataException("W{%LoTBHHV&H", sQLException0);
      assertEquals("java.sql.SQLException: DFSR^vax6", sQLException0.toString());
      assertEquals("DFSR^vax6", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("DFSR^vax6", sQLException0.getSQLState());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("W{%LoTBHHV&H", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: W{%LoTBHHV&H", sQLDataException0.toString());
      assertNotNull(sQLDataException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("DFSR^vax6", "8-@\"S,n", sQLDataException0);
      assertEquals("java.sql.SQLException: DFSR^vax6", sQLException0.toString());
      assertEquals("DFSR^vax6", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("DFSR^vax6", sQLException0.getSQLState());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("W{%LoTBHHV&H", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: W{%LoTBHHV&H", sQLDataException0.toString());
      assertEquals("java.sql.SQLTransactionRollbackException: DFSR^vax6", sQLTransactionRollbackException0.toString());
      assertEquals("8-@\"S,n", sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("DFSR^vax6", sQLTransactionRollbackException0.getMessage());
      assertNotNull(sQLTransactionRollbackException0);
      
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(sQLTransactionRollbackException0, stringArray0);
      assertEquals("java.sql.SQLException: DFSR^vax6", sQLException0.toString());
      assertEquals("DFSR^vax6", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("DFSR^vax6", sQLException0.getSQLState());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("W{%LoTBHHV&H", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: W{%LoTBHHV&H", sQLDataException0.toString());
      assertEquals("java.sql.SQLTransactionRollbackException: DFSR^vax6", sQLTransactionRollbackException0.toString());
      assertEquals("8-@\"S,n", sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("DFSR^vax6", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject0);
      
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<SQLIntegrityConstraintViolationException, SQLNonTransientException> hashMap0 = new HashMap<SQLIntegrityConstraintViolationException, SQLNonTransientException>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      SQLNonTransientException sQLNonTransientException0 = hashMap0.put(sQLIntegrityConstraintViolationException0, (SQLNonTransientException) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLNonTransientException0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(bigInteger0, stringArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(2, stringArray0.length);
      assertNotNull(jSONObject0);
      
      int int0 = jSONObject0.length();
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(2, stringArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HashMap<Object, MockFileWriter> hashMap0 = new HashMap<Object, MockFileWriter>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      Set<String> set0 = jSONObject0.keySet();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<SQLException, Double> hashMap0 = new HashMap<SQLException, Double>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      Number number0 = jSONObject0.optNumber("java.lang.Long@00000000210");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HashMap<JSONArray, BigInteger> hashMap0 = new HashMap<JSONArray, BigInteger>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("java.io.StringWriter@0000000002", (Object) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      
      String string0 = jSONObject0.toString(8192);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Short short0 = new Short((short)47);
      assertEquals((short)47, (short)short0);
      assertNotNull(short0);
      
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, stringArray0.length);
      assertNotNull(jSONObject0);
      
      HashMap<Answers, BufferedWriter> hashMap0 = new HashMap<Answers, BufferedWriter>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject1 = jSONObject0.put("ishashCode", (Map<?, ?>) hashMap0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(0, stringArray0.length);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      Writer writer0 = jSONObject1.write((Writer) stringWriter0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(0, stringArray0.length);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(stringWriter0, writer0);
      assertSame(writer0, stringWriter0);
      assertNotNull(writer0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HashMap<Answers, BufferedWriter> hashMap0 = new HashMap<Answers, BufferedWriter>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = (JSONObject)JSONObject.wrap(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "org.mockito.exceptions.verification.VerificationInOrderFailure");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      Map<String, Object> map0 = jSONObject0.toMap();
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertFalse(map0.isEmpty());
      assertEquals(2, map0.size());
      assertNotNull(map0);
      
      JSONObject jSONObject1 = new JSONObject(map0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertFalse(map0.isEmpty());
      assertEquals(2, map0.size());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(1500);
      assertEquals((short)1500, bigDecimal0.shortValue());
      assertEquals((byte) (-36), bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = (BigDecimal)JSONObject.wrap(bigDecimal0);
      assertEquals((short)1500, bigDecimal0.shortValue());
      assertEquals((byte) (-36), bigDecimal0.byteValue());
      assertEquals((byte) (-36), bigDecimal1.byteValue());
      assertEquals((short)1500, bigDecimal1.shortValue());
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HashMap<SQLException, Double> hashMap0 = new HashMap<SQLException, Double>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      SQLDataException sQLDataException0 = new SQLDataException("uq;8lH", "uq;8lH", 76);
      assertEquals(76, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: uq;8lH", sQLDataException0.toString());
      assertEquals("uq;8lH", sQLDataException0.getMessage());
      assertEquals("uq;8lH", sQLDataException0.getSQLState());
      assertNotNull(sQLDataException0);
      
      Double double0 = new Double(76);
      assertEquals(76.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = hashMap0.put(sQLDataException0, double0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(76, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: uq;8lH", sQLDataException0.toString());
      assertEquals("uq;8lH", sQLDataException0.getMessage());
      assertEquals("uq;8lH", sQLDataException0.getSQLState());
      assertNull(double1);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Vector<Float> vector0 = new Vector<Float>(105);
      assertEquals(105, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      Float float0 = new Float(3738.9574016);
      assertEquals(3738.9575F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = vector0.add(float0);
      assertTrue(vector0.contains(float0));
      assertEquals(105, vector0.capacity());
      assertEquals("[3738.9575]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertTrue(boolean0);
      
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) vector0);
      assertTrue(vector0.contains(float0));
      assertEquals(105, vector0.capacity());
      assertEquals("[3738.9575]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertNotNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int[] intArray0 = new int[9];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, (String) null, 622, intArray0, sQLIntegrityConstraintViolationException0);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(622, batchUpdateException0.getErrorCode());
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(batchUpdateException0);
      
      JSONObject jSONObject0 = new JSONObject(batchUpdateException0);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(622, batchUpdateException0.getErrorCode());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(jSONObject0);
      
      // Undeclared exception!
      try { 
        jSONObject0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Character character0 = new Character('d');
      assertEquals('d', (char)character0);
      assertNotNull(character0);
      
      boolean boolean0 = linkedList0.add(character0);
      assertTrue(linkedList0.contains(character0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      LinkedHashSet<Character> linkedHashSet0 = new LinkedHashSet<Character>(linkedList0);
      assertTrue(linkedList0.contains(character0));
      assertTrue(linkedHashSet0.contains(character0));
      assertEquals(1, linkedList0.size());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      JSONArray jSONArray0 = new JSONArray((Iterable<?>) linkedHashSet0);
      assertTrue(linkedList0.contains(character0));
      assertTrue(linkedHashSet0.contains(character0));
      assertEquals(1, linkedList0.size());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertNotNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Object object0 = JSONObject.wrap((Object) null);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HashMap<SQLException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLTransientConnectionException>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(125);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Object object0 = JSONObject.stringToValue(",Zr1]Vip|)~bG");
      assertEquals(",Zr1]Vip|)~bG", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("");
      assertEquals("", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("5nM");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"5nM\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("5 9,SdQ.qSB'tQ2{B");
      assertEquals("5 9,SdQ.qSB'tQ2{B", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("0");
      assertEquals(0, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("+?k");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [+?k] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("-0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("\"@^7u E^4k`7");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("(zg3z");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("getDeclaringClass");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HashMap<Double, SQLTransactionRollbackException> hashMap0 = new HashMap<Double, SQLTransactionRollbackException>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      try { 
        jSONObject0.put("", Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("get`eclaringClltss", "get`eclaringClltss", 15, (int[]) null);
      assertEquals("get`eclaringClltss", batchUpdateException0.getSQLState());
      assertEquals(15, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: get`eclaringClltss", batchUpdateException0.toString());
      assertEquals("get`eclaringClltss", batchUpdateException0.getMessage());
      assertNotNull(batchUpdateException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("get`eclaringClltss", batchUpdateException0);
      assertEquals("get`eclaringClltss", batchUpdateException0.getSQLState());
      assertEquals(15, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: get`eclaringClltss", batchUpdateException0.toString());
      assertEquals("get`eclaringClltss", batchUpdateException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: get`eclaringClltss", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("get`eclaringClltss", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("get`eclaringClltss", "get`eclaringClltss", 15, sQLTransientConnectionException0);
      assertEquals("get`eclaringClltss", batchUpdateException0.getSQLState());
      assertEquals(15, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: get`eclaringClltss", batchUpdateException0.toString());
      assertEquals("get`eclaringClltss", batchUpdateException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: get`eclaringClltss", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("get`eclaringClltss", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("get`eclaringClltss", sQLNonTransientException0.getMessage());
      assertEquals("get`eclaringClltss", sQLNonTransientException0.getSQLState());
      assertEquals(15, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: get`eclaringClltss", sQLNonTransientException0.toString());
      assertNotNull(sQLNonTransientException0);
      
      JSONObject jSONObject0 = new JSONObject(sQLNonTransientException0);
      assertEquals("get`eclaringClltss", batchUpdateException0.getSQLState());
      assertEquals(15, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: get`eclaringClltss", batchUpdateException0.toString());
      assertEquals("get`eclaringClltss", batchUpdateException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: get`eclaringClltss", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("get`eclaringClltss", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("get`eclaringClltss", sQLNonTransientException0.getMessage());
      assertEquals("get`eclaringClltss", sQLNonTransientException0.getSQLState());
      assertEquals(15, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: get`eclaringClltss", sQLNonTransientException0.toString());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      try { 
        jSONObject0.put(" vEn5D1\"<8p'@(y", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = JSONObject.isNumberSimilar((byte)80, (byte)7);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      boolean boolean0 = JSONObject.isNumberSimilar(bigDecimal0, bigDecimal0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HashMap<SQLNonTransientException, SQLClientInfoException> hashMap0 = new HashMap<SQLNonTransientException, SQLClientInfoException>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      Double double0 = new Double(Double.NaN);
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = jSONObject0.similar(double0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Answers answers0 = Answers.RETURNS_DEEP_STUBS;
      JSONObject jSONObject0 = new JSONObject(answers0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      try { 
        jSONObject0.getBigInteger("iR(bk2 _Bz{RTk,N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(" cannot be returned by ");
      assertNotNull(mockPrintStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      assertNotNull(mockPrintWriter0);
      
      Writer writer0 = JSONObject.quote("mb#8/vh5\"o';qNs8F", (Writer) mockPrintWriter0);
      assertSame(mockPrintWriter0, writer0);
      assertSame(writer0, mockPrintWriter0);
      assertNotNull(writer0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Short short0 = new Short((short)47);
      assertEquals((short)47, (short)short0);
      assertNotNull(short0);
      
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, stringArray0.length);
      assertNotNull(jSONObject0);
      
      try { 
        jSONObject0.getLong("At the moment you cannot provide own implementations of MockHandler.\nPlease see the javadocs for the MockMaker interface.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HashMap<SQLException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLTransientConnectionException>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, "ko");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HashMap<StringBuffer, DataTruncation> hashMap0 = new HashMap<StringBuffer, DataTruncation>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      TreeSet<SQLFeatureNotSupportedException> treeSet0 = new TreeSet<SQLFeatureNotSupportedException>();
      assertNotNull(treeSet0);
      
      JSONObject jSONObject1 = jSONObject0.put("_;Cx-y+'&X$u", (Collection<?>) treeSet0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      try { 
        jSONObject1.putOnce("_;Cx-y+'&X$u", sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"_;Cx-y+'&X$u\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOnce("    //correct:", "    //correct:");
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      
      JSONObject jSONObject2 = jSONObject1.put("\r", false);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertNotNull(jSONObject2);
      
      String string0 = jSONObject1.toString(4);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertEquals(6, stringArray0.length);
      assertNotNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HashMap<SQLNonTransientException, SQLClientInfoException> hashMap0 = new HashMap<SQLNonTransientException, SQLClientInfoException>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("/tXA>xxbQ5!X", (Object) null);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Short short0 = new Short((short)47);
      assertEquals((short)47, (short)short0);
      assertNotNull(short0);
      
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(0, stringArray0.length);
      assertNotNull(jSONObject0);
      
      HashMap<Answers, BufferedWriter> hashMap0 = new HashMap<Answers, BufferedWriter>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(bigInteger0, stringArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(2, stringArray0.length);
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("[nJ", true);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, stringArray0.length);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      
      int int0 = jSONObject0.length();
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(2, stringArray0.length);
      assertEquals(1, int0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Class<Answers> class0 = Answers.class;
          JSONObject jSONObject0 = new JSONObject(class0);
          String string0 = jSONObject0.toString();
          assertEquals(35, jSONObject0.length());
          assertNotNull(string0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HashMap<SQLException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLTransientConnectionException>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("ko", hashMap0);
      jSONObject1.optString("ko", "ko");
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\r", false);
      BigDecimal bigDecimal0 = new BigDecimal(1000L);
      Number number0 = jSONObject1.optNumber("\r", (Number) bigDecimal0);
      assertSame(bigDecimal0, number0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(",Zr1]Vip|)~bG", 1577L);
      long long0 = jSONObject1.optLong(",Zr1]Vip|)~bG");
      assertEquals(1577L, long0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("getDeclaringClass", "getDeclaringClass", 15, (int[]) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("getDeclaringClass", batchUpdateException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("getDeclaringClass", "getDeclaringClass", 15, sQLTransientConnectionException0);
      JSONObject jSONObject0 = new JSONObject(sQLNonTransientException0);
      jSONObject0.optJSONArray((String) null);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Short short0 = new Short((short)2205);
      String[] stringArray0 = new String[7];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.increment("`XT@Uk-i1Rp");
      float float0 = jSONObject1.optFloat("`XT@Uk-i1Rp");
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      HashMap<SQLException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLTransientConnectionException>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", 12);
      double double0 = jSONObject1.optDouble("");
      assertEquals(12.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Short short0 = new Short((short)32);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = JSONObject.objectToBigInteger(short0, bigInteger0);
      assertEquals((byte)32, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      HashMap<SQLException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLTransientConnectionException>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", 12);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = jSONObject1.optBigInteger("", bigInteger0);
      assertEquals((byte)12, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = JSONObject.objectToBigInteger(bigInteger0, bigInteger0);
      assertSame(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      Short short0 = new Short((short)75);
      boolean boolean0 = JSONObject.isNumberSimilar(short0, bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("javax.org.evosuite.runtime.mock.java.io", (-1182));
      BigDecimal bigDecimal0 = new BigDecimal(21);
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("javax.org.evosuite.runtime.mock.java.io", bigDecimal0);
      assertEquals((byte)98, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Long long0 = new Long(1417L);
      BigDecimal bigDecimal0 = new BigDecimal(25);
      BigDecimal bigDecimal1 = JSONObject.objectToBigDecimal(long0, bigDecimal0, false);
      assertEquals((byte) (-119), bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      Double double0 = new Double(0.0);
      // Undeclared exception!
      try { 
        JSONObject.isNumberSimilar(bigInteger0, double0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      Double double0 = new Double(1.0);
      BigDecimal bigDecimal1 = JSONObject.objectToBigDecimal(double0, bigDecimal0, true);
      assertEquals((byte)1, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      boolean boolean0 = JSONObject.isNumberSimilar(bigDecimal0, bigInteger0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Answers answers0 = Answers.RETURNS_DEEP_STUBS;
      JSONObject jSONObject0 = new JSONObject(answers0);
      jSONObject0.put("1S/~/Ph9", false);
      boolean boolean0 = jSONObject0.optBoolean("1S/~/Ph9", true);
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Short short0 = new Short((short)47);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      HashMap<Answers, BigInteger> hashMap0 = new HashMap<Answers, BigInteger>();
      jSONObject0.put("java.lang.Short@0000000002", (Map<?, ?>) hashMap0);
      Class<Answers> class0 = Answers.class;
      try { 
        jSONObject0.getEnum(class0, "java.lang.Short@0000000002");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] is not a enum of type java.io.StringWriter@0000000008 (class org.json.JSONObject).
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Short short0 = new Short((short)47);
      String string0 = JSONObject.numberToString(short0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      HashMap<SQLNonTransientException, SQLClientInfoException> hashMap0 = new HashMap<SQLNonTransientException, SQLClientInfoException>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      HashMap<SQLException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLTransientConnectionException>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("", 12);
      JSONObject jSONObject1 = jSONObject0.increment("");
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("j$ z");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\r", false);
      try { 
        jSONObject1.getString("\r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a string (class java.lang.Boolean : false).
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("+?k", "+?k");
      String[] stringArray0 = JSONObject.getNames((Object) sQLDataException0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      HashMap<SQLException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLTransientConnectionException>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      HashMap<SQLException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLTransientConnectionException>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("ko", (-3172.4715764865));
      long long0 = jSONObject0.getLong("ko");
      assertEquals((-3172L), long0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("getDeclaringClass", "getDeclaringClass", 15, (int[]) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("getDeclaringClass", batchUpdateException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("getDeclaringClass", "getDeclaringClass", 15, sQLTransientConnectionException0);
      JSONObject jSONObject0 = new JSONObject(sQLNonTransientException0);
      jSONObject0.put("getDeclaringClass", false);
      try { 
        jSONObject0.getLong("getDeclaringClass");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a long (class java.lang.Boolean : false).
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(",Zr1]Vip|)~bG", 1577L);
      try { 
        jSONObject0.getJSONObject(",Zr1]Vip|)~bG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a JSONObject (class java.lang.Long : 1577).
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      HashMap<Object, MockFileWriter> hashMap0 = new HashMap<Object, MockFileWriter>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put(";+V;", (Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getJSONArray(";+V;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a JSONArray (class org.json.JSONObject).
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(109);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("#I7fMN#AD", "#I7fMN#AD", 109, (Throwable) null);
      JSONObject jSONObject1 = jSONObject0.accumulate("#I7fMN#AD", sQLTimeoutException0);
      try { 
        jSONObject1.getInt("#I7fMN#AD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a int (class java.sql.SQLTimeoutException).
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Short short0 = new Short((short)47);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.increment(" : ");
      Number number0 = jSONObject1.getNumber(" : ");
      assertEquals(1, number0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Answers answers0 = Answers.RETURNS_DEEP_STUBS;
      JSONObject jSONObject0 = new JSONObject(answers0);
      SQLWarning sQLWarning0 = new SQLWarning("S9)6VQ7");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.json.JSONObject", sQLWarning0);
      JSONObject jSONObject1 = jSONObject0.putOpt("iR(hk2 _Bz{;Tk,N", sQLNonTransientConnectionException0);
      try { 
        jSONObject1.getNumber("iR(hk2 _Bz{;Tk,N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a number (class java.sql.SQLNonTransientConnectionException).
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Answers answers0 = Answers.RETURNS_DEEP_STUBS;
      JSONObject jSONObject0 = new JSONObject(answers0);
      SQLWarning sQLWarning0 = new SQLWarning("S9)6VQU7");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.json.JSONObject", sQLWarning0);
      jSONObject0.putOpt("iR(hk2 _Bz{;Tk,N", sQLNonTransientConnectionException0);
      try { 
        jSONObject0.getFloat("iR(hk2 _Bz{;Tk,N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a float (class java.sql.SQLNonTransientConnectionException).
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Answers answers0 = Answers.RETURNS_MOCKS;
      JSONObject jSONObject0 = new JSONObject(answers0);
      SQLWarning sQLWarning0 = new SQLWarning("S9)6VQU7");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.json.JSONObject", sQLWarning0);
      JSONObject jSONObject1 = jSONObject0.putOpt("iR(hk2 _Bz{;Tk,N", sQLNonTransientConnectionException0);
      try { 
        jSONObject1.getDouble("iR(hk2 _Bz{;Tk,N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a double (class java.sql.SQLNonTransientConnectionException).
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Answers answers0 = Answers.RETURNS_DEEP_STUBS;
      JSONObject jSONObject0 = new JSONObject(answers0);
      SQLWarning sQLWarning0 = new SQLWarning("S9)ZlVQ7");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.json.JSONObject", sQLWarning0);
      JSONObject jSONObject1 = jSONObject0.putOpt("iR(bk2 _Bz{RTk,N", sQLNonTransientConnectionException0);
      try { 
        jSONObject1.getBigInteger("iR(bk2 _Bz{RTk,N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a BigInteger (class java.sql.SQLNonTransientConnectionException).
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      HashMap<SQLIntegrityConstraintViolationException, SQLNonTransientException> hashMap0 = new HashMap<SQLIntegrityConstraintViolationException, SQLNonTransientException>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      LinkedHashSet<ObjectInputStream> linkedHashSet0 = new LinkedHashSet<ObjectInputStream>();
      jSONObject0.put("    verify(mock, times(10)).someMethod();", (Collection<?>) linkedHashSet0);
      boolean boolean0 = jSONObject0.optBoolean("    verify(mock, times(10)).someMethod();");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Short short0 = new Short((short)47);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      Class<Answers> class0 = Answers.class;
      try { 
        jSONObject0.getEnum(class0, "java.lang.Short@0000000002");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] is not a enum of type java.io.StringWriter@0000000002 (null).
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      HashMap<Object, MockFileWriter> hashMap0 = new HashMap<Object, MockFileWriter>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getJSONArray("r>/A2`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1667.8847732221286);
      assertEquals("1667.8847732221286", string0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1.0);
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      HashMap<Object, MockFileWriter> hashMap0 = new HashMap<Object, MockFileWriter>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put(";+V;", (Map<?, ?>) hashMap0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      try { 
        jSONObject0.append(";+V;", sQLClientInfoException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] is not a JSONArray (null).
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(109);
      jSONObject0.append("#I7fMN#AD", "#I7fMN#AD");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("#I7fMN#AD", "#I7fMN#AD", 109, (Throwable) null);
      JSONObject jSONObject1 = jSONObject0.accumulate("#I7fMN#AD", sQLTimeoutException0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      hashMap0.put((Long) null, (String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      HashMap<Object, MockFileWriter> hashMap0 = new HashMap<Object, MockFileWriter>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("]hR4RdT&K`");
      MockFileWriter mockFileWriter0 = new MockFileWriter(" (null).", false);
      hashMap0.put(mockPrintStream0, mockFileWriter0);
      JSONObject jSONObject1 = jSONObject0.put(";+V;", (Map<?, ?>) hashMap0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{@e");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 3 [character 4 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<BufferedReader, ObjectOutputStream> hashMap0 = new HashMap<BufferedReader, ObjectOutputStream>();
      jSONArray0.put(1491, (Map<?, ?>) hashMap0);
      try { 
        jSONArray0.getJSONObject(55);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[55] is not a JSONObject (class org.json.JSONObject$Null : null).
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = JSONObject.valueToString("is");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      HashMap<ObjectOutputStream, SQLFeatureNotSupportedException> hashMap0 = new HashMap<ObjectOutputStream, SQLFeatureNotSupportedException>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Object object0 = jSONObject0.remove("~1");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      HashMap<SQLException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLTransientConnectionException>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONPointer jSONPointer0 = new JSONPointer("");
      JSONObject jSONObject1 = (JSONObject)jSONObject0.optQuery(jSONPointer0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("This exception may occur if matchers are combined with raw values:");
      JSONObject jSONObject0 = new JSONObject(sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("This exception may occur if matchers are combined with raw values:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      HashMap<SQLException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLTransientConnectionException>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("");
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("uc+F)t%");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject1 = jSONObject0.put(",Zr1]Vip|)~bG", (Map<?, ?>) hashMap0);
      Class<Answers> class0 = Answers.class;
      jSONObject1.optEnum(class0, ",Zr1]Vip|)~bG", (Answers) null);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      HashMap<ObjectOutputStream, SQLFeatureNotSupportedException> hashMap0 = new HashMap<ObjectOutputStream, SQLFeatureNotSupportedException>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      PriorityQueue<PipedOutputStream> priorityQueue0 = new PriorityQueue<PipedOutputStream>();
      jSONObject0.put("", (Collection<?>) priorityQueue0);
      JSONArray jSONArray0 = (JSONArray)jSONObject0.remove("");
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      HashMap<SQLException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLTransientConnectionException>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Class<? extends Map> class0 = jSONObject0.getMapType();
      assertEquals("class java.util.HashMap", class0.toString());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<Answers> class0 = Answers.class;
      jSONObject0.optEnum(class0, ",Zr1]Vip|)~bG");
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("pDI~.~bTf2dbnO", (String) null, hashMap0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("FG", sQLClientInfoException0);
      String[] stringArray0 = new String[6];
      JSONObject jSONObject0 = new JSONObject(sQLInvalidAuthorizationSpecException0, stringArray0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      Object object0 = jSONObject0.query(jSONPointer0);
      assertSame(object0, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator<String> iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.clear();
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      HashMap<SQLException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLTransientConnectionException>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("toS", 0L);
      float float0 = jSONObject1.getFloat("toS");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\r", false);
      try { 
        jSONObject1.getBigDecimal("\r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a BigDecimal (class java.lang.Boolean : false).
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      HashMap<ObjectOutputStream, SQLFeatureNotSupportedException> hashMap0 = new HashMap<ObjectOutputStream, SQLFeatureNotSupportedException>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("java.math.BigDecimal@0000000007", 723.0F);
      long long0 = jSONObject0.optLong("java.math.BigDecimal@0000000007", 1547L);
      assertEquals(1, jSONObject0.length());
      assertEquals(723L, long0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(bigInteger0, stringArray0);
      boolean boolean0 = jSONObject0.isNull("geVhashHCode");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      HashMap<SQLException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLTransientConnectionException>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("ko", (-3172.4715764865));
      jSONObject1.names();
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      HashMap<SQLException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLTransientConnectionException>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.putOpt("ko", hashMap0);
      JSONObject.getNames(jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong(",Zr1]Vip|)~bG");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      HashMap<ByteArrayOutputStream, FilterInputStream> hashMap0 = new HashMap<ByteArrayOutputStream, FilterInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      int int0 = jSONObject0.optInt("For more info see javadoc for Matchers class.");
      assertEquals(0, int0);
  }
}
