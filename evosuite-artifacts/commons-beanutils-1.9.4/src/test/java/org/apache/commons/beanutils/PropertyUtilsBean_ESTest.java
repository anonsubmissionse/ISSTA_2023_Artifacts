/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 18:49:18 GMT 2022
 */

package org.apache.commons.beanutils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.beans.IndexedPropertyDescriptor;
import java.beans.PropertyDescriptor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.sql.ResultSet;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.beanutils.BasicDynaBean;
import org.apache.commons.beanutils.BeanIntrospectionData;
import org.apache.commons.beanutils.BeanIntrospector;
import org.apache.commons.beanutils.ConvertingWrapDynaBean;
import org.apache.commons.beanutils.DefaultBeanIntrospector;
import org.apache.commons.beanutils.DefaultIntrospectionContext;
import org.apache.commons.beanutils.DynaClass;
import org.apache.commons.beanutils.DynaProperty;
import org.apache.commons.beanutils.FluentPropertyBeanIntrospector;
import org.apache.commons.beanutils.LazyDynaBean;
import org.apache.commons.beanutils.LazyDynaMap;
import org.apache.commons.beanutils.PropertyUtils;
import org.apache.commons.beanutils.PropertyUtilsBean;
import org.apache.commons.beanutils.ResultSetDynaClass;
import org.apache.commons.beanutils.ResultSetIterator;
import org.apache.commons.beanutils.RowSetDynaClass;
import org.apache.commons.beanutils.SuppressPropertiesBeanIntrospector;
import org.apache.commons.beanutils.WrapDynaBean;
import org.apache.commons.beanutils.WrapDynaClass;
import org.apache.commons.beanutils.expression.Resolver;
import org.apache.commons.collections.FastHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PropertyUtilsBean_ESTest extends PropertyUtilsBean_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      IndexOutOfBoundsException indexOutOfBoundsException0 = new IndexOutOfBoundsException();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.setSimpleProperty(class0, (String) null, indexOutOfBoundsException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No name specified for bean class 'class java.lang.Class'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<PropertyDescriptor> class0 = PropertyDescriptor.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      BasicDynaBean basicDynaBean0 = new BasicDynaBean((DynaClass) null);
      BasicDynaBean basicDynaBean1 = new BasicDynaBean(wrapDynaClass0);
      // Undeclared exception!
      try { 
        propertyUtilsBean0.setMappedProperty((Object) basicDynaBean0, "AUS/jEf+u)e^fo/Z", "", (Object) basicDynaBean1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      ConvertingWrapDynaBean convertingWrapDynaBean0 = new ConvertingWrapDynaBean(propertyUtilsBean0);
      WrapDynaClass wrapDynaClass0 = convertingWrapDynaBean0.dynaClass;
      WrapDynaBean wrapDynaBean0 = new WrapDynaBean(convertingWrapDynaBean0, wrapDynaClass0);
      propertyUtilsBean0.copyProperties(wrapDynaBean0, convertingWrapDynaBean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<LazyDynaBean> class0 = LazyDynaBean.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      PropertyUtils propertyUtils0 = new PropertyUtils();
      propertyUtilsBean0.copyProperties(propertyUtils0, propertyUtils0);
      assertEquals('[', PropertyUtils.INDEXED_DELIM);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      // Undeclared exception!
      try { 
        PropertyUtils.copyProperties(propertyUtilsBean0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No origin bean specified
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<ConvertingWrapDynaBean> class0 = ConvertingWrapDynaBean.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      SuppressPropertiesBeanIntrospector suppressPropertiesBeanIntrospector0 = SuppressPropertiesBeanIntrospector.SUPPRESS_CLASS;
      boolean boolean0 = propertyUtilsBean0.removeBeanIntrospector(suppressPropertiesBeanIntrospector0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      Class<ConvertingWrapDynaBean> class0 = ConvertingWrapDynaBean.class;
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor("\")If", (Method) null, (Method) null);
      Method method0 = propertyUtilsBean0.getReadMethod(class0, propertyDescriptor0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<FluentPropertyBeanIntrospector> class0 = FluentPropertyBeanIntrospector.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      FastHashMap fastHashMap0 = new FastHashMap();
      Object object0 = propertyUtilsBean0.getPropertyOfMapBean(fastHashMap0, "w~TUun%G)074dgv");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      FastHashMap fastHashMap0 = new FastHashMap();
      SuppressPropertiesBeanIntrospector suppressPropertiesBeanIntrospector0 = SuppressPropertiesBeanIntrospector.SUPPRESS_CLASS;
      ConvertingWrapDynaBean convertingWrapDynaBean0 = new ConvertingWrapDynaBean(suppressPropertiesBeanIntrospector0);
      fastHashMap0.put("+mDVIVFHI3", convertingWrapDynaBean0);
      Object object0 = propertyUtilsBean0.getPropertyOfMapBean(fastHashMap0, "+mDVIVFHI3");
      assertSame(object0, convertingWrapDynaBean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      PropertyUtils propertyUtils0 = new PropertyUtils();
      PropertyDescriptor[] propertyDescriptorArray0 = propertyUtilsBean0.getPropertyDescriptors((Object) propertyUtils0);
      assertEquals(0, propertyDescriptorArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      Class<LazyDynaMap> class0 = LazyDynaMap.class;
      PropertyDescriptor[] propertyDescriptorArray0 = propertyUtilsBean0.getPropertyDescriptors(class0);
      assertEquals(6, propertyDescriptorArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      Class<Integer> class0 = Integer.class;
      PropertyDescriptor[] propertyDescriptorArray0 = propertyUtilsBean0.getPropertyDescriptors(class0);
      assertEquals(0, propertyDescriptorArray0.length);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      propertyUtilsBean0.setPropertyOfMapBean(hashMap0, "", "");
      Object object0 = propertyUtilsBean0.getNestedProperty(hashMap0, "");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<PropertyUtils> class0 = PropertyUtils.class;
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      FastHashMap fastHashMap0 = propertyUtilsBean0.getMappedPropertyDescriptors((Object) class0);
      assertNull(fastHashMap0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      Integer integer0 = LazyDynaBean.Integer_ZERO;
      // Undeclared exception!
      try { 
        propertyUtilsBean0.setPropertyOfMapBean((Map<String, Object>) null, "aw4?U@K", integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      ResultSetIterator resultSetIterator0 = new ResultSetIterator((ResultSetDynaClass) null);
      SuppressPropertiesBeanIntrospector suppressPropertiesBeanIntrospector0 = SuppressPropertiesBeanIntrospector.SUPPRESS_CLASS;
      // Undeclared exception!
      try { 
        propertyUtilsBean0.setNestedProperty(resultSetIterator0, "initCause", suppressPropertiesBeanIntrospector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      FastHashMap fastHashMap0 = new FastHashMap(15, 15);
      // Undeclared exception!
      try { 
        propertyUtilsBean0.setIndexedProperty((Object) fastHashMap0, "org.apache.commons.beanutils.MappedPropertyDescriptor", 15, (Object) propertyUtilsBean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null property value for 'org' on bean class 'class org.apache.commons.collections.FastHashMap'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      ResultSetIterator resultSetIterator0 = new ResultSetIterator((ResultSetDynaClass) null);
      // Undeclared exception!
      try { 
        propertyUtilsBean0.setIndexedProperty((Object) resultSetIterator0, "user", 536, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      BasicDynaBean basicDynaBean0 = new BasicDynaBean((DynaClass) null);
      // Undeclared exception!
      try { 
        propertyUtilsBean0.isWriteable(basicDynaBean0, "org.apache.commons.beanutils.converters.BigDecimalConverter");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<WrapDynaBean> class0 = WrapDynaBean.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getWriteMethod((Class<?>) null, (PropertyDescriptor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No bean class specified
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getWriteMethod((PropertyDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      ResultSetIterator resultSetIterator0 = new ResultSetIterator((ResultSetDynaClass) null);
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getSimpleProperty(resultSetIterator0, "sQ9Y^m");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<BasicDynaBean> class0 = BasicDynaBean.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getReadMethod((PropertyDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getPropertyOfMapBean((Map<?, ?>) null, ":;wj;%L");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0);
      BasicDynaBean basicDynaBean0 = new BasicDynaBean(rowSetDynaClass0);
      try { 
        propertyUtilsBean0.getProperty(basicDynaBean0, "");
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // Unknown property '' on dynaclass 'org.apache.commons.beanutils.RowSetDynaClass@2'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      ResultSetIterator resultSetIterator0 = new ResultSetIterator((ResultSetDynaClass) null);
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getMappedProperty((Object) resultSetIterator0, "D?B~Y,", "D?B~Y,");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      Class<ConvertingWrapDynaBean> class0 = ConvertingWrapDynaBean.class;
      DefaultIntrospectionContext defaultIntrospectionContext0 = new DefaultIntrospectionContext(class0);
      try { 
        propertyUtilsBean0.describe(defaultIntrospectionContext0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // Property 'propertyDescriptors' has no getter method in class 'class org.apache.commons.beanutils.DefaultIntrospectionContext'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      ResultSetIterator resultSetIterator0 = new ResultSetIterator((ResultSetDynaClass) null);
      // Undeclared exception!
      try { 
        propertyUtilsBean0.copyProperties(resultSetIterator0, resultSetIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<BasicDynaBean> class0 = BasicDynaBean.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      try { 
        propertyUtilsBean0.setSimpleProperty(wrapDynaClass0, "", class0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // Unknown property '' on class 'class org.apache.commons.beanutils.WrapDynaClass'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      Integer integer0 = LazyDynaBean.Integer_ZERO;
      // Undeclared exception!
      try { 
        propertyUtilsBean0.setSimpleProperty(integer0, "[Z3L34\"!zp<F0v^a ", "[Z3L34\"!zp<F0v^a ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Indexed property names are not allowed: Property '[Z3L34\"!zp<F0v^a ' on bean class 'class java.lang.Integer'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      FastHashMap fastHashMap0 = new FastHashMap(8);
      propertyUtilsBean0.setNestedProperty(fastHashMap0, ")}>s><M} s;p%a?^M", fastHashMap0);
      assertEquals(1, fastHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FastHashMap fastHashMap0 = new FastHashMap();
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.setNestedProperty(fastHashMap0, "+cl.", (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null property value for '+cl.' on bean class 'class org.apache.commons.collections.FastHashMap'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0, propertyUtilsBean0);
      // Undeclared exception!
      try { 
        propertyUtilsBean0.setNestedProperty(wrapDynaClass0, (String) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No name specified for bean class 'class org.apache.commons.beanutils.WrapDynaClass'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.setNestedProperty((Object) null, "' has no setter method in class '", (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      Class<ResultSetIterator> class0 = ResultSetIterator.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      // Undeclared exception!
      try { 
        propertyUtilsBean0.setIndexedProperty((Object) wrapDynaClass0, (String) null, 592, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No name specified for bean class 'class org.apache.commons.beanutils.WrapDynaClass'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      ConvertingWrapDynaBean convertingWrapDynaBean0 = new ConvertingWrapDynaBean(propertyUtilsBean0);
      boolean boolean0 = propertyUtilsBean0.isWriteable(convertingWrapDynaBean0, "<null>");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0, propertyUtilsBean0);
      BasicDynaBean basicDynaBean0 = new BasicDynaBean(wrapDynaClass0);
      boolean boolean0 = propertyUtilsBean0.isWriteable(basicDynaBean0, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      WrapDynaBean wrapDynaBean0 = new WrapDynaBean(propertyUtilsBean0, (WrapDynaClass) null);
      boolean boolean0 = propertyUtilsBean0.isReadable(wrapDynaBean0, ",9H&@0 p");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.isReadable((Object) null, "Qrror reading in5exed property '");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      PropertyDescriptor[] propertyDescriptorArray0 = new PropertyDescriptor[0];
      FastHashMap fastHashMap0 = new FastHashMap(551);
      BeanIntrospectionData beanIntrospectionData0 = new BeanIntrospectionData(propertyDescriptorArray0, fastHashMap0);
      try { 
        propertyUtilsBean0.getSimpleProperty(beanIntrospectionData0, "");
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // Unknown property '' on class 'class org.apache.commons.beanutils.BeanIntrospectionData'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<BeanIntrospectionData> class0 = BeanIntrospectionData.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      try { 
        propertyUtilsBean0.getPropertyEditorClass("bXy14qTM`_", "e3Ic x]4T.");
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // Unknown property 'e3Ic x]4T' on class 'class java.lang.String'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<ConvertingWrapDynaBean> class0 = ConvertingWrapDynaBean.class;
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0, propertyUtilsBean0);
      PropertyDescriptor[] propertyDescriptorArray0 = propertyUtilsBean0.getPropertyDescriptors((Object) wrapDynaClass0);
      assertEquals(2, propertyDescriptorArray0.length);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<WrapDynaBean> class0 = WrapDynaBean.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      try { 
        propertyUtilsBean0.getPropertyDescriptor(wrapDynaClass0, ".t%Br1n2}b!");
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // Unknown property '' on class 'class org.apache.commons.beanutils.WrapDynaClass'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getPropertyDescriptor((Object) null, "0;}tych");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<PropertyDescriptor> class0 = PropertyDescriptor.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      FastHashMap fastHashMap0 = new FastHashMap();
      try { 
        propertyUtilsBean0.getPropertyOfMapBean(fastHashMap0, "(:v.'RtaU6Mp");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing End Delimiter
         //
         verifyException("org.apache.commons.beanutils.expression.DefaultResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      // Undeclared exception!
      propertyUtilsBean0.getNestedProperty(resultSet0, "shutdown");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<FastHashMap> class0 = FastHashMap.class;
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getNestedProperty(class0, "mu0;(6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid mapped property 'mu0;(6' on bean class 'class java.lang.Class' Missing End Delimiter
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      Integer integer0 = LazyDynaBean.Integer_ZERO;
      Map<String, Object> map0 = propertyUtilsBean0.describe(integer0);
      Object object0 = propertyUtilsBean0.getNestedProperty(map0, "0;}tych");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getNestedProperty((Object) null, "org.apache.commons.beanutils.ConvertingWrapDynaBean");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      Class<BeanIntrospectionData> class0 = BeanIntrospectionData.class;
      try { 
        propertyUtilsBean0.getMappedProperty((Object) class0, "", "");
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // Unknown property ''+ on bean class 'class java.lang.Class'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<Object> class0 = Object.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getMappedProperty((Object) class0, (String) null, "org.apache.commons.beanutils.expression.DefaultResolver");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No name specified for bean class 'class java.lang.Class'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      PropertyUtils propertyUtils0 = new PropertyUtils();
      Map<String, Object> map0 = propertyUtilsBean0.describe(propertyUtils0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      IndexOutOfBoundsException indexOutOfBoundsException0 = new IndexOutOfBoundsException();
      propertyUtilsBean0.copyProperties(indexOutOfBoundsException0, indexOutOfBoundsException0);
      assertNull(indexOutOfBoundsException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<BasicDynaBean> class0 = BasicDynaBean.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      Resolver resolver0 = propertyUtilsBean0.getResolver();
      propertyUtilsBean0.setResolver(resolver0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<Object> class0 = Object.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getReadMethod(class0, (PropertyDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor("\")If", (Method) null, (Method) null);
      Class<LazyDynaBean> class0 = LazyDynaBean.class;
      Method method0 = propertyUtilsBean0.getWriteMethod(class0, propertyDescriptor0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getPropertyDescriptors((Class<?>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No bean class specified
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      ConvertingWrapDynaBean convertingWrapDynaBean0 = new ConvertingWrapDynaBean(propertyUtilsBean0);
      try { 
        propertyUtilsBean0.setNestedProperty(convertingWrapDynaBean0, "", convertingWrapDynaBean0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // Unknown property '' on dynaclass 'org.apache.commons.beanutils.WrapDynaClass@a'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.setSimpleProperty(propertyUtilsBean0, ")(\"ux-/<-iqb+9H}[:<", propertyUtilsBean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Mapped property names are not allowed: Property ')(\"ux-/<-iqb+9H}[:<' on bean class 'class org.apache.commons.beanutils.PropertyUtilsBean'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      FastHashMap fastHashMap0 = new FastHashMap();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.setSimpleProperty("xrg.apache.commons.collectio-s.Fast ash~ap", "xrg.apache.commons.collectio-s.Fast ash~ap", fastHashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Nested property names are not allowed: Property 'xrg.apache.commons.collectio-s.Fast ash~ap' on bean class 'class java.lang.String'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      FluentPropertyBeanIntrospector fluentPropertyBeanIntrospector0 = new FluentPropertyBeanIntrospector("uer");
      // Undeclared exception!
      try { 
        propertyUtilsBean0.setSimpleProperty((Object) null, "HFfsLp", fluentPropertyBeanIntrospector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      Class<Integer> class0 = Integer.class;
      try { 
        propertyUtilsBean0.setPropertyOfMapBean((Map<String, Object>) null, "C:Z%PJH>l^fww,=[C}", class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Indexed or mapped properties are not supported on objects of type Map: C:Z%PJH>l^fww,=[C}
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      SuppressPropertiesBeanIntrospector suppressPropertiesBeanIntrospector0 = SuppressPropertiesBeanIntrospector.SUPPRESS_CLASS;
      // Undeclared exception!
      try { 
        propertyUtilsBean0.setNestedProperty(" with value ", "[", suppressPropertiesBeanIntrospector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid indexed property '[' on bean class 'class java.lang.String'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<ResultSetIterator> class0 = ResultSetIterator.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      PropertyUtils propertyUtils0 = new PropertyUtils();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.setNestedProperty(wrapDynaClass0, "LZI>OZ:v~xON6({", propertyUtils0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid mapped property 'LZI>OZ:v~xON6({' on bean class 'class org.apache.commons.beanutils.WrapDynaClass'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      IndexOutOfBoundsException indexOutOfBoundsException0 = new IndexOutOfBoundsException("");
      Integer integer0 = LazyDynaBean.Integer_ZERO;
      ConvertingWrapDynaBean convertingWrapDynaBean0 = new ConvertingWrapDynaBean(integer0);
      try { 
        propertyUtilsBean0.setProperty(indexOutOfBoundsException0, "", convertingWrapDynaBean0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // Unknown property '' on class 'class java.lang.IndexOutOfBoundsException'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<LazyDynaMap> class0 = LazyDynaMap.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0, (PropertyUtilsBean) null);
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      SuppressPropertiesBeanIntrospector suppressPropertiesBeanIntrospector0 = SuppressPropertiesBeanIntrospector.SUPPRESS_CLASS;
      try { 
        propertyUtilsBean0.setNestedProperty(suppressPropertiesBeanIntrospector0, "org.apache.log4j.Priority", (Object) null);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // Unknown property 'org' on class 'class org.apache.commons.beanutils.SuppressPropertiesBeanIntrospector'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<LazyDynaMap> class0 = LazyDynaMap.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0, (PropertyUtilsBean) null);
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.setProperty((Object) null, "  setProperty(", wrapDynaClass0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PropertyUtils propertyUtils0 = new PropertyUtils();
      WrapDynaBean wrapDynaBean0 = new WrapDynaBean(propertyUtils0);
      ConvertingWrapDynaBean convertingWrapDynaBean0 = new ConvertingWrapDynaBean(wrapDynaBean0);
      WrapDynaClass wrapDynaClass0 = convertingWrapDynaBean0.dynaClass;
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      IndexOutOfBoundsException indexOutOfBoundsException0 = new IndexOutOfBoundsException();
      try { 
        propertyUtilsBean0.setProperty(indexOutOfBoundsException0, "    Converted  to String using toString() '", wrapDynaClass0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // Unknown property '    Converted  to String using toString'+ on bean class 'class java.lang.IndexOutOfBoundsException'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<PropertyDescriptor> class0 = PropertyDescriptor.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      BasicDynaBean basicDynaBean0 = new BasicDynaBean(wrapDynaClass0);
      try { 
        propertyUtilsBean0.setMappedProperty((Object) basicDynaBean0, "AUS/jEf+u)e^fo/Z", "AUS/jEf+u)e^fo/Z", (Object) basicDynaBean0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // Unknown property 'AUS/jEf+u)e^fo/Z' on bean class 'class org.apache.commons.beanutils.BasicDynaBean'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      WrapDynaBean wrapDynaBean0 = new WrapDynaBean(propertyUtilsBean0);
      // Undeclared exception!
      try { 
        propertyUtilsBean0.setMappedProperty((Object) wrapDynaBean0, (String) null, (String) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No name specified for bean class 'class org.apache.commons.beanutils.WrapDynaBean'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.setMappedProperty((Object) null, "h_e>", ",qv!4'+Ap_lqxg", (Object) "h_e>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      try { 
        propertyUtilsBean0.setMappedProperty((Object) "{)qCY:", "' has no getter method in class '", "CvX~1uL>LpQW5q-;", (Object) "CvX~1uL>LpQW5q-;");
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // Unknown property '' has no getter method in class '' on bean class 'class java.lang.String'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      Class<WrapDynaBean> class0 = WrapDynaBean.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0, propertyUtilsBean0);
      BasicDynaBean basicDynaBean0 = new BasicDynaBean(wrapDynaClass0);
      // Undeclared exception!
      try { 
        propertyUtilsBean0.setMappedProperty((Object) class0, "1WNF", (Object) basicDynaBean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid mapped property '1WNF' on bean class 'class java.lang.Class'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      BasicDynaBean basicDynaBean0 = new BasicDynaBean((DynaClass) null);
      // Undeclared exception!
      try { 
        propertyUtilsBean0.setMappedProperty((Object) basicDynaBean0, (String) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No name specified for bean class 'class org.apache.commons.beanutils.BasicDynaBean'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        propertyUtilsBean0.setMappedProperty((Object) null, (String) null, (Object) class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      ConvertingWrapDynaBean convertingWrapDynaBean0 = new ConvertingWrapDynaBean(propertyUtilsBean0);
      try { 
        propertyUtilsBean0.setIndexedProperty((Object) convertingWrapDynaBean0, " returns void", (-2322), (Object) " returns void");
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // Unknown property ' returns void' on bean class 'class org.apache.commons.beanutils.ConvertingWrapDynaBean'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<ResultSetIterator> class0 = ResultSetIterator.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      IndexOutOfBoundsException indexOutOfBoundsException0 = new IndexOutOfBoundsException();
      try { 
        propertyUtilsBean0.setIndexedProperty((Object) class0, "", (-33), (Object) indexOutOfBoundsException0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // Unknown property '' on bean class 'class java.lang.Class'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.setIndexedProperty((Object) null, "39nATi*fIywL", (-715), (Object) propertyUtilsBean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      Class<String> class0 = String.class;
      FastHashMap fastHashMap0 = new FastHashMap();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.setIndexedProperty((Object) fastHashMap0, "org.apache.commons.collections.FastHaShMap", (Object) class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid indexed property 'org.apache.commons.collections.FastHaShMap' on bean class 'class org.apache.commons.collections.FastHashMap'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<LazyDynaMap> class0 = LazyDynaMap.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      HashMap<String, DynaProperty> hashMap0 = wrapDynaClass0.propertiesMap;
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.setIndexedProperty((Object) hashMap0, (String) null, (Object) wrapDynaClass0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No name specified for bean class 'class java.util.HashMap'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.setIndexedProperty((Object) null, "8(LD", (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      Class<ConvertingWrapDynaBean> class0 = ConvertingWrapDynaBean.class;
      // Undeclared exception!
      try { 
        propertyUtilsBean0.isWriteable(class0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No name specified for bean class 'class java.lang.Class'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.isWriteable((Object) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0);
      BasicDynaBean basicDynaBean0 = new BasicDynaBean(rowSetDynaClass0);
      propertyUtilsBean0.copyProperties(basicDynaBean0, rowSetMetaDataImpl0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<ResultSetIterator> class0 = ResultSetIterator.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      BasicDynaBean basicDynaBean0 = new BasicDynaBean(wrapDynaClass0);
      boolean boolean0 = propertyUtilsBean0.isReadable(basicDynaBean0, " for property '");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      HashMap<WrapDynaBean, String> hashMap0 = new HashMap<WrapDynaBean, String>();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.isReadable(hashMap0, "org.apache.commons.collections.FastHashMap");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null property value for 'org' on bean class 'class java.util.HashMap'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      IndexOutOfBoundsException indexOutOfBoundsException0 = new IndexOutOfBoundsException("Formatting");
      ConvertingWrapDynaBean convertingWrapDynaBean0 = new ConvertingWrapDynaBean(indexOutOfBoundsException0);
      WrapDynaClass wrapDynaClass0 = convertingWrapDynaBean0.dynaClass;
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.isReadable("Formatting", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No name specified for bean class 'class java.lang.String'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<String> class0 = String.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      FastHashMap fastHashMap0 = new FastHashMap(51);
      ConvertingWrapDynaBean convertingWrapDynaBean0 = new ConvertingWrapDynaBean(fastHashMap0);
      try { 
        propertyUtilsBean0.getSimpleProperty(convertingWrapDynaBean0, "i0)s>g");
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // Unknown property 'i0)s>g' on dynaclass 'org.apache.commons.beanutils.WrapDynaClass@15'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      SuppressPropertiesBeanIntrospector suppressPropertiesBeanIntrospector0 = SuppressPropertiesBeanIntrospector.SUPPRESS_CLASS;
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getSimpleProperty(suppressPropertiesBeanIntrospector0, "T*bV{1R/Mer1{|(t");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Mapped property names are not allowed: Property 'T*bV{1R/Mer1{|(t' on bean class 'class org.apache.commons.beanutils.SuppressPropertiesBeanIntrospector'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      Class<ResultSetIterator> class0 = ResultSetIterator.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0, propertyUtilsBean0);
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getSimpleProperty(wrapDynaClass0, "&|;%mY[hd|p'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Indexed property names are not allowed: Property '&|;%mY[hd|p'' on bean class 'class org.apache.commons.beanutils.WrapDynaClass'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<String> class0 = String.class;
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getSimpleProperty(class0, "org.apache.commons.collections.FastHashMap");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Nested property names are not allowed: Property 'org.apache.commons.collections.FastHashMap' on bean class 'class java.lang.Class'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      FluentPropertyBeanIntrospector fluentPropertyBeanIntrospector0 = new FluentPropertyBeanIntrospector("N7@5`eh*&hve");
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getSimpleProperty(fluentPropertyBeanIntrospector0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No name specified for bean class 'class org.apache.commons.beanutils.FluentPropertyBeanIntrospector'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getSimpleProperty((Object) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      ConvertingWrapDynaBean convertingWrapDynaBean0 = new ConvertingWrapDynaBean(propertyUtilsBean0);
      Class<?> class0 = propertyUtilsBean0.getPropertyType(convertingWrapDynaBean0, "iOgq{>Q7I! FxP\":bE\"");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      SuppressPropertiesBeanIntrospector suppressPropertiesBeanIntrospector0 = SuppressPropertiesBeanIntrospector.SUPPRESS_CLASS;
      try { 
        propertyUtilsBean0.getPropertyType(suppressPropertiesBeanIntrospector0, "org.apache.commons.beanutils.WrapDynaClass$CacheKey");
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // Unknown property 'org' on class 'class org.apache.commons.beanutils.SuppressPropertiesBeanIntrospector'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getPropertyType(class0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No name specified for bean class 'class java.lang.Class'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getPropertyType((Object) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      Class<?> class0 = propertyUtilsBean0.getPropertyType(" on bean clas ", "{)qCY:");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      IndexOutOfBoundsException indexOutOfBoundsException0 = new IndexOutOfBoundsException((String) null);
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getPropertyEditorClass(indexOutOfBoundsException0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No name specified for bean class 'class java.lang.IndexOutOfBoundsException'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getPropertyDescriptors((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      Class<WrapDynaBean> class0 = WrapDynaBean.class;
      ConvertingWrapDynaBean convertingWrapDynaBean0 = new ConvertingWrapDynaBean(class0);
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      convertingWrapDynaBean0.dynaClass = wrapDynaClass0;
      // Undeclared exception!
      try { 
        propertyUtilsBean0.describe(convertingWrapDynaBean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Error reading property 'instance', exception - java.lang.NoSuchMethodException: Property 'instance' has no getter method in class 'class java.lang.Class'
         //
         verifyException("org.apache.commons.beanutils.WrapDynaBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      Integer integer0 = LazyDynaBean.Integer_ZERO;
      Map<String, Object> map0 = propertyUtilsBean0.describe(integer0);
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getPropertyDescriptor(map0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No name specified for bean class 'class java.util.HashMap'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      try { 
        propertyUtilsBean0.getPropertyOfMapBean((Map<?, ?>) null, "fb[FL.:NY% ~Z/w");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Indexed or mapped properties are not supported on objects of type Map: fb[FL.:NY% ~Z/w
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<DefaultBeanIntrospector> class0 = DefaultBeanIntrospector.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      FastHashMap fastHashMap0 = new FastHashMap(0);
      try { 
        propertyUtilsBean0.getPropertyOfMapBean(fastHashMap0, " (class ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Indexed or mapped properties are not supported on objects of type Map:  (class 
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getNestedProperty(fileSystemHandling0, "2Xlh<[V~[I@x~oX:i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid indexed property '2Xlh<[V~[I@x~oX:i' on bean class 'class org.evosuite.runtime.testdata.FileSystemHandling' Missing End Delimiter
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      Class<WrapDynaBean> class0 = WrapDynaBean.class;
      ConvertingWrapDynaBean convertingWrapDynaBean0 = new ConvertingWrapDynaBean(class0);
      propertyUtilsBean0.describe(convertingWrapDynaBean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      try { 
        propertyUtilsBean0.getNestedProperty("EH 2", "org.apache.commons.beanutils.expression.DefaultResolver");
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // Unknown property 'org' on class 'class java.lang.String'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      String string0 = ".PKW?O@NZz";
      String string1 = "org.apa9he.commons.beanutils.ConvertingWrapDynaBean";
      propertyUtilsBean0.isWriteable(".PKW?O@NZz", "org.apa9he.commons.beanutils.ConvertingWrapDynaBean");
      Class<SuppressPropertiesBeanIntrospector> class0 = SuppressPropertiesBeanIntrospector.class;
      FastHashMap fastHashMap0 = propertyUtilsBean0.getMappedPropertyDescriptors(class0);
      String string2 = "org.apache.commons.beanutils.WeakFastHashMap";
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getNestedProperty(fastHashMap0, "org.apa9he.commons.beanutils.ConvertingWrapDynaBean");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null property value for 'org.apa9he.commons.beanutils.ConvertingWrapDynaBean' on bean class 'class org.apache.commons.collections.FastHashMap'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      try { 
        propertyUtilsBean0.getNestedProperty(propertyUtilsBean0, ",qORTU(tKE2)j7");
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // Unknown property ',qORTU'+ on bean class 'class org.apache.commons.beanutils.PropertyUtilsBean'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      SuppressPropertiesBeanIntrospector suppressPropertiesBeanIntrospector0 = SuppressPropertiesBeanIntrospector.SUPPRESS_CLASS;
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getNestedProperty(suppressPropertiesBeanIntrospector0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No name specified for bean class 'class org.apache.commons.beanutils.SuppressPropertiesBeanIntrospector'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getProperty((Object) null, "kPN");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      FastHashMap fastHashMap0 = propertyUtilsBean0.getMappedPropertyDescriptors((Class<?>) null);
      assertNull(fastHashMap0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      ConvertingWrapDynaBean convertingWrapDynaBean0 = new ConvertingWrapDynaBean(propertyUtilsBean0);
      try { 
        propertyUtilsBean0.getMappedProperty((Object) convertingWrapDynaBean0, "a/(=U1?B'", "");
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // Unknown property 'a/(=U1?B''+ on bean class 'class org.apache.commons.beanutils.ConvertingWrapDynaBean'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      FluentPropertyBeanIntrospector fluentPropertyBeanIntrospector0 = new FluentPropertyBeanIntrospector();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getMappedProperty((Object) fluentPropertyBeanIntrospector0, "H*~ Va_i2", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No key specified for property 'H*~ Va_i2' on bean class class org.apache.commons.beanutils.FluentPropertyBeanIntrospector'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getMappedProperty((Object) null, "z8n=_(|dbZ}gL", "z8n=_(|dbZ}gL");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Integer integer0 = LazyDynaBean.Integer_ZERO;
      boolean boolean0 = PropertyUtils.isReadable(integer0, "    Converted  to String using toString() '");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Integer integer0 = LazyDynaBean.Integer_ZERO;
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getMappedProperty((Object) integer0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No name specified for bean class 'class java.lang.Integer'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getMappedProperty((Object) null, "@JN<vTn]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<ConvertingWrapDynaBean> class0 = ConvertingWrapDynaBean.class;
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getMappedProperty((Object) class0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid mapped property '' on bean class 'class java.lang.Class'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      PropertyUtils propertyUtils0 = new PropertyUtils();
      WrapDynaBean wrapDynaBean0 = new WrapDynaBean(propertyUtils0);
      ConvertingWrapDynaBean convertingWrapDynaBean0 = new ConvertingWrapDynaBean(wrapDynaBean0);
      WrapDynaClass wrapDynaClass0 = convertingWrapDynaBean0.dynaClass;
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      try { 
        propertyUtilsBean0.getIndexedProperty((Object) wrapDynaBean0, ".=>0J!#nD;QUE%OD", 4986);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // Unknown property '.=>0J!#nD;QUE%OD' on bean class 'class org.apache.commons.beanutils.WrapDynaBean'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      IndexOutOfBoundsException indexOutOfBoundsException0 = new IndexOutOfBoundsException();
      try { 
        propertyUtilsBean0.getIndexedProperty((Object) indexOutOfBoundsException0, "&{)|p*uH)J%m", 10);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // Unknown property '&{)|p*uH)J%m' on bean class 'class java.lang.IndexOutOfBoundsException'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      try { 
        propertyUtilsBean0.getIndexedProperty((Object) "", "", (-294));
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // Unknown property '' on bean class 'class java.lang.String'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getIndexedProperty((Object) null, "=", 516);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getIndexedProperty((Object) " on bean class '", (String) null, (-294));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No name specified for bean class 'class java.lang.String'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<FastHashMap> class0 = FastHashMap.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getIndexedProperty((Object) wrapDynaClass0, "Dd");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid indexed property 'Dd' on bean class 'class org.apache.commons.beanutils.WrapDynaClass'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      IndexOutOfBoundsException indexOutOfBoundsException0 = new IndexOutOfBoundsException();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getIndexedProperty((Object) indexOutOfBoundsException0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No name specified for bean class 'class java.lang.IndexOutOfBoundsException'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<PropertyDescriptor> class0 = PropertyDescriptor.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getIndexedProperty((Object) null, "+mDIViHI3^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.describe((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      try { 
        propertyUtilsBean0.describe(linkedList0);
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      ResultSetDynaClass resultSetDynaClass0 = new ResultSetDynaClass(resultSet0, false, false);
      ResultSetIterator resultSetIterator0 = new ResultSetIterator(resultSetDynaClass0);
      // Undeclared exception!
      try { 
        propertyUtilsBean0.copyProperties((Object) null, resultSetIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No destination bean specified
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<LazyDynaMap> class0 = LazyDynaMap.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0, (PropertyUtilsBean) null);
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.addBeanIntrospector((BeanIntrospector) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BeanIntrospector must not be null!
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      FluentPropertyBeanIntrospector fluentPropertyBeanIntrospector0 = new FluentPropertyBeanIntrospector();
      propertyUtilsBean0.addBeanIntrospector(fluentPropertyBeanIntrospector0);
      assertEquals("set", fluentPropertyBeanIntrospector0.getWriteMethodPrefix());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<WrapDynaBean> class0 = WrapDynaBean.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      propertyUtilsBean0.setResolver((Resolver) null);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      propertyUtilsBean0.clearDescriptors();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      IndexedPropertyDescriptor indexedPropertyDescriptor0 = new IndexedPropertyDescriptor("\")If", (Method) null, (Method) null, (Method) null, (Method) null);
      Method method0 = propertyUtilsBean0.getWriteMethod((PropertyDescriptor) indexedPropertyDescriptor0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor("\")If", (Method) null, (Method) null);
      Method method0 = propertyUtilsBean0.getReadMethod(propertyDescriptor0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      propertyUtilsBean0.resetBeanIntrospectors();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      ResultSetIterator resultSetIterator0 = new ResultSetIterator((ResultSetDynaClass) null);
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getProperty(resultSetIterator0, ", Size: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }
}
