/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 18:24:48 GMT 2022
 */

package org.apache.commons.beanutils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.function.ToLongFunction;
import org.apache.commons.beanutils.BeanComparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BeanComparator_ESTest extends BeanComparator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BeanComparator<BeanComparator<String>> beanComparator0 = new BeanComparator<BeanComparator<String>>();
      BeanComparator<Integer> beanComparator1 = new BeanComparator<Integer>();
      ToLongFunction<Integer> toLongFunction0 = (ToLongFunction<Integer>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Integer> comparator0 = beanComparator1.thenComparingLong(toLongFunction0);
      BeanComparator<Object> beanComparator2 = new BeanComparator<Object>("", beanComparator0);
      // Undeclared exception!
      try { 
        beanComparator2.compare(comparator0, beanComparator1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // NoSuchMethodException: java.lang.NoSuchMethodException: Unknown property '' on class 'class java.util.Comparator$$Lambda$44/354158692'
         //
         verifyException("org.apache.commons.beanutils.BeanComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BeanComparator<Object> beanComparator0 = new BeanComparator<Object>();
      String string0 = beanComparator0.getProperty();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BeanComparator<BeanComparator<Integer>> beanComparator0 = new BeanComparator<BeanComparator<Integer>>("Bwkv:LE{)>M,e^[N]Bp");
      BeanComparator<BeanComparator<String>> beanComparator1 = new BeanComparator<BeanComparator<String>>("Bwkv:LE{)>M,e^[N]Bp", beanComparator0);
      String string0 = beanComparator1.getProperty();
      assertEquals("Bwkv:LE{)>M,e^[N]Bp", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BeanComparator<Object> beanComparator0 = new BeanComparator<Object>();
      BeanComparator<Integer> beanComparator1 = new BeanComparator<Integer>((String) null, beanComparator0);
      Integer integer0 = new Integer((-1605));
      int int0 = beanComparator1.compare(integer0, integer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BeanComparator<String> beanComparator0 = new BeanComparator<String>();
      int int0 = beanComparator0.compare("Bwkv:LE{)>M,e^[N]Bp", "0:3x4.;\"Hyb2");
      assertEquals(18, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BeanComparator<Integer> beanComparator0 = new BeanComparator<Integer>();
      Integer integer0 = new Integer((-920));
      Integer integer1 = new Integer((-176));
      int int0 = beanComparator0.compare(integer0, integer1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BeanComparator<Object> beanComparator0 = new BeanComparator<Object>();
      BeanComparator<Comparable<String>> beanComparator1 = new BeanComparator<Comparable<String>>("r&:w;1", beanComparator0);
      // Undeclared exception!
      try { 
        beanComparator1.compare((Comparable<String>) null, (Comparable<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BeanComparator<Comparable<String>> beanComparator0 = new BeanComparator<Comparable<String>>();
      BeanComparator<Object> beanComparator1 = new BeanComparator<Object>();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        beanComparator1.compare(object0, beanComparator0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.collections.comparators.ComparableComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BeanComparator<BeanComparator<Integer>> beanComparator0 = new BeanComparator<BeanComparator<Integer>>("Bwkv:LE{)>M,e^[N]Bp");
      beanComparator0.setProperty("Bwkv:LE{)>M,e^[N]Bp");
      assertEquals("Bwkv:LE{)>M,e^[N]Bp", beanComparator0.getProperty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BeanComparator<String> beanComparator0 = new BeanComparator<String>();
      BeanComparator<Object> beanComparator1 = new BeanComparator<Object>("");
      boolean boolean0 = beanComparator0.equals(beanComparator1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BeanComparator<BeanComparator<Integer>> beanComparator0 = new BeanComparator<BeanComparator<Integer>>("Bwkv:LE{)>M,e^[N]Bp");
      BeanComparator<BeanComparator<String>> beanComparator1 = new BeanComparator<BeanComparator<String>>("Bwkv:LE{)>M,e^[N]Bp", beanComparator0);
      BeanComparator<Object> beanComparator2 = new BeanComparator<Object>("' is null, so skipping ths setter", beanComparator0);
      boolean boolean0 = beanComparator2.equals(beanComparator1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BeanComparator<BeanComparator<Object>> beanComparator0 = new BeanComparator<BeanComparator<Object>>("");
      BeanComparator<Comparable<String>> beanComparator1 = new BeanComparator<Comparable<String>>("", beanComparator0);
      BeanComparator<Object> beanComparator2 = new BeanComparator<Object>("", beanComparator0);
      boolean boolean0 = beanComparator2.equals(beanComparator1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BeanComparator<String> beanComparator0 = new BeanComparator<String>();
      BeanComparator<Object> beanComparator1 = new BeanComparator<Object>("");
      BeanComparator<Object> beanComparator2 = new BeanComparator<Object>("", beanComparator1);
      boolean boolean0 = beanComparator0.equals(beanComparator2);
      assertFalse(beanComparator2.equals((Object)beanComparator1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BeanComparator<Object> beanComparator0 = new BeanComparator<Object>();
      BeanComparator<Object> beanComparator1 = new BeanComparator<Object>();
      boolean boolean0 = beanComparator0.equals(beanComparator1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BeanComparator<Integer> beanComparator0 = new BeanComparator<Integer>();
      BeanComparator<Object> beanComparator1 = new BeanComparator<Object>("", beanComparator0);
      Object object0 = new Object();
      boolean boolean0 = beanComparator1.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BeanComparator<Integer> beanComparator0 = new BeanComparator<Integer>("3", (Comparator<?>) null);
      assertEquals("3", beanComparator0.getProperty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Comparator<Comparable<Object>> comparator0 = Comparator.naturalOrder();
      BeanComparator<String> beanComparator0 = new BeanComparator<String>((String) null, comparator0);
      // Undeclared exception!
      try { 
        beanComparator0.compare((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Comparators$NaturalOrderComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BeanComparator<Integer> beanComparator0 = new BeanComparator<Integer>();
      BeanComparator<Object> beanComparator1 = new BeanComparator<Object>("", beanComparator0);
      beanComparator1.hashCode();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BeanComparator<Integer> beanComparator0 = new BeanComparator<Integer>();
      BeanComparator<Object> beanComparator1 = new BeanComparator<Object>("", beanComparator0);
      String string0 = beanComparator1.getProperty();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BeanComparator<Integer> beanComparator0 = new BeanComparator<Integer>();
      Comparator<?> comparator0 = beanComparator0.getComparator();
      assertNotNull(comparator0);
  }
}
