/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 18:02:24 GMT 2022
 */

package org.apache.commons.beanutils.converters;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.beanutils.converters.CalendarConverter;
import org.apache.commons.beanutils.converters.DateConverter;
import org.apache.commons.beanutils.converters.SqlDateConverter;
import org.apache.commons.beanutils.converters.SqlTimeConverter;
import org.apache.commons.beanutils.converters.SqlTimestampConverter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateTimeConverter_ESTest extends DateTimeConverter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SqlTimeConverter sqlTimeConverter0 = new SqlTimeConverter();
      Class<Timestamp> class0 = Timestamp.class;
      String[] stringArray0 = new String[9];
      stringArray0[1] = "X";
      sqlTimeConverter0.setPatterns(stringArray0);
      try { 
        sqlTimeConverter0.convertToType(class0, (Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error converting 'Class' to 'java.sql.Timestamp' using  patterns 'null, X, null, null, null, null, null, null, null'
         //
         verifyException("org.apache.commons.beanutils.converters.DateTimeConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateConverter dateConverter0 = new DateConverter();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-197), "\"1me");
      dateConverter0.setTimeZone(simpleTimeZone0);
      TimeZone timeZone0 = dateConverter0.getTimeZone();
      assertFalse(timeZone0.useDaylightTime());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4427), 65, 65, (-4427), (-4427));
      SqlTimeConverter sqlTimeConverter0 = new SqlTimeConverter(mockGregorianCalendar0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(65, "");
      sqlTimeConverter0.setTimeZone(simpleTimeZone0);
      TimeZone timeZone0 = sqlTimeConverter0.getTimeZone();
      assertEquals("java.util.SimpleTimeZone[id=,offset=65,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateConverter dateConverter0 = new DateConverter();
      String[] stringArray0 = new String[1];
      dateConverter0.setPatterns(stringArray0);
      String[] stringArray1 = dateConverter0.getPatterns();
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateConverter dateConverter0 = new DateConverter();
      String[] stringArray0 = new String[0];
      dateConverter0.setPatterns(stringArray0);
      String[] stringArray1 = dateConverter0.getPatterns();
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateConverter dateConverter0 = new DateConverter();
      Locale locale0 = Locale.KOREAN;
      dateConverter0.setLocale(locale0);
      Locale locale1 = dateConverter0.getLocale();
      assertEquals("", locale1.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SqlDateConverter sqlDateConverter0 = new SqlDateConverter();
      Class<Time> class0 = Time.class;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Time time0 = sqlDateConverter0.convertToType(class0, (Object) mockGregorianCalendar0);
      assertEquals("20:21:21", time0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SqlDateConverter sqlDateConverter0 = new SqlDateConverter();
      Class<MockCalendar> class0 = MockCalendar.class;
      try { 
        sqlDateConverter0.convertToType(class0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.converters.DateTimeConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SqlTimeConverter sqlTimeConverter0 = new SqlTimeConverter();
      try { 
        sqlTimeConverter0.convertToString((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateConverter dateConverter0 = new DateConverter();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "    (N.B. Converters can be configured to use default values to avoid throwing exceptions)";
      dateConverter0.setPatterns(stringArray0);
      try { 
        dateConverter0.convertToString(mockGregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'N'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      SqlTimeConverter sqlTimeConverter0 = new SqlTimeConverter(mockGregorianCalendar0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-6), ">TI");
      sqlTimeConverter0.setTimeZone(simpleTimeZone0);
      String string0 = sqlTimeConverter0.toString();
      assertEquals("SqlTimeConverter[UseDefault=true, UseLocaleFormat=false, TimeZone=java.util.SimpleTimeZone[id=>TI,offset=-6,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]]", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      SqlTimeConverter sqlTimeConverter0 = new SqlTimeConverter(mockGregorianCalendar0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      sqlTimeConverter0.setLocale(locale0);
      String string0 = sqlTimeConverter0.toString();
      assertEquals("SqlTimeConverter[UseDefault=true, UseLocaleFormat=true, Locale=zh_TW]", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SqlTimestampConverter sqlTimestampConverter0 = new SqlTimestampConverter();
      String[] stringArray0 = new String[4];
      sqlTimestampConverter0.setPatterns(stringArray0);
      String string0 = sqlTimestampConverter0.toString();
      assertEquals("SqlTimestampConverter[UseDefault=false, UseLocaleFormat=true, Patterns={null, null, null, null}]", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SqlTimeConverter sqlTimeConverter0 = new SqlTimeConverter();
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      sqlTimeConverter0.setTimeZone(timeZone0);
      String[] stringArray0 = new String[3];
      stringArray0[1] = "";
      sqlTimeConverter0.setPatterns(stringArray0);
      Class<?> class0 = sqlTimeConverter0.getDefaultType();
      Class<Time> class1 = Time.class;
      try { 
        sqlTimeConverter0.convertToType(class1, (Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error converting 'Class' to 'java.sql.Time' using  patterns 'null, , null'
         //
         verifyException("org.apache.commons.beanutils.converters.DateTimeConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateConverter dateConverter0 = new DateConverter();
      Locale locale0 = Locale.FRANCE;
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)dateConverter0.getFormat(locale0, (TimeZone) null);
      assertEquals("dd/MM/yy", simpleDateFormat0.toPattern());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CalendarConverter calendarConverter0 = new CalendarConverter();
      SqlTimestampConverter sqlTimestampConverter0 = null;
      try {
        sqlTimestampConverter0 = new SqlTimestampConverter(calendarConverter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // String must be in JDBC format [yyyy-MM-dd HH:mm:ss.fffffffff] to create a java.sql.Timestamp
         //
         verifyException("org.apache.commons.beanutils.converters.DateTimeConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SqlTimestampConverter sqlTimestampConverter0 = new SqlTimestampConverter();
      SqlTimeConverter sqlTimeConverter0 = null;
      try {
        sqlTimeConverter0 = new SqlTimeConverter(sqlTimestampConverter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // String must be in JDBC format [HH:mm:ss] to create a java.sql.Time
         //
         verifyException("org.apache.commons.beanutils.converters.DateTimeConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SqlDateConverter sqlDateConverter0 = null;
      try {
        sqlDateConverter0 = new SqlDateConverter("2/14/14");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // String must be in JDBC format [yyyy-MM-dd] to create a java.sql.Date
         //
         verifyException("org.apache.commons.beanutils.converters.DateTimeConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      SqlTimeConverter sqlTimeConverter0 = new SqlTimeConverter(mockGregorianCalendar0);
      Class<Timestamp> class0 = Timestamp.class;
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      sqlTimeConverter0.setLocale(locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-6), ">TI");
      sqlTimeConverter0.setTimeZone(simpleTimeZone0);
      Class<Calendar> class1 = Calendar.class;
      Calendar calendar0 = sqlTimeConverter0.convert(class1, (Object) class0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=java.util.SimpleTimeZone[id=>TI,offset=-6,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=314,ZONE_OFFSET=-6,DST_OFFSET=0]", calendar0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(45, 45, 45, 45, 45, 45);
      SqlTimeConverter sqlTimeConverter0 = new SqlTimeConverter(mockGregorianCalendar0);
      Class<Timestamp> class0 = Timestamp.class;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(45, "");
      sqlTimeConverter0.setTimeZone(simpleTimeZone0);
      Class<Calendar> class1 = Calendar.class;
      Calendar calendar0 = sqlTimeConverter0.convert(class1, (Object) class0);
      assertFalse(calendar0.equals((Object)mockGregorianCalendar0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      SqlTimeConverter sqlTimeConverter0 = new SqlTimeConverter(mockGregorianCalendar0);
      Class<Timestamp> class0 = Timestamp.class;
      Timestamp timestamp0 = sqlTimeConverter0.handleMissing(class0);
      assertEquals(320000000, timestamp0.getNanos());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Time time0 = new Time(1723L);
      SqlDateConverter sqlDateConverter0 = new SqlDateConverter(time0);
      assertTrue(sqlDateConverter0.isUseDefault());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CalendarConverter calendarConverter0 = new CalendarConverter();
      Class<String> class0 = String.class;
      String[] stringArray0 = new String[0];
      calendarConverter0.setPatterns(stringArray0);
      try { 
        calendarConverter0.convertToType(class0, (Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error converting 'Class' to 'String' using pattern 'M/d/yy'
         //
         verifyException("org.apache.commons.beanutils.converters.DateTimeConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      SqlTimeConverter sqlTimeConverter0 = new SqlTimeConverter(mockGregorianCalendar0);
      Class<Timestamp> class0 = Timestamp.class;
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      sqlTimeConverter0.setLocale(locale0);
      Class<Calendar> class1 = Calendar.class;
      Calendar calendar0 = sqlTimeConverter0.convert(class1, (Object) class0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CalendarConverter calendarConverter0 = new CalendarConverter();
      calendarConverter0.setPattern("");
      Class<Object> class0 = Object.class;
      try { 
        calendarConverter0.convertToType(class0, (Object) "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error converting 'String' to 'Object' using pattern ''
         //
         verifyException("org.apache.commons.beanutils.converters.DateTimeConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CalendarConverter calendarConverter0 = new CalendarConverter();
      Class<Integer> class0 = Integer.class;
      Long long0 = new Long(1000L);
      // Undeclared exception!
      try { 
        calendarConverter0.convert(class0, (Object) long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // CalendarConverter cannot handle conversion to 'Integer'
         //
         verifyException("org.apache.commons.beanutils.converters.DateTimeConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateConverter dateConverter0 = new DateConverter();
      Date date0 = new Date(1000L);
      dateConverter0.setDefaultValue(date0);
      assertTrue(dateConverter0.isUseDefault());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Timestamp timestamp0 = new Timestamp(1105L);
      CalendarConverter calendarConverter0 = new CalendarConverter(timestamp0);
      Locale locale0 = Locale.CHINA;
      TimeZone timeZone0 = TimeZone.getTimeZone("CalendarConverter[UseDefault=true, UseLocaleFormat=false]");
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)calendarConverter0.getFormat(locale0, timeZone0);
      assertEquals("yy-M-d", simpleDateFormat0.toPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2506, 2506, 2506, 2506, 2506);
      CalendarConverter calendarConverter0 = new CalendarConverter();
      calendarConverter0.setPattern("");
      String string0 = calendarConverter0.convertToString(mockGregorianCalendar0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateConverter dateConverter0 = new DateConverter();
      dateConverter0.setUseLocaleFormat(true);
      MockDate mockDate0 = new MockDate();
      String string0 = dateConverter0.convertToString(mockDate0);
      assertEquals("2/14/14", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CalendarConverter calendarConverter0 = new CalendarConverter();
      String[] stringArray0 = new String[0];
      calendarConverter0.setPatterns(stringArray0);
      Long long0 = new Long(988L);
      String string0 = calendarConverter0.convertToString(long0);
      assertEquals("1/1/70", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      SqlTimeConverter sqlTimeConverter0 = new SqlTimeConverter(mockGregorianCalendar0);
      String string0 = sqlTimeConverter0.convertToString("SqlTimeConverter[UseDefault=true, UseLocaleFormat=true, Locale=zh_TW, TimeZone=java.util.SimpleTimeZone[id=>TI,offset=-6,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]]");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SqlTimestampConverter sqlTimestampConverter0 = new SqlTimestampConverter();
      sqlTimestampConverter0.setPatterns((String[]) null);
      assertFalse(sqlTimestampConverter0.isUseDefault());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DateConverter dateConverter0 = new DateConverter();
      String[] stringArray0 = dateConverter0.getPatterns();
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      SqlTimeConverter sqlTimeConverter0 = new SqlTimeConverter(mockGregorianCalendar0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      sqlTimeConverter0.setLocale(locale0);
      String string0 = sqlTimeConverter0.convertToString("SqlTimeConverter[UseDefault=true, UseLocaleFormat=true, Locale=zh_TW, TimeZone=java.util.SimpleTimeZone[id=>TI,offset=-6,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]]");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SqlTimestampConverter sqlTimestampConverter0 = new SqlTimestampConverter();
      TimeZone timeZone0 = sqlTimestampConverter0.getTimeZone();
      assertNull(timeZone0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4129), (-4129), (-4129));
      CalendarConverter calendarConverter0 = new CalendarConverter(mockGregorianCalendar0);
      calendarConverter0.setPattern("L)a)L=sI");
      Class<Object> class0 = Object.class;
      try { 
        calendarConverter0.convertToType(class0, (Object) "L)a)L=sI");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'I'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SqlTimestampConverter sqlTimestampConverter0 = new SqlTimestampConverter();
      Locale locale0 = sqlTimestampConverter0.getLocale();
      assertNull(locale0);
  }
}
