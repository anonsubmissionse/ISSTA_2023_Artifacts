/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 18:18:47 GMT 2022
 */

package org.apache.commons.beanutils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.WeakHashMap;
import java.util.function.BiFunction;
import org.apache.commons.beanutils.WeakFastHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class WeakFastHashMap_ESTest extends WeakFastHashMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      WeakFastHashMap<String, Object> weakFastHashMap0 = new WeakFastHashMap<String, Object>(2268);
      WeakFastHashMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>> weakFastHashMap1 = new WeakFastHashMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>>(2268);
      Integer integer0 = new Integer(2268);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("org.apache.commons.beanutils.WeakFastHashMap$EntrySet", "org.apache.commons.beanutils.WeakFastHashMap$EntrySet");
      weakFastHashMap1.put(integer0, abstractMap_SimpleImmutableEntry0);
      weakFastHashMap1.setFast(true);
      boolean boolean0 = weakFastHashMap1.equals(weakFastHashMap0);
      assertTrue(weakFastHashMap1.getFast());
      assertFalse(weakFastHashMap0.getFast());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      WeakFastHashMap<Integer, Integer> weakFastHashMap0 = new WeakFastHashMap<Integer, Integer>();
      weakFastHashMap0.createMap(weakFastHashMap0);
      assertFalse(weakFastHashMap0.getFast());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      WeakFastHashMap<AbstractMap.SimpleEntry<Object, String>, Integer> weakFastHashMap0 = new WeakFastHashMap<AbstractMap.SimpleEntry<Object, String>, Integer>(4128, 945.96277F);
      weakFastHashMap0.createMap(0, 4128);
      assertFalse(weakFastHashMap0.getFast());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      WeakFastHashMap<AbstractMap.SimpleImmutableEntry<String, String>, Object> weakFastHashMap0 = new WeakFastHashMap<AbstractMap.SimpleImmutableEntry<String, String>, Object>(0);
      weakFastHashMap0.createMap(0);
      assertFalse(weakFastHashMap0.getFast());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      WeakFastHashMap<Integer, Integer> weakFastHashMap0 = new WeakFastHashMap<Integer, Integer>();
      weakFastHashMap0.cloneMap(weakFastHashMap0);
      assertFalse(weakFastHashMap0.getFast());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      WeakFastHashMap<HashMap<String, Object>, AbstractMap.SimpleEntry<String, String>> weakFastHashMap0 = new WeakFastHashMap<HashMap<String, Object>, AbstractMap.SimpleEntry<String, String>>();
      weakFastHashMap0.createMap();
      assertFalse(weakFastHashMap0.getFast());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      WeakFastHashMap<Object, AbstractMap.SimpleEntry<String, Object>> weakFastHashMap0 = new WeakFastHashMap<Object, AbstractMap.SimpleEntry<String, Object>>(4635);
      weakFastHashMap0.clear();
      assertFalse(weakFastHashMap0.getFast());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      WeakFastHashMap<Object, Integer> weakFastHashMap0 = new WeakFastHashMap<Object, Integer>();
      WeakFastHashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object> weakFastHashMap1 = new WeakFastHashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object>(2061);
      WeakFastHashMap weakFastHashMap2 = (WeakFastHashMap)weakFastHashMap1.clone();
      Integer integer0 = new Integer(3002);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(biFunction0).apply(any() , anyInt());
      weakFastHashMap0.compute(weakFastHashMap2, biFunction0);
      assertFalse(weakFastHashMap0.getFast());
      assertFalse(weakFastHashMap2.getFast());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      WeakFastHashMap<Integer, Object> weakFastHashMap0 = new WeakFastHashMap<Integer, Object>();
      boolean boolean0 = weakFastHashMap0.equals(weakFastHashMap0);
      assertFalse(weakFastHashMap0.getFast());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      WeakFastHashMap<HashMap<Object, Object>, String> weakFastHashMap0 = new WeakFastHashMap<HashMap<Object, Object>, String>(0);
      Set<HashMap<Object, Object>> set0 = weakFastHashMap0.keySet();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      WeakFastHashMap<Object, Integer> weakFastHashMap1 = new WeakFastHashMap<Object, Integer>(hashMap0);
      WeakFastHashMap<Object, Object> weakFastHashMap2 = new WeakFastHashMap<Object, Object>(0);
      weakFastHashMap2.put(set0, weakFastHashMap1);
      assertFalse(weakFastHashMap1.getFast());
      
      weakFastHashMap2.size();
      assertFalse(weakFastHashMap2.getFast());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      WeakFastHashMap<String, String> weakFastHashMap0 = new WeakFastHashMap<String, String>(0);
      WeakFastHashMap<Object, String> weakFastHashMap1 = new WeakFastHashMap<Object, String>(weakFastHashMap0);
      weakFastHashMap1.put((Object) null, "`M*Qg[p)em~~#2|H1;~");
      weakFastHashMap1.remove((Object) null);
      assertTrue(weakFastHashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      WeakFastHashMap<String, String> weakFastHashMap0 = new WeakFastHashMap<String, String>(0);
      weakFastHashMap0.put("", "hoVF");
      weakFastHashMap0.put("", "4My5/<HH@]86el|YdgB");
      assertEquals(1, weakFastHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      WeakFastHashMap<Integer, String> weakFastHashMap0 = new WeakFastHashMap<Integer, String>(271);
      assertFalse(weakFastHashMap0.getFast());
      
      weakFastHashMap0.setFast(true);
      boolean boolean0 = weakFastHashMap0.getFast();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      WeakFastHashMap<String, String> weakFastHashMap0 = new WeakFastHashMap<String, String>();
      // Undeclared exception!
      try { 
        weakFastHashMap0.putAll((Map<? extends String, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.WeakHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      WeakFastHashMap<Object, Integer> weakFastHashMap0 = new WeakFastHashMap<Object, Integer>();
      // Undeclared exception!
      try { 
        weakFastHashMap0.createMap((Map<?, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.WeakHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      WeakFastHashMap<String, String> weakFastHashMap0 = new WeakFastHashMap<String, String>(1, 1);
      // Undeclared exception!
      try { 
        weakFastHashMap0.createMap(2908, 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Load factor: 0.0
         //
         verifyException("java.util.WeakHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      WeakFastHashMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, AbstractMap.SimpleEntry<Integer, Object>> weakFastHashMap0 = new WeakFastHashMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, AbstractMap.SimpleEntry<Integer, Object>>();
      // Undeclared exception!
      try { 
        weakFastHashMap0.createMap((-165));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Initial Capacity: -165
         //
         verifyException("java.util.WeakHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      WeakFastHashMap<Integer, Object> weakFastHashMap0 = new WeakFastHashMap<Integer, Object>();
      // Undeclared exception!
      try { 
        weakFastHashMap0.cloneMap((Map<? extends Integer, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.WeakHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      WeakFastHashMap<Integer, String> weakFastHashMap0 = null;
      try {
        weakFastHashMap0 = new WeakFastHashMap<Integer, String>((Map<? extends Integer, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.WeakHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      WeakFastHashMap<Object, Integer> weakFastHashMap0 = null;
      try {
        weakFastHashMap0 = new WeakFastHashMap<Object, Integer>(0, 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Load factor: 0.0
         //
         verifyException("java.util.WeakHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      WeakFastHashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, HashMap<String, String>> weakFastHashMap0 = null;
      try {
        weakFastHashMap0 = new WeakFastHashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, HashMap<String, String>>((-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Initial Capacity: -2
         //
         verifyException("java.util.WeakHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      WeakFastHashMap<String, String> weakFastHashMap0 = new WeakFastHashMap<String, String>();
      weakFastHashMap0.put("##yV", "##yV");
      weakFastHashMap0.hashCode();
      assertFalse(weakFastHashMap0.getFast());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      WeakFastHashMap<Object, String> weakFastHashMap0 = new WeakFastHashMap<Object, String>(3961, 3961);
      assertFalse(weakFastHashMap0.getFast());
      
      weakFastHashMap0.setFast(true);
      weakFastHashMap0.put("0jr$|qo-w", "");
      Object object0 = weakFastHashMap0.clone();
      WeakFastHashMap<AbstractMap.SimpleEntry<Object, Integer>, AbstractMap.SimpleImmutableEntry<Object, Object>> weakFastHashMap1 = new WeakFastHashMap<AbstractMap.SimpleEntry<Object, Integer>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      weakFastHashMap1.remove(object0, (Object) null);
      assertTrue(weakFastHashMap0.getFast());
      assertFalse(weakFastHashMap1.getFast());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      WeakFastHashMap<AbstractMap.SimpleImmutableEntry<Object, String>, Integer> weakFastHashMap0 = new WeakFastHashMap<AbstractMap.SimpleImmutableEntry<Object, String>, Integer>();
      WeakFastHashMap<String, String> weakFastHashMap1 = new WeakFastHashMap<String, String>(1);
      weakFastHashMap1.equals(weakFastHashMap0);
      assertFalse(weakFastHashMap1.getFast());
      assertFalse(weakFastHashMap0.getFast());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      WeakFastHashMap<String, WeakHashMap<Integer, Integer>> weakFastHashMap0 = new WeakFastHashMap<String, WeakHashMap<Integer, Integer>>(1937, 796);
      boolean boolean0 = weakFastHashMap0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(weakFastHashMap0.getFast());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      WeakFastHashMap<AbstractMap.SimpleEntry<Object, String>, Object> weakFastHashMap0 = new WeakFastHashMap<AbstractMap.SimpleEntry<Object, String>, Object>(1);
      weakFastHashMap0.size();
      assertFalse(weakFastHashMap0.getFast());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      WeakFastHashMap<Integer, Integer> weakFastHashMap0 = new WeakFastHashMap<Integer, Integer>();
      assertFalse(weakFastHashMap0.getFast());
      
      weakFastHashMap0.setFast(true);
      weakFastHashMap0.size();
      assertTrue(weakFastHashMap0.getFast());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      WeakFastHashMap<AbstractMap.SimpleImmutableEntry<String, String>, String> weakFastHashMap0 = new WeakFastHashMap<AbstractMap.SimpleImmutableEntry<String, String>, String>(0);
      boolean boolean0 = weakFastHashMap0.getFast();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      WeakFastHashMap<Integer, String> weakFastHashMap0 = new WeakFastHashMap<Integer, String>();
      Set<Integer> set0 = weakFastHashMap0.keySet();
      assertFalse(weakFastHashMap0.getFast());
      
      weakFastHashMap0.setFast(true);
      WeakFastHashMap<Object, String> weakFastHashMap1 = new WeakFastHashMap<Object, String>(weakFastHashMap0);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      weakFastHashMap1.computeIfPresent(set0, biFunction0);
      assertTrue(weakFastHashMap0.getFast());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      WeakFastHashMap<Integer, String> weakFastHashMap0 = new WeakFastHashMap<Integer, String>(271);
      Integer integer0 = new Integer(271);
      weakFastHashMap0.put(integer0, "");
      Set<Integer> set0 = weakFastHashMap0.keySet();
      weakFastHashMap0.remove((Object) set0);
      assertFalse(weakFastHashMap0.getFast());
      assertTrue(set0.contains(271));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      WeakFastHashMap<Integer, String> weakFastHashMap0 = new WeakFastHashMap<Integer, String>(271);
      Integer integer0 = new Integer(271);
      weakFastHashMap0.put(integer0, "");
      weakFastHashMap0.setFast(true);
      weakFastHashMap0.remove((Object) weakFastHashMap0);
      assertFalse(weakFastHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      WeakFastHashMap<String, Object> weakFastHashMap0 = new WeakFastHashMap<String, Object>(2245);
      weakFastHashMap0.put("'f76~$qaq|w", (Object) null);
      WeakFastHashMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>> weakFastHashMap1 = new WeakFastHashMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>>(2245);
      weakFastHashMap1.setFast(true);
      boolean boolean0 = weakFastHashMap1.equals(weakFastHashMap0);
      assertTrue(weakFastHashMap1.getFast());
      assertFalse(weakFastHashMap0.getFast());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      WeakFastHashMap<String, Object> weakFastHashMap0 = new WeakFastHashMap<String, Object>(2268);
      WeakFastHashMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>> weakFastHashMap1 = new WeakFastHashMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>>(2268);
      weakFastHashMap1.setFast(true);
      boolean boolean0 = weakFastHashMap1.equals(weakFastHashMap0);
      assertTrue(weakFastHashMap1.getFast());
      assertFalse(weakFastHashMap0.getFast());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      WeakFastHashMap<Integer, String> weakFastHashMap0 = new WeakFastHashMap<Integer, String>(271);
      Integer integer0 = new Integer(271);
      weakFastHashMap0.put(integer0, "");
      weakFastHashMap0.remove((Object) weakFastHashMap0);
      assertFalse(weakFastHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      WeakFastHashMap<Comparable<Object>, WeakFastHashMap<Integer, Object>> weakFastHashMap0 = new WeakFastHashMap<Comparable<Object>, WeakFastHashMap<Integer, Object>>(2245, 164.5414F);
      WeakFastHashMap<String, Object> weakFastHashMap1 = new WeakFastHashMap<String, Object>(2245);
      weakFastHashMap1.put("'f76~$qaq|w", (Object) null);
      boolean boolean0 = weakFastHashMap0.equals(weakFastHashMap1);
      assertFalse(boolean0);
      assertFalse(weakFastHashMap1.getFast());
      assertFalse(weakFastHashMap0.getFast());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      WeakFastHashMap<Integer, Object> weakFastHashMap0 = new WeakFastHashMap<Integer, Object>();
      assertFalse(weakFastHashMap0.getFast());
      
      weakFastHashMap0.setFast(true);
      weakFastHashMap0.clear();
      assertTrue(weakFastHashMap0.getFast());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      WeakFastHashMap<Object, String> weakFastHashMap0 = new WeakFastHashMap<Object, String>(3961, 3961);
      assertFalse(weakFastHashMap0.getFast());
      
      weakFastHashMap0.setFast(true);
      WeakFastHashMap<String, String> weakFastHashMap1 = new WeakFastHashMap<String, String>(3961);
      weakFastHashMap0.putAll(weakFastHashMap1);
      assertTrue(weakFastHashMap0.getFast());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      WeakFastHashMap<Integer, Integer> weakFastHashMap0 = new WeakFastHashMap<Integer, Integer>(739);
      Integer integer0 = new Integer((-1110));
      weakFastHashMap0.put(integer0, integer0);
      boolean boolean0 = weakFastHashMap0.containsValue(integer0);
      assertFalse(weakFastHashMap0.getFast());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      WeakFastHashMap<Comparable<Object>, WeakFastHashMap<Integer, Object>> weakFastHashMap0 = new WeakFastHashMap<Comparable<Object>, WeakFastHashMap<Integer, Object>>(2268, 164.5414F);
      WeakFastHashMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>> weakFastHashMap1 = new WeakFastHashMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>>(2268);
      assertFalse(weakFastHashMap1.getFast());
      
      weakFastHashMap1.setFast(true);
      boolean boolean0 = weakFastHashMap1.containsValue(weakFastHashMap0);
      assertTrue(weakFastHashMap1.getFast());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      WeakFastHashMap<Integer, String> weakFastHashMap0 = new WeakFastHashMap<Integer, String>();
      WeakFastHashMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<String, Object>> weakFastHashMap1 = new WeakFastHashMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<String, Object>>(301, 301);
      boolean boolean0 = weakFastHashMap1.containsValue(weakFastHashMap0);
      assertFalse(weakFastHashMap0.getFast());
      assertFalse(weakFastHashMap1.getFast());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      WeakFastHashMap<HashMap<Object, Object>, Integer> weakFastHashMap0 = new WeakFastHashMap<HashMap<Object, Object>, Integer>();
      WeakFastHashMap<Integer, Object> weakFastHashMap1 = new WeakFastHashMap<Integer, Object>(0);
      WeakFastHashMap<Object, Object> weakFastHashMap2 = new WeakFastHashMap<Object, Object>();
      Integer integer0 = new Integer(0);
      weakFastHashMap0.put(weakFastHashMap2, integer0);
      WeakFastHashMap weakFastHashMap3 = (WeakFastHashMap)weakFastHashMap1.clone();
      boolean boolean0 = weakFastHashMap0.containsKey(weakFastHashMap3);
      assertFalse(weakFastHashMap3.getFast());
      assertFalse(weakFastHashMap0.getFast());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      WeakFastHashMap<String, Integer> weakFastHashMap0 = new WeakFastHashMap<String, Integer>();
      assertFalse(weakFastHashMap0.getFast());
      
      weakFastHashMap0.setFast(true);
      Integer integer0 = new Integer((-2));
      boolean boolean0 = weakFastHashMap0.containsKey(integer0);
      assertTrue(weakFastHashMap0.getFast());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      WeakFastHashMap<Integer, Integer> weakFastHashMap0 = new WeakFastHashMap<Integer, Integer>(2459);
      Integer integer0 = new Integer(2459);
      boolean boolean0 = weakFastHashMap0.containsKey(integer0);
      assertFalse(weakFastHashMap0.getFast());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      WeakFastHashMap<WeakFastHashMap<Object, String>, Object> weakFastHashMap0 = new WeakFastHashMap<WeakFastHashMap<Object, String>, Object>();
      assertTrue(weakFastHashMap0.isEmpty());
      
      weakFastHashMap0.put((WeakFastHashMap<Object, String>) null, "_As");
      boolean boolean0 = weakFastHashMap0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      WeakFastHashMap<String, Integer> weakFastHashMap0 = new WeakFastHashMap<String, Integer>(13);
      assertFalse(weakFastHashMap0.getFast());
      
      weakFastHashMap0.setFast(true);
      boolean boolean0 = weakFastHashMap0.isEmpty();
      assertTrue(weakFastHashMap0.getFast());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      WeakFastHashMap<Comparable<Object>, WeakFastHashMap<Integer, Object>> weakFastHashMap0 = new WeakFastHashMap<Comparable<Object>, WeakFastHashMap<Integer, Object>>(2268, 164.5414F);
      boolean boolean0 = weakFastHashMap0.isEmpty();
      assertTrue(boolean0);
      assertFalse(weakFastHashMap0.getFast());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      WeakFastHashMap<String, Integer> weakFastHashMap0 = new WeakFastHashMap<String, Integer>();
      assertFalse(weakFastHashMap0.getFast());
      
      weakFastHashMap0.setFast(true);
      WeakFastHashMap<Comparable<String>, Object> weakFastHashMap1 = new WeakFastHashMap<Comparable<String>, Object>(1, 13);
      weakFastHashMap1.putAll(weakFastHashMap0);
      assertTrue(weakFastHashMap0.getFast());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      WeakFastHashMap<String, String> weakFastHashMap0 = new WeakFastHashMap<String, String>();
      Set<Map.Entry<String, String>> set0 = (Set<Map.Entry<String, String>>)weakFastHashMap0.entrySet();
      WeakFastHashMap<Integer, Object> weakFastHashMap1 = new WeakFastHashMap<Integer, Object>();
      weakFastHashMap1.setFast(true);
      weakFastHashMap1.get(set0);
      assertTrue(weakFastHashMap1.getFast());
      assertFalse(weakFastHashMap0.getFast());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      WeakFastHashMap<String, Integer> weakFastHashMap0 = new WeakFastHashMap<String, Integer>();
      weakFastHashMap0.setFast(true);
      Integer integer0 = new Integer((-2));
      weakFastHashMap0.put("", integer0);
      boolean boolean0 = weakFastHashMap0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      WeakFastHashMap<HashMap<Integer, String>, AbstractMap.SimpleImmutableEntry<Object, Object>> weakFastHashMap0 = new WeakFastHashMap<HashMap<Integer, String>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      Collection<AbstractMap.SimpleImmutableEntry<Object, Object>> collection0 = weakFastHashMap0.values();
      weakFastHashMap0.remove((Object) collection0);
      assertFalse(weakFastHashMap0.getFast());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      WeakFastHashMap<String, String> weakFastHashMap0 = new WeakFastHashMap<String, String>(0);
      WeakFastHashMap<Object, String> weakFastHashMap1 = new WeakFastHashMap<Object, String>(weakFastHashMap0);
      weakFastHashMap1.put((Object) null, "`M*Qg[p)em~~#2|H1;~");
      WeakFastHashMap<Object, String> weakFastHashMap2 = new WeakFastHashMap<Object, String>(weakFastHashMap1);
      assertFalse(weakFastHashMap0.getFast());
      assertFalse(weakFastHashMap2.getFast());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      WeakFastHashMap<String, String> weakFastHashMap0 = new WeakFastHashMap<String, String>();
      Set<Map.Entry<String, String>> set0 = (Set<Map.Entry<String, String>>)weakFastHashMap0.entrySet();
      WeakFastHashMap<Integer, Object> weakFastHashMap1 = new WeakFastHashMap<Integer, Object>();
      weakFastHashMap1.get(set0);
      assertFalse(weakFastHashMap1.getFast());
  }
}
