/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 18:11:09 GMT 2022
 */

package org.apache.commons.beanutils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import org.apache.commons.beanutils.MethodUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MethodUtils_ESTest extends MethodUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<?> class1 = MethodUtils.toNonPrimitiveClass(class0);
      assertFalse(class1.isEnum());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Double double0 = new Double(1.0);
      Object[] objectArray0 = new Object[0];
      Class<Double>[] classArray0 = (Class<Double>[]) Array.newInstance(Class.class, 0);
      Object object0 = MethodUtils.invokeMethod((Object) double0, "hashCode", objectArray0, (Class<?>[]) classArray0);
      assertEquals(1072693248, object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Double double0 = new Double(0.0);
      Object[] objectArray0 = new Object[0];
      Object object0 = MethodUtils.invokeMethod((Object) double0, "byteValue", objectArray0);
      assertEquals((byte)0, object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-78));
      Object[] objectArray0 = new Object[0];
      Object object0 = MethodUtils.invokeExactMethod((Object) byte0, "hashCode", objectArray0);
      assertEquals((-78), object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Float float0 = new Float(1.0);
      Object object0 = MethodUtils.invokeExactMethod((Object) float0, "hashCode", (Object) null);
      assertEquals(1065353216, object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "notifyAll", (Class<?>[]) null);
      Method method1 = MethodUtils.getAccessibleMethod(method0);
      assertEquals(273, method1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "notifyAll", (Class<?>[]) null);
      Method method1 = MethodUtils.getAccessibleMethod(class0, method0);
      assertTrue(method1.isAccessible());
      assertNotNull(method1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<MethodUtils>[] classArray0 = (Class<MethodUtils>[]) Array.newInstance(Class.class, 1);
      Method method0 = MethodUtils.getAccessibleMethod(class0, "hashCode", classArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<String> class0 = String.class;
      Method method0 = MethodUtils.getAccessibleMethod(class0, "matches", class0);
      assertFalse(method0.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MethodUtils methodUtils0 = new MethodUtils();
      String string0 = "Log4J 1.2 not available";
      Object[] objectArray0 = new Object[9];
      Class<Short>[] classArray0 = null;
      MethodUtils.setCacheMethods(true);
      MethodUtils.clearCache();
      objectArray0[1] = (Object) "Log4J 1.2 not available";
      objectArray0[2] = (Object) methodUtils0;
      objectArray0[3] = (Object) methodUtils0;
      AccessibleObject[] accessibleObjectArray0 = new AccessibleObject[7];
      // Undeclared exception!
      try { 
        AccessibleObject.setAccessible(accessibleObjectArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 5);
      // Undeclared exception!
      try { 
        MethodUtils.toNonPrimitiveClass(classArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        MethodUtils.isAssignmentCompatible((Class<?>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 2);
      classArray0[0] = class0;
      classArray0[1] = class0;
      // Undeclared exception!
      try { 
        MethodUtils.invokeStaticMethod((Class<?>) class0, "min", (Object[]) classArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[7];
      Class<Double>[] classArray0 = (Class<Double>[]) Array.newInstance(Class.class, 2);
      // Undeclared exception!
      try { 
        MethodUtils.invokeStaticMethod(class0, (String) null, objectArray0, classArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Method Name cannot be null
         //
         verifyException("org.apache.commons.beanutils.MethodUtils$MethodDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 3);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      classArray0[1] = classArray0[0];
      classArray0[2] = classArray0[0];
      try { 
        MethodUtils.invokeStaticMethod((Class<?>) classArray0[0], "]", (Object[]) classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: ]() on class: java.lang.Object
         //
         verifyException("org.apache.commons.beanutils.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      try { 
        MethodUtils.invokeStaticMethod((Class<?>) class0, "valueOf", (Object) "valueOf");
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Boolean boolean0 = Boolean.valueOf("eqj|]b0+&Y\"FT{,&[");
      // Undeclared exception!
      try { 
        MethodUtils.invokeStaticMethod((Class<?>) class0, "compareTo", (Object) boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Boolean boolean0 = new Boolean(" @>");
      // Undeclared exception!
      try { 
        MethodUtils.invokeStaticMethod((Class<?>) class0, (String) null, (Object) boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Method Name cannot be null
         //
         verifyException("org.apache.commons.beanutils.MethodUtils$MethodDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 6);
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) null, "Matching name=", objectArray0, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MethodUtils methodUtils0 = new MethodUtils();
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) methodUtils0, "wait", objectArray0, (Class<?>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<MethodUtils>[] classArray0 = (Class<MethodUtils>[]) Array.newInstance(Class.class, 2);
      Character character0 = Character.valueOf('y');
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) character0, (String) null, (Object[]) classArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Method Name cannot be null
         //
         verifyException("org.apache.commons.beanutils.MethodUtils$MethodDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      try { 
        MethodUtils.invokeMethod((Object) "N[xT?k:|va", "notifyAll", (Object[]) null);
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) boolean0, "", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Short short0 = new Short((short)2);
      try { 
        MethodUtils.invokeMethod((Object) short0, "notifyAll", (Object) null);
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) null, "<\"+V", (Object) "<\"+V");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Float float0 = new Float(1820.8485F);
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) float0, (String) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Method Name cannot be null
         //
         verifyException("org.apache.commons.beanutils.MethodUtils$MethodDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<Short>[] classArray0 = (Class<Short>[]) Array.newInstance(Class.class, 4);
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactStaticMethod((Class<?>) null, "2sV(B", (Object[]) null, classArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class cannot be null
         //
         verifyException("org.apache.commons.beanutils.MethodUtils$MethodDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      try { 
        MethodUtils.invokeExactStaticMethod(class0, "java.specification.version", (Object[]) null);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: java.specification.version() on class: boolean
         //
         verifyException("org.apache.commons.beanutils.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactStaticMethod((Class<?>) class0, "wait", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Float float0 = new Float(1.0F);
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactStaticMethod((Class<?>) class0, (String) null, (Object) float0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Method Name cannot be null
         //
         verifyException("org.apache.commons.beanutils.MethodUtils$MethodDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Class<Float>[] classArray0 = (Class<Float>[]) Array.newInstance(Class.class, 3);
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactMethod((Object) null, "isEmpty", objectArray0, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Double double0 = new Double(0.0);
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactMethod((Object) double0, (String) null, objectArray0, (Class<?>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Method Name cannot be null
         //
         verifyException("org.apache.commons.beanutils.MethodUtils$MethodDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 0);
      try { 
        MethodUtils.invokeExactMethod((Object) class0, "notifyAll", (Object[]) classArray0);
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Boolean boolean0 = Boolean.valueOf("eqj|]b0+&Y\"FT{,U&[");
      Object object0 = MethodUtils.invokeStaticMethod((Class<?>) class0, "hashCode", (Object) boolean0);
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactMethod(object0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      try { 
        MethodUtils.invokeExactMethod((Object) "wait", "wait", (Object) null);
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactMethod((Object) byte0, (String) null, (Object) byte0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Method Name cannot be null
         //
         verifyException("org.apache.commons.beanutils.MethodUtils$MethodDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        MethodUtils.getMatchingAccessibleMethod(class0, "", (Class<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 2);
      // Undeclared exception!
      try { 
        MethodUtils.getMatchingAccessibleMethod((Class<?>) null, "", classArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class cannot be null
         //
         verifyException("org.apache.commons.beanutils.MethodUtils$MethodDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Long> class1 = Long.class;
      // Undeclared exception!
      try { 
        MethodUtils.getAccessibleMethod(class1, (String) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Method Name cannot be null
         //
         verifyException("org.apache.commons.beanutils.MethodUtils$MethodDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Class<?> class1 = MethodUtils.getPrimitiveWrapper(class0);
      assertEquals("class java.lang.Double", class1.toString());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      Class<?> class1 = MethodUtils.getPrimitiveWrapper(class0);
      assertEquals("class java.lang.Byte", class1.toString());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class<?> class1 = MethodUtils.getPrimitiveWrapper(class0);
      assertEquals("class java.lang.Short", class1.toString());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<?> class1 = MethodUtils.getPrimitiveType(class0);
      Class<?> class2 = MethodUtils.getPrimitiveWrapper(class1);
      assertEquals("class java.lang.Integer", class2.toString());
      assertNotNull(class2);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Class<?> class1 = MethodUtils.getPrimitiveWrapper(class0);
      assertNotNull(class1);
      assertEquals("class java.lang.Long", class1.toString());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Class<?> class1 = MethodUtils.getPrimitiveWrapper(class0);
      assertNotNull(class1);
      assertEquals("class java.lang.Float", class1.toString());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Class<?> class1 = MethodUtils.getPrimitiveWrapper(class0);
      assertEquals(17, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<?> class1 = MethodUtils.getPrimitiveWrapper(class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = MethodUtils.isAssignmentCompatible(class0, class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Class<Object> class1 = Object.class;
      classArray0[0] = class1;
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "lowestOneBit", classArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<Long>[] classArray0 = (Class<Long>[]) Array.newInstance(Class.class, 3);
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "numberOfTrailingZeros", classArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Character character0 = new Character('9');
      Character.highSurrogate(3267);
      String string0 = "toString";
      Class<Short>[] classArray0 = null;
      MethodUtils.invokeExactMethod((Object) character0, "toString", (Object[]) null, (Class<?>[]) null);
      Class<Method> class0 = Method.class;
      MethodUtils.getAccessibleMethod(class0, "toString", (Class<?>[]) null);
      try { 
        MethodUtils.invokeStaticMethod((Class<?>) class0, "NoCaFqK", (Object[]) null, (Class<?>[]) null);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: NoCaFqK() on class: java.lang.reflect.Method
         //
         verifyException("org.apache.commons.beanutils.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactStaticMethod((Class<?>) null, ")=n@z", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class cannot be null
         //
         verifyException("org.apache.commons.beanutils.MethodUtils$MethodDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        MethodUtils.invokeStaticMethod(class0, (String) null, (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Method Name cannot be null
         //
         verifyException("org.apache.commons.beanutils.MethodUtils$MethodDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Class<Double>[] classArray0 = (Class<Double>[]) Array.newInstance(Class.class, 2);
      try { 
        MethodUtils.invokeExactMethod((Object) "A`Dq/Xx=)BXDwF", "", (Object[]) null, (Class<?>[]) classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: () on object: java.lang.String
         //
         verifyException("org.apache.commons.beanutils.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      try { 
        MethodUtils.invokeExactMethod((Object) "wait", "^SwCgY#6p'+d^.", (Object[]) null);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: ^SwCgY#6p'+d^.() on object: java.lang.String
         //
         verifyException("org.apache.commons.beanutils.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Long long0 = new Long((-237L));
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 3);
      try { 
        MethodUtils.invokeMethod((Object) long0, "II{wUz@iY}Xcdx -q|", (Object[]) null, (Class<?>[]) classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: II{wUz@iY}Xcdx -q|() on object: java.lang.Long
         //
         verifyException("org.apache.commons.beanutils.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Byte byte0 = new Byte((byte)27);
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) byte0, (String) null, (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Method Name cannot be null
         //
         verifyException("org.apache.commons.beanutils.MethodUtils$MethodDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = MethodUtils.clearCache();
      //  // Unstable assertion: assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Boolean boolean0 = Boolean.valueOf("eqj|]b0+&Y\"FT{,U&[");
      Object object0 = MethodUtils.invokeStaticMethod((Class<?>) class0, "hashCode", (Object) boolean0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) boolean0;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "hashCode";
      objectArray0[4] = (Object) class0;
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactMethod(object0, (String) null, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Method Name cannot be null
         //
         verifyException("org.apache.commons.beanutils.MethodUtils$MethodDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Class<Short>[] classArray0 = (Class<Short>[]) Array.newInstance(Class.class, 4);
      // Undeclared exception!
      try { 
        MethodUtils.getAccessibleMethod((Class<?>) null, "+ZUoR`X@3}|=F", classArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class cannot be null
         //
         verifyException("org.apache.commons.beanutils.MethodUtils$MethodDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<?> class1 = MethodUtils.toNonPrimitiveClass(class0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "decode";
      try { 
        MethodUtils.invokeStaticMethod(class1, "decode", objectArray0);
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<?> class1 = MethodUtils.getPrimitiveType(class0);
      Class<?> class2 = MethodUtils.getPrimitiveWrapper(class1);
      assertEquals("class java.lang.Character", class2.toString());
      assertNotNull(class2);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class<?> class1 = MethodUtils.getPrimitiveType(class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Class<?> class1 = MethodUtils.getPrimitiveType(class0);
      assertNotNull(class1);
      assertEquals("byte", class1.toString());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<?> class1 = MethodUtils.getPrimitiveType(class0);
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        MethodUtils.invokeStaticMethod(class1, "decode", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<?> class1 = MethodUtils.getPrimitiveType(class0);
      assertEquals("long", class1.toString());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class<?> class1 = MethodUtils.getPrimitiveType(class0);
      assertNotNull(class1);
      assertEquals("float", class1.toString());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<?> class1 = MethodUtils.getPrimitiveType(class0);
      assertEquals("boolean", class1.toString());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<?> class1 = MethodUtils.toNonPrimitiveClass(class0);
      assertEquals("class java.lang.Character", class1.toString());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Double double0 = new Double(1.0);
      try { 
        MethodUtils.invokeMethod((Object) double0, "doubleToRawLongBits", (Object) "doubleToRawLongBits");
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: doubleToRawLongBits() on object: java.lang.Double
         //
         verifyException("org.apache.commons.beanutils.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      Class<Short> class1 = Short.class;
      boolean boolean0 = MethodUtils.isAssignmentCompatible(class0, class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class<?> class1 = MethodUtils.getPrimitiveType(class0);
      assertNotNull(class1);
      
      Class<?> class2 = MethodUtils.toNonPrimitiveClass(class1);
      assertEquals("class java.lang.Short", class2.toString());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "notifyAll", (Class<?>[]) null);
      Class class1 = (Class)method0.getGenericReturnType();
      Class<?> class2 = MethodUtils.toNonPrimitiveClass(class1);
      assertNotNull(class2);
      assertEquals(1041, class2.getModifiers());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Class<MethodUtils>[] classArray0 = (Class<MethodUtils>[]) Array.newInstance(Class.class, 1);
      Class<MethodUtils> class0 = MethodUtils.class;
      classArray0[0] = class0;
      Float float0 = new Float(0.0);
      try { 
        MethodUtils.invokeMethod((Object) float0, "hashCode", (Object[]) classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: hashCode() on object: java.lang.Float
         //
         verifyException("org.apache.commons.beanutils.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Class<Short> class1 = Short.TYPE;
      boolean boolean0 = MethodUtils.isAssignmentCompatible(class0, class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      MethodUtils methodUtils0 = new MethodUtils();
      Object[] objectArray0 = new Object[9];
      Byte byte0 = new Byte((byte)64);
      Object object0 = MethodUtils.invokeMethod((Object) methodUtils0, "equals", (Object) byte0);
      assertEquals(false, object0);
      
      Class<Double> class0 = Double.class;
      Class<?> class1 = MethodUtils.getPrimitiveType(class0);
      assertNotNull(class1);
      assertEquals("double", class1.toString());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Class<?> class1 = MethodUtils.toNonPrimitiveClass(class0);
      try { 
        MethodUtils.invokeStaticMethod(class1, "wait", (Object) class0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: wait() on class: java.lang.Integer
         //
         verifyException("org.apache.commons.beanutils.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Method method0 = MethodUtils.getAccessibleMethod(class0, "notifyAll", (Class<?>[]) null);
      Method method1 = MethodUtils.getAccessibleMethod(class0, method0);
      assertNotNull(method1);
      assertFalse(method1.isAccessible());
      assertSame(method1, method0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 2);
      classArray0[0] = class0;
      classArray0[1] = class0;
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "min", classArray0);
      Class<String> class1 = String.class;
      // Undeclared exception!
      try { 
        MethodUtils.getAccessibleMethod(class1, method0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.lang.String is not assignable from java.lang.Integer
         //
         verifyException("org.apache.commons.beanutils.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Method method0 = MethodUtils.getAccessibleMethod(class0, "notifyAll", (Class<?>[]) null);
      Method method1 = MethodUtils.getAccessibleMethod((Class<?>) null, method0);
      assertFalse(method1.isAccessible());
      assertNotNull(method1);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Method method0 = MethodUtils.getAccessibleMethod(class0, (Method) null);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Method method0 = MethodUtils.getAccessibleMethod((Method) null);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Method method0 = MethodUtils.getAccessibleMethod(class0, "notifyAll", (Class<?>[]) null);
      Method method1 = MethodUtils.getAccessibleMethod(method0);
      assertFalse(method1.isAccessible());
      assertNotNull(method1);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactStaticMethod(class0, "pS8X", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Class<Boolean> class0 = Boolean.class;
      // Undeclared exception!
      try { 
        MethodUtils.invokeStaticMethod(class0, "notifyAll", objectArray0, (Class<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Class<Boolean> class0 = Boolean.class;
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactStaticMethod(class0, "notifyAll", objectArray0, (Class<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<Short>[] classArray0 = (Class<Short>[]) Array.newInstance(Class.class, 3);
      try { 
        MethodUtils.invokeExactStaticMethod(class0, "2eV(6", (Object[]) null, classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: 2eV(6() on class: java.lang.Boolean
         //
         verifyException("org.apache.commons.beanutils.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Character character0 = new Character('*');
      try { 
        MethodUtils.invokeExactMethod((Object) character0, "notifyAll", (Object[]) null, (Class<?>[]) null);
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactMethod((Object) null, "", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      MethodUtils methodUtils0 = new MethodUtils();
      try { 
        MethodUtils.invokeMethod((Object) methodUtils0, "notifyAll", (Object[]) null, (Class<?>[]) null);
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      MethodUtils.setCacheMethods(false);
      Class<Double> class0 = Double.class;
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "notifyAll", (Class<?>[]) null);
      assertTrue(method0.isAccessible());
      assertNotNull(method0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Class<Method> class0 = Method.class;
      try { 
        MethodUtils.invokeExactMethod((Object) "lAKl.oeRM#YZs^", "org.apache.commons.logging.impl.Log4JLogger", (Object) class0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: org.apache.commons.logging.impl.Log4JLogger() on object: java.lang.String
         //
         verifyException("org.apache.commons.beanutils.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Class<MethodUtils> class0 = MethodUtils.class;
      try { 
        MethodUtils.invokeExactStaticMethod(class0, "utg3Y&x@M,6n~P", (Object) null);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: utg3Y&x@M,6n~P() on class: org.apache.commons.beanutils.MethodUtils
         //
         verifyException("org.apache.commons.beanutils.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Object object0 = MethodUtils.invokeMethod((Object) class0, "hashCode", (Object) null);
      try { 
        MethodUtils.invokeMethod((Object) class0, "hashCode", object0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: hashCode() on object: java.lang.Class
         //
         verifyException("org.apache.commons.beanutils.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Method method0 = MethodUtils.getAccessibleMethod(class0, "hashCode", class0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactMethod((Object) byte0, "notifyAll", objectArray0, (Class<?>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }
}
