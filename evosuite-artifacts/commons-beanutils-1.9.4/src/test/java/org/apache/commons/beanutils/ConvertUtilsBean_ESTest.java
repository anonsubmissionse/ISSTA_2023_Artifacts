/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 18:01:55 GMT 2022
 */

package org.apache.commons.beanutils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.URL;
import java.sql.Date;
import java.util.Locale;
import org.apache.commons.beanutils.ConvertUtilsBean;
import org.apache.commons.beanutils.Converter;
import org.apache.commons.beanutils.converters.BigDecimalConverter;
import org.apache.commons.beanutils.converters.BigIntegerConverter;
import org.apache.commons.beanutils.converters.BooleanConverter;
import org.apache.commons.beanutils.converters.ByteConverter;
import org.apache.commons.beanutils.converters.CalendarConverter;
import org.apache.commons.beanutils.converters.ConverterFacade;
import org.apache.commons.beanutils.converters.DateConverter;
import org.apache.commons.beanutils.converters.StringConverter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConvertUtilsBean_ESTest extends ConvertUtilsBean_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      convertUtilsBean0.register(false, true, 430);
      assertEquals(0.0F, convertUtilsBean0.getDefaultFloat(), 0.01F);
      assertEquals(0, convertUtilsBean0.getDefaultInteger());
      assertEquals(0.0, convertUtilsBean0.getDefaultDouble(), 0.01);
      assertEquals(0L, convertUtilsBean0.getDefaultLong());
      assertEquals(' ', convertUtilsBean0.getDefaultCharacter());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      convertUtilsBean0.setDefaultShort((short)4066);
      ConvertUtilsBean convertUtilsBean1 = ConvertUtilsBean.getInstance();
      assertEquals((short)4066, convertUtilsBean1.getDefaultShort());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      convertUtilsBean0.setDefaultShort((short) (-302));
      ConvertUtilsBean convertUtilsBean1 = ConvertUtilsBean.getInstance();
      assertEquals((short) (-302), convertUtilsBean1.getDefaultShort());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      convertUtilsBean0.setDefaultShort((short)1484);
      short short0 = convertUtilsBean0.getDefaultShort();
      assertEquals((short)1484, short0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      convertUtilsBean0.setDefaultFloat(0.0F);
      convertUtilsBean0.getDefaultDouble();
      convertUtilsBean0.setDefaultBoolean(true);
      convertUtilsBean0.setDefaultDouble(0.0);
      Locale locale0 = Locale.ROOT;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Class<Object> class0 = Object.class;
      convertUtilsBean0.convert((Object) mockGregorianCalendar0, (Class<?>) class0);
      assertEquals(0.0F, convertUtilsBean0.getDefaultFloat(), 0.01F);
      assertTrue(convertUtilsBean0.getDefaultBoolean());
      assertEquals(0.0, convertUtilsBean0.getDefaultDouble(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      char char0 = convertUtilsBean0.getDefaultCharacter();
      //  // Unstable assertion: assertEquals('Y', char0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      convertUtilsBean0.getDefaultByte();
      assertEquals(0.0F, convertUtilsBean0.getDefaultFloat(), 0.01F);
      assertEquals(' ', convertUtilsBean0.getDefaultCharacter());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      Class<StringConverter> class0 = StringConverter.class;
      convertUtilsBean0.lookup(class0, class0);
      convertUtilsBean0.getDefaultFloat();
      Class<URL> class1 = URL.class;
      convertUtilsBean0.lookup(class1, class0);
      convertUtilsBean0.setDefaultLong(0L);
      convertUtilsBean0.getDefaultLong();
      Class<DateConverter> class2 = DateConverter.class;
      convertUtilsBean0.lookup(class0);
      convertUtilsBean0.lookup(class2);
      convertUtilsBean0.getDefaultInteger();
      byte byte0 = convertUtilsBean0.getDefaultByte();
      assertEquals((byte)0, byte0);
  }



  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      String[] stringArray0 = new String[1];
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      // Undeclared exception!
      try { 
        convertUtilsBean0.convert(stringArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Default conversion to org.evosuite.runtime.mock.java.util.MockGregorianCalendar failed.
         //
         verifyException("org.apache.commons.beanutils.converters.AbstractConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      Class<Double> class0 = Double.class;
      // Undeclared exception!
      try { 
        convertUtilsBean0.convert((String[]) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.ConvertUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      Class<ByteConverter> class0 = ByteConverter.class;
      // Undeclared exception!
      try { 
        convertUtilsBean0.convert("", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Default conversion to ByteConverter failed.
         //
         verifyException("org.apache.commons.beanutils.converters.AbstractConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      StringConverter stringConverter0 = new StringConverter();
      Class<URL> class0 = URL.class;
      // Undeclared exception!
      try { 
        convertUtilsBean0.convert((Object) stringConverter0, (Class<?>) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error converting from 'StringConverter' to 'java.net.URL' no protocol: org.apache.commons.beanutils.converters.StringConverter@0000000143
         //
         verifyException("org.apache.commons.beanutils.converters.AbstractConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      // Undeclared exception!
      try { 
        convertUtilsBean0.convert((Object) null, (Class<?>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Target type is missing
         //
         verifyException("org.apache.commons.beanutils.ConvertUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      Class<String> class0 = String.class;
      convertUtilsBean0.deregister(class0);
      // Undeclared exception!
      try { 
        convertUtilsBean0.convert((Object) "org.apache.commons.beanutils.converters.FloatConverter@0000000143");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.ConvertUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      Class<Integer> class0 = Integer.class;
      Class<String> class1 = String.class;
      convertUtilsBean0.lookup(class0, class1);
      assertEquals(0.0F, convertUtilsBean0.getDefaultFloat(), 0.01F);
      assertEquals((byte)0, convertUtilsBean0.getDefaultByte());
      assertEquals(' ', convertUtilsBean0.getDefaultCharacter());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      Class<BooleanConverter> class0 = BooleanConverter.class;
      Class<String> class1 = String.class;
      Converter converter0 = convertUtilsBean0.lookup(class0, class1);
      assertNotNull(converter0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      Class<CalendarConverter> class0 = CalendarConverter.class;
      Converter converter0 = convertUtilsBean0.lookup((Class<?>) null, class0);
      assertNull(converter0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      Class<ConverterFacade> class0 = ConverterFacade.class;
      Object object0 = convertUtilsBean0.convert((Object) null, (Class<?>) class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      Class<Long> class0 = Long.class;
      convertUtilsBean0.register((Converter) null, class0);
      assertEquals(0.0, convertUtilsBean0.getDefaultDouble(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      convertUtilsBean0.deregister();
      assertEquals(0L, convertUtilsBean0.getDefaultLong());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      Class<String> class0 = String.class;
      Converter converter0 = convertUtilsBean0.lookup(class0);
      assertNotNull(converter0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      Class<BooleanConverter> class0 = BooleanConverter.class;
      // Undeclared exception!
      try { 
        convertUtilsBean0.lookup(class0, (Class<?>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Target type is missing
         //
         verifyException("org.apache.commons.beanutils.ConvertUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      convertUtilsBean0.register(true, true, (-596));
      assertEquals((byte)0, convertUtilsBean0.getDefaultByte());
      assertEquals(' ', convertUtilsBean0.getDefaultCharacter());
      assertEquals(0L, convertUtilsBean0.getDefaultLong());
      assertEquals(0.0F, convertUtilsBean0.getDefaultFloat(), 0.01F);
      assertEquals(0.0, convertUtilsBean0.getDefaultDouble(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      BigDecimalConverter bigDecimalConverter0 = new BigDecimalConverter();
      Class<String> class0 = String.class;
      convertUtilsBean0.deregister(class0);
      convertUtilsBean0.convert((Object) bigDecimalConverter0, (Class<?>) class0);
      assertEquals(0L, convertUtilsBean0.getDefaultLong());
      assertEquals(' ', convertUtilsBean0.getDefaultCharacter());
      assertEquals(0.0F, convertUtilsBean0.getDefaultFloat(), 0.01F);
      assertEquals(0, convertUtilsBean0.getDefaultInteger());
      assertEquals(0.0, convertUtilsBean0.getDefaultDouble(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      Class<String> class0 = String.class;
      convertUtilsBean0.convert((Object) null, class0);
      assertEquals((byte)0, convertUtilsBean0.getDefaultByte());
      assertEquals(' ', convertUtilsBean0.getDefaultCharacter());
      assertEquals(0.0, convertUtilsBean0.getDefaultDouble(), 0.01);
      assertEquals(0L, convertUtilsBean0.getDefaultLong());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      Class<String> class0 = String.class;
      Byte byte0 = new Byte((byte)10);
      Object object0 = convertUtilsBean0.convert((Object) byte0, (Class<?>) class0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      Class<CalendarConverter> class0 = CalendarConverter.class;
      String[] stringArray0 = new String[0];
      Object object0 = convertUtilsBean0.convert(stringArray0, class0);
      Class<String> class1 = String.class;
      Object object1 = convertUtilsBean0.convert(object0, class1);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      Class<String> class0 = String.class;
      convertUtilsBean0.convert("", class0);
      assertEquals((byte)0, convertUtilsBean0.getDefaultByte());
      assertEquals(0.0F, convertUtilsBean0.getDefaultFloat(), 0.01F);
      assertEquals(0.0, convertUtilsBean0.getDefaultDouble(), 0.01);
      assertEquals(' ', convertUtilsBean0.getDefaultCharacter());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "qU7jcc?!~=->8";
      Class<String> class0 = String.class;
      Object object0 = convertUtilsBean0.convert(stringArray0, class0);
      String string0 = convertUtilsBean0.convert(object0);
      assertEquals(' ', convertUtilsBean0.getDefaultCharacter());
      assertEquals(0.0F, convertUtilsBean0.getDefaultFloat(), 0.01F);
      assertNotNull(string0);
      assertEquals(0.0, convertUtilsBean0.getDefaultDouble(), 0.01);
      assertEquals(0L, convertUtilsBean0.getDefaultLong());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      String[] stringArray0 = new String[0];
      Class<Date> class0 = Date.class;
      Object object0 = convertUtilsBean0.convert(stringArray0, class0);
      String string0 = convertUtilsBean0.convert(object0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      String[] stringArray0 = new String[4];
      Class<String> class0 = String.class;
      Object object0 = convertUtilsBean0.convert(stringArray0, class0);
      convertUtilsBean0.convert(object0);
      assertEquals(0.0, convertUtilsBean0.getDefaultDouble(), 0.01);
      assertEquals((byte)0, convertUtilsBean0.getDefaultByte());
      assertEquals(' ', convertUtilsBean0.getDefaultCharacter());
      assertEquals(0.0F, convertUtilsBean0.getDefaultFloat(), 0.01F);
      assertEquals(0, convertUtilsBean0.getDefaultInteger());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      convertUtilsBean0.convert((Object) null);
      assertEquals(0L, convertUtilsBean0.getDefaultLong());
      assertEquals(0, convertUtilsBean0.getDefaultInteger());
      assertEquals(' ', convertUtilsBean0.getDefaultCharacter());
      assertEquals(0.0F, convertUtilsBean0.getDefaultFloat(), 0.01F);
      assertEquals((byte)0, convertUtilsBean0.getDefaultByte());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      convertUtilsBean0.setDefaultBoolean(false);
      assertFalse(convertUtilsBean0.getDefaultBoolean());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      convertUtilsBean0.setDefaultInteger((-2233));
      assertEquals((-2233), convertUtilsBean0.getDefaultInteger());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      convertUtilsBean0.setDefaultCharacter('Z');
      assertEquals('Z', convertUtilsBean0.getDefaultCharacter());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      convertUtilsBean0.setDefaultShort((short) (-1648));
      short short0 = convertUtilsBean0.getDefaultShort();
      assertEquals((short) (-1648), short0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      boolean boolean0 = convertUtilsBean0.getDefaultBoolean();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      convertUtilsBean0.register(false, false, (-909));
      assertFalse(convertUtilsBean0.getDefaultBoolean());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      short short0 = convertUtilsBean0.getDefaultShort();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      Class<String> class0 = String.class;
      convertUtilsBean0.deregister(class0);
      // Undeclared exception!
      try { 
        convertUtilsBean0.convert("", class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.ConvertUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      convertUtilsBean0.setDefaultByte((byte) (-53));
      assertEquals((byte) (-53), convertUtilsBean0.getDefaultByte());
  }
}
