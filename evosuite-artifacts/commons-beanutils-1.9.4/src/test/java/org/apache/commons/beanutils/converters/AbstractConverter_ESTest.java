/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 18:16:05 GMT 2022
 */

package org.apache.commons.beanutils.converters;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.beanutils.ConversionException;
import org.apache.commons.beanutils.converters.BigDecimalConverter;
import org.apache.commons.beanutils.converters.BigIntegerConverter;
import org.apache.commons.beanutils.converters.BooleanConverter;
import org.apache.commons.beanutils.converters.ByteConverter;
import org.apache.commons.beanutils.converters.CalendarConverter;
import org.apache.commons.beanutils.converters.CharacterConverter;
import org.apache.commons.beanutils.converters.ClassConverter;
import org.apache.commons.beanutils.converters.FileConverter;
import org.apache.commons.beanutils.converters.FloatConverter;
import org.apache.commons.beanutils.converters.IntegerConverter;
import org.apache.commons.beanutils.converters.SqlDateConverter;
import org.apache.commons.beanutils.converters.SqlTimeConverter;
import org.apache.commons.beanutils.converters.SqlTimestampConverter;
import org.apache.commons.beanutils.converters.StringConverter;
import org.apache.commons.beanutils.converters.URLConverter;
import org.apache.commons.logging.Log;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractConverter_ESTest extends AbstractConverter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassConverter classConverter0 = new ClassConverter();
      classConverter0.setDefaultValue((Object) null);
      Integer integer0 = classConverter0.convert((Class<Integer>) null, (Object) classConverter0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BooleanConverter booleanConverter0 = new BooleanConverter((Object) null);
      Log log0 = booleanConverter0.log();
      assertNotNull(log0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharacterConverter characterConverter0 = new CharacterConverter();
      boolean boolean0 = characterConverter0.isUseDefault();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileConverter fileConverter0 = new FileConverter((Object) null);
      Class<Object> class0 = Object.class;
      MockThrowable mockThrowable0 = new MockThrowable((Throwable) null);
      ConversionException conversionException0 = new ConversionException("a}+zn93rY`K7k.l", mockThrowable0);
      Object object0 = fileConverter0.handleError(class0, (Object) conversionException0, (Throwable) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter("G\"[PL{[Zq'Z}U");
      Class<Object> class0 = Object.class;
      Integer integer0 = new Integer(187);
      MockThrowable mockThrowable0 = new MockThrowable("B|4!Kuz_i _%.U$ n");
      Object object0 = stringConverter0.handleError(class0, (Object) integer0, (Throwable) mockThrowable0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      Class<String> class0 = String.class;
      stringConverter0.getDefault(class0);
      assertFalse(stringConverter0.isUseDefault());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConversionException conversionException0 = new ConversionException("org.apache.commons.beanutils.converters.");
      FileConverter fileConverter0 = new FileConverter(conversionException0);
      Class<ConversionException> class0 = ConversionException.class;
      MockFile mockFile0 = (MockFile)fileConverter0.getDefault(class0);
      assertEquals(0L, mockFile0.getUsableSpace());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter((Object) null);
      Class<ConversionException> class0 = ConversionException.class;
      String string0 = stringConverter0.convertToString(class0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      stringConverter0.convertArray((Object) null);
      assertFalse(stringConverter0.isUseDefault());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SqlTimestampConverter sqlTimestampConverter0 = new SqlTimestampConverter();
      sqlTimestampConverter0.convertArray("");
      assertFalse(sqlTimestampConverter0.isUseDefault());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SqlTimestampConverter sqlTimestampConverter0 = new SqlTimestampConverter();
      Class<ConversionException> class0 = ConversionException.class;
      // Undeclared exception!
      try { 
        sqlTimestampConverter0.handleMissing(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No value specified for 'org.apache.commons.beanutils.ConversionException'
         //
         verifyException("org.apache.commons.beanutils.converters.AbstractConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharacterConverter characterConverter0 = new CharacterConverter();
      // Undeclared exception!
      try { 
        characterConverter0.handleMissing((Class<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.converters.AbstractConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileConverter fileConverter0 = new FileConverter();
      Class<Object> class0 = Object.class;
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      // Undeclared exception!
      try { 
        fileConverter0.handleError(class0, (Object) class0, (Throwable) mockThrowable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error converting from 'Class' to 'Object' null
         //
         verifyException("org.apache.commons.beanutils.converters.AbstractConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      URLConverter uRLConverter0 = new URLConverter();
      BigIntegerConverter bigIntegerConverter0 = new BigIntegerConverter();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        bigIntegerConverter0.handleError(class0, (Object) uRLConverter0, (Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.converters.AbstractConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      BooleanConverter booleanConverter0 = new BooleanConverter(stringArray0, stringArray0);
      // Undeclared exception!
      try { 
        booleanConverter0.getDefault((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.converters.AbstractConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SqlTimeConverter sqlTimeConverter0 = new SqlTimeConverter();
      try { 
        sqlTimeConverter0.convertToString((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BigDecimalConverter bigDecimalConverter0 = new BigDecimalConverter();
      Class<BigDecimal> class0 = bigDecimalConverter0.getDefaultType();
      String string0 = bigDecimalConverter0.toString(class0);
      assertEquals("BigDecimal", string0);
      assertFalse(bigDecimalConverter0.isUseDefault());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassConverter classConverter0 = new ClassConverter();
      Class<Locale> class0 = Locale.class;
      String string0 = classConverter0.toString(class0);
      assertEquals("Locale", string0);
      assertFalse(classConverter0.isUseDefault());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ByteConverter byteConverter0 = new ByteConverter();
      String string0 = byteConverter0.toString(class0);
      assertFalse(byteConverter0.isUseDefault());
      assertEquals("Object", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter((Object) null);
      Class<String> class0 = String.class;
      Class<Object> class1 = Object.class;
      Object object0 = stringConverter0.convert(class1, (Object) class0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SqlDateConverter sqlDateConverter0 = new SqlDateConverter();
      Class<Object> class0 = Object.class;
      Object object0 = new Object();
      sqlDateConverter0.convert(class0, object0);
      assertFalse(sqlDateConverter0.isUseDefault());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Object> class0 = Object.class;
      IntegerConverter integerConverter0 = new IntegerConverter();
      Class<String> class1 = String.class;
      integerConverter0.convert(class1, (Object) class0);
      assertFalse(integerConverter0.isUseDefault());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassConverter classConverter0 = new ClassConverter();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        classConverter0.convert(class0, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No value specified for 'Integer'
         //
         verifyException("org.apache.commons.beanutils.converters.AbstractConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter("");
      String string0 = stringConverter0.toString((Class<?>) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IntegerConverter integerConverter0 = new IntegerConverter();
      Class<Integer> class0 = Integer.class;
      Integer integer0 = new Integer(1878);
      integerConverter0.setDefaultValue(integer0);
      Integer integer1 = integerConverter0.handleMissing(class0);
      assertEquals(1878, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SqlTimestampConverter sqlTimestampConverter0 = new SqlTimestampConverter();
      Class<String> class0 = String.class;
      sqlTimestampConverter0.handleMissing(class0);
      assertFalse(sqlTimestampConverter0.isUseDefault());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IntegerConverter integerConverter0 = new IntegerConverter();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        integerConverter0.setDefaultValue(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error converting from 'Object' to 'Integer' For input string: \"java.lang.Object@0000000003\"
         //
         verifyException("org.apache.commons.beanutils.converters.AbstractConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileConverter fileConverter0 = new FileConverter("");
      Class<ConversionException> class0 = ConversionException.class;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        fileConverter0.convert(class0, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Default conversion to org.apache.commons.beanutils.ConversionException failed.
         //
         verifyException("org.apache.commons.beanutils.converters.AbstractConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      linkedList0.add((Locale.LanguageRange) null);
      FloatConverter floatConverter0 = null;
      try {
        floatConverter0 = new FloatConverter(linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No value specified for 'Float'
         //
         verifyException("org.apache.commons.beanutils.converters.AbstractConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      FloatConverter floatConverter0 = null;
      try {
        floatConverter0 = new FloatConverter(linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No value specified for 'Float'
         //
         verifyException("org.apache.commons.beanutils.converters.AbstractConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ConversionException conversionException0 = new ConversionException("org.apache.commons.beanutils.converters.");
      FileConverter fileConverter0 = new FileConverter(conversionException0);
      boolean boolean0 = fileConverter0.isUseDefault();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BooleanConverter booleanConverter0 = new BooleanConverter();
      String string0 = booleanConverter0.toString();
      assertEquals("BooleanConverter[UseDefault=false]", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ConversionException conversionException0 = new ConversionException("org.apache.commons.beanutils.converters.");
      FileConverter fileConverter0 = new FileConverter(conversionException0);
      Class<Object> class0 = Object.class;
      fileConverter0.conversionException(class0, (Object) null);
      assertTrue(fileConverter0.isUseDefault());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ConversionException conversionException0 = new ConversionException("BooleanConverter[UseDefault=false]");
      CalendarConverter calendarConverter0 = null;
      try {
        calendarConverter0 = new CalendarConverter(conversionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // CalendarConverter does not support default String to 'Calendar' conversion.
         //
         verifyException("org.apache.commons.beanutils.converters.DateTimeConverter", e);
      }
  }
}
