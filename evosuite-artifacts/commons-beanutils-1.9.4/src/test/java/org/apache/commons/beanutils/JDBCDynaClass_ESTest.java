/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 18:21:14 GMT 2022
 */

package org.apache.commons.beanutils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Timestamp;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.beanutils.DynaProperty;
import org.apache.commons.beanutils.ResultSetDynaClass;
import org.apache.commons.beanutils.RowSetDynaClass;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDBCDynaClass_ESTest extends JDBCDynaClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSetMetaData0).getColumnClassName(anyInt());
      doReturn(1).when(resultSetMetaData0).getColumnCount();
      doReturn(".+&RqtpCa%j >?Bc").when(resultSetMetaData0).getColumnLabel(anyInt());
      doReturn(1).when(resultSetMetaData0).getColumnType(anyInt());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((Object) null).when(resultSet0).getObject(anyString());
      doReturn(true, false).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0, true, true);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn("J>GE/o#]p#N?9P3!j").when(resultSetMetaData0).getColumnClassName(anyInt());
      doReturn(3115).when(resultSetMetaData0).getColumnCount();
      doReturn("Invalid name '", "/#k-*>@(f}[-WR2").when(resultSetMetaData0).getColumnName(anyInt());
      doReturn(91, 3115).when(resultSetMetaData0).getColumnType(anyInt());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      ResultSetDynaClass resultSetDynaClass0 = null;
      try {
        resultSetDynaClass0 = new ResultSetDynaClass(resultSet0, true, false);
        fail("Expecting exception: SQLException");
      
      } catch(Throwable e) {
         //
         // Cannot load column class 'J>GE/o#]p#N?9P3!j': java.lang.ClassNotFoundException: Class 'J>GE/o#]p#N?9P3!j.class' should be in target project, but could not be found!
         //
         verifyException("org.apache.commons.beanutils.ResultSetDynaClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0, rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      ResultSetDynaClass resultSetDynaClass0 = new ResultSetDynaClass(resultSet0, false, false);
      ResultSet resultSet1 = resultSetDynaClass0.getResultSet();
      resultSetDynaClass0.introspect(resultSet1);
      assertSame(resultSet1, resultSet0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSetMetaData0).getColumnClassName(anyInt());
      doReturn(1).when(resultSetMetaData0).getColumnCount();
      doReturn("").when(resultSetMetaData0).getColumnLabel(anyInt());
      doReturn("").when(resultSetMetaData0).getColumnName(anyInt());
      doReturn(1).when(resultSetMetaData0).getColumnType(anyInt());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((Object) null).when(resultSet0).getObject(anyString());
      doReturn(true, false).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0, true, true);
      rowSetDynaClass0.setUseColumnLabel(true);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSetMetaData0).getColumnClassName(anyInt());
      doReturn(1).when(resultSetMetaData0).getColumnCount();
      doReturn("").when(resultSetMetaData0).getColumnLabel(anyInt());
      doReturn("").when(resultSetMetaData0).getColumnName(anyInt());
      doReturn(1).when(resultSetMetaData0).getColumnType(anyInt());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((Object) null).when(resultSet0).getObject(anyString());
      doReturn(true, false).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0, true, true);
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(resultSet1).getObject(anyString());
      Object object0 = rowSetDynaClass0.getObject(resultSet1, "");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0, true, 0, true);
      DynaProperty dynaProperty0 = rowSetDynaClass0.getDynaProperty("x;x`%^e\t9z,r'hM(}");
      assertNull(dynaProperty0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0, false);
      rowSetDynaClass0.properties = null;
      DynaProperty[] dynaPropertyArray0 = rowSetDynaClass0.getDynaProperties();
      assertNull(dynaPropertyArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSetMetaData0).getColumnClassName(anyInt());
      doReturn(3100).when(resultSetMetaData0).getColumnCount();
      doReturn((String) null, (String) null).when(resultSetMetaData0).getColumnLabel(anyInt());
      doReturn("'", (String) null).when(resultSetMetaData0).getColumnName(anyInt());
      doReturn(0).when(resultSetMetaData0).getColumnType(anyInt());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      ResultSetDynaClass resultSetDynaClass0 = null;
      try {
        resultSetDynaClass0 = new ResultSetDynaClass(resultSet0, false, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      ResultSetDynaClass resultSetDynaClass0 = new ResultSetDynaClass(resultSet0);
      String string0 = resultSetDynaClass0.getColumnName((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0, 33);
      String string0 = rowSetDynaClass0.getColumnName("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSetMetaData0).getColumnClassName(anyInt());
      doReturn(739).when(resultSetMetaData0).getColumnCount();
      doReturn("*CJ!p&U_9/0<E+", (String) null).when(resultSetMetaData0).getColumnName(anyInt());
      doReturn(0).when(resultSetMetaData0).getColumnType(anyInt());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      ResultSetDynaClass resultSetDynaClass0 = null;
      try {
        resultSetDynaClass0 = new ResultSetDynaClass(resultSet0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.JDBCDynaClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(resultSetMetaData0).getColumnClassName(anyInt());
      doReturn(11).when(resultSetMetaData0).getColumnCount();
      doReturn(".+&RqtpCa%j >?Bc", ".+&RqtpCa%j >?Bc", ".+&RqtpCa%j >?Bc", "newInstance() not supported", "No property name specified").when(resultSetMetaData0).getColumnLabel(anyInt());
      doReturn(11, 11, 93, 93, 93).when(resultSetMetaData0).getColumnType(anyInt());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((Timestamp) null, (Timestamp) null, (Timestamp) null, (Timestamp) null, (Timestamp) null).when(resultSet0).getTimestamp(anyString());
      doReturn(true, false).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0, true, true);
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet1).getMetaData();
      // Undeclared exception!
      try { 
        rowSetDynaClass0.introspect(resultSet1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.JDBCDynaClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0);
      // Undeclared exception!
      try { 
        rowSetDynaClass0.createDynaProperty((ResultSetMetaData) null, (-1309));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.JDBCDynaClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0, (-249));
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        rowSetDynaClass0.getObject(resultSet1, "Invalid primitive type. Check version of beanutils used to serialize is compatible.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid name 'Invalid primitive type. Check version of beanutils used to serialize is compatible.'
         //
         verifyException("org.apache.commons.beanutils.JDBCDynaClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(resultSetMetaData0).getColumnClassName(anyInt());
      doReturn(11).when(resultSetMetaData0).getColumnCount();
      doReturn(".+&RqtpCa%j >?Bc", ".+&RqtpCa%j >?Bc", ".+&RqtpCa%j >?Bc", "newInstance() not supported", "No property name specified").when(resultSetMetaData0).getColumnLabel(anyInt());
      doReturn(11, 11, 93, 93, 93).when(resultSetMetaData0).getColumnType(anyInt());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((Timestamp) null, (Timestamp) null, (Timestamp) null, (Timestamp) null, (Timestamp) null).when(resultSet0).getTimestamp(anyString());
      doReturn(true, false).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0, true, true);
      String string0 = rowSetDynaClass0.getColumnName(")'");
      assertEquals(")'", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn("J>GE/o#]p#N9P3!").when(resultSetMetaData0).getColumnClassName(anyInt());
      doReturn(3114).when(resultSetMetaData0).getColumnCount();
      doReturn("Invalid name '", "J>GE/o#]p#N9P3!").when(resultSetMetaData0).getColumnName(anyInt());
      doReturn(92, 3114).when(resultSetMetaData0).getColumnType(anyInt());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      ResultSetDynaClass resultSetDynaClass0 = null;
      try {
        resultSetDynaClass0 = new ResultSetDynaClass(resultSet0, false, false);
        fail("Expecting exception: SQLException");
      
      } catch(Throwable e) {
         //
         // Cannot load column class 'J>GE/o#]p#N9P3!': java.lang.ClassNotFoundException: Class 'J>GE/o#]p#N9P3!.class' should be in target project, but could not be found!
         //
         verifyException("org.apache.commons.beanutils.ResultSetDynaClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(resultSetMetaData0).getColumnCount();
      doReturn((String) null).when(resultSetMetaData0).getColumnLabel(anyInt());
      doReturn((String) null).when(resultSetMetaData0).getColumnName(anyInt());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      RowSetDynaClass rowSetDynaClass0 = null;
      try {
        rowSetDynaClass0 = new RowSetDynaClass(resultSet0, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.JDBCDynaClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      try { 
        rowSetDynaClass0.createDynaProperty(rowSetMetaDataImpl0, 0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Invalid column index :0
         //
         verifyException("javax.sql.rowset.RowSetMetaDataImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true, true).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0, true, 1);
      Class<?> class0 = rowSetDynaClass0.loadClass("org.apache.commons.beanutils.ResultSetIterator");
      assertEquals(1, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0, false, 899, false);
      // Undeclared exception!
      try { 
        rowSetDynaClass0.getDynaProperty((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No property name specified
         //
         verifyException("org.apache.commons.beanutils.JDBCDynaClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSetMetaData0).getColumnClassName(anyInt());
      doReturn(1).when(resultSetMetaData0).getColumnCount();
      doReturn("").when(resultSetMetaData0).getColumnLabel(anyInt());
      doReturn("").when(resultSetMetaData0).getColumnName(anyInt());
      doReturn(1).when(resultSetMetaData0).getColumnType(anyInt());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((Object) null).when(resultSet0).getObject(anyString());
      doReturn(true, false).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0, true, true);
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("QMwWqvl74.x_").when(resultSet1).getObject(anyString());
      Object object0 = rowSetDynaClass0.getObject(resultSet1, "");
      assertEquals("QMwWqvl74.x_", object0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true, true).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0, true, 1);
      DynaProperty[] dynaPropertyArray0 = rowSetDynaClass0.getDynaProperties();
      assertEquals(0, dynaPropertyArray0.length);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0);
      String string0 = rowSetDynaClass0.getName();
      assertEquals("org.apache.commons.beanutils.RowSetDynaClass", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0);
      // Undeclared exception!
      try { 
        rowSetDynaClass0.newInstance();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // newInstance() not supported
         //
         verifyException("org.apache.commons.beanutils.JDBCDynaClass", e);
      }
  }
}
