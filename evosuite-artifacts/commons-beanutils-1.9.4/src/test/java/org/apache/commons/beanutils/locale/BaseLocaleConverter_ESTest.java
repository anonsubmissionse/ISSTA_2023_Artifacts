/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 18:24:54 GMT 2022
 */

package org.apache.commons.beanutils.locale;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.apache.commons.beanutils.locale.converters.BigDecimalLocaleConverter;
import org.apache.commons.beanutils.locale.converters.BigIntegerLocaleConverter;
import org.apache.commons.beanutils.locale.converters.ByteLocaleConverter;
import org.apache.commons.beanutils.locale.converters.DateLocaleConverter;
import org.apache.commons.beanutils.locale.converters.DecimalLocaleConverter;
import org.apache.commons.beanutils.locale.converters.DoubleLocaleConverter;
import org.apache.commons.beanutils.locale.converters.FloatLocaleConverter;
import org.apache.commons.beanutils.locale.converters.IntegerLocaleConverter;
import org.apache.commons.beanutils.locale.converters.LongLocaleConverter;
import org.apache.commons.beanutils.locale.converters.ShortLocaleConverter;
import org.apache.commons.beanutils.locale.converters.SqlDateLocaleConverter;
import org.apache.commons.beanutils.locale.converters.SqlTimestampLocaleConverter;
import org.apache.commons.beanutils.locale.converters.StringLocaleConverter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BaseLocaleConverter_ESTest extends BaseLocaleConverter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = Locale.UK;
      LongLocaleConverter longLocaleConverter0 = new LongLocaleConverter("A`B2*", locale0);
      Object object0 = longLocaleConverter0.convert((Object) locale0, "A`B2*");
      assertEquals("A`B2*", object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LongLocaleConverter longLocaleConverter0 = new LongLocaleConverter();
      Object object0 = longLocaleConverter0.convert((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      DoubleLocaleConverter doubleLocaleConverter0 = new DoubleLocaleConverter(object0);
      Class<Object> class0 = Object.class;
      Object object1 = doubleLocaleConverter0.convert(class0, object0, "");
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FloatLocaleConverter floatLocaleConverter0 = new FloatLocaleConverter();
      SqlDateLocaleConverter sqlDateLocaleConverter0 = new SqlDateLocaleConverter(true);
      // Undeclared exception!
      try { 
        floatLocaleConverter0.convert((Object) sqlDateLocaleConverter0, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.apache.commons.beanutils.locale.converters.SqlDateLocaleConverter cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.beanutils.locale.BaseLocaleConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      LongLocaleConverter longLocaleConverter0 = new LongLocaleConverter(true);
      FloatLocaleConverter floatLocaleConverter0 = new FloatLocaleConverter(locale0, true);
      SqlDateLocaleConverter sqlDateLocaleConverter0 = new SqlDateLocaleConverter(floatLocaleConverter0, locale0, "");
      // Undeclared exception!
      try { 
        longLocaleConverter0.convert((Object) sqlDateLocaleConverter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.apache.commons.beanutils.locale.converters.SqlDateLocaleConverter cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.beanutils.locale.BaseLocaleConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      BigIntegerLocaleConverter bigIntegerLocaleConverter0 = new BigIntegerLocaleConverter(object0, false);
      Locale locale0 = Locale.FRENCH;
      ShortLocaleConverter shortLocaleConverter0 = new ShortLocaleConverter(bigIntegerLocaleConverter0, locale0, false);
      IntegerLocaleConverter integerLocaleConverter0 = new IntegerLocaleConverter(shortLocaleConverter0, false);
      Class<String> class0 = String.class;
      DoubleLocaleConverter doubleLocaleConverter0 = new DoubleLocaleConverter(locale0, false);
      // Undeclared exception!
      try { 
        integerLocaleConverter0.convert(class0, (Object) doubleLocaleConverter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported target type: class java.lang.String
         //
         verifyException("org.apache.commons.beanutils.locale.BaseLocaleConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      SqlDateLocaleConverter sqlDateLocaleConverter0 = new SqlDateLocaleConverter((Object) null, locale0);
      Class<DecimalLocaleConverter> class0 = DecimalLocaleConverter.class;
      Object object0 = new Object();
      DecimalLocaleConverter decimalLocaleConverter0 = sqlDateLocaleConverter0.convert(class0, object0, (String) null);
      assertNull(decimalLocaleConverter0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      ByteLocaleConverter byteLocaleConverter0 = new ByteLocaleConverter(locale0, "", true);
      ByteLocaleConverter byteLocaleConverter1 = new ByteLocaleConverter(byteLocaleConverter0, locale0, "CUda@*5r_Mz'.92", true);
      Class<LongLocaleConverter> class0 = LongLocaleConverter.class;
      // Undeclared exception!
      try { 
        byteLocaleConverter1.convert(class0, (Object) null, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported target type: class org.apache.commons.beanutils.locale.converters.LongLocaleConverter
         //
         verifyException("org.apache.commons.beanutils.locale.BaseLocaleConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      FloatLocaleConverter floatLocaleConverter0 = new FloatLocaleConverter(locale0, true);
      Class<LongLocaleConverter> class0 = LongLocaleConverter.class;
      LongLocaleConverter longLocaleConverter0 = floatLocaleConverter0.convert(class0, (Object) null, "org.apache.commons.beanutils.locale.converters.DecimalLocaleConverter");
      assertNull(longLocaleConverter0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringLocaleConverter stringLocaleConverter0 = new StringLocaleConverter(false);
      Class<BigDecimalLocaleConverter> class0 = BigDecimalLocaleConverter.class;
      DoubleLocaleConverter doubleLocaleConverter0 = new DoubleLocaleConverter(stringLocaleConverter0, true);
      // Undeclared exception!
      try { 
        stringLocaleConverter0.convert(class0, (Object) doubleLocaleConverter0, "~I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported target type: class org.apache.commons.beanutils.locale.converters.BigDecimalLocaleConverter
         //
         verifyException("org.apache.commons.beanutils.locale.BaseLocaleConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<String> class0 = String.class;
      ByteLocaleConverter byteLocaleConverter0 = new ByteLocaleConverter();
      // Undeclared exception!
      try { 
        byteLocaleConverter0.convert(class0, (Object) class0, "org.apache.commons.beanutils.locale.converters.ByteLocaleConverter@0000000002");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Multiple decimal separators in pattern \"org.apache.commons.beanutils.locale.converters.ByteLocaleConverter@0000000002\"
         //
         verifyException("org.apache.commons.beanutils.locale.BaseLocaleConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateLocaleConverter dateLocaleConverter0 = new DateLocaleConverter((Object) null);
      Class<BigDecimalLocaleConverter> class0 = BigDecimalLocaleConverter.class;
      BigDecimalLocaleConverter bigDecimalLocaleConverter0 = dateLocaleConverter0.convert(class0, (Object) null);
      assertNull(bigDecimalLocaleConverter0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringLocaleConverter stringLocaleConverter0 = new StringLocaleConverter((Locale) null);
      Object object0 = stringLocaleConverter0.convert((Object) null, "org.apache.commons.beanutils.locale.converters.ByteLocaleConverter@0000000002");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringLocaleConverter stringLocaleConverter0 = new StringLocaleConverter((Locale) null);
      Class<String> class0 = String.class;
      ByteLocaleConverter byteLocaleConverter0 = new ByteLocaleConverter();
      String string0 = stringLocaleConverter0.convert(class0, (Object) byteLocaleConverter0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ByteLocaleConverter byteLocaleConverter0 = new ByteLocaleConverter();
      Locale locale0 = Locale.TAIWAN;
      SqlTimestampLocaleConverter sqlTimestampLocaleConverter0 = new SqlTimestampLocaleConverter(byteLocaleConverter0, locale0);
      BigDecimalLocaleConverter bigDecimalLocaleConverter0 = new BigDecimalLocaleConverter(sqlTimestampLocaleConverter0, locale0, "org.apache.commons.beanutils.locale.converters.DecimalLocaleConverter", false);
      Object object0 = bigDecimalLocaleConverter0.convert((Object) "");
      assertSame(object0, sqlTimestampLocaleConverter0);
  }
}
