/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 18:30:24 GMT 2022
 */

package org.apache.commons.beanutils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.beans.PropertyDescriptor;
import java.lang.annotation.Annotation;
import java.lang.reflect.Method;
import java.util.Set;
import org.apache.commons.beanutils.DefaultIntrospectionContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultIntrospectionContext_ESTest extends DefaultIntrospectionContext_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultIntrospectionContext defaultIntrospectionContext0 = new DefaultIntrospectionContext((Class<?>) null);
      Class<?> class0 = defaultIntrospectionContext0.getTargetClass();
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      DefaultIntrospectionContext defaultIntrospectionContext0 = new DefaultIntrospectionContext(class0);
      Class<?> class1 = defaultIntrospectionContext0.getTargetClass();
      assertFalse(class1.isEnum());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Object> class0 = Object.class;
      DefaultIntrospectionContext defaultIntrospectionContext0 = new DefaultIntrospectionContext(class0);
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor("Property descriptor must not be null!", class0, (String) null, (String) null);
      defaultIntrospectionContext0.addPropertyDescriptor(propertyDescriptor0);
      PropertyDescriptor[] propertyDescriptorArray0 = defaultIntrospectionContext0.getPropertyDescriptors();
      assertEquals(1, propertyDescriptorArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Object> class0 = Object.class;
      DefaultIntrospectionContext defaultIntrospectionContext0 = new DefaultIntrospectionContext(class0);
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor(" y%", class0, (String) null, (String) null);
      propertyDescriptor0.setPreferred(true);
      defaultIntrospectionContext0.addPropertyDescriptor(propertyDescriptor0);
      PropertyDescriptor propertyDescriptor1 = defaultIntrospectionContext0.getPropertyDescriptor(" y%");
      assertTrue(propertyDescriptor1.isPreferred());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Object> class0 = Object.class;
      DefaultIntrospectionContext defaultIntrospectionContext0 = new DefaultIntrospectionContext(class0);
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor("Property descriptor must not be null!", class0, (String) null, (String) null);
      propertyDescriptor0.setHidden(true);
      defaultIntrospectionContext0.addPropertyDescriptor(propertyDescriptor0);
      PropertyDescriptor propertyDescriptor1 = defaultIntrospectionContext0.getPropertyDescriptor("Property descriptor must not be null!");
      assertFalse(propertyDescriptor1.isExpert());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Object> class0 = Object.class;
      DefaultIntrospectionContext defaultIntrospectionContext0 = new DefaultIntrospectionContext(class0);
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor(" y%", class0, (String) null, (String) null);
      propertyDescriptor0.setExpert(true);
      defaultIntrospectionContext0.addPropertyDescriptor(propertyDescriptor0);
      PropertyDescriptor propertyDescriptor1 = defaultIntrospectionContext0.getPropertyDescriptor(" y%");
      assertFalse(propertyDescriptor1.isConstrained());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Object> class0 = Object.class;
      DefaultIntrospectionContext defaultIntrospectionContext0 = new DefaultIntrospectionContext(class0);
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor("M y%", class0, (String) null, (String) null);
      propertyDescriptor0.setConstrained(true);
      defaultIntrospectionContext0.addPropertyDescriptor(propertyDescriptor0);
      PropertyDescriptor propertyDescriptor1 = defaultIntrospectionContext0.getPropertyDescriptor("M y%");
      assertFalse(propertyDescriptor1.isHidden());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<String> class0 = String.class;
      DefaultIntrospectionContext defaultIntrospectionContext0 = new DefaultIntrospectionContext(class0);
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor("ZQg;=UTsN%3L", (Method) null, (Method) null);
      propertyDescriptor0.setBound(true);
      defaultIntrospectionContext0.addPropertyDescriptor(propertyDescriptor0);
      PropertyDescriptor propertyDescriptor1 = defaultIntrospectionContext0.getPropertyDescriptor("ZQg;=UTsN%3L");
      assertEquals("ZQg;=UTsN%3L", propertyDescriptor1.getShortDescription());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Object> class0 = Object.class;
      DefaultIntrospectionContext defaultIntrospectionContext0 = new DefaultIntrospectionContext(class0);
      boolean boolean0 = defaultIntrospectionContext0.hasProperty((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Object> class0 = Object.class;
      DefaultIntrospectionContext defaultIntrospectionContext0 = new DefaultIntrospectionContext(class0);
      PropertyDescriptor[] propertyDescriptorArray0 = new PropertyDescriptor[2];
      // Undeclared exception!
      try { 
        defaultIntrospectionContext0.addPropertyDescriptors(propertyDescriptorArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Property descriptor must not be null!
         //
         verifyException("org.apache.commons.beanutils.DefaultIntrospectionContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<String> class0 = String.class;
      DefaultIntrospectionContext defaultIntrospectionContext0 = new DefaultIntrospectionContext(class0);
      // Undeclared exception!
      try { 
        defaultIntrospectionContext0.addPropertyDescriptors((PropertyDescriptor[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array with descriptors must not be null!
         //
         verifyException("org.apache.commons.beanutils.DefaultIntrospectionContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Object> class0 = Object.class;
      DefaultIntrospectionContext defaultIntrospectionContext0 = new DefaultIntrospectionContext(class0);
      // Undeclared exception!
      try { 
        defaultIntrospectionContext0.addPropertyDescriptor((PropertyDescriptor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Property descriptor must not be null!
         //
         verifyException("org.apache.commons.beanutils.DefaultIntrospectionContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Object> class0 = Object.class;
      DefaultIntrospectionContext defaultIntrospectionContext0 = new DefaultIntrospectionContext(class0);
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor("y%", class0, (String) null, (String) null);
      defaultIntrospectionContext0.addPropertyDescriptor(propertyDescriptor0);
      boolean boolean0 = defaultIntrospectionContext0.hasProperty("y%");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Object> class0 = Object.class;
      DefaultIntrospectionContext defaultIntrospectionContext0 = new DefaultIntrospectionContext(class0);
      PropertyDescriptor[] propertyDescriptorArray0 = defaultIntrospectionContext0.getPropertyDescriptors();
      defaultIntrospectionContext0.addPropertyDescriptors(propertyDescriptorArray0);
      assertEquals(0, propertyDescriptorArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Object> class0 = Object.class;
      DefaultIntrospectionContext defaultIntrospectionContext0 = new DefaultIntrospectionContext(class0);
      Set<String> set0 = defaultIntrospectionContext0.propertyNames();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Object> class0 = Object.class;
      DefaultIntrospectionContext defaultIntrospectionContext0 = new DefaultIntrospectionContext(class0);
      PropertyDescriptor propertyDescriptor0 = defaultIntrospectionContext0.getPropertyDescriptor((String) null);
      assertNull(propertyDescriptor0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Object> class0 = Object.class;
      DefaultIntrospectionContext defaultIntrospectionContext0 = new DefaultIntrospectionContext(class0);
      Class<?> class1 = defaultIntrospectionContext0.getTargetClass();
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Object> class0 = Object.class;
      DefaultIntrospectionContext defaultIntrospectionContext0 = new DefaultIntrospectionContext(class0);
      defaultIntrospectionContext0.removePropertyDescriptor((String) null);
  }
}
