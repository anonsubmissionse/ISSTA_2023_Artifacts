/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 18:07:22 GMT 2022
 */

package org.apache.commons.beanutils.converters;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.text.DecimalFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.beanutils.converters.BigDecimalConverter;
import org.apache.commons.beanutils.converters.BigIntegerConverter;
import org.apache.commons.beanutils.converters.ByteConverter;
import org.apache.commons.beanutils.converters.DoubleConverter;
import org.apache.commons.beanutils.converters.FloatConverter;
import org.apache.commons.beanutils.converters.IntegerConverter;
import org.apache.commons.beanutils.converters.LongConverter;
import org.apache.commons.beanutils.converters.ShortConverter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NumberConverter_ESTest extends NumberConverter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 127;
      Integer integer0 = new Integer(127);
      ByteConverter byteConverter0 = new ByteConverter(integer0);
      byteConverter0.toString();
      LongConverter longConverter0 = null;
      try {
        longConverter0 = new LongConverter(byteConverter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error converting from 'ByteConverter' to 'Long' For input string: \"org.apache.commons.beanutils.converters.ByteConverter@0000000001\"
         //
         verifyException("org.apache.commons.beanutils.converters.AbstractConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "olxV2>J");
      BigDecimal bigDecimal0 = new BigDecimal(498286329856L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DoubleConverter doubleConverter0 = new DoubleConverter(bigDecimal0);
      Class<Short> class0 = Short.class;
      // Undeclared exception!
      try { 
        doubleConverter0.handleMissing(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Default conversion to Short failed.
         //
         verifyException("org.apache.commons.beanutils.converters.AbstractConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LongConverter longConverter0 = new LongConverter();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale locale0 = Locale.CANADA_FRENCH;
      longConverter0.setLocale(locale0);
      longConverter0.setPattern("");
      System.setCurrentTimeMillis((-128L));
      longConverter0.toString();
      // Undeclared exception!
      try { 
        longConverter0.setDefaultValue("LongConverter[UseDefault=false, UseLocaleFormat=true, Pattern=, Locale=fr_CA]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error converting from 'String' to 'Long' Java heap space
         //
         verifyException("org.apache.commons.beanutils.converters.AbstractConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long long0 = 250084994080L;
      Long long1 = new Long(250084994080L);
      Long.min(250084994080L, 250084994080L);
      IntegerConverter integerConverter0 = null;
      try {
        integerConverter0 = new IntegerConverter(long1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Long value '250084994080' is too large for Integer
         //
         verifyException("org.apache.commons.beanutils.converters.NumberConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      FloatConverter floatConverter0 = new FloatConverter(boolean0);
      Boolean.logicalAnd(true, true);
      floatConverter0.isAllowDecimals();
      Locale locale0 = Locale.CHINA;
      locale0.getExtensionKeys();
      floatConverter0.setLocale(locale0);
      floatConverter0.toString();
      ByteConverter byteConverter0 = new ByteConverter(boolean0);
      byteConverter0.setPattern("FloatConverter[UseDefault=true, UseLocaleFormat=true, Locale=zh_CN]");
      byteConverter0.getDefaultType();
      byteConverter0.getDefaultType();
      floatConverter0.getLocale();
      DoubleConverter doubleConverter0 = new DoubleConverter();
      doubleConverter0.getDefaultType();
      floatConverter0.setPattern(")");
      BigDecimalConverter bigDecimalConverter0 = new BigDecimalConverter();
      bigDecimalConverter0.getDefaultType();
      bigDecimalConverter0.getDefaultType();
      byteConverter0.toString();
      Class<Float> class0 = Float.class;
      Short short0 = new Short((short)0);
      Short.compare((short)0, (short)0);
      doubleConverter0.convertToType(class0, (Object) short0);
      floatConverter0.setUseLocaleFormat(false);
      Byte byte0 = new Byte((byte)1);
      try { 
        byteConverter0.convertToString(byte0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed pattern \"FloatConverter[UseDefault=true, UseLocaleFormat=true, Locale=zh_CN]\"
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FloatConverter floatConverter0 = new FloatConverter();
      int int0 = 93;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "lME&vJ.M*nk1>Ogu2G");
      Random.setNextRandom(93);
      Long long0 = new Long(93);
      floatConverter0.convertToString(long0);
      BigDecimalConverter bigDecimalConverter0 = new BigDecimalConverter();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<BigDecimal> class0 = BigDecimal.class;
      Double double0 = new Double(93);
      // Undeclared exception!
      try { 
        floatConverter0.convert(class0, (Object) double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error converting from 'Double' to 'BigDecimal' null
         //
         verifyException("org.apache.commons.beanutils.converters.AbstractConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteConverter byteConverter0 = new ByteConverter();
      byteConverter0.getDefaultType();
      BigDecimalConverter bigDecimalConverter0 = new BigDecimalConverter();
      bigDecimalConverter0.getDefaultType();
      Class<Long> class0 = Long.class;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4, 4, 4);
      mockGregorianCalendar0.getTimeInMillis();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      byteConverter0.convertToType(class0, (Object) date0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      FloatConverter floatConverter0 = new FloatConverter(boolean0);
      Boolean.logicalAnd(true, true);
      floatConverter0.isAllowDecimals();
      Locale locale0 = Locale.CHINA;
      locale0.getExtensionKeys();
      floatConverter0.setLocale(locale0);
      floatConverter0.toString();
      ByteConverter byteConverter0 = new ByteConverter(boolean0);
      byteConverter0.setPattern("");
      byteConverter0.getDefaultType();
      byteConverter0.getDefaultType();
      floatConverter0.getLocale();
      DoubleConverter doubleConverter0 = new DoubleConverter();
      doubleConverter0.getDefaultType();
      floatConverter0.setPattern(")");
      BigDecimalConverter bigDecimalConverter0 = new BigDecimalConverter();
      bigDecimalConverter0.getDefaultType();
      bigDecimalConverter0.getDefaultType();
      byteConverter0.toString();
      Class<Float> class0 = Float.class;
      Short short0 = new Short((short)0);
      Short.compare((short)0, (short)0);
      doubleConverter0.convertToType(class0, (Object) short0);
      floatConverter0.setUseLocaleFormat(false);
      Byte byte0 = new Byte((byte)1);
      byteConverter0.convertToString(byte0);
      doubleConverter0.setLocale(locale0);
      Double double0 = new Double(0.0);
      BigIntegerConverter bigIntegerConverter0 = new BigIntegerConverter(double0);
      bigIntegerConverter0.getDefaultType();
      byteConverter0.getPattern();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ShortConverter shortConverter0 = new ShortConverter();
      int int0 = 0;
      shortConverter0.setPattern("yb%i7K;L,>");
      Integer integer0 = new Integer(0);
      int int1 = (-1732);
      Integer.divideUnsigned((-1732), (-1732));
      Integer.remainderUnsigned(0, 110);
      Class<BigDecimal> class0 = BigDecimal.class;
      DecimalFormat decimalFormat0 = new DecimalFormat();
      try { 
        shortConverter0.convertToType(class0, (Object) decimalFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unquoted special character ';' in pattern \"yb%i7K;L,>\"
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LongConverter longConverter0 = new LongConverter();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale locale0 = Locale.CANADA_FRENCH;
      longConverter0.setLocale(locale0);
      longConverter0.toString();
      // Undeclared exception!
      try { 
        longConverter0.setDefaultValue("LongConverter[UseDefault=false, UseLocaleFormat=true, Locale=fr_CA]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error converting from 'String' to 'Long' using pattern '#,##0.###' for locale=[fr_CA]
         //
         verifyException("org.apache.commons.beanutils.converters.NumberConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FloatConverter floatConverter0 = new FloatConverter();
      floatConverter0.getDefaultType();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      BigDecimalConverter bigDecimalConverter0 = new BigDecimalConverter();
      Class<BigInteger> class0 = BigInteger.class;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)22;
      byteArray0[6] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.negate();
      bigInteger0.doubleValue();
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      bigDecimalConverter0.convertToType(class0, (Object) bigDecimal0);
      bigDecimalConverter0.toString();
      bigDecimalConverter0.isAllowDecimals();
      DoubleConverter doubleConverter0 = new DoubleConverter();
      Locale locale0 = Locale.ITALIAN;
      doubleConverter0.setLocale(locale0);
      doubleConverter0.getDefaultType();
      doubleConverter0.setUseLocaleFormat(true);
      bigDecimalConverter0.getDefaultType();
      doubleConverter0.getLocale();
      bigDecimalConverter0.getDefaultType();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BigIntegerConverter bigIntegerConverter0 = new BigIntegerConverter();
      bigIntegerConverter0.toString();
      Float float0 = new Float((-2215.579));
      Float.sum((-1.0F), 1524.21F);
      bigIntegerConverter0.convertArray(float0);
      Short short0 = new Short((short) (-796));
      bigIntegerConverter0.setDefaultValue(short0);
      Class<BigDecimal> class0 = BigDecimal.class;
      bigIntegerConverter0.convert(class0, (Object) class0);
      bigIntegerConverter0.setPattern("@#x");
      bigIntegerConverter0.setUseLocaleFormat(true);
      bigIntegerConverter0.toString();
      Locale locale0 = Locale.FRANCE;
      bigIntegerConverter0.setLocale(locale0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      float float0 = (-1409.1855F);
      Float float1 = new Float((-1409.1855F));
      float float2 = 1.0F;
      Float.sum((-1409.1855F), 1.0F);
      Float.isFinite((-1409.1855F));
      Float.min((-1409.1855F), (-1409.1855F));
      Float.isFinite((-1408.1855F));
      Float.min((-453.15F), 0.0F);
      Float.isFinite((-1408.1855F));
      Float.max((-1409.1855F), 1132.6129F);
      IntegerConverter integerConverter0 = new IntegerConverter(float1);
      Float float3 = new Float((-1409.1855F));
      ByteConverter byteConverter0 = null;
      try {
        byteConverter0 = new ByteConverter(float3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Float value '-1409.1855' is too small Byte
         //
         verifyException("org.apache.commons.beanutils.converters.NumberConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FloatConverter floatConverter0 = new FloatConverter();
      float float0 = (-1937.3F);
      Float float1 = new Float((-1937.3F));
      BigDecimalConverter bigDecimalConverter0 = null;
      try {
        bigDecimalConverter0 = new BigDecimalConverter(float1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error converting from 'Float' to 'BigDecimal' null
         //
         verifyException("org.apache.commons.beanutils.converters.AbstractConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Short short0 = new Short((short) (-806));
      BigDecimalConverter bigDecimalConverter0 = new BigDecimalConverter(short0);
      bigDecimalConverter0.getPattern();
      bigDecimalConverter0.toString();
      bigDecimalConverter0.setPattern("BigDecimalConverter[UseDefault=true, UseLocaleFormat=false]");
      LongConverter longConverter0 = new LongConverter(short0);
      longConverter0.getDefaultType();
      Locale locale0 = Locale.US;
      Locale locale1 = Locale.CANADA_FRENCH;
      locale0.getDisplayVariant(locale1);
      bigDecimalConverter0.setLocale(locale0);
      bigDecimalConverter0.isAllowDecimals();
      ShortConverter shortConverter0 = new ShortConverter();
      shortConverter0.getDefaultType();
      longConverter0.getDefaultType();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Short short0 = new Short((short) (-1710));
      IntegerConverter integerConverter0 = new IntegerConverter(short0);
      integerConverter0.setDefaultValue((Object) null);
      integerConverter0.setUseLocaleFormat(false);
      integerConverter0.convertToString(short0);
      Boolean boolean0 = Boolean.TRUE;
      FloatConverter floatConverter0 = new FloatConverter(boolean0);
      Class<Object> class0 = Object.class;
      integerConverter0.handleError(class0, (Object) null, (Throwable) null);
      floatConverter0.getDefaultType();
      Short.compare((short) (-1710), (short) (-1710));
      Boolean.logicalOr(false, false);
      try { 
        integerConverter0.convertToString((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DoubleConverter doubleConverter0 = new DoubleConverter((Object) null);
      try { 
        doubleConverter0.convertToString((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LongConverter longConverter0 = new LongConverter();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Calendar.getAvailableCalendarTypes();
      longConverter0.setDefaultValue(mockGregorianCalendar0);
      longConverter0.toString();
      longConverter0.toString();
      Boolean boolean0 = new Boolean("j");
      BigIntegerConverter bigIntegerConverter0 = new BigIntegerConverter(boolean0);
      bigIntegerConverter0.getDefaultType();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BigIntegerConverter bigIntegerConverter0 = new BigIntegerConverter();
      boolean boolean0 = true;
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      Integer.getInteger("nH^[tqRp", (-1));
      bigIntegerConverter0.convertArray(integer0);
      bigIntegerConverter0.setUseLocaleFormat(true);
      bigIntegerConverter0.setUseLocaleFormat(false);
      Class<Long> class0 = Long.class;
      try { 
        bigIntegerConverter0.convertToType(class0, (Object) class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.Class@0000000002\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      boolean boolean0 = false;
      Boolean boolean1 = Boolean.valueOf(false);
      Boolean.getBoolean("");
      IntegerConverter integerConverter0 = new IntegerConverter(boolean1);
      integerConverter0.toString();
      Class<Double> class0 = Double.class;
      integerConverter0.handleMissing(class0);
      Class<DecimalFormat> class1 = DecimalFormat.class;
      integerConverter0.toString();
      Boolean.logicalAnd(false, false);
      // Undeclared exception!
      try { 
        integerConverter0.convert(class1, (Object) class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Default conversion to java.text.DecimalFormat failed.
         //
         verifyException("org.apache.commons.beanutils.converters.AbstractConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BigDecimalConverter bigDecimalConverter0 = new BigDecimalConverter();
      int int0 = 0;
      int int1 = 0;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0);
      mockGregorianCalendar0.getCalendarType();
      bigDecimalConverter0.convertArray(mockGregorianCalendar0);
      bigDecimalConverter0.getLocale();
      bigDecimalConverter0.setLocale((Locale) null);
      try { 
        bigDecimalConverter0.convertToString((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FloatConverter floatConverter0 = new FloatConverter();
      floatConverter0.isAllowDecimals();
      floatConverter0.toString();
      floatConverter0.getLocale();
      floatConverter0.setLocale((Locale) null);
      Locale.forLanguageTag("FloatConverter[UseDefault=false, UseLocaleFormat=false]");
      Class<DecimalFormat> class0 = DecimalFormat.class;
      try { 
        floatConverter0.convertToType(class0, (Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error converting from 'Class' to 'java.text.DecimalFormat' using pattern '#,##0.###'
         //
         verifyException("org.apache.commons.beanutils.converters.NumberConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LongConverter longConverter0 = new LongConverter();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.lookup(linkedList0, linkedList1);
      longConverter0.setLocale((Locale) null);
      longConverter0.toString();
      // Undeclared exception!
      try { 
        longConverter0.setDefaultValue("LongConverter[UseDefault=false, UseLocaleFormat=true]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error converting from 'String' to 'Long' using pattern '#,##0.###'
         //
         verifyException("org.apache.commons.beanutils.converters.NumberConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BigIntegerConverter bigIntegerConverter0 = new BigIntegerConverter();
      bigIntegerConverter0.toString();
      Class<String> class0 = String.class;
      Class<BigInteger> class1 = BigInteger.class;
      try { 
        bigIntegerConverter0.convertToType(class1, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.converters.NumberConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = " failed.";
      ByteConverter byteConverter0 = null;
      try {
        byteConverter0 = new ByteConverter(" failed.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error converting from 'String' to 'Byte' For input string: \"java.lang.String@0000000002\"
         //
         verifyException("org.apache.commons.beanutils.converters.AbstractConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ShortConverter shortConverter0 = new ShortConverter();
      shortConverter0.getDefaultType();
      Locale locale0 = Locale.FRANCE;
      Short short0 = new Short((short)1099);
      shortConverter0.convertToString(short0);
      shortConverter0.setDefaultValue(short0);
      shortConverter0.setLocale(locale0);
      shortConverter0.setLocale(locale0);
      shortConverter0.toString();
      FloatConverter floatConverter0 = new FloatConverter();
      floatConverter0.getDefaultType();
      BigDecimalConverter bigDecimalConverter0 = new BigDecimalConverter();
      bigDecimalConverter0.getDefaultType();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Byte byte0 = new Byte((byte)93);
      Byte.toUnsignedInt((byte)93);
      Byte.toUnsignedInt((byte)93);
      IntegerConverter integerConverter0 = new IntegerConverter(byte0);
      Byte.toUnsignedInt((byte)93);
      Byte.compare((byte)93, (byte)93);
      Byte.toUnsignedInt((byte)93);
      boolean boolean0 = true;
      Class<MockCalendar> class0 = MockCalendar.class;
      BigInteger bigInteger0 = BigInteger.TEN;
      integerConverter0.conversionException(class0, bigInteger0);
      integerConverter0.setUseLocaleFormat(true);
      integerConverter0.convertToString(byte0);
      integerConverter0.getDefaultType();
      integerConverter0.getDefaultType();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      FloatConverter floatConverter0 = null;
      try {
        floatConverter0 = new FloatConverter(mockGregorianCalendar0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error converting from 'org.evosuite.runtime.mock.java.util.MockGregorianCalendar' to 'Float' For input string: \"org.evosuite.runtime.mock.java.util.MockGregorianCalendar@0000000004\"
         //
         verifyException("org.apache.commons.beanutils.converters.AbstractConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      bigDecimal0.precision();
      IntegerConverter integerConverter0 = new IntegerConverter(bigDecimal0);
      ShortConverter shortConverter0 = new ShortConverter();
      shortConverter0.getDefaultType();
      Class<Boolean> class0 = Boolean.class;
      try { 
        integerConverter0.convertToType(class0, (Object) bigInteger0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // IntegerConverter cannot handle conversion to 'Boolean'
         //
         verifyException("org.apache.commons.beanutils.converters.NumberConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat("]");
      LongConverter longConverter0 = null;
      try {
        longConverter0 = new LongConverter(decimalFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error converting from 'java.text.DecimalFormat' to 'Long' For input string: \"java.text.DecimalFormat@0000000002\"
         //
         verifyException("org.apache.commons.beanutils.converters.AbstractConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, (-1), 292, 2202, 3103);
      DoubleConverter doubleConverter0 = null;
      try {
        doubleConverter0 = new DoubleConverter(mockGregorianCalendar0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error converting from 'org.evosuite.runtime.mock.java.util.MockGregorianCalendar' to 'Double' For input string: \"org.evosuite.runtime.mock.java.util.MockGregorianCalendar@0000000002\"
         //
         verifyException("org.apache.commons.beanutils.converters.AbstractConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Integer integer0 = new Integer(0);
      DoubleConverter doubleConverter0 = new DoubleConverter(integer0);
      doubleConverter0.isAllowDecimals();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BigIntegerConverter bigIntegerConverter0 = new BigIntegerConverter();
      bigIntegerConverter0.setPattern("/ft#`|m{.3");
      bigIntegerConverter0.setPattern("/ft#`|m{.3");
      Class<Date> class0 = Date.class;
      bigIntegerConverter0.toString(class0);
      bigIntegerConverter0.getPattern();
      BigDecimalConverter bigDecimalConverter0 = new BigDecimalConverter();
      bigDecimalConverter0.getDefaultType();
      Class<String> class1 = String.class;
      try { 
        bigDecimalConverter0.convertToType(class1, (Object) "Date");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // BigDecimalConverter cannot handle conversion from 'String' to 'String'
         //
         verifyException("org.apache.commons.beanutils.converters.NumberConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      FloatConverter floatConverter0 = new FloatConverter(byte0);
      floatConverter0.convertToString(byte0);
      floatConverter0.setPattern("java.lang.Byte@0000000002");
      ShortConverter shortConverter0 = new ShortConverter(byte0);
      shortConverter0.getDefaultType();
      DoubleConverter doubleConverter0 = new DoubleConverter();
      doubleConverter0.getDefaultType();
      BigDecimalConverter bigDecimalConverter0 = new BigDecimalConverter();
      bigDecimalConverter0.getDefaultType();
      LongConverter longConverter0 = new LongConverter();
      longConverter0.getDefaultType();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ShortConverter shortConverter0 = new ShortConverter();
      shortConverter0.toString();
      shortConverter0.setPattern("ShortConverter[UseDefault=false, UseLocaleFormat=false]");
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      shortConverter0.convertArray(bigDecimal0);
      shortConverter0.toString();
      bigInteger0.bitLength();
      shortConverter0.setUseLocaleFormat(true);
      shortConverter0.setPattern("ShortConverter[UseDefault=false, UseLocaleFormat=false]");
      FloatConverter floatConverter0 = new FloatConverter(bigInteger0);
      floatConverter0.toString();
      floatConverter0.getDefaultType();
      shortConverter0.toString();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IntegerConverter integerConverter0 = new IntegerConverter();
      Class<BigDecimal> class0 = BigDecimal.class;
      integerConverter0.toString(class0);
      integerConverter0.toString();
      integerConverter0.getDefaultType();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BigIntegerConverter bigIntegerConverter0 = new BigIntegerConverter();
      Long long0 = new Long((-3264L));
      bigIntegerConverter0.setDefaultValue(long0);
      Long.max((-3264L), 0L);
      bigIntegerConverter0.convertToString(long0);
      bigIntegerConverter0.getDefaultType();
      FloatConverter floatConverter0 = new FloatConverter();
      boolean boolean0 = true;
      floatConverter0.setUseLocaleFormat(true);
      Class<Float> class0 = floatConverter0.getDefaultType();
      floatConverter0.getPattern();
      BigDecimalConverter bigDecimalConverter0 = null;
      try {
        bigDecimalConverter0 = new BigDecimalConverter(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error converting from 'Class' to 'BigDecimal' null
         //
         verifyException("org.apache.commons.beanutils.converters.AbstractConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LongConverter longConverter0 = new LongConverter();
      longConverter0.setPattern("!Fc*y7`");
      longConverter0.isAllowDecimals();
      DoubleConverter doubleConverter0 = new DoubleConverter();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      doubleConverter0.setLocale(locale0);
      doubleConverter0.getDefaultType();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ByteConverter byteConverter0 = new ByteConverter();
      byteConverter0.setUseLocaleFormat(true);
      byteConverter0.getLocale();
      byteConverter0.setPattern("");
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ShortConverter shortConverter0 = new ShortConverter();
      BigDecimalConverter bigDecimalConverter0 = new BigDecimalConverter();
      Class<Float> class0 = Float.class;
      // Undeclared exception!
      try { 
        bigDecimalConverter0.convert(class0, (Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error converting from 'Class' to 'Float' For input string: \"java.lang.Class@0000000003\"
         //
         verifyException("org.apache.commons.beanutils.converters.AbstractConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LongConverter longConverter0 = new LongConverter();
      Class<Integer> class0 = Integer.class;
      Object object0 = new Object();
      try { 
        longConverter0.convertToType(class0, object0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.Object@0000000002\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      ShortConverter shortConverter0 = null;
      try {
        shortConverter0 = new ShortConverter(date0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error converting from 'Date' to 'Short' For input string: \"java.util.Date@0000000002\"
         //
         verifyException("org.apache.commons.beanutils.converters.AbstractConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ShortConverter shortConverter0 = new ShortConverter();
      BigIntegerConverter bigIntegerConverter0 = null;
      try {
        bigIntegerConverter0 = new BigIntegerConverter(shortConverter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error converting from 'ShortConverter' to 'BigInteger' For input string: \"or\"
         //
         verifyException("org.apache.commons.beanutils.converters.AbstractConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Boolean boolean0 = new Boolean("    (N.B. Converters can be configured to use default values to avoid throwing exceptions)");
      FloatConverter floatConverter0 = new FloatConverter(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Long long0 = new Long((-4522L));
      FloatConverter floatConverter0 = new FloatConverter(long0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Long long0 = new Long(641L);
      ByteConverter byteConverter0 = null;
      try {
        byteConverter0 = new ByteConverter(long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Long value '641' is too large for Byte
         //
         verifyException("org.apache.commons.beanutils.converters.NumberConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte) (-83);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger1 = BigInteger.probablePrime(46, mockRandom0);
      bigInteger0.toString();
      ByteConverter byteConverter0 = new ByteConverter(bigInteger0);
      DoubleConverter doubleConverter0 = new DoubleConverter(bigInteger1);
      doubleConverter0.getDefaultType();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ByteConverter byteConverter0 = null;
      try {
        byteConverter0 = new ByteConverter(",4c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error converting from 'String' to 'Byte' For input string: \"java.lang.String@0000000002\"
         //
         verifyException("org.apache.commons.beanutils.converters.AbstractConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = (-2145808542);
      Integer integer0 = Integer.valueOf((-2145808542));
      Random.setNextRandom((-2145808542));
      ShortConverter shortConverter0 = null;
      try {
        shortConverter0 = new ShortConverter(integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Integer value '-2145808542' is too small Short
         //
         verifyException("org.apache.commons.beanutils.converters.NumberConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Float float0 = new Float(3829.585190458);
      BigDecimalConverter bigDecimalConverter0 = null;
      try {
        bigDecimalConverter0 = new BigDecimalConverter(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error converting from 'Float' to 'BigDecimal' null
         //
         verifyException("org.apache.commons.beanutils.converters.AbstractConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Class<BigInteger> class0 = BigInteger.class;
      BigDecimal bigDecimal0 = new BigDecimal(1191);
      BigIntegerConverter bigIntegerConverter0 = new BigIntegerConverter(bigDecimal0);
      Class<Object> class1 = Object.class;
      try { 
        bigIntegerConverter0.convertToType(class1, (Object) "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // BigIntegerConverter cannot handle conversion from 'String' to 'Object'
         //
         verifyException("org.apache.commons.beanutils.converters.NumberConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 129;
      Integer integer0 = new Integer(129);
      ByteConverter byteConverter0 = null;
      try {
        byteConverter0 = new ByteConverter(integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Integer value '129' is too large for Byte
         //
         verifyException("org.apache.commons.beanutils.converters.NumberConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FloatConverter floatConverter0 = new FloatConverter();
      int int0 = 41;
      Random.setNextRandom(41);
      floatConverter0.log();
      Class<BigDecimal> class0 = BigDecimal.class;
      Double double0 = new Double(41);
      // Undeclared exception!
      try { 
        floatConverter0.convert(class0, (Object) double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error converting from 'Double' to 'BigDecimal' null
         //
         verifyException("org.apache.commons.beanutils.converters.AbstractConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(498286329856L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DoubleConverter doubleConverter0 = new DoubleConverter(bigDecimal0);
      Class<Short> class0 = Short.class;
      // Undeclared exception!
      try { 
        doubleConverter0.handleMissing(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Default conversion to Short failed.
         //
         verifyException("org.apache.commons.beanutils.converters.AbstractConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DoubleConverter doubleConverter0 = new DoubleConverter();
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0);
      LongConverter longConverter0 = new LongConverter(mockDate0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      long long0 = 250084994129L;
      Long long1 = new Long(250084994129L);
      IntegerConverter integerConverter0 = null;
      try {
        integerConverter0 = new IntegerConverter(long1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Long value '250084994129' is too large for Integer
         //
         verifyException("org.apache.commons.beanutils.converters.NumberConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      LongConverter longConverter0 = new LongConverter(mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      BigIntegerConverter bigIntegerConverter0 = null;
      try {
        bigIntegerConverter0 = new BigIntegerConverter(mockDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error converting from 'org.evosuite.runtime.mock.java.util.MockDate' to 'BigInteger' For input string: \"o\"
         //
         verifyException("org.apache.commons.beanutils.converters.AbstractConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LongConverter longConverter0 = new LongConverter();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.KOREAN;
      longConverter0.setLocale(locale0);
      longConverter0.setPattern("/i");
      longConverter0.toString();
      // Undeclared exception!
      try { 
        longConverter0.setDefaultValue("LongConverter[UseDefault=false, UseLocaleFormat=true, Pattern=/i, Locale=ko]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error converting from 'String' to 'Long' using pattern '/i#' for locale=[ko]
         //
         verifyException("org.apache.commons.beanutils.converters.NumberConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LongConverter longConverter0 = new LongConverter();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale locale0 = Locale.KOREAN;
      longConverter0.setLocale(locale0);
      longConverter0.setPattern("");
      System.setCurrentTimeMillis((-1023L));
      longConverter0.toString();
      // Undeclared exception!
      try { 
        longConverter0.setDefaultValue("LongConverter[UseDefault=false, UseLocaleFormat=true, Pattern=, Locale=ko]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error converting from 'String' to 'Long' Java heap space
         //
         verifyException("org.apache.commons.beanutils.converters.AbstractConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Byte byte0 = new Byte((byte)93);
      Byte.toUnsignedInt((byte)93);
      IntegerConverter integerConverter0 = new IntegerConverter(byte0);
      Byte.toUnsignedInt((byte)93);
      Byte.compare((byte)93, (byte)93);
      Byte.toUnsignedInt((byte)93);
      boolean boolean0 = false;
      BigInteger bigInteger0 = BigInteger.TEN;
      integerConverter0.convertToString(byte0);
      integerConverter0.getDefaultType();
      integerConverter0.getDefaultType();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      FloatConverter floatConverter0 = null;
      try {
        floatConverter0 = new FloatConverter(mockGregorianCalendar0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error converting from 'org.evosuite.runtime.mock.java.util.MockGregorianCalendar' to 'Float' For input string: \"org.evosuite.runtime.mock.java.util.MockGregorianCalendar@0000000004\"
         //
         verifyException("org.apache.commons.beanutils.converters.AbstractConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      boolean boolean0 = false;
      Boolean boolean1 = Boolean.valueOf(false);
      IntegerConverter integerConverter0 = new IntegerConverter(boolean1);
      integerConverter0.toString();
      Class<DecimalFormat> class0 = DecimalFormat.class;
      Double double0 = new Double(3.4028234663852886E38);
      FloatConverter floatConverter0 = new FloatConverter(double0);
      floatConverter0.getDefaultType();
      // Undeclared exception!
      try { 
        integerConverter0.convert(class0, (Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Default conversion to java.text.DecimalFormat failed.
         //
         verifyException("org.apache.commons.beanutils.converters.AbstractConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      FloatConverter floatConverter0 = new FloatConverter(boolean0);
      ByteConverter byteConverter0 = new ByteConverter(boolean0);
      byteConverter0.setPattern("");
      byteConverter0.getDefaultType();
      floatConverter0.getLocale();
      DoubleConverter doubleConverter0 = new DoubleConverter();
      doubleConverter0.getDefaultType();
      floatConverter0.setPattern(")");
      BigDecimalConverter bigDecimalConverter0 = new BigDecimalConverter();
      bigDecimalConverter0.getDefaultType();
      floatConverter0.setUseLocaleFormat(false);
      Byte byte0 = new Byte((byte)35);
      byteConverter0.convertToString(byte0);
      Double double0 = new Double(0.0);
      BigIntegerConverter bigIntegerConverter0 = new BigIntegerConverter(double0);
      byteConverter0.getPattern();
      Class<Long> class0 = Long.class;
      try { 
        floatConverter0.convertToType(class0, (Object) "35");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.String@0000000006\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Float.isFinite(4781.7817F);
      Boolean boolean0 = new Boolean(true);
      Boolean.logicalXor(false, true);
      LongConverter longConverter0 = new LongConverter(boolean0);
      longConverter0.getDefaultType();
      assertFalse(longConverter0.isAllowDecimals());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      ShortConverter shortConverter0 = new ShortConverter();
      shortConverter0.setPattern("Setting default value: ");
      shortConverter0.convertToString(mockGregorianCalendar0);
      System.setCurrentTimeMillis((-26L));
      System.setCurrentTimeMillis(2295L);
      IntegerConverter integerConverter0 = null;
      try {
        integerConverter0 = new IntegerConverter(date0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error converting from 'Date' to 'Integer' For input string: \"java.util.Date@0000000004\"
         //
         verifyException("org.apache.commons.beanutils.converters.AbstractConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BigDecimalConverter bigDecimalConverter0 = new BigDecimalConverter();
      Class<Long> class0 = Long.class;
      bigDecimalConverter0.setLocale((Locale) null);
      try { 
        bigDecimalConverter0.convertToType(class0, (Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error converting from 'Class' to 'Long' using pattern '#,##0.###'
         //
         verifyException("org.apache.commons.beanutils.converters.NumberConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Float float0 = new Float((-1409.1855F));
      Float.isFinite((-1409.1855F));
      Float.min((-1409.1855F), (-1409.1855F));
      Boolean boolean0 = new Boolean(true);
      Float float1 = new Float((-453.15F));
      IntegerConverter integerConverter0 = new IntegerConverter(float0);
      ByteConverter byteConverter0 = null;
      try {
        byteConverter0 = new ByteConverter(float1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Float value '-453.15' is too small Byte
         //
         verifyException("org.apache.commons.beanutils.converters.NumberConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      ShortConverter shortConverter0 = new ShortConverter(byte0);
      DoubleConverter doubleConverter0 = new DoubleConverter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BigDecimalConverter bigDecimalConverter0 = null;
      try {
        bigDecimalConverter0 = new BigDecimalConverter(shortConverter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error converting from 'ShortConverter' to 'BigDecimal' null
         //
         verifyException("org.apache.commons.beanutils.converters.AbstractConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DoubleConverter doubleConverter0 = new DoubleConverter();
      assertTrue(doubleConverter0.isAllowDecimals());
      
      Byte byte0 = new Byte((byte)0);
      BigDecimalConverter bigDecimalConverter0 = new BigDecimalConverter(byte0);
      Integer integer0 = new Integer(2);
      Short short0 = new Short((byte)0);
      bigDecimalConverter0.setUseLocaleFormat(true);
      bigDecimalConverter0.convertToString(short0);
      bigDecimalConverter0.getDefaultType();
      ShortConverter shortConverter0 = new ShortConverter(short0);
      shortConverter0.getDefaultType();
      assertFalse(shortConverter0.isAllowDecimals());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      FloatConverter floatConverter0 = new FloatConverter(boolean0);
      floatConverter0.isAllowDecimals();
      Locale locale0 = Locale.CHINA;
      locale0.getExtensionKeys();
      floatConverter0.setLocale(locale0);
      ByteConverter byteConverter0 = new ByteConverter(boolean0);
      byteConverter0.setPattern("");
      Class<Byte> class0 = byteConverter0.getDefaultType();
      byteConverter0.getDefaultType();
      floatConverter0.getLocale();
      DoubleConverter doubleConverter0 = new DoubleConverter();
      doubleConverter0.getDefaultType();
      byteConverter0.toString();
      Short.compare((short)0, (short)0);
      floatConverter0.setUseLocaleFormat(false);
      Byte byte0 = new Byte((byte)1);
      byteConverter0.convertToString(byte0);
      doubleConverter0.setLocale(locale0);
      Double double0 = new Double(0.0);
      BigIntegerConverter bigIntegerConverter0 = new BigIntegerConverter(double0);
      Class<BigInteger> class1 = bigIntegerConverter0.getDefaultType();
      try { 
        doubleConverter0.convertToType(class0, (Object) class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error converting from 'Class' to 'Byte' using pattern '#,##0.###' for locale=[zh_CN]
         //
         verifyException("org.apache.commons.beanutils.converters.NumberConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Double double0 = new Double((-0.30299905953041645));
      DoubleConverter doubleConverter0 = new DoubleConverter(double0);
      Boolean.logicalXor(false, false);
      Class<Byte> class0 = Byte.class;
      doubleConverter0.setUseLocaleFormat(false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-122);
      Locale locale0 = Locale.ITALIAN;
      doubleConverter0.setLocale(locale0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Class<MockCalendar> class1 = MockCalendar.class;
      // Undeclared exception!
      try { 
        doubleConverter0.convert(class1, (Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Default conversion to org.evosuite.runtime.mock.java.util.MockCalendar failed.
         //
         verifyException("org.apache.commons.beanutils.converters.AbstractConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Boolean.valueOf("");
      Float float0 = new Float(0.0);
      Double.max((short)2725, (short)2725);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-122);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.toString((int) (short)2725);
      BigDecimalConverter bigDecimalConverter0 = new BigDecimalConverter(bigInteger0);
      bigDecimalConverter0.getDefaultType();
      BigIntegerConverter bigIntegerConverter0 = new BigIntegerConverter();
      bigIntegerConverter0.getDefaultType();
      IntegerConverter integerConverter0 = new IntegerConverter();
      integerConverter0.getDefaultType();
      ShortConverter shortConverter0 = null;
      try {
        shortConverter0 = new ShortConverter("-122");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error converting from 'String' to 'Short' For input string: \"java.lang.String@0000000005\"
         //
         verifyException("org.apache.commons.beanutils.converters.AbstractConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-94));
      Byte.compare((byte) (-94), (byte) (-94));
      MockDate mockDate0 = new MockDate((byte) (-8), 0, (byte) (-94), 0, 0, (byte)93);
      BigDecimalConverter bigDecimalConverter0 = new BigDecimalConverter(byte0);
      bigDecimalConverter0.getDefaultType();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1676, 0, (byte) (-94), 1676, (-1368), 1676);
      DoubleConverter doubleConverter0 = null;
      try {
        doubleConverter0 = new DoubleConverter(mockGregorianCalendar0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error converting from 'org.evosuite.runtime.mock.java.util.MockGregorianCalendar' to 'Double' For input string: \"org.evosuite.runtime.mock.java.util.MockGregorianCalendar@0000000003\"
         //
         verifyException("org.apache.commons.beanutils.converters.AbstractConverter", e);
      }
  }
}
