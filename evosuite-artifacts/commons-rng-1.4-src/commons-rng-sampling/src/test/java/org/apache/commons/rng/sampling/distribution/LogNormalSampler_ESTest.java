/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 03:44:27 GMT 2022
 */

package org.apache.commons.rng.sampling.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.rng.UniformRandomProvider;
import org.apache.commons.rng.sampling.distribution.LogNormalSampler;
import org.apache.commons.rng.sampling.distribution.MarsagliaNormalizedGaussianSampler;
import org.apache.commons.rng.sampling.distribution.NormalizedGaussianSampler;
import org.apache.commons.rng.sampling.distribution.SharedStateContinuousSampler;
import org.apache.commons.rng.simple.JDKRandomWrapper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LogNormalSampler_ESTest extends LogNormalSampler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1240L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      MarsagliaNormalizedGaussianSampler marsagliaNormalizedGaussianSampler0 = new MarsagliaNormalizedGaussianSampler(jDKRandomWrapper0);
      LogNormalSampler logNormalSampler0 = new LogNormalSampler(marsagliaNormalizedGaussianSampler0, 3.049176835000556E-19, 2156.39);
      double double0 = logNormalSampler0.sample();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SharedStateContinuousSampler sharedStateContinuousSampler0 = LogNormalSampler.of((NormalizedGaussianSampler) null, 0.0, 1684);
      assertNotNull(sharedStateContinuousSampler0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LogNormalSampler logNormalSampler0 = new LogNormalSampler((NormalizedGaussianSampler) null, 1.0, 1.0);
      MockRandom mockRandom0 = new MockRandom(328L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        logNormalSampler0.withUniformRandomProvider(jDKRandomWrapper0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The underlying sampler cannot share state
         //
         verifyException("org.apache.commons.rng.sampling.distribution.InternalUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LogNormalSampler logNormalSampler0 = new LogNormalSampler((NormalizedGaussianSampler) null, 780.48248596289, 780.48248596289);
      // Undeclared exception!
      try { 
        logNormalSampler0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LogNormalSampler logNormalSampler0 = new LogNormalSampler((NormalizedGaussianSampler) null, 2329.970466, 102.61993633868698);
      // Undeclared exception!
      try { 
        logNormalSampler0.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.rng.sampling.distribution.LogNormalSampler", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LogNormalSampler logNormalSampler0 = null;
      try {
        logNormalSampler0 = new LogNormalSampler((NormalizedGaussianSampler) null, 0.0, (-2554.702445645193));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // shape is not strictly positive: -2554.702445645193
         //
         verifyException("org.apache.commons.rng.sampling.distribution.LogNormalSampler", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LogNormalSampler logNormalSampler0 = null;
      try {
        logNormalSampler0 = new LogNormalSampler((NormalizedGaussianSampler) null, (-2510.869718343213), (-2510.869718343213));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // scale is not positive: -2510.869718343213
         //
         verifyException("org.apache.commons.rng.sampling.distribution.LogNormalSampler", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      MarsagliaNormalizedGaussianSampler marsagliaNormalizedGaussianSampler0 = MarsagliaNormalizedGaussianSampler.of((UniformRandomProvider) jDKRandomWrapper0);
      LogNormalSampler logNormalSampler0 = new LogNormalSampler(marsagliaNormalizedGaussianSampler0, 0L, 6.026367581040399);
      double double0 = logNormalSampler0.sample();
      assertEquals(0.003232963682185447, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      MarsagliaNormalizedGaussianSampler marsagliaNormalizedGaussianSampler0 = MarsagliaNormalizedGaussianSampler.of((UniformRandomProvider) jDKRandomWrapper0);
      LogNormalSampler logNormalSampler0 = new LogNormalSampler(marsagliaNormalizedGaussianSampler0, 0L, 6.026367581040399);
      SharedStateContinuousSampler sharedStateContinuousSampler0 = logNormalSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      assertNotSame(sharedStateContinuousSampler0, logNormalSampler0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      MarsagliaNormalizedGaussianSampler marsagliaNormalizedGaussianSampler0 = MarsagliaNormalizedGaussianSampler.of((UniformRandomProvider) jDKRandomWrapper0);
      LogNormalSampler logNormalSampler0 = new LogNormalSampler(marsagliaNormalizedGaussianSampler0, 0L, 6.026367581040399);
      String string0 = logNormalSampler0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      MarsagliaNormalizedGaussianSampler marsagliaNormalizedGaussianSampler0 = MarsagliaNormalizedGaussianSampler.of((UniformRandomProvider) jDKRandomWrapper0);
      // Undeclared exception!
      try { 
        LogNormalSampler.of(marsagliaNormalizedGaussianSampler0, 6.026367581040399, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // shape is not strictly positive: 0.0
         //
         verifyException("org.apache.commons.rng.sampling.distribution.LogNormalSampler", e);
      }
  }
}
