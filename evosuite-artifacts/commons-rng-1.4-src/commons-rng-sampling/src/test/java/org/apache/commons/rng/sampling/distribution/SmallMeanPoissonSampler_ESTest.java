/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 03:40:51 GMT 2022
 */

package org.apache.commons.rng.sampling.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.rng.UniformRandomProvider;
import org.apache.commons.rng.sampling.distribution.SharedStateDiscreteSampler;
import org.apache.commons.rng.sampling.distribution.SmallMeanPoissonSampler;
import org.apache.commons.rng.simple.JDKRandomWrapper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SmallMeanPoissonSampler_ESTest extends SmallMeanPoissonSampler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(318L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = SmallMeanPoissonSampler.of(jDKRandomWrapper0, 7);
      assertNotNull(sharedStateDiscreteSampler0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SmallMeanPoissonSampler smallMeanPoissonSampler0 = new SmallMeanPoissonSampler((UniformRandomProvider) null, 1.0);
      // Undeclared exception!
      try { 
        smallMeanPoissonSampler0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SmallMeanPoissonSampler smallMeanPoissonSampler0 = new SmallMeanPoissonSampler((UniformRandomProvider) null, 1.0);
      // Undeclared exception!
      try { 
        smallMeanPoissonSampler0.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.rng.sampling.distribution.SmallMeanPoissonSampler", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SmallMeanPoissonSampler smallMeanPoissonSampler0 = null;
      try {
        smallMeanPoissonSampler0 = new SmallMeanPoissonSampler((UniformRandomProvider) null, 1000.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No p(x=0) probability for mean: 1000.0
         //
         verifyException("org.apache.commons.rng.sampling.distribution.SmallMeanPoissonSampler", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      SmallMeanPoissonSampler smallMeanPoissonSampler0 = null;
      try {
        smallMeanPoissonSampler0 = new SmallMeanPoissonSampler(jDKRandomWrapper0, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // mean is not strictly positive: 0.0
         //
         verifyException("org.apache.commons.rng.sampling.distribution.SmallMeanPoissonSampler", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(198L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      jDKRandomWrapper0.nextLong(198L);
      SmallMeanPoissonSampler smallMeanPoissonSampler0 = new SmallMeanPoissonSampler(jDKRandomWrapper0, 198L);
      int int0 = smallMeanPoissonSampler0.sample();
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      SmallMeanPoissonSampler smallMeanPoissonSampler0 = new SmallMeanPoissonSampler(jDKRandomWrapper0, 1.0E-4);
      int int0 = smallMeanPoissonSampler0.sample();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(198L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        SmallMeanPoissonSampler.of(jDKRandomWrapper0, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // mean is not strictly positive: 0.0
         //
         verifyException("org.apache.commons.rng.sampling.distribution.SmallMeanPoissonSampler", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      SmallMeanPoissonSampler smallMeanPoissonSampler0 = new SmallMeanPoissonSampler(jDKRandomWrapper0, 1.0E-4);
      String string0 = smallMeanPoissonSampler0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      SmallMeanPoissonSampler smallMeanPoissonSampler0 = new SmallMeanPoissonSampler(jDKRandomWrapper0, 1.0E-4);
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = smallMeanPoissonSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      assertNotSame(sharedStateDiscreteSampler0, smallMeanPoissonSampler0);
  }
}
