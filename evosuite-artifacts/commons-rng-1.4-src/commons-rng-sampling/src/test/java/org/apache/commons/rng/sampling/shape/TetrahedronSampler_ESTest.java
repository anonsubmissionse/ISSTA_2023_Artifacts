/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 03:43:12 GMT 2022
 */

package org.apache.commons.rng.sampling.shape;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.rng.UniformRandomProvider;
import org.apache.commons.rng.sampling.shape.TetrahedronSampler;
import org.apache.commons.rng.simple.JDKRandomWrapper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TetrahedronSampler_ESTest extends TetrahedronSampler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[5];
      TetrahedronSampler tetrahedronSampler0 = new TetrahedronSampler(jDKRandomWrapper0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      double[] doubleArray1 = tetrahedronSampler0.sample();
      double[] doubleArray2 = tetrahedronSampler0.sample();
      TetrahedronSampler.of(jDKRandomWrapper0, doubleArray2, doubleArray2, doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[3];
      TetrahedronSampler tetrahedronSampler0 = new TetrahedronSampler(jDKRandomWrapper0, doubleArray0, doubleArray1, doubleArray0, doubleArray0);
      double[] doubleArray2 = tetrahedronSampler0.sample();
      TetrahedronSampler.of(jDKRandomWrapper0, doubleArray1, doubleArray1, doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[3];
      // Undeclared exception!
      try { 
        TetrahedronSampler.of(jDKRandomWrapper0, doubleArray1, doubleArray1, doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Vertex c length mismatch: 8 != 3
         //
         verifyException("org.apache.commons.rng.sampling.shape.Coordinates", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[3];
      // Undeclared exception!
      try { 
        TetrahedronSampler.of(jDKRandomWrapper0, doubleArray1, doubleArray0, doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Vertex b length mismatch: 8 != 3
         //
         verifyException("org.apache.commons.rng.sampling.shape.Coordinates", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (double) 1L;
      TetrahedronSampler tetrahedronSampler0 = new TetrahedronSampler(jDKRandomWrapper0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      double[] doubleArray1 = tetrahedronSampler0.sample();
      assertArrayEquals(new double[] {0.0, 0.0, 1.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = tetrahedronSampler0.sample();
      assertArrayEquals(new double[] {0.0, 0.0, 1.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 1L;
      TetrahedronSampler tetrahedronSampler0 = new TetrahedronSampler(jDKRandomWrapper0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      double[] doubleArray1 = tetrahedronSampler0.sample();
      assertArrayEquals(new double[] {0.0, 1.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = tetrahedronSampler0.sample();
      assertArrayEquals(new double[] {0.0, 1.0, 0.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1L;
      TetrahedronSampler tetrahedronSampler0 = new TetrahedronSampler(jDKRandomWrapper0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      double[] doubleArray1 = tetrahedronSampler0.sample();
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = tetrahedronSampler0.sample();
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[3];
      TetrahedronSampler tetrahedronSampler0 = new TetrahedronSampler(jDKRandomWrapper0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      mockRandom0.nextGaussian();
      tetrahedronSampler0.sample();
      tetrahedronSampler0.sample();
      double[] doubleArray1 = tetrahedronSampler0.sample();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[5];
      TetrahedronSampler tetrahedronSampler0 = new TetrahedronSampler(jDKRandomWrapper0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      tetrahedronSampler0.sample();
      tetrahedronSampler0.sample();
      tetrahedronSampler0.sample();
      tetrahedronSampler0.sample();
      tetrahedronSampler0.sample();
      double[] doubleArray1 = tetrahedronSampler0.sample();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[8];
      TetrahedronSampler tetrahedronSampler0 = new TetrahedronSampler(jDKRandomWrapper0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      TetrahedronSampler tetrahedronSampler1 = new TetrahedronSampler(jDKRandomWrapper0, tetrahedronSampler0);
      assertFalse(tetrahedronSampler1.equals((Object)tetrahedronSampler0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[15];
      TetrahedronSampler tetrahedronSampler0 = new TetrahedronSampler(jDKRandomWrapper0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      double[] doubleArray1 = tetrahedronSampler0.sample();
      double[] doubleArray2 = tetrahedronSampler0.sample();
      TetrahedronSampler.of(jDKRandomWrapper0, doubleArray2, doubleArray1, doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      TetrahedronSampler tetrahedronSampler0 = new TetrahedronSampler((UniformRandomProvider) null, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        tetrahedronSampler0.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.rng.sampling.shape.TetrahedronSampler", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1941L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[0];
      TetrahedronSampler tetrahedronSampler0 = new TetrahedronSampler(jDKRandomWrapper0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        tetrahedronSampler0.sample();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.rng.sampling.shape.TetrahedronSampler", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        TetrahedronSampler.of(jDKRandomWrapper0, (double[]) null, (double[]) null, (double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.rng.sampling.shape.Coordinates", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      TetrahedronSampler tetrahedronSampler0 = null;
      try {
        tetrahedronSampler0 = new TetrahedronSampler(jDKRandomWrapper0, (double[]) null, (double[]) null, (double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.rng.sampling.shape.TetrahedronSampler", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      TetrahedronSampler tetrahedronSampler0 = null;
      try {
        tetrahedronSampler0 = new TetrahedronSampler(jDKRandomWrapper0, (TetrahedronSampler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.rng.sampling.shape.TetrahedronSampler", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[15];
      TetrahedronSampler tetrahedronSampler0 = new TetrahedronSampler(jDKRandomWrapper0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      TetrahedronSampler tetrahedronSampler1 = tetrahedronSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      assertNotSame(tetrahedronSampler1, tetrahedronSampler0);
  }
}
