/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 03:41:49 GMT 2022
 */

package org.apache.commons.rng.sampling;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import org.apache.commons.rng.UniformRandomProvider;
import org.apache.commons.rng.sampling.PermutationSampler;
import org.apache.commons.rng.simple.JDKRandomWrapper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PermutationSampler_ESTest extends PermutationSampler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      PermutationSampler permutationSampler0 = new PermutationSampler(jDKRandomWrapper0, 3450, 3450);
      PermutationSampler permutationSampler1 = permutationSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      int[] intArray0 = new int[5];
      PermutationSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, intArray0);
      permutationSampler1.sample();
      PermutationSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, intArray0, 0, false);
      PermutationSampler.natural(2);
      permutationSampler0.sample();
      // Undeclared exception!
      permutationSampler0.sample();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = PermutationSampler.natural(5152);
      MockRandom mockRandom0 = new MockRandom(5152);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      PermutationSampler permutationSampler0 = new PermutationSampler(jDKRandomWrapper0, 1, 1);
      PermutationSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, intArray0, 1, true);
      PermutationSampler permutationSampler1 = permutationSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      int[] intArray1 = permutationSampler1.sample();
      PermutationSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, intArray0);
      permutationSampler1.sample();
      permutationSampler0.sample();
      PermutationSampler permutationSampler2 = permutationSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      int[] intArray2 = permutationSampler2.sample();
      PermutationSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, intArray2, 0, true);
      int[] intArray3 = PermutationSampler.natural(1);
      int[] intArray4 = new int[8];
      intArray4[0] = 0;
      intArray4[1] = 1;
      intArray4[2] = 0;
      intArray4[3] = 5152;
      intArray4[4] = 5152;
      intArray4[5] = 5152;
      intArray4[6] = 1;
      intArray4[7] = 1;
      PermutationSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, intArray4, 0, false);
      PermutationSampler permutationSampler3 = permutationSampler1.withUniformRandomProvider(jDKRandomWrapper0);
      permutationSampler3.withUniformRandomProvider(jDKRandomWrapper0);
      PermutationSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, intArray1);
      PermutationSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, intArray3);
      PermutationSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, intArray0, 0, false);
      PermutationSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, intArray3);
      // Undeclared exception!
      PermutationSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, intArray0, 1, false);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PermutationSampler.natural(4429);
      PermutationSampler.natural(4429);
      UniformRandomProvider uniformRandomProvider0 = null;
      PermutationSampler permutationSampler0 = new PermutationSampler((UniformRandomProvider) null, 4429, 3931);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((Random) null);
      PermutationSampler permutationSampler0 = new PermutationSampler(jDKRandomWrapper0, 514, 514);
      // Undeclared exception!
      try { 
        permutationSampler0.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int int0 = 4709;
      int int1 = 1;
      PermutationSampler permutationSampler0 = new PermutationSampler(jDKRandomWrapper0, 4709, 1);
      PermutationSampler permutationSampler1 = permutationSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      JDKRandomWrapper jDKRandomWrapper1 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      permutationSampler1.withUniformRandomProvider(jDKRandomWrapper1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int[] intArray0 = null;
      jDKRandomWrapper0.nextFloat();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        PermutationSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, (int[]) null, 1435, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 5152;
      int[] intArray0 = PermutationSampler.natural(5152);
      MockRandom mockRandom0 = new MockRandom(5152);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int int1 = 1;
      PermutationSampler permutationSampler0 = new PermutationSampler(jDKRandomWrapper0, 1, 1);
      PermutationSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, intArray0, 1, true);
      PermutationSampler permutationSampler1 = permutationSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      permutationSampler1.sample();
      PermutationSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, intArray0);
      permutationSampler1.sample();
      permutationSampler0.sample();
      permutationSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      // Undeclared exception!
      PermutationSampler.natural(5152);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = (-3575);
      // Undeclared exception!
      try { 
        PermutationSampler.natural((-3575));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.rng.sampling.PermutationSampler", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      PermutationSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, intArray0, 0, true);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      PermutationSampler permutationSampler0 = new PermutationSampler(jDKRandomWrapper0, 1, 1);
      int[] intArray0 = permutationSampler0.sample();
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = PermutationSampler.natural(1);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = PermutationSampler.natural(0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1494L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      PermutationSampler permutationSampler0 = new PermutationSampler(jDKRandomWrapper0, 1733, 1733);
      PermutationSampler permutationSampler1 = permutationSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      assertNotSame(permutationSampler1, permutationSampler0);
      assertNotSame(permutationSampler0, permutationSampler1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = PermutationSampler.natural(4);
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      PermutationSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, intArray0);
      PermutationSampler permutationSampler0 = new PermutationSampler(jDKRandomWrapper0, 32, 4);
      permutationSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      PermutationSampler permutationSampler1 = permutationSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      PermutationSampler permutationSampler2 = permutationSampler1.withUniformRandomProvider(jDKRandomWrapper0);
      assertNotSame(permutationSampler2, permutationSampler1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int[] intArray0 = new int[1];
      intArray0[0] = (-1834);
      PermutationSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int[] intArray0 = new int[3];
      intArray0[0] = 32;
      intArray0[1] = 2476;
      intArray0[2] = 0;
      jDKRandomWrapper0.nextLong((long) 32);
      jDKRandomWrapper0.nextInt();
      // Undeclared exception!
      try { 
        PermutationSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, intArray0, (-1), false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = 266;
      PermutationSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, intArray0, 0, false);
      assertArrayEquals(new int[] {(-1), 266, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((Random) null);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 569;
      intArray0[2] = 3042;
      intArray0[3] = 0;
      intArray0[4] = 684;
      int int0 = 1;
      intArray0[5] = 1;
      int int1 = (-1750);
      intArray0[6] = (-1750);
      intArray0[7] = (-1844);
      // Undeclared exception!
      try { 
        PermutationSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        PermutationSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, (int[]) null, 1480, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1615L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        PermutationSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, intArray0, (-3247), false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2027L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      PermutationSampler permutationSampler0 = new PermutationSampler(jDKRandomWrapper0, 1888, 1888);
      int[] intArray0 = permutationSampler0.sample();
      PermutationSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, intArray0, 1888, false);
      assertEquals(1888, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1954L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int[] intArray0 = new int[0];
      PermutationSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      PermutationSampler permutationSampler0 = null;
      try {
        permutationSampler0 = new PermutationSampler(jDKRandomWrapper0, (-1155), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // n <= 0 : n=-1155
         //
         verifyException("org.apache.commons.rng.sampling.SubsetSamplerUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      PermutationSampler permutationSampler0 = new PermutationSampler(jDKRandomWrapper0, 137, 137);
      PermutationSampler permutationSampler1 = permutationSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      int[] intArray0 = new int[6];
      PermutationSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, intArray0);
      int[] intArray1 = permutationSampler1.sample();
      PermutationSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, intArray0, 0, false);
      assertNotSame(intArray0, intArray1);
  }
}
