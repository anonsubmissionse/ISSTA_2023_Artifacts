/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 03:40:19 GMT 2022
 */

package org.apache.commons.rng.sampling.shape;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.rng.UniformRandomProvider;
import org.apache.commons.rng.sampling.shape.BoxSampler;
import org.apache.commons.rng.simple.JDKRandomWrapper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BoxSampler_ESTest extends BoxSampler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[3];
      BoxSampler boxSampler0 = BoxSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0);
      double[] doubleArray1 = boxSampler0.sample();
      BoxSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[2];
      BoxSampler boxSampler0 = BoxSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray1);
      assertNotNull(boxSampler0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[7];
      BoxSampler boxSampler0 = BoxSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray1);
      assertNotNull(boxSampler0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1488L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[5];
      // Undeclared exception!
      try { 
        BoxSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Mismatch of box dimensions: 2,5
         //
         verifyException("org.apache.commons.rng.sampling.shape.BoxSampler", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-188L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[3];
      mockRandom0.nextDouble();
      doubleArray0[0] = (double) (-188L);
      BoxSampler boxSampler0 = BoxSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0);
      double[] doubleArray1 = boxSampler0.sample();
      assertArrayEquals(new double[] {(-188.00000000000003), 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[5];
      BoxSampler boxSampler0 = BoxSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0);
      double double0 = boxSampler0.createSample(0.0, 3865.886604);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3030L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[4];
      BoxSampler boxSampler0 = BoxSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0);
      double double0 = boxSampler0.createSample(3030L, 3030.0);
      assertEquals(3030.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[4];
      BoxSampler boxSampler0 = BoxSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0);
      double double0 = boxSampler0.createSample((-1108.920899), 0.0);
      assertEquals((-1108.920899), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      BoxSampler boxSampler0 = BoxSampler.of((UniformRandomProvider) null, doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        boxSampler0.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.rng.sampling.shape.BoxSampler", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        BoxSampler.of((UniformRandomProvider) null, (double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.rng.sampling.shape.BoxSampler", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      BoxSampler boxSampler0 = BoxSampler.of((UniformRandomProvider) null, doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        boxSampler0.createSample(0.0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.rng.sampling.shape.BoxSampler", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        BoxSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported dimension: 1
         //
         verifyException("org.apache.commons.rng.sampling.shape.BoxSampler", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[15];
      // Undeclared exception!
      try { 
        BoxSampler.of(jDKRandomWrapper0, doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Mismatch of box dimensions: 15,2
         //
         verifyException("org.apache.commons.rng.sampling.shape.BoxSampler", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      double[] doubleArray0 = new double[4];
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      BoxSampler boxSampler0 = BoxSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0);
      double[] doubleArray1 = boxSampler0.sample();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      BoxSampler boxSampler0 = BoxSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0);
      BoxSampler boxSampler1 = boxSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      assertNotSame(boxSampler0, boxSampler1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[2];
      BoxSampler boxSampler0 = BoxSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0);
      BoxSampler boxSampler1 = boxSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      assertNotSame(boxSampler0, boxSampler1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      double[] doubleArray0 = new double[4];
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      BoxSampler boxSampler0 = BoxSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0);
      BoxSampler boxSampler1 = boxSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      assertNotSame(boxSampler0, boxSampler1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[2];
      BoxSampler boxSampler0 = BoxSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0);
      double[] doubleArray1 = boxSampler0.sample();
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
  }
}
