/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 03:44:57 GMT 2022
 */

package org.apache.commons.rng.sampling;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.rng.UniformRandomProvider;
import org.apache.commons.rng.sampling.CompositeSamplers;
import org.apache.commons.rng.sampling.ObjectSampler;
import org.apache.commons.rng.sampling.SharedStateObjectSampler;
import org.apache.commons.rng.sampling.distribution.ContinuousSampler;
import org.apache.commons.rng.sampling.distribution.ContinuousUniformSampler;
import org.apache.commons.rng.sampling.distribution.DiscreteSampler;
import org.apache.commons.rng.sampling.distribution.LargeMeanPoissonSampler;
import org.apache.commons.rng.sampling.distribution.LongSampler;
import org.apache.commons.rng.sampling.distribution.SharedStateContinuousSampler;
import org.apache.commons.rng.sampling.distribution.SharedStateDiscreteSampler;
import org.apache.commons.rng.sampling.distribution.SharedStateLongSampler;
import org.apache.commons.rng.simple.JDKRandomWrapper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompositeSamplers_ESTest extends CompositeSamplers_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CompositeSamplers.DiscreteProbabilitySampler compositeSamplers_DiscreteProbabilitySampler0 = CompositeSamplers.DiscreteProbabilitySampler.ALIAS_METHOD;
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 7.05123102792795E-20;
      DiscreteSampler discreteSampler0 = compositeSamplers_DiscreteProbabilitySampler0.create(jDKRandomWrapper0, doubleArray0);
      assertNotNull(discreteSampler0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CompositeSamplers.DiscreteProbabilitySampler compositeSamplers_DiscreteProbabilitySampler0 = CompositeSamplers.DiscreteProbabilitySampler.LOOKUP_TABLE;
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[14];
      // Undeclared exception!
      try { 
        compositeSamplers_DiscreteProbabilitySampler0.create(jDKRandomWrapper0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid sum of probabilities: 0.0
         //
         verifyException("org.apache.commons.rng.sampling.distribution.InternalUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CompositeSamplers.Builder<SharedStateDiscreteSampler> compositeSamplers_Builder0 = CompositeSamplers.newSharedStateDiscreteSamplerBuilder();
      assertEquals(0, compositeSamplers_Builder0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CompositeSamplers.Builder<LongSampler> compositeSamplers_Builder0 = CompositeSamplers.newLongSamplerBuilder();
      assertEquals(0, compositeSamplers_Builder0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CompositeSamplers.Builder<SharedStateLongSampler> compositeSamplers_Builder0 = CompositeSamplers.newSharedStateLongSamplerBuilder();
      assertEquals(0, compositeSamplers_Builder0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CompositeSamplers.Builder<SharedStateContinuousSampler> compositeSamplers_Builder0 = CompositeSamplers.newSharedStateContinuousSamplerBuilder();
      assertEquals(0, compositeSamplers_Builder0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CompositeSamplers.Builder<ObjectSampler<ContinuousUniformSampler>> compositeSamplers_Builder0 = CompositeSamplers.newObjectSamplerBuilder();
      assertEquals(0, compositeSamplers_Builder0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CompositeSamplers.Builder<ContinuousSampler> compositeSamplers_Builder0 = CompositeSamplers.newContinuousSamplerBuilder();
      assertEquals(0, compositeSamplers_Builder0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CompositeSamplers.Builder<DiscreteSampler> compositeSamplers_Builder0 = CompositeSamplers.newDiscreteSamplerBuilder();
      assertEquals(0, compositeSamplers_Builder0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CompositeSamplers.DiscreteProbabilitySampler compositeSamplers_DiscreteProbabilitySampler0 = CompositeSamplers.DiscreteProbabilitySampler.GUIDE_TABLE;
      double[] doubleArray0 = new double[12];
      // Undeclared exception!
      try { 
        compositeSamplers_DiscreteProbabilitySampler0.create((UniformRandomProvider) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid sum of probabilities: 0.0
         //
         verifyException("org.apache.commons.rng.sampling.distribution.GuideTableDiscreteSampler", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CompositeSamplers.Builder<SharedStateObjectSampler<LargeMeanPoissonSampler>> compositeSamplers_Builder0 = CompositeSamplers.newSharedStateObjectSamplerBuilder();
      assertEquals(0, compositeSamplers_Builder0.size());
  }
}
