/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 03:43:09 GMT 2022
 */

package org.apache.commons.rng.sampling;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.rng.UniformRandomProvider;
import org.apache.commons.rng.sampling.CombinationSampler;
import org.apache.commons.rng.simple.JDKRandomWrapper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CombinationSampler_ESTest extends CombinationSampler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CombinationSampler combinationSampler0 = new CombinationSampler((UniformRandomProvider) null, 32, 32);
      int[] intArray0 = combinationSampler0.sample();
      assertEquals(32, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      CombinationSampler combinationSampler0 = new CombinationSampler(jDKRandomWrapper0, 894, 894);
      combinationSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      CombinationSampler combinationSampler1 = combinationSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      CombinationSampler combinationSampler2 = combinationSampler1.withUniformRandomProvider(jDKRandomWrapper0);
      CombinationSampler combinationSampler3 = combinationSampler2.withUniformRandomProvider(jDKRandomWrapper0);
      CombinationSampler combinationSampler4 = combinationSampler3.withUniformRandomProvider(jDKRandomWrapper0);
      combinationSampler1.withUniformRandomProvider(jDKRandomWrapper0);
      CombinationSampler combinationSampler5 = combinationSampler1.withUniformRandomProvider(jDKRandomWrapper0);
      combinationSampler5.withUniformRandomProvider(jDKRandomWrapper0);
      combinationSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      combinationSampler4.withUniformRandomProvider(jDKRandomWrapper0);
      // Undeclared exception!
      combinationSampler2.withUniformRandomProvider(jDKRandomWrapper0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CombinationSampler combinationSampler0 = new CombinationSampler((UniformRandomProvider) null, 1793, 1793);
      CombinationSampler combinationSampler1 = new CombinationSampler((UniformRandomProvider) null, 1793, 1793);
      CombinationSampler combinationSampler2 = combinationSampler0.withUniformRandomProvider((UniformRandomProvider) null);
      combinationSampler2.withUniformRandomProvider((UniformRandomProvider) null);
      CombinationSampler combinationSampler3 = new CombinationSampler((UniformRandomProvider) null, 1793, 1793);
      CombinationSampler combinationSampler4 = new CombinationSampler((UniformRandomProvider) null, 1793, 1793);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(833L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      CombinationSampler combinationSampler0 = null;
      try {
        combinationSampler0 = new CombinationSampler(jDKRandomWrapper0, (-2289), 724);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // n <= 0 : n=-2289
         //
         verifyException("org.apache.commons.rng.sampling.SubsetSamplerUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CombinationSampler combinationSampler0 = new CombinationSampler((UniformRandomProvider) null, 3169, 68);
      // Undeclared exception!
      try { 
        combinationSampler0.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.rng.sampling.SubsetSamplerUtils", e);
      }
  }
}
