/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 03:45:05 GMT 2022
 */

package org.apache.commons.rng.sampling.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.rng.UniformRandomProvider;
import org.apache.commons.rng.sampling.distribution.DiscreteInverseCumulativeProbabilityFunction;
import org.apache.commons.rng.sampling.distribution.InverseTransformDiscreteSampler;
import org.apache.commons.rng.sampling.distribution.SharedStateDiscreteSampler;
import org.apache.commons.rng.simple.JDKRandomWrapper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InverseTransformDiscreteSampler_ESTest extends InverseTransformDiscreteSampler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      DiscreteInverseCumulativeProbabilityFunction discreteInverseCumulativeProbabilityFunction0 = mock(DiscreteInverseCumulativeProbabilityFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(discreteInverseCumulativeProbabilityFunction0).inverseCumulativeProbability(anyDouble());
      InverseTransformDiscreteSampler inverseTransformDiscreteSampler0 = new InverseTransformDiscreteSampler(jDKRandomWrapper0, discreteInverseCumulativeProbabilityFunction0);
      int int0 = inverseTransformDiscreteSampler0.sample();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      DiscreteInverseCumulativeProbabilityFunction discreteInverseCumulativeProbabilityFunction0 = mock(DiscreteInverseCumulativeProbabilityFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1250).when(discreteInverseCumulativeProbabilityFunction0).inverseCumulativeProbability(anyDouble());
      InverseTransformDiscreteSampler inverseTransformDiscreteSampler0 = new InverseTransformDiscreteSampler(jDKRandomWrapper0, discreteInverseCumulativeProbabilityFunction0);
      int int0 = inverseTransformDiscreteSampler0.sample();
      assertEquals(1250, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DiscreteInverseCumulativeProbabilityFunction discreteInverseCumulativeProbabilityFunction0 = mock(DiscreteInverseCumulativeProbabilityFunction.class, new ViolatedAssumptionAnswer());
      InverseTransformDiscreteSampler inverseTransformDiscreteSampler0 = new InverseTransformDiscreteSampler((UniformRandomProvider) null, discreteInverseCumulativeProbabilityFunction0);
      // Undeclared exception!
      try { 
        inverseTransformDiscreteSampler0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = InverseTransformDiscreteSampler.of(jDKRandomWrapper0, (DiscreteInverseCumulativeProbabilityFunction) null);
      // Undeclared exception!
      try { 
        ((InverseTransformDiscreteSampler) sharedStateDiscreteSampler0).sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.rng.sampling.distribution.InverseTransformDiscreteSampler", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      DiscreteInverseCumulativeProbabilityFunction discreteInverseCumulativeProbabilityFunction0 = mock(DiscreteInverseCumulativeProbabilityFunction.class, new ViolatedAssumptionAnswer());
      InverseTransformDiscreteSampler inverseTransformDiscreteSampler0 = new InverseTransformDiscreteSampler(jDKRandomWrapper0, discreteInverseCumulativeProbabilityFunction0);
      String string0 = inverseTransformDiscreteSampler0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      DiscreteInverseCumulativeProbabilityFunction discreteInverseCumulativeProbabilityFunction0 = mock(DiscreteInverseCumulativeProbabilityFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-976)).when(discreteInverseCumulativeProbabilityFunction0).inverseCumulativeProbability(anyDouble());
      InverseTransformDiscreteSampler inverseTransformDiscreteSampler0 = new InverseTransformDiscreteSampler(jDKRandomWrapper0, discreteInverseCumulativeProbabilityFunction0);
      int int0 = inverseTransformDiscreteSampler0.sample();
      assertEquals((-976), int0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      DiscreteInverseCumulativeProbabilityFunction discreteInverseCumulativeProbabilityFunction0 = mock(DiscreteInverseCumulativeProbabilityFunction.class, new ViolatedAssumptionAnswer());
      InverseTransformDiscreteSampler inverseTransformDiscreteSampler0 = new InverseTransformDiscreteSampler(jDKRandomWrapper0, discreteInverseCumulativeProbabilityFunction0);
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = inverseTransformDiscreteSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      assertNotSame(inverseTransformDiscreteSampler0, sharedStateDiscreteSampler0);
  }
}
