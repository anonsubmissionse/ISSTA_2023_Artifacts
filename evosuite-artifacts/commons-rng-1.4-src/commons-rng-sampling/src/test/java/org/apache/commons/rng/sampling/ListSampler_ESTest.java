/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 03:34:00 GMT 2022
 */

package org.apache.commons.rng.sampling;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;
import java.util.Stack;
import java.util.Vector;
import org.apache.commons.rng.UniformRandomProvider;
import org.apache.commons.rng.sampling.ListSampler;
import org.apache.commons.rng.simple.JDKRandomWrapper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ListSampler_ESTest extends ListSampler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      LinkedList<ArrayList<String>> linkedList0 = new LinkedList<ArrayList<String>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      linkedList0.add(arrayList0);
      linkedList0.add(arrayList0);
      linkedList0.offer(arrayList0);
      linkedList0.add(arrayList0);
      linkedList0.add(arrayList0);
      ListSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, (List<ArrayList<String>>) linkedList0);
      assertEquals(5, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      Vector<Object> vector0 = new Vector<Object>();
      Object object0 = new Object();
      vector0.add(object0);
      vector0.add((Object) mockRandom0);
      List<Object> list0 = ListSampler.sample((UniformRandomProvider) jDKRandomWrapper0, (List<Object>) vector0, 1);
      assertEquals(2, vector0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(4294967296L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        ListSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, (List<Object>) null, 0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.rng.sampling.ListSampler", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        ListSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, (List<Object>) linkedList0, (-700), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(0) > toIndex(-699)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        ListSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, (List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.rng.sampling.ListSampler", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((Random) null);
      // Undeclared exception!
      try { 
        ListSampler.sample((UniformRandomProvider) jDKRandomWrapper0, (List<Object>) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.rng.sampling.ListSampler", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      Vector<Vector<Integer>> vector0 = new Vector<Vector<Integer>>();
      // Undeclared exception!
      try { 
        ListSampler.sample((UniformRandomProvider) jDKRandomWrapper0, (List<Vector<Integer>>) vector0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // n <= 0 : n=0
         //
         verifyException("org.apache.commons.rng.sampling.SubsetSamplerUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      LinkedList<ArrayList<String>> linkedList0 = new LinkedList<ArrayList<String>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      linkedList0.add(arrayList0);
      linkedList0.offer(arrayList0);
      ListSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, (List<ArrayList<String>>) linkedList0);
      assertEquals(2, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      Vector<Integer> vector0 = new Vector<Integer>();
      ListSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, (List<Integer>) vector0);
      assertEquals(10, vector0.capacity());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      Stack<Object> stack0 = new Stack<Object>();
      stack0.add((Object) jDKRandomWrapper0);
      ListSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, (List<Object>) stack0, 1, false);
      assertEquals(1, stack0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      LinkedList<ArrayList<String>> linkedList0 = new LinkedList<ArrayList<String>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      linkedList0.add(arrayList0);
      linkedList0.offer(arrayList0);
      linkedList0.add(arrayList0);
      linkedList0.add(arrayList0);
      ListSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, (List<ArrayList<String>>) linkedList0);
      assertTrue(linkedList0.contains(arrayList0));
  }
}
