/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 03:29:08 GMT 2022
 */

package org.apache.commons.rng.sampling.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.rng.UniformRandomProvider;
import org.apache.commons.rng.sampling.distribution.RejectionInversionZipfSampler;
import org.apache.commons.rng.sampling.distribution.SharedStateDiscreteSampler;
import org.apache.commons.rng.simple.JDKRandomWrapper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RejectionInversionZipfSampler_ESTest extends RejectionInversionZipfSampler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Random.setNextRandom(387448);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      assertNotNull(jDKRandomWrapper0);
      
      double double0 = jDKRandomWrapper0.nextDouble();
      assertEquals(0.8, double0, 0.01);
      
      int int0 = jDKRandomWrapper0.nextInt();
      assertEquals(387449, int0);
      
      RejectionInversionZipfSampler rejectionInversionZipfSampler0 = new RejectionInversionZipfSampler(jDKRandomWrapper0, 387448, 3.6763019741124934);
      assertNotNull(rejectionInversionZipfSampler0);
      
      int int1 = rejectionInversionZipfSampler0.sample();
      assertEquals(387063, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      assertNotNull(jDKRandomWrapper0);
      
      RejectionInversionZipfSampler rejectionInversionZipfSampler0 = new RejectionInversionZipfSampler(jDKRandomWrapper0, 889, 889);
      assertNotNull(rejectionInversionZipfSampler0);
      
      int int0 = rejectionInversionZipfSampler0.sample();
      assertEquals(889, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      assertNotNull(jDKRandomWrapper0);
      
      long long0 = jDKRandomWrapper0.nextLong();
      assertEquals(0L, long0);
      
      RejectionInversionZipfSampler rejectionInversionZipfSampler0 = new RejectionInversionZipfSampler(jDKRandomWrapper0, 1, 1);
      assertNotNull(rejectionInversionZipfSampler0);
      
      int int0 = rejectionInversionZipfSampler0.sample();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RejectionInversionZipfSampler rejectionInversionZipfSampler0 = new RejectionInversionZipfSampler((UniformRandomProvider) null, 1582, 620L);
      assertNotNull(rejectionInversionZipfSampler0);
      
      // Undeclared exception!
      try { 
        rejectionInversionZipfSampler0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RejectionInversionZipfSampler rejectionInversionZipfSampler0 = new RejectionInversionZipfSampler((UniformRandomProvider) null, 981, 981);
      assertNotNull(rejectionInversionZipfSampler0);
      
      // Undeclared exception!
      try { 
        rejectionInversionZipfSampler0.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.rng.sampling.distribution.RejectionInversionZipfSampler", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      assertNotNull(jDKRandomWrapper0);
      
      RejectionInversionZipfSampler rejectionInversionZipfSampler0 = null;
      try {
        rejectionInversionZipfSampler0 = new RejectionInversionZipfSampler(jDKRandomWrapper0, 1078, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent is not strictly positive: 0.0
         //
         verifyException("org.apache.commons.rng.sampling.distribution.RejectionInversionZipfSampler", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      assertNotNull(jDKRandomWrapper0);
      
      RejectionInversionZipfSampler rejectionInversionZipfSampler0 = null;
      try {
        rejectionInversionZipfSampler0 = new RejectionInversionZipfSampler(jDKRandomWrapper0, (-97), 265.802481);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of elements is not strictly positive: -97
         //
         verifyException("org.apache.commons.rng.sampling.distribution.RejectionInversionZipfSampler", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      RejectionInversionZipfSampler rejectionInversionZipfSampler0 = new RejectionInversionZipfSampler(jDKRandomWrapper0, 682, 73.6655104);
      int int0 = rejectionInversionZipfSampler0.sample();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      RejectionInversionZipfSampler rejectionInversionZipfSampler0 = new RejectionInversionZipfSampler(jDKRandomWrapper0, 1017229069, 1017229069);
      int int0 = rejectionInversionZipfSampler0.sample();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        RejectionInversionZipfSampler.of(jDKRandomWrapper0, 1017229069, (-24.206209717834803));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent is not strictly positive: -24.206209717834803
         //
         verifyException("org.apache.commons.rng.sampling.distribution.RejectionInversionZipfSampler", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = RejectionInversionZipfSampler.of(jDKRandomWrapper0, 1017229069, 0.9999999995);
      int int0 = ((RejectionInversionZipfSampler) sharedStateDiscreteSampler0).sample();
      assertEquals(1017229069, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      RejectionInversionZipfSampler rejectionInversionZipfSampler0 = new RejectionInversionZipfSampler(jDKRandomWrapper0, 1017229069, 1017229069);
      String string0 = rejectionInversionZipfSampler0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      RejectionInversionZipfSampler rejectionInversionZipfSampler0 = new RejectionInversionZipfSampler(jDKRandomWrapper0, 1017229069, 1017229069);
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = rejectionInversionZipfSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      assertNotSame(rejectionInversionZipfSampler0, sharedStateDiscreteSampler0);
  }
}
