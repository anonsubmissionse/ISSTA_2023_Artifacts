/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 03:29:52 GMT 2022
 */

package org.apache.commons.rng.sampling.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.rng.UniformRandomProvider;
import org.apache.commons.rng.sampling.distribution.GuideTableDiscreteSampler;
import org.apache.commons.rng.sampling.distribution.SharedStateDiscreteSampler;
import org.apache.commons.rng.simple.JDKRandomWrapper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GuideTableDiscreteSampler_ESTest extends GuideTableDiscreteSampler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[2];
      // Undeclared exception!
      try { 
        GuideTableDiscreteSampler.of((UniformRandomProvider) jDKRandomWrapper0, doubleArray0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Alpha must be strictly positive.
         //
         verifyException("org.apache.commons.rng.sampling.distribution.GuideTableDiscreteSampler", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2.625791928012471;
      doubleArray0[2] = 2540.219701029471;
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = GuideTableDiscreteSampler.of((UniformRandomProvider) jDKRandomWrapper0, doubleArray0);
      int int0 = ((GuideTableDiscreteSampler) sharedStateDiscreteSampler0).sample();
      assertEquals(0, int0);
      assertArrayEquals(new double[] {2.625791928012471, 0.0, 2540.219701029471, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1025.0;
      GuideTableDiscreteSampler guideTableDiscreteSampler0 = (GuideTableDiscreteSampler)GuideTableDiscreteSampler.of((UniformRandomProvider) null, doubleArray0);
      // Undeclared exception!
      try { 
        guideTableDiscreteSampler0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1025.0;
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = GuideTableDiscreteSampler.of((UniformRandomProvider) null, doubleArray0);
      // Undeclared exception!
      try { 
        ((GuideTableDiscreteSampler) sharedStateDiscreteSampler0).sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.rng.sampling.distribution.GuideTableDiscreteSampler", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3873L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 3873L;
      // Undeclared exception!
      GuideTableDiscreteSampler.of((UniformRandomProvider) jDKRandomWrapper0, doubleArray0, (double) 3873L);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 1.0;
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = GuideTableDiscreteSampler.of((UniformRandomProvider) null, doubleArray0, 1.0);
      assertNotNull(sharedStateDiscreteSampler0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[7];
      // Undeclared exception!
      try { 
        GuideTableDiscreteSampler.of((UniformRandomProvider) jDKRandomWrapper0, doubleArray0, (-1816.51790564215));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Alpha must be strictly positive.
         //
         verifyException("org.apache.commons.rng.sampling.distribution.GuideTableDiscreteSampler", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        GuideTableDiscreteSampler.of((UniformRandomProvider) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Probabilities must not be empty.
         //
         verifyException("org.apache.commons.rng.sampling.distribution.GuideTableDiscreteSampler", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        GuideTableDiscreteSampler.of((UniformRandomProvider) null, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Probabilities must not be empty.
         //
         verifyException("org.apache.commons.rng.sampling.distribution.GuideTableDiscreteSampler", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[7];
      // Undeclared exception!
      try { 
        GuideTableDiscreteSampler.of((UniformRandomProvider) jDKRandomWrapper0, doubleArray0, 1738.01628855);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid sum of probabilities: 0.0
         //
         verifyException("org.apache.commons.rng.sampling.distribution.GuideTableDiscreteSampler", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[7];
      doubleArray0[4] = 2525.69618306938;
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = GuideTableDiscreteSampler.of((UniformRandomProvider) jDKRandomWrapper0, doubleArray0);
      int int0 = ((GuideTableDiscreteSampler) sharedStateDiscreteSampler0).sample();
      assertEquals(0, int0);
      
      int int1 = ((GuideTableDiscreteSampler) sharedStateDiscreteSampler0).sample();
      assertEquals(4, int1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[7];
      doubleArray0[4] = 2525.69618306938;
      GuideTableDiscreteSampler guideTableDiscreteSampler0 = (GuideTableDiscreteSampler)GuideTableDiscreteSampler.of((UniformRandomProvider) jDKRandomWrapper0, doubleArray0);
      guideTableDiscreteSampler0.toString();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 2525.69618306938, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[7];
      doubleArray0[4] = 2525.69618306938;
      GuideTableDiscreteSampler guideTableDiscreteSampler0 = (GuideTableDiscreteSampler)GuideTableDiscreteSampler.of((UniformRandomProvider) jDKRandomWrapper0, doubleArray0);
      guideTableDiscreteSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 2525.69618306938, 0.0, 0.0}, doubleArray0, 0.01);
  }
}
