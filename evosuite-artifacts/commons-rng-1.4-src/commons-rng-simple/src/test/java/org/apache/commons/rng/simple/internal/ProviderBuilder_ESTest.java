/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 03:16:34 GMT 2022
 */

package org.apache.commons.rng.simple.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.rng.RestorableUniformRandomProvider;
import org.apache.commons.rng.UniformRandomProvider;
import org.apache.commons.rng.simple.JDKRandomWrapper;
import org.apache.commons.rng.simple.internal.ProviderBuilder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ProviderBuilder_ESTest extends ProviderBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ProviderBuilder.RandomSourceInternal providerBuilder_RandomSourceInternal0 = ProviderBuilder.RandomSourceInternal.XO_SHI_RO_128_PP;
      Integer integer0 = new Integer(25);
      Object[] objectArray0 = new Object[0];
      RestorableUniformRandomProvider restorableUniformRandomProvider0 = providerBuilder_RandomSourceInternal0.create(integer0, objectArray0);
      assertNotNull(restorableUniformRandomProvider0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ProviderBuilder.RandomSourceInternal providerBuilder_RandomSourceInternal0 = ProviderBuilder.RandomSourceInternal.ISAAC;
      Class<?> class0 = providerBuilder_RandomSourceInternal0.getSeed();
      assertTrue(class0.isArray());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ProviderBuilder.RandomSourceInternal providerBuilder_RandomSourceInternal0 = ProviderBuilder.RandomSourceInternal.TWO_CMRES_SELECT;
      Class<?>[] classArray0 = providerBuilder_RandomSourceInternal0.getArgs();
      assertEquals(3, classArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ProviderBuilder.RandomSourceInternal providerBuilder_RandomSourceInternal0 = ProviderBuilder.RandomSourceInternal.MSWS;
      // Undeclared exception!
      try { 
        ProviderBuilder.create(providerBuilder_RandomSourceInternal0, (Object) providerBuilder_RandomSourceInternal0, (Object[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Unrecognized seed type: MSWS
         //
         verifyException("org.apache.commons.rng.simple.internal.NativeSeedType", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ProviderBuilder.RandomSourceInternal providerBuilder_RandomSourceInternal0 = ProviderBuilder.RandomSourceInternal.TWO_CMRES;
      // Undeclared exception!
      try { 
        ProviderBuilder.create(providerBuilder_RandomSourceInternal0, (Object) null, (Object[]) null);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // Internal error: Please file a bug report
         //
         verifyException("org.apache.commons.rng.simple.internal.ProviderBuilder$RandomSourceInternal", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        ProviderBuilder.create((ProviderBuilder.RandomSourceInternal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.rng.simple.internal.ProviderBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ProviderBuilder.RandomSourceInternal providerBuilder_RandomSourceInternal0 = ProviderBuilder.RandomSourceInternal.TWO_CMRES;
      // Undeclared exception!
      try { 
        ProviderBuilder.create(providerBuilder_RandomSourceInternal0);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // Internal error: Please file a bug report
         //
         verifyException("org.apache.commons.rng.simple.internal.ProviderBuilder$RandomSourceInternal", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ProviderBuilder.RandomSourceInternal providerBuilder_RandomSourceInternal0 = ProviderBuilder.RandomSourceInternal.TWO_CMRES_SELECT;
      // Undeclared exception!
      try { 
        ProviderBuilder.create(providerBuilder_RandomSourceInternal0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ProviderBuilder.RandomSourceInternal providerBuilder_RandomSourceInternal0 = ProviderBuilder.RandomSourceInternal.ISAAC;
      RestorableUniformRandomProvider restorableUniformRandomProvider0 = providerBuilder_RandomSourceInternal0.create();
      assertNotNull(restorableUniformRandomProvider0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ProviderBuilder.RandomSourceInternal providerBuilder_RandomSourceInternal0 = ProviderBuilder.RandomSourceInternal.MSWS;
      Class<?> class0 = providerBuilder_RandomSourceInternal0.getRng();
      assertFalse(class0.isArray());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ProviderBuilder.RandomSourceInternal providerBuilder_RandomSourceInternal0 = ProviderBuilder.RandomSourceInternal.XOR_SHIFT_1024_S;
      Object object0 = providerBuilder_RandomSourceInternal0.createSeed();
      boolean boolean0 = providerBuilder_RandomSourceInternal0.isNativeSeed(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ProviderBuilder.RandomSourceInternal providerBuilder_RandomSourceInternal0 = ProviderBuilder.RandomSourceInternal.XO_SHI_RO_256_PP;
      boolean boolean0 = providerBuilder_RandomSourceInternal0.isNativeSeed((Integer) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ProviderBuilder.RandomSourceInternal providerBuilder_RandomSourceInternal0 = ProviderBuilder.RandomSourceInternal.MSWS;
      ProviderBuilder.RandomSourceInternal providerBuilder_RandomSourceInternal1 = ProviderBuilder.RandomSourceInternal.JSF_64;
      Object object0 = providerBuilder_RandomSourceInternal1.createSeed();
      Object object1 = providerBuilder_RandomSourceInternal0.convertSeed(object0);
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ProviderBuilder.create((ProviderBuilder.RandomSourceInternal) null, object0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.rng.simple.internal.ProviderBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ProviderBuilder.RandomSourceInternal providerBuilder_RandomSourceInternal0 = ProviderBuilder.RandomSourceInternal.XO_RO_SHI_RO_1024_SS;
      Object[] objectArray0 = new Object[6];
      // Undeclared exception!
      try { 
        ProviderBuilder.create(providerBuilder_RandomSourceInternal0, (Object) null, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ProviderBuilder.RandomSourceInternal providerBuilder_RandomSourceInternal0 = ProviderBuilder.RandomSourceInternal.XO_SHI_RO_256_PP;
      RestorableUniformRandomProvider restorableUniformRandomProvider0 = ProviderBuilder.create(providerBuilder_RandomSourceInternal0);
      assertNotNull(restorableUniformRandomProvider0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ProviderBuilder.RandomSourceInternal providerBuilder_RandomSourceInternal0 = ProviderBuilder.RandomSourceInternal.MSWS;
      byte[] byteArray0 = providerBuilder_RandomSourceInternal0.createSeedBytes();
      assertEquals(24, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ProviderBuilder.RandomSourceInternal providerBuilder_RandomSourceInternal0 = ProviderBuilder.RandomSourceInternal.XOR_SHIFT_1024_S;
      boolean boolean0 = providerBuilder_RandomSourceInternal0.isNativeSeed("XO_SHI_RO_256_PP");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ProviderBuilder.RandomSourceInternal providerBuilder_RandomSourceInternal0 = ProviderBuilder.RandomSourceInternal.MSWS;
      RestorableUniformRandomProvider restorableUniformRandomProvider0 = providerBuilder_RandomSourceInternal0.create();
      byte[] byteArray0 = providerBuilder_RandomSourceInternal0.createSeedBytes((UniformRandomProvider) restorableUniformRandomProvider0);
      assertEquals(24, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ProviderBuilder.RandomSourceInternal providerBuilder_RandomSourceInternal0 = ProviderBuilder.RandomSourceInternal.XOR_SHIFT_1024_S;
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      byte[] byteArray0 = providerBuilder_RandomSourceInternal0.createByteArraySeed(jDKRandomWrapper0);
      assertEquals(128, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ProviderBuilder.RandomSourceInternal providerBuilder_RandomSourceInternal0 = ProviderBuilder.RandomSourceInternal.XO_SHI_RO_256_PLUS;
      RestorableUniformRandomProvider restorableUniformRandomProvider0 = ProviderBuilder.create(providerBuilder_RandomSourceInternal0, (Object) null, (Object[]) null);
      assertNotNull(restorableUniformRandomProvider0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ProviderBuilder.RandomSourceInternal providerBuilder_RandomSourceInternal0 = ProviderBuilder.RandomSourceInternal.MSWS;
      Integer integer0 = new Integer((-837));
      RestorableUniformRandomProvider restorableUniformRandomProvider0 = providerBuilder_RandomSourceInternal0.create(integer0);
      assertNotNull(restorableUniformRandomProvider0);
  }
}
