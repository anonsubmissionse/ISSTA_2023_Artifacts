/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 20:49:13 GMT 2022
 */

package org.apache.commons.net.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.LineNumberReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.InetAddress;
import java.net.Socket;
import java.net.URI;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Enumeration;
import java.util.Locale;
import org.apache.commons.net.io.CopyStreamAdapter;
import org.apache.commons.net.io.CopyStreamListener;
import org.apache.commons.net.io.Util;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Util_ESTest extends Util_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      int int0 = 4038;
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 4038);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0);
      Locale locale0 = null;
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) "Tir^|j_\"";
      objectArray0[2] = (Object) pipedWriter0;
      objectArray0[3] = (Object) pipedReader0;
      objectArray0[4] = (Object) null;
      Object object0 = new Object();
      objectArray0[6] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "Tir^|j_\"", objectArray0);
      printWriter0.println(2089L);
      // Undeclared exception!
      Util.copyReader((Reader) pipedReader0, (Writer) mockPrintWriter0, 4038);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 4038);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0);
      String string0 = "Tir^|j_\"";
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "Tir^|j_\"";
      objectArray0[2] = (Object) pipedWriter0;
      objectArray0[3] = (Object) pipedReader0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[6] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "Tir^|j_\"", objectArray0);
      CopyStreamAdapter copyStreamAdapter0 = new CopyStreamAdapter();
      // Undeclared exception!
      Util.copyReader((Reader) pipedReader0, (Writer) printWriter0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte) (-78);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(enumeration0).hasMoreElements();
      doReturn(pushbackInputStream0).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      int int0 = 0;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append('t');
      Util.copyStream((InputStream) sequenceInputStream0, (OutputStream) printStream0, 0);
      PushbackInputStream pushbackInputStream1 = null;
      try {
        pushbackInputStream1 = new PushbackInputStream(sequenceInputStream0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size <= 0
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CopyStreamAdapter copyStreamAdapter0 = new CopyStreamAdapter();
      char[] charArray0 = new char[8];
      charArray0[0] = '%';
      charArray0[1] = 'I';
      charArray0[2] = 'W';
      charArray0[3] = '\"';
      charArray0[4] = '/';
      charArray0[5] = '[';
      charArray0[6] = 'g';
      charArray0[7] = '!';
      stringWriter0.write(charArray0);
      CopyStreamAdapter copyStreamAdapter1 = new CopyStreamAdapter();
      copyStreamAdapter0.addCopyStreamListener(copyStreamAdapter1);
      File file0 = MockFile.createTempFile("A4p^-N*l=r", "The magic number cannot be null");
      MockFileReader mockFileReader0 = new MockFileReader(file0);
      Util.copyReader((Reader) mockFileReader0, (Writer) stringWriter0, 1566);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte) (-7);
      byte byte0 = (byte) (-26);
      byteArray0[6] = (byte) (-26);
      byteArray0[7] = (byte)63;
      byteArray0[8] = (byte) (-13);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-7), (byte)63);
      MockPrintStream mockPrintStream0 = new MockPrintStream("oOYj?7Ssk%~%b1");
      CopyStreamAdapter copyStreamAdapter0 = new CopyStreamAdapter();
      // Undeclared exception!
      try { 
        Util.copyStream((InputStream) byteArrayInputStream0, (OutputStream) mockPrintStream0, 2, 0L, (CopyStreamListener) copyStreamAdapter0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      CopyStreamAdapter copyStreamAdapter0 = new CopyStreamAdapter();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      MockPrintStream mockPrintStream0 = new MockPrintStream("IOException caught while copying.");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) locale0;
      Object object2 = new Object();
      objectArray0[3] = object2;
      objectArray0[4] = (Object) byteArrayInputStream0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "", objectArray0);
      Util.copyStream((InputStream) byteArrayInputStream0, (OutputStream) printStream0, (int) (byte)1, (long) (-3576), (CopyStreamListener) copyStreamAdapter0, true);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 4038);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "Tir^|j_\"";
      objectArray0[2] = (Object) pipedWriter0;
      objectArray0[3] = (Object) pipedReader0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[6] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "Tir^|j_\"", objectArray0);
      printWriter0.println();
      CopyStreamAdapter copyStreamAdapter0 = new CopyStreamAdapter();
      Util.closeQuietly((Closeable) printWriter0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)18;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      MockFile mockFile0 = new MockFile("HU ayeg#qyNQdR`0|");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      Util.copyStream((InputStream) byteArrayInputStream0, (OutputStream) objectOutputStream0);
      Util.copyReader((Reader) pipedReader0, (Writer) printWriter0, 4038, (long) 4038, (CopyStreamListener) copyStreamAdapter0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 274;
      PipedReader pipedReader0 = new PipedReader(274);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(274);
      char[] charArray0 = new char[2];
      charArray0[0] = 'T';
      charArray0[1] = 'R';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.duplicate();
      int int1 = 45;
      try { 
        Util.copyReader((Reader) pipedReader0, (Writer) charArrayWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // IOException caught while copying.
         //
         verifyException("org.apache.commons.net.io.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFile mockFile0 = new MockFile("z_02n3(Q", "KO4V48Vi}gInMdN9");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      CopyStreamAdapter copyStreamAdapter0 = new CopyStreamAdapter();
      // Undeclared exception!
      try { 
        Util.copyStream((InputStream) null, (OutputStream) mockFileOutputStream0, 854, (long) 854, (CopyStreamListener) copyStreamAdapter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.io.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte) (-97);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        Util.copyStream((InputStream) byteArrayInputStream0, (OutputStream) pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // IOException caught while copying.
         //
         verifyException("org.apache.commons.net.io.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Util.closeQuietly((Closeable) null);
      int int0 = 1929;
      PipedReader pipedReader0 = new PipedReader(1929);
      String string0 = "[=?G9:OK^+zu";
      MockFileWriter mockFileWriter0 = new MockFileWriter("[=?G9:OK^+zu", false);
      CopyStreamAdapter copyStreamAdapter0 = new CopyStreamAdapter();
      try { 
        Util.copyReader((Reader) pipedReader0, (Writer) mockFileWriter0, 1929, 482L, (CopyStreamListener) copyStreamAdapter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // IOException caught while copying.
         //
         verifyException("org.apache.commons.net.io.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", ".iJr-T3V6op @fU");
      File file0 = MockFile.createTempFile("Nb&q\"*mxl<S!Z-", (String) null, (File) mockFile0);
      MockFile mockFile1 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile1);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      int int0 = 0;
      Util.copyStream((InputStream) dataInputStream0, (OutputStream) mockPrintStream0, 0);
      InetAddress inetAddress0 = MockInetAddress.getByName("");
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket("", 0, inetAddress0, 0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@4047aa24
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      MockFile mockFile0 = new MockFile("The strings must not be null", "The strings must not be null");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      CopyStreamAdapter copyStreamAdapter0 = new CopyStreamAdapter();
      try { 
        Util.copyStream((InputStream) pipedInputStream0, (OutputStream) mockFileOutputStream0, 2156, (-426L), (CopyStreamListener) copyStreamAdapter0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // IOException caught while copying.
         //
         verifyException("org.apache.commons.net.io.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '*';
      charArray0[1] = '?';
      int int0 = 0;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 0, 0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      BufferedReader bufferedReader0 = new BufferedReader(lineNumberReader0);
      File file0 = MockFile.createTempFile("H`M,?z>3+X6t=", "wM&`m=6)?A.Y#m#5}");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      CopyStreamAdapter copyStreamAdapter0 = new CopyStreamAdapter();
      Util.copyReader((Reader) bufferedReader0, (Writer) mockPrintWriter0, 0, (long) 0, (CopyStreamListener) copyStreamAdapter0);
      Util.copyReader((Reader) lineNumberReader0, (Writer) mockPrintWriter0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      Util.copyReader((Reader) stringReader0, (Writer) null);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      PrintStream printStream0 = mockPrintStream0.append('}');
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(printStream0);
      // Undeclared exception!
      try { 
        Util.copyStream((InputStream) null, (OutputStream) objectOutputStream0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.io.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-26);
      byteArray0[7] = (byte)63;
      byteArray0[8] = (byte) (-13);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)63);
      MockPrintStream mockPrintStream0 = new MockPrintStream("oOYj?7Ssk%~%b1");
      CopyStreamAdapter copyStreamAdapter0 = new CopyStreamAdapter();
      Util.copyStream((InputStream) byteArrayInputStream0, (OutputStream) mockPrintStream0, 2, 0L, (CopyStreamListener) copyStreamAdapter0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('?');
      Util.closeQuietly((Closeable) printWriter0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      MockFile mockFile0 = new MockFile((File) null, "v6.[6VlkQeB");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "v6.[6VlkQeB");
      Util.copyStream((InputStream) sequenceInputStream0, (OutputStream) printStream0);
      CopyStreamAdapter copyStreamAdapter0 = new CopyStreamAdapter();
      Util.copyStream((InputStream) sequenceInputStream0, (OutputStream) printStream0, (-477), (-3431L), (CopyStreamListener) copyStreamAdapter0);
      int int0 = 1786;
      PipedInputStream pipedInputStream0 = new PipedInputStream(1786);
      // Undeclared exception!
      try { 
        Charset.forName("v6.[6VlkQeB");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // v6.[6VlkQeB
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "e.va[JeHHgqf";
      MockPrintStream mockPrintStream0 = new MockPrintStream("e.va[JeHHgqf");
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0, charset0);
      // Undeclared exception!
      try { 
        Util.copyReader((Reader) null, (Writer) outputStreamWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      InputStream inputStream0 = null;
      OutputStream outputStream0 = null;
      int int0 = (-1);
      CopyStreamListener copyStreamListener0 = null;
      // Undeclared exception!
      try { 
        Util.copyStream((InputStream) null, (OutputStream) null, (-1), (long) (-1), (CopyStreamListener) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.io.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Socket socket0 = null;
      Util.closeQuietly((Socket) null);
      InputStream inputStream0 = null;
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      CopyStreamAdapter copyStreamAdapter0 = new CopyStreamAdapter();
      Util.copyStream((InputStream) byteArrayInputStream0, (OutputStream) byteArrayOutputStream0, (int) (byte)0, 0L, (CopyStreamListener) copyStreamAdapter0, true);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      InputStream inputStream0 = null;
      OutputStream outputStream0 = null;
      int int0 = (-1);
      CopyStreamAdapter copyStreamAdapter0 = new CopyStreamAdapter();
      // Undeclared exception!
      try { 
        Util.copyStream((InputStream) null, (OutputStream) null, (-1), (long) (-1), (CopyStreamListener) copyStreamAdapter0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.io.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      Util.closeQuietly((Socket) mockSocket0);
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      PipedReader pipedReader1 = null;
      try {
        pipedReader1 = new PipedReader(pipedWriter0, (-3576));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 4038);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "Tir^|j_\"";
      objectArray0[2] = (Object) pipedWriter0;
      objectArray0[3] = (Object) pipedReader0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[6] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "Tir^|j_\"", objectArray0);
      CopyStreamAdapter copyStreamAdapter0 = new CopyStreamAdapter();
      // Undeclared exception!
      Util.copyReader((Reader) pipedReader0, (Writer) printWriter0, 4038, (long) 4038, (CopyStreamListener) copyStreamAdapter0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "IV#%G";
      StringReader stringReader0 = new StringReader("IV#%G");
      // Undeclared exception!
      try { 
        Util.copyReader((Reader) stringReader0, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Reader reader0 = null;
      Writer writer0 = null;
      int int0 = (-1609);
      // Undeclared exception!
      try { 
        Util.copyReader((Reader) null, (Writer) null, (-1609));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(6);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 2);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) pushbackInputStream0;
      objectArray0[3] = (Object) "IOException caught while copying.";
      objectArray0[4] = (Object) "IOException caught while copying.";
      objectArray0[5] = (Object) null;
      PrintStream printStream0 = mockPrintStream0.printf((Locale) null, "IOException caught while copying.", objectArray0);
      CopyStreamAdapter copyStreamAdapter0 = new CopyStreamAdapter();
      try { 
        Util.copyStream((InputStream) pushbackInputStream0, (OutputStream) printStream0, 6, (long) 2, (CopyStreamListener) copyStreamAdapter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // IOException caught while copying.
         //
         verifyException("org.apache.commons.net.io.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OutputStream outputStream0 = null;
      // Undeclared exception!
      try { 
        Util.copyStream((InputStream) null, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.io.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      try { 
        Util.copyStream((InputStream) pushbackInputStream0, (OutputStream) filterOutputStream0, 1024);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // IOException caught while copying.
         //
         verifyException("org.apache.commons.net.io.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockFile mockFile0 = new MockFile("The magic number must contain at least one byte");
      mockFile0.setReadable(true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      mockFileOutputStream0.getChannel();
      Util.closeQuietly((Closeable) mockFileOutputStream0);
      PipedReader pipedReader0 = new PipedReader(1146);
      Writer writer0 = null;
      try { 
        Util.copyReader((Reader) pipedReader0, (Writer) null, 1146);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // IOException caught while copying.
         //
         verifyException("org.apache.commons.net.io.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CopyStreamAdapter copyStreamAdapter0 = new CopyStreamAdapter();
      // Undeclared exception!
      try { 
        Util.copyReader((Reader) null, (Writer) null, (-1734), (-2419L), (CopyStreamListener) copyStreamAdapter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(2780);
      CopyStreamAdapter copyStreamAdapter0 = new CopyStreamAdapter();
      try { 
        Util.copyReader((Reader) pipedReader0, (Writer) null, 2780, (-1152L), (CopyStreamListener) copyStreamAdapter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // IOException caught while copying.
         //
         verifyException("org.apache.commons.net.io.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectOutputStream$BlockDataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      CopyStreamAdapter copyStreamAdapter0 = new CopyStreamAdapter();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      MockPrintStream mockPrintStream0 = new MockPrintStream("IOException caught while copying.");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) locale0;
      Object object2 = new Object();
      objectArray0[3] = object2;
      objectArray0[4] = (Object) byteArrayInputStream0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "", objectArray0);
      Util.copyStream((InputStream) byteArrayInputStream0, (OutputStream) printStream0, (int) (byte)1, (long) (-3576), (CopyStreamListener) copyStreamAdapter0, false);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte) (-97);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read(byteArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Util.copyStream((InputStream) byteArrayInputStream0, (OutputStream) pipedOutputStream0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'B';
      charArray0[1] = 'E';
      charArray0[2] = 'e';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.markSupported();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      Util.closeQuietly((Socket) null);
      Util.copyStream((InputStream) byteArrayInputStream0, (OutputStream) pipedOutputStream0);
      Util.copyStream((InputStream) byteArrayInputStream0, (OutputStream) pipedOutputStream0, (int) (byte) (-34));
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "IOException caught while copying.");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // IOException caught while copying.
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      int int0 = 4028;
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 4028);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0);
      Locale locale0 = null;
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) "Ti^|j_\"";
      objectArray0[2] = (Object) pipedWriter0;
      objectArray0[3] = (Object) pipedReader0;
      objectArray0[4] = (Object) null;
      Object object0 = new Object();
      objectArray0[6] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "Ti^|j_\"", objectArray0);
      printWriter0.println(2089L);
      // Undeclared exception!
      Util.copyReader((Reader) pipedReader0, (Writer) mockPrintWriter0, 4028);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-102);
      byteArray0[1] = (byte) (-102);
      int int0 = 0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (-7));
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(1024);
      charBuffer0.subSequence(1024, 1024);
      CopyStreamAdapter copyStreamAdapter0 = new CopyStreamAdapter();
      char[] charArray0 = new char[8];
      charArray0[0] = '%';
      charArray0[1] = 'I';
      charArray0[2] = 'W';
      charArray0[3] = '\"';
      charArray0[4] = '/';
      charArray0[5] = '[';
      charArray0[6] = 'g';
      charArray0[7] = '!';
      stringWriter0.write(charArray0);
      CopyStreamAdapter copyStreamAdapter1 = new CopyStreamAdapter();
      copyStreamAdapter0.addCopyStreamListener(copyStreamAdapter1);
      File file0 = MockFile.createTempFile("A4p^-N*l=r", "The magic number cannot be null");
      MockFileReader mockFileReader0 = new MockFileReader(file0);
      long long0 = Util.copyReader((Reader) mockFileReader0, (Writer) stringWriter0, 1566);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '*';
      charArray0[1] = '?';
      int int0 = 0;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 0, 0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      BufferedReader bufferedReader0 = new BufferedReader(lineNumberReader0);
      File file0 = MockFile.createTempFile("H`M,?z>3+X6t=", "wM&`m=6)?A.Y#m#5}");
      file0.toURL();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      CopyStreamAdapter copyStreamAdapter0 = new CopyStreamAdapter();
      Util.copyReader((Reader) bufferedReader0, (Writer) mockPrintWriter0, 0, (long) 0, (CopyStreamListener) copyStreamAdapter0);
      Util.copyReader((Reader) lineNumberReader0, (Writer) mockPrintWriter0);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("wM&`m=6)?A.Y#m#5}");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Socket socket0 = null;
      Util.closeQuietly((Socket) null);
      PipedWriter pipedWriter0 = new PipedWriter();
      pipedWriter0.close();
      int int0 = 91;
      Util.closeQuietly((Closeable) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream(91);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0, 91);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 4038);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "Tir^|j_\"";
      objectArray0[2] = (Object) pipedWriter0;
      objectArray0[3] = (Object) pipedReader0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[6] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "Tir^|j_\"", objectArray0);
      printWriter0.printf("Tir^|j_\"", objectArray0);
      CopyStreamAdapter copyStreamAdapter0 = new CopyStreamAdapter();
      Util.closeQuietly((Closeable) mockPrintWriter0);
      long long0 = Util.copyReader((Reader) pipedReader0, (Writer) printWriter0, 4038, (long) 4038, (CopyStreamListener) copyStreamAdapter0);
      assertEquals(16L, long0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      int int0 = 4038;
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 4038);
      pipedWriter0.write("");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "Tir^|j_\"";
      objectArray0[2] = (Object) pipedWriter0;
      objectArray0[3] = (Object) pipedReader0;
      objectArray0[4] = (Object) null;
      Object object0 = new Object();
      objectArray0[6] = object0;
      MockSocket mockSocket0 = new MockSocket();
      Util.closeQuietly((Socket) mockSocket0);
      CopyStreamAdapter copyStreamAdapter0 = new CopyStreamAdapter();
      Util.closeQuietly((Closeable) pipedWriter0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 4038);
      Util.copyReader((Reader) pipedReader0, (Writer) pipedWriter0);
      Util.closeQuietly((Closeable) mockSocket0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-26);
      byteArray0[7] = (byte)63;
      byteArray0[8] = (byte) (-13);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)63);
      String string0 = "oOYj?7Ssk%~%b1";
      MockPrintStream mockPrintStream0 = new MockPrintStream("oOYj?7Ssk%~%b1");
      CopyStreamAdapter copyStreamAdapter0 = new CopyStreamAdapter();
      Util.copyStream((InputStream) byteArrayInputStream0, (OutputStream) mockPrintStream0, 2, 0L, (CopyStreamListener) copyStreamAdapter0);
      Util.copyStream((InputStream) byteArrayInputStream0, (OutputStream) mockPrintStream0, (int) (byte)0, (-382L), (CopyStreamListener) copyStreamAdapter0);
      File file0 = MockFile.createTempFile("oOYj?7Ssk%~%b1", "oOYj?7Ssk%~%b1");
      try { 
        MockFile.createTempFile("oOYj?7Ssk%~%b1", "oOYj?7Ssk%~%b1", file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }
}
