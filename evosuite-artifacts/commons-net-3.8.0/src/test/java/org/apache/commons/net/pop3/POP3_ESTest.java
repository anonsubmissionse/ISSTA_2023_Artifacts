/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 20:59:41 GMT 2022
 */

package org.apache.commons.net.pop3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.PipedReader;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.net.PrintCommandListener;
import org.apache.commons.net.ProtocolCommandListener;
import org.apache.commons.net.pop3.POP3;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class POP3_ESTest extends POP3_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      assertEquals((-1), pOP3_0.getState());
      
      pOP3_0.setState(0);
      int int0 = pOP3_0.getState();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("\r\n");
      pOP3_0.replyLines = (List<String>) linkedList0;
      pOP3_0.getReplyStrings();
      assertEquals((-1), pOP3_0.getState());
      assertEquals(110, pOP3_0.getDefaultPort());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      pOP3_0._commandSupport_ = null;
      pOP3_0.getCommandSupport();
      assertEquals(110, pOP3_0.getDefaultPort());
      assertEquals((-1), pOP3_0.getState());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      pOP3_0.getCommandSupport();
      assertEquals((-1), pOP3_0.getState());
      assertEquals(110, pOP3_0.getDefaultPort());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      // Undeclared exception!
      try { 
        pOP3_0.sendCommand(110, "bh/hGZ f-!4|9ecX*");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 110
         //
         verifyException("org.apache.commons.net.pop3.POP3", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      // Undeclared exception!
      try { 
        pOP3_0.sendCommand((-1728));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1728
         //
         verifyException("org.apache.commons.net.pop3.POP3", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      MockPrintStream mockPrintStream0 = new MockPrintStream("\r\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      pOP3_0._commandSupport_ = null;
      PrintCommandListener printCommandListener0 = new PrintCommandListener(mockPrintWriter0, false, 'H');
      // Undeclared exception!
      try { 
        pOP3_0.removeProtocolCommandistener(printCommandListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      pOP3_0.replyLines = null;
      // Undeclared exception!
      try { 
        pOP3_0.getReplyStrings();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.pop3.POP3", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      // Undeclared exception!
      try { 
        pOP3_0.getAdditionalReply();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.pop3.POP3", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      PipedReader pipedReader0 = new PipedReader(1);
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0);
      pOP3_0.reader = bufferedReader0;
      try { 
        pOP3_0.getAdditionalReply();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      pOP3_0.replyLines = null;
      // Undeclared exception!
      try { 
        pOP3_0.disconnect();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.pop3.POP3", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      // Undeclared exception!
      try { 
        pOP3_0.sendCommand("SYSTEM", "SYSTEM");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Socket is not connected
         //
         verifyException("org.apache.commons.net.pop3.POP3", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      pOP3_0.setState(859);
      int int0 = pOP3_0.getState();
      assertEquals(859, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("\r\n");
      pOP3_0.replyLines = (List<String>) linkedList0;
      String string0 = pOP3_0.getReplyString();
      assertEquals("\r\n\r\n", string0);
      assertEquals(110, pOP3_0.getDefaultPort());
      assertEquals((-1), pOP3_0.getState());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      pOP3_0.getReplyString();
      assertEquals((-1), pOP3_0.getState());
      assertEquals(110, pOP3_0.getDefaultPort());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      // Undeclared exception!
      try { 
        pOP3_0.sendCommand("\r\n\r\n");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Socket is not connected
         //
         verifyException("org.apache.commons.net.pop3.POP3", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      // Undeclared exception!
      try { 
        pOP3_0.sendCommand(0, "");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Socket is not connected
         //
         verifyException("org.apache.commons.net.pop3.POP3", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      // Undeclared exception!
      try { 
        pOP3_0.sendCommand(2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Socket is not connected
         //
         verifyException("org.apache.commons.net.pop3.POP3", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      pOP3_0.disconnect();
      assertEquals(110, pOP3_0.getDefaultPort());
      assertEquals((-1), pOP3_0.getState());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      pOP3_0.removeProtocolCommandistener((ProtocolCommandListener) null);
      assertEquals((-1), pOP3_0.getState());
      assertEquals(110, pOP3_0.getDefaultPort());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      pOP3_0.getReplyStrings();
      assertEquals(110, pOP3_0.getDefaultPort());
      assertEquals((-1), pOP3_0.getState());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      // Undeclared exception!
      try { 
        pOP3_0._connectAction_();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      int int0 = pOP3_0.getState();
      assertEquals((-1), int0);
      assertEquals(110, pOP3_0.getDefaultPort());
  }
}
