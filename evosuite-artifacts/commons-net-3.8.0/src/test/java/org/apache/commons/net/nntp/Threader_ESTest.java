/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 20:11:40 GMT 2022
 */

package org.apache.commons.net.nntp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import org.apache.commons.net.nntp.Article;
import org.apache.commons.net.nntp.Threadable;
import org.apache.commons.net.nntp.Threader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Threader_ESTest extends Threader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Threader threader0 = new Threader();
      Stack<Article> stack0 = new Stack<Article>();
      Article article0 = new Article();
      article0.setArticleNumber((-12L));
      stack0.add(article0);
      article0.setSubject("org.apache.commons.o.filefilter.DirectoryFieFilter");
      article0.addReference("org.apache.commons.o.filefilter.DirectoryFieFilter");
      Threadable threadable0 = threader0.thread((List<? extends Threadable>) stack0);
      assertTrue(stack0.contains(threadable0));
      assertNotNull(threadable0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Threader threader0 = new Threader();
      Stack<Article> stack0 = new Stack<Article>();
      Article article0 = new Article();
      article0.setArticleNumber(1L);
      stack0.add(article0);
      stack0.add(article0);
      article0.setSubject("org.apache.commons.io.fileiler.DirectoryFileFilter");
      Threadable threadable0 = threader0.thread((List<? extends Threadable>) stack0);
      assertNotNull(threadable0);
      assertFalse(stack0.contains(threadable0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Threader threader0 = new Threader();
      Stack<Article> stack0 = new Stack<Article>();
      Article article0 = new Article();
      article0.setArticleNumber((-12L));
      stack0.add(article0);
      article0.setSubject("org.apache.commons.o.filefilter.DirectoryFieFilter");
      article0.addReference("org.apache.commons.o.filefilter.DirectoryFieFilter");
      Threadable threadable0 = threader0.thread((Iterable<? extends Threadable>) stack0);
      assertTrue(stack0.contains(threadable0));
      assertNotNull(threadable0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Threader threader0 = new Threader();
      Stack<Article> stack0 = new Stack<Article>();
      List<Article> list0 = stack0.subList(0, 0);
      Article article0 = new Article();
      stack0.add(article0);
      // Undeclared exception!
      try { 
        threader0.thread((Iterable<? extends Threadable>) list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Threader threader0 = new Threader();
      LinkedList<Article> linkedList0 = new LinkedList<Article>();
      Article article0 = new Article();
      linkedList0.add(article0);
      Threadable threadable0 = threader0.thread((Iterable<? extends Threadable>) linkedList0);
      assertNull(threadable0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Threader threader0 = new Threader();
      Threadable threadable0 = threader0.thread((Threadable[]) null);
      assertNull(threadable0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Threader threader0 = new Threader();
      Article article0 = new Article();
      article0.setArticleNumber((-12L));
      article0.setSubject("org.apache.commons.o.filefilter.DirectoryFieFilter");
      article0.addReference("org.apache.commons.o.filefilter.DirectoryFieFilter");
      Threadable[] threadableArray0 = new Threadable[2];
      threadableArray0[0] = (Threadable) article0;
      threadableArray0[1] = (Threadable) article0;
      Article article1 = (Article)threader0.thread(threadableArray0);
      assertNotNull(article1);
      assertEquals((-1L), article1.getArticleNumberLong());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Threader threader0 = new Threader();
      Stack<Article> stack0 = new Stack<Article>();
      Article article0 = new Article();
      article0.addReference(" ");
      article0.setArticleNumber(12L);
      stack0.add(article0);
      stack0.add(article0);
      article0.setSubject("org.apache.commons.io.fileier.DirectoryFileFilter");
      Threadable threadable0 = threader0.thread((Iterable<? extends Threadable>) stack0);
      assertNotNull(threadable0);
      assertFalse(stack0.contains(threadable0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Stack<Article> stack0 = new Stack<Article>();
      Article article0 = new Article();
      article0.setArticleNumber((-65L));
      stack0.add(article0);
      article0.setSubject("");
      Threader threader0 = new Threader();
      Article article1 = (Article)threader0.thread((Iterable<? extends Threadable>) stack0);
      assertEquals((-65L), article1.getArticleNumberLong());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Threader threader0 = new Threader();
      Stack<Article> stack0 = new Stack<Article>();
      Article article0 = new Article();
      article0.setArticleNumber((-153L));
      stack0.add(article0);
      article0.addReference("  Qm:areKt");
      article0.addReference("org.apahe.commns.o.fi;eilter.DiRectoryFieFilter");
      article0.setArticleId("org.apahe.commns.o.fi;eilter.DiRectoryFieFilter");
      // Undeclared exception!
      try { 
        threader0.thread((Iterable<? extends Threadable>) stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.nntp.Article", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Threader threader0 = new Threader();
      Article article0 = new Article();
      article0.setArticleNumber((-153L));
      article0.addReference("org.apahe.commns.o.fi;eilter.DiRectoryFieFilter");
      article0.addReference(";$PT>");
      article0.setArticleId("org.apahe.commns.o.fi;eilter.DiRectoryFieFilter");
      Threadable[] threadableArray0 = new Threadable[7];
      threadableArray0[0] = (Threadable) article0;
      threadableArray0[1] = (Threadable) article0;
      threadableArray0[2] = (Threadable) article0;
      threadableArray0[3] = (Threadable) article0;
      threadableArray0[4] = (Threadable) article0;
      threadableArray0[5] = (Threadable) article0;
      threadableArray0[6] = (Threadable) article0;
      // Undeclared exception!
      try { 
        threader0.thread(threadableArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.nntp.Article", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Threader threader0 = new Threader();
      Stack<Article> stack0 = new Stack<Article>();
      Article article0 = new Article();
      article0.setArticleNumber((-153L));
      stack0.add(article0);
      article0.addReference("org.apahe.commns.o.fi;eilter.DiRectoryFieFilter");
      article0.addReference(";$PT>");
      article0.setArticleId("org.apahe.commns.o.fi;eilter.DiRectoryFieFilter");
      // Undeclared exception!
      try { 
        threader0.thread((Iterable<? extends Threadable>) stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.nntp.Article", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Threader threader0 = new Threader();
      Article article0 = new Article();
      article0.setArticleNumber((-49L));
      article0.addReference("L$~y^$i8PNl,?SYe?");
      article0.addReference("ogapahe.commns.o.i;eUlter.DiRctoryFieFiler");
      article0.addReference("L$~y^$i8PNl,?SYe?");
      article0.addReference(";w$PT>");
      article0.setArticleId("ogapahe.commns.o.i;eUlter.DiRctoryFieFiler");
      Threadable[] threadableArray0 = new Threadable[1];
      threadableArray0[0] = (Threadable) article0;
      // Undeclared exception!
      try { 
        threader0.thread(threadableArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.nntp.Article", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Threader threader0 = new Threader();
      Article article0 = new Article();
      article0.setArticleNumber((-153L));
      article0.setSubject("org.apahe.commns.o.fi;eilter.DiRectoryFieFilter");
      article0.addReference("org.apahe.commns.o.fi;eilter.DiRectoryFieFilter");
      article0.setArticleId("org.apahe.commns.o.fi;eilter.DiRectoryFieFilter");
      Threadable[] threadableArray0 = new Threadable[7];
      threadableArray0[0] = (Threadable) article0;
      threadableArray0[1] = (Threadable) article0;
      threadableArray0[2] = (Threadable) article0;
      threadableArray0[3] = (Threadable) article0;
      threadableArray0[4] = (Threadable) article0;
      threadableArray0[5] = (Threadable) article0;
      threadableArray0[6] = (Threadable) article0;
      Article article1 = (Article)threader0.thread(threadableArray0);
      assertEquals((-153L), article1.getArticleNumberLong());
      assertNotNull(article1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Threader threader0 = new Threader();
      ArrayList<Article> arrayList0 = new ArrayList<Article>();
      arrayList0.add((Article) null);
      // Undeclared exception!
      try { 
        threader0.thread((List<? extends Threadable>) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.nntp.Threader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Threader threader0 = new Threader();
      Threadable threadable0 = threader0.thread((Iterable<? extends Threadable>) null);
      assertNull(threadable0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Threader threader0 = new Threader();
      ArrayList<Article> arrayList0 = new ArrayList<Article>();
      Threadable threadable0 = threader0.thread((List<? extends Threadable>) arrayList0);
      assertNull(threadable0);
  }
}
