/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 21:11:06 GMT 2022
 */

package org.apache.commons.net;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.net.ProtocolCommandEvent;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ProtocolCommandEvent_ESTest extends ProtocolCommandEvent_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      ProtocolCommandEvent protocolCommandEvent0 = new ProtocolCommandEvent(object0, 0, "#9jh8ac3[$");
      boolean boolean0 = protocolCommandEvent0.isCommand();
      assertEquals(0, protocolCommandEvent0.getReplyCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      ProtocolCommandEvent protocolCommandEvent0 = new ProtocolCommandEvent(object0, 1, "");
      int int0 = protocolCommandEvent0.getReplyCode();
      assertEquals(1, int0);
      assertFalse(protocolCommandEvent0.isCommand());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      ProtocolCommandEvent protocolCommandEvent0 = new ProtocolCommandEvent(object0, (-1382), "");
      int int0 = protocolCommandEvent0.getReplyCode();
      assertEquals((-1382), int0);
      assertTrue(protocolCommandEvent0.isReply());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      ProtocolCommandEvent protocolCommandEvent0 = new ProtocolCommandEvent(object0, 740, (String) null);
      protocolCommandEvent0.getMessage();
      assertEquals(740, protocolCommandEvent0.getReplyCode());
      assertTrue(protocolCommandEvent0.isReply());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      ProtocolCommandEvent protocolCommandEvent0 = new ProtocolCommandEvent(object0, 0, "#9jh8ac3[$");
      protocolCommandEvent0.getMessage();
      assertEquals(0, protocolCommandEvent0.getReplyCode());
      assertTrue(protocolCommandEvent0.isReply());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      ProtocolCommandEvent protocolCommandEvent0 = new ProtocolCommandEvent(object0, 0, "#9jh8ac3[$");
      protocolCommandEvent0.getCommand();
      assertFalse(protocolCommandEvent0.isCommand());
      assertEquals(0, protocolCommandEvent0.getReplyCode());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      ProtocolCommandEvent protocolCommandEvent0 = new ProtocolCommandEvent(object0, "FWg]@HN$#Gm&dG3B", "FWg]@HN$#Gm&dG3B");
      protocolCommandEvent0.getCommand();
      assertEquals(0, protocolCommandEvent0.getReplyCode());
      assertTrue(protocolCommandEvent0.isCommand());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ProtocolCommandEvent protocolCommandEvent0 = null;
      try {
        protocolCommandEvent0 = new ProtocolCommandEvent((Object) null, "", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ProtocolCommandEvent protocolCommandEvent0 = null;
      try {
        protocolCommandEvent0 = new ProtocolCommandEvent((Object) null, 0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      ProtocolCommandEvent protocolCommandEvent0 = new ProtocolCommandEvent(object0, "", "");
      boolean boolean0 = protocolCommandEvent0.isReply();
      assertFalse(boolean0);
      assertEquals(0, protocolCommandEvent0.getReplyCode());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      ProtocolCommandEvent protocolCommandEvent0 = new ProtocolCommandEvent(object0, "", "");
      protocolCommandEvent0.getCommand();
      assertEquals(0, protocolCommandEvent0.getReplyCode());
      assertFalse(protocolCommandEvent0.isReply());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      ProtocolCommandEvent protocolCommandEvent0 = new ProtocolCommandEvent(object0, "", "");
      boolean boolean0 = protocolCommandEvent0.isCommand();
      assertEquals(0, protocolCommandEvent0.getReplyCode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = new Object();
      ProtocolCommandEvent protocolCommandEvent0 = new ProtocolCommandEvent(object0, "", "");
      int int0 = protocolCommandEvent0.getReplyCode();
      assertEquals(0, int0);
      assertTrue(protocolCommandEvent0.isCommand());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      ProtocolCommandEvent protocolCommandEvent0 = new ProtocolCommandEvent(object0, "", "");
      protocolCommandEvent0.getMessage();
      assertEquals(0, protocolCommandEvent0.getReplyCode());
      assertTrue(protocolCommandEvent0.isCommand());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object object0 = new Object();
      ProtocolCommandEvent protocolCommandEvent0 = new ProtocolCommandEvent(object0, 0, "#9jh8ac3[$");
      boolean boolean0 = protocolCommandEvent0.isReply();
      assertTrue(boolean0);
      assertEquals(0, protocolCommandEvent0.getReplyCode());
  }
}
