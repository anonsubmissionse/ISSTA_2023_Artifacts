/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 20:32:54 GMT 2022
 */

package org.apache.commons.net.ftp.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.net.ftp.FTPClientConfig;
import org.apache.commons.net.ftp.FTPFile;
import org.apache.commons.net.ftp.parser.MVSFTPEntryParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MVSFTPEntryParser_ESTest extends MVSFTPEntryParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MVSFTPEntryParser mVSFTPEntryParser0 = new MVSFTPEntryParser();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("RJOBNAME");
      mVSFTPEntryParser0.preParse(linkedList0);
      assertFalse(linkedList0.contains("RJOBNAME"));
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MVSFTPEntryParser mVSFTPEntryParser0 = new MVSFTPEntryParser();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("^total d+$");
      mVSFTPEntryParser0.preParse(linkedList0);
      assertFalse(linkedList0.contains("^total d+$"));
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MVSFTPEntryParser mVSFTPEntryParser0 = new MVSFTPEntryParser();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("aName");
      mVSFTPEntryParser0.preParse(linkedList0);
      assertFalse(linkedList0.contains("aName"));
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MVSFTPEntryParser mVSFTPEntryParser0 = new MVSFTPEntryParser();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("GVolume");
      mVSFTPEntryParser0.preParse(linkedList0);
      assertFalse(linkedList0.contains("GVolume"));
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MVSFTPEntryParser mVSFTPEntryParser0 = new MVSFTPEntryParser();
      mVSFTPEntryParser0.setType(30);
      FTPFile fTPFile0 = mVSFTPEntryParser0.parseFTPEntry("PP_J+j)=.d|oj[-uF");
      assertNull(fTPFile0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MVSFTPEntryParser mVSFTPEntryParser0 = new MVSFTPEntryParser();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("JOBNAME");
      linkedList0.add(" %1$tZ");
      mVSFTPEntryParser0.preParse(linkedList0);
      assertFalse(linkedList0.contains("JOBNAME"));
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MVSFTPEntryParser mVSFTPEntryParser0 = new MVSFTPEntryParser();
      FTPClientConfig fTPClientConfig0 = mVSFTPEntryParser0.getDefaultConfiguration();
      assertEquals("yyyy/MM/dd HH:mm", fTPClientConfig0.getDefaultDateFormatStr());
      assertEquals("MVS", fTPClientConfig0.getServerSystemKey());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MVSFTPEntryParser mVSFTPEntryParser0 = new MVSFTPEntryParser();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.push((String) null);
      // Undeclared exception!
      try { 
        mVSFTPEntryParser0.preParse(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.parser.MVSFTPEntryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MVSFTPEntryParser mVSFTPEntryParser0 = new MVSFTPEntryParser();
      mVSFTPEntryParser0.setType(1);
      FTPFile fTPFile0 = mVSFTPEntryParser0.parseFTPEntry("TYPE: L8");
      assertEquals("TYPE:", fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("TYPE: L8", fTPFile0.getRawListing());
      assertNotNull(fTPFile0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MVSFTPEntryParser mVSFTPEntryParser0 = new MVSFTPEntryParser();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("Name");
      mVSFTPEntryParser0.preParse(linkedList0);
      assertFalse(linkedList0.contains("Name"));
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MVSFTPEntryParser mVSFTPEntryParser0 = new MVSFTPEntryParser();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("Volume");
      mVSFTPEntryParser0.preParse(linkedList0);
      assertFalse(linkedList0.contains("Volume"));
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MVSFTPEntryParser mVSFTPEntryParser0 = new MVSFTPEntryParser();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      List<String> list0 = mVSFTPEntryParser0.preParse(linkedList0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MVSFTPEntryParser mVSFTPEntryParser0 = new MVSFTPEntryParser();
      List<String> list0 = mVSFTPEntryParser0.preParse((List<String>) null);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MVSFTPEntryParser mVSFTPEntryParser0 = new MVSFTPEntryParser();
      mVSFTPEntryParser0.setType(4);
      // Undeclared exception!
      try { 
        mVSFTPEntryParser0.parseFTPEntry("");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // No group 4
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MVSFTPEntryParser mVSFTPEntryParser0 = new MVSFTPEntryParser();
      mVSFTPEntryParser0.setRegex("Spool Files", 3);
      mVSFTPEntryParser0.setType(3);
      // Undeclared exception!
      try { 
        mVSFTPEntryParser0.parseFTPEntry("Spool Files");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // No group 3
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MVSFTPEntryParser mVSFTPEntryParser0 = new MVSFTPEntryParser();
      mVSFTPEntryParser0.setRegex("UNIX_LTRIM");
      mVSFTPEntryParser0.setType(1);
      FTPFile fTPFile0 = mVSFTPEntryParser0.parseFTPEntry("");
      assertNull(fTPFile0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MVSFTPEntryParser mVSFTPEntryParser0 = new MVSFTPEntryParser();
      mVSFTPEntryParser0.setType(0);
      // Undeclared exception!
      try { 
        mVSFTPEntryParser0.parseFTPEntry("");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // No group 2
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MVSFTPEntryParser mVSFTPEntryParser0 = new MVSFTPEntryParser();
      mVSFTPEntryParser0.setType(0);
      FTPFile fTPFile0 = mVSFTPEntryParser0.parseFTPEntry("TYPE: L8");
      assertNull(fTPFile0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MVSFTPEntryParser mVSFTPEntryParser0 = new MVSFTPEntryParser();
      mVSFTPEntryParser0.setType(4);
      FTPFile fTPFile0 = mVSFTPEntryParser0.parseFTPEntry("dN6j9WeF5*biL");
      assertNull(fTPFile0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MVSFTPEntryParser mVSFTPEntryParser0 = new MVSFTPEntryParser();
      mVSFTPEntryParser0.setType(3);
      FTPFile fTPFile0 = mVSFTPEntryParser0.parseFTPEntry("NETWARE");
      assertNull(fTPFile0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MVSFTPEntryParser mVSFTPEntryParser0 = new MVSFTPEntryParser();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("total");
      mVSFTPEntryParser0.preParse(linkedList0);
      FTPFile fTPFile0 = mVSFTPEntryParser0.parseFTPEntry("total");
      assertNull(fTPFile0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MVSFTPEntryParser mVSFTPEntryParser0 = new MVSFTPEntryParser();
      mVSFTPEntryParser0.setType(1);
      // Undeclared exception!
      try { 
        mVSFTPEntryParser0.parseFTPEntry("");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // No group 1
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MVSFTPEntryParser mVSFTPEntryParser0 = new MVSFTPEntryParser();
      FTPFile fTPFile0 = mVSFTPEntryParser0.parseFTPEntry(",VFK.455x[O{Y");
      assertNull(fTPFile0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MVSFTPEntryParser mVSFTPEntryParser0 = new MVSFTPEntryParser();
      mVSFTPEntryParser0.setType(0);
      // Undeclared exception!
      try { 
        mVSFTPEntryParser0.parseFTPEntry((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
