/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 21:10:25 GMT 2022
 */

package org.apache.commons.net;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeListenerProxy;
import java.io.PrintWriter;
import org.apache.commons.net.PrintCommandListener;
import org.apache.commons.net.ProtocolCommandListener;
import org.apache.commons.net.ProtocolCommandSupport;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ProtocolCommandSupport_ESTest extends ProtocolCommandSupport_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Object object0 = new Object();
      ProtocolCommandSupport protocolCommandSupport0 = new ProtocolCommandSupport(object0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("/<GfwB");
      PrintCommandListener printCommandListener0 = new PrintCommandListener(mockPrintStream0, true, 't');
      protocolCommandSupport0.addProtocolCommandListener(printCommandListener0);
      int int0 = protocolCommandSupport0.getListenerCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Object object0 = new Object();
      ProtocolCommandSupport protocolCommandSupport0 = new ProtocolCommandSupport(object0);
      PrintCommandListener printCommandListener0 = new PrintCommandListener((PrintWriter) null, true, '2');
      protocolCommandSupport0.addProtocolCommandListener(printCommandListener0);
      // Undeclared exception!
      try { 
        protocolCommandSupport0.fireReplyReceived(1716, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.PrintCommandListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ProtocolCommandSupport protocolCommandSupport0 = new ProtocolCommandSupport((Object) null);
      // Undeclared exception!
      try { 
        protocolCommandSupport0.fireReplyReceived((-1578), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy((String) null, vetoableChangeListener0);
      ProtocolCommandSupport protocolCommandSupport0 = new ProtocolCommandSupport(vetoableChangeListenerProxy0);
      protocolCommandSupport0.addProtocolCommandListener((ProtocolCommandListener) null);
      // Undeclared exception!
      try { 
        protocolCommandSupport0.fireCommandSent("Invalid IOCase name: ", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ProtocolCommandSupport", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ProtocolCommandSupport protocolCommandSupport0 = new ProtocolCommandSupport((Object) null);
      // Undeclared exception!
      try { 
        protocolCommandSupport0.fireCommandSent(":y{O5aRgo", "The wildcard list must not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Object object0 = new Object();
      ProtocolCommandSupport protocolCommandSupport0 = new ProtocolCommandSupport(object0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("/<GfwB");
      PrintCommandListener printCommandListener0 = new PrintCommandListener(mockPrintStream0, true, 't');
      protocolCommandSupport0.addProtocolCommandListener(printCommandListener0);
      protocolCommandSupport0.fireReplyReceived('t', "/<GfwB");
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Object object0 = new Object();
      ProtocolCommandSupport protocolCommandSupport0 = new ProtocolCommandSupport(object0);
      protocolCommandSupport0.fireCommandSent("/<GfwB", "/<GfwB");
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Object object0 = new Object();
      ProtocolCommandSupport protocolCommandSupport0 = new ProtocolCommandSupport(object0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("/<GfwB");
      PrintCommandListener printCommandListener0 = new PrintCommandListener(mockPrintStream0, true, 't');
      protocolCommandSupport0.removeProtocolCommandListener(printCommandListener0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Object object0 = new Object();
      ProtocolCommandSupport protocolCommandSupport0 = new ProtocolCommandSupport(object0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("/<GfwB");
      PrintCommandListener printCommandListener0 = new PrintCommandListener(mockPrintStream0, true, 't');
      protocolCommandSupport0.addProtocolCommandListener(printCommandListener0);
      protocolCommandSupport0.fireCommandSent("/<GfwB", "/<GfwB");
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Object object0 = new Object();
      ProtocolCommandSupport protocolCommandSupport0 = new ProtocolCommandSupport(object0);
      int int0 = protocolCommandSupport0.getListenerCount();
      assertEquals(0, int0);
  }
}
