/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 21:11:41 GMT 2022
 */

package org.apache.commons.net.nntp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.ConcurrentModificationException;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.Vector;
import java.util.function.Consumer;
import org.apache.commons.net.nntp.Article;
import org.apache.commons.net.nntp.ArticleIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ArticleIterator_ESTest extends ArticleIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      ArticleIterator articleIterator0 = new ArticleIterator(set0);
      articleIterator0.next();
      articleIterator0.remove();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      HashSet<String> hashSet0 = new HashSet<String>(set0);
      ArticleIterator articleIterator0 = new ArticleIterator(hashSet0);
      Iterator<Article> iterator0 = articleIterator0.iterator();
      assertSame(articleIterator0, iterator0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      HashSet<String> hashSet0 = new HashSet<String>(set0);
      ArticleIterator articleIterator0 = new ArticleIterator(hashSet0);
      boolean boolean0 = articleIterator0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      ArticleIterator articleIterator0 = new ArticleIterator(set0);
      // Undeclared exception!
      try { 
        articleIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArticleIterator articleIterator0 = new ArticleIterator(linkedList0);
      // Undeclared exception!
      try { 
        articleIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      HashSet<String> hashSet0 = new HashSet<String>(set0);
      ArticleIterator articleIterator0 = new ArticleIterator(hashSet0);
      hashSet0.add("");
      // Undeclared exception!
      try { 
        articleIterator0.next();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      hashSet0.add((String) null);
      ArticleIterator articleIterator0 = new ArticleIterator(hashSet0);
      // Undeclared exception!
      try { 
        articleIterator0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.nntp.NNTPClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArticleIterator articleIterator0 = null;
      try {
        articleIterator0 = new ArticleIterator((Iterable<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.nntp.ArticleIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      ArrayList<String> arrayList0 = new ArrayList<String>(vector0);
      arrayList0.add("y6_");
      ArticleIterator articleIterator0 = new ArticleIterator(arrayList0);
      Consumer<Article> consumer0 = (Consumer<Article>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      articleIterator0.forEach(consumer0);
      arrayList0.add("The wildcard array must not be null");
      // Undeclared exception!
      try { 
        articleIterator0.remove();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      ArrayList<String> arrayList0 = new ArrayList<String>(vector0);
      ArticleIterator articleIterator0 = new ArticleIterator(arrayList0);
      boolean boolean0 = articleIterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      ArrayList<String> arrayList0 = new ArrayList<String>(vector0);
      ArticleIterator articleIterator0 = new ArticleIterator(arrayList0);
      // Undeclared exception!
      try { 
        articleIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }
}
