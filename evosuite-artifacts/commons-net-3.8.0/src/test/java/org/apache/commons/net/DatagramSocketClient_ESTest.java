/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 21:10:14 GMT 2022
 */

package org.apache.commons.net;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.net.InetAddress;
import java.nio.charset.Charset;
import org.apache.commons.net.DatagramSocketFactory;
import org.apache.commons.net.DefaultDatagramSocketFactory;
import org.apache.commons.net.chargen.CharGenUDPClient;
import org.apache.commons.net.discard.DiscardUDPClient;
import org.apache.commons.net.echo.EchoUDPClient;
import org.apache.commons.net.ntp.NTPUDPClient;
import org.apache.commons.net.tftp.TFTPClient;
import org.apache.commons.net.time.TimeUDPClient;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DatagramSocketClient_ESTest extends DatagramSocketClient_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DiscardUDPClient discardUDPClient0 = new DiscardUDPClient();
      DefaultDatagramSocketFactory defaultDatagramSocketFactory0 = new DefaultDatagramSocketFactory();
      discardUDPClient0.setDatagramSocketFactory(defaultDatagramSocketFactory0);
      discardUDPClient0.setDatagramSocketFactory((DatagramSocketFactory) null);
      assertEquals(0, discardUDPClient0.getDefaultTimeout());
      assertFalse(discardUDPClient0.isOpen());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharGenUDPClient charGenUDPClient0 = new CharGenUDPClient();
      assertFalse(charGenUDPClient0.isOpen());
      
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      charGenUDPClient0.open(19, inetAddress0);
      charGenUDPClient0.setSoTimeout(15);
      assertTrue(charGenUDPClient0.isOpen());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TFTPClient tFTPClient0 = new TFTPClient();
      assertFalse(tFTPClient0.isOpen());
      
      tFTPClient0.open(5);
      boolean boolean0 = tFTPClient0.isOpen();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharGenUDPClient charGenUDPClient0 = new CharGenUDPClient();
      assertFalse(charGenUDPClient0.isOpen());
      
      charGenUDPClient0.open(3443);
      charGenUDPClient0.getSoTimeout();
      assertTrue(charGenUDPClient0.isOpen());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EchoUDPClient echoUDPClient0 = new EchoUDPClient();
      assertFalse(echoUDPClient0.isOpen());
      
      echoUDPClient0.open(9);
      int int0 = echoUDPClient0.getLocalPort();
      assertTrue(echoUDPClient0.isOpen());
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EchoUDPClient echoUDPClient0 = new EchoUDPClient();
      echoUDPClient0.setDefaultTimeout((-1));
      int int0 = echoUDPClient0.getDefaultTimeout();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EchoUDPClient echoUDPClient0 = new EchoUDPClient();
      echoUDPClient0.setCharset((Charset) null);
      echoUDPClient0.getCharset();
      assertEquals(0, echoUDPClient0.getDefaultTimeout());
      assertFalse(echoUDPClient0.isOpen());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeUDPClient timeUDPClient0 = new TimeUDPClient();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      // Undeclared exception!
      try { 
        timeUDPClient0.open((-1891), inetAddress0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1891
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DiscardUDPClient discardUDPClient0 = new DiscardUDPClient();
      // Undeclared exception!
      try { 
        discardUDPClient0.getLocalAddress();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.DatagramSocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EchoUDPClient echoUDPClient0 = new EchoUDPClient();
      boolean boolean0 = echoUDPClient0.isOpen();
      assertFalse(boolean0);
      assertEquals(0, echoUDPClient0.getDefaultTimeout());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EchoUDPClient echoUDPClient0 = new EchoUDPClient();
      echoUDPClient0.open(9);
      assertTrue(echoUDPClient0.isOpen());
      
      echoUDPClient0.close();
      assertEquals(0, echoUDPClient0.getDefaultTimeout());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EchoUDPClient echoUDPClient0 = new EchoUDPClient();
      echoUDPClient0.close();
      assertFalse(echoUDPClient0.isOpen());
      assertEquals(0, echoUDPClient0.getDefaultTimeout());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EchoUDPClient echoUDPClient0 = new EchoUDPClient();
      // Undeclared exception!
      try { 
        echoUDPClient0.getLocalPort();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.DatagramSocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TFTPClient tFTPClient0 = new TFTPClient();
      int int0 = tFTPClient0.getDefaultTimeout();
      assertEquals(5000, int0);
      assertFalse(tFTPClient0.isOpen());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharGenUDPClient charGenUDPClient0 = new CharGenUDPClient();
      // Undeclared exception!
      try { 
        charGenUDPClient0.getSoTimeout();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.DatagramSocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DiscardUDPClient discardUDPClient0 = new DiscardUDPClient();
      discardUDPClient0.setCharset((Charset) null);
      // Undeclared exception!
      try { 
        discardUDPClient0.getCharsetName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.DatagramSocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EchoUDPClient echoUDPClient0 = new EchoUDPClient();
      int int0 = echoUDPClient0.getDefaultTimeout();
      assertEquals(0, int0);
      assertFalse(echoUDPClient0.isOpen());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EchoUDPClient echoUDPClient0 = new EchoUDPClient();
      echoUDPClient0.open(9);
      InetAddress inetAddress0 = echoUDPClient0.getLocalAddress();
      NTPUDPClient nTPUDPClient0 = new NTPUDPClient();
      try { 
        nTPUDPClient0.getTime(inetAddress0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IO exception
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoDatagramSocketImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DiscardUDPClient discardUDPClient0 = new DiscardUDPClient();
      assertFalse(discardUDPClient0.isOpen());
      
      discardUDPClient0.open();
      assertTrue(discardUDPClient0.isOpen());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DiscardUDPClient discardUDPClient0 = new DiscardUDPClient();
      discardUDPClient0.getCharsetName();
      assertFalse(discardUDPClient0.isOpen());
      assertEquals(0, discardUDPClient0.getDefaultTimeout());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EchoUDPClient echoUDPClient0 = new EchoUDPClient();
      // Undeclared exception!
      try { 
        echoUDPClient0.open((-1357));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1357
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharGenUDPClient charGenUDPClient0 = new CharGenUDPClient();
      // Undeclared exception!
      try { 
        charGenUDPClient0.setSoTimeout(15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.DatagramSocketClient", e);
      }
  }
}
