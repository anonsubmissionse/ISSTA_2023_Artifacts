/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 20:33:19 GMT 2022
 */

package org.apache.commons.net.ftp.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.net.ftp.FTPClientConfig;
import org.apache.commons.net.ftp.FTPFileEntryParser;
import org.apache.commons.net.ftp.parser.DefaultFTPFileEntryParserFactory;
import org.apache.commons.net.ftp.parser.MVSFTPEntryParser;
import org.apache.commons.net.ftp.parser.MacOsPeterFTPEntryParser;
import org.apache.commons.net.ftp.parser.NetwareFTPEntryParser;
import org.apache.commons.net.ftp.parser.OS2FTPEntryParser;
import org.apache.commons.net.ftp.parser.UnixFTPEntryParser;
import org.apache.commons.net.ftp.parser.VMSVersioningFTPEntryParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultFTPFileEntryParserFactory_ESTest extends DefaultFTPFileEntryParserFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultFTPFileEntryParserFactory defaultFTPFileEntryParserFactory0 = new DefaultFTPFileEntryParserFactory();
      VMSVersioningFTPEntryParser vMSVersioningFTPEntryParser0 = (VMSVersioningFTPEntryParser)defaultFTPFileEntryParserFactory0.createFileEntryParser("[wQ!`vms7}Lzg[(");
      assertEquals(0, vMSVersioningFTPEntryParser0.getGroupCnt());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultFTPFileEntryParserFactory defaultFTPFileEntryParserFactory0 = new DefaultFTPFileEntryParserFactory();
      // Undeclared exception!
      try { 
        defaultFTPFileEntryParserFactory0.createFileEntryParser("org.apache.commons.net.ftp.systemType.default");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown parser type: org.apache.commons.net.ftp.systemType.default
         //
         verifyException("org.apache.commons.net.ftp.parser.DefaultFTPFileEntryParserFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultFTPFileEntryParserFactory defaultFTPFileEntryParserFactory0 = new DefaultFTPFileEntryParserFactory();
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("org.apache.commons.net.ftp.parser.DefaultFTPFileEntryParserFactory");
      try { 
        defaultFTPFileEntryParserFactory0.createFileEntryParser(fTPClientConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.apache.commons.net.ftp.parser.DefaultFTPFileEntryParserFactory does not implement the interface org.apache.commons.net.ftp.FTPFileEntryParser.
         //
         verifyException("org.apache.commons.net.ftp.parser.DefaultFTPFileEntryParserFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultFTPFileEntryParserFactory defaultFTPFileEntryParserFactory0 = new DefaultFTPFileEntryParserFactory();
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig((String) null, (String) null, "^Rd^SJ", ":\"sd6eK^bf6*X&*", "^Rd^SJ", "");
      // Undeclared exception!
      try { 
        defaultFTPFileEntryParserFactory0.createFileEntryParser(fTPClientConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultFTPFileEntryParserFactory defaultFTPFileEntryParserFactory0 = new DefaultFTPFileEntryParserFactory();
      FTPClientConfig fTPClientConfig0 = UnixFTPEntryParser.NUMERIC_DATE_CONFIG;
      fTPClientConfig0.setDefaultDateFormatStr("(p{javaJavaIdentifierStart}(p{javaJavaIdentifierPart})*.)+p{javaJavaIdentifierStart}(p{javaJavaIdentifierPart})*");
      // Undeclared exception!
      try { 
        defaultFTPFileEntryParserFactory0.createFileEntryParser(fTPClientConfig0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'p'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("WINDOWS", "WINDOWS", "WINDOWS", "WINDOWS", "WINDOWS", "WINDOWS");
      DefaultFTPFileEntryParserFactory defaultFTPFileEntryParserFactory0 = new DefaultFTPFileEntryParserFactory();
      // Undeclared exception!
      try { 
        defaultFTPFileEntryParserFactory0.createFileEntryParser(fTPClientConfig0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // expecting a pipe-delimited string containing 12 tokens
         //
         verifyException("org.apache.commons.net.ftp.FTPClientConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultFTPFileEntryParserFactory defaultFTPFileEntryParserFactory0 = new DefaultFTPFileEntryParserFactory();
      UnixFTPEntryParser unixFTPEntryParser0 = (UnixFTPEntryParser)defaultFTPFileEntryParserFactory0.createFileEntryParser("TYPE: L8");
      assertEquals(0, unixFTPEntryParser0.getGroupCnt());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultFTPFileEntryParserFactory defaultFTPFileEntryParserFactory0 = new DefaultFTPFileEntryParserFactory();
      MacOsPeterFTPEntryParser macOsPeterFTPEntryParser0 = (MacOsPeterFTPEntryParser)defaultFTPFileEntryParserFactory0.createFileEntryParser("MACOS PETER");
      assertEquals(0, macOsPeterFTPEntryParser0.getGroupCnt());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultFTPFileEntryParserFactory defaultFTPFileEntryParserFactory0 = new DefaultFTPFileEntryParserFactory();
      NetwareFTPEntryParser netwareFTPEntryParser0 = (NetwareFTPEntryParser)defaultFTPFileEntryParserFactory0.createFileEntryParser("NETWARE");
      assertEquals(0, netwareFTPEntryParser0.getGroupCnt());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultFTPFileEntryParserFactory defaultFTPFileEntryParserFactory0 = new DefaultFTPFileEntryParserFactory();
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("OS/400", "NETWARE", "OS/400", "NETWARE", "NETWARE", "NETWARE", false, false);
      // Undeclared exception!
      try { 
        defaultFTPFileEntryParserFactory0.createFileEntryParser(fTPClientConfig0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // expecting a pipe-delimited string containing 12 tokens
         //
         verifyException("org.apache.commons.net.ftp.FTPClientConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultFTPFileEntryParserFactory defaultFTPFileEntryParserFactory0 = new DefaultFTPFileEntryParserFactory();
      OS2FTPEntryParser oS2FTPEntryParser0 = (OS2FTPEntryParser)defaultFTPFileEntryParserFactory0.createFileEntryParser("OS/2");
      assertEquals(0, oS2FTPEntryParser0.getGroupCnt());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultFTPFileEntryParserFactory defaultFTPFileEntryParserFactory0 = new DefaultFTPFileEntryParserFactory();
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("pWINDOWS");
      FTPFileEntryParser fTPFileEntryParser0 = defaultFTPFileEntryParserFactory0.createFileEntryParser(fTPClientConfig0);
      assertNotNull(fTPFileEntryParser0);
      assertEquals("MM-dd-yy hh:mma", fTPClientConfig0.getDefaultDateFormatStr());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultFTPFileEntryParserFactory defaultFTPFileEntryParserFactory0 = new DefaultFTPFileEntryParserFactory();
      VMSVersioningFTPEntryParser vMSVersioningFTPEntryParser0 = (VMSVersioningFTPEntryParser)defaultFTPFileEntryParserFactory0.createFileEntryParser("VMS");
      assertEquals(0, vMSVersioningFTPEntryParser0.getGroupCnt());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultFTPFileEntryParserFactory defaultFTPFileEntryParserFactory0 = new DefaultFTPFileEntryParserFactory();
      UnixFTPEntryParser unixFTPEntryParser0 = (UnixFTPEntryParser)defaultFTPFileEntryParserFactory0.createFileEntryParser("UNIX_LTRIM");
      assertEquals(0, unixFTPEntryParser0.getGroupCnt());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultFTPFileEntryParserFactory defaultFTPFileEntryParserFactory0 = new DefaultFTPFileEntryParserFactory();
      NetwareFTPEntryParser netwareFTPEntryParser0 = (NetwareFTPEntryParser)defaultFTPFileEntryParserFactory0.createFileEntryParser("org.apache.commons.net.ftp.parser.NetwareFTPEntryParser");
      assertEquals(0, netwareFTPEntryParser0.getGroupCnt());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultFTPFileEntryParserFactory defaultFTPFileEntryParserFactory0 = new DefaultFTPFileEntryParserFactory();
      // Undeclared exception!
      try { 
        defaultFTPFileEntryParserFactory0.createFileEntryParser("org.apache.commons.io.filefilter.FileFileFilter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error initializing parser
         //
         verifyException("org.apache.commons.net.ftp.parser.DefaultFTPFileEntryParserFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultFTPFileEntryParserFactory defaultFTPFileEntryParserFactory0 = new DefaultFTPFileEntryParserFactory();
      // Undeclared exception!
      try { 
        defaultFTPFileEntryParserFactory0.createFileEntryParser((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Parser key cannot be null
         //
         verifyException("org.apache.commons.net.ftp.parser.DefaultFTPFileEntryParserFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultFTPFileEntryParserFactory defaultFTPFileEntryParserFactory0 = new DefaultFTPFileEntryParserFactory();
      FTPFileEntryParser fTPFileEntryParser0 = defaultFTPFileEntryParserFactory0.createOS400FTPEntryParser();
      assertNotNull(fTPFileEntryParser0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultFTPFileEntryParserFactory defaultFTPFileEntryParserFactory0 = new DefaultFTPFileEntryParserFactory();
      MVSFTPEntryParser mVSFTPEntryParser0 = (MVSFTPEntryParser)defaultFTPFileEntryParserFactory0.createMVSEntryParser();
      FTPClientConfig fTPClientConfig0 = mVSFTPEntryParser0.getDefaultConfiguration();
      MVSFTPEntryParser mVSFTPEntryParser1 = (MVSFTPEntryParser)defaultFTPFileEntryParserFactory0.createFileEntryParser(fTPClientConfig0);
      assertNotSame(mVSFTPEntryParser1, mVSFTPEntryParser0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultFTPFileEntryParserFactory defaultFTPFileEntryParserFactory0 = new DefaultFTPFileEntryParserFactory();
      VMSVersioningFTPEntryParser vMSVersioningFTPEntryParser0 = (VMSVersioningFTPEntryParser)defaultFTPFileEntryParserFactory0.createVMSVersioningFTPEntryParser();
      assertEquals(0, vMSVersioningFTPEntryParser0.getGroupCnt());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultFTPFileEntryParserFactory defaultFTPFileEntryParserFactory0 = new DefaultFTPFileEntryParserFactory();
      FTPFileEntryParser fTPFileEntryParser0 = defaultFTPFileEntryParserFactory0.createNTFTPEntryParser();
      assertNotNull(fTPFileEntryParser0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultFTPFileEntryParserFactory defaultFTPFileEntryParserFactory0 = new DefaultFTPFileEntryParserFactory();
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("LHGGAS/400");
      FTPFileEntryParser fTPFileEntryParser0 = defaultFTPFileEntryParserFactory0.createFileEntryParser(fTPClientConfig0);
      assertEquals("yy/MM/dd HH:mm:ss", fTPClientConfig0.getDefaultDateFormatStr());
      assertNotNull(fTPFileEntryParser0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultFTPFileEntryParserFactory defaultFTPFileEntryParserFactory0 = new DefaultFTPFileEntryParserFactory();
      UnixFTPEntryParser unixFTPEntryParser0 = (UnixFTPEntryParser)defaultFTPFileEntryParserFactory0.createUnixFTPEntryParser();
      assertEquals(0, unixFTPEntryParser0.getGroupCnt());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultFTPFileEntryParserFactory defaultFTPFileEntryParserFactory0 = new DefaultFTPFileEntryParserFactory();
      NetwareFTPEntryParser netwareFTPEntryParser0 = (NetwareFTPEntryParser)defaultFTPFileEntryParserFactory0.createNetwareFTPEntryParser();
      assertEquals(0, netwareFTPEntryParser0.getGroupCnt());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultFTPFileEntryParserFactory defaultFTPFileEntryParserFactory0 = new DefaultFTPFileEntryParserFactory();
      OS2FTPEntryParser oS2FTPEntryParser0 = (OS2FTPEntryParser)defaultFTPFileEntryParserFactory0.createOS2FTPEntryParser();
      assertEquals(0, oS2FTPEntryParser0.getGroupCnt());
  }
}
