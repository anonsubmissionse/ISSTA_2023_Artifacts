/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 21:13:33 GMT 2022
 */

package org.apache.commons.net.tftp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.net.InetAddress;
import org.apache.commons.net.tftp.TFTP;
import org.apache.commons.net.tftp.TFTPDataPacket;
import org.apache.commons.net.tftp.TFTPErrorPacket;
import org.apache.commons.net.tftp.TFTPReadRequestPacket;
import org.apache.commons.net.tftp.TFTPWriteRequestPacket;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TFTP_ESTest extends TFTP_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TFTP tFTP0 = new TFTP();
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket((InetAddress) null, 5000, 0, "");
      tFTP0.trace("", tFTPErrorPacket0);
      assertEquals(5000, tFTP0.getDefaultTimeout());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TFTP tFTP0 = new TFTP();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      tFTP0.open(0, inetAddress0);
      byte[] byteArray0 = new byte[5];
      TFTPDataPacket tFTPDataPacket0 = new TFTPDataPacket(inetAddress0, 1, 5000, byteArray0, 0, (byte)0);
      tFTP0.send(tFTPDataPacket0);
      assertEquals(5000, tFTP0.getDefaultTimeout());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TFTP tFTP0 = new TFTP();
      tFTP0.beginBufferedOps();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      tFTP0.open(0, inetAddress0);
      byte[] byteArray0 = new byte[5];
      TFTPDataPacket tFTPDataPacket0 = new TFTPDataPacket(inetAddress0, 1, 5000, byteArray0, 0, (byte)0);
      tFTP0.bufferedSend(tFTPDataPacket0);
      assertEquals(5000, tFTP0.getDefaultTimeout());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TFTP tFTP0 = new TFTP();
      InetAddress inetAddress0 = MockInetAddress.getByName("}knU:I?pF` Heu");
      byte[] byteArray0 = new byte[6];
      TFTPDataPacket tFTPDataPacket0 = new TFTPDataPacket(inetAddress0, 0, (-92), byteArray0, 0, (-1297));
      // Undeclared exception!
      try { 
        tFTP0.send(tFTPDataPacket0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.tftp.TFTPDataPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TFTP tFTP0 = new TFTP();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      byte[] byteArray0 = new byte[2];
      TFTPDataPacket tFTPDataPacket0 = new TFTPDataPacket(inetAddress0, (-3349), 1309, byteArray0, 0, 1);
      // Undeclared exception!
      try { 
        tFTP0.send(tFTPDataPacket0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Port out of range:-3349
         //
         verifyException("java.net.DatagramPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TFTP tFTP0 = new TFTP();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      byte[] byteArray0 = new byte[2];
      TFTPDataPacket tFTPDataPacket0 = new TFTPDataPacket(inetAddress0, 1, 5000, byteArray0, 5000, (byte)1);
      // Undeclared exception!
      try { 
        tFTP0.send(tFTPDataPacket0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EvoSuiteLocalAddress evoSuiteLocalAddress0 = new EvoSuiteLocalAddress("192.168.1.42", 40000);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("Bad error packet. No message.", 512);
      byte[] byteArray0 = new byte[5];
      NetworkHandling.sendUdpPacket(evoSuiteLocalAddress0, evoSuiteRemoteAddress0, byteArray0);
      TFTP tFTP0 = new TFTP();
      tFTP0.open();
      try { 
        tFTP0.receive();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Bad packet.  Invalid TFTP operator code.
         //
         verifyException("org.apache.commons.net.tftp.TFTPPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TFTP tFTP0 = new TFTP();
      tFTP0.open();
      try { 
        tFTP0.receive();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IO exception
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoDatagramSocketImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        TFTP.getModeName(7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.net.tftp.TFTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TFTP tFTP0 = new TFTP();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      tFTP0.open(0, inetAddress0);
      try { 
        tFTP0.discardPackets();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IO exception
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoDatagramSocketImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TFTP tFTP0 = new TFTP();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      TFTPReadRequestPacket tFTPReadRequestPacket0 = new TFTPReadRequestPacket(inetAddress0, 1, "<", 1457);
      // Undeclared exception!
      try { 
        tFTP0.bufferedSend(tFTPReadRequestPacket0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1457
         //
         verifyException("org.apache.commons.net.tftp.TFTPRequestPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TFTP tFTP0 = new TFTP();
      tFTP0.beginBufferedOps();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      tFTP0.open(0, inetAddress0);
      byte[] byteArray0 = new byte[5];
      EvoSuiteLocalAddress evoSuiteLocalAddress0 = new EvoSuiteLocalAddress("127.0.0.1", 40000);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("192.168.1.42", 1);
      NetworkHandling.sendUdpPacket(evoSuiteLocalAddress0, evoSuiteRemoteAddress0, byteArray0);
      try { 
        tFTP0.bufferedReceive();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Bad packet.  Invalid TFTP operator code.
         //
         verifyException("org.apache.commons.net.tftp.TFTPPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TFTP tFTP0 = new TFTP();
      // Undeclared exception!
      try { 
        tFTP0.receive();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.tftp.TFTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = TFTP.getModeName(0);
      assertEquals("netascii", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TFTP tFTP0 = new TFTP();
      tFTP0.endBufferedOps();
      assertEquals(5000, tFTP0.getDefaultTimeout());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TFTP tFTP0 = new TFTP();
      // Undeclared exception!
      try { 
        tFTP0.discardPackets();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.DatagramSocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TFTP tFTP0 = new TFTP();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      byte[] byteArray0 = new byte[13];
      TFTPDataPacket tFTPDataPacket0 = new TFTPDataPacket(inetAddress0, 1, 5000, byteArray0, 0, (byte)0);
      // Undeclared exception!
      try { 
        tFTP0.send(tFTPDataPacket0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.tftp.TFTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TFTP tFTP0 = new TFTP();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      TFTPWriteRequestPacket tFTPWriteRequestPacket0 = new TFTPWriteRequestPacket(inetAddress0, 460, (String) null, (-1257));
      // Undeclared exception!
      try { 
        tFTP0.bufferedSend(tFTPWriteRequestPacket0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.tftp.TFTPRequestPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TFTP tFTP0 = new TFTP();
      tFTP0.beginBufferedOps();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      tFTP0.open(0, inetAddress0);
      try { 
        tFTP0.bufferedReceive();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IO exception
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoDatagramSocketImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TFTP tFTP0 = new TFTP();
      // Undeclared exception!
      try { 
        tFTP0.bufferedReceive();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.tftp.TFTP", e);
      }
  }
}
