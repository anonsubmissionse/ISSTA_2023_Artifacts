/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 20:52:01 GMT 2022
 */

package org.apache.commons.net.ftp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.SequenceInputStream;
import java.io.StringWriter;
import java.net.InetAddress;
import java.util.Enumeration;
import org.apache.commons.net.ftp.FTPClient;
import org.apache.commons.net.ftp.FTPClientConfig;
import org.apache.commons.net.ftp.FTPCmd;
import org.apache.commons.net.ftp.FTPFileFilter;
import org.apache.commons.net.ftp.parser.FTPFileEntryParserFactory;
import org.apache.commons.net.io.CopyStreamListener;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FTPClient_ESTest extends FTPClient_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      assertEquals(0L, fTPClient0.getRestartOffset());
      
      fTPClient0.setRestartOffset(0L);
      assertFalse(fTPClient0.getListHiddenFiles());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertEquals(1000, fTPClient0.getControlKeepAliveReplyTimeout());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertFalse(fTPClient0.getAutodetectUTF8());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0._parseExtendedPassiveModeReply("pcyj'&)q]QR#");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not parse extended passive host information.
         // Server Reply: pcyj'&
         //
         verifyException("org.apache.commons.net.ftp.FTPClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      FTPClient.NatServerResolverImpl fTPClient_NatServerResolverImpl0 = new FTPClient.NatServerResolverImpl(fTPClient0);
      fTPClient_NatServerResolverImpl0.resolve("");
      assertFalse(fTPClient0.getListHiddenFiles());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertFalse(fTPClient0.getAutodetectUTF8());
      assertEquals(1000, fTPClient0.getControlKeepAliveReplyTimeout());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = FTPClient.parsePathname("USER");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      String string0 = fTPClient0.getListArguments((String) null);
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertNull(string0);
      assertEquals(1000, fTPClient0.getControlKeepAliveReplyTimeout());
      assertFalse(fTPClient0.getAutodetectUTF8());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      String string0 = fTPClient0.getListArguments("");
      assertEquals(1000, fTPClient0.getControlKeepAliveReplyTimeout());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertEquals("", string0);
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertFalse(fTPClient0.getAutodetectUTF8());
      assertNotNull(string0);
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.setFileType(229, 2526);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.setFileType(0, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.setFileType((-61));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.setFileType(12);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.setFileTransferMode(119);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.setFileTransferMode(2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.setFileStructure(1411);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.setFileStructure(3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      StringWriter stringWriter0 = new StringWriter(5);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
      fTPClient0._controlOutput_ = bufferedWriter0;
      // Undeclared exception!
      try { 
        fTPClient0.sendSiteCommand("e.~+Ec& *Wj9WX-]$m5");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.rename("CHANGE_WORKING_DIRECTORY", "(P*1^]HP3<LmWv+WB8^");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.reinitialize();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.printWorkingDirectory();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
      try { 
        FTPClient.parsePathname("\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      // Undeclared exception!
      try { 
        FTPClient.parsePathname((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTPClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.mlistFile("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.mdtmFile("org.apache.commons.net.ftp.systemType");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.mdtmCalendar("da");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.login("%654", "org.apache.commons.net.ftp.systemType.default", "%654");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.login((String) null, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.listNames("T#K`5`.9*Mm");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      MockFileWriter mockFileWriter0 = new MockFileWriter("k", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, false);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
      fTPClient0._controlOutput_ = bufferedWriter0;
      // Undeclared exception!
      try { 
        fTPClient0.listHelp("SMNT");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.listHelp("u6!");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.listHelp();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.initiateMListParsing((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setParserFactory((FTPFileEntryParserFactory) null);
      // Undeclared exception!
      try { 
        fTPClient0.initiateListParsing(" %1$tY-%1$tm-%1$td", " %1$tY-%1$tm-%1$td");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTPClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.initiateListParsing((String) null, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.hasFeature((FTPCmd) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTPClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.hasFeature("", "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.hasFeature("vUY|Q'X1Mh");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.getStatus(";6~Q");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.getStatus();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.getSize("2hat0O");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.getModificationTime((String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.featureValues("-r{|\"H]i&asz{>");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.featureValue("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      MockFileWriter mockFileWriter0 = new MockFileWriter("\r\n", true);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);
      fTPClient0._controlOutput_ = bufferedWriter0;
      // Undeclared exception!
      try { 
        fTPClient0.enterRemotePassiveMode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.enterRemotePassiveMode();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.enterRemoteActiveMode((InetAddress) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      InetAddress inetAddress0 = InetAddress.getLoopbackAddress();
      try { 
        fTPClient0.enterRemoteActiveMode(inetAddress0, (-2032));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.doCommandAsStrings("8:1S^-43!j33l", "-a ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.createParser((String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0._storeFileStream("P5uz>F:}Rrqz1/5%!", "|+l3r^P* `pv=Sq-.(s");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        fTPClient0._storeFile("Invalid server reply (MLST): '", "", sequenceInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0._retrieveFileStream("=A/{p~", "=A/{p~");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      File file0 = MockFile.createTempFile("[Replacing PASV mode reply address ", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      // Undeclared exception!
      try { 
        fTPClient0._retrieveFile("UTF8", "UTF8", mockFileOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0._parsePassiveModeReply((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0._parseExtendedPassiveModeReply("\"W Br(");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0._parseExtendedPassiveModeReply((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTPClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      FTPCmd fTPCmd0 = FTPCmd.PORT;
      // Undeclared exception!
      try { 
        fTPClient0._openDataConnection_(fTPCmd0, ">w,;^8e");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0._openDataConnection_(1389, ":v tNLiwwXXG/");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1389
         //
         verifyException("org.apache.commons.net.ftp.FTPCommand", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      PipedReader pipedReader0 = new PipedReader();
      // Undeclared exception!
      try { 
        fTPClient0._connectAction_(pipedReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.getSystemType();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.listDirectories("~GY~2[~oU29bt9u");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      FTPFileFilter fTPFileFilter0 = mock(FTPFileFilter.class, new ViolatedAssumptionAnswer());
      try { 
        fTPClient0.listFiles("6!|?f#kuuoAXL4=#", fTPFileFilter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.initiateListParsing(" %1$tY-%1$tm-%1$td", " %1$tY-%1$tm-%1$td");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown parser type:  %1$tY-%1$tm-%1$td
         //
         verifyException("org.apache.commons.net.ftp.parser.DefaultFTPFileEntryParserFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.initiateListParsing("V8b-hsn");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.listFiles("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.getListHiddenFiles();
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertFalse(fTPClient0.getAutodetectUTF8());
      assertEquals(1000, fTPClient0.getControlKeepAliveReplyTimeout());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setRestartOffset(9);
      assertEquals(9L, fTPClient0.getRestartOffset());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setRestartOffset((-5141L));
      assertFalse(fTPClient0.getListHiddenFiles());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertEquals(1000, fTPClient0.getControlKeepAliveReplyTimeout());
      assertFalse(fTPClient0.getAutodetectUTF8());
      assertEquals(0L, fTPClient0.getRestartOffset());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setPassiveNatWorkaround(true);
      assertFalse(fTPClient0.getAutodetectUTF8());
      assertEquals(1000, fTPClient0.getControlKeepAliveReplyTimeout());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setPassiveNatWorkaround(false);
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertEquals(1000, fTPClient0.getControlKeepAliveReplyTimeout());
      assertFalse(fTPClient0.getAutodetectUTF8());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertFalse(fTPClient0.getListHiddenFiles());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.remoteStoreUnique("\"apache.commons.net.ftp.systemType");
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertFalse(fTPClient0.getAutodetectUTF8());
      assertEquals(1000, fTPClient0.getControlKeepAliveReplyTimeout());
      assertFalse(boolean0);
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.remoteStoreUnique();
      assertEquals(1000, fTPClient0.getControlKeepAliveReplyTimeout());
      assertFalse(boolean0);
      assertEquals((-1), fTPClient0.getPassivePort());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertFalse(fTPClient0.getAutodetectUTF8());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.remoteStore((String) null);
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertFalse(fTPClient0.getAutodetectUTF8());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertFalse(boolean0);
      assertEquals(1000, fTPClient0.getControlKeepAliveReplyTimeout());
      assertFalse(fTPClient0.getListHiddenFiles());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.remoteRetrieve("org.apache.commons.net.ftp.systemType");
      assertEquals(1000, fTPClient0.getControlKeepAliveReplyTimeout());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertFalse(boolean0);
      assertFalse(fTPClient0.getAutodetectUTF8());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      assertEquals(0, fTPClient0.getDataConnectionMode());
      
      boolean boolean0 = fTPClient0.remoteAppend("org.apache.commons.net.ftp.systemType.default");
      assertFalse(fTPClient0.getAutodetectUTF8());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertFalse(boolean0);
      assertEquals(1000, fTPClient0.getControlKeepAliveReplyTimeout());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.getSystemName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.createParser("org.apache.commons.net.ftp.systemType");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown parser type: org.apache.commons.net.ftp.systemType
         //
         verifyException("org.apache.commons.net.ftp.parser.DefaultFTPFileEntryParserFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0._parsePassiveModeReply("JOBNAME");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not parse passive host information.
         // Server Reply: JOBNAME
         //
         verifyException("org.apache.commons.net.ftp.FTPClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0._parseExtendedPassiveModeReply("Zpcsyj'&)qQR#");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not parse extended passive host information.
         // Server Reply: Zpcsyj'&
         //
         verifyException("org.apache.commons.net.ftp.FTPClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = FTPClient.parsePathname("ISO-8859-1");
      assertEquals("8859-1", string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      FTPClient.NatServerResolverImpl fTPClient_NatServerResolverImpl0 = new FTPClient.NatServerResolverImpl(fTPClient0);
      fTPClient_NatServerResolverImpl0.resolve("\"apache.commons.net.ftp.systemType");
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertEquals(1000, fTPClient0.getControlKeepAliveReplyTimeout());
      assertFalse(fTPClient0.getAutodetectUTF8());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertEquals(0, fTPClient0.getDataConnectionMode());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.logout();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      fTPClient0.setPassiveLocalIPAddress(inetAddress0);
      assertFalse(fTPClient0.getAutodetectUTF8());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertEquals(1000, fTPClient0.getControlKeepAliveReplyTimeout());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertEquals(0, fTPClient0.getDataConnectionMode());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getControlKeepAliveReplyTimeout();
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertFalse(fTPClient0.getAutodetectUTF8());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertEquals(1000, int0);
      assertEquals((-1), fTPClient0.getPassivePort());
      assertEquals(0, fTPClient0.getDataConnectionMode());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertEquals(0L, fTPClient0.getRestartOffset());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      assertEquals(1000, fTPClient0.getControlKeepAliveReplyTimeout());
      
      fTPClient0.setControlKeepAliveReplyTimeout(0);
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setActiveExternalIPAddress(" %1$tY-%1$tm-%1$td");
      assertEquals(0, fTPClient0.getDataConnectionMode());
      assertEquals(1000, fTPClient0.getControlKeepAliveReplyTimeout());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertFalse(fTPClient0.getAutodetectUTF8());
      assertEquals(0L, fTPClient0.getRestartOffset());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.restart((-404L));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.isUseEPSVwithIPv4();
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertFalse(boolean0);
      assertEquals(1000, fTPClient0.getControlKeepAliveReplyTimeout());
      assertFalse(fTPClient0.getAutodetectUTF8());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertEquals(0, fTPClient0.getDataConnectionMode());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setCopyStreamListener((CopyStreamListener) null);
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertFalse(fTPClient0.getAutodetectUTF8());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertEquals(1000, fTPClient0.getControlKeepAliveReplyTimeout());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertEquals(0, fTPClient0.getDataConnectionMode());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      FTPCmd fTPCmd0 = FTPCmd.PASS;
      try { 
        fTPClient0.hasFeature(fTPCmd0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.isRemoteVerificationEnabled();
      assertFalse(fTPClient0.getAutodetectUTF8());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertTrue(boolean0);
      assertFalse(fTPClient0.getListHiddenFiles());
      assertEquals(1000, fTPClient0.getControlKeepAliveReplyTimeout());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertEquals(0, fTPClient0.getDataConnectionMode());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      long long0 = fTPClient0.getControlKeepAliveTimeout();
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertEquals(0L, long0);
      assertEquals((-1), fTPClient0.getPassivePort());
      assertEquals(0, fTPClient0.getDataConnectionMode());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertFalse(fTPClient0.getAutodetectUTF8());
      assertEquals(1000, fTPClient0.getControlKeepAliveReplyTimeout());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.changeToParentDirectory();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getDataConnectionMode();
      assertEquals(1000, fTPClient0.getControlKeepAliveReplyTimeout());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertFalse(fTPClient0.getAutodetectUTF8());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setAutodetectUTF8(false);
      assertFalse(fTPClient0.getListHiddenFiles());
      assertFalse(fTPClient0.getAutodetectUTF8());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertEquals(0, fTPClient0.getDataConnectionMode());
      assertEquals(1000, fTPClient0.getControlKeepAliveReplyTimeout());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.completePendingCommand();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.storeFileStream(":umM.<V!!hU\fW");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      MockFile mockFile0 = new MockFile("\"~DA%(*@-YY+", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        fTPClient0.retrieveFile("<8b", mockPrintStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.mlistDir();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.appendFileStream("ISO-8859-1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      
      fTPClient0.setUseEPSVwithIPv4(true);
      assertTrue(fTPClient0.isUseEPSVwithIPv4());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.sendSiteCommand("e.~+Ec& *Wj9WX-]$m5");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.abort();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      FTPClient.NatServerResolverImpl fTPClient_NatServerResolverImpl0 = new FTPClient.NatServerResolverImpl(fTPClient0);
      fTPClient0.setPassiveNatWorkaroundStrategy(fTPClient_NatServerResolverImpl0);
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertEquals(0, fTPClient0.getDataConnectionMode());
      assertEquals(1000, fTPClient0.getControlKeepAliveReplyTimeout());
      assertFalse(fTPClient0.getAutodetectUTF8());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertEquals(0L, fTPClient0.getRestartOffset());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.changeWorkingDirectory("\r\n");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        fTPClient0.storeFile("?5&jXM\"8~", byteArrayInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.enterLocalPassiveMode();
      // Undeclared exception!
      try { 
        fTPClient0._openDataConnection_("org.apache.commons.net.ftp.systemType", "org.apache.commons.net.ftp.systemType");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.listFiles();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.getCopyStreamListener();
      assertFalse(fTPClient0.getAutodetectUTF8());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertEquals(1000, fTPClient0.getControlKeepAliveReplyTimeout());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertEquals(0, fTPClient0.getDataConnectionMode());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      assertEquals(0, fTPClient0.getReceiveDataSocketBufferSize());
      
      fTPClient0.setReceieveDataSocketBufferSize(4);
      int int0 = fTPClient0.getReceiveDataSocketBufferSize();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.deleteFile("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getReceiveDataSocketBufferSize();
      assertFalse(fTPClient0.getAutodetectUTF8());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertEquals(0, int0);
      assertEquals(1000, fTPClient0.getControlKeepAliveReplyTimeout());
      assertEquals(0, fTPClient0.getDataConnectionMode());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.allocate(1343);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setBufferSize(69);
      assertEquals(69, fTPClient0.getBufferSize());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.sendNoOp();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setListHiddenFiles(false);
      assertEquals(1000, fTPClient0.getControlKeepAliveReplyTimeout());
      assertEquals(0, fTPClient0.getDataConnectionMode());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertFalse(fTPClient0.getAutodetectUTF8());
      assertEquals(0L, fTPClient0.getRestartOffset());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.removeDirectory("Fh_m=I}_I_'f_ 6KO");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.getEntryParser();
      assertEquals((-1), fTPClient0.getPassivePort());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertFalse(fTPClient0.getAutodetectUTF8());
      assertEquals(1000, fTPClient0.getControlKeepAliveReplyTimeout());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertEquals(0, fTPClient0.getDataConnectionMode());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.allocate(1785L, (-1433));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      FTPFileFilter fTPFileFilter0 = mock(FTPFileFilter.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        fTPClient0.mlistDir((String) null, fTPFileFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.structureMount("YRcHHsP#");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.listNames();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.mlistDir("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0._connectAction_();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setRemoteVerificationEnabled(true);
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertEquals(1000, fTPClient0.getControlKeepAliveReplyTimeout());
      assertEquals(0, fTPClient0.getDataConnectionMode());
      assertFalse(fTPClient0.getAutodetectUTF8());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setPassiveLocalIPAddress((String) null);
      assertFalse(fTPClient0.getListHiddenFiles());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertEquals(1000, fTPClient0.getControlKeepAliveReplyTimeout());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertEquals(0, fTPClient0.getDataConnectionMode());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertFalse(fTPClient0.getAutodetectUTF8());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.initiateMListParsing();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      String string0 = fTPClient0.getPassiveHost();
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertFalse(fTPClient0.getAutodetectUTF8());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertNull(string0);
      assertEquals((-1), fTPClient0.getPassivePort());
      assertEquals(0, fTPClient0.getDataConnectionMode());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertEquals(1000, fTPClient0.getControlKeepAliveReplyTimeout());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.storeUniqueFileStream("-Yf\u0007c95");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setSendDataSocketBufferSize((-626));
      assertEquals((-626), fTPClient0.getSendDataSocketBufferSize());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setReportActiveExternalIPAddress("org.apache.commons.net.ftp.systemType.default");
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertEquals(1000, fTPClient0.getControlKeepAliveReplyTimeout());
      assertFalse(fTPClient0.getAutodetectUTF8());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertEquals(0, fTPClient0.getDataConnectionMode());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.enterLocalActiveMode();
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertFalse(fTPClient0.getAutodetectUTF8());
      assertEquals(1000, fTPClient0.getControlKeepAliveReplyTimeout());
      assertEquals(0, fTPClient0.getDataConnectionMode());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.setModificationTime("{xVo}:+", "-a");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.configure((FTPClientConfig) null);
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertFalse(fTPClient0.getAutodetectUTF8());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertEquals(1000, fTPClient0.getControlKeepAliveReplyTimeout());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertEquals(0, fTPClient0.getDataConnectionMode());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.storeUniqueFileStream();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.retrieveFileStream(";");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.disconnect();
      assertEquals(1000, fTPClient0.getControlKeepAliveReplyTimeout());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertEquals(0, fTPClient0.getDataConnectionMode());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertFalse(fTPClient0.getAutodetectUTF8());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertEquals(0L, fTPClient0.getRestartOffset());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0._openDataConnection_(11, "\r\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      // Undeclared exception!
      try { 
        fTPClient0.storeUniqueFile(":%1$tM", (InputStream) pipedInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setDataTimeout(3);
      assertFalse(fTPClient0.getAutodetectUTF8());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertEquals(1000, fTPClient0.getControlKeepAliveReplyTimeout());
      assertEquals(0, fTPClient0.getDataConnectionMode());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setActivePortRange((-1433), (-1433));
      assertEquals(1000, fTPClient0.getControlKeepAliveReplyTimeout());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertFalse(fTPClient0.getAutodetectUTF8());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertEquals(0, fTPClient0.getDataConnectionMode());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.allocate(44, 3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      String string0 = fTPClient0.getListArguments("org.apache.commons.net.ftp.systemType.default");
      assertFalse(fTPClient0.getAutodetectUTF8());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertNotNull(string0);
      assertEquals("org.apache.commons.net.ftp.systemType.default", string0);
      assertEquals(1000, fTPClient0.getControlKeepAliveReplyTimeout());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertEquals(0, fTPClient0.getDataConnectionMode());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 11, 1);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      // Undeclared exception!
      try { 
        fTPClient0.appendFile((String) null, sequenceInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      long long0 = fTPClient0.getRestartOffset();
      assertEquals(1000, fTPClient0.getControlKeepAliveReplyTimeout());
      assertEquals(0L, long0);
      assertEquals((-1), fTPClient0.getPassivePort());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertEquals(0, fTPClient0.getDataConnectionMode());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertFalse(fTPClient0.getAutodetectUTF8());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.doCommand("org.apache.commons.net.ftp.systemType.default", "\r\n");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getPassivePort();
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertEquals(1000, fTPClient0.getControlKeepAliveReplyTimeout());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertEquals(0, fTPClient0.getDataConnectionMode());
      assertEquals((-1), int0);
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertFalse(fTPClient0.getAutodetectUTF8());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.features();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.makeDirectory("qzS Y@");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.getAutodetectUTF8();
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertEquals(1000, fTPClient0.getControlKeepAliveReplyTimeout());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertEquals(0, fTPClient0.getDataConnectionMode());
      assertFalse(boolean0);
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setControlKeepAliveTimeout((-2966L));
      assertEquals((-2966L), fTPClient0.getControlKeepAliveTimeout());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.initiateListParsing();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        fTPClient0.storeUniqueFile((InputStream) sequenceInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getSendDataSocketBufferSize();
      assertFalse(fTPClient0.getListHiddenFiles());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertEquals(0, int0);
      assertEquals(0, fTPClient0.getDataConnectionMode());
      assertEquals(1000, fTPClient0.getControlKeepAliveReplyTimeout());
      assertFalse(fTPClient0.getAutodetectUTF8());
      assertEquals(0L, fTPClient0.getRestartOffset());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.allocate((long) (-584));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.getCslDebug();
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertFalse(fTPClient0.getAutodetectUTF8());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertEquals(1000, fTPClient0.getControlKeepAliveReplyTimeout());
      assertEquals(0, fTPClient0.getDataConnectionMode());
      assertFalse(fTPClient0.getListHiddenFiles());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getBufferSize();
      assertEquals(0, int0);
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertEquals(1000, fTPClient0.getControlKeepAliveReplyTimeout());
      assertFalse(fTPClient0.getAutodetectUTF8());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertEquals(0, fTPClient0.getDataConnectionMode());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.getPassiveLocalIPAddress();
      assertFalse(fTPClient0.getAutodetectUTF8());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertEquals(1000, fTPClient0.getControlKeepAliveReplyTimeout());
      assertEquals(0, fTPClient0.getDataConnectionMode());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.listDirectories();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
}
