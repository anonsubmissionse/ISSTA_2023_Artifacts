/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 20:48:08 GMT 2022
 */

package org.apache.commons.net.nntp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Locale;
import org.apache.commons.net.nntp.NewGroupsOrNewsQuery;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NewGroupsOrNewsQuery_ESTest extends NewGroupsOrNewsQuery_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      NewGroupsOrNewsQuery newGroupsOrNewsQuery0 = new NewGroupsOrNewsQuery(calendar0, false);
      boolean boolean0 = newGroupsOrNewsQuery0.isGMT();
      assertFalse(boolean0);
      assertEquals("140214", newGroupsOrNewsQuery0.getDate());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(93, 93, 93, 93, 427);
      NewGroupsOrNewsQuery newGroupsOrNewsQuery0 = new NewGroupsOrNewsQuery(mockGregorianCalendar0, false);
      newGroupsOrNewsQuery0.addNewsgroup("");
      newGroupsOrNewsQuery0.getNewsgroups();
      assertFalse(newGroupsOrNewsQuery0.isGMT());
      assertEquals("010105", newGroupsOrNewsQuery0.getDate());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 48, 48);
      NewGroupsOrNewsQuery newGroupsOrNewsQuery0 = new NewGroupsOrNewsQuery(mockGregorianCalendar0, false);
      newGroupsOrNewsQuery0.addDistribution("");
      newGroupsOrNewsQuery0.getDistributions();
      assertFalse(newGroupsOrNewsQuery0.isGMT());
      assertEquals("000102", newGroupsOrNewsQuery0.getDate());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NewGroupsOrNewsQuery newGroupsOrNewsQuery0 = null;
      try {
        newGroupsOrNewsQuery0 = new NewGroupsOrNewsQuery((Calendar) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.nntp.NewGroupsOrNewsQuery", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-3708), (-3708), (-3708));
      mockGregorianCalendar0.set(0, (-3708));
      NewGroupsOrNewsQuery newGroupsOrNewsQuery0 = null;
      try {
        newGroupsOrNewsQuery0 = new NewGroupsOrNewsQuery(mockGregorianCalendar0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid era
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Locale locale0 = new Locale("Pattern is missing", "Pattern is missing", "Pattern is missing");
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      NewGroupsOrNewsQuery newGroupsOrNewsQuery0 = new NewGroupsOrNewsQuery(calendar0, true);
      newGroupsOrNewsQuery0.omitNewsgroup("202121");
      newGroupsOrNewsQuery0.addNewsgroup("202121");
      assertEquals("!202121,202121", newGroupsOrNewsQuery0.getNewsgroups());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      NewGroupsOrNewsQuery newGroupsOrNewsQuery0 = new NewGroupsOrNewsQuery(mockGregorianCalendar0, true);
      newGroupsOrNewsQuery0.getNewsgroups();
      assertEquals("140214", newGroupsOrNewsQuery0.getDate());
      assertTrue(newGroupsOrNewsQuery0.isGMT());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      NewGroupsOrNewsQuery newGroupsOrNewsQuery0 = new NewGroupsOrNewsQuery(mockGregorianCalendar0, true);
      newGroupsOrNewsQuery0.addNewsgroup((String) null);
      String string0 = newGroupsOrNewsQuery0.getNewsgroups();
      assertTrue(newGroupsOrNewsQuery0.isGMT());
      assertEquals("140214", newGroupsOrNewsQuery0.getDate());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2), (-2), (-2), (-2), (-2), (-2));
      NewGroupsOrNewsQuery newGroupsOrNewsQuery0 = new NewGroupsOrNewsQuery(mockGregorianCalendar0, false);
      newGroupsOrNewsQuery0.getDistributions();
      assertFalse(newGroupsOrNewsQuery0.isGMT());
      assertEquals("001028", newGroupsOrNewsQuery0.getDate());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      NewGroupsOrNewsQuery newGroupsOrNewsQuery0 = new NewGroupsOrNewsQuery(mockGregorianCalendar0, true);
      newGroupsOrNewsQuery0.addDistribution((String) null);
      String string0 = newGroupsOrNewsQuery0.getDistributions();
      assertTrue(newGroupsOrNewsQuery0.isGMT());
      assertNotNull(string0);
      assertEquals("140214", newGroupsOrNewsQuery0.getDate());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      NewGroupsOrNewsQuery newGroupsOrNewsQuery0 = new NewGroupsOrNewsQuery(mockGregorianCalendar0, true);
      newGroupsOrNewsQuery0.addDistribution((String) null);
      newGroupsOrNewsQuery0.addDistribution("202121");
      assertEquals("null,202121", newGroupsOrNewsQuery0.getDistributions());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      NewGroupsOrNewsQuery newGroupsOrNewsQuery0 = new NewGroupsOrNewsQuery(mockGregorianCalendar0, true);
      newGroupsOrNewsQuery0.getTime();
      assertEquals("140214", newGroupsOrNewsQuery0.getDate());
      assertTrue(newGroupsOrNewsQuery0.isGMT());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      NewGroupsOrNewsQuery newGroupsOrNewsQuery0 = new NewGroupsOrNewsQuery(mockGregorianCalendar0, true);
      boolean boolean0 = newGroupsOrNewsQuery0.isGMT();
      assertTrue(boolean0);
      assertEquals("140214", newGroupsOrNewsQuery0.getDate());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2), (-2), (-2), (-2), (-2), (-2));
      NewGroupsOrNewsQuery newGroupsOrNewsQuery0 = new NewGroupsOrNewsQuery(mockGregorianCalendar0, false);
      String string0 = newGroupsOrNewsQuery0.getDate();
      assertFalse(newGroupsOrNewsQuery0.isGMT());
      assertEquals("001028", string0);
  }
}
