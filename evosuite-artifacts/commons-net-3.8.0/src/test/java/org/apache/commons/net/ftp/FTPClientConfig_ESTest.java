/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 21:06:30 GMT 2022
 */

package org.apache.commons.net.ftp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DateFormatSymbols;
import java.util.Collection;
import org.apache.commons.net.ftp.FTPClientConfig;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FTPClientConfig_ESTest extends FTPClientConfig_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig((String) null, "TYPE: L8", "TYPE: L8", (String) null, "TYPE: L8", "_L", true, false);
      assertEquals("_L", fTPClientConfig0.getServerTimeZoneId());
      assertEquals("TYPE: L8", fTPClientConfig0.getDefaultDateFormatStr());
      assertEquals("TYPE: L8", fTPClientConfig0.getRecentDateFormatStr());
      assertFalse(fTPClientConfig0.getUnparseableEntries());
      assertEquals("TYPE: L8", fTPClientConfig0.getShortMonthNames());
      assertTrue(fTPClientConfig0.isLenientFutureDates());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig((String) null, "P*D_Aq", (String) null, "D{2B+Xf^y *", "?&VD'p", "P*D_Aq");
      assertEquals("P*D_Aq", fTPClientConfig0.getDefaultDateFormatStr());
      assertTrue(fTPClientConfig0.isLenientFutureDates());
      assertEquals("P*D_Aq", fTPClientConfig0.getServerTimeZoneId());
      assertEquals("?&VD'p", fTPClientConfig0.getShortMonthNames());
      assertEquals("D{2B+Xf^y *", fTPClientConfig0.getServerLanguageCode());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("~,P0", "^PX=-=aC7pi+>B)`", "~,P0", "i>fJcT`Zz79T", "", "~,P0", false, false);
      boolean boolean0 = fTPClientConfig0.isLenientFutureDates();
      assertEquals("i>fJcT`Zz79T", fTPClientConfig0.getServerLanguageCode());
      assertFalse(fTPClientConfig0.getUnparseableEntries());
      assertEquals("~,P0", fTPClientConfig0.getRecentDateFormatStr());
      assertEquals("^PX=-=aC7pi+>B)`", fTPClientConfig0.getDefaultDateFormatStr());
      assertEquals("~,P0", fTPClientConfig0.getServerSystemKey());
      assertEquals("~,P0", fTPClientConfig0.getServerTimeZoneId());
      assertFalse(boolean0);
      assertEquals("", fTPClientConfig0.getShortMonthNames());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("~,P0", "^PX=-=aC7pi+>B)`", "~,P0", "i>fJcT`Zz79T", "", "~,P0", false, false);
      boolean boolean0 = fTPClientConfig0.getUnparseableEntries();
      assertEquals("^PX=-=aC7pi+>B)`", fTPClientConfig0.getDefaultDateFormatStr());
      assertEquals("", fTPClientConfig0.getShortMonthNames());
      assertFalse(fTPClientConfig0.isLenientFutureDates());
      assertEquals("~,P0", fTPClientConfig0.getRecentDateFormatStr());
      assertFalse(boolean0);
      assertEquals("i>fJcT`Zz79T", fTPClientConfig0.getServerLanguageCode());
      assertEquals("~,P0", fTPClientConfig0.getServerTimeZoneId());
      assertEquals("~,P0", fTPClientConfig0.getServerSystemKey());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("D+V#", "", "3/*)Ouow|*q%rq!s");
      String string0 = fTPClientConfig0.getShortMonthNames();
      assertEquals("D+V#", fTPClientConfig0.getServerSystemKey());
      assertTrue(fTPClientConfig0.isLenientFutureDates());
      assertEquals("", fTPClientConfig0.getDefaultDateFormatStr());
      assertEquals("3/*)Ouow|*q%rq!s", fTPClientConfig0.getRecentDateFormatStr());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("", "0t%$/", "0t%$/");
      String string0 = fTPClientConfig0.getServerTimeZoneId();
      assertEquals("0t%$/", fTPClientConfig0.getDefaultDateFormatStr());
      assertEquals("", fTPClientConfig0.getServerSystemKey());
      assertNull(string0);
      assertEquals("0t%$/", fTPClientConfig0.getRecentDateFormatStr());
      assertTrue(fTPClientConfig0.isLenientFutureDates());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig();
      fTPClientConfig0.setServerTimeZoneId("");
      String string0 = fTPClientConfig0.getServerTimeZoneId();
      assertEquals("", string0);
      assertEquals("UNIX", fTPClientConfig0.getServerSystemKey());
      assertTrue(fTPClientConfig0.isLenientFutureDates());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig((String) null, "", "", "", "!//AhfOwYC", (String) null, false, false);
      String string0 = fTPClientConfig0.getServerSystemKey();
      assertFalse(fTPClientConfig0.isLenientFutureDates());
      assertNull(string0);
      assertEquals("!//AhfOwYC", fTPClientConfig0.getShortMonthNames());
      assertEquals("", fTPClientConfig0.getDefaultDateFormatStr());
      assertEquals("", fTPClientConfig0.getServerLanguageCode());
      assertFalse(fTPClientConfig0.getUnparseableEntries());
      assertEquals("", fTPClientConfig0.getRecentDateFormatStr());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("D+V#", "", "3/*)Ouow|*q%rq!s");
      String string0 = fTPClientConfig0.getServerLanguageCode();
      assertEquals("", fTPClientConfig0.getDefaultDateFormatStr());
      assertNull(string0);
      assertEquals("3/*)Ouow|*q%rq!s", fTPClientConfig0.getRecentDateFormatStr());
      assertEquals("D+V#", fTPClientConfig0.getServerSystemKey());
      assertTrue(fTPClientConfig0.isLenientFutureDates());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("", "", "", "", "no", "", false, false);
      String string0 = fTPClientConfig0.getServerLanguageCode();
      assertFalse(fTPClientConfig0.isLenientFutureDates());
      assertEquals("", fTPClientConfig0.getServerSystemKey());
      assertEquals("", fTPClientConfig0.getServerTimeZoneId());
      assertFalse(fTPClientConfig0.getUnparseableEntries());
      assertEquals("", fTPClientConfig0.getDefaultDateFormatStr());
      assertEquals("no", fTPClientConfig0.getShortMonthNames());
      assertEquals("", string0);
      assertEquals("", fTPClientConfig0.getRecentDateFormatStr());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("", "0t%$/", "0t%$/");
      String string0 = fTPClientConfig0.getRecentDateFormatStr();
      assertEquals("0t%$/", string0);
      assertEquals("", fTPClientConfig0.getServerSystemKey());
      assertEquals("0t%$/", fTPClientConfig0.getDefaultDateFormatStr());
      assertTrue(fTPClientConfig0.isLenientFutureDates());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig();
      fTPClientConfig0.setRecentDateFormatStr("");
      String string0 = fTPClientConfig0.getRecentDateFormatStr();
      assertEquals("UNIX", fTPClientConfig0.getServerSystemKey());
      assertTrue(fTPClientConfig0.isLenientFutureDates());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("@?4svNhfh6B/x7*)RZ");
      String string0 = fTPClientConfig0.getDefaultDateFormatStr();
      assertEquals("@?4svNhfh6B/x7*)RZ", fTPClientConfig0.getServerSystemKey());
      assertTrue(fTPClientConfig0.isLenientFutureDates());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig();
      fTPClientConfig0.setDefaultDateFormatStr("");
      String string0 = fTPClientConfig0.getDefaultDateFormatStr();
      assertEquals("", string0);
      assertTrue(fTPClientConfig0.isLenientFutureDates());
      assertEquals("UNIX", fTPClientConfig0.getServerSystemKey());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateFormatSymbols dateFormatSymbols0 = FTPClientConfig.getDateFormatSymbols("jan|f\u00E9v|mar|avr|mai|jun|jui|ao\u00FB|sep|oct|nov|d\u00E9c");
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        FTPClientConfig.lookupDateFormatSymbols((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        FTPClientConfig.getDateFormatSymbols((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = null;
      try {
        fTPClientConfig0 = new FTPClientConfig((FTPClientConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTPClientConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = null;
      try {
        fTPClientConfig0 = new FTPClientConfig("HA:w1TUBAwn&G`i8)W", (FTPClientConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTPClientConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("");
      String string0 = fTPClientConfig0.getServerSystemKey();
      assertEquals("", string0);
      assertTrue(fTPClientConfig0.isLenientFutureDates());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        FTPClientConfig.getDateFormatSymbols("NETWARE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // expecting a pipe-delimited string containing 12 tokens
         //
         verifyException("org.apache.commons.net.ftp.FTPClientConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateFormatSymbols dateFormatSymbols0 = FTPClientConfig.lookupDateFormatSymbols("en");
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateFormatSymbols dateFormatSymbols0 = FTPClientConfig.lookupDateFormatSymbols("TYPE: L8");
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("org.apache.commons.net.ftp.FTPClientConfig", "org.apache.commons.net.ftp.FTPClientConfig", "org.apache.commons.net.ftp.FTPClientConfig", "org.apache.commons.net.ftp.FTPClientConfig", "org.apache.commons.net.ftp.FTPClientConfig", "org.apache.commons.net.ftp.FTPClientConfig", true, true);
      String string0 = fTPClientConfig0.getServerTimeZoneId();
      assertEquals("org.apache.commons.net.ftp.FTPClientConfig", string0);
      assertEquals("org.apache.commons.net.ftp.FTPClientConfig", fTPClientConfig0.getShortMonthNames());
      assertTrue(fTPClientConfig0.getUnparseableEntries());
      assertEquals("org.apache.commons.net.ftp.FTPClientConfig", fTPClientConfig0.getServerSystemKey());
      assertEquals("org.apache.commons.net.ftp.FTPClientConfig", fTPClientConfig0.getRecentDateFormatStr());
      assertTrue(fTPClientConfig0.isLenientFutureDates());
      assertEquals("org.apache.commons.net.ftp.FTPClientConfig", fTPClientConfig0.getServerLanguageCode());
      assertEquals("org.apache.commons.net.ftp.FTPClientConfig", fTPClientConfig0.getDefaultDateFormatStr());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("org.apache.commons.net.ftp.FTPClientConfig", "org.apache.commons.net.ftp.FTPClientConfig", "org.apache.commons.net.ftp.FTPClientConfig", "org.apache.commons.net.ftp.FTPClientConfig", "org.apache.commons.net.ftp.FTPClientConfig", "org.apache.commons.net.ftp.FTPClientConfig", true, true);
      String string0 = fTPClientConfig0.getShortMonthNames();
      assertEquals("org.apache.commons.net.ftp.FTPClientConfig", string0);
      assertEquals("org.apache.commons.net.ftp.FTPClientConfig", fTPClientConfig0.getServerLanguageCode());
      assertTrue(fTPClientConfig0.getUnparseableEntries());
      assertEquals("org.apache.commons.net.ftp.FTPClientConfig", fTPClientConfig0.getServerSystemKey());
      assertEquals("org.apache.commons.net.ftp.FTPClientConfig", fTPClientConfig0.getServerTimeZoneId());
      assertTrue(fTPClientConfig0.isLenientFutureDates());
      assertEquals("org.apache.commons.net.ftp.FTPClientConfig", fTPClientConfig0.getDefaultDateFormatStr());
      assertEquals("org.apache.commons.net.ftp.FTPClientConfig", fTPClientConfig0.getRecentDateFormatStr());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("org.apache.commons.net.ftp.FTPClientConfig", "org.apache.commons.net.ftp.FTPClientConfig", "org.apache.commons.net.ftp.FTPClientConfig", "org.apache.commons.net.ftp.FTPClientConfig", "org.apache.commons.net.ftp.FTPClientConfig", "org.apache.commons.net.ftp.FTPClientConfig", true, true);
      String string0 = fTPClientConfig0.getDefaultDateFormatStr();
      assertEquals("org.apache.commons.net.ftp.FTPClientConfig", fTPClientConfig0.getServerSystemKey());
      assertEquals("org.apache.commons.net.ftp.FTPClientConfig", fTPClientConfig0.getRecentDateFormatStr());
      assertTrue(fTPClientConfig0.isLenientFutureDates());
      assertEquals("org.apache.commons.net.ftp.FTPClientConfig", fTPClientConfig0.getServerLanguageCode());
      assertEquals("org.apache.commons.net.ftp.FTPClientConfig", fTPClientConfig0.getShortMonthNames());
      assertEquals("org.apache.commons.net.ftp.FTPClientConfig", string0);
      assertTrue(fTPClientConfig0.getUnparseableEntries());
      assertEquals("org.apache.commons.net.ftp.FTPClientConfig", fTPClientConfig0.getServerTimeZoneId());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("", "", "");
      fTPClientConfig0.setShortMonthNames("");
      String string0 = fTPClientConfig0.getShortMonthNames();
      assertEquals("", fTPClientConfig0.getServerSystemKey());
      assertEquals("", fTPClientConfig0.getRecentDateFormatStr());
      assertEquals("", string0);
      assertEquals("", fTPClientConfig0.getDefaultDateFormatStr());
      assertTrue(fTPClientConfig0.isLenientFutureDates());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig();
      String string0 = fTPClientConfig0.getRecentDateFormatStr();
      assertTrue(fTPClientConfig0.isLenientFutureDates());
      assertEquals("UNIX", fTPClientConfig0.getServerSystemKey());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("org.apache.commons.net.ftp.FTPClientConfig", "org.apache.commons.net.ftp.FTPClientConfig", "org.apache.commons.net.ftp.FTPClientConfig", "org.apache.commons.net.ftp.FTPClientConfig", "org.apache.commons.net.ftp.FTPClientConfig", "org.apache.commons.net.ftp.FTPClientConfig", true, true);
      fTPClientConfig0.setServerLanguageCode("org.apache.commons.net.ftp.FTPClientConfig");
      assertTrue(fTPClientConfig0.getUnparseableEntries());
      assertEquals("org.apache.commons.net.ftp.FTPClientConfig", fTPClientConfig0.getServerTimeZoneId());
      assertTrue(fTPClientConfig0.isLenientFutureDates());
      assertEquals("org.apache.commons.net.ftp.FTPClientConfig", fTPClientConfig0.getShortMonthNames());
      assertEquals("org.apache.commons.net.ftp.FTPClientConfig", fTPClientConfig0.getServerSystemKey());
      assertEquals("org.apache.commons.net.ftp.FTPClientConfig", fTPClientConfig0.getRecentDateFormatStr());
      assertEquals("org.apache.commons.net.ftp.FTPClientConfig", fTPClientConfig0.getServerLanguageCode());
      assertEquals("org.apache.commons.net.ftp.FTPClientConfig", fTPClientConfig0.getDefaultDateFormatStr());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig((String) null, (String) null, "WINDOWS", "WINDOWS", (String) null, "");
      fTPClientConfig0.setUnparseableEntries(false);
      assertTrue(fTPClientConfig0.isLenientFutureDates());
      assertEquals("WINDOWS", fTPClientConfig0.getRecentDateFormatStr());
      assertEquals("", fTPClientConfig0.getServerTimeZoneId());
      assertFalse(fTPClientConfig0.getUnparseableEntries());
      assertEquals("WINDOWS", fTPClientConfig0.getServerLanguageCode());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("org.apache.commons.net.ftp.FTPClientConfig", "org.apache.commons.net.ftp.FTPClientConfig", "org.apache.commons.net.ftp.FTPClientConfig", "org.apache.commons.net.ftp.FTPClientConfig", "org.apache.commons.net.ftp.FTPClientConfig", "org.apache.commons.net.ftp.FTPClientConfig", true, true);
      boolean boolean0 = fTPClientConfig0.getUnparseableEntries();
      assertEquals("org.apache.commons.net.ftp.FTPClientConfig", fTPClientConfig0.getServerLanguageCode());
      assertEquals("org.apache.commons.net.ftp.FTPClientConfig", fTPClientConfig0.getDefaultDateFormatStr());
      assertEquals("org.apache.commons.net.ftp.FTPClientConfig", fTPClientConfig0.getRecentDateFormatStr());
      assertEquals("org.apache.commons.net.ftp.FTPClientConfig", fTPClientConfig0.getServerSystemKey());
      assertEquals("org.apache.commons.net.ftp.FTPClientConfig", fTPClientConfig0.getServerTimeZoneId());
      assertTrue(boolean0);
      assertTrue(fTPClientConfig0.isLenientFutureDates());
      assertEquals("org.apache.commons.net.ftp.FTPClientConfig", fTPClientConfig0.getShortMonthNames());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig();
      String string0 = fTPClientConfig0.getServerSystemKey();
      assertEquals("UNIX", string0);
      assertTrue(fTPClientConfig0.isLenientFutureDates());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("org.apache.commons.net.ftp.FTPClientConfig", "org.apache.commons.net.ftp.FTPClientConfig", "org.apache.commons.net.ftp.FTPClientConfig", "org.apache.commons.net.ftp.FTPClientConfig", "org.apache.commons.net.ftp.FTPClientConfig", "org.apache.commons.net.ftp.FTPClientConfig", true, true);
      fTPClientConfig0.setLenientFutureDates(true);
      assertTrue(fTPClientConfig0.getUnparseableEntries());
      assertEquals("org.apache.commons.net.ftp.FTPClientConfig", fTPClientConfig0.getServerLanguageCode());
      assertEquals("org.apache.commons.net.ftp.FTPClientConfig", fTPClientConfig0.getShortMonthNames());
      assertEquals("org.apache.commons.net.ftp.FTPClientConfig", fTPClientConfig0.getRecentDateFormatStr());
      assertTrue(fTPClientConfig0.isLenientFutureDates());
      assertEquals("org.apache.commons.net.ftp.FTPClientConfig", fTPClientConfig0.getServerSystemKey());
      assertEquals("org.apache.commons.net.ftp.FTPClientConfig", fTPClientConfig0.getDefaultDateFormatStr());
      assertEquals("org.apache.commons.net.ftp.FTPClientConfig", fTPClientConfig0.getServerTimeZoneId());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig();
      boolean boolean0 = fTPClientConfig0.isLenientFutureDates();
      assertEquals("UNIX", fTPClientConfig0.getServerSystemKey());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("org.apache.commons.net.ftp.FTPClientConfig", "org.apache.commons.net.ftp.FTPClientConfig", "org.apache.commons.net.ftp.FTPClientConfig", "org.apache.commons.net.ftp.FTPClientConfig", "org.apache.commons.net.ftp.FTPClientConfig", "org.apache.commons.net.ftp.FTPClientConfig", true, true);
      FTPClientConfig fTPClientConfig1 = new FTPClientConfig("UNIX", fTPClientConfig0);
      assertEquals("org.apache.commons.net.ftp.FTPClientConfig", fTPClientConfig1.getDefaultDateFormatStr());
      assertEquals("org.apache.commons.net.ftp.FTPClientConfig", fTPClientConfig1.getServerLanguageCode());
      assertEquals("UNIX", fTPClientConfig1.getServerSystemKey());
      assertTrue(fTPClientConfig1.isLenientFutureDates());
      assertEquals("org.apache.commons.net.ftp.FTPClientConfig", fTPClientConfig1.getRecentDateFormatStr());
      assertTrue(fTPClientConfig1.getUnparseableEntries());
      assertEquals("org.apache.commons.net.ftp.FTPClientConfig", fTPClientConfig1.getShortMonthNames());
      assertEquals("org.apache.commons.net.ftp.FTPClientConfig", fTPClientConfig1.getServerTimeZoneId());
      assertEquals("org.apache.commons.net.ftp.FTPClientConfig", fTPClientConfig0.getServerSystemKey());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("org.apache.commons.net.ftp.FTPClientConfig", "org.apache.commons.net.ftp.FTPClientConfig", "org.apache.commons.net.ftp.FTPClientConfig", "org.apache.commons.net.ftp.FTPClientConfig", "org.apache.commons.net.ftp.FTPClientConfig", "org.apache.commons.net.ftp.FTPClientConfig", true, true);
      String string0 = fTPClientConfig0.getServerLanguageCode();
      assertEquals("org.apache.commons.net.ftp.FTPClientConfig", fTPClientConfig0.getServerTimeZoneId());
      assertEquals("org.apache.commons.net.ftp.FTPClientConfig", fTPClientConfig0.getDefaultDateFormatStr());
      assertTrue(fTPClientConfig0.getUnparseableEntries());
      assertEquals("org.apache.commons.net.ftp.FTPClientConfig", fTPClientConfig0.getServerSystemKey());
      assertEquals("org.apache.commons.net.ftp.FTPClientConfig", fTPClientConfig0.getShortMonthNames());
      assertEquals("org.apache.commons.net.ftp.FTPClientConfig", fTPClientConfig0.getRecentDateFormatStr());
      assertEquals("org.apache.commons.net.ftp.FTPClientConfig", string0);
      assertTrue(fTPClientConfig0.isLenientFutureDates());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Collection<String> collection0 = FTPClientConfig.getSupportedLanguageCodes();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DateFormatSymbols dateFormatSymbols0 = FTPClientConfig.lookupDateFormatSymbols("fr");
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig();
      FTPClientConfig fTPClientConfig1 = new FTPClientConfig(fTPClientConfig0);
      assertTrue(fTPClientConfig1.isLenientFutureDates());
      assertEquals("UNIX", fTPClientConfig1.getServerSystemKey());
  }
}
