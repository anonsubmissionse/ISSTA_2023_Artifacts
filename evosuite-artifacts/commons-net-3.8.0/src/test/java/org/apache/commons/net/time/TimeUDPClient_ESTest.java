/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 21:11:45 GMT 2022
 */

package org.apache.commons.net.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.net.InetAddress;
import java.util.Date;
import org.apache.commons.net.time.TimeUDPClient;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TimeUDPClient_ESTest extends TimeUDPClient_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeUDPClient timeUDPClient0 = new TimeUDPClient();
      EvoSuiteLocalAddress evoSuiteLocalAddress0 = new EvoSuiteLocalAddress("192.168.1.42", 40000);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("192.168.1.42", 37);
      NetworkHandling.sendUdpPacket(evoSuiteLocalAddress0, evoSuiteRemoteAddress0, (byte[]) null);
      timeUDPClient0.open(0, (InetAddress) null);
      InetAddress inetAddress0 = timeUDPClient0.getLocalAddress();
      long long0 = timeUDPClient0.getTime(inetAddress0, 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeUDPClient timeUDPClient0 = new TimeUDPClient();
      EvoSuiteLocalAddress evoSuiteLocalAddress0 = new EvoSuiteLocalAddress("192.168.1.42", 40000);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("192.168.1.42", 37);
      NetworkHandling.sendUdpPacket(evoSuiteLocalAddress0, evoSuiteRemoteAddress0, (byte[]) null);
      timeUDPClient0.open(0, (InetAddress) null);
      InetAddress inetAddress0 = timeUDPClient0.getLocalAddress();
      long long0 = timeUDPClient0.getTime(inetAddress0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeUDPClient timeUDPClient0 = new TimeUDPClient();
      EvoSuiteLocalAddress evoSuiteLocalAddress0 = new EvoSuiteLocalAddress("192.168.1.42", 40000);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("192.168.1.42", 37);
      NetworkHandling.sendUdpPacket(evoSuiteLocalAddress0, evoSuiteRemoteAddress0, (byte[]) null);
      timeUDPClient0.open(0, (InetAddress) null);
      InetAddress inetAddress0 = timeUDPClient0.getLocalAddress();
      Date date0 = timeUDPClient0.getDate(inetAddress0, 0);
      assertEquals("Mon Jan 01 00:00:00 GMT 1900", date0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeUDPClient timeUDPClient0 = new TimeUDPClient();
      EvoSuiteLocalAddress evoSuiteLocalAddress0 = new EvoSuiteLocalAddress("192.168.1.42", 40000);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("192.168.1.42", 37);
      timeUDPClient0.open();
      NetworkHandling.sendUdpPacket(evoSuiteLocalAddress0, evoSuiteRemoteAddress0, (byte[]) null);
      InetAddress inetAddress0 = timeUDPClient0.getLocalAddress();
      Date date0 = timeUDPClient0.getDate(inetAddress0);
      assertEquals("Mon Jan 01 00:00:00 GMT 1900", date0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeUDPClient timeUDPClient0 = new TimeUDPClient();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      // Undeclared exception!
      try { 
        timeUDPClient0.getTime(inetAddress0, (-1604));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Port out of range:-1604
         //
         verifyException("java.net.DatagramPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeUDPClient timeUDPClient0 = new TimeUDPClient();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      timeUDPClient0.open();
      try { 
        timeUDPClient0.getTime(inetAddress0, 153);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IO exception
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoDatagramSocketImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeUDPClient timeUDPClient0 = new TimeUDPClient();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      // Undeclared exception!
      try { 
        timeUDPClient0.getTime(inetAddress0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.time.TimeUDPClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeUDPClient timeUDPClient0 = new TimeUDPClient();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      // Undeclared exception!
      try { 
        timeUDPClient0.getDate(inetAddress0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.time.TimeUDPClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeUDPClient timeUDPClient0 = new TimeUDPClient();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      // Undeclared exception!
      try { 
        timeUDPClient0.getDate(inetAddress0, (-300));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Port out of range:-300
         //
         verifyException("java.net.DatagramPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeUDPClient timeUDPClient0 = new TimeUDPClient();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      // Undeclared exception!
      try { 
        timeUDPClient0.getDate(inetAddress0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.time.TimeUDPClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeUDPClient timeUDPClient0 = new TimeUDPClient();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      // Undeclared exception!
      try { 
        timeUDPClient0.getTime(inetAddress0, 868);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.time.TimeUDPClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeUDPClient timeUDPClient0 = new TimeUDPClient();
      timeUDPClient0.open();
      InetAddress inetAddress0 = timeUDPClient0.getLocalAddress();
      try { 
        timeUDPClient0.getDate(inetAddress0, 37);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IO exception
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoDatagramSocketImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeUDPClient timeUDPClient0 = new TimeUDPClient();
      timeUDPClient0.open();
      InetAddress inetAddress0 = timeUDPClient0.getLocalAddress();
      try { 
        timeUDPClient0.getTime(inetAddress0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IO exception
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoDatagramSocketImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeUDPClient timeUDPClient0 = new TimeUDPClient();
      timeUDPClient0.open();
      InetAddress inetAddress0 = timeUDPClient0.getLocalAddress();
      try { 
        timeUDPClient0.getDate(inetAddress0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IO exception
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoDatagramSocketImpl", e);
      }
  }
}
