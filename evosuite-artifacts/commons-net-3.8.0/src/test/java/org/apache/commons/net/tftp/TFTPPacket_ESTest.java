/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 21:02:57 GMT 2022
 */

package org.apache.commons.net.tftp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.DatagramPacket;
import java.net.InetAddress;
import org.apache.commons.net.tftp.TFTPDataPacket;
import org.apache.commons.net.tftp.TFTPErrorPacket;
import org.apache.commons.net.tftp.TFTPPacket;
import org.apache.commons.net.tftp.TFTPReadRequestPacket;
import org.apache.commons.net.tftp.TFTPWriteRequestPacket;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TFTPPacket_ESTest extends TFTPPacket_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName(" WRQ ");
      byte[] byteArray0 = new byte[0];
      TFTPDataPacket tFTPDataPacket0 = new TFTPDataPacket(inetAddress0, 0, 0, byteArray0);
      InetAddress inetAddress1 = MockInetAddress.getLocalHost();
      tFTPDataPacket0.setAddress(inetAddress1);
      assertEquals(0, tFTPDataPacket0.getPort());
      assertEquals(3, tFTPDataPacket0.getType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, 1561, 1561, (String) null);
      String string0 = tFTPErrorPacket0.toString();
      assertEquals("/192.168.1.42 1561 5 ERR 1561 null", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, (-505), (-505), "N'!MH^FF&D;(29");
      assertEquals((-505), tFTPErrorPacket0.getPort());
      
      tFTPErrorPacket0.setPort(0);
      DatagramPacket datagramPacket0 = tFTPErrorPacket0.newDatagram();
      TFTPPacket.newTFTPPacket(datagramPacket0);
      assertEquals(0, tFTPErrorPacket0.getPort());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      byte[] byteArray0 = new byte[0];
      TFTPDataPacket tFTPDataPacket0 = new TFTPDataPacket(inetAddress0, 0, 0, byteArray0);
      tFTPDataPacket0.newDatagram();
      assertEquals(0, tFTPDataPacket0.getPort());
      assertEquals(3, tFTPDataPacket0.getType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, 8, 5, "");
      DatagramPacket datagramPacket0 = tFTPErrorPacket0.newDatagram();
      assertEquals(8, datagramPacket0.getPort());
      assertEquals(5, tFTPErrorPacket0.getType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, (-505), (-505), "N'!MH^FF&D;(29");
      assertEquals(5, tFTPErrorPacket0.getType());
      
      tFTPErrorPacket0.type = 0;
      tFTPErrorPacket0.getType();
      assertEquals((-505), tFTPErrorPacket0.getPort());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      byte[] byteArray0 = new byte[3];
      TFTPDataPacket tFTPDataPacket0 = new TFTPDataPacket(inetAddress0, 0, 5, byteArray0);
      assertEquals(3, tFTPDataPacket0.getType());
      
      tFTPDataPacket0.type = (-2018);
      tFTPDataPacket0.getType();
      assertEquals(0, tFTPDataPacket0.getPort());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, (-505), (-505), "N'!MH^FF&D;(29");
      assertEquals((-505), tFTPErrorPacket0.getPort());
      
      tFTPErrorPacket0.setPort(0);
      int int0 = tFTPErrorPacket0.getPort();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      TFTPDataPacket tFTPDataPacket0 = new TFTPDataPacket(inetAddress0, (-3177), (-3177), (byte[]) null, (-3177), (-2537));
      int int0 = tFTPDataPacket0.getPort();
      assertEquals((-3177), int0);
      assertEquals(3, tFTPDataPacket0.getType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      TFTPDataPacket tFTPDataPacket0 = new TFTPDataPacket((InetAddress) null, 2, 2, byteArray0, 2667, (byte)105);
      tFTPDataPacket0.getAddress();
      assertEquals(3, tFTPDataPacket0.getType());
      assertEquals(2, tFTPDataPacket0.getPort());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-17);
      InetAddress inetAddress0 = MockInetAddress.getByAddress("*o)#", byteArray0);
      TFTPWriteRequestPacket tFTPWriteRequestPacket0 = new TFTPWriteRequestPacket(inetAddress0, 516, (String) null, (byte)68);
      InetAddress inetAddress1 = tFTPWriteRequestPacket0.getAddress();
      assertEquals(516, tFTPWriteRequestPacket0.getPort());
      assertEquals(2, tFTPWriteRequestPacket0.getType());
      assertNotNull(inetAddress1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      TFTPReadRequestPacket tFTPReadRequestPacket0 = new TFTPReadRequestPacket(inetAddress0, 0, "Bad packet.  Invalid TFTP operator code.", 0);
      InetAddress inetAddress1 = tFTPReadRequestPacket0.getAddress();
      assertEquals(1, tFTPReadRequestPacket0.getType());
      assertEquals(0, tFTPReadRequestPacket0.getPort());
      assertNotNull(inetAddress1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName(" RRQ ");
      TFTPReadRequestPacket tFTPReadRequestPacket0 = new TFTPReadRequestPacket(inetAddress0, 17, "", 5);
      // Undeclared exception!
      try { 
        tFTPReadRequestPacket0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.net.tftp.TFTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        TFTPPacket.newTFTPPacket((DatagramPacket) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.tftp.TFTPPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, 1561, 1561, (String) null);
      // Undeclared exception!
      try { 
        tFTPErrorPacket0.newDatagram();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.tftp.TFTPErrorPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      InetAddress inetAddress0 = MockInetAddress.getByAddress(byteArray0);
      TFTPDataPacket tFTPDataPacket0 = new TFTPDataPacket(inetAddress0, (byte)5, (-598), byteArray0, 5, (-1829));
      // Undeclared exception!
      try { 
        tFTPDataPacket0.newDatagram();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.tftp.TFTPDataPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      byte[] byteArray0 = new byte[4];
      TFTPDataPacket tFTPDataPacket0 = new TFTPDataPacket(inetAddress0, (-791), 4, byteArray0);
      // Undeclared exception!
      try { 
        tFTPDataPacket0.newDatagram();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Port out of range:-791
         //
         verifyException("java.net.DatagramPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      InetAddress inetAddress0 = MockInetAddress.getByAddress("mh", byteArray0);
      TFTPWriteRequestPacket tFTPWriteRequestPacket0 = new TFTPWriteRequestPacket(inetAddress0, (byte) (-51), "mh", 656);
      // Undeclared exception!
      try { 
        tFTPWriteRequestPacket0.newDatagram();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 656
         //
         verifyException("org.apache.commons.net.tftp.TFTPRequestPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, 8, 5, "");
      int int0 = tFTPErrorPacket0.getType();
      assertEquals(5, int0);
      assertEquals(8, tFTPErrorPacket0.getPort());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      DatagramPacket datagramPacket0 = new DatagramPacket(byteArray0, (byte)9);
      try { 
        TFTPPacket.newTFTPPacket(datagramPacket0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Bad packet.  Invalid TFTP operator code.
         //
         verifyException("org.apache.commons.net.tftp.TFTPPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)4;
      DatagramPacket datagramPacket0 = new DatagramPacket(byteArray0, (byte)4);
      TFTPPacket tFTPPacket0 = TFTPPacket.newTFTPPacket(datagramPacket0);
      assertEquals((-1), tFTPPacket0.getPort());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      DatagramPacket datagramPacket0 = new DatagramPacket(byteArray0, (byte)0);
      InetAddress inetAddress0 = MockInetAddress.getByName("4kf");
      TFTPDataPacket tFTPDataPacket0 = new TFTPDataPacket(inetAddress0, 446, 446, byteArray0, 446, 0);
      tFTPDataPacket0.newDatagram(datagramPacket0, byteArray0);
      TFTPPacket.newTFTPPacket(datagramPacket0);
      assertArrayEquals(new byte[] {(byte)0, (byte)3, (byte)1, (byte) (-66)}, byteArray0);
      assertEquals(446, datagramPacket0.getPort());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, (-505), (-505), "");
      tFTPErrorPacket0.setPort(5);
      DatagramPacket datagramPacket0 = tFTPErrorPacket0.newDatagram();
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)2;
      datagramPacket0.setData(byteArray0);
      try { 
        TFTPPacket.newTFTPPacket(datagramPacket0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized TFTP transfer mode: 
         //
         verifyException("org.apache.commons.net.tftp.TFTPRequestPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)1;
      DatagramPacket datagramPacket0 = new DatagramPacket(byteArray0, (byte)1);
      datagramPacket0.setData(byteArray0);
      try { 
        TFTPPacket.newTFTPPacket(datagramPacket0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized TFTP transfer mode: 
         //
         verifyException("org.apache.commons.net.tftp.TFTPRequestPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      DatagramPacket datagramPacket0 = new DatagramPacket(byteArray0, (byte)0);
      try { 
        TFTPPacket.newTFTPPacket(datagramPacket0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Bad packet. Datagram data length is too short.
         //
         verifyException("org.apache.commons.net.tftp.TFTPPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, 39, 39, "CBlD");
      InetAddress inetAddress1 = tFTPErrorPacket0.getAddress();
      assertEquals(5, tFTPErrorPacket0.getType());
      assertEquals(39, tFTPErrorPacket0.getPort());
      assertNotNull(inetAddress1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, 39, 39, "CBlD");
      int int0 = tFTPErrorPacket0.getPort();
      assertEquals(5, tFTPErrorPacket0.getType());
      assertEquals(39, int0);
  }
}
