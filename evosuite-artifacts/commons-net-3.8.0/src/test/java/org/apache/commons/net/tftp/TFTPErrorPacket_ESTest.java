/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 21:07:54 GMT 2022
 */

package org.apache.commons.net.tftp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.DatagramPacket;
import java.net.InetAddress;
import org.apache.commons.net.tftp.TFTPErrorPacket;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TFTPErrorPacket_ESTest extends TFTPErrorPacket_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, 0, 1712, "+mf/7*do1,x>K^^&");
      tFTPErrorPacket0.type = 0;
      DatagramPacket datagramPacket0 = tFTPErrorPacket0.newDatagram();
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        tFTPErrorPacket0.newDatagram(datagramPacket0, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("");
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, 0, 0, "");
      byte[] byteArray0 = new byte[7];
      DatagramPacket datagramPacket0 = new DatagramPacket(byteArray0, 2);
      tFTPErrorPacket0.newDatagram(datagramPacket0, byteArray0);
      assertEquals(4, datagramPacket0.getLength());
      assertArrayEquals(new byte[] {(byte)0, (byte)5, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, 0, 1959, "G>i");
      DatagramPacket datagramPacket0 = tFTPErrorPacket0.newDatagram();
      assertEquals(1959, tFTPErrorPacket0.getError());
      assertEquals(0, datagramPacket0.getPort());
      assertEquals(8, datagramPacket0.getLength());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, 47, 0, (String) null);
      tFTPErrorPacket0.getMessage();
      assertEquals(0, tFTPErrorPacket0.getError());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, (-1348), (-26), "u-)");
      tFTPErrorPacket0.getMessage();
      assertEquals((-26), tFTPErrorPacket0.getError());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, 0, 0, "I-;Q$3w(xEpc?");
      int int0 = tFTPErrorPacket0.getError();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, 1929, 1929, "u-)");
      int int0 = tFTPErrorPacket0.getError();
      assertEquals(1929, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, (-1), (-1), " ");
      // Undeclared exception!
      try { 
        tFTPErrorPacket0.newDatagram((DatagramPacket) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.tftp.TFTPErrorPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket((InetAddress) null, (-38), (-38), "");
      byte[] byteArray0 = new byte[7];
      DatagramPacket datagramPacket0 = new DatagramPacket(byteArray0, 5);
      // Undeclared exception!
      try { 
        tFTPErrorPacket0.newDatagram(datagramPacket0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Port out of range:-38
         //
         verifyException("java.net.DatagramPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, (-1348), (-26), "Bad file name and mode format.");
      tFTPErrorPacket0.port = 270;
      DatagramPacket datagramPacket0 = tFTPErrorPacket0.newDatagram();
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        tFTPErrorPacket0.newDatagram(datagramPacket0, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, (-158), (-158), (String) null);
      // Undeclared exception!
      try { 
        tFTPErrorPacket0.newDatagram();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.tftp.TFTPErrorPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TFTPErrorPacket tFTPErrorPacket0 = null;
      try {
        tFTPErrorPacket0 = new TFTPErrorPacket((DatagramPacket) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.tftp.TFTPErrorPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      DatagramPacket datagramPacket0 = new DatagramPacket(byteArray0, (byte)0);
      TFTPErrorPacket tFTPErrorPacket0 = null;
      try {
        tFTPErrorPacket0 = new TFTPErrorPacket(datagramPacket0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.net.tftp.TFTPErrorPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, (-1348), (-26), "u-)");
      tFTPErrorPacket0.port = 270;
      DatagramPacket datagramPacket0 = tFTPErrorPacket0.newDatagram();
      byte[] byteArray0 = new byte[9];
      DatagramPacket datagramPacket1 = tFTPErrorPacket0.newDatagram(datagramPacket0, byteArray0);
      TFTPErrorPacket tFTPErrorPacket1 = new TFTPErrorPacket(datagramPacket1);
      assertEquals(7, datagramPacket0.getLength());
      assertEquals(65510, tFTPErrorPacket1.getError());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, (-1348), (-26), "u-)");
      tFTPErrorPacket0.port = 270;
      DatagramPacket datagramPacket0 = tFTPErrorPacket0.newDatagram();
      TFTPErrorPacket tFTPErrorPacket1 = new TFTPErrorPacket(datagramPacket0);
      assertEquals(8, datagramPacket0.getLength());
      assertEquals("u-)", tFTPErrorPacket1.getMessage());
      assertEquals(65510, tFTPErrorPacket1.getError());
      assertEquals(270, tFTPErrorPacket1.getPort());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)5;
      DatagramPacket datagramPacket0 = new DatagramPacket(byteArray0, (byte)5, (byte)0);
      TFTPErrorPacket tFTPErrorPacket0 = null;
      try {
        tFTPErrorPacket0 = new TFTPErrorPacket(datagramPacket0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Bad error packet. No message.
         //
         verifyException("org.apache.commons.net.tftp.TFTPErrorPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      InetAddress inetAddress0 = MockInetAddress.getByAddress(byteArray0);
      DatagramPacket datagramPacket0 = new DatagramPacket(byteArray0, (byte)0, inetAddress0, (byte)0);
      TFTPErrorPacket tFTPErrorPacket0 = null;
      try {
        tFTPErrorPacket0 = new TFTPErrorPacket(datagramPacket0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // TFTP operator code does not match type.
         //
         verifyException("org.apache.commons.net.tftp.TFTPErrorPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, (-1348), (-26), "");
      String string0 = tFTPErrorPacket0.toString();
      assertEquals("/192.168.1.42 -1348 5 ERR -26 ", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, (-1348), (-26), "");
      int int0 = tFTPErrorPacket0.getError();
      assertEquals((-26), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, (-1348), (-26), "");
      // Undeclared exception!
      try { 
        tFTPErrorPacket0.newDatagram();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Port out of range:-1348
         //
         verifyException("java.net.DatagramPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, (-1348), (-26), "");
      tFTPErrorPacket0.getMessage();
      assertEquals((-26), tFTPErrorPacket0.getError());
  }
}
