/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 12 03:23:27 GMT 2022
 */

package com.github.scribejava.core.oauth;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.scribejava.core.builder.ScopeBuilder;
import com.github.scribejava.core.builder.api.DefaultApi20;
import com.github.scribejava.core.httpclient.HttpClient;
import com.github.scribejava.core.httpclient.HttpClientConfig;
import com.github.scribejava.core.httpclient.jdk.JDKHttpClient;
import com.github.scribejava.core.httpclient.jdk.JDKHttpClientConfig;
import com.github.scribejava.core.model.DeviceAuthorization;
import com.github.scribejava.core.model.OAuth2AccessToken;
import com.github.scribejava.core.model.OAuth2Authorization;
import com.github.scribejava.core.model.OAuthAsyncRequestCallback;
import com.github.scribejava.core.model.OAuthRequest;
import com.github.scribejava.core.model.Verb;
import com.github.scribejava.core.oauth.AccessTokenRequestParams;
import com.github.scribejava.core.oauth.OAuth20Service;
import com.github.scribejava.core.oauth2.bearersignature.BearerSignature;
import com.github.scribejava.core.oauth2.clientauthentication.ClientAuthentication;
import com.github.scribejava.core.pkce.PKCE;
import com.github.scribejava.core.revoke.TokenTypeHint;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.net.MalformedURLException;
import java.net.URI;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.Future;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OAuth20Service_ESTest extends OAuth20Service_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "g5|m0agml0(a=iV:h", "g5|m0agml0(a=iV:h", "g5|m0agml0(a=iV:h", "g5|m0agml0(a=iV:h", "g5|m0agml0(a=iV:h", (OutputStream) null, "g5|m0agml0(a=iV:h", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth2Authorization oAuth2Authorization0 = oAuth20Service0.extractAuthorization("(enabled=0x%x,disabled=0x%x)");
      assertNull(oAuth2Authorization0.getState());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("access token").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "k?VKA'", "_>", "k?VKA'", "k?VKA'", "3lp", (OutputStream) null, "_>", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthRequest oAuthRequest0 = oAuth20Service0.createAccessTokenClientCredentialsGrantRequest("=");
      oAuth20Service0.logRequestWithParams("access token", oAuthRequest0);
      assertEquals("k?VKA'", oAuth20Service0.getDefaultScope());
      assertEquals("3lp", oAuth20Service0.getResponseType());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("access token").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "k?VKA'", "_>", "k?VKA'", "k?VKA'", "3lp", (OutputStream) null, "_>", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthRequest oAuthRequest0 = oAuth20Service0.createAccessTokenClientCredentialsGrantRequest("=");
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      oAuth20Service0.sendAccessTokenRequestAsync(oAuthRequest0, oAuthAsyncRequestCallback0);
      assertEquals("3lp", oAuth20Service0.getResponseType());
      assertEquals("k?VKA'", oAuth20Service0.getDefaultScope());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn("5u~OF").when(defaultApi20_0).getRevokeTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "5u~OF", "5u~OF", "5u~OF", "5u~OF", "5u~OF", (OutputStream) null, "5u~OF", jDKHttpClientConfig0, jDKHttpClient0);
      TokenTypeHint tokenTypeHint0 = TokenTypeHint.REFRESH_TOKEN;
      Future<Void> future0 = oAuth20Service0.revokeTokenAsync("5u~OF", tokenTypeHint0);
      assertNotNull(future0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn("&u~OF").when(defaultApi20_0).getRevokeTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "grant_yp", "h}4g,CP", "h}4g,CP", "grant_yp", "H0!_B%jy", (OutputStream) null, "Problem accessing property `", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth20Service0.revokeTokenAsync("H0!_B%jy");
      assertEquals("grant_yp", oAuth20Service0.getDefaultScope());
      assertEquals("H0!_B%jy", oAuth20Service0.getResponseType());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Verb verb0 = Verb.HEAD;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn("access token").when(defaultApi20_0).getRefreshTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "k?VKA'", "_>", "k?VKA'", "k?VKA'", "3lp", (OutputStream) null, "_>", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth20Service0.refreshAccessTokenAsync("access token", "k?VKA'");
      assertEquals("k?VKA'", oAuth20Service0.getDefaultScope());
      assertEquals("3lp", oAuth20Service0.getResponseType());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", "", "", "", (String) null, (OutputStream) null, "", jDKHttpClientConfig0, jDKHttpClient0);
      String string0 = oAuth20Service0.getResponseType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("state");
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", "", "", "ln#sKb1&0}26(}h", "", mockFileOutputStream0, "haHK", jDKHttpClientConfig0, jDKHttpClient0);
      String string0 = oAuth20Service0.getResponseType();
      assertEquals("ln#sKb1&0}26(}h", oAuth20Service0.getDefaultScope());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("").when(defaultApi20_0).getDeviceAuthorizationEndpoint();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", "E5]_", "", "", "", (OutputStream) null, "^FF% ^HH y=#0Gh`1Jz", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<DeviceAuthorization> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<DeviceAuthorization>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      oAuth20Service0.getDeviceAuthorizationCodes((String) null, oAuthAsyncRequestCallback0);
      assertEquals("", oAuth20Service0.getResponseType());
      assertEquals("", oAuth20Service0.getDefaultScope());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", "jh!:7{k]2xAK", "jh!:7{k]2xAK", (String) null, (String) null, byteArrayOutputStream0, "?14|*5uzQu", jDKHttpClientConfig0, jDKHttpClient0);
      String string0 = oAuth20Service0.getDefaultScope();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      MockFile mockFile0 = new MockFile("[/x9CBn");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", "", "The refreshToken cannot be null or empty", "", "", mockFileOutputStream0, ")@iWDNE=>KxAM", jDKHttpClientConfig0, (HttpClient) null);
      String string0 = oAuth20Service0.getDefaultScope();
      assertEquals("", oAuth20Service0.getResponseType());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("token_type_hint", false);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service((DefaultApi20) null, "", (String) null, "", "v1", "", mockFileOutputStream0, "Cannot create polymorphic instances with unwrapped values", jDKHttpClientConfig0, (HttpClient) null);
      oAuth20Service0.getApi();
      assertEquals("", oAuth20Service0.getResponseType());
      assertEquals("v1", oAuth20Service0.getDefaultScope());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("access tokn").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "k?VKA'", "-", "k?VKA'", "k?VKA'", "3lp", (OutputStream) null, "-", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      oAuth20Service0.getAccessTokenPasswordGrantAsync("@Q4._& 3,a=G\"R^`:\"", "Factory implementation for format (%s) MUST override `rebuild()` method", (String) null, oAuthAsyncRequestCallback0);
      assertEquals("k?VKA'", oAuth20Service0.getDefaultScope());
      assertEquals("3lp", oAuth20Service0.getResponseType());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("access tokn").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "k?VKA'", "_>", "k?VKA'", "k?VKA'", "3lp", (OutputStream) null, "_>", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      oAuth20Service0.getAccessTokenPasswordGrantAsync("Ynk+7oXaL4oY", "", oAuthAsyncRequestCallback0);
      assertEquals("3lp", oAuth20Service0.getResponseType());
      assertEquals("k?VKA'", oAuth20Service0.getDefaultScope());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      Verb verb0 = Verb.POST;
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "grant_type", "h}4g,CP", "h}4g,CP", "grant_type", "H0!_B%jy", (OutputStream) null, "Problem accessing property '", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth20Service0.getAccessTokenPasswordGrantAsync("Sn]T!Rm2+aHf<\"Vt[v'", "&u~OF");
      assertEquals("H0!_B%jy", oAuth20Service0.getResponseType());
      assertEquals("grant_type", oAuth20Service0.getDefaultScope());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Verb verb0 = Verb.POST;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("FLOAT").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", "", "", "0O(!O", "", pipedOutputStream0, "0O(!O", jDKHttpClientConfig0, jDKHttpClient0);
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization("Za]nU", "Za]nU", "com.fasterxml.jackson.databind.ser.BeanPropertyWriter", (-1428));
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      oAuth20Service0.getAccessTokenDeviceAuthorizationGrant(deviceAuthorization0, oAuthAsyncRequestCallback0);
      assertEquals("", oAuth20Service0.getResponseType());
      assertEquals("0O(!O", oAuth20Service0.getDefaultScope());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Verb verb0 = Verb.GET;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("opaPzy1 sXvE`QWOh#").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "USE_BASE_TYPE_AS_DEFAULT_IMPL", "USE_BASE_TYPE_AS_DEFAULT_IMPL", "v'?9];m;fSQTcg3.%8", (String) null, "3'FI<\"y7lH8?!kyEmX>", (OutputStream) null, "v'?9];m;fSQTcg3.%8", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth20Service0.getAccessTokenClientCredentialsGrantAsync();
      assertEquals("3'FI<\"y7lH8?!kyEmX>", oAuth20Service0.getResponseType());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Verb verb0 = Verb.GET;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("scope").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "USE_BASE_TYPE_AS_DEFAULT_IMPL", "USE_BASE_TYPE_AS_DEFAULT_IMPL", "v'?9];m;fSQTcg3.%8", (String) null, "3'FI<\"y7lH8?!kyEmX>", (OutputStream) null, "v'?9];m;fSQTcg3.%8", jDKHttpClientConfig0, jDKHttpClient0);
      AccessTokenRequestParams accessTokenRequestParams0 = AccessTokenRequestParams.create("");
      oAuth20Service0.getAccessTokenAsync(accessTokenRequestParams0);
      assertEquals("3'FI<\"y7lH8?!kyEmX>", oAuth20Service0.getResponseType());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn("&u~OF").when(defaultApi20_0).getRevokeTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "grant_type", "h}4g,CP", "h}4g,CP", "grant_type", "H0!_B%jy", (OutputStream) null, "Problem accessing property '", jDKHttpClientConfig0, jDKHttpClient0);
      TokenTypeHint tokenTypeHint0 = TokenTypeHint.REFRESH_TOKEN;
      oAuth20Service0.createRevokeTokenRequest("", tokenTypeHint0);
      assertEquals("H0!_B%jy", oAuth20Service0.getResponseType());
      assertEquals("grant_type", oAuth20Service0.getDefaultScope());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn("-68'C9$r\"").when(defaultApi20_0).getRefreshTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "+j4", "1us.?*IS}NnPcf`m", ",valueFilter=", "8#dn.'", "", (OutputStream) null, "r", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth20Service0.createRefreshTokenRequest("+j4", "-68'C9$r\"");
      assertEquals("", oAuth20Service0.getResponseType());
      assertEquals("8#dn.'", oAuth20Service0.getDefaultScope());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Verb verb0 = Verb.POST;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("v)`a_(m").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "v)`a_(m", "v)`a_(m", "v)`a_(m", (String) null, "v)`a_(m", (OutputStream) null, "", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth20Service0.createAccessTokenPasswordGrantRequest("v)`a_(m", (String) null, "\"'");
      assertEquals("v)`a_(m", oAuth20Service0.getResponseType());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      Verb verb0 = Verb.HEAD;
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("state").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "grant_yp", "h}4g,CP", "h}4g,CP", "grant_yp", "H0!_B%jy", (OutputStream) null, "Problem accessing property `", jDKHttpClientConfig0, jDKHttpClient0);
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization("received response for access token", "client_credentials", "", (-274));
      oAuth20Service0.createAccessTokenDeviceAuthorizationGrantRequest(deviceAuthorization0);
      assertEquals("grant_yp", oAuth20Service0.getDefaultScope());
      assertEquals("H0!_B%jy", oAuth20Service0.getResponseType());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("access token").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn((BearerSignature) null).when(defaultApi20_0).getBearerSignature();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "k?VKA'", "_>", "k?VKA'", "k?VKA'", "3lp", (OutputStream) null, "_>", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthRequest oAuthRequest0 = oAuth20Service0.createAccessTokenClientCredentialsGrantRequest("=");
      // Undeclared exception!
      try { 
        oAuth20Service0.signRequest((String) null, oAuthRequest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((BearerSignature) null).when(defaultApi20_0).getBearerSignature();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", "", "revoke token", (String) null, "authorization_pending", (OutputStream) null, "", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken("wWA", "$Q6");
      Verb verb0 = Verb.TRACE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "revoke token");
      // Undeclared exception!
      try { 
        oAuth20Service0.signRequest(oAuth2AccessToken0, oAuthRequest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      MockFile mockFile0 = new MockFile("accrss token prssword grant", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "");
      oAuthRequest0.setCharset("com.fasterxml.jackson.databind.deser.CreatorProperty");
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "accrss token prssword grant", "accrss token prssword grant", "", "", "AnnotationIntrospector returned serializer definition of type ", mockPrintStream0, "55R*7 c<w3h", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.sendAccessTokenRequestSync(oAuthRequest0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported Charset: com.fasterxml.jackson.databind.deser.CreatorProperty
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("access token").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "k?VKA'", "_>", "k?VKA'", "k?VKA'", "13\"J^A_E", (OutputStream) null, "_>", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthRequest oAuthRequest0 = oAuth20Service0.createAccessTokenClientCredentialsGrantRequest("=");
      try { 
        oAuth20Service0.sendAccessTokenRequestSync(oAuthRequest0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: access token
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "fa;ALC#mNz", "uw_4P/5rAuk06(s", "Device Authorization Codes", "uw_4P/5rAuk06(s", "uw_4P/5rAuk06(s", bufferedOutputStream0, (String) null, (HttpClientConfig) null, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.sendAccessTokenRequestSync((OAuthRequest) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getDeviceAuthorizationEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "k?VKA'", "-", "k?VKA'", "k?VKA'", "3lp", (OutputStream) null, "-", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthRequest oAuthRequest0 = oAuth20Service0.createDeviceAuthorizationCodesRequest("@");
      // Undeclared exception!
      try { 
        oAuth20Service0.sendAccessTokenRequestSync(oAuthRequest0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0, true);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "iQcNDdM!|Uls8Mo4", "iQcNDdM!|Uls8Mo4", "", "B_+Lv&", "swI;@9Ml]4T", mockPrintStream0, "com.github.scribejava.core.oauth.OAuth20Service$4", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.sendAccessTokenRequestAsync((OAuthRequest) null, oAuthAsyncRequestCallback0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Verb verb0 = Verb.PUT;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "+j4", "1us.?*IS}NnPcf`m", ",valueFilter=", "8#dn.'", "", (OutputStream) null, "r", jDKHttpClientConfig0, jDKHttpClient0);
      AccessTokenRequestParams accessTokenRequestParams0 = new AccessTokenRequestParams("");
      OAuthRequest oAuthRequest0 = oAuth20Service0.createAccessTokenRequest(accessTokenRequestParams0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.sendAccessTokenRequestAsync(oAuthRequest0, oAuthAsyncRequestCallback0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Verb verb0 = Verb.GET;
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", "", "revoke token", (String) null, "authorization_pending", (OutputStream) null, "", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "revoke token");
      oAuthRequest0.setCharset("$Q6");
      // Undeclared exception!
      try { 
        oAuth20Service0.sendAccessTokenRequestAsync(oAuthRequest0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported Charset: $Q6
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", "", "rvoke token", "", "", (OutputStream) null, "", jDKHttpClientConfig0, jDKHttpClient0);
      Verb verb0 = Verb.TRACE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "rvoke token");
      File file0 = MockFile.createTempFile("&)UBZ\"!Kc\"", "U)a&&Ef0L.FV/KQ4");
      oAuthRequest0.setPayload(file0);
      // Undeclared exception!
      try { 
        oAuth20Service0.sendAccessTokenRequestAsync(oAuthRequest0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // JDKHttpClient does not support File payload for the moment
         //
         verifyException("com.github.scribejava.core.httpclient.jdk.JDKHttpClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      Verb verb0 = Verb.DELETE;
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, (String) null, "I(`", "4", "4", (String) null, pipedOutputStream0, "", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "4");
      // Undeclared exception!
      try { 
        oAuth20Service0.sendAccessTokenRequestAsync(oAuthRequest0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // there were problems while writting to the debug stream
         //
         verifyException("com.github.scribejava.core.oauth.OAuthService", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getDeviceAuthorizationEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "k?VKA'", "", "k?VKA'", "k?VKA'", "3lp", (OutputStream) null, "", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthRequest oAuthRequest0 = oAuth20Service0.createDeviceAuthorizationCodesRequest("@Q4._& 3,a=G\"R^`:\"");
      // Undeclared exception!
      try { 
        oAuth20Service0.sendAccessTokenRequestAsync(oAuthRequest0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((ClientAuthentication) null).when(defaultApi20_0).getClientAuthentication();
      doReturn((String) null).when(defaultApi20_0).getRevokeTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, (String) null, (String) null, (String) null, (String) null, "Avv:aLw'NqQRgjjB-", (OutputStream) null, "Avv:aLw'NqQRgjjB-", jDKHttpClientConfig0, jDKHttpClient0);
      TokenTypeHint tokenTypeHint0 = TokenTypeHint.ACCESS_TOKEN;
      // Undeclared exception!
      try { 
        oAuth20Service0.revokeTokenAsync("", tokenTypeHint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn((String) null).when(defaultApi20_0).getRevokeTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "+j4", "1us.?*IS}NnPcf`m", ",valueFilter=", "8#dn.'", "", (OutputStream) null, "r", jDKHttpClientConfig0, jDKHttpClient0);
      TokenTypeHint tokenTypeHint0 = TokenTypeHint.ACCESS_TOKEN;
      // Undeclared exception!
      try { 
        oAuth20Service0.revokeTokenAsync("", tokenTypeHint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((ClientAuthentication) null).when(defaultApi20_0).getClientAuthentication();
      doReturn((String) null).when(defaultApi20_0).getRevokeTokenEndpoint();
      MockPrintStream mockPrintStream0 = new MockPrintStream("Avk/5+n7Pg^");
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, (String) null, " (from class ", ">", (String) null, " (from class ", mockPrintStream0, "@ Lh?T!)_}$2I9", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.revokeTokenAsync("Avk/5+n7Pg^");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn("&u~OF").when(defaultApi20_0).getRevokeTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "grant_type", "h}4g,CP", "h}4g,CP", "grant_type", "H0!_B%jy", (OutputStream) null, "Problem accessing property '", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.revokeTokenAsync((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn((String) null).when(defaultApi20_0).getRevokeTokenEndpoint();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(110);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "com.fasterxml.jackson.databind.ser.std.NumberSerializers$ShortSerializer", "com.fasterxml.jackson.databind.ser.std.NumberSerializers$ShortSerializer", "com.fasterxml.jackson.databind.ser.std.NumberSerializers$ShortSerializer", "com.fasterxml.jackson.databind.ser.std.NumberSerializers$ShortSerializer", "com.fasterxml.jackson.databind.ser.std.NumberSerializers$ShortSerializer", byteArrayOutputStream0, "", jDKHttpClientConfig0, (HttpClient) null);
      TokenTypeHint tokenTypeHint0 = TokenTypeHint.REFRESH_TOKEN;
      // Undeclared exception!
      try { 
        oAuth20Service0.revokeToken("code_verifier", tokenTypeHint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn("{F?GH\":'G<8?").when(defaultApi20_0).getRevokeTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", "", "", "temporarily_unavailable", "=F5TyJ", (OutputStream) null, "OtherScaar", jDKHttpClientConfig0, jDKHttpClient0);
      TokenTypeHint tokenTypeHint0 = TokenTypeHint.REFRESH_TOKEN;
      try { 
        oAuth20Service0.revokeToken("=F5TyJ", tokenTypeHint0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: {F?GH\":'G<8?
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((ClientAuthentication) null).when(defaultApi20_0).getClientAuthentication();
      doReturn((String) null).when(defaultApi20_0).getRevokeTokenEndpoint();
      MockFile mockFile0 = new MockFile("OX@IT#]l>w");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "cpgFG{^q0X_0[hB", " request with body params [%s], query string params [%s]", "", "", "cpgFG{^q0X_0[hB", mockPrintStream0, "OX@IT#]l>w", jDKHttpClientConfig0, jDKHttpClient0);
      TokenTypeHint tokenTypeHint0 = TokenTypeHint.ACCESS_TOKEN;
      // Undeclared exception!
      try { 
        oAuth20Service0.revokeToken(" request with body params [%s], query string params [%s]", tokenTypeHint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn((String) null).when(defaultApi20_0).getRevokeTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "k?VKA'", "_>", "k?VKA'", "k?VKA'", "3lp", (OutputStream) null, "_>", jDKHttpClientConfig0, jDKHttpClient0);
      TokenTypeHint tokenTypeHint0 = TokenTypeHint.ACCESS_TOKEN;
      // Undeclared exception!
      try { 
        oAuth20Service0.revokeToken("got AccessTokenDeviceAuthorizationGrant response", tokenTypeHint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn((String) null).when(defaultApi20_0).getRevokeTokenEndpoint();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Not a subtype");
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "u%6-Wxx-E 6", "u%6-Wxx-E 6", "password", "Not a subtype", "oYV;MXiJ", mockFileOutputStream0, "password", jDKHttpClientConfig0, (HttpClient) null);
      TokenTypeHint tokenTypeHint0 = TokenTypeHint.ACCESS_TOKEN;
      // Undeclared exception!
      try { 
        oAuth20Service0.revokeToken("fXOV!wjz<5]\"", (OAuthAsyncRequestCallback<Void>) null, tokenTypeHint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((ClientAuthentication) null).when(defaultApi20_0).getClientAuthentication();
      doReturn((String) null).when(defaultApi20_0).getRevokeTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "grant_type", "h}4g,CP", "h}4g,CP", "grant_type", "H0!_B%jy", (OutputStream) null, "Problem accessing property '", jDKHttpClientConfig0, jDKHttpClient0);
      TokenTypeHint tokenTypeHint0 = TokenTypeHint.REFRESH_TOKEN;
      // Undeclared exception!
      try { 
        oAuth20Service0.revokeToken("", (OAuthAsyncRequestCallback<Void>) null, tokenTypeHint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn((String) null).when(defaultApi20_0).getRevokeTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", "B<", "E?~Y0d~", "", "cVo", (OutputStream) null, "", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<Void> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<Void>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      TokenTypeHint tokenTypeHint0 = TokenTypeHint.REFRESH_TOKEN;
      // Undeclared exception!
      try { 
        oAuth20Service0.revokeToken("DeserializationProblemHandler.handleInstantiationProblem() for type %s returned value of type %s", oAuthAsyncRequestCallback0, tokenTypeHint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn("").when(defaultApi20_0).getRevokeTokenEndpoint();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Not a subtype");
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "[%6{Wxx#E 6", "[%6{Wxx#E 6", "password", "Not a subtype", "oYV;MXiJ", mockFileOutputStream0, "password", jDKHttpClientConfig0, (HttpClient) null);
      // Undeclared exception!
      try { 
        oAuth20Service0.revokeToken("oYV;MXiJ", (OAuthAsyncRequestCallback<Void>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((ClientAuthentication) null).when(defaultApi20_0).getClientAuthentication();
      doReturn((String) null).when(defaultApi20_0).getRevokeTokenEndpoint();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Not a subtype");
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "[%6{Wxx#E 6", "[%6{Wxx#E 6", "password", "Not a subtype", "oYV;MXiJ", mockFileOutputStream0, "password", jDKHttpClientConfig0, (HttpClient) null);
      // Undeclared exception!
      try { 
        oAuth20Service0.revokeToken("oYV;MXiJ", (OAuthAsyncRequestCallback<Void>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn((String) null).when(defaultApi20_0).getRevokeTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "USE_BASE_TYPE_AS_DEFAULT_IMPL", "USE_BASE_TYPE_AS_DEFAULT_IMPL", "v'?9];m;fSQTcg3.%8", (String) null, "3'FI<\"y7lH8?!kyEmX>", (OutputStream) null, "v'?9];m;fSQTcg3.%8", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.revokeToken("send request for access token synchronously to %s", (OAuthAsyncRequestCallback<Void>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn("received response for access token").when(defaultApi20_0).getRevokeTokenEndpoint();
      MockPrintStream mockPrintStream0 = new MockPrintStream("C(h]K1");
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "_S(@XWs5za", "_S(@XWs5za", "_S(@XWs5za", "|U#@GPUa-a31IDI_U", "C(h]K1", mockPrintStream0, "', 'intervalSeconds'='", (HttpClientConfig) null, (HttpClient) null);
      // Undeclared exception!
      try { 
        oAuth20Service0.revokeToken("com.github.scribejava.core.oauth.OAuth20Service$4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((ClientAuthentication) null).when(defaultApi20_0).getClientAuthentication();
      doReturn((String) null).when(defaultApi20_0).getRevokeTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "g<\"c@_", "client_id", "g<\"c@_", "g<\"c@_", "AUTO_DETECT_CREATORS", (OutputStream) null, "FLUSH_AFTER_WRITE_VALUE", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.revokeToken("Too few bytes available: missing ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn((String) null).when(defaultApi20_0).getRevokeTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "+j4", "1us.?*IS}NnPcf`m", ",valueFilter=", "8#dn.'", "", (OutputStream) null, "r", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.revokeToken("1us.?*IS}NnPcf`m");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Verb verb0 = Verb.PUT;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn("").when(defaultApi20_0).getRefreshTokenEndpoint();
      MockFile mockFile0 = new MockFile("Oj%a|\"l'6r4gc)#L");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "Oj%a|\"l'6r4gc)#L", "com.fasterxml.jackson.annotation.JsonFormat$Features", "+`ES<Nnr", "Oj%a|\"l'6r4gc)#L", "<", mockPrintStream0, "9'jl,GVl{3Qe}qA", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.refreshAccessTokenAsync("Oj%a|\"l'6r4gc)#L", "+`ES<Nnr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      doReturn((ClientAuthentication) null).when(defaultApi20_0).getClientAuthentication();
      doReturn((String) null).when(defaultApi20_0).getRefreshTokenEndpoint();
      MockFile mockFile0 = new MockFile("Oj%a|\"l'6r4gc)#L");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "Oj%a|\"l'6r4gc)#L", "com.fasterxml.jackson.annotation.JsonFormat$Features", "+`ES<Nnr", "Oj%a|\"l'6r4gc)#L", "<", mockPrintStream0, "9'jl,GVl{3Qe}qA", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.refreshAccessTokenAsync("Oj%a|\"l'6r4gc)#L", "+`ES<Nnr");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Verb verb0 = Verb.TRACE;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      String string0 = "";
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn("").when(defaultApi20_0).getRefreshTokenEndpoint();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", "", string0, string0, "com.fasterxml.jackson.databind.BeanDescription", pipedOutputStream0, "com.fasterxml.jackson.databind.BeanDescription", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.refreshAccessTokenAsync("com.fasterxml.jackson.databind.BeanDescription");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      doReturn((ClientAuthentication) null).when(defaultApi20_0).getClientAuthentication();
      doReturn((String) null).when(defaultApi20_0).getRefreshTokenEndpoint();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", "", "``v9O[Udv|/)|", "``v9O[Udv|/)|", "com.fasterxml.jackson.databind.BeanDescription", pipedOutputStream0, "com.fasterxml.jackson.databind.BeanDescription", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.refreshAccessTokenAsync("com.fasterxml.jackson.databind.BeanDescription");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      MockPrintStream mockPrintStream0 = new MockPrintStream("C(h]K1");
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "_S(@XWs5za", "_S(@XWs5za", "_S(@XWs5za", "|U#@GPUa-a31IDI_U", "C(h]K1", mockPrintStream0, "', 'intervalSeconds'='", (HttpClientConfig) null, (HttpClient) null);
      // Undeclared exception!
      try { 
        oAuth20Service0.refreshAccessTokenAsync((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The refreshToken cannot be null or empty
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Verb verb0 = Verb.PATCH;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn("Crs").when(defaultApi20_0).getRefreshTokenEndpoint();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("CAF]oM");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "com.github.scribejava.core.oauth.OAuth20Service$1", "99q5QCDs", (String) null, "com.github.scribejava.core.oauth.OAuth20Service$1", (String) null, mockPrintStream0, "CAF]oM", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.refreshAccessToken("p", "6zEJF1=,&L<6(<~@", oAuthAsyncRequestCallback0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      doReturn((ClientAuthentication) null).when(defaultApi20_0).getClientAuthentication();
      doReturn((String) null).when(defaultApi20_0).getRefreshTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "USE_BASE_TYPE_AS_DEFAULT_IMPL", "USE_BASE_TYPE_AS_DEFAULT_IMPL", "v'?9];m;fSQTcg3.%8", (String) null, "3'FI<\"y7lH8?!kyEmX>", (OutputStream) null, "v'?9];m;fSQTcg3.%8", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.refreshAccessToken("3'FI<\"y7lH8?!kyEmX>", "9UGx4", (OAuthAsyncRequestCallback<OAuth2AccessToken>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Verb verb0 = Verb.TRACE;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn((String) null).when(defaultApi20_0).getRefreshTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", "B<", "E?~Y0d~", "", "E?~Y0d~", (OutputStream) null, "", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.refreshAccessToken("Device Authorization Codes", "GFW>Cg2IIDJX[u", oAuthAsyncRequestCallback0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn("device_code").when(defaultApi20_0).getRefreshTokenEndpoint();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" does not support schema of type '", false);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "device_code", " does not support schema of type '", "device_code", " does not support schema of type '", " does not support schema of type '", mockFileOutputStream0, "device_code", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.refreshAccessToken(" does not support schema of type '", "device_code");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn("access token").when(defaultApi20_0).getRefreshTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "k?VKA'", "_>", "k?VKA'", "k?VKA'", "3lp", (OutputStream) null, "_>", jDKHttpClientConfig0, jDKHttpClient0);
      try { 
        oAuth20Service0.refreshAccessToken("com.github.scribejava.core.oauth.OAuth20Service", "1$G4cAM`Y}l\"(3=wE");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: access token?scope=1%24G4cAM%60Y%7Dl%22%283%3DwE&refresh_token=com.github.scribejava.core.oauth.OAuth20Service&grant_type=refresh_token
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      doReturn((ClientAuthentication) null).when(defaultApi20_0).getClientAuthentication();
      doReturn((String) null).when(defaultApi20_0).getRefreshTokenEndpoint();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" does not support schema of type '", true);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "Unexpected token '", " does not support schema of type '", "com.fasterxml.jackson.databind.ser.std.StdSerializer", " does not support schema of type '", " does not support schema of type '", mockFileOutputStream0, "com.fasterxml.jackson.databind.ser.std.StdSerializer", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.refreshAccessToken(" does not support schema of type '", "Unexpected token '");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Verb verb0 = Verb.POST;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn("").when(defaultApi20_0).getRefreshTokenEndpoint();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "gTDtni%0pg)5 r+0r8G", "\"ED|lEBtz/ZI[a", "gTDtni%0pg)5 r+0r8G", (String) null, (String) null, pipedOutputStream0, (String) null, jDKHttpClientConfig0, (HttpClient) null);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.refreshAccessToken("<)-Y|6Y}_&Y", oAuthAsyncRequestCallback0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      doReturn((ClientAuthentication) null).when(defaultApi20_0).getClientAuthentication();
      doReturn((String) null).when(defaultApi20_0).getRefreshTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "E5]_", "1us.?*IS}NnPcf`m", ",valueFilter=", "8#dn.'", "", (OutputStream) null, "r", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.refreshAccessToken(",valueFilter=", oAuthAsyncRequestCallback0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Verb verb0 = Verb.PATCH;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      doReturn((ClientAuthentication) null).when(defaultApi20_0).getClientAuthentication();
      doReturn((String) null).when(defaultApi20_0).getRefreshTokenEndpoint();
      MockPrintStream mockPrintStream0 = new MockPrintStream(":");
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ":", ":", ":", ":", ":", mockPrintStream0, ":", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.refreshAccessToken(":");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Verb verb0 = Verb.POST;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn("5e>+>\"/T=k3G").when(defaultApi20_0).getRefreshTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "g{X6>J@fSal5[", "g{X6>J@fSal5[", "g{X6>J@fSal5[", (String) null, "username", (OutputStream) null, "username", jDKHttpClientConfig0, jDKHttpClient0);
      try { 
        oAuth20Service0.refreshAccessToken("got DeviceAuthorizationCodes response");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: 5e>+>\"/T=k3G
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(5104);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$EnumKD", "com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$EnumKD", "{9g]kl(S", "5t0(`kh<!V", "B|'2", dataOutputStream0, "5t0(`kh<!V", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.refreshAccessToken("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The refreshToken cannot be null or empty
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Verb verb0 = Verb.HEAD;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("access token").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "k?VKA'", "_>", "k?VKA'", "k?VKA'", "3lp", (OutputStream) null, "_>", jDKHttpClientConfig0, jDKHttpClient0);
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization("bvRWKX~?", "Strange Reference type ", "com.github.scribejava.core.oauth.OAuth20Service$3", (-3));
      try { 
        oAuth20Service0.pollAccessTokenDeviceAuthorizationGrant(deviceAuthorization0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: access token?grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Adevice_code&device_code=bvRWKX~%3F
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", "B<", "E?~Y0d~", "", "cVo", (OutputStream) null, "", jDKHttpClientConfig0, jDKHttpClient0);
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization("E?~Y0d~", "cVo", "B<", 1000);
      // Undeclared exception!
      try { 
        oAuth20Service0.pollAccessTokenDeviceAuthorizationGrant(deviceAuthorization0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Verb verb0 = Verb.TRACE;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "gTDtni%0pg)5 r+0r8G", "\"ED|lEBtz/ZI[a", "gTDtni%0pg)5 r+0r8G", (String) null, (String) null, pipedOutputStream0, (String) null, jDKHttpClientConfig0, (HttpClient) null);
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization("scope", "0pp", "com.fasterxml.jackson.databind.ser.std.NumberSerializers$ShortSerializer", (-4));
      // Undeclared exception!
      try { 
        oAuth20Service0.pollAccessTokenDeviceAuthorizationGrant(deviceAuthorization0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      MockFile mockFile0 = new MockFile("accrss token prssword grant", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "");
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "accrss token prssword grant", "accrss token prssword grant", "AnnotationIntrospector returned serializer definition of type ", "AnnotationIntrospector returned serializer definition of type ", "AnnotationIntrospector returned serializer definition of type ", mockPrintStream0, "55R*7 c<w3h", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.logRequestWithParams("", oAuthRequest0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      MockFile mockFile0 = new MockFile("9", "client_credentials");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "client_credentials", "3dLSB?)R HImI%FzE", "3dLSB?)R HImI%FzE", "client_credentials", "9", mockFileOutputStream0, "9", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.logRequestWithParams("$uc8dej/J@", (OAuthRequest) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service((DefaultApi20) null, "S", "urn:ietf:params:oauth:grant-type:device_code", "urn:ietf:params:oauth:grant-type:device_code", "-.LgCC!", "urn:ietf:params:oauth:grant-type:device_code", (OutputStream) null, "-.LgCC!", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getDeviceAuthorizationCodesAsync("<~HT^L9:m iP");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getDeviceAuthorizationEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "^Se%XkUR\"?\":", "yXmdvJqgI6\"!", "3'FI<\"y7lH8?!kyEmX>", "yXmdvJqgI6\"!", "{>xf8^", (OutputStream) null, "etQ+\"v{H!'L_]%erQ", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getDeviceAuthorizationCodesAsync(".HjT'du");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getDeviceAuthorizationEndpoint();
      MockPrintStream mockPrintStream0 = new MockPrintStream("M&?tUYy 1B#\"?y3*m_");
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "M&?tUYy 1B#\"?y3*m_", "M&?tUYy 1B#\"?y3*m_", "M&?tUYy 1B#\"?y3*m_", "M&?tUYy 1B#\"?y3*m_", "M&?tUYy 1B#\"?y3*m_", mockPrintStream0, "W:yIm<LGI^K2", jDKHttpClientConfig0, (HttpClient) null);
      // Undeclared exception!
      try { 
        oAuth20Service0.getDeviceAuthorizationCodesAsync();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service((DefaultApi20) null, "ZlYs", "ZlYs", "ju@1j4c->$3d'A", "", "ZlYs", pipedOutputStream0, "client_id", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getDeviceAuthorizationCodesAsync();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getDeviceAuthorizationEndpoint();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", "AMb-owhSw!S", "'gegNV", "B<", "B<", (OutputStream) null, "code_challenge", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getDeviceAuthorizationCodesAsync();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getDeviceAuthorizationEndpoint();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("!SOxzj/&-Zkl{^jyd", false);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "s", "s", "com.fasterxml.jackson.databind.ser.std.NumberSerializers$ShortSerializer", "nB(p5s.GbaCEPE", "client_id", mockFileOutputStream0, "WRAP_EXCEPTIONS", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<DeviceAuthorization> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<DeviceAuthorization>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.getDeviceAuthorizationCodes("Numeric value (%s) out of range of Java byte", oAuthAsyncRequestCallback0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service((DefaultApi20) null, "", "", "code", "", "[null]", mockPrintStream0, "", (HttpClientConfig) null, jDKHttpClient0);
      OAuthAsyncRequestCallback<DeviceAuthorization> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<DeviceAuthorization>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.getDeviceAuthorizationCodes((String) null, oAuthAsyncRequestCallback0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getDeviceAuthorizationEndpoint();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("&sAzZqIi`M");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "Sr4~Be]LmB", "Sr4~Be]LmB", "Sr4~Be]LmB", "Sr4~Be]LmB", "Sr4~Be]LmB", mockPrintStream0, "Sr4~Be]LmB", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getDeviceAuthorizationCodes("&sAzZqIi`M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("8#dn.'").when(defaultApi20_0).getAuthorizationUrl(anyString() , anyString() , anyString() , anyString() , anyString() , anyMap());
      doReturn("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", (String) null).when(defaultApi20_0).getDeviceAuthorizationEndpoint();
      doReturn("1us.?*IS}NnPcf`m").when(defaultApi20_0).toString();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", "E5]_", "", "", "", (OutputStream) null, "^FF% ^HH y=#0Gh`1Jz", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth20Service0.getAuthorizationUrl();
      OAuthAsyncRequestCallback<DeviceAuthorization> oAuthAsyncRequestCallback1 = (OAuthAsyncRequestCallback<DeviceAuthorization>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      oAuth20Service0.getDeviceAuthorizationCodes(oAuthAsyncRequestCallback1);
      // Undeclared exception!
      try { 
        oAuth20Service0.getDeviceAuthorizationCodesAsync(") not numeric, cannot use numeric value accessors");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(",!naDbO`F");
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service((DefaultApi20) null, "E}& .", "4C'nm*%!*:k_c'ppw", "E}& .", "4C'nm*%!*:k_c'ppw", ",!naDbO`F", mockPrintStream0, "4C'nm*%!*:k_c'ppw", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getDeviceAuthorizationCodes("com.github.scribejava.core.oauth.OAuth20Service$4");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getDeviceAuthorizationEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "grant_yp", "h}4g,CP", "h}4g,CP", "grant_yp", "H0!_B%jy", (OutputStream) null, "Problem accessing property `", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getDeviceAuthorizationCodes("H0!_B%jy");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getDeviceAuthorizationEndpoint();
      MockFile mockFile0 = new MockFile("U7W&Meduxl");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "h", "U7W&Meduxl", "h", "U7W&Meduxl", "U7W&Meduxl", mockFileOutputStream0, "revoke token", jDKHttpClientConfig0, (HttpClient) null);
      OAuthAsyncRequestCallback<DeviceAuthorization> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<DeviceAuthorization>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.getDeviceAuthorizationCodes(oAuthAsyncRequestCallback0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service((DefaultApi20) null, "", (String) null, "", "z\")!A>XJr]/,WK", "z\")!A>XJr]/,WK", mockPrintStream0, "z\")!A>XJr]/,WK", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<DeviceAuthorization> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<DeviceAuthorization>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.getDeviceAuthorizationCodes(oAuthAsyncRequestCallback0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getDeviceAuthorizationEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", "B<", "E?~Y0d~", "", "cVo", (OutputStream) null, "", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<DeviceAuthorization> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<DeviceAuthorization>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.getDeviceAuthorizationCodes(oAuthAsyncRequestCallback0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getDeviceAuthorizationEndpoint();
      MockFile mockFile0 = new MockFile("access token password grant");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient((JDKHttpClientConfig) null);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "access token password grant", "access token password grant", "", "", (String) null, mockPrintStream0, "55R*7 c<w3h", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getDeviceAuthorizationCodes();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("no default constructor found");
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service((DefaultApi20) null, "{&\"H(u!0D@~*", "{&\"H(u!0D@~*", "no default constructor found", "com.fasterxml.jackson.core.PrettyPrinter", "{&\"H(u!0D@~*", mockPrintStream0, "com.fasterxml.jackson.core.PrettyPrinter", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getDeviceAuthorizationCodes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getDeviceAuthorizationEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "(was ", "(was ", "(was ", "($<G`UpU;7vK#yL", "(was ", (OutputStream) null, "($<G`UpU;7vK#yL", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getDeviceAuthorizationCodes();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service((DefaultApi20) null, "ZlYs", "ZlYs", "ju@1j4c->$3d'A", "", "ZlYs", pipedOutputStream0, "client_id", jDKHttpClientConfig0, jDKHttpClient0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        oAuth20Service0.getAuthorizationUrl((Map<String, String>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.AuthorizationUrlBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      File file0 = MockFile.createTempFile("2.0", "KmABvv`2");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service((DefaultApi20) null, "2.0", "am2<Ydl|>Uk4E7!=O", "KmABvv`2", "2.0", "wL|a?jS", mockPrintStream0, (String) null, jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAuthorizationUrl("com.github.scribejava.core.oauth.OAuth20Service$4");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.AuthorizationUrlBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      File file0 = MockFile.createTempFile("Muy7c;DZ[B<STw:B3Y", "LP-'s+l>A/~AEjme ;X");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service((DefaultApi20) null, "com.fasterxml.jackson.core.JsonFactoryBuilder", "LP-'s+l>A/~AEjme ;X", "LP-'s+l>A/~AEjme ;X", "Muy7c;DZ[B<STw:B3Y", "com.fasterxml.jackson.core.JsonFactoryBuilder", mockFileOutputStream0, "", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAuthorizationUrl((PKCE) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.AuthorizationUrlBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service((DefaultApi20) null, "]s^.>@14i@Q)c", "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket", "=", "UuKc:DzBW|HRo", (OutputStream) null, ";", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAuthorizationUrl();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.AuthorizationUrlBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("`,yY'O&{0\n@NY_", false);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "db^o:", "db^o:", "`,yY'O&{0\n@NY_", "`,yY'O&{0\n@NY_", "`,yY'O&{0\n@NY_", mockFileOutputStream0, "bsADFjvIgFgrq~", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenPasswordGrantAsync("n\u0004PFn?[3pE2B_L,{", "`,yY'O&{0\n@NY_", "", oAuthAsyncRequestCallback0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      MockPrintStream mockPrintStream0 = new MockPrintStream("xfER]vg-e!/3");
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", "", "", "", "", mockPrintStream0, "", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenPasswordGrantAsync((String) null, "", (String) null, oAuthAsyncRequestCallback0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      MockFile mockFile0 = new MockFile("Oj%a|\"l'6r4gc)#L");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      Verb verb0 = Verb.PATCH;
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("9'jl,GVl{3Qe}qA").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "}", "Could not resolve type id '%s' as a subtype of %s", "<", (String) null, "9'jl,GVl{3Qe}qA", mockPrintStream0, "23`9", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenPasswordGrantAsync("", "Could not resolve type id '%s' as a subtype of %s", "23`9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "4xhQj$|v8V$5tVa", "4xhQj$|v8V$5tVa", "4xhQj$|v8V$5tVa", "temporarily_unavailable", "=F5TyJ", (OutputStream) null, "OtherScalar", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenPasswordGrantAsync("OtherScalar", "OtherScalar", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("access tokn").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "k?VKA'", "", "k?VKA'", "k?VKA'", "3lp", (OutputStream) null, "", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenPasswordGrantAsync("@", (String) null, "=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Verb verb0 = Verb.TRACE;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(":").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "f+a;ALC#mNz", "uw_4P/5rAuk06(s", "Device Authorization Codes", "uw_4P/5rAuk06(s", "uw_4P/5rAuk06(s", bufferedOutputStream0, (String) null, (HttpClientConfig) null, jDKHttpClient0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenPasswordGrantAsync(") now exceeds maximum, ", "zawLtF.4$o$m.Q", oAuthAsyncRequestCallback0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Verb verb0 = Verb.PUT;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "+j4", "-68'C9$r\"", ",valueFilter=", "8#dn.'", "", (OutputStream) null, "r", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenPasswordGrantAsync("", "-68'C9$r\"", oAuthAsyncRequestCallback0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      Verb verb0 = Verb.HEAD;
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("21DiLU");
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "[%6{Wxx#E 6", "[%6{Wxx#E 6", "password", "21DiLU", "oYV;MXiJ", mockFileOutputStream0, "password", jDKHttpClientConfig0, (HttpClient) null);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenPasswordGrantAsync("0@vU`8W5/-:wDZL?R", ".%!V4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Not a subtype");
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "[%6{Wxx#E 6", "[%6{Wxx#E 6", "password", "Not a subtype", "oYV;MXiJ", mockFileOutputStream0, "password", jDKHttpClientConfig0, (HttpClient) null);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenPasswordGrantAsync("0@vU`8W5/-:wDZL?R", ".%!V4");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Verb verb0 = Verb.TRACE;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "Device Authorization Codes", "Device Authorization Codes", "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers$AtomicBooleanSerializer", "Device Authorization Codes", "Vp_", mockPrintStream0, "Device Authorization Codes", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenPasswordGrant(":", ":", ":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("access tokn").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "access tokn", "access tokn", "access tokn", "access tokn", "access tokn", (OutputStream) null, "access tokn", jDKHttpClientConfig0, jDKHttpClient0);
      try { 
        oAuth20Service0.getAccessTokenPasswordGrant("access tokn", "access tokn", "access tokn");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: access tokn
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service((DefaultApi20) null, "D'DcK{YZ'TUC?L%/uLG", "D'DcK{YZ'TUC?L%/uLG", "J@O5", "\u0006HM_^f`", "D'DcK{YZ'TUC?L%/uLG", (OutputStream) null, "\u0006HM_^f`", (HttpClientConfig) null, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenPasswordGrant("AEI)\"1Y=", "c|18Ozs)6E(Mv", "\u0006HM_^f`");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" does not support schema of type '", false);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "devicbe_code", " does not support schema of type '", "devicbe_code", " does not support schema of type '", " does not support schema of type '", mockFileOutputStream0, "devicbe_code", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenPasswordGrant("devicbe_code", " does not support schema of type '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", "", "", (String) null, "send request for access token synchronously to %s", (OutputStream) null, "E?~Y0d~", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenPasswordGrant("*1gDD3Mw%F!", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      ClientAuthentication clientAuthentication1 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      ClientAuthentication clientAuthentication2 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("access tokn", "access tokn", (String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0, verb0, verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0, clientAuthentication1, clientAuthentication2).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "k?VKA'", "", "k?VKA'", "k?VKA'", "3lp", (OutputStream) null, "", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth20Service0.createAccessTokenClientCredentialsGrantRequest("=");
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      oAuth20Service0.getAccessTokenClientCredentialsGrant(".,HKF9^b-J@!HtH", oAuthAsyncRequestCallback0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenPasswordGrant("3lp", "blank String (all whitespace)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3795);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", "", (String) null, "", "", byteArrayOutputStream0, "", jDKHttpClientConfig0, (HttpClient) null);
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization("", "Eg", "", (-619));
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenDeviceAuthorizationGrantAsync(deviceAuthorization0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Verb verb0 = Verb.PUT;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      ClientAuthentication clientAuthentication1 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("r", (String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0, verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0, clientAuthentication1).when(defaultApi20_0).getClientAuthentication();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "+j4", "BtUn", "1us.?*IS}NnPcf`m", "+j4", "", (OutputStream) null, ",valueFilter=", jDKHttpClientConfig0, jDKHttpClient0);
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization("E", "BtUn", "M5v", 1255);
      AccessTokenRequestParams accessTokenRequestParams0 = AccessTokenRequestParams.create("");
      oAuth20Service0.createAccessTokenRequest(accessTokenRequestParams0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenDeviceAuthorizationGrantAsync(deviceAuthorization0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", "", "", "0O(!O", "", pipedOutputStream0, "0O(!O", jDKHttpClientConfig0, jDKHttpClient0);
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization("Za]nU", "Za]nU", "com.fasterxml.jackson.databind.ser.BeanPropertyWriter", (-1428));
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenDeviceAuthorizationGrant(deviceAuthorization0, oAuthAsyncRequestCallback0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("access token").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "k?VKA'", "_>", "k?VKA'", "k?VKA'", "3lp", (OutputStream) null, "_>", jDKHttpClientConfig0, jDKHttpClient0);
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization("3lp", "]s^.>@14i@Q)c", "k?VKA'", (-2));
      try { 
        oAuth20Service0.getAccessTokenDeviceAuthorizationGrant(deviceAuthorization0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: access token?grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Adevice_code&device_code=3lp
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Verb verb0 = Verb.GET;
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("'gegNV").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", "B<", "E?~Y0d~", "", "E?~Y0d~", (OutputStream) null, "", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenDeviceAuthorizationGrant((DeviceAuthorization) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Verb verb0 = Verb.TRACE;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      MockPrintStream mockPrintStream0 = new MockPrintStream("uw_4P/5rAuk06(s");
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "urn:ietf:params:oauth:grant-type:device_code", "urn:ietf:params:oauth:grant-type:device_code", "com.fasterxml.jackson.databind.ser.std.StdJdSerializers$AtomicBooleanSerialzer", "urn:ietf:params:oauth:grant-type:device_code", "uw_4P/5rAuk06(s", mockPrintStream0, "urn:ietf:params:oauth:grant-type:device_code", jDKHttpClientConfig0, jDKHttpClient0);
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization("client_credentials", "Device Authorization Codes", (String) null, (-47));
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenDeviceAuthorizationGrant(deviceAuthorization0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Verb verb0 = Verb.TRACE;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(":").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      MockFile mockFile0 = new MockFile(":");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, (String) null, ":", "Device Authorization Codes", "Missing field (broken JDK (de)serialization?)", "i,K,", mockPrintStream0, "com.fasterxml.jackson.databind.exc.InvalidFormatException", (HttpClientConfig) null, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenClientCredentialsGrantAsync("i,K,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      doReturn((ClientAuthentication) null).when(defaultApi20_0).getClientAuthentication();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(filterOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, true);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "username", "", (String) null, "send request for access token asynchronously to %s", (String) null, mockPrintStream0, "send request for access token asynchronously to %s", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenClientCredentialsGrantAsync("ADJUST_DATES_TO_CONTEXT_TIME_ZONE");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Verb verb0 = Verb.GET;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      ClientAuthentication clientAuthentication1 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("opaPzy1 sXvE`QWOh#", (String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0, verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0, clientAuthentication1).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "USE_BASE_TYPE_AS_DEFAULT_IMPL", "USE_BASE_TYPE_AS_DEFAULT_IMPL", "v?9];m;fSQTc3.%8", (String) null, "3'FI<\"y7lH8?!kyEmX>", (OutputStream) null, "v?9];m;fSQTc3.%8", jDKHttpClientConfig0, jDKHttpClient0);
      AccessTokenRequestParams accessTokenRequestParams0 = AccessTokenRequestParams.create("");
      oAuth20Service0.getAccessToken(accessTokenRequestParams0, (OAuthAsyncRequestCallback<OAuth2AccessToken>) null);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenClientCredentialsGrantAsync((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, (String) null, "{ASM;neoFmkbeBVX6+", "got AccessTokenDeviceAuthorizationGrant response", "kyp", (String) null, pipedOutputStream0, "kyp", (HttpClientConfig) null, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenClientCredentialsGrantAsync();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Verb verb0 = Verb.GET;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "USE_BASE_TYPE_AS_DEFAULT_IMPL", "USE_BASE_TYPE_AS_DEFAULT_IMPL", "v'?9];m;fSQTcg3.%8", (String) null, "3'FI<\"y7lH8?!kyEmX>", (OutputStream) null, "v'?9];m;fSQTcg3.%8", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenClientCredentialsGrantAsync();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Verb verb0 = Verb.TRACE;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(":").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", ":U4sJKkOu\"H", (String) null, "", ":U4sJKkOu\"H", mockPrintStream0, ":", (HttpClientConfig) null, jDKHttpClient0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenClientCredentialsGrant("b K)AF@0Br*U<", oAuthAsyncRequestCallback0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("access token", "access token").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0, verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0, (ClientAuthentication) null).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "k?VKA'", "_>", "k?VKA'", "k?VKA'", "3lp", (OutputStream) null, "_>", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth20Service0.createAccessTokenClientCredentialsGrantRequest("=");
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenClientCredentialsGrant("Strange Reference type ", oAuthAsyncRequestCallback0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      ClientAuthentication clientAuthentication1 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("access token", (String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0, verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0, clientAuthentication1).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "k?VKA'", "_>", "k?VKA'", "k?VKA'", "3lp", (OutputStream) null, "_>", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth20Service0.createAccessTokenClientCredentialsGrantRequest("=");
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenClientCredentialsGrant("Strange Reference type ", oAuthAsyncRequestCallback0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Verb verb0 = Verb.TRACE;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "urn:ietf:params:oauth:grant-type:device_code", "urn:ietf:params:oauth:grant-type:device_code", "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers$AtomicBooleanSerializer", "urn:ietf:params:oauth:grant-type:device_code", "", mockPrintStream0, "urn:ietf:params:oauth:grant-type:device_code", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenClientCredentialsGrant("ChHIs4pJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      doReturn((ClientAuthentication) null).when(defaultApi20_0).getClientAuthentication();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "n1N_D", "n1N_D", "client_id", (String) null, "got DeviceAuthorizationCodes response", pipedOutputStream0, "", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenClientCredentialsGrant((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Verb verb0 = Verb.PUT;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", "B<", "E?~Y0d~", "", "E?~Y0d~", (OutputStream) null, "", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenClientCredentialsGrant("Device Authorization Codes");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Verb verb0 = Verb.GET;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "Unexpected IOException (of type %s): %s", "M&/c=~G%xnCf", "Unexpected IOException (of type %s): %s", "M&/c=~G%xnCf", "", mockPrintStream0, "", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenClientCredentialsGrant(oAuthAsyncRequestCallback0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      doReturn((ClientAuthentication) null).when(defaultApi20_0).getClientAuthentication();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "com.github.scribejava.core.oauth.OAuth20Service$4", "com.github.scribejava.core.oauth.OAuth20Service$4", "com.github.scribejava.core.oauth.OAuth20Service$4", "com.github.scribejava.core.oauth.OAuth20Service$4", "com.github.scribejava.core.oauth.OAuth20Service$4", byteArrayOutputStream0, "com.github.scribejava.core.oauth.OAuth20Service$4", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenClientCredentialsGrant(oAuthAsyncRequestCallback0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      Verb verb0 = Verb.HEAD;
      ClientAuthentication clientAuthentication1 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("state", (String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0, verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0, clientAuthentication1).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "grant_yp", "h}4g,CP", "h}4g,CP", "grant_yp", "H0!_B%jy", (OutputStream) null, "Problem accessing property `", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      oAuth20Service0.getAccessToken("/[:(EYa15i5g3", oAuthAsyncRequestCallback0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback1 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenClientCredentialsGrant(oAuthAsyncRequestCallback1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Verb verb0 = Verb.GET;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(110);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "com.fasterxml.jackson.databind.ser.std.NumberSerializers$ShortSerializer", "com.fasterxml.jackson.databind.ser.std.NumberSerializers$ShortSerializer", "com.fasterxml.jackson.databind.ser.std.NumberSerializers$ShortSerializer", "com.fasterxml.jackson.databind.ser.std.NumberSerializers$ShortSerializer", "com.fasterxml.jackson.databind.ser.std.NumberSerializers$ShortSerializer", byteArrayOutputStream0, "", jDKHttpClientConfig0, (HttpClient) null);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenClientCredentialsGrant();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      doReturn((ClientAuthentication) null).when(defaultApi20_0).getClientAuthentication();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", "E5]_", "", "", "", (OutputStream) null, "^FF% ^HH y=#0Gh`1Jz", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenClientCredentialsGrant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      Verb verb0 = Verb.HEAD;
      ClientAuthentication clientAuthentication1 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("state", (String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0, verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0, clientAuthentication1).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "grant_yp", "h}4g,CP", "h}4g,CP", "grant_yp", "H0!_B%jy", (OutputStream) null, "Problem accessing property `", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      oAuth20Service0.getAccessToken("/[:(EYa15i5g3", oAuthAsyncRequestCallback0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenClientCredentialsGrant();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "Tb Iylw[q", (String) null, "device_code", "", " does not support schema of type '", byteArrayOutputStream0, " does not support schema of type '", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenAsync("Tb Iylw[q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      doReturn((ClientAuthentication) null).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", "", "", "", "M5GsRZVNr", (OutputStream) null, (String) null, jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenAsync("refresh_token");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Verb verb0 = Verb.GET;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "USE_BASE_TYPE_AS_DEFAULT_IMPL", "USE_BASE_TYPE_AS_DEFAULT_IMPL", "v'?9];m;fSQTcg3.%8", (String) null, "3'FI<\"y7lH8?!kyEmX>", (OutputStream) null, "v'?9];m;fSQTcg3.%8", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenAsync("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Verb verb0 = Verb.PATCH;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("h (np54Vr%FF.NU1J", true);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", ",1|wi6rvxKNh", "h (np54Vr%FF.NU1J", "h (np54Vr%FF.NU1J", "h (np54Vr%FF.NU1J", mockFileOutputStream0, ",1|wi6rvxKNh", jDKHttpClientConfig0, jDKHttpClient0);
      AccessTokenRequestParams accessTokenRequestParams0 = AccessTokenRequestParams.create("");
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenAsync(accessTokenRequestParams0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      doReturn((ClientAuthentication) null).when(defaultApi20_0).getClientAuthentication();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("h (np54Vr%FF.NU1J", true);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", ",1|wi6rvxKNh", "h (np54Vr%FF.NU1J", "h (np54Vr%FF.NU1J", "h (np54Vr%FF.NU1J", mockFileOutputStream0, ",1|wi6rvxKNh", jDKHttpClientConfig0, jDKHttpClient0);
      AccessTokenRequestParams accessTokenRequestParams0 = AccessTokenRequestParams.create("");
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenAsync(accessTokenRequestParams0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Verb verb0 = Verb.TRACE;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "urn:ietf:params:oauth:grant-type:device_code", "urn:ietf:params:oauth:grant-type:device_code", "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers$AtomicBooleanSerializer", "urn:ietf:params:oauth:grant-type:device_code", "", mockPrintStream0, "urn:ietf:params:oauth:grant-type:device_code", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessToken("-f", oAuthAsyncRequestCallback0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      doReturn((ClientAuthentication) null).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", "", "t=tSIYs3N52", "", "revoke token", (OutputStream) null, "", jDKHttpClientConfig0, (HttpClient) null);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessToken("", oAuthAsyncRequestCallback0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Verb verb0 = Verb.GET;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "USE_BASE_TYPE_AS_DEFAULT_IMPL", "USE_BASE_TYPE_AS_DEFAULT_IMPL", "v'?9];m;fSQTcg3.%8", (String) null, "3'FI<\"y7lH8?!kyEmX>", (OutputStream) null, "v'?9];m;fSQTcg3.%8", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessToken((String) null, (OAuthAsyncRequestCallback<OAuth2AccessToken>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Verb verb0 = Verb.HEAD;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("Jw-0[").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      MockPrintStream mockPrintStream0 = new MockPrintStream("not a valid `double` value (as String to convert)");
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "+wu/q:1!", "+wu/q:1!", "", "NY|-", (String) null, mockPrintStream0, "com.github.scribejava.core.oauth.OAuth20Service", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessToken("kheX7tyDh8p=f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service((DefaultApi20) null, ">tBljHfprhu)hTI", ">tBljHfprhu)hTI", ">tBljHfprhu)hTI", ">tBljHfprhu)hTI", ">tBljHfprhu)hTI", byteArrayOutputStream0, ">tBljHfprhu)hTI", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessToken(">tBljHfprhu)hTI");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("access tokn").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "k?VKA'", "-", "k?VKA'", "k?VKA'", "3lp", (OutputStream) null, "-", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessToken((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      MockFile mockFile0 = new MockFile("Oj%a|\"l'6r4gc)#L");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      Verb verb0 = Verb.PATCH;
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("9'jl,GVl{3Qe}qA").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "}", "Could not resolve type id '%s' as a subtype of %s", "<", (String) null, "9'jl,GVl{3Qe}qA", mockPrintStream0, "23`9", jDKHttpClientConfig0, jDKHttpClient0);
      AccessTokenRequestParams accessTokenRequestParams0 = new AccessTokenRequestParams("Expected space separting root-leve values");
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessToken(accessTokenRequestParams0, oAuthAsyncRequestCallback0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      doReturn((ClientAuthentication) null).when(defaultApi20_0).getClientAuthentication();
      MockFile mockFile0 = new MockFile("access token password grant");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient((JDKHttpClientConfig) null);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "access token password grant", "access token password grant", "", "", (String) null, mockPrintStream0, "55R*7 c<w3h", jDKHttpClientConfig0, jDKHttpClient0);
      AccessTokenRequestParams accessTokenRequestParams0 = new AccessTokenRequestParams("Zd(zr%/K(>1");
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessToken(accessTokenRequestParams0, oAuthAsyncRequestCallback0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Verb verb0 = Verb.GET;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "gTDtni%0pg)5 r+0r8G", "\"ED|lEBtz/ZI[a", "gTDtni%0pg)5 r+0r8G", (String) null, (String) null, pipedOutputStream0, (String) null, jDKHttpClientConfig0, (HttpClient) null);
      AccessTokenRequestParams accessTokenRequestParams0 = AccessTokenRequestParams.create((String) null);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessToken(accessTokenRequestParams0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      Verb verb0 = Verb.POST;
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", "", "Problem accessing property '", "", "B", (OutputStream) null, "uT=LoUwCQmA4QY", jDKHttpClientConfig0, jDKHttpClient0);
      AccessTokenRequestParams accessTokenRequestParams0 = new AccessTokenRequestParams("");
      try { 
        oAuth20Service0.getAccessToken(accessTokenRequestParams0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: 
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      doReturn((ClientAuthentication) null).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", "", "revoke token", (String) null, "authorization_pending", (OutputStream) null, "", jDKHttpClientConfig0, jDKHttpClient0);
      AccessTokenRequestParams accessTokenRequestParams0 = new AccessTokenRequestParams((String) null);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessToken(accessTokenRequestParams0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "k?VKA'", "_F", "k?VKA'", "k?VKA'", "3lp", (OutputStream) null, "_F", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.extractAuthorization((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn("Fv{D6n:R2x|}7 #").when(defaultApi20_0).getRevokeTokenEndpoint();
      MockFile mockFile0 = new MockFile("U7W&Meduxl");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "7O;H8.aK\"", "U7W&Meduxl", "7O;H8.aK\"", "U7W&Meduxl", "U7W&Meduxl", mockFileOutputStream0, "revoke token", jDKHttpClientConfig0, (HttpClient) null);
      TokenTypeHint tokenTypeHint0 = TokenTypeHint.ACCESS_TOKEN;
      // Undeclared exception!
      try { 
        oAuth20Service0.createRevokeTokenRequest("", tokenTypeHint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((ClientAuthentication) null).when(defaultApi20_0).getClientAuthentication();
      doReturn((String) null).when(defaultApi20_0).getRevokeTokenEndpoint();
      MockFile mockFile0 = new MockFile("e");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, (String) null, "value not one of declared Enum instance names for %s", "e", "e", (String) null, filterOutputStream0, "e", jDKHttpClientConfig0, jDKHttpClient0);
      TokenTypeHint tokenTypeHint0 = TokenTypeHint.REFRESH_TOKEN;
      // Undeclared exception!
      try { 
        oAuth20Service0.createRevokeTokenRequest((String) null, tokenTypeHint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn("d").when(defaultApi20_0).getRevokeTokenEndpoint();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, (String) null, (String) null, (String) null, "", (String) null, pipedOutputStream0, (String) null, jDKHttpClientConfig0, jDKHttpClient0);
      TokenTypeHint tokenTypeHint0 = TokenTypeHint.ACCESS_TOKEN;
      // Undeclared exception!
      try { 
        oAuth20Service0.createRevokeTokenRequest((String) null, tokenTypeHint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Verb verb0 = Verb.HEAD;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn((String) null).when(defaultApi20_0).getRefreshTokenEndpoint();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "com.github.scribejava.core.oauth.OAuth20Service$4", "com.github.scribejava.core.oauth.OAuth20Service$4", "com.github.scribejava.core.oauth.OAuth20Service$4", "com.github.scribejava.core.oauth.OAuth20Service$4", "com.github.scribejava.core.oauth.OAuth20Service$4", byteArrayOutputStream0, "com.github.scribejava.core.oauth.OAuth20Service$4", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.createRefreshTokenRequest("com.github.scribejava.core.oauth.OAuth20Service$3", "No node at '%s' (unmatched part: '%s')");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      doReturn((ClientAuthentication) null).when(defaultApi20_0).getClientAuthentication();
      doReturn((String) null).when(defaultApi20_0).getRefreshTokenEndpoint();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("state");
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", "", "", "ln#sKb1&0}26(}h", "", mockFileOutputStream0, "haHK", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.createRefreshTokenRequest(" does not support them", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(26);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "{|=f#!-&pISW9", "{|=f#!-&pISW9", "{|=f#!-&pISW9", "", "{|=f#!-&pISW9", byteArrayOutputStream0, "&", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.createRefreshTokenRequest("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The refreshToken cannot be null or empty
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getDeviceAuthorizationEndpoint();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "client_credentials", "client_credentials", "4(HK)2", "", (String) null, mockPrintStream0, "", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.createDeviceAuthorizationCodesRequest("4(HK)2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service((DefaultApi20) null, "LG4.JLd<cU:", (String) null, "Sn]T!Rm2+aHf<\"Vt[v'", "", "xoO7`X fFP{c", (OutputStream) null, "", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.createDeviceAuthorizationCodesRequest("H0!_B%jy");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getDeviceAuthorizationEndpoint();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Internal error: class %s not included as super-type for %s");
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, (String) null, "User-Agent", "User-Agent", "User-Agent", "iK5W9#EQ6#/", mockFileOutputStream0, "SHA-256", jDKHttpClientConfig0, (HttpClient) null);
      // Undeclared exception!
      try { 
        oAuth20Service0.createDeviceAuthorizationCodesRequest("com.github.scribejava.core.model.OAuthRequest");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Verb verb0 = Verb.HEAD;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(".`Z").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":443");
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ":443", ":443", ":443", ":443", "", mockFileOutputStream0, ":443", jDKHttpClientConfig0, jDKHttpClient0);
      AccessTokenRequestParams accessTokenRequestParams0 = new AccessTokenRequestParams("uAUxCuI\"");
      // Undeclared exception!
      try { 
        oAuth20Service0.createAccessTokenRequest(accessTokenRequestParams0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      doReturn((ClientAuthentication) null).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "]vvs|t4lEd5T[a|ppD", (String) null, ",%RmClqZ9P%qY", "dJ82", (String) null, (OutputStream) null, (String) null, jDKHttpClientConfig0, jDKHttpClient0);
      AccessTokenRequestParams accessTokenRequestParams0 = AccessTokenRequestParams.create("z%BvTnU");
      // Undeclared exception!
      try { 
        oAuth20Service0.createAccessTokenRequest(accessTokenRequestParams0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Verb verb0 = Verb.TRACE;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(":").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "fa;ALC#mNz", "uw_4P/5rAuk06(s", "Device Authorization Codes", "uw_4P/5rAuk06(s", "uw_4P/5rAuk06(s", bufferedOutputStream0, (String) null, (HttpClientConfig) null, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.createAccessTokenPasswordGrantRequest("Device Authorization Codes", "uw_4P/5rAuk06(s", (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "r`Evs@*", "r`Evs@*", "r`Evs@*", "r`Evs@*", "r`Evs@*", (OutputStream) null, "G{", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.createAccessTokenPasswordGrantRequest("V06iB}(a?FtNURyl,", "2m):LhFxW-d*G", "G{");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "quwiu03>ZKnA>", (String) null, ":g sFC!", "D$vPG", "V1{[uQ+XB", pipedOutputStream0, (String) null, jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.createAccessTokenDeviceAuthorizationGrantRequest((DeviceAuthorization) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Verb verb0 = Verb.TRACE;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      MockPrintStream mockPrintStream0 = new MockPrintStream("('BB");
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "('BB", "('BB", (String) null, "('BB", (String) null, mockPrintStream0, "('BB", jDKHttpClientConfig0, (HttpClient) null);
      // Undeclared exception!
      try { 
        oAuth20Service0.createAccessTokenClientCredentialsGrantRequest("com.github.scribejava.core.oauth.OAuth20Service");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      doReturn((ClientAuthentication) null).when(defaultApi20_0).getClientAuthentication();
      MockPrintStream mockPrintStream0 = new MockPrintStream("('BB");
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "('BB", "('BB", (String) null, "('BB", (String) null, mockPrintStream0, "('BB", jDKHttpClientConfig0, (HttpClient) null);
      // Undeclared exception!
      try { 
        oAuth20Service0.createAccessTokenClientCredentialsGrantRequest("com.github.scribejava.core.oauth.OAuth20Service");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      Verb verb0 = Verb.HEAD;
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("state").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "grant_yp", "h}4g,CP", "h}4g,CP", "grant_yp", "H0!_B%jy", (OutputStream) null, "Problem accessing property `", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      oAuth20Service0.getAccessTokenClientCredentialsGrant(oAuthAsyncRequestCallback0);
      assertEquals("grant_yp", oAuth20Service0.getDefaultScope());
      assertEquals("H0!_B%jy", oAuth20Service0.getResponseType());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", "t!<,", "", "e)8#", "", byteArrayOutputStream0, "", jDKHttpClientConfig0, jDKHttpClient0);
      String string0 = oAuth20Service0.getDefaultScope();
      assertEquals("", oAuth20Service0.getResponseType());
      assertEquals("e)8#", string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn("password").when(defaultApi20_0).getRevokeTokenEndpoint();
      MockPrintStream mockPrintStream0 = new MockPrintStream("Avk/5+n7Pg^");
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, (String) null, " (from class ", ">", (String) null, " (from class ", mockPrintStream0, "@ Lh?T!)_}$2I9", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.revokeTokenAsync("Avk/5+n7Pg^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn("send request for access token asynchronously to %s").when(defaultApi20_0).getRevokeTokenEndpoint();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(bufferedOutputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "m*s6S%FjK~jwuD", "m*s6S%FjK~jwuD", "", "send request for access token asynchronously to %s", "", objectOutputStream0, "", jDKHttpClientConfig0, jDKHttpClient0);
      TokenTypeHint tokenTypeHint0 = TokenTypeHint.ACCESS_TOKEN;
      // Undeclared exception!
      try { 
        oAuth20Service0.revokeTokenAsync("", tokenTypeHint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).toString();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2877);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "(N?v/6fbP", "(N?v/6fbP", "(N?v/6fbP", "token", "(N?v/6fbP", byteArrayOutputStream0, "token", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth20Service0.getApi();
      assertEquals("token", oAuth20Service0.getDefaultScope());
      assertEquals("(N?v/6fbP", oAuth20Service0.getResponseType());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BearerSignature bearerSignature0 = mock(BearerSignature.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(bearerSignature0).when(defaultApi20_0).getBearerSignature();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "4xhQj$|v8V$5tVa", "4xhQj$|v8V$5tVa", "4xhQj$|v8V$5tVa", "temporarily_unavailable", "=F5TyJ", (OutputStream) null, "OtherScalar", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth20Service0.signRequest("4xhQj$|v8V$5tVa", (OAuthRequest) null);
      assertEquals("=F5TyJ", oAuth20Service0.getResponseType());
      assertEquals("temporarily_unavailable", oAuth20Service0.getDefaultScope());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.databind.ser.std.UUIDSerializer");
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", "", "", "", "", mockPrintStream0, "", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenPasswordGrantAsync("", "", (String) null, oAuthAsyncRequestCallback0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", "", "", "z\")!A>XJr]/,WK", "z\")!A>XJr]/,WK", mockPrintStream0, "z\")!A>XJr]/,WK", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.refreshAccessToken("", "g.p?S");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The refreshToken cannot be null or empty
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "+j4", "1us.?*IS}NnPcf`m", ",valueFilter=", "8#dn.'", "", (OutputStream) null, "r", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth20Service0.createAuthorizationUrlBuilder();
      assertEquals("", oAuth20Service0.getResponseType());
      assertEquals("8#dn.'", oAuth20Service0.getDefaultScope());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "k?VKA'", "_>", "k?VKA'", "k?VKA'", "13\"J^A_E", (OutputStream) null, "_>", jDKHttpClientConfig0, jDKHttpClient0);
      String string0 = oAuth20Service0.getResponseType();
      assertEquals("13\"J^A_E", string0);
      assertEquals("k?VKA'", oAuth20Service0.getDefaultScope());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Verb verb0 = Verb.PUT;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "+j4", "1us.?*IS}NnPcf`m", ",valueFilter=", "8#dn.'", "", (OutputStream) null, "r", jDKHttpClientConfig0, jDKHttpClient0);
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization("}tU0Km", "No argument left as delegating for Creator %s: exactly one required", "created ", 1372);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenDeviceAuthorizationGrant(deviceAuthorization0, (OAuthAsyncRequestCallback<OAuth2AccessToken>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getDeviceAuthorizationEndpoint();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", "", (String) null, (String) null, "s*<TI]$/#]", pipedOutputStream0, "s*<TI]$/#]", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getDeviceAuthorizationCodesAsync((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn("&u~OF").when(defaultApi20_0).getRevokeTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "grant_yp", "h}4g,CP", "h}4g,CP", "grant_yp", "H0!_B%jy", (OutputStream) null, "Problem accessing property `", jDKHttpClientConfig0, jDKHttpClient0);
      TokenTypeHint tokenTypeHint0 = TokenTypeHint.REFRESH_TOKEN;
      oAuth20Service0.revokeToken("", (OAuthAsyncRequestCallback<Void>) null, tokenTypeHint0);
      assertEquals("grant_yp", oAuth20Service0.getDefaultScope());
      assertEquals("H0!_B%jy", oAuth20Service0.getResponseType());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Verb verb0 = Verb.GET;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("v)`a_(m").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", "", "revoke token", (String) null, "2", (OutputStream) null, "", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth20Service0.getAccessTokenClientCredentialsGrantAsync((String) null);
      assertEquals("2", oAuth20Service0.getResponseType());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Verb verb0 = Verb.HEAD;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn("access token").when(defaultApi20_0).getRefreshTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "k?VKA'", "_>", "k?VKA'", "k?VKA'", "3lp", (OutputStream) null, "_>", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      oAuth20Service0.refreshAccessToken("blank String (all whitespace)", oAuthAsyncRequestCallback0);
      assertEquals("3lp", oAuth20Service0.getResponseType());
      assertEquals("k?VKA'", oAuth20Service0.getDefaultScope());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Verb verb0 = Verb.GET;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn("g5m0agml0(a=iV:h").when(defaultApi20_0).getRefreshTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "USE_BASE_TYPE_AS_DEFAULT_IMPL", "USE_BASE_TYPE_AS_DEFAULT_IMPL", "v'?9];m;fSQTcg3.%8", (String) null, "3'FI<\"y7lH8?!kyEmX>", (OutputStream) null, "v'?9];m;fSQTcg3.%8", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth20Service0.refreshAccessToken("3'FI<\"y7lH8?!kyEmX>", "9UGx4", (OAuthAsyncRequestCallback<OAuth2AccessToken>) null);
      assertEquals("3'FI<\"y7lH8?!kyEmX>", oAuth20Service0.getResponseType());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "k:7h4J#kfdSD}FG", "k:7h4J#kfdSD}FG", "k:7h4J#kfdSD}FG", "k:7h4J#kfdSD}FG", "k:7h4J#kfdSD}FG", (OutputStream) null, "k:7h4J#kfdSD}FG", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.refreshAccessToken("", oAuthAsyncRequestCallback0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The refreshToken cannot be null or empty
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      MockFile mockFile0 = new MockFile("Oj%a|\"l'6r4gc)#L");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      Verb verb0 = Verb.PATCH;
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("+`ES<Nnr").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "}", "Could not resolve type id '%s' as a subtype of %s", "<", (String) null, "<", mockPrintStream0, "23`9", jDKHttpClientConfig0, jDKHttpClient0);
      AccessTokenRequestParams accessTokenRequestParams0 = new AccessTokenRequestParams((String) null);
      AccessTokenRequestParams accessTokenRequestParams1 = accessTokenRequestParams0.addExtraParameter("qB.pS\"q+4=!qI'?sLh", "}s!)Q,pt[(^/");
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessToken(accessTokenRequestParams1, oAuthAsyncRequestCallback0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Verb verb0 = Verb.GET;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("v)`a_(m").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", "", "revoke token", (String) null, "authorization_pending", (OutputStream) null, "", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "revoke token");
      AccessTokenRequestParams accessTokenRequestParams0 = new AccessTokenRequestParams((String) null);
      Map<String, String> map0 = oAuthRequest0.getOauthParameters();
      accessTokenRequestParams0.setExtraParameters(map0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessToken(accessTokenRequestParams0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Verb verb0 = Verb.GET;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("v)`a_(m").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", "", "revoke token", (String) null, "authorization_pending", (OutputStream) null, "", jDKHttpClientConfig0, jDKHttpClient0);
      AccessTokenRequestParams accessTokenRequestParams0 = new AccessTokenRequestParams((String) null);
      AccessTokenRequestParams accessTokenRequestParams1 = accessTokenRequestParams0.pkceCodeVerifier("XG}|`DU7OJ,G9\"");
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessToken(accessTokenRequestParams1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Verb verb0 = Verb.GET;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("v)`a_(m").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", "", "revoke token", (String) null, "authorization_pending", (OutputStream) null, "", jDKHttpClientConfig0, jDKHttpClient0);
      AccessTokenRequestParams accessTokenRequestParams0 = new AccessTokenRequestParams((String) null);
      ScopeBuilder scopeBuilder0 = new ScopeBuilder("authorization_pending");
      AccessTokenRequestParams accessTokenRequestParams1 = accessTokenRequestParams0.scope(scopeBuilder0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessToken(accessTokenRequestParams1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Verb verb0 = Verb.HEAD;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("2.0").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "]vvs|t4lEd5T[a|ppD", (String) null, (String) null, "dJ82", (String) null, (OutputStream) null, (String) null, jDKHttpClientConfig0, jDKHttpClient0);
      AccessTokenRequestParams accessTokenRequestParams0 = AccessTokenRequestParams.create("z%BvTnU");
      oAuth20Service0.createAccessTokenRequest(accessTokenRequestParams0);
      assertEquals("dJ82", oAuth20Service0.getDefaultScope());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ">7XXG?Kz2Q&/d}", ">7XXG?Kz2Q&/d}", ">7XXG?Kz2Q&/d}", ">7XXG?Kz2Q&/d}", ">7XXG?Kz2Q&/d}", dataOutputStream0, ">7XXG?Kz2Q&/d}", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.sendAccessTokenRequestAsync((OAuthRequest) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0, true);
      Verb verb0 = Verb.OPTIONS;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "");
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", "swI4@9Ml]4T", "", "Q", "", mockPrintStream0, "iQcNDdM!|Uls8Mo4", jDKHttpClientConfig0, (HttpClient) null);
      // Undeclared exception!
      try { 
        oAuth20Service0.sendAccessTokenRequestSync(oAuthRequest0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // there were problems while writting to the debug stream
         //
         verifyException("com.github.scribejava.core.oauth.OAuthService", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "5u~OF", "5u~OF", "5u~OF", "5u~OF", "5u~OF", (OutputStream) null, "5u~OF", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth2Authorization oAuth2Authorization0 = oAuth20Service0.extractAuthorization(" =:[4)&<a!>%ZT8H");
      assertNull(oAuth2Authorization0.getCode());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", "", "revoke token", (String) null, "2", (OutputStream) null, "", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.extractAuthorization("M}'&#?aZM$Qf0'g.=r");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BearerSignature bearerSignature0 = mock(BearerSignature.class, new ViolatedAssumptionAnswer());
      Verb verb0 = Verb.GET;
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(bearerSignature0).when(defaultApi20_0).getBearerSignature();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", "", "revoke token", (String) null, "authorization_pending", (OutputStream) null, "", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "revoke token");
      oAuth20Service0.signRequest((OAuth2AccessToken) null, oAuthRequest0);
      assertEquals("authorization_pending", oAuth20Service0.getResponseType());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn("send request for access token asynchronously to %s").when(defaultApi20_0).getRevokeTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "send request for access token asynchronously to %s", "send request for access token asynchronously to %s", "send request for access token asynchronously to %s", "send request for access token asynchronously to %s", "g\nB=F", (OutputStream) null, "send request for access token asynchronously to %s", jDKHttpClientConfig0, jDKHttpClient0);
      try { 
        oAuth20Service0.revokeToken("send request for access token asynchronously to %s");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: send request for access token asynchronously to %s
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      Verb verb0 = Verb.HEAD;
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("state").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "grant_yp", "h}4g,CP", "h}4g,CP", "grant_yp", "H0!_B%jy", (OutputStream) null, "Problem accessing property `", jDKHttpClientConfig0, jDKHttpClient0);
      AccessTokenRequestParams accessTokenRequestParams0 = new AccessTokenRequestParams((String) null);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenAsync(accessTokenRequestParams0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      Verb verb0 = Verb.HEAD;
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("state").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "grant_yp", "h}4g,CP", "h}4g,CP", "grant_yp", "H0!_B%jy", (OutputStream) null, "Problem accessing property `", jDKHttpClientConfig0, jDKHttpClient0);
      try { 
        oAuth20Service0.getAccessTokenClientCredentialsGrant();
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: state?scope=grant_yp&grant_type=client_credentials
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Verb verb0 = Verb.GET;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("scope").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "USE_BASE_TYPE_AS_DEFAULT_IMPL", "USE_BASE_TYPE_AS_DEFAULT_IMPL", "v'?9];m;fSQTcg3.%8", (String) null, "3'FI<\"y7lH8?!kyEmX>", (OutputStream) null, "v'?9];m;fSQTcg3.%8", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenPasswordGrant("g5m0agml0(a=iV:h", (String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Verb verb0 = Verb.GET;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("5Tm0agmlU(a=i:h").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "5Tm0agmlU(a=i:h", "5Tm0agmlU(a=i:h", "5Tm0agmlU(a=i:h", (String) null, (String) null, (OutputStream) null, "5Tm0agmlU(a=i:h", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenPasswordGrantAsync("5Tm0agmlU(a=i:h", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("v)`a_(m").when(defaultApi20_0).getAuthorizationUrl(anyString() , anyString() , anyString() , anyString() , anyString() , anyMap());
      doReturn("v)`a_(m").when(defaultApi20_0).toString();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "v)`a_(m", "v)`a_(m", "v)`a_(m", (String) null, "v)`a_(m", (OutputStream) null, "", jDKHttpClientConfig0, jDKHttpClient0);
      PKCE pKCE0 = new PKCE();
      oAuth20Service0.getAuthorizationUrl(pKCE0);
      assertEquals("v)`a_(m", oAuth20Service0.getResponseType());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn("{F?GH\":'G<8?").when(defaultApi20_0).getRevokeTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", "", "", "temporarily_unavailable", "=F5TyJ", (OutputStream) null, "OtherScaar", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<Void> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<Void>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      oAuth20Service0.revokeToken("=F5TyJ", oAuthAsyncRequestCallback0);
      assertEquals("=F5TyJ", oAuth20Service0.getResponseType());
      assertEquals("temporarily_unavailable", oAuth20Service0.getDefaultScope());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Verb verb0 = Verb.GET;
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", "", "revoke token", (String) null, "authorization_pending", (OutputStream) null, "", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "revoke token");
      oAuth20Service0.sendAccessTokenRequestAsync(oAuthRequest0);
      assertEquals("authorization_pending", oAuth20Service0.getResponseType());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("E?~Y0d~").when(defaultApi20_0).getDeviceAuthorizationEndpoint();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", "AMb-owhSw!S", "'gegNV", "B<", "B<", (OutputStream) null, "code_challenge", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth20Service0.getDeviceAuthorizationCodesAsync();
      assertEquals("B<", oAuth20Service0.getResponseType());
      assertEquals("B<", oAuth20Service0.getDefaultScope());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Verb verb0 = Verb.GET;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("5Tm0agmlU(a=i:h").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "5Tm0agmlU(a=i:h", "5Tm0agmlU(a=i:h", "5Tm0agmlU(a=i:h", (String) null, (String) null, (OutputStream) null, "5Tm0agmlU(a=i:h", jDKHttpClientConfig0, jDKHttpClient0);
      Future<OAuth2AccessToken> future0 = oAuth20Service0.getAccessTokenAsync("5Tm0agmlU(a=i:h");
      assertNotNull(future0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Verb verb0 = Verb.GET;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn("v)`a_(m").when(defaultApi20_0).getRefreshTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", "", "revoke token", (String) null, "authorization_pending", (OutputStream) null, "", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth20Service0.refreshAccessTokenAsync("wWA");
      assertEquals("authorization_pending", oAuth20Service0.getResponseType());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "grant_yp", "h}4g,CP", "h}4g,CP", "grant_yp", "H0!_B%jy", (OutputStream) null, "Problem accessing property `", jDKHttpClientConfig0, jDKHttpClient0);
      String string0 = oAuth20Service0.getVersion();
      assertEquals("grant_yp", oAuth20Service0.getDefaultScope());
      assertEquals("H0!_B%jy", oAuth20Service0.getResponseType());
      assertEquals("2.0", string0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      doReturn((ClientAuthentication) null).when(defaultApi20_0).getClientAuthentication();
      doReturn((String) null).when(defaultApi20_0).getRefreshTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "g{X6>J@fSal5[", "g{X6>J@fSal5[", "g{X6>J@fSal5[", (String) null, "username", (OutputStream) null, "username", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.refreshAccessToken("got DeviceAuthorizationCodes response");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("access tokn").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "k?VKA'", "_F", "k?VKA'", "k?VKA'", "3lp", (OutputStream) null, "_F", jDKHttpClientConfig0, jDKHttpClient0);
      try { 
        oAuth20Service0.getAccessTokenClientCredentialsGrant("3lp");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: access tokn?scope=3lp&grant_type=client_credentials
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      doReturn((ClientAuthentication) null).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", "AMb-owhSw!S", "'gegNV", "B<", "B<", (OutputStream) null, "code_challenge", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenClientCredentialsGrantAsync();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("").when(defaultApi20_0).getDeviceAuthorizationEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", "B<", "E?~Y0d~", "", "cVo", (OutputStream) null, "", jDKHttpClientConfig0, jDKHttpClient0);
      try { 
        oAuth20Service0.getDeviceAuthorizationCodes();
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: 
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("access tokn").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "k?VKA'", "", "k?VKA'", "k?VKA'", "3lp", (OutputStream) null, "", jDKHttpClientConfig0, jDKHttpClient0);
      try { 
        oAuth20Service0.getAccessTokenPasswordGrant("3lp", "blank String (all whitespace)");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: access tokn?username=3lp&password=blank%20String%20%28all%20whitespace%29&scope=k%3FVKA%27&grant_type=password
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("g5m0agml0(a=iV:h").when(defaultApi20_0).getAuthorizationUrl(anyString() , anyString() , anyString() , anyString() , anyString() , anyMap());
      doReturn("scope").when(defaultApi20_0).toString();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "USE_BASE_TYPE_AS_DEFAULT_IMPL", "USE_BASE_TYPE_AS_DEFAULT_IMPL", "v'?9];m;fSQTcg3.%8", (String) null, "3'FI<\"y7lH8?!kyEmX>", (OutputStream) null, "v'?9];m;fSQTcg3.%8", jDKHttpClientConfig0, jDKHttpClient0);
      Verb verb0 = Verb.HEAD;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, (String) null);
      Map<String, String> map0 = oAuthRequest0.getOauthParameters();
      oAuth20Service0.getAuthorizationUrl(map0);
      assertEquals("3'FI<\"y7lH8?!kyEmX>", oAuth20Service0.getResponseType());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "9h<u;2Ws", "9h<u;2Ws", "token_type_hint", "", "com.fasterxml.jackson.databind.ser.std.TimeZoneSerializer", mockPrintStream0, "client_id", (HttpClientConfig) null, jDKHttpClient0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenPasswordGrantAsync("com.fasterxml.jackson.databind.ser.std.TimeZoneSerializer", "state", oAuthAsyncRequestCallback0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAuthorizationUrl(anyString() , anyString() , anyString() , anyString() , anyString() , anyMap());
      doReturn((String) null).when(defaultApi20_0).toString();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "9h<u;2Ws", "9h<u;2Ws", "token_type_hint", "", "com.fasterxml.jackson.databind.ser.std.TimeZoneSerializer", mockPrintStream0, "client_id", (HttpClientConfig) null, jDKHttpClient0);
      oAuth20Service0.getAuthorizationUrl("token_type_hint");
      assertEquals("", oAuth20Service0.getDefaultScope());
      assertEquals("com.fasterxml.jackson.databind.ser.std.TimeZoneSerializer", oAuth20Service0.getResponseType());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "v)[_(", "v)[_(", "v)[_(", (String) null, "v)[_(", (OutputStream) null, "v)[_(", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.refreshAccessTokenAsync((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The refreshToken cannot be null or empty
         //
         verifyException("com.github.scribejava.core.oauth.OAuth20Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      Verb verb0 = Verb.HEAD;
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("state").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "grant_yp", "h}4g,CP", "h}4g,CP", "grant_yp", "H0!_B%jy", (OutputStream) null, "Problem accessing property `", jDKHttpClientConfig0, jDKHttpClient0);
      try { 
        oAuth20Service0.getAccessToken("");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: state?code=&redirect_uri=h%7D4g%2CCP&scope=grant_yp&grant_type=authorization_code
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Verb verb0 = Verb.GET;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("{F?GH\":'G<8?").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", "", "", "temporarily_unavailable", "=F5TyJ", (OutputStream) null, "OtherScaar", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth20Service0.getAccessTokenPasswordGrantAsync("OtherScaar", "OtherScaar", "");
      assertEquals("=F5TyJ", oAuth20Service0.getResponseType());
      assertEquals("temporarily_unavailable", oAuth20Service0.getDefaultScope());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("+%j4").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "+%j4", "+%j4", "+%j4", "+%j4", "+%j4", (OutputStream) null, "+%j4", jDKHttpClientConfig0, jDKHttpClient0);
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization("+%j4", "+%j4", "+%j4", 1273);
      Future<OAuth2AccessToken> future0 = oAuth20Service0.getAccessTokenDeviceAuthorizationGrantAsync(deviceAuthorization0);
      assertNotNull(future0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getDeviceAuthorizationEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "USE_BASE_TYPE_AS_DEFAULT_IMPL", "USE_BASE_TYPE_AS_DEFAULT_IMPL", "v'?9];m;fSQTcg3.%8", (String) null, "3'FI<\"y7lH8?!kyEmX>", (OutputStream) null, "v'?9];m;fSQTcg3.%8", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getDeviceAuthorizationCodes("_:TlHD'p58GlKnld'2]", (OAuthAsyncRequestCallback<DeviceAuthorization>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }
}
