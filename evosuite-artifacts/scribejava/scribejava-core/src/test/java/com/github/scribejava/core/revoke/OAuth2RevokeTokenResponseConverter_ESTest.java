/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 12 03:08:53 GMT 2022
 */

package com.github.scribejava.core.revoke;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.scribejava.core.model.Response;
import com.github.scribejava.core.revoke.OAuth2RevokeTokenResponseConverter;
import java.io.ByteArrayInputStream;
import java.io.Closeable;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OAuth2RevokeTokenResponseConverter_ESTest extends OAuth2RevokeTokenResponseConverter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OAuth2RevokeTokenResponseConverter oAuth2RevokeTokenResponseConverter0 = new OAuth2RevokeTokenResponseConverter();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(1080, "", hashMap0, "");
      // Undeclared exception!
      try { 
        oAuth2RevokeTokenResponseConverter0.convert(response0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Response body is incorrect. Can't extract a 'error' from this: ''
         //
         verifyException("com.github.scribejava.core.extractors.AbstractJsonExtractor", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OAuth2RevokeTokenResponseConverter oAuth2RevokeTokenResponseConverter0 = new OAuth2RevokeTokenResponseConverter();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      Closeable[] closeableArray0 = new Closeable[5];
      Response response0 = new Response(51, "Illegal character '", (Map<String, String>) null, pushbackInputStream0, closeableArray0);
      // Undeclared exception!
      try { 
        oAuth2RevokeTokenResponseConverter0.convert(response0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.model.Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OAuth2RevokeTokenResponseConverter oAuth2RevokeTokenResponseConverter0 = new OAuth2RevokeTokenResponseConverter();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      Closeable[] closeableArray0 = new Closeable[4];
      Response response0 = new Response((-3887), "' has value that is not of type ObjectNode (but ", hashMap0, dataInputStream0, closeableArray0);
      // Undeclared exception!
      try { 
        oAuth2RevokeTokenResponseConverter0.convert(response0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      OAuth2RevokeTokenResponseConverter oAuth2RevokeTokenResponseConverter0 = new OAuth2RevokeTokenResponseConverter();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(57, "Vv>", hashMap0, (String) null);
      // Undeclared exception!
      try { 
        oAuth2RevokeTokenResponseConverter0.convert(response0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument \"content\" is null
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      OAuth2RevokeTokenResponseConverter oAuth2RevokeTokenResponseConverter0 = new OAuth2RevokeTokenResponseConverter();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-663), 3600);
      Closeable[] closeableArray0 = new Closeable[8];
      Response response0 = new Response((-663), "oHm af", hashMap0, byteArrayInputStream0, closeableArray0);
      // Undeclared exception!
      try { 
        oAuth2RevokeTokenResponseConverter0.convert(response0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      OAuth2RevokeTokenResponseConverter oAuth2RevokeTokenResponseConverter0 = new OAuth2RevokeTokenResponseConverter();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PipedInputStream pipedInputStream0 = new PipedInputStream(50);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      Closeable[] closeableArray0 = new Closeable[2];
      Response response0 = new Response(971, (String) null, hashMap0, dataInputStream0, closeableArray0);
      try { 
        oAuth2RevokeTokenResponseConverter0.convert(response0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      OAuth2RevokeTokenResponseConverter oAuth2RevokeTokenResponseConverter0 = new OAuth2RevokeTokenResponseConverter();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(86, ") has not properly overridden method 'withAdditionalSerializers': cannot instantiate subtype with additional serializer definitions", hashMap0, "com.github.scribejava.core.revoke.OAuth2RevokeTokenResponseConverter");
      // Undeclared exception!
      try { 
        oAuth2RevokeTokenResponseConverter0.convert(response0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // com.github.scribejava.core.revoke.OAuth2RevokeTokenResponseConverter
         //
         verifyException("com.github.scribejava.core.extractors.OAuth2AccessTokenJsonExtractor", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      OAuth2RevokeTokenResponseConverter oAuth2RevokeTokenResponseConverter0 = new OAuth2RevokeTokenResponseConverter();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(200, ") has not properly overridden method 'withAdditionalSerializers': cannot instantiate subtype with additional serializer definitions", hashMap0, ") has not properly overridden method 'withAdditionalSerializers': cannot instantiate subtype with additional serializer definitions");
      oAuth2RevokeTokenResponseConverter0.convert(response0);
      assertEquals(") has not properly overridden method 'withAdditionalSerializers': cannot instantiate subtype with additional serializer definitions", response0.getMessage());
  }
}
