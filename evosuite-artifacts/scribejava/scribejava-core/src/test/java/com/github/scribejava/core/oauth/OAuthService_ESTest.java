/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 12 02:51:59 GMT 2022
 */

package com.github.scribejava.core.oauth;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.scribejava.core.builder.api.DefaultApi10a;
import com.github.scribejava.core.builder.api.DefaultApi20;
import com.github.scribejava.core.httpclient.HttpClient;
import com.github.scribejava.core.httpclient.HttpClientConfig;
import com.github.scribejava.core.httpclient.jdk.JDKHttpClient;
import com.github.scribejava.core.httpclient.jdk.JDKHttpClientConfig;
import com.github.scribejava.core.httpclient.jdk.JDKHttpProvider;
import com.github.scribejava.core.model.OAuthAsyncRequestCallback;
import com.github.scribejava.core.model.OAuthRequest;
import com.github.scribejava.core.model.Response;
import com.github.scribejava.core.model.Verb;
import com.github.scribejava.core.oauth.OAuth10aService;
import com.github.scribejava.core.oauth.OAuth20Service;
import com.github.scribejava.core.oauth2.clientauthentication.ClientAuthentication;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.net.MalformedURLException;
import java.util.UnknownFormatConversionException;
import java.util.concurrent.Future;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OAuthService_ESTest extends OAuthService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpProvider jDKHttpProvider0 = new JDKHttpProvider();
      HttpClient httpClient0 = jDKHttpProvider0.createClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "~\"k7\"%ImF5KunU4z|", "0a~=^@ Q~C+tP *i1L", "async obtaining request token from %s", "", "", pipedOutputStream0, "there were problems while writting to the debug stream", jDKHttpClientConfig0, httpClient0);
      Object[] objectArray0 = new Object[2];
      oAuth20Service0.log("0a~=^@ Q~C+tP *i1L", objectArray0);
      assertEquals(20, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "~\"k7\"%ImF5KunU4z|", "~\"k7\"%ImF5KunU4z|", "async obtaining request token from %s", "", "`", pipedOutputStream0, "there were problems while writting to the debug stream", jDKHttpClientConfig0, jDKHttpClient0);
      boolean boolean0 = oAuth20Service0.isDebug();
      assertTrue(boolean0);
      assertEquals("async obtaining request token from %s", oAuth20Service0.getCallback());
      assertEquals("~\"k7\"%ImF5KunU4z|", oAuth20Service0.getApiSecret());
      assertEquals("~\"k7\"%ImF5KunU4z|", oAuth20Service0.getApiKey());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "~\"k7\"%ImF5KunU4z|", "xtY", "xtY", "~\"k7\"%ImF5KunU4z|", "~\"k7\"%ImF5KunU4z|", (OutputStream) null, "realm", jDKHttpClientConfig0, jDKHttpClient0);
      boolean boolean0 = oAuth20Service0.isDebug();
      assertEquals("~\"k7\"%ImF5KunU4z|", oAuth20Service0.getApiKey());
      assertEquals("xtY", oAuth20Service0.getApiSecret());
      assertFalse(boolean0);
      assertEquals("xtY", oAuth20Service0.getCallback());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("' from this: '", false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 1757);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService((DefaultApi10a) null, "", "", "", "", bufferedOutputStream0, "' from this: '", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth10aService0.getVersion();
      assertEquals("", oAuth10aService0.getApiSecret());
      assertEquals("", oAuth10aService0.getApiKey());
      assertEquals("", oAuth10aService0.getCallback());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      MockFile mockFile0 = new MockFile("jDl8=(>$E[");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "jDl8=(>$E[", "XEQcaG", (String) null, (String) null, "jDl8=(>$E[", mockPrintStream0, "jDl8=(>$E[", (HttpClientConfig) null, (HttpClient) null);
      String string0 = oAuth20Service0.getCallback();
      assertEquals("XEQcaG", oAuth20Service0.getApiSecret());
      assertNull(string0);
      assertEquals("jDl8=(>$E[", oAuth20Service0.getApiKey());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service((DefaultApi20) null, "2aCj:hYhT,;\"M,$/", "T'!K@ ", "}_,>^t", "2aCj:hYhT,;\"M,$/", "com.github.scribejava.core.oauth.OAuthService", (OutputStream) null, "T'!K@ ", jDKHttpClientConfig0, (HttpClient) null);
      String string0 = oAuth20Service0.getCallback();
      assertEquals("2aCj:hYhT,;\"M,$/", oAuth20Service0.getApiKey());
      assertEquals("}_,>^t", string0);
      assertEquals("T'!K@ ", oAuth20Service0.getApiSecret());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      OAuth20Service oAuth20Service0 = new OAuth20Service((DefaultApi20) null, "cVon(P4=N;", "7MTeE<>", "cVon(P4=N;", "7MTeE<>", "wy3so,s_", pipedOutputStream0, "wy3so,s_", jDKHttpClientConfig0, jDKHttpClient0);
      String string0 = oAuth20Service0.getApiSecret();
      assertEquals("cVon(P4=N;", oAuth20Service0.getApiKey());
      assertEquals("7MTeE<>", string0);
      assertEquals("cVon(P4=N;", oAuth20Service0.getCallback());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(29);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth10aService oAuth10aService0 = new OAuth10aService((DefaultApi10a) null, "", "", ".BO", ".BO", mockPrintStream0, "com.github.scribejava.core.oauth.AccessTokenRequestParams", jDKHttpClientConfig0, jDKHttpClient0);
      String string0 = oAuth10aService0.getApiSecret();
      assertEquals("", string0);
      assertEquals(".BO", oAuth10aService0.getCallback());
      assertEquals("", oAuth10aService0.getApiKey());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream(93);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "MEXa>u?\"Mrl(", "MEXa>u?\"Mrl(", "MEXa>u?\"Mrl(", "MEXa>u?\"Mrl(", "MEXa>u?\"Mrl(", pipedOutputStream0, "MEXa>u?\"Mrl(", jDKHttpClientConfig0, jDKHttpClient0);
      String string0 = oAuth20Service0.getApiKey();
      assertEquals("MEXa>u?\"Mrl(", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.github.scribejava.core.oauth.OAuthService");
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", "", "~Bl<'L9LKif7.B+0", "0r9Q)/}Ga1e9cq", "", mockFileOutputStream0, "0r9Q)/}Ga1e9cq", jDKHttpClientConfig0, jDKHttpClient0);
      String string0 = oAuth20Service0.getApiKey();
      assertEquals("", string0);
      assertEquals("~Bl<'L9LKif7.B+0", oAuth20Service0.getCallback());
      assertEquals("", oAuth20Service0.getApiSecret());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, ">yRUA^l", ">yRUA^l", "Cannot encode null object", "Cannot encode null object", (OutputStream) null, ">yRUA^l", (HttpClientConfig) null, (HttpClient) null);
      Verb verb0 = Verb.PUT;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ">yRUA^l");
      oAuth10aService0.execute(oAuthRequest0, (OAuthAsyncRequestCallback<Response>) null);
      assertEquals("Cannot encode null object", oAuth10aService0.getCallback());
      assertEquals(">yRUA^l", oAuth10aService0.getApiKey());
      assertEquals(">yRUA^l", oAuth10aService0.getApiSecret());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "$!Jc$T9F`vh\"=p\"sT", "", "B}t .y)U:", "'", "'", (OutputStream) null, "", jDKHttpClientConfig0, jDKHttpClient0);
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        oAuth20Service0.log("", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // there were problems while writting to the debug stream
         //
         verifyException("com.github.scribejava.core.oauth.OAuthService", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpProvider jDKHttpProvider0 = new JDKHttpProvider();
      HttpClient httpClient0 = jDKHttpProvider0.createClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, "7MTd$<>", "wy3so,s_", "7MTd$<>", "cVon(P4=N;", pipedOutputStream0, "wy3so,s_", jDKHttpClientConfig0, httpClient0);
      // Undeclared exception!
      try { 
        oAuth10aService0.log("cVon(P4=N;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // there were problems while writting to the debug stream
         //
         verifyException("com.github.scribejava.core.oauth.OAuthService", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpProvider jDKHttpProvider0 = new JDKHttpProvider();
      HttpClient httpClient0 = jDKHttpProvider0.createClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service((DefaultApi20) null, "MhWzP", "response_type", "7MTd$<>", "wy3so,s_", "7MTd$<>", pipedOutputStream0, "UTF8", jDKHttpClientConfig0, httpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.log((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Verb verb0 = Verb.GET;
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "l", "l", "l", "l", "l", byteArrayOutputStream0, "l", jDKHttpClientConfig0, (HttpClient) null);
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "l");
      oAuthRequest0.setCharset("l");
      // Undeclared exception!
      try { 
        oAuth20Service0.executeAsync(oAuthRequest0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported Charset: l
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, "password", "$V_", "password", "", byteArrayOutputStream0, "", jDKHttpClientConfig0, (HttpClient) null);
      // Undeclared exception!
      try { 
        oAuth10aService0.executeAsync((OAuthRequest) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuthService", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", "", "", "", "", byteArrayOutputStream0, "", jDKHttpClientConfig0, (HttpClient) null);
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, (String) null);
      // Undeclared exception!
      try { 
        oAuth20Service0.executeAsync(oAuthRequest0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      Verb verb0 = Verb.PUT;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "~\"k7\"%ImF5KunU4z|");
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      oAuthRequest0.setCharset("there were problems while writting to the debug stream");
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "there were problems while writting to the debug stream", "~\"k7\"%ImF5KunU4z|", "~\"k7\"%ImF5KunU4z|", "~\"k7\"%ImF5KunU4z|", "~\"k7\"%ImF5KunU4z|", pipedOutputStream0, "~\"k7\"%ImF5KunU4z|", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<Response> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<Response>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      OAuthRequest.ResponseConverter<Response> oAuthRequest_ResponseConverter0 = (OAuthRequest.ResponseConverter<Response>) mock(OAuthRequest.ResponseConverter.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.execute(oAuthRequest0, oAuthAsyncRequestCallback0, oAuthRequest_ResponseConverter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported Charset: there were problems while writting to the debug stream
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.github.scribejava.core.oauth.OAuth20Service$3", false);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpProvider jDKHttpProvider0 = new JDKHttpProvider();
      HttpClient httpClient0 = jDKHttpProvider0.createClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", "", "", "F!p-T~#h0}lU[3!`", "", mockFileOutputStream0, "", jDKHttpClientConfig0, httpClient0);
      OAuthRequest.ResponseConverter<JDKHttpProvider> oAuthRequest_ResponseConverter0 = (OAuthRequest.ResponseConverter<JDKHttpProvider>) mock(OAuthRequest.ResponseConverter.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.execute((OAuthRequest) null, (OAuthAsyncRequestCallback<JDKHttpProvider>) null, oAuthRequest_ResponseConverter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuthService", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      Verb verb0 = Verb.POST;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "async obtaining request token from %s");
      oAuthRequest0.addParameter("", (String) null);
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", "#V3g3fV#?@Ii1|b/,", "0a~=^@ Qm~C+tP *i1L", (String) null, "com.github.scribejava.core.oauth.OAuthService", pipedOutputStream0, (String) null, jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<Response> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<Response>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      OAuthRequest.ResponseConverter<Response> oAuthRequest_ResponseConverter0 = (OAuthRequest.ResponseConverter<Response>) mock(OAuthRequest.ResponseConverter.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.execute(oAuthRequest0, oAuthAsyncRequestCallback0, oAuthRequest_ResponseConverter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", "", "", "", "", byteArrayOutputStream0, "", jDKHttpClientConfig0, (HttpClient) null);
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "");
      MockFile mockFile0 = new MockFile("");
      oAuthRequest0.setPayload((File) mockFile0);
      OAuthAsyncRequestCallback<Response> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<Response>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.execute(oAuthRequest0, oAuthAsyncRequestCallback0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // JDKHttpClient does not support File payload for the moment
         //
         verifyException("com.github.scribejava.core.httpclient.jdk.JDKHttpClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, "", "", "'", "", (OutputStream) null, "", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<Response> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<Response>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth10aService0.execute((OAuthRequest) null, oAuthAsyncRequestCallback0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuthService", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient((JDKHttpClientConfig) null);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "4YAmQkN0", "4YAmQkN0", "4YAmQkN0", "4YAmQkN0", "4YAmQkN0", pipedOutputStream0, "4YAmQkN0", jDKHttpClientConfig0, jDKHttpClient0);
      Verb verb0 = Verb.TRACE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "4YAmQkN0");
      oAuthRequest0.setCharset("'!h");
      // Undeclared exception!
      try { 
        oAuth20Service0.execute(oAuthRequest0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported Charset: '!h
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      MockPrintStream mockPrintStream0 = new MockPrintStream("GXnYuS,");
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "GXnYuS,", "GXnYuS,", "GXnYuS,", "GXnYuS,", "response body: %s", mockPrintStream0, "response body: %s", (HttpClientConfig) null, (HttpClient) null);
      // Undeclared exception!
      try { 
        oAuth20Service0.execute((OAuthRequest) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuthService", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpProvider jDKHttpProvider0 = new JDKHttpProvider();
      HttpClient httpClient0 = jDKHttpProvider0.createClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "~\"k7\"%ImF5KunU4z|", "0a~=^@ Q~C+tP *i1L", "async obtaining request token from %s", "", "", pipedOutputStream0, "there were problems while writting to the debug stream", jDKHttpClientConfig0, httpClient0);
      Verb verb0 = Verb.POST;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "async obtaining request token from %s");
      oAuthRequest0.addParameter("", (String) null);
      // Undeclared exception!
      try { 
        oAuth20Service0.execute(oAuthRequest0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient((JDKHttpClientConfig) null);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "4YAmQkN0", "4YAmQkN0", "4YAmQkN0", "4YAmQkN0", "4YAmQkN0", pipedOutputStream0, "4YAmQkN0", jDKHttpClientConfig0, jDKHttpClient0);
      Verb verb0 = Verb.TRACE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "4YAmQkN0");
      try { 
        oAuth20Service0.execute(oAuthRequest0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: 4YAmQkN0
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "com.github.scribejava.core.httpclient.multipart.BodyPartPayload", "com.github.scribejava.core.httpclient.multipart.BodyPartPayload", "com.github.scribejava.core.httpclient.multipart.BodyPartPayload", "", "", byteArrayOutputStream0, "com.github.scribejava.core.httpclient.multipart.BodyPartPayload", jDKHttpClientConfig0, (HttpClient) null);
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "there were problems while writting to the debug stream");
      oAuthRequest0.setPayload("<;,k`+");
      try { 
        oAuth20Service0.execute(oAuthRequest0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: there were problems while writting to the debug stream
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      Verb verb0 = Verb.POST;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "async obtaining request token from %s");
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", (String) null, "~\"k7\"%ImF5KunU4z|", (String) null, "com.github.scribejava.core.oauth.OAuthService", pipedOutputStream0, "com.github.scribejava.core.oauth.OAuthService", jDKHttpClientConfig0, jDKHttpClient0);
      oAuthRequest0.setPayload("");
      OAuthAsyncRequestCallback<Response> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<Response>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      OAuthRequest.ResponseConverter<Response> oAuthRequest_ResponseConverter0 = (OAuthRequest.ResponseConverter<Response>) mock(OAuthRequest.ResponseConverter.class, new ViolatedAssumptionAnswer());
      oAuth20Service0.execute(oAuthRequest0, oAuthAsyncRequestCallback0, oAuthRequest_ResponseConverter0);
      assertEquals("", oAuth20Service0.getApiKey());
      assertEquals("~\"k7\"%ImF5KunU4z|", oAuth20Service0.getCallback());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", "", "", "", "", byteArrayOutputStream0, "", jDKHttpClientConfig0, (HttpClient) null);
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "");
      MockFile mockFile0 = new MockFile("", "");
      oAuthRequest0.setPayload((File) mockFile0);
      OAuthAsyncRequestCallback<Response> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<Response>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      OAuthRequest.ResponseConverter<Response> oAuthRequest_ResponseConverter0 = (OAuthRequest.ResponseConverter<Response>) mock(OAuthRequest.ResponseConverter.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.execute(oAuthRequest0, oAuthAsyncRequestCallback0, oAuthRequest_ResponseConverter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // JDKHttpClient does not support File payload for the moment
         //
         verifyException("com.github.scribejava.core.httpclient.jdk.JDKHttpClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "=w", "jsvInIwtE", "u,w_vK|[SK", "jsvInIwtE", "jsvInIwtE", (OutputStream) null, (String) null, jDKHttpClientConfig0, (HttpClient) null);
      Verb verb0 = Verb.DELETE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, (String) null);
      OAuthAsyncRequestCallback<Response> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<Response>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.execute(oAuthRequest0, oAuthAsyncRequestCallback0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "~\"k7\"%ImF5KunU4z|", "~\"k7\"%ImF5KunU4z|", "~\"k7\"%ImF5KunU4z|", "~\"k7\"%ImF5KunU4z|", "~\"k7\"%ImF5KunU4z|", pipedOutputStream0, "~\"k7\"%ImF5KunU4z|", jDKHttpClientConfig0, jDKHttpClient0);
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        oAuth20Service0.log("~\"k7\"%ImF5KunU4z|", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'I'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, (String) null, ", body='", ", body='", "Eo?$", pipedOutputStream0, "", jDKHttpClientConfig0, jDKHttpClient0);
      String string0 = oAuth10aService0.getApiKey();
      assertNull(string0);
      assertEquals(", body='", oAuth10aService0.getCallback());
      assertEquals(", body='", oAuth10aService0.getApiSecret());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", "", "", "", "+)=8", pipedOutputStream0, "C^tt:r~%3:'n6", jDKHttpClientConfig0, jDKHttpClient0);
      String string0 = oAuth20Service0.getCallback();
      assertEquals("", oAuth20Service0.getApiSecret());
      assertEquals("", oAuth20Service0.getApiKey());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      File file0 = MockFile.createTempFile("atymnV0)i`I<", (String) null, (File) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, (String) null, (String) null, "PV?r@[?&|&F_H", "atymnV0)i`I<", "HEADER", bufferedOutputStream0, "HEADER", jDKHttpClientConfig0, jDKHttpClient0);
      String string0 = oAuth20Service0.getApiSecret();
      assertEquals("PV?r@[?&|&F_H", oAuth20Service0.getCallback());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "$!Jc$T9F`vh\"=p\"sT", "B;t", "n)h;8}_", "$!Jc$T9F`vh\"=p\"sT", "$!Jc$T9F`vh\"=p\"sT", (OutputStream) null, "B;t", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth20Service0.log("B;t");
      assertEquals("$!Jc$T9F`vh\"=p\"sT", oAuth20Service0.getApiKey());
      assertEquals("n)h;8}_", oAuth20Service0.getCallback());
      assertEquals("B;t", oAuth20Service0.getApiSecret());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "oG4E]Y", "oG4E]Y", "oG4E]Y", "oG4E]Y", "oG4E]Y", pipedOutputStream0, "oG4E]Y", jDKHttpClientConfig0, jDKHttpClient0);
      Verb verb0 = Verb.TRACE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "oG4E]Y");
      oAuthRequest0.initMultipartPayload();
      try { 
        oAuth20Service0.execute(oAuthRequest0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: oG4E]Y
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "4YAmQkN0", "4YAmQkN0", "4YAmQkN0", "4YAmQkN0", "4YAmQkN0", pipedOutputStream0, "4YAmQkN0", jDKHttpClientConfig0, jDKHttpClient0);
      Verb verb0 = Verb.TRACE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "4YAmQkN0");
      MockFile mockFile0 = new MockFile("4YAmQkN0");
      oAuthRequest0.setPayload((File) mockFile0);
      // Undeclared exception!
      try { 
        oAuth20Service0.execute(oAuthRequest0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // JDKHttpClient does not support File payload for the moment
         //
         verifyException("com.github.scribejava.core.httpclient.jdk.JDKHttpClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "l", "l", "l", "l", "l", byteArrayOutputStream0, "l", jDKHttpClientConfig0, (HttpClient) null);
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "l");
      oAuthRequest0.setPayload("l");
      Future<Response> future0 = oAuth20Service0.executeAsync(oAuthRequest0);
      assertNotNull(future0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Verb verb0 = Verb.PUT;
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "", "", "", "", "", byteArrayOutputStream0, "", jDKHttpClientConfig0, (HttpClient) null);
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "");
      MockFile mockFile0 = new MockFile("");
      oAuthRequest0.setPayload((File) mockFile0);
      // Undeclared exception!
      try { 
        oAuth20Service0.executeAsync(oAuthRequest0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // JDKHttpClient does not support File payload for the moment
         //
         verifyException("com.github.scribejava.core.httpclient.jdk.JDKHttpClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      MockFile mockFile0 = new MockFile("jDl8=(>$E[");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "jDl8=(>$E[", "XEQcaG", (String) null, (String) null, "jDl8=(>$E[", mockPrintStream0, "jDl8=(>$E[", (HttpClientConfig) null, (HttpClient) null);
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        oAuth20Service0.log((String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, "7MTeE%^e>", "7MTeE%^e>", "7MTeE%^e>", "7MTeE%^e>", pipedOutputStream0, "7MTeE%^e>", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth10aService0.close();
      assertEquals("7MTeE%^e>", oAuth10aService0.getApiSecret());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("S3&B7 +QfSZ#lE");
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, (String) null, (String) null, (String) null, (String) null, (String) null, mockFileOutputStream0, (String) null, (HttpClientConfig) null, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessToken((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, "7MTeE%^e>", "7MTeE%^e>", "7MTeE%^e>", "7MTeE%^e>", pipedOutputStream0, "7MTeE%^e>", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth10aService0.log("7MTeE%^e>");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '^'
         //
         verifyException("java.util.Formatter", e);
      }
  }
}
