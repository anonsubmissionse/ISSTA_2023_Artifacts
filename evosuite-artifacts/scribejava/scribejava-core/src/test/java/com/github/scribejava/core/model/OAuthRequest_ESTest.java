/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 12 02:51:28 GMT 2022
 */

package com.github.scribejava.core.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.scribejava.core.httpclient.multipart.ByteArrayBodyPartPayload;
import com.github.scribejava.core.httpclient.multipart.FileByteArrayBodyPartPayload;
import com.github.scribejava.core.httpclient.multipart.MultipartPayload;
import com.github.scribejava.core.model.OAuthRequest;
import com.github.scribejava.core.model.ParameterList;
import com.github.scribejava.core.model.Verb;
import java.io.File;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OAuthRequest_ESTest extends OAuthRequest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "?.*");
      oAuthRequest0.addParameter(", headers=", "?.*");
      assertNull(oAuthRequest0.getStringPayload());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "?.*");
      Map<String, String> map0 = oAuthRequest0.getHeaders();
      oAuthRequest0.initMultipartPayload(map0);
      MultipartPayload multipartPayload0 = new MultipartPayload(map0);
      oAuthRequest0.addBodyPartPayloadInMultipartPayload(multipartPayload0);
      assertNull(multipartPayload0.getEpilogue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OAuthRequest oAuthRequest0 = new OAuthRequest((Verb) null, "p9tWwFzz?r");
      oAuthRequest0.initMultipartPayload("p9tWwFzz?r");
      assertEquals("p9tWwFzz?r", oAuthRequest0.getUrl());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Verb verb0 = Verb.PATCH;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "http://:G@Ko[/");
      Verb verb1 = oAuthRequest0.getVerb();
      assertTrue(verb1.isPermitBody());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "EK\u0002HGhU+_Srp7M\"");
      Verb verb1 = oAuthRequest0.getVerb();
      assertFalse(verb1.isRequiresBody());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Verb verb0 = Verb.TRACE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, (String) null);
      String string0 = oAuthRequest0.getUrl();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Verb verb0 = Verb.TRACE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "");
      String string0 = oAuthRequest0.getUrl();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Verb verb0 = Verb.PATCH;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "7T!T^l<lfN");
      oAuthRequest0.setPayload("scope");
      String string0 = oAuthRequest0.getStringPayload();
      assertEquals("scope", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Verb verb0 = Verb.PATCH;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "7T!T^l<lfN");
      oAuthRequest0.setPayload("");
      String string0 = oAuthRequest0.getStringPayload();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Verb verb0 = Verb.POST;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "");
      String string0 = oAuthRequest0.getSanitizedUrl();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "http://9Josz5m0o L");
      oAuthRequest0.setRealm("http://9Josz5m0o L");
      String string0 = oAuthRequest0.getRealm();
      assertEquals("http://9Josz5m0o L", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Verb verb0 = Verb.HEAD;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "c");
      oAuthRequest0.setRealm("");
      String string0 = oAuthRequest0.getRealm();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "http://9Josz5m0o L");
      oAuthRequest0.addQuerystringParameter("F{+:zZ|", "oauth_");
      ParameterList parameterList0 = oAuthRequest0.getQueryStringParams();
      assertEquals(1, parameterList0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Verb verb0 = Verb.GET;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "realm");
      Map<String, String> map0 = oAuthRequest0.getOauthParameters();
      oAuthRequest0.initMultipartPayload("realm", map0);
      Map<String, String> map1 = oAuthRequest0.getOauthParameters();
      assertFalse(map1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "?.*");
      Map<String, String> map0 = oAuthRequest0.getHeaders();
      oAuthRequest0.initMultipartPayload(map0);
      MultipartPayload multipartPayload0 = oAuthRequest0.getMultipartPayload();
      assertEquals("----ScribeJava----1392409281320", multipartPayload0.getBoundary());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "http://9Josz5m0o L");
      oAuthRequest0.addHeader("http://9Josz5m0o L", "4 :u>,");
      Map<String, String> map0 = oAuthRequest0.getHeaders();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/Fs!lV$JE0h0https:/http:/+");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "6ii](`TsY[^.");
      Verb verb0 = Verb.TRACE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "");
      File file0 = MockFile.createTempFile("Fs!lV$JE0h", "https://http://+");
      oAuthRequest0.setPayload(file0);
      File file1 = oAuthRequest0.getFilePayload();
      assertEquals(14L, file1.length());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      System.setCurrentTimeMillis((-2091L));
      Verb verb0 = Verb.TRACE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "");
      File file0 = MockFile.createTempFile("Fs!lV$JE0h", "https://http://+");
      oAuthRequest0.setPayload(file0);
      File file1 = oAuthRequest0.getFilePayload();
      assertEquals("+", file1.getName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Verb verb0 = Verb.PATCH;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ":G@Ko[/");
      MockFile mockFile0 = new MockFile("");
      oAuthRequest0.setPayload((File) mockFile0);
      File file0 = oAuthRequest0.getFilePayload();
      assertSame(file0, mockFile0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Verb verb0 = Verb.PATCH;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "7dXM");
      File file0 = MockFile.createTempFile("7dXM", "com.github.scribejava.core.model.ParameterList");
      MockFile mockFile0 = new MockFile(file0, ".8wZ");
      oAuthRequest0.setPayload((File) mockFile0);
      File file1 = oAuthRequest0.getFilePayload();
      assertFalse(file1.exists());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "");
      String string0 = oAuthRequest0.getCompleteUrl();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Verb verb0 = Verb.PUT;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "");
      oAuthRequest0.setCharset("");
      String string0 = oAuthRequest0.getCharset();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OAuthRequest oAuthRequest0 = new OAuthRequest((Verb) null, "p9tWwFzz?r");
      oAuthRequest0.addBodyParameter("9[=!", "9[=!");
      byte[] byteArray0 = oAuthRequest0.getByteArrayPayload();
      assertEquals(21, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "http://9Josz5m0o L");
      oAuthRequest0.addBodyParameter("http://9Josz5m0o L", "");
      ParameterList parameterList0 = oAuthRequest0.getBodyParams();
      assertEquals(1, parameterList0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Verb verb0 = Verb.POST;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "scope");
      // Undeclared exception!
      try { 
        oAuthRequest0.setPayload((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "com.github.scribejava.core.model.Response");
      byte[] byteArray0 = new byte[5];
      ByteArrayBodyPartPayload byteArrayBodyPartPayload0 = new ByteArrayBodyPartPayload(byteArray0, "");
      Map<String, String> map0 = byteArrayBodyPartPayload0.getHeaders();
      // Undeclared exception!
      try { 
        oAuthRequest0.initMultipartPayload(map0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "");
      // Undeclared exception!
      try { 
        oAuthRequest0.initMultipartPayload((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.httpclient.multipart.MultipartPayload", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Verb verb0 = Verb.TRACE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "http://");
      byte[] byteArray0 = new byte[0];
      FileByteArrayBodyPartPayload fileByteArrayBodyPartPayload0 = new FileByteArrayBodyPartPayload(byteArray0, "");
      Map<String, String> map0 = fileByteArrayBodyPartPayload0.getHeaders();
      // Undeclared exception!
      try { 
        oAuthRequest0.initMultipartPayload("http://", map0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Verb verb0 = Verb.GET;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "https://:443");
      Map<String, String> map0 = oAuthRequest0.getOauthParameters();
      // Undeclared exception!
      try { 
        oAuthRequest0.initMultipartPayload("d&O", map0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // {'boundary'='d&O'} has invalid syntax. Should be '[0-9a-zA-Z'()+_,-./:=? ]{0,69}[0-9a-zA-Z'()+_,-./:=?]'.
         //
         verifyException("com.github.scribejava.core.httpclient.multipart.MultipartUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Verb verb0 = Verb.PATCH;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "Content-Encoding");
      byte[] byteArray0 = new byte[2];
      FileByteArrayBodyPartPayload fileByteArrayBodyPartPayload0 = new FileByteArrayBodyPartPayload(byteArray0, (byte) (-1), (byte) (-90), "Content-Encoding", "Content-Encoding");
      Map<String, String> map0 = fileByteArrayBodyPartPayload0.getHeaders();
      // Undeclared exception!
      try { 
        oAuthRequest0.initMultipartPayload("Content-Encoding", "Content-Encoding", map0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Verb verb0 = Verb.GET;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "realm");
      Map<String, String> map0 = oAuthRequest0.getOauthParameters();
      // Undeclared exception!
      try { 
        oAuthRequest0.initMultipartPayload("&", "je1Hj*1Tfhh", map0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // {'boundary'='je1Hj*1Tfhh'} has invalid syntax. Should be '[0-9a-zA-Z'()+_,-./:=? ]{0,69}[0-9a-zA-Z'()+_,-./:=?]'.
         //
         verifyException("com.github.scribejava.core.httpclient.multipart.MultipartUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Verb verb0 = Verb.GET;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "sbm<x*zzW%");
      // Undeclared exception!
      try { 
        oAuthRequest0.initMultipartPayload("AmE.Pd4s0w70sYMz", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // {'boundary'=''} has invalid syntax. Should be '[0-9a-zA-Z'()+_,-./:=? ]{0,69}[0-9a-zA-Z'()+_,-./:=?]'.
         //
         verifyException("com.github.scribejava.core.httpclient.multipart.MultipartUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Verb verb0 = Verb.TRACE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, (String) null);
      // Undeclared exception!
      try { 
        oAuthRequest0.getSanitizedUrl();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Verb verb0 = Verb.TRACE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "");
      // Undeclared exception!
      try { 
        oAuthRequest0.getQueryStringParams();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "https://xVN,gU@v$K'?C+%Vo2");
      // Undeclared exception!
      try { 
        oAuthRequest0.getQueryStringParams();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URLDecoder: Illegal hex characters in escape (%) pattern - For input string: \"Vo\"
         //
         verifyException("java.net.URLDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, (String) null);
      // Undeclared exception!
      try { 
        oAuthRequest0.getCompleteUrl();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Verb verb0 = Verb.TRACE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "");
      oAuthRequest0.addBodyParameter("", (String) null);
      // Undeclared exception!
      try { 
        oAuthRequest0.getByteArrayPayload();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      OAuthRequest oAuthRequest0 = new OAuthRequest((Verb) null, "s");
      // Undeclared exception!
      try { 
        oAuthRequest0.addParameter("7T!T^l<lfN", "7p!)VJTz");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Verb verb0 = Verb.TRACE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, (String) null);
      // Undeclared exception!
      try { 
        oAuthRequest0.addHeader((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Verb verb0 = Verb.HEAD;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "H-=s4/T])4,{cR'3");
      oAuthRequest0.setCharset("H-=s4/T])4,{cR'3");
      String string0 = oAuthRequest0.getCharset();
      assertEquals("H-=s4/T])4,{cR'3", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      OAuthRequest oAuthRequest0 = new OAuthRequest((Verb) null, "p9tWwFzz?r");
      String string0 = oAuthRequest0.getCharset();
      assertEquals("UTF-8", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      OAuthRequest oAuthRequest0 = new OAuthRequest((Verb) null, "p9tWwFzz?r");
      oAuthRequest0.initMultipartPayload();
      assertEquals("p9tWwFzz?r", oAuthRequest0.getUrl());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      OAuthRequest oAuthRequest0 = new OAuthRequest((Verb) null, "p9tWwFzz?r");
      oAuthRequest0.getVerb();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "#j~O`X6bd;B");
      String string0 = oAuthRequest0.getUrl();
      assertEquals("#j~O`X6bd;B", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Verb verb0 = Verb.TRACE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "");
      byte[] byteArray0 = new byte[6];
      ByteArrayBodyPartPayload byteArrayBodyPartPayload0 = new ByteArrayBodyPartPayload(byteArray0);
      // Undeclared exception!
      try { 
        oAuthRequest0.addBodyPartPayloadInMultipartPayload(byteArrayBodyPartPayload0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Verb verb0 = Verb.PUT;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "http://");
      oAuthRequest0.setCharset("http://");
      // Undeclared exception!
      try { 
        oAuthRequest0.getByteArrayPayload();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported Charset: http://
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Verb verb0 = Verb.PUT;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "");
      byte[] byteArray0 = new byte[0];
      oAuthRequest0.setPayload(byteArray0);
      byte[] byteArray1 = oAuthRequest0.getByteArrayPayload();
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "https://ht&s:163");
      String string0 = oAuthRequest0.getSanitizedUrl();
      assertEquals("https://ht&s:163", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Verb verb0 = Verb.PUT;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "https://:443/");
      String string0 = oAuthRequest0.getSanitizedUrl();
      assertEquals("https:///", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Verb verb0 = Verb.GET;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "https://:443");
      String string0 = oAuthRequest0.getSanitizedUrl();
      assertEquals("https://", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Verb verb0 = Verb.PUT;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "http://");
      String string0 = oAuthRequest0.getSanitizedUrl();
      assertEquals("http://", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "http://:80/");
      String string0 = oAuthRequest0.getSanitizedUrl();
      assertEquals("http:///", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Verb verb0 = Verb.POST;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "http://Ss5m0VL:80");
      String string0 = oAuthRequest0.getSanitizedUrl();
      assertEquals("http://Ss5m0VL", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Verb verb0 = Verb.PUT;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "@Request(%s %s)");
      oAuthRequest0.addParameter("@Request(PUT @Request(%s %s))", "@Request(%s %s)");
      assertNull(oAuthRequest0.getRealm());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Verb verb0 = Verb.POST;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "http://Ss5m0VL:80");
      oAuthRequest0.addOAuthParameter("realm", "http://Ss5m0VL:80");
      assertNull(oAuthRequest0.getStringPayload());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Verb verb0 = Verb.HEAD;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "scope");
      oAuthRequest0.addOAuthParameter("scope", "scope");
      assertNull(oAuthRequest0.getRealm());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "N#JUcz!vT*QOUW;&&");
      // Undeclared exception!
      try { 
        oAuthRequest0.addOAuthParameter("iealm", "iealm");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // OAuth parameters must either be 'scope', 'realm' or start with 'oauth_'
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Verb verb0 = Verb.POST;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "oauth_<zs4f");
      oAuthRequest0.addOAuthParameter("oauth_<zs4f", "oauth_<zs4f");
      assertNull(oAuthRequest0.getStringPayload());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "_");
      oAuthRequest0.initMultipartPayload("_", "_");
      assertNull(oAuthRequest0.getRealm());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "?.*");
      // Undeclared exception!
      try { 
        oAuthRequest0.addOAuthParameter((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Verb verb0 = Verb.POST;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "");
      oAuthRequest0.setMultipartPayload((MultipartPayload) null);
      assertEquals("", oAuthRequest0.getUrl());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "http://:80/");
      String string0 = oAuthRequest0.getCompleteUrl();
      assertEquals("http://:80/", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "http://:80/");
      File file0 = oAuthRequest0.getFilePayload();
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "http://:80/");
      ParameterList parameterList0 = oAuthRequest0.getQueryStringParams();
      assertEquals(0, parameterList0.size());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Verb verb0 = Verb.HEAD;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "H-=s4/T])4,{cR'3");
      byte[] byteArray0 = new byte[5];
      ByteArrayBodyPartPayload byteArrayBodyPartPayload0 = new ByteArrayBodyPartPayload(byteArray0, (byte)99, (byte)0, "");
      oAuthRequest0.setBodyPartPayloadInMultipartPayload(byteArrayBodyPartPayload0);
      assertNull(oAuthRequest0.getStringPayload());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "http://:80/");
      ParameterList parameterList0 = oAuthRequest0.getBodyParams();
      assertEquals(0, parameterList0.size());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "http://:80/");
      oAuthRequest0.initMultipartPayload("http://:80/", "http:///", (Map<String, String>) null);
      assertEquals(Verb.OPTIONS, oAuthRequest0.getVerb());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Verb verb0 = Verb.POST;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "");
      // Undeclared exception!
      try { 
        oAuthRequest0.initMultipartPayload("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // {'boundary'=''} has invalid syntax. Should be '[0-9a-zA-Z'()+_,-./:=? ]{0,69}[0-9a-zA-Z'()+_,-./:=?]'.
         //
         verifyException("com.github.scribejava.core.httpclient.multipart.MultipartUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "_");
      MultipartPayload multipartPayload0 = oAuthRequest0.getMultipartPayload();
      assertNull(multipartPayload0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "http://:80/");
      String string0 = oAuthRequest0.toString();
      assertEquals("@Request(OPTIONS http://:80/)", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Verb verb0 = Verb.HEAD;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "H-=s4/T])4,{cR'3");
      String string0 = oAuthRequest0.getRealm();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      OAuthRequest oAuthRequest0 = new OAuthRequest((Verb) null, "s");
      String string0 = oAuthRequest0.getStringPayload();
      assertNull(string0);
  }
}
