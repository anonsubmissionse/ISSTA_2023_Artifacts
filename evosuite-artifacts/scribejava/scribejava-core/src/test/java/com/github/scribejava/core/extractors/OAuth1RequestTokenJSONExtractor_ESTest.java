/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 12 03:09:52 GMT 2022
 */

package com.github.scribejava.core.extractors;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.scribejava.core.extractors.OAuth1RequestTokenJSONExtractor;
import com.github.scribejava.core.model.OAuth1RequestToken;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OAuth1RequestTokenJSONExtractor_ESTest extends OAuth1RequestTokenJSONExtractor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OAuth1RequestTokenJSONExtractor oAuth1RequestTokenJSONExtractor0 = new OAuth1RequestTokenJSONExtractor();
      // Undeclared exception!
      try { 
        oAuth1RequestTokenJSONExtractor0.createToken((String) null, (String) null, ";MP3<!j`S)=9j<AO}u");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // oauth_token can't be null
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OAuth1RequestTokenJSONExtractor oAuth1RequestTokenJSONExtractor0 = OAuth1RequestTokenJSONExtractor.instance();
      OAuth1RequestToken oAuth1RequestToken0 = oAuth1RequestTokenJSONExtractor0.createToken("", "", "");
      assertEquals("", oAuth1RequestToken0.getToken());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OAuth1RequestTokenJSONExtractor oAuth1RequestTokenJSONExtractor0 = new OAuth1RequestTokenJSONExtractor();
      OAuth1RequestToken oAuth1RequestToken0 = oAuth1RequestTokenJSONExtractor0.createToken("VDO", ";MP3<!j`S)=9j<AO}u", ";MP3<!j`S)=9j<AO}u");
      assertEquals("VDO", oAuth1RequestToken0.getToken());
      assertEquals(";MP3<!j`S)=9j<AO}u", oAuth1RequestToken0.getTokenSecret());
  }
}
