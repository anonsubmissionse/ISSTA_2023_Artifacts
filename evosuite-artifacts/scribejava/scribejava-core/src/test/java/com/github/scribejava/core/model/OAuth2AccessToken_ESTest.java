/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 12 02:56:40 GMT 2022
 */

package com.github.scribejava.core.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.scribejava.core.model.OAuth2AccessToken;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OAuth2AccessToken_ESTest extends OAuth2AccessToken_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(1054);
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken("com.github.scribejava.core.model.OAuth2AccessToken", "", integer0, "com.github.scribejava.core.model.OAuth2AccessToken", "", "com.github.scribejava.core.model.OAuth2AccessToken");
      oAuth2AccessToken0.hashCode();
      assertEquals("com.github.scribejava.core.model.OAuth2AccessToken", oAuth2AccessToken0.getRefreshToken());
      assertEquals("com.github.scribejava.core.model.OAuth2AccessToken", oAuth2AccessToken0.getAccessToken());
      assertEquals("", oAuth2AccessToken0.getTokenType());
      assertEquals("", oAuth2AccessToken0.getScope());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(0);
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken("", "qUcqGyOm,DSxK{s;Z", integer0, "qUcqGyOm,DSxK{s;Z", "A'uA", "qUcqGyOm,DSxK{s;Z");
      oAuth2AccessToken0.hashCode();
      assertEquals("", oAuth2AccessToken0.getAccessToken());
      assertEquals("qUcqGyOm,DSxK{s;Z", oAuth2AccessToken0.getRefreshToken());
      assertEquals("A'uA", oAuth2AccessToken0.getScope());
      assertEquals("qUcqGyOm,DSxK{s;Z", oAuth2AccessToken0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken("access_token can't be null", "access_token can't be null");
      oAuth2AccessToken0.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken("?r#9v", "?r#9v");
      boolean boolean0 = oAuth2AccessToken0.equals(oAuth2AccessToken0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = Integer.getInteger(",Q", 95);
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken(",Q", ",Q", integer0, ",Q", ",Q", ",Q");
      String string0 = oAuth2AccessToken0.getTokenType();
      assertEquals(",Q", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(1054);
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken("com.github.scribejava.core.model.OAuth2AccessToken", "", integer0, "com.github.scribejava.core.model.OAuth2AccessToken", "", "com.github.scribejava.core.model.OAuth2AccessToken");
      String string0 = oAuth2AccessToken0.getTokenType();
      assertEquals("", oAuth2AccessToken0.getScope());
      assertEquals("", string0);
      assertEquals("com.github.scribejava.core.model.OAuth2AccessToken", oAuth2AccessToken0.getRefreshToken());
      assertEquals("com.github.scribejava.core.model.OAuth2AccessToken", oAuth2AccessToken0.getAccessToken());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = Integer.getInteger(",Q", 95);
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken(",Q", ",Q", integer0, ",Q", ",Q", ",Q");
      String string0 = oAuth2AccessToken0.getScope();
      assertEquals(",Q", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-56));
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken("Hiy08UiE'aFei7", "s/", integer0, "1G.;],mO0?D", "", "T,hQLOit8S`");
      String string0 = oAuth2AccessToken0.getScope();
      assertEquals("s/", oAuth2AccessToken0.getTokenType());
      assertEquals("1G.;],mO0?D", oAuth2AccessToken0.getRefreshToken());
      assertEquals("", string0);
      assertEquals("Hiy08UiE'aFei7", oAuth2AccessToken0.getAccessToken());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken("access_token can't be null", "access_token can't be null");
      String string0 = oAuth2AccessToken0.getRefreshToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(0);
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken("uh|MZA$BwVw", "", integer0, "", "", "");
      String string0 = oAuth2AccessToken0.getRefreshToken();
      assertEquals("", oAuth2AccessToken0.getTokenType());
      assertEquals("uh|MZA$BwVw", oAuth2AccessToken0.getAccessToken());
      assertEquals("", string0);
      assertEquals("", oAuth2AccessToken0.getScope());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken("access_token can't be null", "access_token can't be null");
      Integer integer0 = oAuth2AccessToken0.getExpiresIn();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(1054);
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken("com.github.scribejava.core.model.OAuth2AccessToken", "", integer0, "com.github.scribejava.core.model.OAuth2AccessToken", "", "com.github.scribejava.core.model.OAuth2AccessToken");
      oAuth2AccessToken0.getExpiresIn();
      assertEquals("", oAuth2AccessToken0.getTokenType());
      assertEquals("com.github.scribejava.core.model.OAuth2AccessToken", oAuth2AccessToken0.getRefreshToken());
      assertEquals("com.github.scribejava.core.model.OAuth2AccessToken", oAuth2AccessToken0.getAccessToken());
      assertEquals("", oAuth2AccessToken0.getScope());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer((-793));
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken("", "", integer0, "", "access_token can't be null", "");
      oAuth2AccessToken0.getExpiresIn();
      assertEquals("access_token can't be null", oAuth2AccessToken0.getScope());
      assertEquals("", oAuth2AccessToken0.getRefreshToken());
      assertEquals("", oAuth2AccessToken0.getAccessToken());
      assertEquals("", oAuth2AccessToken0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(0);
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken("", "qUcqGyOm,DSxK{s;Z", integer0, "qUcqGyOm,DSxK{s;Z", "A'uA", "qUcqGyOm,DSxK{s;Z");
      String string0 = oAuth2AccessToken0.getAccessToken();
      assertEquals("", string0);
      assertEquals("qUcqGyOm,DSxK{s;Z", oAuth2AccessToken0.getRefreshToken());
      assertEquals("A'uA", oAuth2AccessToken0.getScope());
      assertEquals("qUcqGyOm,DSxK{s;Z", oAuth2AccessToken0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = Integer.getInteger((String) null, (-446));
      OAuth2AccessToken oAuth2AccessToken0 = null;
      try {
        oAuth2AccessToken0 = new OAuth2AccessToken((String) null, (String) null, integer0, (String) null, "6Rg/IF/g'9/'35R,v{", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // access_token can't be null
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OAuth2AccessToken oAuth2AccessToken0 = null;
      try {
        oAuth2AccessToken0 = new OAuth2AccessToken((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // access_token can't be null
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OAuth2AccessToken oAuth2AccessToken0 = null;
      try {
        oAuth2AccessToken0 = new OAuth2AccessToken((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // access_token can't be null
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken("access_token can't be null", "access_token can't be null");
      String string0 = oAuth2AccessToken0.getTokenType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken("access_token can't be null", "access_token can't be null");
      String string0 = oAuth2AccessToken0.getAccessToken();
      assertEquals("access_token can't be null", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken("access_token can't be null", "access_token can't be null");
      String string0 = oAuth2AccessToken0.getScope();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Integer integer0 = new Integer(0);
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken("", "qUcqGyOm,DSxK{s;Z", integer0, "qUcqGyOm,DSxK{s;Z", "A'uA", "qUcqGyOm,DSxK{s;Z");
      String string0 = oAuth2AccessToken0.getRefreshToken();
      assertEquals("A'uA", oAuth2AccessToken0.getScope());
      assertEquals("", oAuth2AccessToken0.getAccessToken());
      assertEquals("qUcqGyOm,DSxK{s;Z", string0);
      assertEquals("qUcqGyOm,DSxK{s;Z", oAuth2AccessToken0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Integer integer0 = new Integer(0);
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken("", "qUcqGyOm,DSxK{s;Z", integer0, "qUcqGyOm,DSxK{s;Z", "A'uA", "qUcqGyOm,DSxK{s;Z");
      oAuth2AccessToken0.getExpiresIn();
      assertEquals("A'uA", oAuth2AccessToken0.getScope());
      assertEquals("qUcqGyOm,DSxK{s;Z", oAuth2AccessToken0.getTokenType());
      assertEquals("qUcqGyOm,DSxK{s;Z", oAuth2AccessToken0.getRefreshToken());
      assertEquals("", oAuth2AccessToken0.getAccessToken());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken("", "");
      Integer integer0 = new Integer((-3455));
      OAuth2AccessToken oAuth2AccessToken1 = new OAuth2AccessToken("", (String) null, integer0, (String) null, "", "");
      boolean boolean0 = oAuth2AccessToken0.equals(oAuth2AccessToken1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken("g", "g", (Integer) null, "g", "g", "g");
      OAuth2AccessToken oAuth2AccessToken1 = new OAuth2AccessToken("g", "g", (Integer) null, "d@\"4I=*P-x3", "g", "g");
      boolean boolean0 = oAuth2AccessToken0.equals(oAuth2AccessToken1);
      assertEquals("g", oAuth2AccessToken1.getTokenType());
      assertFalse(boolean0);
      assertEquals("g", oAuth2AccessToken1.getScope());
      assertEquals("g", oAuth2AccessToken1.getAccessToken());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken("kTJXS^", "kTJXS^");
      OAuth2AccessToken oAuth2AccessToken1 = new OAuth2AccessToken(")-Mgrwq.\n");
      boolean boolean0 = oAuth2AccessToken1.equals(oAuth2AccessToken0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken("?r#9v", "?r#9v");
      boolean boolean0 = oAuth2AccessToken0.equals("?r#9v");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken("_>lZ[caAnm.");
      boolean boolean0 = oAuth2AccessToken0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken("kTJXS^", "kTJXS^");
      OAuth2AccessToken oAuth2AccessToken1 = new OAuth2AccessToken("kTJXS^", ")-Mgrwq.\n");
      boolean boolean0 = oAuth2AccessToken0.equals(oAuth2AccessToken1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken("This token object was not constructed by ScribeJava and does not have a rawResponse", "This token object was not constructed by ScribeJava and does not have a rawResponse", (Integer) null, "This token object was not constructed by ScribeJava and does not have a rawResponse", "This token object was not constructed by ScribeJava and does not have a rawResponse", "This token object was not constructed by ScribeJava and does not have a rawResponse");
      OAuth2AccessToken oAuth2AccessToken1 = new OAuth2AccessToken("This token object was not constructed by ScribeJava and does not have a rawResponse");
      boolean boolean0 = oAuth2AccessToken0.equals(oAuth2AccessToken1);
      assertFalse(boolean0);
  }
}
