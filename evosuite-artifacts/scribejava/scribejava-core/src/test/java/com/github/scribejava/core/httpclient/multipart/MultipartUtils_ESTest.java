/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 12 02:53:17 GMT 2022
 */

package com.github.scribejava.core.httpclient.multipart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.scribejava.core.httpclient.multipart.BodyPartPayload;
import com.github.scribejava.core.httpclient.multipart.ByteArrayBodyPartPayload;
import com.github.scribejava.core.httpclient.multipart.MultipartPayload;
import com.github.scribejava.core.httpclient.multipart.MultipartUtils;
import java.io.ByteArrayOutputStream;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MultipartUtils_ESTest extends MultipartUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultipartUtils.getPayload((MultipartPayload) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.httpclient.multipart.MultipartUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultipartPayload multipartPayload0 = new MultipartPayload();
      Map<String, String> map0 = BodyPartPayload.convertContentTypeToHeaders("g");
      byte[] byteArray0 = new byte[8];
      ByteArrayBodyPartPayload byteArrayBodyPartPayload0 = new ByteArrayBodyPartPayload(byteArray0, (byte)0, (byte) (-1), map0);
      multipartPayload0.addBodyPart((BodyPartPayload) byteArrayBodyPartPayload0);
      // Undeclared exception!
      try { 
        MultipartUtils.getPayload(multipartPayload0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = MultipartUtils.parseBoundaryFromHeader("; boundary=\"?([0-9a-zA-Z'()+_,-./:=? ]{0,69}[0-9a-zA-Z'()+_,-./:=?])\"?");
      assertEquals("?(", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = MultipartUtils.parseBoundaryFromHeader((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultipartUtils.checkBoundarySyntax("0-9a-zA-Z'()+_,-./:=?");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = MultipartUtils.generateDefaultBoundary();
      assertEquals("----ScribeJava----1392409281320", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultipartPayload multipartPayload0 = new MultipartPayload("----ScribeJava----1392409281320", (Map<String, String>) null);
      byte[] byteArray0 = new byte[7];
      ByteArrayBodyPartPayload byteArrayBodyPartPayload0 = new ByteArrayBodyPartPayload(byteArray0, (String) null);
      multipartPayload0.addBodyPart((BodyPartPayload) byteArrayBodyPartPayload0);
      multipartPayload0.setEpilogue("");
      ByteArrayOutputStream byteArrayOutputStream0 = MultipartUtils.getPayload(multipartPayload0);
      assertEquals("------ScribeJava----1392409281320\r\n\r\n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\r\n------ScribeJava----1392409281320--\r\n", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultipartPayload multipartPayload0 = new MultipartPayload("----ScribeJava----1392409281320", (Map<String, String>) null);
      byte[] byteArray0 = new byte[7];
      ByteArrayBodyPartPayload byteArrayBodyPartPayload0 = new ByteArrayBodyPartPayload(byteArray0, (String) null);
      multipartPayload0.addBodyPart((BodyPartPayload) byteArrayBodyPartPayload0);
      ByteArrayOutputStream byteArrayOutputStream0 = MultipartUtils.getPayload(multipartPayload0);
      assertEquals("------ScribeJava----1392409281320\r\n\r\n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\r\n------ScribeJava----1392409281320--", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultipartPayload multipartPayload0 = new MultipartPayload("----ScribeJava----1392409281320", (Map<String, String>) null);
      multipartPayload0.setPreamble("B*b!`v");
      ByteArrayOutputStream byteArrayOutputStream0 = MultipartUtils.getPayload(multipartPayload0);
      assertEquals(8, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultipartPayload multipartPayload0 = new MultipartPayload();
      ByteArrayOutputStream byteArrayOutputStream0 = MultipartUtils.getPayload(multipartPayload0);
      assertEquals("----ScribeJava----1392409281320", multipartPayload0.getBoundary());
      assertEquals("", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultipartPayload multipartPayload0 = new MultipartPayload();
      Map<String, String> map0 = multipartPayload0.getHeaders();
      MultipartPayload multipartPayload1 = new MultipartPayload(map0);
      multipartPayload1.addBodyPart((BodyPartPayload) multipartPayload0);
      ByteArrayOutputStream byteArrayOutputStream0 = MultipartUtils.getPayload(multipartPayload1);
      assertEquals("------ScribeJava----1392409281320\r\nContent-Type: multipart/form-data; boundary=\"----ScribeJava----1392409281320\"\r\n\r\n\r\n------ScribeJava----1392409281320--", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = MultipartUtils.parseBoundaryFromHeader("----ScribeJava----1392409281320");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultipartUtils.checkBoundarySyntax("PiD|W|vw");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // {'boundary'='PiD|W|vw'} has invalid syntax. Should be '[0-9a-zA-Z'()+_,-./:=? ]{0,69}[0-9a-zA-Z'()+_,-./:=?]'.
         //
         verifyException("com.github.scribejava.core.httpclient.multipart.MultipartUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultipartUtils.checkBoundarySyntax((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // {'boundary'='null'} has invalid syntax. Should be '[0-9a-zA-Z'()+_,-./:=? ]{0,69}[0-9a-zA-Z'()+_,-./:=?]'.
         //
         verifyException("com.github.scribejava.core.httpclient.multipart.MultipartUtils", e);
      }
  }
}
