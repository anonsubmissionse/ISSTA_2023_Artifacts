/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 12 03:09:06 GMT 2022
 */

package com.github.scribejava.core.httpclient.multipart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.scribejava.core.httpclient.multipart.ByteArrayBodyPartPayload;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteArrayBodyPartPayload_ESTest extends ByteArrayBodyPartPayload_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayBodyPartPayload byteArrayBodyPartPayload0 = new ByteArrayBodyPartPayload(byteArray0, 1, 1);
      int int0 = byteArrayBodyPartPayload0.getOff();
      assertEquals(1, byteArrayBodyPartPayload0.getLen());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayBodyPartPayload byteArrayBodyPartPayload0 = new ByteArrayBodyPartPayload(byteArray0, (-1), (-1));
      int int0 = byteArrayBodyPartPayload0.getOff();
      assertEquals((-1), int0);
      assertEquals((-1), byteArrayBodyPartPayload0.getLen());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayBodyPartPayload byteArrayBodyPartPayload0 = new ByteArrayBodyPartPayload(byteArray0, (-1), (-1));
      int int0 = byteArrayBodyPartPayload0.getLen();
      assertEquals((-1), byteArrayBodyPartPayload0.getOff());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ByteArrayBodyPartPayload byteArrayBodyPartPayload0 = null;
      try {
        byteArrayBodyPartPayload0 = new ByteArrayBodyPartPayload((byte[]) null, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.httpclient.multipart.ByteArrayBodyPartPayload", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ByteArrayBodyPartPayload byteArrayBodyPartPayload0 = null;
      try {
        byteArrayBodyPartPayload0 = new ByteArrayBodyPartPayload((byte[]) null, "J{E]yAP");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.httpclient.multipart.ByteArrayBodyPartPayload", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteArrayBodyPartPayload byteArrayBodyPartPayload0 = null;
      try {
        byteArrayBodyPartPayload0 = new ByteArrayBodyPartPayload((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.httpclient.multipart.ByteArrayBodyPartPayload", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ByteArrayBodyPartPayload byteArrayBodyPartPayload0 = new ByteArrayBodyPartPayload(byteArray0, hashMap0);
      assertEquals(0, byteArrayBodyPartPayload0.getLen());
      assertEquals(0, byteArrayBodyPartPayload0.getOff());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ByteArrayBodyPartPayload byteArrayBodyPartPayload0 = new ByteArrayBodyPartPayload((byte[]) null, 1, 1, (Map<String, String>) null);
      int int0 = byteArrayBodyPartPayload0.getLen();
      assertEquals(1, int0);
      assertEquals(1, byteArrayBodyPartPayload0.getOff());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteArrayBodyPartPayload byteArrayBodyPartPayload0 = new ByteArrayBodyPartPayload((byte[]) null, 0, 0);
      int int0 = byteArrayBodyPartPayload0.getOff();
      assertEquals(0, int0);
      assertEquals(0, byteArrayBodyPartPayload0.getLen());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayBodyPartPayload byteArrayBodyPartPayload0 = new ByteArrayBodyPartPayload(byteArray0);
      assertEquals(0, byteArrayBodyPartPayload0.getOff());
      assertEquals(3, byteArrayBodyPartPayload0.getLen());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteArrayBodyPartPayload byteArrayBodyPartPayload0 = new ByteArrayBodyPartPayload((byte[]) null, 0, 0);
      int int0 = byteArrayBodyPartPayload0.getLen();
      assertEquals(0, int0);
      assertEquals(0, byteArrayBodyPartPayload0.getOff());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayBodyPartPayload byteArrayBodyPartPayload0 = new ByteArrayBodyPartPayload(byteArray0, 2051, (byte) (-19), "");
      byteArrayBodyPartPayload0.getPayload();
      assertEquals(2051, byteArrayBodyPartPayload0.getOff());
      assertEquals((-19), byteArrayBodyPartPayload0.getLen());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayBodyPartPayload byteArrayBodyPartPayload0 = new ByteArrayBodyPartPayload(byteArray0, (String) null);
      byteArrayBodyPartPayload0.getPayload();
      assertEquals(0, byteArrayBodyPartPayload0.getLen());
      assertEquals(0, byteArrayBodyPartPayload0.getOff());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ByteArrayBodyPartPayload byteArrayBodyPartPayload0 = new ByteArrayBodyPartPayload((byte[]) null, 0, 0);
      byteArrayBodyPartPayload0.getPayload();
      assertEquals(0, byteArrayBodyPartPayload0.getLen());
      assertEquals(0, byteArrayBodyPartPayload0.getOff());
  }
}
