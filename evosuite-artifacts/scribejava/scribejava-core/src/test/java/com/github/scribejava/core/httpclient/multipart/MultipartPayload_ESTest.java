/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 12 02:56:05 GMT 2022
 */

package com.github.scribejava.core.httpclient.multipart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.scribejava.core.httpclient.multipart.BodyPartPayload;
import com.github.scribejava.core.httpclient.multipart.MultipartPayload;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MultipartPayload_ESTest extends MultipartPayload_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultipartPayload multipartPayload0 = new MultipartPayload("form-data", "form-data");
      multipartPayload0.setPreamble("Different boundaries was passed in constructors. One as argument, second as header");
      String string0 = multipartPayload0.getPreamble();
      assertEquals("Different boundaries was passed in constructors. One as argument, second as header", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultipartPayload multipartPayload0 = new MultipartPayload("i", (Map<String, String>) null);
      multipartPayload0.setPreamble("");
      String string0 = multipartPayload0.getPreamble();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultipartPayload multipartPayload0 = new MultipartPayload("vc", (Map<String, String>) null);
      multipartPayload0.setEpilogue("e");
      String string0 = multipartPayload0.getEpilogue();
      assertEquals("e", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultipartPayload multipartPayload0 = new MultipartPayload("form-data", "form-data");
      multipartPayload0.setEpilogue("");
      String string0 = multipartPayload0.getEpilogue();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultipartPayload multipartPayload0 = new MultipartPayload("vc", (Map<String, String>) null);
      MultipartPayload multipartPayload1 = new MultipartPayload();
      multipartPayload0.addBodyPart(multipartPayload1);
      List<BodyPartPayload> list0 = multipartPayload0.getBodyParts();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Map<String, String> map0 = BodyPartPayload.convertContentTypeToHeaders("NRXAp[U");
      MultipartPayload multipartPayload0 = null;
      try {
        multipartPayload0 = new MultipartPayload(map0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultipartPayload multipartPayload0 = null;
      try {
        multipartPayload0 = new MultipartPayload((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.httpclient.multipart.MultipartPayload", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Map<String, String> map0 = BodyPartPayload.convertContentTypeToHeaders("8eg");
      MultipartPayload multipartPayload0 = null;
      try {
        multipartPayload0 = new MultipartPayload("8eg", "8eg", map0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultipartPayload multipartPayload0 = null;
      try {
        multipartPayload0 = new MultipartPayload("", "", (Map<String, String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // {'boundary'=''} has invalid syntax. Should be '[0-9a-zA-Z'()+_,-./:=? ]{0,69}[0-9a-zA-Z'()+_,-./:=?]'.
         //
         verifyException("com.github.scribejava.core.httpclient.multipart.MultipartUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultipartPayload multipartPayload0 = null;
      try {
        multipartPayload0 = new MultipartPayload("aK@ES]G", "aK@ES]G");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // {'boundary'='aK@ES]G'} has invalid syntax. Should be '[0-9a-zA-Z'()+_,-./:=? ]{0,69}[0-9a-zA-Z'()+_,-./:=?]'.
         //
         verifyException("com.github.scribejava.core.httpclient.multipart.MultipartUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultipartPayload multipartPayload0 = null;
      try {
        multipartPayload0 = new MultipartPayload("0-9a-zA-Z'()+_,-./:=? ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // {'boundary'='0-9a-zA-Z'()+_,-./:=? '} has invalid syntax. Should be '[0-9a-zA-Z'()+_,-./:=? ]{0,69}[0-9a-zA-Z'()+_,-./:=?]'.
         //
         verifyException("com.github.scribejava.core.httpclient.multipart.MultipartUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MultipartPayload multipartPayload0 = new MultipartPayload("abh9oq2-3{)^ikQd7", "Content-Type", hashMap0);
      // Undeclared exception!
      try { 
        multipartPayload0.addBodyPart((MultipartPayload) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.httpclient.multipart.MultipartPayload", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultipartPayload multipartPayload0 = new MultipartPayload();
      // Undeclared exception!
      try { 
        multipartPayload0.addBodyPart(multipartPayload0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // {'boundary'}={'----ScribeJava----1392409281320'} is the same for parent MultipartPayload and child
         //
         verifyException("com.github.scribejava.core.httpclient.multipart.MultipartPayload", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultipartPayload multipartPayload0 = new MultipartPayload();
      Map<String, String> map0 = multipartPayload0.getHeaders();
      MultipartPayload multipartPayload1 = null;
      try {
        multipartPayload1 = new MultipartPayload("----ScribeJava----1841", map0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Different boundaries was passed in constructors. One as argument, second as header
         //
         verifyException("com.github.scribejava.core.httpclient.multipart.MultipartPayload", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Map<String, String> map0 = BodyPartPayload.convertContentTypeToHeaders("Content-Type");
      MultipartPayload multipartPayload0 = null;
      try {
        multipartPayload0 = new MultipartPayload("Content-Type", map0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultipartPayload multipartPayload0 = new MultipartPayload("----ScribeJava----1841", "----ScribeJava----1841");
      List<BodyPartPayload> list0 = multipartPayload0.getBodyParts();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MultipartPayload multipartPayload0 = new MultipartPayload(hashMap0);
      MultipartPayload multipartPayload1 = new MultipartPayload(hashMap0);
      assertEquals("----ScribeJava----1392409281320", multipartPayload1.getBoundary());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultipartPayload multipartPayload0 = new MultipartPayload();
      String string0 = multipartPayload0.getPreamble();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultipartPayload multipartPayload0 = new MultipartPayload("----ScribeJava----1841", "----ScribeJava----1841");
      multipartPayload0.addBodyPart((BodyPartPayload) multipartPayload0);
      assertNull(multipartPayload0.getPreamble());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultipartPayload multipartPayload0 = new MultipartPayload("ote kTypT");
      assertEquals("ote kTypT", multipartPayload0.getBoundary());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultipartPayload multipartPayload0 = new MultipartPayload("----ScribeJava----1841", "----ScribeJava----1841");
      String string0 = multipartPayload0.getBoundary();
      assertEquals("----ScribeJava----1841", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultipartPayload multipartPayload0 = new MultipartPayload();
      String string0 = multipartPayload0.getEpilogue();
      assertNull(string0);
  }
}
