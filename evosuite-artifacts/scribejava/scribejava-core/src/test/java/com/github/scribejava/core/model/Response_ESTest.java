/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 12 02:50:10 GMT 2022
 */

package com.github.scribejava.core.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.scribejava.core.model.Response;
import java.io.BufferedInputStream;
import java.io.Closeable;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Response_ESTest extends Response_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(1155, "", hashMap0, "");
      boolean boolean0 = response0.isSuccessful();
      assertFalse(boolean0);
      assertEquals(1155, response0.getCode());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      Closeable[] closeableArray0 = new Closeable[1];
      Response response0 = new Response(200, "", (Map<String, String>) null, sequenceInputStream0, closeableArray0);
      response0.getStream();
      assertEquals(200, response0.getCode());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response((-3688), (String) null, hashMap0, "#|?a");
      response0.getMessage();
      assertEquals((-3688), response0.getCode());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(0, "", hashMap0, (String) null);
      response0.getMessage();
      assertEquals(0, response0.getCode());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(0, "", hashMap0, (String) null);
      response0.getHeaders();
      assertEquals(0, response0.getCode());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BiFunction<String, String, String> biFunction0 = (BiFunction<String, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge("B);%*_Mox(On.<", "B);%*_Mox(On.<", biFunction0);
      Closeable[] closeableArray0 = new Closeable[1];
      Response response0 = new Response(0, "B);%*_Mox(On.<", hashMap0, (InputStream) null, closeableArray0);
      response0.getHeaders();
      assertEquals(0, response0.getCode());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(400, "Xx", hashMap0, "Ai");
      response0.getHeader((String) null);
      assertEquals(400, response0.getCode());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response((-3688), (String) null, hashMap0, "#|?a");
      hashMap0.put((String) null, "Response{code=-3688, message='null', body='#|?a', headers={}}");
      response0.getHeader((String) null);
      assertEquals((-3688), response0.getCode());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", "");
      Response response0 = new Response((-1), "j` Q~", hashMap0, "X");
      response0.getHeader("");
      assertEquals((-1), response0.getCode());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(0, "", hashMap0, "");
      int int0 = response0.getCode();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(400, "Xx", hashMap0, "Ai");
      int int0 = response0.getCode();
      assertEquals(400, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MockFile mockFile0 = new MockFile("cHQX^f(; 5yc", "");
      File file0 = MockFile.createTempFile("com.github.scribejava.core.model.Response", "", (File) mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      Closeable[] closeableArray0 = new Closeable[3];
      Response response0 = new Response(125, (String) null, hashMap0, mockFileInputStream0, closeableArray0);
      String string0 = response0.getBody();
      assertNotNull(string0);
      assertEquals(125, response0.getCode());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      Closeable[] closeableArray0 = new Closeable[1];
      Response response0 = new Response(200, "", (Map<String, String>) null, sequenceInputStream0, closeableArray0);
      // Undeclared exception!
      try { 
        response0.getBody();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.model.Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      Closeable[] closeableArray0 = new Closeable[3];
      closeableArray0[0] = (Closeable) dataInputStream0;
      Response response0 = new Response(200, "", hashMap0, dataInputStream0, closeableArray0);
      // Undeclared exception!
      try { 
        response0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      Closeable[] closeableArray0 = new Closeable[7];
      closeableArray0[3] = (Closeable) mockFileInputStream0;
      Response response0 = new Response(2993, "TfF-8", (Map<String, String>) null, bufferedInputStream0, closeableArray0);
      response0.close();
      assertEquals(2993, response0.getCode());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      Closeable[] closeableArray0 = new Closeable[1];
      closeableArray0[0] = (Closeable) sequenceInputStream0;
      Response response0 = new Response(200, "", (Map<String, String>) null, sequenceInputStream0, closeableArray0);
      response0.close();
      assertEquals(200, response0.getCode());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(0, "Oa&:#L7n+,on4/R", hashMap0, "Oa&:#L7n+,on4/R");
      response0.close();
      response0.close();
      assertEquals(0, response0.getCode());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(400, "Osx", hashMap0, "Osx");
      String string0 = response0.getBody();
      assertEquals(400, response0.getCode());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(400, "Osx", hashMap0, "Osx");
      boolean boolean0 = response0.isSuccessful();
      assertFalse(boolean0);
      assertEquals(400, response0.getCode());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      Closeable[] closeableArray0 = new Closeable[1];
      Response response0 = new Response(200, "", (Map<String, String>) null, sequenceInputStream0, closeableArray0);
      boolean boolean0 = response0.isSuccessful();
      assertTrue(boolean0);
      assertEquals(200, response0.getCode());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Response response0 = new Response(0, "4", (Map<String, String>) null, "4");
      boolean boolean0 = response0.isSuccessful();
      assertEquals(0, response0.getCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>(643);
      hashMap0.put("Content-Encoding", "gzip");
      PipedInputStream pipedInputStream0 = new PipedInputStream(643);
      Closeable[] closeableArray0 = new Closeable[5];
      Response response0 = new Response(643, "gzip", hashMap0, pipedInputStream0, closeableArray0);
      try { 
        response0.getBody();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Response response0 = new Response(20, "", (Map<String, String>) null, (String) null);
      String string0 = response0.getBody();
      assertNull(string0);
      assertEquals(20, response0.getCode());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Response response0 = new Response((-1092), "Pw{.Ya-kl+^:6eY?", (Map<String, String>) null, "Pw{.Ya-kl+^:6eY?");
      // Undeclared exception!
      try { 
        response0.getHeader("U)A Q?]D");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.model.Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Response response0 = new Response((-1092), "Pw{.Ya-kl+^:6eY?", (Map<String, String>) null, "Pw{.Ya-kl+^:6eY?");
      int int0 = response0.getCode();
      assertEquals((-1092), int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Response response0 = new Response(20, "", (Map<String, String>) null, (String) null);
      response0.getStream();
      assertEquals(20, response0.getCode());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Response response0 = new Response((-1092), "Pw{.Ya-kl+^:6eY?", (Map<String, String>) null, "Pw{.Ya-kl+^:6eY?");
      response0.getMessage();
      assertEquals((-1092), response0.getCode());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(566, "kr),Szt", hashMap0, "kr),Szt");
      String string0 = response0.toString();
      assertEquals("Response{code=566, message='kr),Szt', body='kr),Szt', headers={}}", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      Closeable[] closeableArray0 = new Closeable[7];
      Response response0 = new Response(2993, "TfF-8", (Map<String, String>) null, bufferedInputStream0, closeableArray0);
      response0.getHeaders();
      assertEquals(2993, response0.getCode());
  }
}
