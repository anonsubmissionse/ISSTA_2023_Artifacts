/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 12 03:02:17 GMT 2022
 */

package com.github.scribejava.core.oauth;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.scribejava.core.builder.ScopeBuilder;
import com.github.scribejava.core.oauth.AccessTokenRequestParams;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AccessTokenRequestParams_ESTest extends AccessTokenRequestParams_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AccessTokenRequestParams accessTokenRequestParams0 = new AccessTokenRequestParams("");
      AccessTokenRequestParams accessTokenRequestParams1 = accessTokenRequestParams0.scope("");
      String string0 = accessTokenRequestParams1.getScope();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AccessTokenRequestParams accessTokenRequestParams0 = new AccessTokenRequestParams("b");
      accessTokenRequestParams0.pkceCodeVerifier("t/r#w+4'WE1TjJM1");
      String string0 = accessTokenRequestParams0.getPkceCodeVerifier();
      assertEquals("t/r#w+4'WE1TjJM1", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AccessTokenRequestParams accessTokenRequestParams0 = AccessTokenRequestParams.create((String) null);
      AccessTokenRequestParams accessTokenRequestParams1 = accessTokenRequestParams0.pkceCodeVerifier("");
      String string0 = accessTokenRequestParams1.getPkceCodeVerifier();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AccessTokenRequestParams accessTokenRequestParams0 = new AccessTokenRequestParams("com.github.scribejava.core.oauth.AccessTokenRequestParams");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      AccessTokenRequestParams accessTokenRequestParams1 = accessTokenRequestParams0.setExtraParameters(hashMap0);
      Map<String, String> map0 = accessTokenRequestParams1.getExtraParameters();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AccessTokenRequestParams accessTokenRequestParams0 = new AccessTokenRequestParams((String) null);
      String string0 = accessTokenRequestParams0.getCode();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AccessTokenRequestParams accessTokenRequestParams0 = AccessTokenRequestParams.create("");
      String string0 = accessTokenRequestParams0.getCode();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AccessTokenRequestParams accessTokenRequestParams0 = AccessTokenRequestParams.create("");
      // Undeclared exception!
      try { 
        accessTokenRequestParams0.scope((ScopeBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.AccessTokenRequestParams", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AccessTokenRequestParams accessTokenRequestParams0 = new AccessTokenRequestParams((String) null);
      ScopeBuilder scopeBuilder0 = new ScopeBuilder();
      // Undeclared exception!
      try { 
        accessTokenRequestParams0.scope(scopeBuilder0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AccessTokenRequestParams accessTokenRequestParams0 = AccessTokenRequestParams.create("com.github.scribejava.core.builder.ScopeBuilder");
      AccessTokenRequestParams accessTokenRequestParams1 = accessTokenRequestParams0.addExtraParameter("com.github.scribejava.core.builder.ScopeBuilder", "com.github.scribejava.core.builder.ScopeBuilder");
      AccessTokenRequestParams accessTokenRequestParams2 = accessTokenRequestParams1.addExtraParameter("com.github.scribejava.core.builder.ScopeBuilder", "com.github.scribejava.core.builder.ScopeBuilder");
      assertSame(accessTokenRequestParams0, accessTokenRequestParams2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AccessTokenRequestParams accessTokenRequestParams0 = AccessTokenRequestParams.create("com.github.scribejava.core.builder.ScopeBuilder");
      AccessTokenRequestParams accessTokenRequestParams1 = accessTokenRequestParams0.addExtraParameter("com.github.scribejava.core.builder.ScopeBuilder", "com.github.scribejava.core.builder.ScopeBuilder");
      Map<String, String> map0 = accessTokenRequestParams0.getExtraParameters();
      accessTokenRequestParams1.setExtraParameters((Map<String, String>) null);
      // Undeclared exception!
      try { 
        accessTokenRequestParams0.addExtraParameters(map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.AccessTokenRequestParams", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AccessTokenRequestParams accessTokenRequestParams0 = AccessTokenRequestParams.create("com.github.scribejava.core.builder.ScopeBuilder");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      AccessTokenRequestParams accessTokenRequestParams1 = accessTokenRequestParams0.addExtraParameters(hashMap0);
      assertSame(accessTokenRequestParams0, accessTokenRequestParams1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AccessTokenRequestParams accessTokenRequestParams0 = AccessTokenRequestParams.create("com.github.scribejava.core.builder.ScopeBuilder");
      accessTokenRequestParams0.addExtraParameter("com.github.scribejava.core.builder.ScopeBuilder", "com.github.scribejava.core.builder.ScopeBuilder");
      Map<String, String> map0 = accessTokenRequestParams0.getExtraParameters();
      AccessTokenRequestParams accessTokenRequestParams1 = accessTokenRequestParams0.addExtraParameters(map0);
      assertEquals("com.github.scribejava.core.builder.ScopeBuilder", accessTokenRequestParams1.getCode());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AccessTokenRequestParams accessTokenRequestParams0 = AccessTokenRequestParams.create("com.github.scribejava.core.builder.ScopeBuilder");
      AccessTokenRequestParams accessTokenRequestParams1 = accessTokenRequestParams0.addExtraParameters((Map<String, String>) null);
      assertSame(accessTokenRequestParams0, accessTokenRequestParams1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AccessTokenRequestParams accessTokenRequestParams0 = AccessTokenRequestParams.create("com.github.scribejava.core.builder.ScopeBuilder");
      Map<String, String> map0 = accessTokenRequestParams0.getExtraParameters();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AccessTokenRequestParams accessTokenRequestParams0 = AccessTokenRequestParams.create("com.github.scribejava.core.builder.ScopeBuilder");
      String string0 = accessTokenRequestParams0.getPkceCodeVerifier();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AccessTokenRequestParams accessTokenRequestParams0 = AccessTokenRequestParams.create("com.github.scribejava.core.builder.ScopeBuilder");
      String string0 = accessTokenRequestParams0.getCode();
      assertEquals("com.github.scribejava.core.builder.ScopeBuilder", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AccessTokenRequestParams accessTokenRequestParams0 = AccessTokenRequestParams.create("com.github.scribejava.core.builder.ScopeBuilder");
      String string0 = accessTokenRequestParams0.getScope();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AccessTokenRequestParams accessTokenRequestParams0 = AccessTokenRequestParams.create("com.github.scribejava.core.builder.ScopeBuilder");
      accessTokenRequestParams0.scope("com.github.scribejava.core.builder.ScopeBuilder");
      String string0 = accessTokenRequestParams0.getScope();
      assertEquals("com.github.scribejava.core.builder.ScopeBuilder", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AccessTokenRequestParams accessTokenRequestParams0 = AccessTokenRequestParams.create("com.github.scribejava.core.builder.ScopeBuilder");
      ScopeBuilder scopeBuilder0 = new ScopeBuilder("com.github.scribejava.core.builder.ScopeBuilder");
      AccessTokenRequestParams accessTokenRequestParams1 = accessTokenRequestParams0.scope(scopeBuilder0);
      assertNull(accessTokenRequestParams1.getPkceCodeVerifier());
  }
}
