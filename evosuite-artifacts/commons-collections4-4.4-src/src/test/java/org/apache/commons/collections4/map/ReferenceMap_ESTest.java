/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 02:11:51 GMT 2022
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ObjectOutputStream;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import org.apache.commons.collections4.map.AbstractHashedMap;
import org.apache.commons.collections4.map.AbstractReferenceMap;
import org.apache.commons.collections4.map.ReferenceMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ReferenceMap_ESTest extends ReferenceMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength1 = AbstractReferenceMap.ReferenceStrength.SOFT;
      int int0 = 1073741824;
      ReferenceMap<String, Object> referenceMap0 = new ReferenceMap<String, Object>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength1, 1073741824, 1073741824);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength1 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceMap<Object, Object> referenceMap0 = new ReferenceMap<Object, Object>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength1);
      referenceMap0.purge();
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength2 = AbstractReferenceMap.ReferenceStrength.SOFT;
      ReferenceMap<String, Integer> referenceMap1 = new ReferenceMap<String, Integer>(abstractReferenceMap_ReferenceStrength2, abstractReferenceMap_ReferenceStrength0, true);
      referenceMap1.size();
      ReferenceMap<Integer, Object> referenceMap2 = new ReferenceMap<Integer, Object>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 0, 201.47298F, true);
      referenceMap2.checkCapacity();
      referenceMap2.remove((Object) abstractReferenceMap_ReferenceStrength1);
      ReferenceMap<Integer, String> referenceMap3 = new ReferenceMap<Integer, String>();
      referenceMap3.createValuesIterator();
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength3 = AbstractReferenceMap.ReferenceStrength.WEAK;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength4 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceMap<Object, Object> referenceMap4 = new ReferenceMap<Object, Object>(abstractReferenceMap_ReferenceStrength3, abstractReferenceMap_ReferenceStrength4, true);
      Integer integer0 = new Integer(0);
      referenceMap4.getOrDefault(integer0, (Object) null);
      AbstractHashedMap.KeySet<Object> abstractHashedMap_KeySet0 = new AbstractHashedMap.KeySet<Object>(referenceMap0);
      Object object0 = AbstractHashedMap.NULL;
      abstractHashedMap_KeySet0.contains(object0);
      referenceMap4.keySet = abstractHashedMap_KeySet0;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength5 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceMap<String, Integer> referenceMap5 = new ReferenceMap<String, Integer>(abstractReferenceMap_ReferenceStrength4, abstractReferenceMap_ReferenceStrength5);
      referenceMap5.init();
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength6 = AbstractReferenceMap.ReferenceStrength.WEAK;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength7 = AbstractReferenceMap.ReferenceStrength.SOFT;
      ReferenceMap<Object, String> referenceMap6 = new ReferenceMap<Object, String>(abstractReferenceMap_ReferenceStrength6, abstractReferenceMap_ReferenceStrength7, false);
      ReferenceMap<Integer, String> referenceMap7 = new ReferenceMap<Integer, String>();
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength8 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceMap<Integer, Object> referenceMap8 = null;
      try {
        referenceMap8 = new ReferenceMap<Integer, Object>(abstractReferenceMap_ReferenceStrength8, abstractReferenceMap_ReferenceStrength3, (-4732), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Initial capacity must be a non negative number
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength1 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceMap<Object, Object> referenceMap0 = new ReferenceMap<Object, Object>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength1);
      ReferenceMap<Object, Object> referenceMap1 = new ReferenceMap<Object, Object>();
      assertTrue(referenceMap1.equals((Object)referenceMap0));
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength1 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceMap<Object, String> referenceMap0 = new ReferenceMap<Object, String>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength1, 4092, 4092, false);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ReferenceMap<String, Object> referenceMap0 = new ReferenceMap<String, Object>();
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.SOFT;
      int int0 = (-1028);
      boolean boolean0 = false;
      ReferenceMap<String, Object> referenceMap0 = null;
      try {
        referenceMap0 = new ReferenceMap<String, Object>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, (-1028), (-1028), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Initial capacity must be a non negative number
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceMap<String, String> referenceMap0 = null;
      try {
        referenceMap0 = new ReferenceMap<String, String>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 1276, 0.0F, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Load factor must be greater than 0
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.SOFT;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength1 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceMap<Object, Object> referenceMap0 = new ReferenceMap<Object, Object>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength1, 1, 1);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.SOFT;
      ReferenceMap<Object, String> referenceMap0 = new ReferenceMap<Object, String>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, false);
  }
}
