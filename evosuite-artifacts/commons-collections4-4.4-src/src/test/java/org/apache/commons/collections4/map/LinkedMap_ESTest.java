/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 02:02:56 GMT 2022
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Predicate;
import org.apache.commons.collections4.map.AbstractHashedMap;
import org.apache.commons.collections4.map.LinkedMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LinkedMap_ESTest extends LinkedMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertNotNull(linkedMap0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      linkedMap0.size = 159;
      assertEquals(159, linkedMap0.size());
      assertFalse(linkedMap0.isEmpty());
      
      Integer integer0 = linkedMap0.get(12);
      assertEquals(159, linkedMap0.size());
      assertFalse(linkedMap0.isEmpty());
      assertNull(integer0);
      
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>();
      assertTrue(linkedMap1.isEmpty());
      assertEquals(0, linkedMap1.size());
      assertNotNull(linkedMap1);
      
      LinkedMap<String, String> linkedMap2 = linkedMap1.clone();
      assertNotSame(linkedMap1, linkedMap2);
      assertNotSame(linkedMap2, linkedMap1);
      assertTrue(linkedMap1.isEmpty());
      assertEquals(0, linkedMap1.size());
      assertEquals(0, linkedMap2.size());
      assertTrue(linkedMap2.isEmpty());
      assertTrue(linkedMap2.equals((Object)linkedMap1));
      assertNotNull(linkedMap2);
      
      LinkedMap<String, String> linkedMap3 = new LinkedMap<String, String>(linkedMap2);
      assertTrue(linkedMap1.isEmpty());
      assertEquals(0, linkedMap1.size());
      assertEquals(0, linkedMap2.size());
      assertTrue(linkedMap2.isEmpty());
      assertTrue(linkedMap3.isEmpty());
      assertEquals(0, linkedMap3.size());
      assertTrue(linkedMap1.equals((Object)linkedMap2));
      assertTrue(linkedMap2.equals((Object)linkedMap1));
      assertTrue(linkedMap3.equals((Object)linkedMap2));
      assertTrue(linkedMap3.equals((Object)linkedMap1));
      assertNotNull(linkedMap3);
      
      // Undeclared exception!
      try { 
        linkedMap3.get(159);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index 159 is invalid for size 0
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap0.size());
      assertNotNull(linkedMap0);
      
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      assertFalse(linkedMap_LinkedMapList0.contains(0));
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap0.size());
      assertEquals(0, linkedMap_LinkedMapList0.size());
      assertNotNull(linkedMap_LinkedMapList0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      assertTrue(linkedMap1.isEmpty());
      assertEquals(0, linkedMap1.size());
      assertNotNull(linkedMap1);
      
      Object object0 = linkedMap1.put("", linkedMap0);
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap0.size());
      assertFalse(linkedMap1.isEmpty());
      assertEquals(1, linkedMap1.size());
      assertNull(object0);
      
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      assertFalse(linkedMap1.isEmpty());
      assertEquals(1, linkedMap1.size());
      assertEquals(1, linkedMap2.size());
      assertFalse(linkedMap2.isEmpty());
      assertTrue(linkedMap2.equals((Object)linkedMap1));
      assertNotNull(linkedMap2);
      
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      assertNotSame(linkedMap1, linkedMap2);
      assertNotSame(linkedMap2, linkedMap1);
      assertEquals(4, objectArray0.length);
      assertFalse(linkedMap1.isEmpty());
      assertEquals(1, linkedMap1.size());
      assertEquals(1, linkedMap2.size());
      assertFalse(linkedMap2.isEmpty());
      assertEquals(1, linkedMap3.size());
      assertFalse(linkedMap3.isEmpty());
      assertTrue(linkedMap1.equals((Object)linkedMap2));
      assertTrue(linkedMap2.equals((Object)linkedMap1));
      assertNotNull(linkedMap3);
      
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      assertNotSame(linkedMap1, linkedMap2);
      assertFalse(linkedMap1.isEmpty());
      assertEquals(2, linkedMap1.size());
      assertFalse(linkedMap1.equals((Object)linkedMap2));
      assertEquals("", string0);
      assertNotNull(string0);
      
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(4, objectArray0.length);
      assertEquals(4, objectArray1.length);
      assertFalse(linkedMap_LinkedMapList0.contains(0));
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap0.size());
      assertEquals(0, linkedMap_LinkedMapList0.size());
      assertNotNull(objectArray1);
      
      LinkedMap<String, String> linkedMap4 = new LinkedMap<String, String>(12);
      assertTrue(linkedMap4.isEmpty());
      assertEquals(0, linkedMap4.size());
      assertNotNull(linkedMap4);
      
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap4);
      assertFalse(linkedMap_LinkedMapList1.contains(""));
      assertTrue(linkedMap4.isEmpty());
      assertEquals(0, linkedMap4.size());
      assertEquals(0, linkedMap_LinkedMapList1.size());
      assertNotNull(linkedMap_LinkedMapList1);
      
      LinkedMap linkedMap5 = (LinkedMap)linkedMap1.getValue(0);
      assertNotSame(linkedMap5, linkedMap3);
      assertNotSame(linkedMap1, linkedMap2);
      assertEquals(0, linkedMap5.size());
      assertTrue(linkedMap5.isEmpty());
      assertFalse(linkedMap1.isEmpty());
      assertEquals(2, linkedMap1.size());
      assertFalse(linkedMap5.equals((Object)linkedMap3));
      assertFalse(linkedMap1.equals((Object)linkedMap2));
      assertNotNull(linkedMap5);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertNotNull(linkedMap0);
      
      linkedMap0.size = 1;
      assertFalse(linkedMap0.isEmpty());
      assertEquals(1, linkedMap0.size());
      
      List<Object> list0 = linkedMap0.asList();
      assertFalse(list0.contains(1));
      assertFalse(linkedMap0.isEmpty());
      assertEquals(1, linkedMap0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertNotNull(linkedMap0);
      
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      assertTrue(linkedMap1.isEmpty());
      assertEquals(0, linkedMap1.size());
      assertNotNull(linkedMap1);
      
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertFalse(linkedMap1.isEmpty());
      assertEquals(1, linkedMap1.size());
      assertNull(object0);
      
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(abstractHashedMap0);
      
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertEquals(0, linkedMap2.size());
      assertTrue(linkedMap2.isEmpty());
      assertNotNull(linkedMap2);
      
      int int0 = linkedMap2.indexOf(linkedMap0);
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertEquals(0, linkedMap2.size());
      assertTrue(linkedMap2.isEmpty());
      assertEquals((-1), int0);
      
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      assertNotSame(linkedMap1, linkedMap3);
      assertNotSame(linkedMap3, linkedMap1);
      assertFalse(linkedMap1.isEmpty());
      assertEquals(1, linkedMap1.size());
      assertEquals(1, linkedMap3.size());
      assertFalse(linkedMap3.isEmpty());
      assertTrue(linkedMap3.equals((Object)linkedMap1));
      assertNotNull(linkedMap3);
      
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      assertNotSame(linkedMap1, linkedMap3);
      assertNotSame(linkedMap3, linkedMap1);
      assertFalse(linkedMap1.isEmpty());
      assertEquals(1, linkedMap1.size());
      assertEquals(1, linkedMap3.size());
      assertFalse(linkedMap3.isEmpty());
      assertTrue(linkedMap1.equals((Object)linkedMap3));
      assertTrue(linkedMap3.equals((Object)linkedMap1));
      assertNotNull(iterator0);
      
      int int1 = linkedMap3.indexOf(linkedMap1);
      assertNotSame(linkedMap1, linkedMap3);
      assertNotSame(linkedMap3, linkedMap1);
      assertFalse(linkedMap1.isEmpty());
      assertEquals(1, linkedMap1.size());
      assertEquals(1, linkedMap3.size());
      assertFalse(linkedMap3.isEmpty());
      assertTrue(linkedMap1.equals((Object)linkedMap3));
      assertTrue(linkedMap3.equals((Object)linkedMap1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
      assertEquals(0, linkedMap4.size());
      assertTrue(linkedMap4.isEmpty());
      assertNotNull(linkedMap4);
      
      LinkedMap<Object, String> linkedMap5 = linkedMap4.clone();
      assertNotSame(linkedMap4, linkedMap5);
      assertNotSame(linkedMap5, linkedMap4);
      assertEquals(0, linkedMap4.size());
      assertTrue(linkedMap4.isEmpty());
      assertEquals(0, linkedMap5.size());
      assertTrue(linkedMap5.isEmpty());
      assertTrue(linkedMap5.equals((Object)linkedMap4));
      assertNotNull(linkedMap5);
      
      int int2 = linkedMap5.indexOf(linkedMap1);
      assertNotSame(linkedMap1, linkedMap3);
      assertNotSame(linkedMap4, linkedMap5);
      assertNotSame(linkedMap5, linkedMap4);
      assertFalse(linkedMap1.isEmpty());
      assertEquals(1, linkedMap1.size());
      assertEquals(0, linkedMap4.size());
      assertTrue(linkedMap4.isEmpty());
      assertEquals(0, linkedMap5.size());
      assertTrue(linkedMap5.isEmpty());
      assertTrue(linkedMap1.equals((Object)linkedMap3));
      assertTrue(linkedMap4.equals((Object)linkedMap5));
      assertTrue(linkedMap5.equals((Object)linkedMap4));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>((LinkedMap<Object, ?>) null);
      assertNotNull(linkedMap_LinkedMapList0);
      
      AbstractHashedMap.KeySet<Object> abstractHashedMap_KeySet0 = new AbstractHashedMap.KeySet<Object>((AbstractHashedMap<Object, ?>) null);
      assertNotNull(abstractHashedMap_KeySet0);
      
      // Undeclared exception!
      try { 
        linkedMap_LinkedMapList0.containsAll(abstractHashedMap_KeySet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.LinkedMap$LinkedMapList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertNotNull(linkedMap0);
      
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap_LinkedMapList0.size());
      assertNotNull(linkedMap_LinkedMapList0);
      
      ListIterator<Integer> listIterator0 = linkedMap_LinkedMapList0.listIterator(0);
      assertFalse(linkedMap_LinkedMapList0.contains(0));
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap_LinkedMapList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertNotNull(linkedMap0);
      
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      assertFalse(linkedMap_LinkedMapList0.contains(0));
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap_LinkedMapList0.size());
      assertNotNull(linkedMap_LinkedMapList0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      assertTrue(linkedMap1.isEmpty());
      assertEquals(0, linkedMap1.size());
      assertNotNull(linkedMap1);
      
      Object object0 = linkedMap1.put("", linkedMap0);
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertFalse(linkedMap1.isEmpty());
      assertEquals(1, linkedMap1.size());
      assertNull(object0);
      
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      assertFalse(linkedMap1.isEmpty());
      assertEquals(1, linkedMap1.size());
      assertNull(object1);
      
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(4, objectArray0.length);
      assertEquals(4, objectArray1.length);
      assertFalse(linkedMap_LinkedMapList0.contains(0));
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap_LinkedMapList0.size());
      assertNotNull(objectArray1);
      
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      assertFalse(linkedMap_LinkedMapList1.contains(0));
      assertTrue(linkedMap_LinkedMapList1.contains(""));
      assertFalse(linkedMap1.isEmpty());
      assertEquals(1, linkedMap1.size());
      assertEquals(1, linkedMap_LinkedMapList1.size());
      assertNotNull(linkedMap_LinkedMapList1);
      
      int int0 = linkedMap_LinkedMapList1.size();
      assertFalse(linkedMap_LinkedMapList1.contains(0));
      assertTrue(linkedMap_LinkedMapList1.contains(""));
      assertFalse(linkedMap1.isEmpty());
      assertEquals(1, linkedMap1.size());
      assertEquals(1, linkedMap_LinkedMapList1.size());
      assertEquals(1, int0);
      
      LinkedMap<String, String> linkedMap2 = new LinkedMap<String, String>(12);
      assertTrue(linkedMap2.isEmpty());
      assertEquals(0, linkedMap2.size());
      assertNotNull(linkedMap2);
      
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList2 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      assertFalse(linkedMap_LinkedMapList2.contains(""));
      assertTrue(linkedMap2.isEmpty());
      assertEquals(0, linkedMap2.size());
      assertEquals(0, linkedMap_LinkedMapList2.size());
      assertNotNull(linkedMap_LinkedMapList2);
      
      boolean boolean0 = linkedMap_LinkedMapList2.containsAll(linkedMap_LinkedMapList1);
      assertFalse(linkedMap_LinkedMapList1.contains(0));
      assertTrue(linkedMap_LinkedMapList1.contains(""));
      assertFalse(linkedMap_LinkedMapList2.contains(""));
      assertFalse(linkedMap1.isEmpty());
      assertEquals(1, linkedMap1.size());
      assertEquals(1, linkedMap_LinkedMapList1.size());
      assertTrue(linkedMap2.isEmpty());
      assertEquals(0, linkedMap2.size());
      assertEquals(0, linkedMap_LinkedMapList2.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 1073741824;
      LinkedMap<LinkedMap<String, Object>, String> linkedMap0 = new LinkedMap<LinkedMap<String, Object>, String>(1073741824);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1.0F);
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap0.size());
      assertNotNull(linkedMap0);
      
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      assertFalse(linkedMap_LinkedMapList0.contains(1.0F));
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap0.size());
      assertEquals(0, linkedMap_LinkedMapList0.size());
      assertNotNull(linkedMap_LinkedMapList0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = linkedMap0.putIfAbsent(linkedMap_LinkedMapList0, integer0);
      assertFalse(linkedMap_LinkedMapList0.contains(1.0F));
      assertEquals(1, linkedMap0.size());
      assertFalse(linkedMap0.isEmpty());
      assertEquals(1, linkedMap_LinkedMapList0.size());
      assertNull(integer1);
      
      // Undeclared exception!
      try { 
        linkedMap_LinkedMapList0.subList(0, (-1936));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(0) > toIndex(-1936)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap0.size());
      assertNotNull(linkedMap0);
      
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      assertNotSame(linkedMap0, linkedMap1);
      assertNotSame(linkedMap1, linkedMap0);
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap1.isEmpty());
      assertEquals(0, linkedMap1.size());
      assertTrue(linkedMap1.equals((Object)linkedMap0));
      assertNotNull(linkedMap1);
      
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap1.isEmpty());
      assertEquals(0, linkedMap1.size());
      assertTrue(linkedMap2.isEmpty());
      assertEquals(0, linkedMap2.size());
      assertTrue(linkedMap0.equals((Object)linkedMap1));
      assertTrue(linkedMap1.equals((Object)linkedMap0));
      assertTrue(linkedMap2.equals((Object)linkedMap0));
      assertTrue(linkedMap2.equals((Object)linkedMap1));
      assertNotNull(linkedMap2);
      
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap1.isEmpty());
      assertEquals(0, linkedMap1.size());
      assertTrue(linkedMap2.isEmpty());
      assertEquals(0, linkedMap2.size());
      assertEquals(0, linkedMap_LinkedMapList0.size());
      assertTrue(linkedMap0.equals((Object)linkedMap1));
      assertTrue(linkedMap0.equals((Object)linkedMap2));
      assertTrue(linkedMap1.equals((Object)linkedMap2));
      assertTrue(linkedMap1.equals((Object)linkedMap0));
      assertTrue(linkedMap2.equals((Object)linkedMap0));
      assertTrue(linkedMap2.equals((Object)linkedMap1));
      assertNotNull(linkedMap_LinkedMapList0);
      
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(abstractHashedMap0);
      
      Set<String> set0 = abstractHashedMap0.keySet();
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
      assertNotSame(linkedMap0, linkedMap2);
      assertNotSame(linkedMap0, linkedMap1);
      assertNotSame(linkedMap1, linkedMap0);
      assertNotSame(linkedMap1, linkedMap2);
      assertNotSame(linkedMap2, linkedMap0);
      assertNotSame(linkedMap2, linkedMap1);
      assertFalse(linkedMap_LinkedMapList0.contains(0));
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap1.isEmpty());
      assertEquals(0, linkedMap1.size());
      assertTrue(linkedMap2.isEmpty());
      assertEquals(0, linkedMap2.size());
      assertEquals(0, linkedMap_LinkedMapList0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(linkedMap0.equals((Object)linkedMap1));
      assertTrue(linkedMap0.equals((Object)linkedMap2));
      assertTrue(linkedMap1.equals((Object)linkedMap2));
      assertTrue(linkedMap1.equals((Object)linkedMap0));
      assertTrue(linkedMap2.equals((Object)linkedMap0));
      assertTrue(linkedMap2.equals((Object)linkedMap1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertNotNull(linkedMap0);
      
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>(linkedMap0);
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertTrue(linkedMap1.isEmpty());
      assertEquals(0, linkedMap1.size());
      assertTrue(linkedMap1.equals((Object)linkedMap0));
      assertNotNull(linkedMap1);
      
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertTrue(linkedMap1.isEmpty());
      assertEquals(0, linkedMap1.size());
      assertEquals(0, linkedMap_LinkedMapList0.size());
      assertTrue(linkedMap0.equals((Object)linkedMap1));
      assertTrue(linkedMap1.equals((Object)linkedMap0));
      assertNotNull(linkedMap_LinkedMapList0);
      
      Integer integer0 = new Integer((-4904));
      assertEquals((-4904), (int)integer0);
      assertNotNull(integer0);
      
      int int0 = linkedMap_LinkedMapList0.lastIndexOf(integer0);
      assertNotSame(linkedMap0, linkedMap1);
      assertNotSame(linkedMap1, linkedMap0);
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertTrue(linkedMap1.isEmpty());
      assertEquals(0, linkedMap1.size());
      assertEquals(0, linkedMap_LinkedMapList0.size());
      assertTrue(linkedMap0.equals((Object)linkedMap1));
      assertTrue(linkedMap1.equals((Object)linkedMap0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = null;
      try {
        linkedMap0 = new LinkedMap<String, Integer>((Map<? extends String, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap0.size());
      assertNotNull(linkedMap0);
      
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      assertNotSame(linkedMap0, linkedMap1);
      assertNotSame(linkedMap1, linkedMap0);
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap0.size());
      assertEquals(0, linkedMap1.size());
      assertTrue(linkedMap1.isEmpty());
      assertTrue(linkedMap1.equals((Object)linkedMap0));
      assertNotNull(linkedMap1);
      
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap0.size());
      assertEquals(0, linkedMap1.size());
      assertTrue(linkedMap1.isEmpty());
      assertEquals(0, linkedMap_LinkedMapList0.size());
      assertTrue(linkedMap0.equals((Object)linkedMap1));
      assertTrue(linkedMap1.equals((Object)linkedMap0));
      assertNotNull(linkedMap_LinkedMapList0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      assertNotSame(linkedMap0, linkedMap1);
      assertNotSame(linkedMap1, linkedMap0);
      assertFalse(linkedMap_LinkedMapList0.contains(0));
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap0.size());
      assertEquals(0, linkedMap1.size());
      assertTrue(linkedMap1.isEmpty());
      assertEquals(0, linkedMap_LinkedMapList0.size());
      assertTrue(linkedMap0.equals((Object)linkedMap1));
      assertTrue(linkedMap1.equals((Object)linkedMap0));
      assertEquals((-1), int0);
      
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      assertTrue(linkedMap2.isEmpty());
      assertEquals(0, linkedMap2.size());
      assertNotNull(linkedMap2);
      
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      assertTrue(linkedMap2.isEmpty());
      assertEquals(0, linkedMap2.size());
      assertEquals(0, linkedMap_LinkedMapList1.size());
      assertNotNull(linkedMap_LinkedMapList1);
      
      boolean boolean0 = linkedMap_LinkedMapList1.contains(linkedMap1);
      assertNotSame(linkedMap0, linkedMap1);
      assertNotSame(linkedMap1, linkedMap0);
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap0.size());
      assertEquals(0, linkedMap1.size());
      assertTrue(linkedMap1.isEmpty());
      assertTrue(linkedMap2.isEmpty());
      assertEquals(0, linkedMap2.size());
      assertEquals(0, linkedMap_LinkedMapList1.size());
      assertTrue(linkedMap0.equals((Object)linkedMap1));
      assertTrue(linkedMap1.equals((Object)linkedMap0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap0.size());
      assertNotNull(linkedMap0);
      
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap0.size());
      assertEquals(0, linkedMap_LinkedMapList0.size());
      assertNotNull(linkedMap_LinkedMapList0);
      
      Iterator<String> iterator0 = linkedMap_LinkedMapList0.iterator();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap0.size());
      assertEquals(0, linkedMap_LinkedMapList0.size());
      assertNotNull(iterator0);
      
      LinkedMap<Integer, Object> linkedMap1 = new LinkedMap<Integer, Object>(1073741824, 1073741824);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 10;
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>(10);
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertNotNull(linkedMap0);
      
      LinkedMap<Integer, Object> linkedMap1 = linkedMap0.clone();
      assertNotSame(linkedMap0, linkedMap1);
      assertNotSame(linkedMap1, linkedMap0);
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertTrue(linkedMap1.isEmpty());
      assertEquals(0, linkedMap1.size());
      assertTrue(linkedMap1.equals((Object)linkedMap0));
      assertNotNull(linkedMap1);
      
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap1);
      assertFalse(linkedMap_LinkedMapList0.contains(10));
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertTrue(linkedMap1.isEmpty());
      assertEquals(0, linkedMap1.size());
      assertEquals(0, linkedMap_LinkedMapList0.size());
      assertTrue(linkedMap0.equals((Object)linkedMap1));
      assertTrue(linkedMap1.equals((Object)linkedMap0));
      assertNotNull(linkedMap_LinkedMapList0);
      
      LinkedMap<Object, Object> linkedMap2 = null;
      linkedMap0.data = null;
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>((LinkedMap<Object, ?>) null);
      assertNotNull(linkedMap_LinkedMapList1);
      
      // Undeclared exception!
      try { 
        linkedMap_LinkedMapList0.containsAll(linkedMap_LinkedMapList1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.LinkedMap$LinkedMapList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertNotNull(linkedMap0);
      
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap_LinkedMapList0.size());
      assertNotNull(linkedMap_LinkedMapList0);
      
      String string0 = linkedMap0.toString();
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      AbstractHashedMap.Values<Object> abstractHashedMap_Values0 = new AbstractHashedMap.Values<Object>(linkedMap0);
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, abstractHashedMap_Values0.size());
      assertNotNull(abstractHashedMap_Values0);
      
      // Undeclared exception!
      try { 
        linkedMap_LinkedMapList0.removeAll(abstractHashedMap_Values0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.LinkedMap$LinkedMapList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap0.size());
      assertNotNull(linkedMap0);
      
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap0.size());
      assertEquals(0, linkedMap_LinkedMapList0.size());
      assertNotNull(linkedMap_LinkedMapList0);
      
      int int0 = linkedMap_LinkedMapList0.size();
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap0.size());
      assertEquals(0, linkedMap_LinkedMapList0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(304, 3672.0F);
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap0.size());
      assertNotNull(linkedMap0);
      
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      assertFalse(linkedMap_LinkedMapList0.contains(304));
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap0.size());
      assertEquals(0, linkedMap_LinkedMapList0.size());
      assertNotNull(linkedMap_LinkedMapList0);
      
      // Undeclared exception!
      try { 
        linkedMap_LinkedMapList0.remove((Object) linkedMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.LinkedMap$LinkedMapList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = null;
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>((LinkedMap<Object, ?>) null);
      assertNotNull(linkedMap_LinkedMapList0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedMap<Object, Object> linkedMap1 = null;
      try {
        linkedMap1 = new LinkedMap<Object, Object>((-1267));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Initial capacity must be a non negative number
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertNotNull(linkedMap0);
      
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      assertFalse(linkedMap_LinkedMapList0.contains(0));
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap_LinkedMapList0.size());
      assertNotNull(linkedMap_LinkedMapList0);
      
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      assertFalse(linkedMap_LinkedMapList0.contains(0));
      assertFalse(list0.contains(0));
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap_LinkedMapList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      assertEquals(0, linkedMap1.size());
      assertTrue(linkedMap1.isEmpty());
      assertNotNull(linkedMap1);
      
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      assertEquals(0, linkedMap1.size());
      assertTrue(linkedMap1.isEmpty());
      assertEquals(0, linkedMap_LinkedMapList1.size());
      assertNotNull(linkedMap_LinkedMapList1);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = predicate0.negate();
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertNotNull(predicate2);
      
      Predicate<Object> predicate3 = predicate2.and(predicate2);
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertNotNull(predicate3);
      
      // Undeclared exception!
      try { 
        linkedMap_LinkedMapList1.removeIf(predicate3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.LinkedMap$LinkedMapList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertNotNull(linkedMap0);
      
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap1.size());
      assertTrue(linkedMap1.isEmpty());
      assertTrue(linkedMap1.equals((Object)linkedMap0));
      assertNotNull(linkedMap1);
      
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      assertNotSame(linkedMap0, linkedMap1);
      assertNotSame(linkedMap1, linkedMap0);
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap1.size());
      assertTrue(linkedMap1.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertTrue(linkedMap0.equals((Object)linkedMap1));
      assertTrue(linkedMap1.equals((Object)linkedMap0));
      assertNotNull(abstractHashedMap0);
      
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap1.size());
      assertTrue(linkedMap1.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, linkedMap2.size());
      assertTrue(linkedMap2.isEmpty());
      assertTrue(linkedMap0.equals((Object)linkedMap1));
      assertTrue(linkedMap1.equals((Object)linkedMap0));
      assertTrue(linkedMap2.equals((Object)linkedMap1));
      assertTrue(linkedMap2.equals((Object)linkedMap0));
      assertNotNull(linkedMap2);
      
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap1.size());
      assertTrue(linkedMap1.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap_EntrySet0.size());
      assertTrue(linkedMap0.equals((Object)linkedMap2));
      assertTrue(linkedMap0.equals((Object)linkedMap1));
      assertTrue(linkedMap1.equals((Object)linkedMap2));
      assertTrue(linkedMap1.equals((Object)linkedMap0));
      assertNotNull(abstractHashedMap_EntrySet0);
      
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap1.size());
      assertTrue(linkedMap1.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap_EntrySet0.size());
      assertEquals(0, linkedMap0.entrySet.size());
      
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap1.size());
      assertTrue(linkedMap1.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, linkedMap2.size());
      assertTrue(linkedMap2.isEmpty());
      assertEquals(0, linkedMap_LinkedMapList0.size());
      assertTrue(linkedMap0.equals((Object)linkedMap2));
      assertTrue(linkedMap0.equals((Object)linkedMap1));
      assertTrue(linkedMap1.equals((Object)linkedMap2));
      assertTrue(linkedMap1.equals((Object)linkedMap0));
      assertTrue(linkedMap2.equals((Object)linkedMap1));
      assertTrue(linkedMap2.equals((Object)linkedMap0));
      assertNotNull(linkedMap_LinkedMapList0);
      
      Object[] objectArray0 = linkedMap_LinkedMapList0.toArray();
      assertNotSame(linkedMap0, linkedMap1);
      assertNotSame(linkedMap0, linkedMap2);
      assertNotSame(linkedMap1, linkedMap0);
      assertNotSame(linkedMap1, linkedMap2);
      assertNotSame(linkedMap2, linkedMap0);
      assertNotSame(linkedMap2, linkedMap1);
      assertEquals(0, objectArray0.length);
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap1.size());
      assertTrue(linkedMap1.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, linkedMap2.size());
      assertTrue(linkedMap2.isEmpty());
      assertEquals(0, linkedMap_LinkedMapList0.size());
      assertTrue(linkedMap0.equals((Object)linkedMap2));
      assertTrue(linkedMap0.equals((Object)linkedMap1));
      assertTrue(linkedMap1.equals((Object)linkedMap2));
      assertTrue(linkedMap1.equals((Object)linkedMap0));
      assertTrue(linkedMap2.equals((Object)linkedMap1));
      assertTrue(linkedMap2.equals((Object)linkedMap0));
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(abstractHashedMap0);
      
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap0.size());
      assertNotNull(linkedMap0);
      
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap0.size());
      assertNull(integer0);
      
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap0.size());
      assertEquals(0, linkedMap_LinkedMapList0.size());
      assertNotNull(linkedMap_LinkedMapList0);
      
      ListIterator<String> listIterator0 = linkedMap_LinkedMapList0.listIterator();
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap0.size());
      assertEquals(0, linkedMap_LinkedMapList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>(abstractHashedMap0);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, linkedMap1.size());
      assertTrue(linkedMap1.isEmpty());
      assertNotNull(linkedMap1);
      
      // Undeclared exception!
      try { 
        linkedMap1.remove((-302));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index -302 is less than zero
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(0);
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertNotNull(linkedMap0);
      
      linkedMap0.clear();
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      assertFalse(linkedMap_LinkedMapList0.contains(0));
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap_LinkedMapList0.size());
      assertNotNull(linkedMap_LinkedMapList0);
      
      ListIterator<Object> listIterator0 = linkedMap_LinkedMapList0.listIterator();
      assertFalse(linkedMap_LinkedMapList0.contains(0));
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap_LinkedMapList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(3364, 1889.0966F, 3364);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(abstractHashedMap0);
      
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(abstractHashedMap0);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertNotNull(linkedMap0);
      
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      assertFalse(linkedMap_LinkedMapList0.contains(3364));
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap_LinkedMapList0.size());
      assertNotNull(linkedMap_LinkedMapList0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) abstractHashedMap0;
      objectArray0[1] = (Object) linkedMap_LinkedMapList0;
      objectArray0[2] = (Object) linkedMap0;
      objectArray0[3] = (Object) linkedMap_LinkedMapList0;
      objectArray0[4] = (Object) abstractHashedMap0;
      objectArray0[5] = (Object) abstractHashedMap0;
      objectArray0[6] = (Object) linkedMap_LinkedMapList0;
      objectArray0[7] = (Object) abstractHashedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(8, objectArray0.length);
      assertEquals(8, objectArray1.length);
      assertFalse(linkedMap_LinkedMapList0.contains(3364));
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap_LinkedMapList0.size());
      assertNotNull(objectArray1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>((LinkedMap<Integer, ?>) null);
      assertNotNull(linkedMap_LinkedMapList0);
      
      // Undeclared exception!
      try { 
        linkedMap_LinkedMapList0.toArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.LinkedMap$LinkedMapList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertNotNull(linkedMap0);
      
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap_LinkedMapList0.size());
      assertNotNull(linkedMap_LinkedMapList0);
      
      // Undeclared exception!
      try { 
        linkedMap_LinkedMapList0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.LinkedMap$LinkedMapList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertNotNull(linkedMap0);
      
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap_LinkedMapList0.size());
      assertNotNull(linkedMap_LinkedMapList0);
      
      linkedMap0.ensureCapacity(16);
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = predicate0.negate();
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertNotNull(predicate2);
      
      boolean boolean0 = predicate1.test(predicate0);
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertTrue(boolean0);
      
      Predicate<Object> predicate3 = predicate1.or(predicate0);
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertNotNull(predicate3);
      
      LinkedMap<LinkedMap<Object, Object>, Integer> linkedMap1 = new LinkedMap<LinkedMap<Object, Object>, Integer>(41, 41);
      assertTrue(linkedMap1.isEmpty());
      assertEquals(0, linkedMap1.size());
      assertNotNull(linkedMap1);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        linkedMap1.get(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index 0 is invalid for size 0
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>();
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertNotNull(linkedMap0);
      
      int int0 = (-3215);
      Integer integer0 = linkedMap0.replace("org.apache.commons.collections4.map.LinkedMap", (Integer) null);
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertNull(integer0);
      
      LinkedMap<Integer, Object> linkedMap1 = null;
      try {
        linkedMap1 = new LinkedMap<Integer, Object>((-3215), 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Initial capacity must be a non negative number
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedMap<LinkedMap<Object, String>, Integer> linkedMap0 = new LinkedMap<LinkedMap<Object, String>, Integer>();
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap0.size());
      assertNotNull(linkedMap0);
      
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(3751, 3751);
      assertTrue(linkedMap1.isEmpty());
      assertEquals(0, linkedMap1.size());
      assertNotNull(linkedMap1);
      
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer0 = linkedMap0.computeIfPresent(linkedMap1, biFunction0);
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap1.isEmpty());
      assertEquals(0, linkedMap1.size());
      assertNull(integer0);
      
      // Undeclared exception!
      try { 
        linkedMap0.getValue(359);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index 359 is invalid for size 0
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap0.size());
      assertNotNull(linkedMap0);
      
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      assertNotSame(linkedMap0, linkedMap1);
      assertNotSame(linkedMap1, linkedMap0);
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap0.size());
      assertEquals(0, linkedMap1.size());
      assertTrue(linkedMap1.isEmpty());
      assertTrue(linkedMap1.equals((Object)linkedMap0));
      assertNotNull(linkedMap1);
      
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap0.size());
      assertEquals(0, linkedMap1.size());
      assertTrue(linkedMap1.isEmpty());
      assertTrue(linkedMap2.isEmpty());
      assertEquals(0, linkedMap2.size());
      assertTrue(linkedMap0.equals((Object)linkedMap1));
      assertTrue(linkedMap1.equals((Object)linkedMap0));
      assertTrue(linkedMap2.equals((Object)linkedMap1));
      assertTrue(linkedMap2.equals((Object)linkedMap0));
      assertNotNull(linkedMap2);
      
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap0.size());
      assertEquals(0, linkedMap1.size());
      assertTrue(linkedMap1.isEmpty());
      assertTrue(linkedMap2.isEmpty());
      assertEquals(0, linkedMap2.size());
      assertEquals(0, linkedMap_LinkedMapList0.size());
      assertTrue(linkedMap0.equals((Object)linkedMap1));
      assertTrue(linkedMap0.equals((Object)linkedMap2));
      assertTrue(linkedMap1.equals((Object)linkedMap2));
      assertTrue(linkedMap1.equals((Object)linkedMap0));
      assertTrue(linkedMap2.equals((Object)linkedMap1));
      assertTrue(linkedMap2.equals((Object)linkedMap0));
      assertNotNull(linkedMap_LinkedMapList0);
      
      AbstractHashedMap<Object, Object> abstractHashedMap0 = new AbstractHashedMap<Object, Object>(linkedMap0);
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap0.size());
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertTrue(linkedMap0.equals((Object)linkedMap1));
      assertTrue(linkedMap0.equals((Object)linkedMap2));
      assertNotNull(abstractHashedMap0);
      
      AbstractHashedMap.KeySet<Object> abstractHashedMap_KeySet0 = new AbstractHashedMap.KeySet<Object>(abstractHashedMap0);
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap0.size());
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap_KeySet0.size());
      assertTrue(linkedMap0.equals((Object)linkedMap1));
      assertTrue(linkedMap0.equals((Object)linkedMap2));
      assertNotNull(abstractHashedMap_KeySet0);
      
      // Undeclared exception!
      try { 
        linkedMap_LinkedMapList0.retainAll(abstractHashedMap_KeySet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.LinkedMap$LinkedMapList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertNotNull(linkedMap0);
      
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      assertNotSame(linkedMap0, linkedMap1);
      assertNotSame(linkedMap1, linkedMap0);
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap1.size());
      assertTrue(linkedMap1.isEmpty());
      assertTrue(linkedMap1.equals((Object)linkedMap0));
      assertNotNull(linkedMap1);
      
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap1.size());
      assertTrue(linkedMap1.isEmpty());
      assertEquals(0, linkedMap_LinkedMapList0.size());
      assertTrue(linkedMap0.equals((Object)linkedMap1));
      assertTrue(linkedMap1.equals((Object)linkedMap0));
      assertNotNull(linkedMap_LinkedMapList0);
      
      // Undeclared exception!
      try { 
        linkedMap_LinkedMapList0.get(1253);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index 1253 is invalid for size 0
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertNotNull(linkedMap0);
      
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap_LinkedMapList0.size());
      assertNotNull(linkedMap_LinkedMapList0);
      
      // Undeclared exception!
      try { 
        linkedMap_LinkedMapList0.remove((-3390));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.LinkedMap$LinkedMapList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(4295);
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertNotNull(linkedMap0);
      
      Collection<String> collection0 = linkedMap0.values();
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertNotNull(collection0);
      
      List<Object> list0 = linkedMap0.asList();
      assertFalse(list0.contains(4295));
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        linkedMap0.getValue((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index -1 is less than zero
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertNotNull(linkedMap0);
      
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap_LinkedMapList0.size());
      assertNotNull(linkedMap_LinkedMapList0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      assertFalse(linkedMap_LinkedMapList0.contains(0));
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap_LinkedMapList0.size());
      assertEquals((-1), int0);
      
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>();
      assertTrue(linkedMap1.isEmpty());
      assertEquals(0, linkedMap1.size());
      assertNotNull(linkedMap1);
      
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap1);
      assertTrue(linkedMap1.isEmpty());
      assertEquals(0, linkedMap1.size());
      assertEquals(0, linkedMap_LinkedMapList1.size());
      assertNotNull(linkedMap_LinkedMapList1);
      
      boolean boolean0 = linkedMap1.isEmpty();
      assertTrue(linkedMap1.isEmpty());
      assertEquals(0, linkedMap1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertNotNull(linkedMap0);
      
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap_LinkedMapList0.size());
      assertNotNull(linkedMap_LinkedMapList0);
      
      // Undeclared exception!
      try { 
        linkedMap_LinkedMapList0.remove((-3390));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.LinkedMap$LinkedMapList", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(9, 0.75F);
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertNotNull(linkedMap0);
      
      // Undeclared exception!
      try { 
        linkedMap0.getValue(458);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index 458 is invalid for size 0
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(abstractHashedMap0);
      
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertNotNull(linkedMap0);
      
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertNull(integer0);
      
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap_LinkedMapList0.size());
      assertNotNull(linkedMap_LinkedMapList0);
      
      ListIterator<String> listIterator0 = linkedMap_LinkedMapList0.listIterator();
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap_LinkedMapList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      assertEquals(0, linkedMap1.size());
      assertTrue(linkedMap1.isEmpty());
      assertNotNull(linkedMap1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap0.size());
      assertNotNull(linkedMap0);
      
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      assertNotSame(linkedMap0, linkedMap1);
      assertNotSame(linkedMap1, linkedMap0);
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap0.size());
      assertEquals(0, linkedMap1.size());
      assertTrue(linkedMap1.isEmpty());
      assertTrue(linkedMap1.equals((Object)linkedMap0));
      assertNotNull(linkedMap1);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      assertEquals(0, linkedMap2.size());
      assertTrue(linkedMap2.isEmpty());
      assertNotNull(linkedMap2);
      
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      assertEquals(0, linkedMap2.size());
      assertTrue(linkedMap2.isEmpty());
      assertEquals(0, linkedMap_LinkedMapList0.size());
      assertNotNull(linkedMap_LinkedMapList0);
      
      boolean boolean0 = linkedMap_LinkedMapList0.contains(linkedMap1);
      assertNotSame(linkedMap0, linkedMap1);
      assertNotSame(linkedMap1, linkedMap0);
      assertTrue(linkedMap0.isEmpty());
      assertEquals(0, linkedMap0.size());
      assertEquals(0, linkedMap1.size());
      assertTrue(linkedMap1.isEmpty());
      assertEquals(0, linkedMap2.size());
      assertTrue(linkedMap2.isEmpty());
      assertEquals(0, linkedMap_LinkedMapList0.size());
      assertTrue(linkedMap0.equals((Object)linkedMap1));
      assertTrue(linkedMap1.equals((Object)linkedMap0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      assertEquals(0, linkedMap0.size());
      assertTrue(linkedMap0.isEmpty());
      assertNotNull(linkedMap0);
      
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      assertEquals(0, linkedMap1.size());
      assertTrue(linkedMap1.isEmpty());
      assertNotNull(linkedMap1);
      
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      assertEquals(0, linkedMap1.size());
      assertTrue(linkedMap1.isEmpty());
      assertTrue(linkedMap2.isEmpty());
      assertEquals(0, linkedMap2.size());
      assertTrue(linkedMap2.equals((Object)linkedMap1));
      assertNotNull(linkedMap2);
      
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      assertFalse(linkedMap_LinkedMapList0.contains(203));
      assertEquals(0, linkedMap1.size());
      assertTrue(linkedMap1.isEmpty());
      assertTrue(linkedMap2.isEmpty());
      assertEquals(0, linkedMap2.size());
      assertEquals(0, linkedMap_LinkedMapList0.size());
      assertTrue(linkedMap1.equals((Object)linkedMap2));
      assertTrue(linkedMap2.equals((Object)linkedMap1));
      assertNotNull(linkedMap_LinkedMapList0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
      assertNotSame(linkedMap1, linkedMap2);
      assertNotSame(linkedMap2, linkedMap1);
      assertFalse(linkedMap_LinkedMapList0.contains(203));
      assertEquals(0, linkedMap1.size());
      assertTrue(linkedMap1.isEmpty());
      assertTrue(linkedMap2.isEmpty());
      assertEquals(0, linkedMap2.size());
      assertEquals(0, linkedMap_LinkedMapList0.size());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(linkedMap1.equals((Object)linkedMap2));
      assertTrue(linkedMap2.equals((Object)linkedMap1));
      assertTrue(boolean0);
      
      LinkedMap<Object, Object> linkedMap3 = new LinkedMap<Object, Object>(0, 1153.0F);
      assertTrue(linkedMap3.isEmpty());
      assertEquals(0, linkedMap3.size());
      assertNotNull(linkedMap3);
      
      // Undeclared exception!
      try { 
        linkedMap3.get((-565));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index -565 is less than zero
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedMap<LinkedMap<Object, String>, Integer> linkedMap0 = new LinkedMap<LinkedMap<Object, String>, Integer>(3119, 5542.538F);
      Object object0 = new Object();
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>();
      Integer integer0 = new Integer(3119);
      linkedMap0.addMapping(12, (-2881), linkedMap1, integer0);
      linkedMap0.indexOf(object0);
      LinkedMap<Integer, Object> linkedMap2 = new LinkedMap<Integer, Object>();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      // Undeclared exception!
      try { 
        linkedMap_LinkedMapList0.listIterator((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      linkedMap_LinkedMapList1.size();
      LinkedMap<String, String> linkedMap2 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList2 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList2.containsAll(linkedMap_LinkedMapList1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(1891);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1891);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1891);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      Integer integer4 = new Integer((int) integerArray0[2]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[1]);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((int) integerArray0[0]);
      linkedMap_LinkedMapList0.toArray(integerArray0);
      linkedMap_LinkedMapList0.toArray();
      // Undeclared exception!
      try { 
        linkedMap_LinkedMapList0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.LinkedMap$LinkedMapList", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(1916);
      linkedMap0.asList();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        linkedMap_LinkedMapList0.get((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index -1 is less than zero
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>(26);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedMap0.replaceAll(biFunction0);
      // Undeclared exception!
      try { 
        linkedMap0.remove(2797);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index 2797 is invalid for size 0
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      Integer integer0 = new Integer(601);
      linkedMap0.equals(integer0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap_LinkedMapList0.iterator();
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(linkedMap1);
      LinkedMap<String, Integer> linkedMap3 = linkedMap2.clone();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap3);
      Integer integer1 = new Integer(4122);
      linkedMap3.getEntry(integer1);
      int int0 = (-710);
      // Undeclared exception!
      try { 
        linkedMap_LinkedMapList0.subList((-710), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -710
         //
         verifyException("java.util.SubList", e);
      }
  }
}
