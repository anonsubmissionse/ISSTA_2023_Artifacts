/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 02:10:52 GMT 2022
 */

package org.apache.commons.collections4.iterators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Iterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractUntypedIteratorDecorator_ESTest extends AbstractUntypedIteratorDecorator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(iterator0).toString();
      doReturn(true, true, true, false, false).when(iterator0).hasNext();
      doReturn((Object) null, (Object) null, (Object) null).when(iterator0).next();
      SkippingIterator<Object> skippingIterator0 = new SkippingIterator<Object>(iterator0, 2349L);
      skippingIterator0.hasNext();
      SkippingIterator<Object> skippingIterator1 = new SkippingIterator<Object>(skippingIterator0, 2349L);
      Iterator<Object> iterator1 = skippingIterator1.getIterator();
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SkippingIterator<Integer> skippingIterator0 = null;
      try {
        skippingIterator0 = new SkippingIterator<Integer>((Iterator<Integer>) null, 2545L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      SkippingIterator<Object> skippingIterator0 = new SkippingIterator<Object>(iterator0, 138L);
      // Undeclared exception!
      try { 
        skippingIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // remove() can not be called before calling next()
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }
}
