/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 22:07:27 GMT 2022
 */

package org.apache.commons.jcs3.admin;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.jcs3.admin.CacheElementInfo;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CacheElementInfo_ESTest extends CacheElementInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CacheElementInfo cacheElementInfo0 = new CacheElementInfo("-Cr#Civ_Iu$", true, "-Cr#Civ_Iu$", (-2210L), (-2210L));
      boolean boolean0 = cacheElementInfo0.isEternal();
      assertEquals((-2210L), cacheElementInfo0.getExpiresInSeconds());
      assertTrue(boolean0);
      assertEquals((-2210L), cacheElementInfo0.getMaxLifeSeconds());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CacheElementInfo cacheElementInfo0 = new CacheElementInfo("\u000194_", false, "\u000194_", 0L, 0L);
      cacheElementInfo0.getMaxLifeSeconds();
      assertFalse(cacheElementInfo0.isEternal());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CacheElementInfo cacheElementInfo0 = new CacheElementInfo("wy", false, "wy", 2703L, 2703L);
      long long0 = cacheElementInfo0.getMaxLifeSeconds();
      assertEquals(2703L, long0);
      assertEquals(2703L, cacheElementInfo0.getExpiresInSeconds());
      assertFalse(cacheElementInfo0.isEternal());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CacheElementInfo cacheElementInfo0 = new CacheElementInfo("}A8 VYIbKGk;HNC", true, "}A8 VYIbKGk;HNC", (-1L), (-1L));
      cacheElementInfo0.getKey();
      assertEquals((-1L), cacheElementInfo0.getExpiresInSeconds());
      assertEquals((-1L), cacheElementInfo0.getMaxLifeSeconds());
      assertTrue(cacheElementInfo0.isEternal());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CacheElementInfo cacheElementInfo0 = new CacheElementInfo("", true, "", 324L, 0L);
      cacheElementInfo0.getKey();
      assertEquals(0L, cacheElementInfo0.getExpiresInSeconds());
      assertEquals(324L, cacheElementInfo0.getMaxLifeSeconds());
      assertTrue(cacheElementInfo0.isEternal());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CacheElementInfo cacheElementInfo0 = new CacheElementInfo("", true, "", 0L, 0L);
      cacheElementInfo0.getExpiresInSeconds();
      assertTrue(cacheElementInfo0.isEternal());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CacheElementInfo cacheElementInfo0 = new CacheElementInfo((String) null, false, "\n ExpiresInSeconds [", (-1494L), (-1494L));
      long long0 = cacheElementInfo0.getExpiresInSeconds();
      assertFalse(cacheElementInfo0.isEternal());
      assertEquals((-1494L), cacheElementInfo0.getMaxLifeSeconds());
      assertEquals((-1494L), long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CacheElementInfo cacheElementInfo0 = new CacheElementInfo((String) null, false, (String) null, (-1788L), (-1788L));
      cacheElementInfo0.getCreateTime();
      assertEquals((-1788L), cacheElementInfo0.getExpiresInSeconds());
      assertEquals((-1788L), cacheElementInfo0.getMaxLifeSeconds());
      assertFalse(cacheElementInfo0.isEternal());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CacheElementInfo cacheElementInfo0 = new CacheElementInfo("XR\"by", false, "XR\"by", 0L, 0L);
      cacheElementInfo0.getCreateTime();
      assertFalse(cacheElementInfo0.isEternal());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CacheElementInfo cacheElementInfo0 = new CacheElementInfo("", false, "", (-1L), 3926L);
      long long0 = cacheElementInfo0.getMaxLifeSeconds();
      assertFalse(cacheElementInfo0.isEternal());
      assertEquals((-1L), long0);
      assertEquals(3926L, cacheElementInfo0.getExpiresInSeconds());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CacheElementInfo cacheElementInfo0 = new CacheElementInfo("", false, "", (-1L), 3926L);
      cacheElementInfo0.getCreateTime();
      assertEquals(3926L, cacheElementInfo0.getExpiresInSeconds());
      assertFalse(cacheElementInfo0.isEternal());
      assertEquals((-1L), cacheElementInfo0.getMaxLifeSeconds());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CacheElementInfo cacheElementInfo0 = new CacheElementInfo("", false, "", (-1L), 3926L);
      boolean boolean0 = cacheElementInfo0.isEternal();
      assertEquals(3926L, cacheElementInfo0.getExpiresInSeconds());
      assertEquals((-1L), cacheElementInfo0.getMaxLifeSeconds());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CacheElementInfo cacheElementInfo0 = new CacheElementInfo("", false, "", (-1L), 3926L);
      long long0 = cacheElementInfo0.getExpiresInSeconds();
      assertFalse(cacheElementInfo0.isEternal());
      assertEquals((-1L), cacheElementInfo0.getMaxLifeSeconds());
      assertEquals(3926L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CacheElementInfo cacheElementInfo0 = new CacheElementInfo((String) null, false, (String) null, (-1788L), (-1788L));
      cacheElementInfo0.getKey();
      assertEquals((-1788L), cacheElementInfo0.getMaxLifeSeconds());
      assertFalse(cacheElementInfo0.isEternal());
      assertEquals((-1788L), cacheElementInfo0.getExpiresInSeconds());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CacheElementInfo cacheElementInfo0 = new CacheElementInfo("ZqOp}", false, "ZqOp}", (-610L), (-610L));
      String string0 = cacheElementInfo0.toString();
      assertEquals("\nCacheElementInfo \n Key [ZqOp}]\n Eternal [false]\n CreateTime [ZqOp}]\n MaxLifeSeconds [-610]\n ExpiresInSeconds [-610]", string0);
  }
}
