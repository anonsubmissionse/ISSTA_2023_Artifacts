/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 22:05:24 GMT 2022
 */

package org.apache.commons.jcs3.engine;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.concurrent.Delayed;
import org.apache.commons.jcs3.auxiliary.lateral.LateralCache;
import org.apache.commons.jcs3.auxiliary.lateral.LateralCacheAttributes;
import org.apache.commons.jcs3.auxiliary.lateral.LateralCacheMonitor;
import org.apache.commons.jcs3.auxiliary.lateral.LateralCacheNoWait;
import org.apache.commons.jcs3.auxiliary.lateral.socket.tcp.LateralTCPCacheFactory;
import org.apache.commons.jcs3.auxiliary.lateral.socket.tcp.TCPLateralCacheAttributes;
import org.apache.commons.jcs3.engine.CacheAdaptor;
import org.apache.commons.jcs3.engine.ZombieCacheServiceNonLocal;
import org.apache.commons.jcs3.engine.ZombieCacheWatch;
import org.apache.commons.jcs3.engine.behavior.ICache;
import org.apache.commons.jcs3.engine.behavior.ICacheListener;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ZombieCacheWatch_ESTest extends ZombieCacheWatch_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ZombieCacheWatch zombieCacheWatch0 = new ZombieCacheWatch();
      zombieCacheWatch0.removeCacheListener("", (ICacheListener<Delayed, String>) null);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ZombieCacheWatch zombieCacheWatch0 = new ZombieCacheWatch();
      TCPLateralCacheAttributes tCPLateralCacheAttributes0 = new TCPLateralCacheAttributes();
      ZombieCacheServiceNonLocal<Object, Delayed> zombieCacheServiceNonLocal0 = new ZombieCacheServiceNonLocal<Object, Delayed>(1);
      LateralTCPCacheFactory lateralTCPCacheFactory0 = new LateralTCPCacheFactory();
      LateralCacheMonitor lateralCacheMonitor0 = new LateralCacheMonitor(lateralTCPCacheFactory0);
      LateralCache<Object, Delayed> lateralCache0 = new LateralCache<Object, Delayed>(tCPLateralCacheAttributes0, zombieCacheServiceNonLocal0, lateralCacheMonitor0);
      CacheAdaptor<Object, Delayed> cacheAdaptor0 = new CacheAdaptor<Object, Delayed>(lateralCache0);
      zombieCacheWatch0.addCacheListener((ICacheListener<Object, Delayed>) cacheAdaptor0);
      assertEquals(0L, cacheAdaptor0.getListenerId());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ZombieCacheWatch zombieCacheWatch0 = new ZombieCacheWatch();
      LateralCacheAttributes lateralCacheAttributes0 = new LateralCacheAttributes();
      ZombieCacheServiceNonLocal<String, String> zombieCacheServiceNonLocal0 = new ZombieCacheServiceNonLocal<String, String>();
      LateralTCPCacheFactory lateralTCPCacheFactory0 = new LateralTCPCacheFactory();
      LateralCacheMonitor lateralCacheMonitor0 = new LateralCacheMonitor(lateralTCPCacheFactory0);
      LateralCache<String, String> lateralCache0 = new LateralCache<String, String>(lateralCacheAttributes0, zombieCacheServiceNonLocal0, lateralCacheMonitor0);
      LateralCacheNoWait<String, String> lateralCacheNoWait0 = new LateralCacheNoWait<String, String>(lateralCache0);
      CacheAdaptor<String, String> cacheAdaptor0 = new CacheAdaptor<String, String>(lateralCacheNoWait0);
      zombieCacheWatch0.removeCacheListener((ICacheListener<String, String>) cacheAdaptor0);
      assertEquals(0L, cacheAdaptor0.getListenerId());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ZombieCacheWatch zombieCacheWatch0 = new ZombieCacheWatch();
      CacheAdaptor<Object, Integer> cacheAdaptor0 = new CacheAdaptor<Object, Integer>((ICache<Object, Integer>) null);
      zombieCacheWatch0.addCacheListener("", (ICacheListener<Object, Integer>) cacheAdaptor0);
      assertEquals(0L, cacheAdaptor0.getListenerId());
  }
}
