/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 21:17:45 GMT 2022
 */

package org.apache.commons.jcs3.utils.struct;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.jcs3.engine.control.group.GroupAttrName;
import org.apache.commons.jcs3.engine.control.group.GroupId;
import org.apache.commons.jcs3.engine.stats.Stats;
import org.apache.commons.jcs3.engine.stats.behavior.IStats;
import org.apache.commons.jcs3.utils.struct.DoubleLinkedListNode;
import org.apache.commons.jcs3.utils.struct.LRUElementDescriptor;
import org.apache.commons.jcs3.utils.struct.LRUMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractLRUMap_ESTest extends AbstractLRUMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LRUMap<String, LRUElementDescriptor<Integer, Object>> lRUMap0 = new LRUMap<String, LRUElementDescriptor<Integer, Object>>(1604);
      Integer integer0 = new Integer(1604);
      LRUElementDescriptor<Integer, Object> lRUElementDescriptor0 = new LRUElementDescriptor<Integer, Object>(integer0, lRUMap0);
      lRUMap0.processRemovedLRU("GroupID.class={0}", lRUElementDescriptor0);
      assertEquals(0, lRUMap0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LRUMap<Integer, AbstractMap.SimpleEntry<Integer, String>> lRUMap0 = new LRUMap<Integer, AbstractMap.SimpleEntry<Integer, String>>();
      Integer integer0 = new Integer(722);
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(integer0, "hj, *V#");
      AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, String>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Integer, String>(abstractMap_SimpleImmutableEntry0);
      lRUMap0.put(integer0, abstractMap_SimpleEntry1);
      int int0 = lRUMap0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LRUMap<Integer, Integer> lRUMap0 = new LRUMap<Integer, Integer>(0);
      Integer integer0 = new Integer((-2283));
      lRUMap0.put(integer0, integer0);
      Integer integer1 = lRUMap0.remove((Object) integer0);
      assertEquals((-2283), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LRUMap<HashSet<Object>, DoubleLinkedListNode<String>> lRUMap0 = new LRUMap<HashSet<Object>, DoubleLinkedListNode<String>>();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      LRUElementDescriptor<HashSet<Object>, String> lRUElementDescriptor0 = new LRUElementDescriptor<HashSet<Object>, String>(linkedHashSet0, "<RW-<o");
      lRUMap0.put(linkedHashSet0, lRUElementDescriptor0);
      DoubleLinkedListNode<String> doubleLinkedListNode0 = lRUMap0.put(linkedHashSet0, lRUElementDescriptor0);
      assertNotNull(doubleLinkedListNode0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LRUMap<GroupAttrName<String>, Integer> lRUMap0 = new LRUMap<GroupAttrName<String>, Integer>(1);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LRUMap<LinkedList<String>, Object> lRUMap1 = new LRUMap<LinkedList<String>, Object>();
      lRUMap1.put(linkedList0, lRUMap0);
      Set<LinkedList<String>> set0 = lRUMap1.keySet();
      assertTrue(set0.contains(linkedList0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LRUMap<String, AbstractMap.SimpleEntry<Object, String>> lRUMap0 = new LRUMap<String, AbstractMap.SimpleEntry<Object, String>>();
      Object object0 = new Object();
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = lRUMap0.get(object0);
      assertNull(abstractMap_SimpleEntry0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LRUMap<Object, LinkedHashSet<Stats>> lRUMap0 = new LRUMap<Object, LinkedHashSet<Stats>>((-1));
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      LinkedHashSet<Stats> linkedHashSet1 = new LinkedHashSet<Stats>();
      LinkedHashSet<String> linkedHashSet2 = new LinkedHashSet<String>();
      lRUMap0.put(linkedHashSet2, linkedHashSet1);
      LinkedHashSet<Stats> linkedHashSet3 = lRUMap0.get(linkedHashSet0);
      assertSame(linkedHashSet3, linkedHashSet1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LRUMap<AbstractMap.SimpleImmutableEntry<String, Object>, LRUElementDescriptor<Integer, Integer>> lRUMap0 = new LRUMap<AbstractMap.SimpleImmutableEntry<String, Object>, LRUElementDescriptor<Integer, Integer>>((-1439));
      Set<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, LRUElementDescriptor<Integer, Integer>>> set0 = (Set<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, LRUElementDescriptor<Integer, Integer>>>)lRUMap0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LRUMap<Integer, Integer> lRUMap0 = new LRUMap<Integer, Integer>(0);
      Integer integer0 = new Integer((-2283));
      lRUMap0.put(integer0, integer0);
      Set<Map.Entry<Integer, Integer>> set0 = (Set<Map.Entry<Integer, Integer>>)lRUMap0.entrySet();
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LRUMap<HashSet<String>, Integer> lRUMap0 = new LRUMap<HashSet<String>, Integer>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(2147483645);
      Integer integer0 = new Integer(2056);
      lRUMap0.put(linkedHashSet0, integer0);
      LinkedHashSet<Stats> linkedHashSet1 = new LinkedHashSet<Stats>();
      boolean boolean0 = lRUMap0.containsKey(linkedHashSet1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LRUMap<Object, LRUElementDescriptor<String, Object>> lRUMap0 = new LRUMap<Object, LRUElementDescriptor<String, Object>>();
      // Undeclared exception!
      try { 
        lRUMap0.remove((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LRUMap<String, String> lRUMap0 = new LRUMap<String, String>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put((String) null, "}g9j68nhoz=");
      // Undeclared exception!
      try { 
        lRUMap0.putAll(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LRUMap<GroupAttrName<Object>, AbstractMap.SimpleImmutableEntry<String, Integer>> lRUMap0 = new LRUMap<GroupAttrName<Object>, AbstractMap.SimpleImmutableEntry<String, Integer>>(0);
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>("", (Integer) null);
      // Undeclared exception!
      try { 
        lRUMap0.put((GroupAttrName<Object>) null, abstractMap_SimpleImmutableEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LRUMap<LinkedHashSet<Integer>, LinkedHashSet<Integer>> lRUMap0 = new LRUMap<LinkedHashSet<Integer>, LinkedHashSet<Integer>>();
      // Undeclared exception!
      try { 
        lRUMap0.getQuiet((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LRUMap<Object, LinkedList<Object>> lRUMap0 = new LRUMap<Object, LinkedList<Object>>();
      // Undeclared exception!
      try { 
        lRUMap0.get((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      LRUMap<AbstractMap.SimpleEntry<Object, String>, LinkedHashSet<Object>> lRUMap0 = new LRUMap<AbstractMap.SimpleEntry<Object, String>, LinkedHashSet<Object>>((-1));
      GroupId groupId0 = new GroupId("verifycache: map does NOT contain key, what the HECK!", "l8{~~O@i6{XU");
      GroupAttrName<Object> groupAttrName0 = new GroupAttrName<Object>(groupId0, linkedHashSet0);
      linkedHashSet0.add(groupAttrName0);
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>("verifycache: map does NOT contain key, what the HECK!", "");
      lRUMap0.put(abstractMap_SimpleEntry0, linkedHashSet0);
      // Undeclared exception!
      try { 
        lRUMap0.entrySet();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LRUMap<Integer, AbstractMap.SimpleEntry<Integer, String>> lRUMap0 = new LRUMap<Integer, AbstractMap.SimpleEntry<Integer, String>>();
      int int0 = lRUMap0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LRUMap<GroupAttrName<Object>, AbstractMap.SimpleImmutableEntry<Object, Integer>> lRUMap0 = new LRUMap<GroupAttrName<Object>, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      lRUMap0.verifyCache();
      assertEquals(0, lRUMap0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LRUMap<GroupAttrName<String>, Integer> lRUMap0 = new LRUMap<GroupAttrName<String>, Integer>(1);
      lRUMap0.dumpMap();
      assertEquals(0, lRUMap0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LRUMap<AbstractMap.SimpleEntry<Object, Object>, LinkedList<Object>> lRUMap0 = new LRUMap<AbstractMap.SimpleEntry<Object, Object>, LinkedList<Object>>();
      lRUMap0.dumpCacheEntries();
      assertFalse(lRUMap0.shouldRemove());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LRUMap<Object, LinkedList<String>> lRUMap0 = new LRUMap<Object, LinkedList<String>>(2434);
      LinkedList<String> linkedList0 = lRUMap0.remove((Object) "QVp");
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LRUMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<Integer, String>> lRUMap0 = new LRUMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<Integer, String>>();
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = lRUMap0.getQuiet("Ix");
      assertNull(abstractMap_SimpleEntry0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LRUMap<Stats, String> lRUMap0 = new LRUMap<Stats, String>();
      lRUMap0.putAll(lRUMap0);
      assertEquals(0, lRUMap0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LRUMap<String, Object> lRUMap0 = new LRUMap<String, Object>();
      lRUMap0.putAll((Map<? extends String, ?>) null);
      assertFalse(lRUMap0.shouldRemove());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LRUMap<LinkedList<Object>, String> lRUMap0 = new LRUMap<LinkedList<Object>, String>();
      boolean boolean0 = lRUMap0.containsValue(lRUMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LRUMap<LinkedList<Integer>, GroupId> lRUMap0 = new LRUMap<LinkedList<Integer>, GroupId>();
      boolean boolean0 = lRUMap0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LRUMap<LinkedList<Object>, String> lRUMap0 = new LRUMap<LinkedList<Object>, String>();
      assertTrue(lRUMap0.isEmpty());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      lRUMap0.put(linkedList0, (String) null);
      boolean boolean0 = lRUMap0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LRUMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, GroupAttrName<String>> lRUMap0 = new LRUMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, GroupAttrName<String>>(2896);
      Collection<GroupAttrName<String>> collection0 = lRUMap0.values();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LRUMap<String, Integer> lRUMap0 = new LRUMap<String, Integer>(0);
      Set<String> set0 = lRUMap0.keySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LRUMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<Integer, String>> lRUMap0 = new LRUMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<Integer, String>>();
      lRUMap0.clear();
      assertFalse(lRUMap0.shouldRemove());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LRUMap<GroupAttrName<String>, Integer> lRUMap0 = new LRUMap<GroupAttrName<String>, Integer>(1);
      Integer integer0 = new Integer(1);
      GroupId groupId0 = new GroupId("org.apache.commons.jcs3.log.LogManager", "org.apache.commons.jcs3.log.LogManager");
      GroupAttrName<String> groupAttrName0 = new GroupAttrName<String>(groupId0, "org.apache.commons.jcs3.log.LogManager");
      lRUMap0.put(groupAttrName0, integer0);
      GroupAttrName<String> groupAttrName1 = new GroupAttrName<String>(groupId0, "GroupID.class={0}");
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      lRUMap0.merge(groupAttrName1, integer0, biFunction0);
      assertEquals(1, lRUMap0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LRUMap<GroupAttrName<String>, Integer> lRUMap0 = new LRUMap<GroupAttrName<String>, Integer>(2882);
      IStats iStats0 = lRUMap0.getStatistics();
      assertEquals("LRUMap", iStats0.getTypeName());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LRUMap<AbstractMap.SimpleEntry<Object, Object>, LinkedList<Object>> lRUMap0 = new LRUMap<AbstractMap.SimpleEntry<Object, Object>, LinkedList<Object>>();
      LRUMap<Object, String> lRUMap1 = new LRUMap<Object, String>();
      lRUMap1.put(lRUMap0, "dump Entries> payload= \"{0}\"");
      String string0 = lRUMap1.getQuiet(lRUMap0);
      assertEquals("dump Entries> payload= \"{0}\"", string0);
  }
}
