/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 22:06:19 GMT 2022
 */

package org.apache.commons.jcs3.auxiliary.disk;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.jcs3.auxiliary.disk.PurgatoryElement;
import org.apache.commons.jcs3.engine.CacheElement;
import org.apache.commons.jcs3.engine.CacheElementSerialized;
import org.apache.commons.jcs3.engine.ElementAttributes;
import org.apache.commons.jcs3.engine.behavior.ICacheElement;
import org.apache.commons.jcs3.engine.behavior.IElementAttributes;
import org.apache.commons.jcs3.engine.control.event.behavior.IElementEventHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PurgatoryElement_ESTest extends PurgatoryElement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      CacheElement<Integer, String> cacheElement0 = new CacheElement<Integer, String>("ExV_qS!", integer0, "ExV_qS!");
      PurgatoryElement<Integer, String> purgatoryElement0 = new PurgatoryElement<Integer, String>(cacheElement0);
      purgatoryElement0.setSpoolable(true);
      boolean boolean0 = purgatoryElement0.isSpoolable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ElementAttributes elementAttributes0 = new ElementAttributes();
      CacheElementSerialized<String, String> cacheElementSerialized0 = new CacheElementSerialized<String, String>("", "", byteArray0, elementAttributes0);
      PurgatoryElement<String, String> purgatoryElement0 = new PurgatoryElement<String, String>(cacheElementSerialized0);
      String string0 = purgatoryElement0.getVal();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CacheElement<Object, Object> cacheElement0 = new CacheElement<Object, Object>("", (Object) null, (Object) null);
      PurgatoryElement<Object, Object> purgatoryElement0 = new PurgatoryElement<Object, Object>(cacheElement0);
      Object object0 = purgatoryElement0.getKey();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      elementAttributes0.setTimeFactorForMilliseconds(0);
      byte[] byteArray0 = new byte[0];
      CacheElementSerialized<Object, String> cacheElementSerialized0 = new CacheElementSerialized<Object, String>((String) null, (Object) null, byteArray0, elementAttributes0);
      PurgatoryElement<Object, String> purgatoryElement0 = new PurgatoryElement<Object, String>(cacheElementSerialized0);
      IElementAttributes iElementAttributes0 = purgatoryElement0.getElementAttributes();
      assertEquals((-1L), iElementAttributes0.getIdleTime());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CacheElement<String, Object> cacheElement0 = new CacheElement<String, Object>("3T", "3T", "3T");
      PurgatoryElement<String, Object> purgatoryElement0 = new PurgatoryElement<String, Object>(cacheElement0);
      ElementAttributes elementAttributes0 = new ElementAttributes();
      elementAttributes0.setTimeFactorForMilliseconds((-1L));
      purgatoryElement0.setElementAttributes(elementAttributes0);
      IElementAttributes iElementAttributes0 = purgatoryElement0.getElementAttributes();
      assertTrue(iElementAttributes0.getIsSpool());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(1183);
      ElementAttributes elementAttributes0 = new ElementAttributes();
      elementAttributes0.setSize(1183);
      CacheElement<Integer, String> cacheElement0 = new CacheElement<Integer, String>("hEz:MR$6", integer0, "hEz:MR$6", elementAttributes0);
      PurgatoryElement<Integer, String> purgatoryElement0 = new PurgatoryElement<Integer, String>(cacheElement0);
      IElementAttributes iElementAttributes0 = purgatoryElement0.getElementAttributes();
      assertSame(iElementAttributes0, elementAttributes0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      elementAttributes0.setSize((byte) (-67));
      CacheElement<Object, Object> cacheElement0 = new CacheElement<Object, Object>("\n Key = [", "\n Key = [", "org.apache.commons.jcs3.auxiliary.disk.PurgatoryElement", elementAttributes0);
      PurgatoryElement<Object, Object> purgatoryElement0 = new PurgatoryElement<Object, Object>(cacheElement0);
      IElementAttributes iElementAttributes0 = purgatoryElement0.getElementAttributes();
      assertSame(iElementAttributes0, elementAttributes0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CacheElement<String, Object> cacheElement0 = new CacheElement<String, Object>("3T", "3T", "3T");
      PurgatoryElement<String, Object> purgatoryElement0 = new PurgatoryElement<String, Object>(cacheElement0);
      ElementAttributes elementAttributes0 = new ElementAttributes();
      elementAttributes0.setMaxLife(0L);
      purgatoryElement0.setElementAttributes(elementAttributes0);
      IElementAttributes iElementAttributes0 = purgatoryElement0.getElementAttributes();
      assertSame(iElementAttributes0, elementAttributes0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ElementAttributes elementAttributes0 = new ElementAttributes();
      CacheElementSerialized<Object, Object> cacheElementSerialized0 = new CacheElementSerialized<Object, Object>("$.&@@CE", (Object) null, byteArray0, elementAttributes0);
      PurgatoryElement<Object, Object> purgatoryElement0 = new PurgatoryElement<Object, Object>(cacheElementSerialized0);
      elementAttributes0.setMaxLife((byte)4);
      IElementAttributes iElementAttributes0 = purgatoryElement0.getElementAttributes();
      assertEquals(1000L, iElementAttributes0.getTimeFactorForMilliseconds());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(2254);
      byte[] byteArray0 = new byte[4];
      ElementAttributes elementAttributes0 = new ElementAttributes();
      elementAttributes0.setIsSpool(false);
      CacheElementSerialized<Integer, String> cacheElementSerialized0 = new CacheElementSerialized<Integer, String>("1}$^csFgDjQ'", integer0, byteArray0, elementAttributes0);
      PurgatoryElement<Integer, String> purgatoryElement0 = new PurgatoryElement<Integer, String>(cacheElementSerialized0);
      IElementAttributes iElementAttributes0 = purgatoryElement0.getElementAttributes();
      assertTrue(iElementAttributes0.getIsEternal());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      ElementAttributes elementAttributes0 = new ElementAttributes();
      CacheElement<Object, Object> cacheElement0 = new CacheElement<Object, Object>("[CacheElement: cacheName [", object0, "[CacheElement: cacheName [", elementAttributes0);
      PurgatoryElement<Object, Object> purgatoryElement0 = new PurgatoryElement<Object, Object>(cacheElement0);
      elementAttributes0.setIsRemote(false);
      IElementAttributes iElementAttributes0 = purgatoryElement0.getElementAttributes();
      assertFalse(iElementAttributes0.getIsRemote());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ElementAttributes elementAttributes0 = new ElementAttributes();
      elementAttributes0.setIsLateral(false);
      CacheElementSerialized<String, String> cacheElementSerialized0 = new CacheElementSerialized<String, String>("z14@nA;Hh_O=~7!", "`x(,lMY6M8", byteArray0, elementAttributes0);
      PurgatoryElement<String, String> purgatoryElement0 = new PurgatoryElement<String, String>(cacheElementSerialized0);
      IElementAttributes iElementAttributes0 = purgatoryElement0.getElementAttributes();
      assertEquals((-1L), iElementAttributes0.getIdleTime());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      byte[] byteArray0 = new byte[3];
      elementAttributes0.setIsEternal(false);
      CacheElementSerialized<IElementEventHandler, IElementEventHandler> cacheElementSerialized0 = new CacheElementSerialized<IElementEventHandler, IElementEventHandler>("Clone not supported. This should never happen.", (IElementEventHandler) null, byteArray0, elementAttributes0);
      PurgatoryElement<IElementEventHandler, IElementEventHandler> purgatoryElement0 = new PurgatoryElement<IElementEventHandler, IElementEventHandler>(cacheElementSerialized0);
      IElementAttributes iElementAttributes0 = purgatoryElement0.getElementAttributes();
      assertFalse(iElementAttributes0.getIsEternal());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      elementAttributes0.setIdleTime(0L);
      CacheElement<String, String> cacheElement0 = new CacheElement<String, String>("8eKw*@e].Sc", "q@(~#5|<+/yFf,bQy_O", "8eKw*@e].Sc", elementAttributes0);
      PurgatoryElement<String, String> purgatoryElement0 = new PurgatoryElement<String, String>(cacheElement0);
      IElementAttributes iElementAttributes0 = purgatoryElement0.getElementAttributes();
      assertEquals(0, iElementAttributes0.getSize());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer(2254);
      byte[] byteArray0 = new byte[4];
      ElementAttributes elementAttributes0 = new ElementAttributes();
      elementAttributes0.setIdleTime(1000L);
      CacheElementSerialized<Integer, String> cacheElementSerialized0 = new CacheElementSerialized<Integer, String>("1}$^csFgDjQ'", integer0, byteArray0, elementAttributes0);
      PurgatoryElement<Integer, String> purgatoryElement0 = new PurgatoryElement<Integer, String>(cacheElementSerialized0);
      IElementAttributes iElementAttributes0 = purgatoryElement0.getElementAttributes();
      assertSame(elementAttributes0, iElementAttributes0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      CacheElement<String, Object> cacheElement0 = new CacheElement<String, Object>((String) null, "&bMKiEK!yPb4,[},J0", "&bMKiEK!yPb4,[},J0", elementAttributes0);
      System.setCurrentTimeMillis(0L);
      byte[] byteArray0 = new byte[6];
      ElementAttributes elementAttributes1 = new ElementAttributes();
      CacheElementSerialized<Object, Object> cacheElementSerialized0 = new CacheElementSerialized<Object, Object>(" Value = ", cacheElement0, byteArray0, elementAttributes1);
      PurgatoryElement<Object, Object> purgatoryElement0 = new PurgatoryElement<Object, Object>(cacheElementSerialized0);
      IElementAttributes iElementAttributes0 = purgatoryElement0.getElementAttributes();
      assertNotSame(elementAttributes0, iElementAttributes0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      System.setCurrentTimeMillis((-146L));
      ElementAttributes elementAttributes0 = new ElementAttributes();
      byte[] byteArray0 = new byte[0];
      CacheElementSerialized<Object, String> cacheElementSerialized0 = new CacheElementSerialized<Object, String>((String) null, (Object) null, byteArray0, elementAttributes0);
      PurgatoryElement<Object, String> purgatoryElement0 = new PurgatoryElement<Object, String>(cacheElementSerialized0);
      IElementAttributes iElementAttributes0 = purgatoryElement0.getElementAttributes();
      assertEquals((-1L), iElementAttributes0.getMaxLife());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = new Integer(3);
      ElementAttributes elementAttributes0 = new ElementAttributes();
      CacheElement<Integer, Object> cacheElement0 = new CacheElement<Integer, Object>((String) null, integer0, integer0, elementAttributes0);
      PurgatoryElement<Integer, Object> purgatoryElement0 = new PurgatoryElement<Integer, Object>(cacheElement0);
      String string0 = purgatoryElement0.getCacheName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ElementAttributes elementAttributes0 = new ElementAttributes();
      CacheElement<Integer, Object> cacheElement0 = new CacheElement<Integer, Object>("']'S6U._P.e8", integer0, elementAttributes0, elementAttributes0);
      PurgatoryElement<Integer, Object> purgatoryElement0 = new PurgatoryElement<Integer, Object>(cacheElement0);
      String string0 = purgatoryElement0.getCacheName();
      assertEquals("']'S6U._P.e8", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PurgatoryElement<Integer, Object> purgatoryElement0 = null;
      try {
        purgatoryElement0 = new PurgatoryElement<Integer, Object>((ICacheElement<Integer, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.PurgatoryElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      ElementAttributes elementAttributes0 = new ElementAttributes();
      CacheElement<Integer, Object> cacheElement0 = new CacheElement<Integer, Object>("", integer0, "", elementAttributes0);
      PurgatoryElement<Integer, Object> purgatoryElement0 = new PurgatoryElement<Integer, Object>(cacheElement0);
      String string0 = purgatoryElement0.getCacheName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CacheElement<String, Object> cacheElement0 = new CacheElement<String, Object>("[CacheElement: cacheName [ExV_qS!], key [3X], val [-1], attr [[ IS_LATERAL = true, IS_SPOOL = true, IS_REMOTE = true, IS_ETERNAL = true, MaxLifeSeconds = -1, IdleTime = -1, CreateTime = 1392409281320, LastAccessTime = 1392409281320, getTimeToLiveSeconds() = -1, createTime = 1392409281320 ]]", "ExV_qS!", "[CacheElement: cacheName [ExV_qS!], key [3X], val [-1], attr [[ IS_LATERAL = true, IS_SPOOL = true, IS_REMOTE = true, IS_ETERNAL = true, MaxLifeSeconds = -1, IdleTime = -1, CreateTime = 1392409281320, LastAccessTime = 1392409281320, getTimeToLiveSeconds() = -1, createTime = 1392409281320 ]]");
      PurgatoryElement<String, Object> purgatoryElement0 = new PurgatoryElement<String, Object>(cacheElement0);
      String string0 = purgatoryElement0.getKey();
      assertEquals("ExV_qS!", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      CacheElement<String, String> cacheElement0 = new CacheElement<String, String>("ExV_qS!", "ExV_qS!", "ExV_qS!");
      PurgatoryElement<String, String> purgatoryElement0 = new PurgatoryElement<String, String>(cacheElement0);
      IElementAttributes iElementAttributes0 = purgatoryElement0.getElementAttributes();
      Object object0 = new Object();
      CacheElement<Integer, Object> cacheElement1 = new CacheElement<Integer, Object>("3", integer0, object0, iElementAttributes0);
      PurgatoryElement<Integer, Object> purgatoryElement1 = new PurgatoryElement<Integer, Object>(cacheElement1);
      ICacheElement<Integer, Object> iCacheElement0 = purgatoryElement1.getCacheElement();
      assertEquals("3", iCacheElement0.getCacheName());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      CacheElement<String, String> cacheElement0 = new CacheElement<String, String>("ExV_qS!", "ExV_qS!", "ExV_qS!");
      PurgatoryElement<String, String> purgatoryElement0 = new PurgatoryElement<String, String>(cacheElement0);
      IElementAttributes iElementAttributes0 = purgatoryElement0.getElementAttributes();
      CacheElement<String, Integer> cacheElement1 = new CacheElement<String, Integer>("ExV_qS!", "3X", integer0, iElementAttributes0);
      PurgatoryElement<String, Integer> purgatoryElement1 = new PurgatoryElement<String, Integer>(cacheElement1);
      Integer integer1 = purgatoryElement1.getVal();
      assertEquals((-1), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CacheElement<String, String> cacheElement0 = new CacheElement<String, String>("+$.!/", "+$.!/", "+$.!/");
      PurgatoryElement<String, String> purgatoryElement0 = new PurgatoryElement<String, String>(cacheElement0);
      boolean boolean0 = purgatoryElement0.isSpoolable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CacheElement<String, Object> cacheElement0 = new CacheElement<String, Object>("$", "$", "$");
      PurgatoryElement<String, Object> purgatoryElement0 = new PurgatoryElement<String, Object>(cacheElement0);
      String string0 = purgatoryElement0.toString();
      assertEquals("[PurgatoryElement:  isSpoolable = false CacheElement = [CacheElement: cacheName [$], key [$], val [$], attr [null] CacheName = $ Key = $ Value = $ ElementAttributes = [ IS_LATERAL = true, IS_SPOOL = true, IS_REMOTE = true, IS_ETERNAL = true, MaxLifeSeconds = -1, IdleTime = -1, CreateTime = 1392409281320, LastAccessTime = 1392409281320, getTimeToLiveSeconds() = -1, createTime = 1392409281320 ]]", string0);
  }
}
