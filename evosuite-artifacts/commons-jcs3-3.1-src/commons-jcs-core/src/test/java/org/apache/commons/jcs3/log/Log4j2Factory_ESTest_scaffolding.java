/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Tue Oct 11 22:03:58 GMT 2022
 */

package org.apache.commons.jcs3.log;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class Log4j2Factory_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.jcs3.log.Log4j2Factory"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
    java.lang.System.setProperty("user.country", "US"); 
    java.lang.System.setProperty("user.dir", "/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/commons-jcs3-3.1-src/commons-jcs-core"); 
    java.lang.System.setProperty("user.home", "/home/ISSTA_USER"); 
    java.lang.System.setProperty("user.language", "en"); 
    java.lang.System.setProperty("user.name", "ISSTA_USER"); 
    java.lang.System.setProperty("user.timezone", "America/New_York"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Log4j2Factory_ESTest_scaffolding.class.getClassLoader() ,
      "org.apache.logging.log4j.spi.AbstractLogger$LocalLogBuilder",
      "org.apache.logging.log4j.util.PropertiesPropertySource",
      "org.apache.logging.log4j.message.AbstractMessageFactory",
      "org.apache.logging.log4j.message.FlowMessage",
      "org.apache.logging.log4j.message.ParameterizedMessageFactory",
      "org.apache.logging.log4j.message.SimpleMessage",
      "org.apache.logging.log4j.message.ReusableMessageFactory",
      "org.apache.logging.log4j.Level",
      "org.apache.logging.log4j.spi.LoggerRegistry$MapFactory",
      "org.apache.logging.log4j.spi.StandardLevel",
      "org.apache.logging.log4j.simple.SimpleLoggerContextFactory",
      "org.apache.logging.log4j.util.PropertyFilePropertySource",
      "org.apache.logging.log4j.util.SystemPropertiesPropertySource",
      "org.apache.logging.log4j.spi.LoggerRegistry",
      "org.apache.commons.jcs3.log.Log4j2Factory",
      "org.apache.commons.jcs3.log.Log",
      "org.apache.logging.log4j.util.LoaderUtil$ThreadContextClassLoaderGetter",
      "org.apache.logging.log4j.MarkerManager$Log4jMarker",
      "org.apache.logging.log4j.message.DefaultFlowMessageFactory",
      "org.apache.logging.log4j.util.StringBuilderFormattable",
      "org.apache.commons.jcs3.log.LogFactory",
      "org.apache.logging.log4j.MarkerManager",
      "org.apache.logging.log4j.util.BiConsumer",
      "org.apache.logging.log4j.Logger",
      "org.apache.logging.log4j.message.Clearable",
      "org.apache.logging.log4j.message.MessageFormatMessageFactory",
      "org.apache.logging.log4j.util.Strings",
      "org.apache.logging.log4j.status.StatusData",
      "org.apache.logging.log4j.util.PropertySource$Util",
      "org.apache.logging.log4j.LoggingException",
      "org.apache.logging.log4j.util.Constants",
      "org.apache.logging.log4j.util.ProviderUtil",
      "org.apache.logging.log4j.message.FlowMessageFactory",
      "org.apache.logging.log4j.util.LoaderUtil",
      "org.apache.logging.log4j.simple.SimpleLoggerContext",
      "org.apache.logging.log4j.LogBuilder",
      "org.apache.logging.log4j.spi.Provider",
      "org.apache.logging.log4j.util.PropertySource",
      "org.apache.logging.log4j.message.ParameterizedNoReferenceMessageFactory",
      "org.apache.logging.log4j.spi.LoggerContext",
      "org.apache.logging.log4j.util.PropertiesUtil",
      "org.apache.logging.log4j.message.ExitMessage",
      "org.apache.logging.log4j.message.Message",
      "org.apache.logging.log4j.spi.LoggerRegistry$ConcurrentMapFactory",
      "org.apache.logging.log4j.spi.LocationAwareLogger",
      "org.apache.logging.log4j.Marker",
      "org.apache.logging.log4j.spi.AbstractLogger",
      "org.apache.logging.log4j.simple.SimpleLogger",
      "org.apache.logging.log4j.message.MessageFactory",
      "org.apache.logging.log4j.status.StatusLogger$BoundedQueue",
      "org.apache.logging.log4j.util.PropertiesUtil$Environment",
      "org.apache.logging.log4j.spi.LoggerContextFactory",
      "org.apache.logging.log4j.util.EnvironmentPropertySource",
      "org.apache.logging.log4j.internal.LogManagerStatus",
      "org.apache.commons.jcs3.log.Log4j2LogAdapter",
      "org.apache.logging.log4j.util.PropertySource$Comparator",
      "org.apache.logging.log4j.message.EntryMessage",
      "org.apache.logging.log4j.status.StatusLogger",
      "org.apache.logging.log4j.spi.ExtendedLogger",
      "org.apache.logging.log4j.message.MessageFactory2",
      "org.apache.logging.log4j.LogManager"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("org.apache.logging.log4j.spi.LoggerContextFactory", false, Log4j2Factory_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Log4j2Factory_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "org.apache.commons.jcs3.log.Log4j2Factory",
      "org.apache.logging.log4j.MarkerManager",
      "org.apache.logging.log4j.MarkerManager$Log4jMarker",
      "org.apache.logging.log4j.util.PropertiesUtil$Environment",
      "org.apache.logging.log4j.util.PropertiesPropertySource",
      "org.apache.logging.log4j.util.PropertyFilePropertySource",
      "org.apache.logging.log4j.util.LoaderUtil$ThreadContextClassLoaderGetter",
      "org.apache.logging.log4j.util.LoaderUtil",
      "org.apache.logging.log4j.util.PropertySource$Comparator",
      "org.apache.logging.log4j.util.EnvironmentPropertySource",
      "org.apache.logging.log4j.util.SystemPropertiesPropertySource",
      "org.apache.logging.log4j.util.PropertySource$Util",
      "org.apache.logging.log4j.util.PropertiesUtil",
      "org.apache.logging.log4j.util.Constants",
      "org.apache.logging.log4j.spi.AbstractLogger",
      "org.apache.logging.log4j.message.AbstractMessageFactory",
      "org.apache.logging.log4j.message.ParameterizedNoReferenceMessageFactory",
      "org.apache.logging.log4j.message.DefaultFlowMessageFactory",
      "org.apache.logging.log4j.spi.AbstractLogger$LocalLogBuilder",
      "org.apache.logging.log4j.status.StatusLogger$BoundedQueue",
      "org.apache.logging.log4j.util.Strings",
      "org.apache.logging.log4j.simple.SimpleLogger",
      "org.apache.logging.log4j.spi.StandardLevel",
      "org.apache.logging.log4j.Level",
      "org.apache.logging.log4j.status.StatusLogger",
      "org.apache.logging.log4j.util.ProviderUtil",
      "org.apache.logging.log4j.message.SimpleMessage",
      "org.apache.logging.log4j.status.StatusData",
      "org.apache.logging.log4j.message.ReusableMessageFactory",
      "org.apache.logging.log4j.simple.SimpleLoggerContext",
      "org.apache.logging.log4j.spi.LoggerRegistry",
      "org.apache.logging.log4j.spi.LoggerRegistry$ConcurrentMapFactory",
      "org.apache.logging.log4j.simple.SimpleLoggerContextFactory",
      "org.apache.logging.log4j.internal.LogManagerStatus",
      "org.apache.logging.log4j.LogManager",
      "org.apache.logging.log4j.util.StackLocator",
      "org.apache.logging.log4j.util.StackLocatorUtil",
      "org.apache.logging.log4j.message.MessageFormatMessageFactory",
      "org.apache.commons.jcs3.log.Log4j2LogAdapter"
    );
  }
}
