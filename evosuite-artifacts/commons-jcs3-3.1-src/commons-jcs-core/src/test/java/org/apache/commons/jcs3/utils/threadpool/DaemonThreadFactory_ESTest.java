/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 22:03:52 GMT 2022
 */

package org.apache.commons.jcs3.utils.threadpool;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.jcs3.utils.threadpool.DaemonThreadFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DaemonThreadFactory_ESTest extends DaemonThreadFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DaemonThreadFactory daemonThreadFactory0 = new DaemonThreadFactory("o.m9");
      MockThread mockThread0 = new MockThread("o.m9");
      Thread thread0 = daemonThreadFactory0.newThread(mockThread0);
      assertTrue(thread0.isDaemon());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DaemonThreadFactory daemonThreadFactory0 = new DaemonThreadFactory("", (-1086));
      // Undeclared exception!
      try { 
        daemonThreadFactory0.newThread((Runnable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Thread", e);
      }
  }
}
