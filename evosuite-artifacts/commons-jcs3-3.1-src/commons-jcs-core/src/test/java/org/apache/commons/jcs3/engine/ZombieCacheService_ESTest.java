/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 22:06:08 GMT 2022
 */

package org.apache.commons.jcs3.engine;

import org.junit.Test;
import static org.junit.Assert.*;
import java.io.Serializable;
import java.util.LinkedHashSet;
import java.util.Map;
import org.apache.commons.jcs3.engine.CacheElement;
import org.apache.commons.jcs3.engine.CacheElementSerialized;
import org.apache.commons.jcs3.engine.ZombieCacheService;
import org.apache.commons.jcs3.engine.behavior.ICacheElement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ZombieCacheService_ESTest extends ZombieCacheService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ZombieCacheService<Object, String> zombieCacheService0 = new ZombieCacheService<Object, String>();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Map<Object, ICacheElement<Object, String>> map0 = zombieCacheService0.getMultiple("], key [", linkedHashSet0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ZombieCacheService<Object, String> zombieCacheService0 = new ZombieCacheService<Object, String>();
      zombieCacheService0.dispose("], key [");
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ZombieCacheService<Integer, CacheElement<String, String>> zombieCacheService0 = new ZombieCacheService<Integer, CacheElement<String, String>>();
      zombieCacheService0.update((ICacheElement<Integer, CacheElement<String, String>>) null);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ZombieCacheService<String, String> zombieCacheService0 = new ZombieCacheService<String, String>();
      CacheElement<String, String> cacheElement0 = new CacheElement<String, String>((String) null, (String) null, (String) null);
      zombieCacheService0.put(cacheElement0);
      assertNull(cacheElement0.getCacheName());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ZombieCacheService<Object, CacheElement<Object, String>> zombieCacheService0 = new ZombieCacheService<Object, CacheElement<Object, String>>();
      Object object0 = new Object();
      zombieCacheService0.remove("], key [", object0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ZombieCacheService<CacheElementSerialized<Integer, String>, CacheElement<Object, Integer>> zombieCacheService0 = new ZombieCacheService<CacheElementSerialized<Integer, String>, CacheElement<Object, Integer>>();
      zombieCacheService0.release();
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ZombieCacheService<String, String> zombieCacheService0 = new ZombieCacheService<String, String>();
      zombieCacheService0.removeAll((String) null);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ZombieCacheService<String, String> zombieCacheService0 = new ZombieCacheService<String, String>();
      Serializable serializable0 = zombieCacheService0.get((String) null, (String) null, true);
      assertNull(serializable0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ZombieCacheService<Object, String> zombieCacheService0 = new ZombieCacheService<Object, String>();
      Map<Object, ICacheElement<Object, String>> map0 = zombieCacheService0.getMatching("], key [", "], key [");
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ZombieCacheService<Object, String> zombieCacheService0 = new ZombieCacheService<Object, String>();
      ICacheElement<Object, String> iCacheElement0 = zombieCacheService0.get("org.aache.commons.jcs3.access.exception.CacheException", (Object) "org.aache.commons.jcs3.access.exception.CacheException");
      assertNull(iCacheElement0);
  }
}
