/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 21:44:56 GMT 2022
 */

package org.apache.commons.jcs3.auxiliary.remote;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.jcs3.auxiliary.remote.RemoteLocation;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RemoteLocation_ESTest extends RemoteLocation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RemoteLocation remoteLocation0 = new RemoteLocation("v(>5gWfDqJJg_LB( :398", 398);
      RemoteLocation remoteLocation1 = new RemoteLocation("v(>5gWfDqJJg_LB( :398", 0);
      boolean boolean0 = remoteLocation0.equals(remoteLocation1);
      assertEquals(398, remoteLocation0.getPort());
      assertFalse(remoteLocation1.equals((Object)remoteLocation0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RemoteLocation remoteLocation0 = new RemoteLocation((String) null, (-356));
      RemoteLocation remoteLocation1 = new RemoteLocation((String) null, (-1013));
      boolean boolean0 = remoteLocation0.equals(remoteLocation1);
      assertEquals((-1013), remoteLocation1.getPort());
      assertFalse(boolean0);
      assertFalse(remoteLocation1.equals((Object)remoteLocation0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RemoteLocation remoteLocation0 = new RemoteLocation("}Sbgca2", 18);
      int int0 = remoteLocation0.getPort();
      assertEquals(18, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RemoteLocation remoteLocation0 = new RemoteLocation("jcs.logSystem", (-612));
      int int0 = remoteLocation0.getPort();
      assertEquals((-612), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RemoteLocation remoteLocation0 = new RemoteLocation((String) null, (-4502));
      remoteLocation0.getHost();
      assertEquals((-4502), remoteLocation0.getPort());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RemoteLocation remoteLocation0 = new RemoteLocation("85,'rLecaPkQS=on_", 0);
      remoteLocation0.getHost();
      assertEquals(0, remoteLocation0.getPort());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        RemoteLocation.parseServerAndPort((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RemoteLocation remoteLocation0 = RemoteLocation.parseServerAndPort("}Sbgca2");
      assertNull(remoteLocation0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RemoteLocation remoteLocation0 = new RemoteLocation("}Sbgca2", 18);
      String string0 = remoteLocation0.toString();
      assertEquals("}Sbgca2:18", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RemoteLocation remoteLocation0 = new RemoteLocation((String) null, 398);
      String string0 = remoteLocation0.toString();
      assertEquals(":398", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RemoteLocation remoteLocation0 = new RemoteLocation((String) null, (-2298));
      remoteLocation0.hashCode();
      assertEquals((-2298), remoteLocation0.getPort());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RemoteLocation remoteLocation0 = new RemoteLocation("}Sbgca2", 18);
      remoteLocation0.hashCode();
      assertEquals(18, remoteLocation0.getPort());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RemoteLocation remoteLocation0 = new RemoteLocation("}Sbgca2", 18);
      RemoteLocation remoteLocation1 = RemoteLocation.parseServerAndPort("}Sbgca2:18");
      boolean boolean0 = remoteLocation0.equals(remoteLocation1);
      assertEquals(18, remoteLocation1.getPort());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RemoteLocation remoteLocation0 = new RemoteLocation("}Sbgca2", 18);
      RemoteLocation remoteLocation1 = new RemoteLocation("}Sbkca2", 18);
      boolean boolean0 = remoteLocation0.equals(remoteLocation1);
      assertEquals(18, remoteLocation1.getPort());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RemoteLocation remoteLocation0 = new RemoteLocation((String) null, 1059);
      RemoteLocation remoteLocation1 = new RemoteLocation((String) null, (-1974));
      boolean boolean0 = remoteLocation1.equals(remoteLocation0);
      assertEquals((-1974), remoteLocation1.getPort());
      assertFalse(remoteLocation0.equals((Object)remoteLocation1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RemoteLocation remoteLocation0 = new RemoteLocation((String) null, (-2298));
      RemoteLocation remoteLocation1 = new RemoteLocation((String) null, (-2298));
      boolean boolean0 = remoteLocation1.equals(remoteLocation0);
      assertTrue(boolean0);
      assertEquals((-2298), remoteLocation1.getPort());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RemoteLocation remoteLocation0 = new RemoteLocation((String) null, 398);
      RemoteLocation remoteLocation1 = new RemoteLocation(":398", 398);
      boolean boolean0 = remoteLocation0.equals(remoteLocation1);
      assertFalse(remoteLocation1.equals((Object)remoteLocation0));
      assertFalse(boolean0);
      assertEquals(398, remoteLocation1.getPort());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RemoteLocation remoteLocation0 = RemoteLocation.parseServerAndPort("r,'X}HckTSh,_:0");
      assertNotNull(remoteLocation0);
      
      boolean boolean0 = remoteLocation0.equals("r,'X}HckTSh,_:0");
      assertFalse(boolean0);
      assertEquals("r,'X}HckTSh,_", remoteLocation0.getHost());
      assertEquals(0, remoteLocation0.getPort());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RemoteLocation remoteLocation0 = new RemoteLocation("", 0);
      boolean boolean0 = remoteLocation0.equals(remoteLocation0);
      assertEquals(0, remoteLocation0.getPort());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RemoteLocation remoteLocation0 = new RemoteLocation("85=xLauQFRo<g_", (-19));
      RemoteLocation remoteLocation1 = new RemoteLocation("85=xLauQFRo<g_", 21);
      boolean boolean0 = remoteLocation0.equals(remoteLocation1);
      assertEquals(21, remoteLocation1.getPort());
      assertFalse(remoteLocation1.equals((Object)remoteLocation0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RemoteLocation remoteLocation0 = new RemoteLocation("", 0);
      remoteLocation0.getHost();
      assertEquals(0, remoteLocation0.getPort());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RemoteLocation remoteLocation0 = new RemoteLocation("", 0);
      int int0 = remoteLocation0.getPort();
      assertEquals(0, int0);
  }
}
