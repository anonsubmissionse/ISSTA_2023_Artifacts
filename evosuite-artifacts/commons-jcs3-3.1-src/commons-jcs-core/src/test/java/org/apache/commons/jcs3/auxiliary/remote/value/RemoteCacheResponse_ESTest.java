/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 22:05:37 GMT 2022
 */

package org.apache.commons.jcs3.auxiliary.remote.value;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.jcs3.auxiliary.remote.value.RemoteCacheResponse;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RemoteCacheResponse_ESTest extends RemoteCacheResponse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RemoteCacheResponse<Object> remoteCacheResponse0 = new RemoteCacheResponse<Object>();
      remoteCacheResponse0.setSuccess(true);
      remoteCacheResponse0.setPayload("");
      RemoteCacheResponse<Object> remoteCacheResponse1 = new RemoteCacheResponse<Object>();
      remoteCacheResponse0.setPayload("");
      remoteCacheResponse1.setPayload(remoteCacheResponse0);
      Object object0 = remoteCacheResponse1.getPayload();
      remoteCacheResponse0.setPayload(object0);
      RemoteCacheResponse<String> remoteCacheResponse2 = new RemoteCacheResponse<String>();
      remoteCacheResponse1.toString();
      remoteCacheResponse2.isSuccess();
      remoteCacheResponse1.isSuccess();
      remoteCacheResponse2.getPayload();
      remoteCacheResponse0.getErrorMessage();
      remoteCacheResponse2.getPayload();
      remoteCacheResponse0.getPayload();
      remoteCacheResponse2.getPayload();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RemoteCacheResponse<String> remoteCacheResponse0 = new RemoteCacheResponse<String>();
      assertTrue(remoteCacheResponse0.isSuccess());
      
      remoteCacheResponse0.setSuccess(false);
      assertFalse(remoteCacheResponse0.isSuccess());
      
      remoteCacheResponse0.setPayload("g-DZd/Z<RDnEhRe}");
      remoteCacheResponse0.setErrorMessage("");
      RemoteCacheResponse<Object> remoteCacheResponse1 = new RemoteCacheResponse<Object>();
      remoteCacheResponse1.setErrorMessage("");
      assertTrue(remoteCacheResponse1.isSuccess());
      
      remoteCacheResponse0.getErrorMessage();
      assertFalse(remoteCacheResponse0.isSuccess());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RemoteCacheResponse<String> remoteCacheResponse0 = new RemoteCacheResponse<String>();
      assertTrue(remoteCacheResponse0.isSuccess());
      
      remoteCacheResponse0.setSuccess(false);
      boolean boolean0 = remoteCacheResponse0.isSuccess();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RemoteCacheResponse<Object> remoteCacheResponse0 = new RemoteCacheResponse<Object>();
      remoteCacheResponse0.getErrorMessage();
      assertTrue(remoteCacheResponse0.isSuccess());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RemoteCacheResponse<Object> remoteCacheResponse0 = new RemoteCacheResponse<Object>();
      Integer integer0 = new Integer(0);
      remoteCacheResponse0.setPayload(integer0);
      remoteCacheResponse0.getPayload();
      assertTrue(remoteCacheResponse0.isSuccess());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RemoteCacheResponse<Object> remoteCacheResponse0 = new RemoteCacheResponse<Object>();
      remoteCacheResponse0.isSuccess();
      remoteCacheResponse0.setSuccess(true);
      assertTrue(remoteCacheResponse0.isSuccess());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RemoteCacheResponse<Object> remoteCacheResponse0 = new RemoteCacheResponse<Object>();
      remoteCacheResponse0.setErrorMessage((String) null);
      remoteCacheResponse0.toString();
      remoteCacheResponse0.setErrorMessage("\nRemoteHttpCacheResponse");
      remoteCacheResponse0.setPayload((Object) null);
      remoteCacheResponse0.getPayload();
      remoteCacheResponse0.getErrorMessage();
      RemoteCacheResponse<String> remoteCacheResponse1 = new RemoteCacheResponse<String>();
      String string0 = remoteCacheResponse1.toString();
      assertEquals("\nRemoteHttpCacheResponse\n success [true]\n payload [null]\n errorMessage [null]", string0);
      
      remoteCacheResponse0.getErrorMessage();
      assertTrue(remoteCacheResponse0.isSuccess());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RemoteCacheResponse<Object> remoteCacheResponse0 = new RemoteCacheResponse<Object>();
      Object object0 = new Object();
      remoteCacheResponse0.setPayload(object0);
      assertTrue(remoteCacheResponse0.isSuccess());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RemoteCacheResponse<String> remoteCacheResponse0 = new RemoteCacheResponse<String>();
      remoteCacheResponse0.setErrorMessage(".2~|A%5k'W|)$Ytw-)j");
      assertTrue(remoteCacheResponse0.isSuccess());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RemoteCacheResponse<Object> remoteCacheResponse0 = new RemoteCacheResponse<Object>();
      String string0 = remoteCacheResponse0.toString();
      assertEquals("\nRemoteHttpCacheResponse\n success [true]\n payload [null]\n errorMessage [null]", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RemoteCacheResponse<Integer> remoteCacheResponse0 = new RemoteCacheResponse<Integer>();
      String string0 = remoteCacheResponse0.toString();
      assertEquals("\nRemoteHttpCacheResponse\n success [true]\n payload [null]\n errorMessage [null]", string0);
      
      remoteCacheResponse0.getPayload();
      RemoteCacheResponse<String> remoteCacheResponse1 = new RemoteCacheResponse<String>();
      remoteCacheResponse1.setErrorMessage("\nRemoteHttpCacheResponse\n success [true]\n payload [null]\n errorMessage [null]");
      remoteCacheResponse1.setSuccess(true);
      assertTrue(remoteCacheResponse1.isSuccess());
      
      remoteCacheResponse0.setPayload((Integer) null);
      assertTrue(remoteCacheResponse0.isSuccess());
  }
}
