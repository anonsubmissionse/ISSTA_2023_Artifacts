/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 22:06:01 GMT 2022
 */

package org.apache.commons.jcs3.auxiliary.remote.value;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedHashSet;
import java.util.Set;
import org.apache.commons.jcs3.auxiliary.remote.value.RemoteCacheRequest;
import org.apache.commons.jcs3.auxiliary.remote.value.RemoteRequestType;
import org.apache.commons.jcs3.engine.CacheElement;
import org.apache.commons.jcs3.engine.ElementAttributes;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RemoteCacheRequest_ESTest extends RemoteCacheRequest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RemoteCacheRequest<Object, Integer> remoteCacheRequest0 = new RemoteCacheRequest<Object, Integer>();
      RemoteCacheRequest<Object, Object> remoteCacheRequest1 = new RemoteCacheRequest<Object, Object>();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      remoteCacheRequest0.setKey(linkedHashSet0);
      linkedHashSet0.add(remoteCacheRequest0);
      remoteCacheRequest0.setKeySet(linkedHashSet0);
      remoteCacheRequest1.getRequestType();
      remoteCacheRequest1.setKey(remoteCacheRequest0);
      RemoteCacheRequest<Integer, Object> remoteCacheRequest2 = new RemoteCacheRequest<Integer, Object>();
      Integer integer0 = new Integer(0);
      remoteCacheRequest2.setKey(integer0);
      RemoteCacheRequest<Object, String> remoteCacheRequest3 = new RemoteCacheRequest<Object, String>();
      remoteCacheRequest3.setCacheName("");
      remoteCacheRequest0.setRequesterId(0);
      String string0 = "";
      remoteCacheRequest3.setPattern("");
      String string1 = remoteCacheRequest0.toString();
      RemoteCacheRequest<Integer, String> remoteCacheRequest4 = new RemoteCacheRequest<Integer, String>();
      String string2 = "\n Key = [";
      int int0 = 81;
      Integer integer1 = new Integer(int0);
      ElementAttributes elementAttributes0 = new ElementAttributes();
      CacheElement<Integer, String> cacheElement0 = new CacheElement<Integer, String>(string2, integer1, string1, elementAttributes0);
      cacheElement0.getElementAttributes();
      remoteCacheRequest4.setCacheElement(cacheElement0);
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>();
      remoteCacheRequest4.setKeySet(linkedHashSet1);
      remoteCacheRequest4.getPattern();
      remoteCacheRequest1.setPattern(string0);
      remoteCacheRequest1.getCacheElement();
      remoteCacheRequest4.getCacheElement();
      RemoteCacheRequest<String, Object> remoteCacheRequest5 = new RemoteCacheRequest<String, Object>();
      remoteCacheRequest5.getKeySet();
      remoteCacheRequest2.getPattern();
      long long0 = (-1L);
      remoteCacheRequest3.setRequesterId(long0);
      RemoteCacheRequest<String, String> remoteCacheRequest6 = new RemoteCacheRequest<String, String>();
      remoteCacheRequest6.getCacheName();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RemoteCacheRequest<Object, String> remoteCacheRequest0 = new RemoteCacheRequest<Object, String>();
      remoteCacheRequest0.toString();
      remoteCacheRequest0.setRequesterId((-2137L));
      remoteCacheRequest0.setPattern("");
      remoteCacheRequest0.getPattern();
      RemoteCacheRequest<Object, Object> remoteCacheRequest1 = new RemoteCacheRequest<Object, Object>();
      remoteCacheRequest1.setPattern("CZ\"$9n%*Fl[&c>");
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      remoteCacheRequest1.setKeySet(linkedHashSet0);
      RemoteCacheRequest<String, String> remoteCacheRequest2 = new RemoteCacheRequest<String, String>();
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>();
      remoteCacheRequest2.setKeySet(linkedHashSet1);
      RemoteCacheRequest<String, Integer> remoteCacheRequest3 = new RemoteCacheRequest<String, Integer>();
      remoteCacheRequest3.getRequesterId();
      RemoteCacheRequest<Integer, Object> remoteCacheRequest4 = new RemoteCacheRequest<Integer, Object>();
      RemoteRequestType remoteRequestType0 = RemoteRequestType.GET_MATCHING;
      remoteCacheRequest4.setRequestType(remoteRequestType0);
      assertEquals(RemoteRequestType.GET_MATCHING, remoteCacheRequest4.getRequestType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RemoteCacheRequest<Object, Object> remoteCacheRequest0 = new RemoteCacheRequest<Object, Object>();
      remoteCacheRequest0.setRequesterId(1076L);
      long long0 = remoteCacheRequest0.getRequesterId();
      assertEquals(1076L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RemoteCacheRequest<String, String> remoteCacheRequest0 = new RemoteCacheRequest<String, String>();
      remoteCacheRequest0.setPattern("]");
      remoteCacheRequest0.setCacheName((String) null);
      remoteCacheRequest0.getPattern();
      RemoteCacheRequest<String, Object> remoteCacheRequest1 = new RemoteCacheRequest<String, Object>();
      remoteCacheRequest1.getRequestType();
      RemoteCacheRequest<Object, Integer> remoteCacheRequest2 = new RemoteCacheRequest<Object, Integer>();
      Object object0 = remoteCacheRequest2.getKey();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RemoteCacheRequest<String, Object> remoteCacheRequest0 = new RemoteCacheRequest<String, Object>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("RjEs,");
      remoteCacheRequest0.setKeySet(linkedHashSet0);
      remoteCacheRequest0.setRequesterId(1343L);
      RemoteCacheRequest<Integer, Object> remoteCacheRequest1 = new RemoteCacheRequest<Integer, Object>();
      remoteCacheRequest1.setRequesterId(1343L);
      RemoteCacheRequest<Object, String> remoteCacheRequest2 = new RemoteCacheRequest<Object, String>();
      remoteCacheRequest2.setPattern("RjEs,");
      remoteCacheRequest0.setPattern("\nRemoteHttpCacheRequest");
      remoteCacheRequest2.getKey();
      remoteCacheRequest0.getKeySet();
      assertEquals(1343L, remoteCacheRequest0.getRequesterId());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RemoteCacheRequest<Object, String> remoteCacheRequest0 = new RemoteCacheRequest<Object, String>();
      remoteCacheRequest0.setPattern("XN }:JE");
      remoteCacheRequest0.toString();
      RemoteCacheRequest<Object, Object> remoteCacheRequest1 = new RemoteCacheRequest<Object, Object>();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-1672));
      CacheElement<Object, Object> cacheElement0 = new CacheElement<Object, Object>("r?&/", integer0, integer1);
      remoteCacheRequest1.setCacheElement(cacheElement0);
      remoteCacheRequest1.getKeySet();
      remoteCacheRequest1.setRequesterId((-1672));
      RemoteCacheRequest<String, Integer> remoteCacheRequest2 = new RemoteCacheRequest<String, Integer>();
      remoteCacheRequest2.getCacheName();
      RemoteCacheRequest<String, String> remoteCacheRequest3 = new RemoteCacheRequest<String, String>();
      RemoteRequestType remoteRequestType0 = RemoteRequestType.REMOVE;
      remoteCacheRequest3.setRequestType(remoteRequestType0);
      remoteCacheRequest3.getKey();
      RemoteRequestType remoteRequestType1 = remoteCacheRequest3.getRequestType();
      assertEquals(RemoteRequestType.REMOVE, remoteRequestType1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RemoteCacheRequest<Object, String> remoteCacheRequest0 = new RemoteCacheRequest<Object, String>();
      remoteCacheRequest0.getRequestType();
      remoteCacheRequest0.setRequesterId((-1L));
      RemoteCacheRequest<Integer, String> remoteCacheRequest1 = new RemoteCacheRequest<Integer, String>();
      remoteCacheRequest1.getRequesterId();
      long long0 = remoteCacheRequest0.getRequesterId();
      assertEquals((-1L), long0);
      
      RemoteCacheRequest<String, Object> remoteCacheRequest2 = new RemoteCacheRequest<String, Object>();
      remoteCacheRequest2.setKeySet((Set<String>) null);
      Integer integer0 = new Integer(1);
      remoteCacheRequest0.setKey(integer0);
      assertEquals((-1L), remoteCacheRequest0.getRequesterId());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RemoteCacheRequest<Object, Object> remoteCacheRequest0 = new RemoteCacheRequest<Object, Object>();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      remoteCacheRequest0.setKeySet(linkedHashSet0);
      remoteCacheRequest0.setCacheName("");
      remoteCacheRequest0.setKey("");
      remoteCacheRequest0.setPattern("");
      String string0 = remoteCacheRequest0.toString();
      remoteCacheRequest0.getKeySet();
      String string1 = remoteCacheRequest0.getCacheName();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RemoteCacheRequest<Object, Integer> remoteCacheRequest0 = new RemoteCacheRequest<Object, Integer>();
      remoteCacheRequest0.setCacheName("fkFV{? g5i");
      RemoteCacheRequest<Integer, Integer> remoteCacheRequest1 = new RemoteCacheRequest<Integer, Integer>();
      remoteCacheRequest1.setCacheName((String) null);
      remoteCacheRequest1.setCacheName("0lpxYkz~KIhtlLmod\"6");
      remoteCacheRequest0.getRequesterId();
      RemoteCacheRequest<String, Integer> remoteCacheRequest2 = new RemoteCacheRequest<String, Integer>();
      remoteCacheRequest2.getCacheName();
      remoteCacheRequest0.getCacheName();
      RemoteCacheRequest<Object, Object> remoteCacheRequest3 = new RemoteCacheRequest<Object, Object>();
      remoteCacheRequest3.setPattern("");
      assertNull(remoteCacheRequest3.getCacheName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RemoteCacheRequest<String, String> remoteCacheRequest0 = new RemoteCacheRequest<String, String>();
      remoteCacheRequest0.toString();
      remoteCacheRequest0.setRequesterId((-3155L));
      remoteCacheRequest0.getPattern();
      RemoteCacheRequest<Integer, Object> remoteCacheRequest1 = new RemoteCacheRequest<Integer, Object>();
      remoteCacheRequest1.setRequesterId(1906L);
      remoteCacheRequest1.getCacheElement();
      RemoteCacheRequest<String, Object> remoteCacheRequest2 = new RemoteCacheRequest<String, Object>();
      Integer integer0 = new Integer(2350);
      CacheElement<String, Object> cacheElement0 = new CacheElement<String, Object>("\nRemoteHttpCacheRequest\n requesterId [0]\n requestType [null]\n cacheName [null]\n key [null]\n keySet [null]\n pattern [null]\n cacheElement [null]", (String) null, integer0);
      cacheElement0.equals((Object) null);
      cacheElement0.toString();
      cacheElement0.getElementAttributes();
      remoteCacheRequest2.setCacheElement(cacheElement0);
      remoteCacheRequest2.setRequesterId((-2349L));
      remoteCacheRequest2.getCacheName();
      remoteCacheRequest2.getCacheElement();
      assertEquals((-2349L), remoteCacheRequest2.getRequesterId());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RemoteCacheRequest<Object, Integer> remoteCacheRequest0 = new RemoteCacheRequest<Object, Integer>();
      remoteCacheRequest0.getKeySet();
      RemoteCacheRequest<String, Object> remoteCacheRequest1 = new RemoteCacheRequest<String, Object>();
      remoteCacheRequest1.getKey();
      remoteCacheRequest1.toString();
      remoteCacheRequest1.setPattern("J@O,B*|-$?x0^HP@");
      remoteCacheRequest0.setKeySet((Set<Object>) null);
      assertEquals(0L, remoteCacheRequest0.getRequesterId());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RemoteCacheRequest<String, Object> remoteCacheRequest0 = new RemoteCacheRequest<String, Object>();
      remoteCacheRequest0.getKeySet();
      RemoteCacheRequest<Object, Object> remoteCacheRequest1 = new RemoteCacheRequest<Object, Object>();
      String string0 = remoteCacheRequest1.getCacheName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RemoteCacheRequest<String, Integer> remoteCacheRequest0 = new RemoteCacheRequest<String, Integer>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      remoteCacheRequest0.setKeySet(linkedHashSet0);
      remoteCacheRequest0.setKeySet((Set<String>) null);
      remoteCacheRequest0.getRequestType();
      RemoteCacheRequest<String, String> remoteCacheRequest1 = new RemoteCacheRequest<String, String>();
      remoteCacheRequest1.setCacheName("z&");
      remoteCacheRequest1.setRequesterId(1998L);
      RemoteCacheRequest<Object, Object> remoteCacheRequest2 = new RemoteCacheRequest<Object, Object>();
      remoteCacheRequest2.getCacheElement();
      RemoteCacheRequest<Object, String> remoteCacheRequest3 = new RemoteCacheRequest<Object, String>();
      remoteCacheRequest3.toString();
      remoteCacheRequest2.toString();
      Integer integer0 = new Integer(0);
      remoteCacheRequest3.setKey(integer0);
      remoteCacheRequest2.getRequestType();
      remoteCacheRequest3.getKey();
      RemoteCacheRequest<String, Object> remoteCacheRequest4 = new RemoteCacheRequest<String, Object>();
      remoteCacheRequest4.getRequestType();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RemoteCacheRequest<Integer, String> remoteCacheRequest0 = new RemoteCacheRequest<Integer, String>();
      remoteCacheRequest0.getPattern();
      RemoteCacheRequest<String, Object> remoteCacheRequest1 = new RemoteCacheRequest<String, Object>();
      long long0 = remoteCacheRequest1.getRequesterId();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RemoteCacheRequest<Object, String> remoteCacheRequest0 = new RemoteCacheRequest<Object, String>();
      remoteCacheRequest0.setRequesterId((-2689L));
      assertEquals((-2689L), remoteCacheRequest0.getRequesterId());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RemoteCacheRequest<Object, Object> remoteCacheRequest0 = new RemoteCacheRequest<Object, Object>();
      CacheElement<Object, Object> cacheElement0 = new CacheElement<Object, Object>(", createTime = ", remoteCacheRequest0, ", createTime = ");
      remoteCacheRequest0.setCacheElement(cacheElement0);
      assertNull(remoteCacheRequest0.getPattern());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RemoteCacheRequest<Integer, String> remoteCacheRequest0 = new RemoteCacheRequest<Integer, String>();
      RemoteRequestType remoteRequestType0 = RemoteRequestType.DISPOSE;
      remoteCacheRequest0.setRequestType(remoteRequestType0);
      String string0 = remoteCacheRequest0.toString();
      assertEquals("\nRemoteHttpCacheRequest\n requesterId [0]\n requestType [DISPOSE]\n cacheName [null]\n key [null]\n keySet [null]\n pattern [null]\n cacheElement [null]", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RemoteCacheRequest<String, String> remoteCacheRequest0 = new RemoteCacheRequest<String, String>();
      remoteCacheRequest0.setPattern("");
      assertEquals("", remoteCacheRequest0.getPattern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RemoteCacheRequest<Integer, Object> remoteCacheRequest0 = new RemoteCacheRequest<Integer, Object>();
      Integer integer0 = remoteCacheRequest0.getKey();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RemoteCacheRequest<Object, Object> remoteCacheRequest0 = new RemoteCacheRequest<Object, Object>();
      Integer integer0 = new Integer(6);
      remoteCacheRequest0.setKey(integer0);
      assertNull(remoteCacheRequest0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RemoteCacheRequest<Object, String> remoteCacheRequest0 = new RemoteCacheRequest<Object, String>();
      remoteCacheRequest0.setCacheName("\n requesterId [");
      assertNull(remoteCacheRequest0.getRequestType());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RemoteCacheRequest<Object, Integer> remoteCacheRequest0 = new RemoteCacheRequest<Object, Integer>();
      Object object0 = new Object();
      remoteCacheRequest0.setKey(object0);
      RemoteRequestType remoteRequestType0 = RemoteRequestType.GET;
      RemoteCacheRequest<Object, Object> remoteCacheRequest1 = new RemoteCacheRequest<Object, Object>();
      remoteCacheRequest1.toString();
      remoteCacheRequest1.getRequestType();
      remoteCacheRequest1.getRequesterId();
      remoteCacheRequest1.toString();
      RemoteCacheRequest<String, String> remoteCacheRequest2 = new RemoteCacheRequest<String, String>();
      RemoteRequestType remoteRequestType1 = RemoteRequestType.UPDATE;
      remoteCacheRequest2.setRequestType(remoteRequestType1);
      remoteCacheRequest2.toString();
      remoteCacheRequest1.setRequesterId((-4646L));
      remoteCacheRequest2.setPattern((String) null);
      remoteCacheRequest2.setPattern("\nRemoteHttpCacheRequest\n requesterId [0]\n requestType [null]\n cacheName [null]\n key [null]\n keySet [null]\n pattern [null]\n cacheElement [null]");
      remoteCacheRequest0.setCacheName("");
      RemoteCacheRequest<String, Object> remoteCacheRequest3 = new RemoteCacheRequest<String, Object>();
      CacheElement<String, Object> cacheElement0 = new CacheElement<String, Object>((String) null, "{T>fDu+@'o", "\nRemoteHttpCacheRequest\n requesterId [0]\n requestType [null]\n cacheName [null]\n key [null]\n keySet [null]\n pattern [null]\n cacheElement [null]");
      remoteCacheRequest3.setCacheElement(cacheElement0);
      remoteCacheRequest3.setCacheName("");
      remoteCacheRequest1.setKey(remoteRequestType0);
      RemoteCacheRequest<Integer, String> remoteCacheRequest4 = new RemoteCacheRequest<Integer, String>();
      remoteCacheRequest4.getKeySet();
      remoteCacheRequest3.getCacheElement();
      RemoteCacheRequest<Object, String> remoteCacheRequest5 = new RemoteCacheRequest<Object, String>();
      remoteCacheRequest5.getRequestType();
      remoteCacheRequest1.setPattern("j;-A @MOfiFfrs");
      assertEquals((-4646L), remoteCacheRequest1.getRequesterId());
      
      String string0 = remoteCacheRequest4.toString();
      assertEquals("\nRemoteHttpCacheRequest\n requesterId [0]\n requestType [null]\n cacheName [null]\n key [null]\n keySet [null]\n pattern [null]\n cacheElement [null]", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RemoteCacheRequest<String, String> remoteCacheRequest0 = new RemoteCacheRequest<String, String>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      remoteCacheRequest0.setKeySet(linkedHashSet0);
      RemoteCacheRequest<Integer, Object> remoteCacheRequest1 = new RemoteCacheRequest<Integer, Object>();
      RemoteRequestType remoteRequestType0 = RemoteRequestType.GET_MULTIPLE;
      remoteCacheRequest1.setRequestType(remoteRequestType0);
      assertNull(remoteCacheRequest1.getPattern());
  }
}
