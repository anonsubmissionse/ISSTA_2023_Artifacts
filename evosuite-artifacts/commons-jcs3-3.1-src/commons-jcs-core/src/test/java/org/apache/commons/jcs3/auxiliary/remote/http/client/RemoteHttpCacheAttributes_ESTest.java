/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 22:05:34 GMT 2022
 */

package org.apache.commons.jcs3.auxiliary.remote.http.client;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.jcs3.auxiliary.remote.http.client.RemoteHttpCacheAttributes;
import org.apache.commons.jcs3.auxiliary.remote.server.behavior.RemoteType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RemoteHttpCacheAttributes_ESTest extends RemoteHttpCacheAttributes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RemoteHttpCacheAttributes remoteHttpCacheAttributes0 = new RemoteHttpCacheAttributes();
      assertEquals(100, remoteHttpCacheAttributes0.getMaxConnectionsPerHost());
      assertEquals((-1), remoteHttpCacheAttributes0.getGetTimeoutMillis());
      assertNull(remoteHttpCacheAttributes0.getCacheName());
      assertTrue(remoteHttpCacheAttributes0.isIncludeKeysAndPatternsAsParameter());
      assertNull(remoteHttpCacheAttributes0.getEventQueuePoolName());
      assertNull(remoteHttpCacheAttributes0.getEventQueueType());
      assertEquals(0, remoteHttpCacheAttributes0.getFailoverIndex());
      assertTrue(remoteHttpCacheAttributes0.isIncludeRequestTypeasAsParameter());
      assertFalse(remoteHttpCacheAttributes0.isLocalClusterConsistency());
      assertEquals("org.apache.commons.jcs3.engine.behavior.ICacheServiceNonLocal", remoteHttpCacheAttributes0.getRemoteServiceName());
      assertTrue(remoteHttpCacheAttributes0.getRemoveUponRemotePut());
      assertEquals(0, remoteHttpCacheAttributes0.getLocalPort());
      assertTrue(remoteHttpCacheAttributes0.isIncludeCacheNameAsParameter());
      assertEquals("", remoteHttpCacheAttributes0.getClusterServers());
      assertEquals("", remoteHttpCacheAttributes0.getFailoverServers());
      assertFalse(remoteHttpCacheAttributes0.getGetOnly());
      assertTrue(remoteHttpCacheAttributes0.isReceive());
      assertEquals("remote_cache_client", remoteHttpCacheAttributes0.getThreadPoolName());
      assertEquals(1000, remoteHttpCacheAttributes0.getZombieQueueMaxSize());
      assertEquals(5000, remoteHttpCacheAttributes0.getConnectionTimeoutMillis());
      assertEquals("1.1", remoteHttpCacheAttributes0.getHttpVersion());
      assertNull(remoteHttpCacheAttributes0.getName());
      assertEquals(3000, remoteHttpCacheAttributes0.getSocketTimeoutMillis());
      assertNull(remoteHttpCacheAttributes0.getUrl());
      assertEquals(RemoteType.LOCAL, remoteHttpCacheAttributes0.getRemoteType());
      assertEquals("org.apache.commons.jcs3.auxiliary.remote.http.client.RemoteHttpCacheClient", remoteHttpCacheAttributes0.getRemoteHttpClientClassName());
      assertEquals(10000, remoteHttpCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
      assertNotNull(remoteHttpCacheAttributes0);
      
      remoteHttpCacheAttributes0.setIncludeRequestTypeasAsParameter(false);
      assertEquals(100, remoteHttpCacheAttributes0.getMaxConnectionsPerHost());
      assertEquals((-1), remoteHttpCacheAttributes0.getGetTimeoutMillis());
      assertNull(remoteHttpCacheAttributes0.getCacheName());
      assertTrue(remoteHttpCacheAttributes0.isIncludeKeysAndPatternsAsParameter());
      assertNull(remoteHttpCacheAttributes0.getEventQueuePoolName());
      assertNull(remoteHttpCacheAttributes0.getEventQueueType());
      assertEquals(0, remoteHttpCacheAttributes0.getFailoverIndex());
      assertFalse(remoteHttpCacheAttributes0.isLocalClusterConsistency());
      assertEquals("org.apache.commons.jcs3.engine.behavior.ICacheServiceNonLocal", remoteHttpCacheAttributes0.getRemoteServiceName());
      assertFalse(remoteHttpCacheAttributes0.isIncludeRequestTypeasAsParameter());
      assertTrue(remoteHttpCacheAttributes0.getRemoveUponRemotePut());
      assertEquals(0, remoteHttpCacheAttributes0.getLocalPort());
      assertTrue(remoteHttpCacheAttributes0.isIncludeCacheNameAsParameter());
      assertEquals("", remoteHttpCacheAttributes0.getClusterServers());
      assertEquals("", remoteHttpCacheAttributes0.getFailoverServers());
      assertFalse(remoteHttpCacheAttributes0.getGetOnly());
      assertTrue(remoteHttpCacheAttributes0.isReceive());
      assertEquals("remote_cache_client", remoteHttpCacheAttributes0.getThreadPoolName());
      assertEquals(1000, remoteHttpCacheAttributes0.getZombieQueueMaxSize());
      assertEquals(5000, remoteHttpCacheAttributes0.getConnectionTimeoutMillis());
      assertEquals("1.1", remoteHttpCacheAttributes0.getHttpVersion());
      assertNull(remoteHttpCacheAttributes0.getName());
      assertEquals(3000, remoteHttpCacheAttributes0.getSocketTimeoutMillis());
      assertNull(remoteHttpCacheAttributes0.getUrl());
      assertEquals(RemoteType.LOCAL, remoteHttpCacheAttributes0.getRemoteType());
      assertEquals("org.apache.commons.jcs3.auxiliary.remote.http.client.RemoteHttpCacheClient", remoteHttpCacheAttributes0.getRemoteHttpClientClassName());
      assertEquals(10000, remoteHttpCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
      
      boolean boolean0 = remoteHttpCacheAttributes0.isIncludeRequestTypeasAsParameter();
      assertEquals(100, remoteHttpCacheAttributes0.getMaxConnectionsPerHost());
      assertEquals((-1), remoteHttpCacheAttributes0.getGetTimeoutMillis());
      assertNull(remoteHttpCacheAttributes0.getCacheName());
      assertTrue(remoteHttpCacheAttributes0.isIncludeKeysAndPatternsAsParameter());
      assertNull(remoteHttpCacheAttributes0.getEventQueuePoolName());
      assertNull(remoteHttpCacheAttributes0.getEventQueueType());
      assertEquals(0, remoteHttpCacheAttributes0.getFailoverIndex());
      assertFalse(remoteHttpCacheAttributes0.isLocalClusterConsistency());
      assertEquals("org.apache.commons.jcs3.engine.behavior.ICacheServiceNonLocal", remoteHttpCacheAttributes0.getRemoteServiceName());
      assertFalse(remoteHttpCacheAttributes0.isIncludeRequestTypeasAsParameter());
      assertTrue(remoteHttpCacheAttributes0.getRemoveUponRemotePut());
      assertEquals(0, remoteHttpCacheAttributes0.getLocalPort());
      assertTrue(remoteHttpCacheAttributes0.isIncludeCacheNameAsParameter());
      assertEquals("", remoteHttpCacheAttributes0.getClusterServers());
      assertEquals("", remoteHttpCacheAttributes0.getFailoverServers());
      assertFalse(remoteHttpCacheAttributes0.getGetOnly());
      assertTrue(remoteHttpCacheAttributes0.isReceive());
      assertEquals("remote_cache_client", remoteHttpCacheAttributes0.getThreadPoolName());
      assertEquals(1000, remoteHttpCacheAttributes0.getZombieQueueMaxSize());
      assertEquals(5000, remoteHttpCacheAttributes0.getConnectionTimeoutMillis());
      assertEquals("1.1", remoteHttpCacheAttributes0.getHttpVersion());
      assertNull(remoteHttpCacheAttributes0.getName());
      assertEquals(3000, remoteHttpCacheAttributes0.getSocketTimeoutMillis());
      assertNull(remoteHttpCacheAttributes0.getUrl());
      assertEquals(RemoteType.LOCAL, remoteHttpCacheAttributes0.getRemoteType());
      assertEquals("org.apache.commons.jcs3.auxiliary.remote.http.client.RemoteHttpCacheClient", remoteHttpCacheAttributes0.getRemoteHttpClientClassName());
      assertEquals(10000, remoteHttpCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RemoteHttpCacheAttributes remoteHttpCacheAttributes0 = new RemoteHttpCacheAttributes();
      assertNull(remoteHttpCacheAttributes0.getUrl());
      assertEquals(1000, remoteHttpCacheAttributes0.getZombieQueueMaxSize());
      assertEquals("1.1", remoteHttpCacheAttributes0.getHttpVersion());
      assertEquals(3000, remoteHttpCacheAttributes0.getSocketTimeoutMillis());
      assertFalse(remoteHttpCacheAttributes0.getGetOnly());
      assertTrue(remoteHttpCacheAttributes0.isReceive());
      assertEquals("", remoteHttpCacheAttributes0.getFailoverServers());
      assertNull(remoteHttpCacheAttributes0.getEventQueuePoolName());
      assertEquals("remote_cache_client", remoteHttpCacheAttributes0.getThreadPoolName());
      assertEquals("org.apache.commons.jcs3.engine.behavior.ICacheServiceNonLocal", remoteHttpCacheAttributes0.getRemoteServiceName());
      assertTrue(remoteHttpCacheAttributes0.getRemoveUponRemotePut());
      assertEquals(5000, remoteHttpCacheAttributes0.getConnectionTimeoutMillis());
      assertNull(remoteHttpCacheAttributes0.getCacheName());
      assertFalse(remoteHttpCacheAttributes0.isLocalClusterConsistency());
      assertEquals("", remoteHttpCacheAttributes0.getClusterServers());
      assertTrue(remoteHttpCacheAttributes0.isIncludeCacheNameAsParameter());
      assertEquals(100, remoteHttpCacheAttributes0.getMaxConnectionsPerHost());
      assertTrue(remoteHttpCacheAttributes0.isIncludeKeysAndPatternsAsParameter());
      assertEquals(0, remoteHttpCacheAttributes0.getLocalPort());
      assertNull(remoteHttpCacheAttributes0.getEventQueueType());
      assertTrue(remoteHttpCacheAttributes0.isIncludeRequestTypeasAsParameter());
      assertEquals(10000, remoteHttpCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
      assertEquals(RemoteType.LOCAL, remoteHttpCacheAttributes0.getRemoteType());
      assertEquals("org.apache.commons.jcs3.auxiliary.remote.http.client.RemoteHttpCacheClient", remoteHttpCacheAttributes0.getRemoteHttpClientClassName());
      assertEquals(0, remoteHttpCacheAttributes0.getFailoverIndex());
      assertEquals((-1), remoteHttpCacheAttributes0.getGetTimeoutMillis());
      assertNull(remoteHttpCacheAttributes0.getName());
      assertNotNull(remoteHttpCacheAttributes0);
      
      remoteHttpCacheAttributes0.setIncludeKeysAndPatternsAsParameter(false);
      assertNull(remoteHttpCacheAttributes0.getUrl());
      assertEquals(1000, remoteHttpCacheAttributes0.getZombieQueueMaxSize());
      assertEquals("1.1", remoteHttpCacheAttributes0.getHttpVersion());
      assertEquals(3000, remoteHttpCacheAttributes0.getSocketTimeoutMillis());
      assertFalse(remoteHttpCacheAttributes0.getGetOnly());
      assertTrue(remoteHttpCacheAttributes0.isReceive());
      assertEquals("", remoteHttpCacheAttributes0.getFailoverServers());
      assertNull(remoteHttpCacheAttributes0.getEventQueuePoolName());
      assertEquals("remote_cache_client", remoteHttpCacheAttributes0.getThreadPoolName());
      assertEquals("org.apache.commons.jcs3.engine.behavior.ICacheServiceNonLocal", remoteHttpCacheAttributes0.getRemoteServiceName());
      assertTrue(remoteHttpCacheAttributes0.getRemoveUponRemotePut());
      assertEquals(5000, remoteHttpCacheAttributes0.getConnectionTimeoutMillis());
      assertNull(remoteHttpCacheAttributes0.getCacheName());
      assertFalse(remoteHttpCacheAttributes0.isLocalClusterConsistency());
      assertEquals("", remoteHttpCacheAttributes0.getClusterServers());
      assertTrue(remoteHttpCacheAttributes0.isIncludeCacheNameAsParameter());
      assertEquals(100, remoteHttpCacheAttributes0.getMaxConnectionsPerHost());
      assertEquals(0, remoteHttpCacheAttributes0.getLocalPort());
      assertFalse(remoteHttpCacheAttributes0.isIncludeKeysAndPatternsAsParameter());
      assertNull(remoteHttpCacheAttributes0.getEventQueueType());
      assertTrue(remoteHttpCacheAttributes0.isIncludeRequestTypeasAsParameter());
      assertEquals(10000, remoteHttpCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
      assertEquals(RemoteType.LOCAL, remoteHttpCacheAttributes0.getRemoteType());
      assertEquals("org.apache.commons.jcs3.auxiliary.remote.http.client.RemoteHttpCacheClient", remoteHttpCacheAttributes0.getRemoteHttpClientClassName());
      assertEquals(0, remoteHttpCacheAttributes0.getFailoverIndex());
      assertEquals((-1), remoteHttpCacheAttributes0.getGetTimeoutMillis());
      assertNull(remoteHttpCacheAttributes0.getName());
      
      boolean boolean0 = remoteHttpCacheAttributes0.isIncludeKeysAndPatternsAsParameter();
      assertNull(remoteHttpCacheAttributes0.getUrl());
      assertEquals(1000, remoteHttpCacheAttributes0.getZombieQueueMaxSize());
      assertEquals("1.1", remoteHttpCacheAttributes0.getHttpVersion());
      assertEquals(3000, remoteHttpCacheAttributes0.getSocketTimeoutMillis());
      assertFalse(remoteHttpCacheAttributes0.getGetOnly());
      assertTrue(remoteHttpCacheAttributes0.isReceive());
      assertEquals("", remoteHttpCacheAttributes0.getFailoverServers());
      assertNull(remoteHttpCacheAttributes0.getEventQueuePoolName());
      assertEquals("remote_cache_client", remoteHttpCacheAttributes0.getThreadPoolName());
      assertEquals("org.apache.commons.jcs3.engine.behavior.ICacheServiceNonLocal", remoteHttpCacheAttributes0.getRemoteServiceName());
      assertTrue(remoteHttpCacheAttributes0.getRemoveUponRemotePut());
      assertEquals(5000, remoteHttpCacheAttributes0.getConnectionTimeoutMillis());
      assertNull(remoteHttpCacheAttributes0.getCacheName());
      assertFalse(remoteHttpCacheAttributes0.isLocalClusterConsistency());
      assertEquals("", remoteHttpCacheAttributes0.getClusterServers());
      assertTrue(remoteHttpCacheAttributes0.isIncludeCacheNameAsParameter());
      assertEquals(100, remoteHttpCacheAttributes0.getMaxConnectionsPerHost());
      assertEquals(0, remoteHttpCacheAttributes0.getLocalPort());
      assertFalse(remoteHttpCacheAttributes0.isIncludeKeysAndPatternsAsParameter());
      assertNull(remoteHttpCacheAttributes0.getEventQueueType());
      assertTrue(remoteHttpCacheAttributes0.isIncludeRequestTypeasAsParameter());
      assertEquals(10000, remoteHttpCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
      assertEquals(RemoteType.LOCAL, remoteHttpCacheAttributes0.getRemoteType());
      assertEquals("org.apache.commons.jcs3.auxiliary.remote.http.client.RemoteHttpCacheClient", remoteHttpCacheAttributes0.getRemoteHttpClientClassName());
      assertEquals(0, remoteHttpCacheAttributes0.getFailoverIndex());
      assertEquals((-1), remoteHttpCacheAttributes0.getGetTimeoutMillis());
      assertNull(remoteHttpCacheAttributes0.getName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RemoteHttpCacheAttributes remoteHttpCacheAttributes0 = new RemoteHttpCacheAttributes();
      assertEquals(100, remoteHttpCacheAttributes0.getMaxConnectionsPerHost());
      assertEquals((-1), remoteHttpCacheAttributes0.getGetTimeoutMillis());
      assertTrue(remoteHttpCacheAttributes0.isIncludeRequestTypeasAsParameter());
      assertTrue(remoteHttpCacheAttributes0.isIncludeKeysAndPatternsAsParameter());
      assertEquals(0, remoteHttpCacheAttributes0.getLocalPort());
      assertTrue(remoteHttpCacheAttributes0.isIncludeCacheNameAsParameter());
      assertNull(remoteHttpCacheAttributes0.getEventQueuePoolName());
      assertTrue(remoteHttpCacheAttributes0.getRemoveUponRemotePut());
      assertNull(remoteHttpCacheAttributes0.getCacheName());
      assertEquals("org.apache.commons.jcs3.engine.behavior.ICacheServiceNonLocal", remoteHttpCacheAttributes0.getRemoteServiceName());
      assertFalse(remoteHttpCacheAttributes0.isLocalClusterConsistency());
      assertEquals("", remoteHttpCacheAttributes0.getClusterServers());
      assertFalse(remoteHttpCacheAttributes0.getGetOnly());
      assertEquals("", remoteHttpCacheAttributes0.getFailoverServers());
      assertEquals("1.1", remoteHttpCacheAttributes0.getHttpVersion());
      assertEquals("remote_cache_client", remoteHttpCacheAttributes0.getThreadPoolName());
      assertTrue(remoteHttpCacheAttributes0.isReceive());
      assertEquals(5000, remoteHttpCacheAttributes0.getConnectionTimeoutMillis());
      assertEquals(3000, remoteHttpCacheAttributes0.getSocketTimeoutMillis());
      assertEquals(1000, remoteHttpCacheAttributes0.getZombieQueueMaxSize());
      assertNull(remoteHttpCacheAttributes0.getName());
      assertEquals(10000, remoteHttpCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
      assertNull(remoteHttpCacheAttributes0.getEventQueueType());
      assertEquals(0, remoteHttpCacheAttributes0.getFailoverIndex());
      assertNull(remoteHttpCacheAttributes0.getUrl());
      assertEquals("org.apache.commons.jcs3.auxiliary.remote.http.client.RemoteHttpCacheClient", remoteHttpCacheAttributes0.getRemoteHttpClientClassName());
      assertEquals(RemoteType.LOCAL, remoteHttpCacheAttributes0.getRemoteType());
      assertNotNull(remoteHttpCacheAttributes0);
      
      remoteHttpCacheAttributes0.setIncludeCacheNameAsParameter(false);
      assertEquals(100, remoteHttpCacheAttributes0.getMaxConnectionsPerHost());
      assertEquals((-1), remoteHttpCacheAttributes0.getGetTimeoutMillis());
      assertTrue(remoteHttpCacheAttributes0.isIncludeRequestTypeasAsParameter());
      assertTrue(remoteHttpCacheAttributes0.isIncludeKeysAndPatternsAsParameter());
      assertEquals(0, remoteHttpCacheAttributes0.getLocalPort());
      assertNull(remoteHttpCacheAttributes0.getEventQueuePoolName());
      assertTrue(remoteHttpCacheAttributes0.getRemoveUponRemotePut());
      assertNull(remoteHttpCacheAttributes0.getCacheName());
      assertEquals("org.apache.commons.jcs3.engine.behavior.ICacheServiceNonLocal", remoteHttpCacheAttributes0.getRemoteServiceName());
      assertFalse(remoteHttpCacheAttributes0.isIncludeCacheNameAsParameter());
      assertFalse(remoteHttpCacheAttributes0.isLocalClusterConsistency());
      assertEquals("", remoteHttpCacheAttributes0.getClusterServers());
      assertFalse(remoteHttpCacheAttributes0.getGetOnly());
      assertEquals("", remoteHttpCacheAttributes0.getFailoverServers());
      assertEquals("1.1", remoteHttpCacheAttributes0.getHttpVersion());
      assertEquals("remote_cache_client", remoteHttpCacheAttributes0.getThreadPoolName());
      assertTrue(remoteHttpCacheAttributes0.isReceive());
      assertEquals(5000, remoteHttpCacheAttributes0.getConnectionTimeoutMillis());
      assertEquals(3000, remoteHttpCacheAttributes0.getSocketTimeoutMillis());
      assertEquals(1000, remoteHttpCacheAttributes0.getZombieQueueMaxSize());
      assertNull(remoteHttpCacheAttributes0.getName());
      assertEquals(10000, remoteHttpCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
      assertNull(remoteHttpCacheAttributes0.getEventQueueType());
      assertEquals(0, remoteHttpCacheAttributes0.getFailoverIndex());
      assertNull(remoteHttpCacheAttributes0.getUrl());
      assertEquals("org.apache.commons.jcs3.auxiliary.remote.http.client.RemoteHttpCacheClient", remoteHttpCacheAttributes0.getRemoteHttpClientClassName());
      assertEquals(RemoteType.LOCAL, remoteHttpCacheAttributes0.getRemoteType());
      
      boolean boolean0 = remoteHttpCacheAttributes0.isIncludeCacheNameAsParameter();
      assertEquals(100, remoteHttpCacheAttributes0.getMaxConnectionsPerHost());
      assertEquals((-1), remoteHttpCacheAttributes0.getGetTimeoutMillis());
      assertTrue(remoteHttpCacheAttributes0.isIncludeRequestTypeasAsParameter());
      assertTrue(remoteHttpCacheAttributes0.isIncludeKeysAndPatternsAsParameter());
      assertEquals(0, remoteHttpCacheAttributes0.getLocalPort());
      assertNull(remoteHttpCacheAttributes0.getEventQueuePoolName());
      assertTrue(remoteHttpCacheAttributes0.getRemoveUponRemotePut());
      assertNull(remoteHttpCacheAttributes0.getCacheName());
      assertEquals("org.apache.commons.jcs3.engine.behavior.ICacheServiceNonLocal", remoteHttpCacheAttributes0.getRemoteServiceName());
      assertFalse(remoteHttpCacheAttributes0.isIncludeCacheNameAsParameter());
      assertFalse(remoteHttpCacheAttributes0.isLocalClusterConsistency());
      assertEquals("", remoteHttpCacheAttributes0.getClusterServers());
      assertFalse(remoteHttpCacheAttributes0.getGetOnly());
      assertEquals("", remoteHttpCacheAttributes0.getFailoverServers());
      assertEquals("1.1", remoteHttpCacheAttributes0.getHttpVersion());
      assertEquals("remote_cache_client", remoteHttpCacheAttributes0.getThreadPoolName());
      assertTrue(remoteHttpCacheAttributes0.isReceive());
      assertEquals(5000, remoteHttpCacheAttributes0.getConnectionTimeoutMillis());
      assertEquals(3000, remoteHttpCacheAttributes0.getSocketTimeoutMillis());
      assertEquals(1000, remoteHttpCacheAttributes0.getZombieQueueMaxSize());
      assertNull(remoteHttpCacheAttributes0.getName());
      assertEquals(10000, remoteHttpCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
      assertNull(remoteHttpCacheAttributes0.getEventQueueType());
      assertEquals(0, remoteHttpCacheAttributes0.getFailoverIndex());
      assertNull(remoteHttpCacheAttributes0.getUrl());
      assertEquals("org.apache.commons.jcs3.auxiliary.remote.http.client.RemoteHttpCacheClient", remoteHttpCacheAttributes0.getRemoteHttpClientClassName());
      assertEquals(RemoteType.LOCAL, remoteHttpCacheAttributes0.getRemoteType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RemoteHttpCacheAttributes remoteHttpCacheAttributes0 = new RemoteHttpCacheAttributes();
      assertNull(remoteHttpCacheAttributes0.getUrl());
      assertNull(remoteHttpCacheAttributes0.getName());
      assertEquals("1.1", remoteHttpCacheAttributes0.getHttpVersion());
      assertEquals("", remoteHttpCacheAttributes0.getClusterServers());
      assertEquals("org.apache.commons.jcs3.auxiliary.remote.http.client.RemoteHttpCacheClient", remoteHttpCacheAttributes0.getRemoteHttpClientClassName());
      assertFalse(remoteHttpCacheAttributes0.isLocalClusterConsistency());
      assertTrue(remoteHttpCacheAttributes0.getRemoveUponRemotePut());
      assertEquals("org.apache.commons.jcs3.engine.behavior.ICacheServiceNonLocal", remoteHttpCacheAttributes0.getRemoteServiceName());
      assertNull(remoteHttpCacheAttributes0.getEventQueueType());
      assertEquals(0, remoteHttpCacheAttributes0.getLocalPort());
      assertFalse(remoteHttpCacheAttributes0.getGetOnly());
      assertEquals(1000, remoteHttpCacheAttributes0.getZombieQueueMaxSize());
      assertTrue(remoteHttpCacheAttributes0.isIncludeRequestTypeasAsParameter());
      assertEquals(0, remoteHttpCacheAttributes0.getFailoverIndex());
      assertTrue(remoteHttpCacheAttributes0.isIncludeCacheNameAsParameter());
      assertEquals((-1), remoteHttpCacheAttributes0.getGetTimeoutMillis());
      assertNull(remoteHttpCacheAttributes0.getCacheName());
      assertEquals(5000, remoteHttpCacheAttributes0.getConnectionTimeoutMillis());
      assertNull(remoteHttpCacheAttributes0.getEventQueuePoolName());
      assertEquals(RemoteType.LOCAL, remoteHttpCacheAttributes0.getRemoteType());
      assertEquals(100, remoteHttpCacheAttributes0.getMaxConnectionsPerHost());
      assertEquals(10000, remoteHttpCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
      assertTrue(remoteHttpCacheAttributes0.isReceive());
      assertEquals("", remoteHttpCacheAttributes0.getFailoverServers());
      assertEquals(3000, remoteHttpCacheAttributes0.getSocketTimeoutMillis());
      assertTrue(remoteHttpCacheAttributes0.isIncludeKeysAndPatternsAsParameter());
      assertEquals("remote_cache_client", remoteHttpCacheAttributes0.getThreadPoolName());
      assertNotNull(remoteHttpCacheAttributes0);
      
      remoteHttpCacheAttributes0.setUrl(" [.km");
      assertNull(remoteHttpCacheAttributes0.getName());
      assertEquals("1.1", remoteHttpCacheAttributes0.getHttpVersion());
      assertEquals("", remoteHttpCacheAttributes0.getClusterServers());
      assertEquals("org.apache.commons.jcs3.auxiliary.remote.http.client.RemoteHttpCacheClient", remoteHttpCacheAttributes0.getRemoteHttpClientClassName());
      assertEquals(" [.km", remoteHttpCacheAttributes0.getUrl());
      assertFalse(remoteHttpCacheAttributes0.isLocalClusterConsistency());
      assertTrue(remoteHttpCacheAttributes0.getRemoveUponRemotePut());
      assertEquals("org.apache.commons.jcs3.engine.behavior.ICacheServiceNonLocal", remoteHttpCacheAttributes0.getRemoteServiceName());
      assertNull(remoteHttpCacheAttributes0.getEventQueueType());
      assertEquals(0, remoteHttpCacheAttributes0.getLocalPort());
      assertFalse(remoteHttpCacheAttributes0.getGetOnly());
      assertEquals(1000, remoteHttpCacheAttributes0.getZombieQueueMaxSize());
      assertTrue(remoteHttpCacheAttributes0.isIncludeRequestTypeasAsParameter());
      assertEquals(0, remoteHttpCacheAttributes0.getFailoverIndex());
      assertTrue(remoteHttpCacheAttributes0.isIncludeCacheNameAsParameter());
      assertEquals((-1), remoteHttpCacheAttributes0.getGetTimeoutMillis());
      assertNull(remoteHttpCacheAttributes0.getCacheName());
      assertEquals(5000, remoteHttpCacheAttributes0.getConnectionTimeoutMillis());
      assertNull(remoteHttpCacheAttributes0.getEventQueuePoolName());
      assertEquals(RemoteType.LOCAL, remoteHttpCacheAttributes0.getRemoteType());
      assertEquals(100, remoteHttpCacheAttributes0.getMaxConnectionsPerHost());
      assertEquals(10000, remoteHttpCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
      assertTrue(remoteHttpCacheAttributes0.isReceive());
      assertEquals("", remoteHttpCacheAttributes0.getFailoverServers());
      assertEquals(3000, remoteHttpCacheAttributes0.getSocketTimeoutMillis());
      assertTrue(remoteHttpCacheAttributes0.isIncludeKeysAndPatternsAsParameter());
      assertEquals("remote_cache_client", remoteHttpCacheAttributes0.getThreadPoolName());
      
      String string0 = remoteHttpCacheAttributes0.getUrl();
      assertNull(remoteHttpCacheAttributes0.getName());
      assertEquals("1.1", remoteHttpCacheAttributes0.getHttpVersion());
      assertEquals("", remoteHttpCacheAttributes0.getClusterServers());
      assertEquals("org.apache.commons.jcs3.auxiliary.remote.http.client.RemoteHttpCacheClient", remoteHttpCacheAttributes0.getRemoteHttpClientClassName());
      assertEquals(" [.km", remoteHttpCacheAttributes0.getUrl());
      assertFalse(remoteHttpCacheAttributes0.isLocalClusterConsistency());
      assertTrue(remoteHttpCacheAttributes0.getRemoveUponRemotePut());
      assertEquals("org.apache.commons.jcs3.engine.behavior.ICacheServiceNonLocal", remoteHttpCacheAttributes0.getRemoteServiceName());
      assertNull(remoteHttpCacheAttributes0.getEventQueueType());
      assertEquals(0, remoteHttpCacheAttributes0.getLocalPort());
      assertFalse(remoteHttpCacheAttributes0.getGetOnly());
      assertEquals(1000, remoteHttpCacheAttributes0.getZombieQueueMaxSize());
      assertTrue(remoteHttpCacheAttributes0.isIncludeRequestTypeasAsParameter());
      assertEquals(0, remoteHttpCacheAttributes0.getFailoverIndex());
      assertTrue(remoteHttpCacheAttributes0.isIncludeCacheNameAsParameter());
      assertEquals((-1), remoteHttpCacheAttributes0.getGetTimeoutMillis());
      assertNull(remoteHttpCacheAttributes0.getCacheName());
      assertEquals(5000, remoteHttpCacheAttributes0.getConnectionTimeoutMillis());
      assertNull(remoteHttpCacheAttributes0.getEventQueuePoolName());
      assertEquals(RemoteType.LOCAL, remoteHttpCacheAttributes0.getRemoteType());
      assertEquals(100, remoteHttpCacheAttributes0.getMaxConnectionsPerHost());
      assertEquals(10000, remoteHttpCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
      assertTrue(remoteHttpCacheAttributes0.isReceive());
      assertEquals("", remoteHttpCacheAttributes0.getFailoverServers());
      assertEquals(3000, remoteHttpCacheAttributes0.getSocketTimeoutMillis());
      assertTrue(remoteHttpCacheAttributes0.isIncludeKeysAndPatternsAsParameter());
      assertEquals("remote_cache_client", remoteHttpCacheAttributes0.getThreadPoolName());
      assertEquals(" [.km", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RemoteHttpCacheAttributes remoteHttpCacheAttributes0 = new RemoteHttpCacheAttributes();
      assertNull(remoteHttpCacheAttributes0.getUrl());
      assertEquals(1000, remoteHttpCacheAttributes0.getZombieQueueMaxSize());
      assertEquals("1.1", remoteHttpCacheAttributes0.getHttpVersion());
      assertEquals("", remoteHttpCacheAttributes0.getClusterServers());
      assertFalse(remoteHttpCacheAttributes0.isLocalClusterConsistency());
      assertNull(remoteHttpCacheAttributes0.getName());
      assertEquals("remote_cache_client", remoteHttpCacheAttributes0.getThreadPoolName());
      assertEquals("org.apache.commons.jcs3.auxiliary.remote.http.client.RemoteHttpCacheClient", remoteHttpCacheAttributes0.getRemoteHttpClientClassName());
      assertEquals(10000, remoteHttpCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
      assertEquals(5000, remoteHttpCacheAttributes0.getConnectionTimeoutMillis());
      assertEquals(RemoteType.LOCAL, remoteHttpCacheAttributes0.getRemoteType());
      assertEquals(100, remoteHttpCacheAttributes0.getMaxConnectionsPerHost());
      assertEquals(3000, remoteHttpCacheAttributes0.getSocketTimeoutMillis());
      assertTrue(remoteHttpCacheAttributes0.isIncludeKeysAndPatternsAsParameter());
      assertTrue(remoteHttpCacheAttributes0.isReceive());
      assertEquals("", remoteHttpCacheAttributes0.getFailoverServers());
      assertTrue(remoteHttpCacheAttributes0.isIncludeCacheNameAsParameter());
      assertNull(remoteHttpCacheAttributes0.getCacheName());
      assertEquals(0, remoteHttpCacheAttributes0.getFailoverIndex());
      assertEquals((-1), remoteHttpCacheAttributes0.getGetTimeoutMillis());
      assertEquals("org.apache.commons.jcs3.engine.behavior.ICacheServiceNonLocal", remoteHttpCacheAttributes0.getRemoteServiceName());
      assertNull(remoteHttpCacheAttributes0.getEventQueuePoolName());
      assertNull(remoteHttpCacheAttributes0.getEventQueueType());
      assertTrue(remoteHttpCacheAttributes0.getRemoveUponRemotePut());
      assertTrue(remoteHttpCacheAttributes0.isIncludeRequestTypeasAsParameter());
      assertEquals(0, remoteHttpCacheAttributes0.getLocalPort());
      assertFalse(remoteHttpCacheAttributes0.getGetOnly());
      assertNotNull(remoteHttpCacheAttributes0);
      
      remoteHttpCacheAttributes0.setUrl("");
      assertEquals("", remoteHttpCacheAttributes0.getUrl());
      assertEquals(1000, remoteHttpCacheAttributes0.getZombieQueueMaxSize());
      assertEquals("1.1", remoteHttpCacheAttributes0.getHttpVersion());
      assertEquals("", remoteHttpCacheAttributes0.getClusterServers());
      assertFalse(remoteHttpCacheAttributes0.isLocalClusterConsistency());
      assertNull(remoteHttpCacheAttributes0.getName());
      assertEquals("remote_cache_client", remoteHttpCacheAttributes0.getThreadPoolName());
      assertEquals("org.apache.commons.jcs3.auxiliary.remote.http.client.RemoteHttpCacheClient", remoteHttpCacheAttributes0.getRemoteHttpClientClassName());
      assertEquals(10000, remoteHttpCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
      assertEquals(5000, remoteHttpCacheAttributes0.getConnectionTimeoutMillis());
      assertEquals(RemoteType.LOCAL, remoteHttpCacheAttributes0.getRemoteType());
      assertEquals(100, remoteHttpCacheAttributes0.getMaxConnectionsPerHost());
      assertEquals(3000, remoteHttpCacheAttributes0.getSocketTimeoutMillis());
      assertTrue(remoteHttpCacheAttributes0.isIncludeKeysAndPatternsAsParameter());
      assertTrue(remoteHttpCacheAttributes0.isReceive());
      assertEquals("", remoteHttpCacheAttributes0.getFailoverServers());
      assertTrue(remoteHttpCacheAttributes0.isIncludeCacheNameAsParameter());
      assertNull(remoteHttpCacheAttributes0.getCacheName());
      assertEquals(0, remoteHttpCacheAttributes0.getFailoverIndex());
      assertEquals((-1), remoteHttpCacheAttributes0.getGetTimeoutMillis());
      assertEquals("org.apache.commons.jcs3.engine.behavior.ICacheServiceNonLocal", remoteHttpCacheAttributes0.getRemoteServiceName());
      assertNull(remoteHttpCacheAttributes0.getEventQueuePoolName());
      assertNull(remoteHttpCacheAttributes0.getEventQueueType());
      assertTrue(remoteHttpCacheAttributes0.getRemoveUponRemotePut());
      assertTrue(remoteHttpCacheAttributes0.isIncludeRequestTypeasAsParameter());
      assertEquals(0, remoteHttpCacheAttributes0.getLocalPort());
      assertFalse(remoteHttpCacheAttributes0.getGetOnly());
      
      String string0 = remoteHttpCacheAttributes0.getUrl();
      assertEquals("", remoteHttpCacheAttributes0.getUrl());
      assertEquals(1000, remoteHttpCacheAttributes0.getZombieQueueMaxSize());
      assertEquals("1.1", remoteHttpCacheAttributes0.getHttpVersion());
      assertEquals("", remoteHttpCacheAttributes0.getClusterServers());
      assertFalse(remoteHttpCacheAttributes0.isLocalClusterConsistency());
      assertNull(remoteHttpCacheAttributes0.getName());
      assertEquals("remote_cache_client", remoteHttpCacheAttributes0.getThreadPoolName());
      assertEquals("org.apache.commons.jcs3.auxiliary.remote.http.client.RemoteHttpCacheClient", remoteHttpCacheAttributes0.getRemoteHttpClientClassName());
      assertEquals(10000, remoteHttpCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
      assertEquals(5000, remoteHttpCacheAttributes0.getConnectionTimeoutMillis());
      assertEquals(RemoteType.LOCAL, remoteHttpCacheAttributes0.getRemoteType());
      assertEquals(100, remoteHttpCacheAttributes0.getMaxConnectionsPerHost());
      assertEquals(3000, remoteHttpCacheAttributes0.getSocketTimeoutMillis());
      assertTrue(remoteHttpCacheAttributes0.isIncludeKeysAndPatternsAsParameter());
      assertTrue(remoteHttpCacheAttributes0.isReceive());
      assertEquals("", remoteHttpCacheAttributes0.getFailoverServers());
      assertTrue(remoteHttpCacheAttributes0.isIncludeCacheNameAsParameter());
      assertNull(remoteHttpCacheAttributes0.getCacheName());
      assertEquals(0, remoteHttpCacheAttributes0.getFailoverIndex());
      assertEquals((-1), remoteHttpCacheAttributes0.getGetTimeoutMillis());
      assertEquals("org.apache.commons.jcs3.engine.behavior.ICacheServiceNonLocal", remoteHttpCacheAttributes0.getRemoteServiceName());
      assertNull(remoteHttpCacheAttributes0.getEventQueuePoolName());
      assertNull(remoteHttpCacheAttributes0.getEventQueueType());
      assertTrue(remoteHttpCacheAttributes0.getRemoveUponRemotePut());
      assertTrue(remoteHttpCacheAttributes0.isIncludeRequestTypeasAsParameter());
      assertEquals(0, remoteHttpCacheAttributes0.getLocalPort());
      assertFalse(remoteHttpCacheAttributes0.getGetOnly());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RemoteHttpCacheAttributes remoteHttpCacheAttributes0 = new RemoteHttpCacheAttributes();
      assertEquals(0, remoteHttpCacheAttributes0.getFailoverIndex());
      assertEquals((-1), remoteHttpCacheAttributes0.getGetTimeoutMillis());
      assertEquals(100, remoteHttpCacheAttributes0.getMaxConnectionsPerHost());
      assertTrue(remoteHttpCacheAttributes0.isIncludeKeysAndPatternsAsParameter());
      assertTrue(remoteHttpCacheAttributes0.isReceive());
      assertEquals(RemoteType.LOCAL, remoteHttpCacheAttributes0.getRemoteType());
      assertEquals(5000, remoteHttpCacheAttributes0.getConnectionTimeoutMillis());
      assertNull(remoteHttpCacheAttributes0.getUrl());
      assertEquals("remote_cache_client", remoteHttpCacheAttributes0.getThreadPoolName());
      assertEquals("", remoteHttpCacheAttributes0.getFailoverServers());
      assertEquals(3000, remoteHttpCacheAttributes0.getSocketTimeoutMillis());
      assertTrue(remoteHttpCacheAttributes0.isIncludeRequestTypeasAsParameter());
      assertFalse(remoteHttpCacheAttributes0.isLocalClusterConsistency());
      assertNull(remoteHttpCacheAttributes0.getEventQueueType());
      assertEquals(10000, remoteHttpCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
      assertEquals("org.apache.commons.jcs3.auxiliary.remote.http.client.RemoteHttpCacheClient", remoteHttpCacheAttributes0.getRemoteHttpClientClassName());
      assertNull(remoteHttpCacheAttributes0.getEventQueuePoolName());
      assertEquals("1.1", remoteHttpCacheAttributes0.getHttpVersion());
      assertEquals("", remoteHttpCacheAttributes0.getClusterServers());
      assertNull(remoteHttpCacheAttributes0.getName());
      assertNull(remoteHttpCacheAttributes0.getCacheName());
      assertEquals("org.apache.commons.jcs3.engine.behavior.ICacheServiceNonLocal", remoteHttpCacheAttributes0.getRemoteServiceName());
      assertTrue(remoteHttpCacheAttributes0.getRemoveUponRemotePut());
      assertEquals(1000, remoteHttpCacheAttributes0.getZombieQueueMaxSize());
      assertTrue(remoteHttpCacheAttributes0.isIncludeCacheNameAsParameter());
      assertEquals(0, remoteHttpCacheAttributes0.getLocalPort());
      assertFalse(remoteHttpCacheAttributes0.getGetOnly());
      assertNotNull(remoteHttpCacheAttributes0);
      
      remoteHttpCacheAttributes0.setSocketTimeoutMillis((-4967));
      assertEquals(0, remoteHttpCacheAttributes0.getFailoverIndex());
      assertEquals((-1), remoteHttpCacheAttributes0.getGetTimeoutMillis());
      assertEquals(100, remoteHttpCacheAttributes0.getMaxConnectionsPerHost());
      assertTrue(remoteHttpCacheAttributes0.isIncludeKeysAndPatternsAsParameter());
      assertTrue(remoteHttpCacheAttributes0.isReceive());
      assertEquals(RemoteType.LOCAL, remoteHttpCacheAttributes0.getRemoteType());
      assertEquals(5000, remoteHttpCacheAttributes0.getConnectionTimeoutMillis());
      assertNull(remoteHttpCacheAttributes0.getUrl());
      assertEquals("remote_cache_client", remoteHttpCacheAttributes0.getThreadPoolName());
      assertEquals((-4967), remoteHttpCacheAttributes0.getSocketTimeoutMillis());
      assertEquals("", remoteHttpCacheAttributes0.getFailoverServers());
      assertTrue(remoteHttpCacheAttributes0.isIncludeRequestTypeasAsParameter());
      assertFalse(remoteHttpCacheAttributes0.isLocalClusterConsistency());
      assertNull(remoteHttpCacheAttributes0.getEventQueueType());
      assertEquals(10000, remoteHttpCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
      assertEquals("org.apache.commons.jcs3.auxiliary.remote.http.client.RemoteHttpCacheClient", remoteHttpCacheAttributes0.getRemoteHttpClientClassName());
      assertNull(remoteHttpCacheAttributes0.getEventQueuePoolName());
      assertEquals("1.1", remoteHttpCacheAttributes0.getHttpVersion());
      assertEquals("", remoteHttpCacheAttributes0.getClusterServers());
      assertNull(remoteHttpCacheAttributes0.getName());
      assertNull(remoteHttpCacheAttributes0.getCacheName());
      assertEquals("org.apache.commons.jcs3.engine.behavior.ICacheServiceNonLocal", remoteHttpCacheAttributes0.getRemoteServiceName());
      assertTrue(remoteHttpCacheAttributes0.getRemoveUponRemotePut());
      assertEquals(1000, remoteHttpCacheAttributes0.getZombieQueueMaxSize());
      assertTrue(remoteHttpCacheAttributes0.isIncludeCacheNameAsParameter());
      assertEquals(0, remoteHttpCacheAttributes0.getLocalPort());
      assertFalse(remoteHttpCacheAttributes0.getGetOnly());
      
      int int0 = remoteHttpCacheAttributes0.getSocketTimeoutMillis();
      assertEquals(0, remoteHttpCacheAttributes0.getFailoverIndex());
      assertEquals((-1), remoteHttpCacheAttributes0.getGetTimeoutMillis());
      assertEquals(100, remoteHttpCacheAttributes0.getMaxConnectionsPerHost());
      assertTrue(remoteHttpCacheAttributes0.isIncludeKeysAndPatternsAsParameter());
      assertTrue(remoteHttpCacheAttributes0.isReceive());
      assertEquals(RemoteType.LOCAL, remoteHttpCacheAttributes0.getRemoteType());
      assertEquals(5000, remoteHttpCacheAttributes0.getConnectionTimeoutMillis());
      assertNull(remoteHttpCacheAttributes0.getUrl());
      assertEquals("remote_cache_client", remoteHttpCacheAttributes0.getThreadPoolName());
      assertEquals((-4967), remoteHttpCacheAttributes0.getSocketTimeoutMillis());
      assertEquals("", remoteHttpCacheAttributes0.getFailoverServers());
      assertTrue(remoteHttpCacheAttributes0.isIncludeRequestTypeasAsParameter());
      assertFalse(remoteHttpCacheAttributes0.isLocalClusterConsistency());
      assertNull(remoteHttpCacheAttributes0.getEventQueueType());
      assertEquals(10000, remoteHttpCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
      assertEquals("org.apache.commons.jcs3.auxiliary.remote.http.client.RemoteHttpCacheClient", remoteHttpCacheAttributes0.getRemoteHttpClientClassName());
      assertNull(remoteHttpCacheAttributes0.getEventQueuePoolName());
      assertEquals("1.1", remoteHttpCacheAttributes0.getHttpVersion());
      assertEquals("", remoteHttpCacheAttributes0.getClusterServers());
      assertNull(remoteHttpCacheAttributes0.getName());
      assertNull(remoteHttpCacheAttributes0.getCacheName());
      assertEquals("org.apache.commons.jcs3.engine.behavior.ICacheServiceNonLocal", remoteHttpCacheAttributes0.getRemoteServiceName());
      assertTrue(remoteHttpCacheAttributes0.getRemoveUponRemotePut());
      assertEquals(1000, remoteHttpCacheAttributes0.getZombieQueueMaxSize());
      assertTrue(remoteHttpCacheAttributes0.isIncludeCacheNameAsParameter());
      assertEquals(0, remoteHttpCacheAttributes0.getLocalPort());
      assertFalse(remoteHttpCacheAttributes0.getGetOnly());
      assertEquals((-4967), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RemoteHttpCacheAttributes remoteHttpCacheAttributes0 = new RemoteHttpCacheAttributes();
      assertEquals("remote_cache_client", remoteHttpCacheAttributes0.getThreadPoolName());
      assertEquals(5000, remoteHttpCacheAttributes0.getConnectionTimeoutMillis());
      assertEquals("org.apache.commons.jcs3.engine.behavior.ICacheServiceNonLocal", remoteHttpCacheAttributes0.getRemoteServiceName());
      assertEquals("1.1", remoteHttpCacheAttributes0.getHttpVersion());
      assertEquals("", remoteHttpCacheAttributes0.getClusterServers());
      assertEquals(3000, remoteHttpCacheAttributes0.getSocketTimeoutMillis());
      assertNull(remoteHttpCacheAttributes0.getUrl());
      assertEquals("", remoteHttpCacheAttributes0.getFailoverServers());
      assertTrue(remoteHttpCacheAttributes0.isReceive());
      assertEquals(10000, remoteHttpCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
      assertEquals(100, remoteHttpCacheAttributes0.getMaxConnectionsPerHost());
      assertEquals(RemoteType.LOCAL, remoteHttpCacheAttributes0.getRemoteType());
      assertNull(remoteHttpCacheAttributes0.getCacheName());
      assertTrue(remoteHttpCacheAttributes0.isIncludeKeysAndPatternsAsParameter());
      assertEquals("org.apache.commons.jcs3.auxiliary.remote.http.client.RemoteHttpCacheClient", remoteHttpCacheAttributes0.getRemoteHttpClientClassName());
      assertTrue(remoteHttpCacheAttributes0.getRemoveUponRemotePut());
      assertEquals((-1), remoteHttpCacheAttributes0.getGetTimeoutMillis());
      assertNull(remoteHttpCacheAttributes0.getEventQueueType());
      assertNull(remoteHttpCacheAttributes0.getName());
      assertNull(remoteHttpCacheAttributes0.getEventQueuePoolName());
      assertFalse(remoteHttpCacheAttributes0.isLocalClusterConsistency());
      assertEquals(1000, remoteHttpCacheAttributes0.getZombieQueueMaxSize());
      assertEquals(0, remoteHttpCacheAttributes0.getFailoverIndex());
      assertTrue(remoteHttpCacheAttributes0.isIncludeCacheNameAsParameter());
      assertTrue(remoteHttpCacheAttributes0.isIncludeRequestTypeasAsParameter());
      assertEquals(0, remoteHttpCacheAttributes0.getLocalPort());
      assertFalse(remoteHttpCacheAttributes0.getGetOnly());
      assertNotNull(remoteHttpCacheAttributes0);
      
      remoteHttpCacheAttributes0.setRemoteHttpClientClassName((String) null);
      assertEquals("remote_cache_client", remoteHttpCacheAttributes0.getThreadPoolName());
      assertEquals(5000, remoteHttpCacheAttributes0.getConnectionTimeoutMillis());
      assertEquals("org.apache.commons.jcs3.engine.behavior.ICacheServiceNonLocal", remoteHttpCacheAttributes0.getRemoteServiceName());
      assertEquals("1.1", remoteHttpCacheAttributes0.getHttpVersion());
      assertEquals("", remoteHttpCacheAttributes0.getClusterServers());
      assertEquals(3000, remoteHttpCacheAttributes0.getSocketTimeoutMillis());
      assertNull(remoteHttpCacheAttributes0.getUrl());
      assertEquals("", remoteHttpCacheAttributes0.getFailoverServers());
      assertTrue(remoteHttpCacheAttributes0.isReceive());
      assertEquals(10000, remoteHttpCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
      assertEquals(100, remoteHttpCacheAttributes0.getMaxConnectionsPerHost());
      assertNull(remoteHttpCacheAttributes0.getRemoteHttpClientClassName());
      assertEquals(RemoteType.LOCAL, remoteHttpCacheAttributes0.getRemoteType());
      assertNull(remoteHttpCacheAttributes0.getCacheName());
      assertTrue(remoteHttpCacheAttributes0.isIncludeKeysAndPatternsAsParameter());
      assertTrue(remoteHttpCacheAttributes0.getRemoveUponRemotePut());
      assertEquals((-1), remoteHttpCacheAttributes0.getGetTimeoutMillis());
      assertNull(remoteHttpCacheAttributes0.getEventQueueType());
      assertNull(remoteHttpCacheAttributes0.getName());
      assertNull(remoteHttpCacheAttributes0.getEventQueuePoolName());
      assertFalse(remoteHttpCacheAttributes0.isLocalClusterConsistency());
      assertEquals(1000, remoteHttpCacheAttributes0.getZombieQueueMaxSize());
      assertEquals(0, remoteHttpCacheAttributes0.getFailoverIndex());
      assertTrue(remoteHttpCacheAttributes0.isIncludeCacheNameAsParameter());
      assertTrue(remoteHttpCacheAttributes0.isIncludeRequestTypeasAsParameter());
      assertEquals(0, remoteHttpCacheAttributes0.getLocalPort());
      assertFalse(remoteHttpCacheAttributes0.getGetOnly());
      
      String string0 = remoteHttpCacheAttributes0.getRemoteHttpClientClassName();
      assertEquals("remote_cache_client", remoteHttpCacheAttributes0.getThreadPoolName());
      assertEquals(5000, remoteHttpCacheAttributes0.getConnectionTimeoutMillis());
      assertEquals("org.apache.commons.jcs3.engine.behavior.ICacheServiceNonLocal", remoteHttpCacheAttributes0.getRemoteServiceName());
      assertEquals("1.1", remoteHttpCacheAttributes0.getHttpVersion());
      assertEquals("", remoteHttpCacheAttributes0.getClusterServers());
      assertEquals(3000, remoteHttpCacheAttributes0.getSocketTimeoutMillis());
      assertNull(remoteHttpCacheAttributes0.getUrl());
      assertEquals("", remoteHttpCacheAttributes0.getFailoverServers());
      assertTrue(remoteHttpCacheAttributes0.isReceive());
      assertEquals(10000, remoteHttpCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
      assertEquals(100, remoteHttpCacheAttributes0.getMaxConnectionsPerHost());
      assertNull(remoteHttpCacheAttributes0.getRemoteHttpClientClassName());
      assertEquals(RemoteType.LOCAL, remoteHttpCacheAttributes0.getRemoteType());
      assertNull(remoteHttpCacheAttributes0.getCacheName());
      assertTrue(remoteHttpCacheAttributes0.isIncludeKeysAndPatternsAsParameter());
      assertTrue(remoteHttpCacheAttributes0.getRemoveUponRemotePut());
      assertEquals((-1), remoteHttpCacheAttributes0.getGetTimeoutMillis());
      assertNull(remoteHttpCacheAttributes0.getEventQueueType());
      assertNull(remoteHttpCacheAttributes0.getName());
      assertNull(remoteHttpCacheAttributes0.getEventQueuePoolName());
      assertFalse(remoteHttpCacheAttributes0.isLocalClusterConsistency());
      assertEquals(1000, remoteHttpCacheAttributes0.getZombieQueueMaxSize());
      assertEquals(0, remoteHttpCacheAttributes0.getFailoverIndex());
      assertTrue(remoteHttpCacheAttributes0.isIncludeCacheNameAsParameter());
      assertTrue(remoteHttpCacheAttributes0.isIncludeRequestTypeasAsParameter());
      assertEquals(0, remoteHttpCacheAttributes0.getLocalPort());
      assertFalse(remoteHttpCacheAttributes0.getGetOnly());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RemoteHttpCacheAttributes remoteHttpCacheAttributes0 = new RemoteHttpCacheAttributes();
      assertNull(remoteHttpCacheAttributes0.getEventQueuePoolName());
      assertEquals(100, remoteHttpCacheAttributes0.getMaxConnectionsPerHost());
      assertNull(remoteHttpCacheAttributes0.getCacheName());
      assertFalse(remoteHttpCacheAttributes0.isLocalClusterConsistency());
      assertEquals("org.apache.commons.jcs3.auxiliary.remote.http.client.RemoteHttpCacheClient", remoteHttpCacheAttributes0.getRemoteHttpClientClassName());
      assertEquals(10000, remoteHttpCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
      assertTrue(remoteHttpCacheAttributes0.getRemoveUponRemotePut());
      assertEquals(RemoteType.LOCAL, remoteHttpCacheAttributes0.getRemoteType());
      assertEquals(1000, remoteHttpCacheAttributes0.getZombieQueueMaxSize());
      assertTrue(remoteHttpCacheAttributes0.isIncludeCacheNameAsParameter());
      assertEquals(0, remoteHttpCacheAttributes0.getFailoverIndex());
      assertEquals((-1), remoteHttpCacheAttributes0.getGetTimeoutMillis());
      assertNull(remoteHttpCacheAttributes0.getName());
      assertTrue(remoteHttpCacheAttributes0.isIncludeRequestTypeasAsParameter());
      assertNull(remoteHttpCacheAttributes0.getEventQueueType());
      assertEquals("remote_cache_client", remoteHttpCacheAttributes0.getThreadPoolName());
      assertEquals(0, remoteHttpCacheAttributes0.getLocalPort());
      assertFalse(remoteHttpCacheAttributes0.getGetOnly());
      assertEquals("org.apache.commons.jcs3.engine.behavior.ICacheServiceNonLocal", remoteHttpCacheAttributes0.getRemoteServiceName());
      assertNull(remoteHttpCacheAttributes0.getUrl());
      assertEquals("1.1", remoteHttpCacheAttributes0.getHttpVersion());
      assertEquals("", remoteHttpCacheAttributes0.getFailoverServers());
      assertEquals("", remoteHttpCacheAttributes0.getClusterServers());
      assertEquals(3000, remoteHttpCacheAttributes0.getSocketTimeoutMillis());
      assertTrue(remoteHttpCacheAttributes0.isIncludeKeysAndPatternsAsParameter());
      assertTrue(remoteHttpCacheAttributes0.isReceive());
      assertEquals(5000, remoteHttpCacheAttributes0.getConnectionTimeoutMillis());
      assertNotNull(remoteHttpCacheAttributes0);
      
      remoteHttpCacheAttributes0.setRemoteHttpClientClassName("");
      assertNull(remoteHttpCacheAttributes0.getEventQueuePoolName());
      assertEquals(100, remoteHttpCacheAttributes0.getMaxConnectionsPerHost());
      assertNull(remoteHttpCacheAttributes0.getCacheName());
      assertFalse(remoteHttpCacheAttributes0.isLocalClusterConsistency());
      assertEquals("", remoteHttpCacheAttributes0.getRemoteHttpClientClassName());
      assertEquals(10000, remoteHttpCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
      assertTrue(remoteHttpCacheAttributes0.getRemoveUponRemotePut());
      assertEquals(RemoteType.LOCAL, remoteHttpCacheAttributes0.getRemoteType());
      assertEquals(1000, remoteHttpCacheAttributes0.getZombieQueueMaxSize());
      assertTrue(remoteHttpCacheAttributes0.isIncludeCacheNameAsParameter());
      assertEquals(0, remoteHttpCacheAttributes0.getFailoverIndex());
      assertEquals((-1), remoteHttpCacheAttributes0.getGetTimeoutMillis());
      assertNull(remoteHttpCacheAttributes0.getName());
      assertTrue(remoteHttpCacheAttributes0.isIncludeRequestTypeasAsParameter());
      assertNull(remoteHttpCacheAttributes0.getEventQueueType());
      assertEquals("remote_cache_client", remoteHttpCacheAttributes0.getThreadPoolName());
      assertEquals(0, remoteHttpCacheAttributes0.getLocalPort());
      assertFalse(remoteHttpCacheAttributes0.getGetOnly());
      assertEquals("org.apache.commons.jcs3.engine.behavior.ICacheServiceNonLocal", remoteHttpCacheAttributes0.getRemoteServiceName());
      assertNull(remoteHttpCacheAttributes0.getUrl());
      assertEquals("1.1", remoteHttpCacheAttributes0.getHttpVersion());
      assertEquals("", remoteHttpCacheAttributes0.getFailoverServers());
      assertEquals("", remoteHttpCacheAttributes0.getClusterServers());
      assertEquals(3000, remoteHttpCacheAttributes0.getSocketTimeoutMillis());
      assertTrue(remoteHttpCacheAttributes0.isIncludeKeysAndPatternsAsParameter());
      assertTrue(remoteHttpCacheAttributes0.isReceive());
      assertEquals(5000, remoteHttpCacheAttributes0.getConnectionTimeoutMillis());
      
      String string0 = remoteHttpCacheAttributes0.getRemoteHttpClientClassName();
      assertNull(remoteHttpCacheAttributes0.getEventQueuePoolName());
      assertEquals(100, remoteHttpCacheAttributes0.getMaxConnectionsPerHost());
      assertNull(remoteHttpCacheAttributes0.getCacheName());
      assertFalse(remoteHttpCacheAttributes0.isLocalClusterConsistency());
      assertEquals("", remoteHttpCacheAttributes0.getRemoteHttpClientClassName());
      assertEquals(10000, remoteHttpCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
      assertTrue(remoteHttpCacheAttributes0.getRemoveUponRemotePut());
      assertEquals(RemoteType.LOCAL, remoteHttpCacheAttributes0.getRemoteType());
      assertEquals(1000, remoteHttpCacheAttributes0.getZombieQueueMaxSize());
      assertTrue(remoteHttpCacheAttributes0.isIncludeCacheNameAsParameter());
      assertEquals(0, remoteHttpCacheAttributes0.getFailoverIndex());
      assertEquals((-1), remoteHttpCacheAttributes0.getGetTimeoutMillis());
      assertNull(remoteHttpCacheAttributes0.getName());
      assertTrue(remoteHttpCacheAttributes0.isIncludeRequestTypeasAsParameter());
      assertNull(remoteHttpCacheAttributes0.getEventQueueType());
      assertEquals("remote_cache_client", remoteHttpCacheAttributes0.getThreadPoolName());
      assertEquals(0, remoteHttpCacheAttributes0.getLocalPort());
      assertFalse(remoteHttpCacheAttributes0.getGetOnly());
      assertEquals("org.apache.commons.jcs3.engine.behavior.ICacheServiceNonLocal", remoteHttpCacheAttributes0.getRemoteServiceName());
      assertNull(remoteHttpCacheAttributes0.getUrl());
      assertEquals("1.1", remoteHttpCacheAttributes0.getHttpVersion());
      assertEquals("", remoteHttpCacheAttributes0.getFailoverServers());
      assertEquals("", remoteHttpCacheAttributes0.getClusterServers());
      assertEquals(3000, remoteHttpCacheAttributes0.getSocketTimeoutMillis());
      assertTrue(remoteHttpCacheAttributes0.isIncludeKeysAndPatternsAsParameter());
      assertTrue(remoteHttpCacheAttributes0.isReceive());
      assertEquals(5000, remoteHttpCacheAttributes0.getConnectionTimeoutMillis());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RemoteHttpCacheAttributes remoteHttpCacheAttributes0 = new RemoteHttpCacheAttributes();
      assertEquals(0, remoteHttpCacheAttributes0.getLocalPort());
      assertEquals("org.apache.commons.jcs3.engine.behavior.ICacheServiceNonLocal", remoteHttpCacheAttributes0.getRemoteServiceName());
      assertTrue(remoteHttpCacheAttributes0.isIncludeCacheNameAsParameter());
      assertEquals((-1), remoteHttpCacheAttributes0.getGetTimeoutMillis());
      assertFalse(remoteHttpCacheAttributes0.getGetOnly());
      assertEquals(0, remoteHttpCacheAttributes0.getFailoverIndex());
      assertEquals(1000, remoteHttpCacheAttributes0.getZombieQueueMaxSize());
      assertNull(remoteHttpCacheAttributes0.getEventQueueType());
      assertTrue(remoteHttpCacheAttributes0.isIncludeRequestTypeasAsParameter());
      assertEquals(3000, remoteHttpCacheAttributes0.getSocketTimeoutMillis());
      assertNull(remoteHttpCacheAttributes0.getName());
      assertFalse(remoteHttpCacheAttributes0.isLocalClusterConsistency());
      assertNull(remoteHttpCacheAttributes0.getEventQueuePoolName());
      assertTrue(remoteHttpCacheAttributes0.getRemoveUponRemotePut());
      assertNull(remoteHttpCacheAttributes0.getUrl());
      assertEquals("org.apache.commons.jcs3.auxiliary.remote.http.client.RemoteHttpCacheClient", remoteHttpCacheAttributes0.getRemoteHttpClientClassName());
      assertEquals(10000, remoteHttpCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
      assertEquals(RemoteType.LOCAL, remoteHttpCacheAttributes0.getRemoteType());
      assertEquals("", remoteHttpCacheAttributes0.getFailoverServers());
      assertEquals("", remoteHttpCacheAttributes0.getClusterServers());
      assertTrue(remoteHttpCacheAttributes0.isReceive());
      assertEquals(100, remoteHttpCacheAttributes0.getMaxConnectionsPerHost());
      assertTrue(remoteHttpCacheAttributes0.isIncludeKeysAndPatternsAsParameter());
      assertNull(remoteHttpCacheAttributes0.getCacheName());
      assertEquals(5000, remoteHttpCacheAttributes0.getConnectionTimeoutMillis());
      assertEquals("remote_cache_client", remoteHttpCacheAttributes0.getThreadPoolName());
      assertEquals("1.1", remoteHttpCacheAttributes0.getHttpVersion());
      assertNotNull(remoteHttpCacheAttributes0);
      
      remoteHttpCacheAttributes0.setMaxConnectionsPerHost((-3950));
      assertEquals(0, remoteHttpCacheAttributes0.getLocalPort());
      assertEquals("org.apache.commons.jcs3.engine.behavior.ICacheServiceNonLocal", remoteHttpCacheAttributes0.getRemoteServiceName());
      assertTrue(remoteHttpCacheAttributes0.isIncludeCacheNameAsParameter());
      assertEquals((-1), remoteHttpCacheAttributes0.getGetTimeoutMillis());
      assertFalse(remoteHttpCacheAttributes0.getGetOnly());
      assertEquals(0, remoteHttpCacheAttributes0.getFailoverIndex());
      assertEquals(1000, remoteHttpCacheAttributes0.getZombieQueueMaxSize());
      assertNull(remoteHttpCacheAttributes0.getEventQueueType());
      assertTrue(remoteHttpCacheAttributes0.isIncludeRequestTypeasAsParameter());
      assertEquals(3000, remoteHttpCacheAttributes0.getSocketTimeoutMillis());
      assertNull(remoteHttpCacheAttributes0.getName());
      assertFalse(remoteHttpCacheAttributes0.isLocalClusterConsistency());
      assertNull(remoteHttpCacheAttributes0.getEventQueuePoolName());
      assertTrue(remoteHttpCacheAttributes0.getRemoveUponRemotePut());
      assertNull(remoteHttpCacheAttributes0.getUrl());
      assertEquals("org.apache.commons.jcs3.auxiliary.remote.http.client.RemoteHttpCacheClient", remoteHttpCacheAttributes0.getRemoteHttpClientClassName());
      assertEquals(10000, remoteHttpCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
      assertEquals(RemoteType.LOCAL, remoteHttpCacheAttributes0.getRemoteType());
      assertEquals("", remoteHttpCacheAttributes0.getFailoverServers());
      assertEquals("", remoteHttpCacheAttributes0.getClusterServers());
      assertTrue(remoteHttpCacheAttributes0.isReceive());
      assertTrue(remoteHttpCacheAttributes0.isIncludeKeysAndPatternsAsParameter());
      assertNull(remoteHttpCacheAttributes0.getCacheName());
      assertEquals(5000, remoteHttpCacheAttributes0.getConnectionTimeoutMillis());
      assertEquals("remote_cache_client", remoteHttpCacheAttributes0.getThreadPoolName());
      assertEquals((-3950), remoteHttpCacheAttributes0.getMaxConnectionsPerHost());
      assertEquals("1.1", remoteHttpCacheAttributes0.getHttpVersion());
      
      int int0 = remoteHttpCacheAttributes0.getMaxConnectionsPerHost();
      assertEquals(0, remoteHttpCacheAttributes0.getLocalPort());
      assertEquals("org.apache.commons.jcs3.engine.behavior.ICacheServiceNonLocal", remoteHttpCacheAttributes0.getRemoteServiceName());
      assertTrue(remoteHttpCacheAttributes0.isIncludeCacheNameAsParameter());
      assertEquals((-1), remoteHttpCacheAttributes0.getGetTimeoutMillis());
      assertFalse(remoteHttpCacheAttributes0.getGetOnly());
      assertEquals(0, remoteHttpCacheAttributes0.getFailoverIndex());
      assertEquals(1000, remoteHttpCacheAttributes0.getZombieQueueMaxSize());
      assertNull(remoteHttpCacheAttributes0.getEventQueueType());
      assertTrue(remoteHttpCacheAttributes0.isIncludeRequestTypeasAsParameter());
      assertEquals(3000, remoteHttpCacheAttributes0.getSocketTimeoutMillis());
      assertNull(remoteHttpCacheAttributes0.getName());
      assertFalse(remoteHttpCacheAttributes0.isLocalClusterConsistency());
      assertNull(remoteHttpCacheAttributes0.getEventQueuePoolName());
      assertTrue(remoteHttpCacheAttributes0.getRemoveUponRemotePut());
      assertNull(remoteHttpCacheAttributes0.getUrl());
      assertEquals("org.apache.commons.jcs3.auxiliary.remote.http.client.RemoteHttpCacheClient", remoteHttpCacheAttributes0.getRemoteHttpClientClassName());
      assertEquals(10000, remoteHttpCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
      assertEquals(RemoteType.LOCAL, remoteHttpCacheAttributes0.getRemoteType());
      assertEquals("", remoteHttpCacheAttributes0.getFailoverServers());
      assertEquals("", remoteHttpCacheAttributes0.getClusterServers());
      assertTrue(remoteHttpCacheAttributes0.isReceive());
      assertTrue(remoteHttpCacheAttributes0.isIncludeKeysAndPatternsAsParameter());
      assertNull(remoteHttpCacheAttributes0.getCacheName());
      assertEquals(5000, remoteHttpCacheAttributes0.getConnectionTimeoutMillis());
      assertEquals("remote_cache_client", remoteHttpCacheAttributes0.getThreadPoolName());
      assertEquals((-3950), remoteHttpCacheAttributes0.getMaxConnectionsPerHost());
      assertEquals("1.1", remoteHttpCacheAttributes0.getHttpVersion());
      assertEquals((-3950), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RemoteHttpCacheAttributes remoteHttpCacheAttributes0 = new RemoteHttpCacheAttributes();
      assertEquals("1.1", remoteHttpCacheAttributes0.getHttpVersion());
      assertNull(remoteHttpCacheAttributes0.getUrl());
      assertEquals("", remoteHttpCacheAttributes0.getFailoverServers());
      assertEquals("", remoteHttpCacheAttributes0.getClusterServers());
      assertNull(remoteHttpCacheAttributes0.getName());
      assertEquals("org.apache.commons.jcs3.engine.behavior.ICacheServiceNonLocal", remoteHttpCacheAttributes0.getRemoteServiceName());
      assertFalse(remoteHttpCacheAttributes0.isLocalClusterConsistency());
      assertTrue(remoteHttpCacheAttributes0.getRemoveUponRemotePut());
      assertEquals(0, remoteHttpCacheAttributes0.getLocalPort());
      assertNull(remoteHttpCacheAttributes0.getEventQueueType());
      assertFalse(remoteHttpCacheAttributes0.getGetOnly());
      assertEquals(1000, remoteHttpCacheAttributes0.getZombieQueueMaxSize());
      assertTrue(remoteHttpCacheAttributes0.isIncludeRequestTypeasAsParameter());
      assertEquals((-1), remoteHttpCacheAttributes0.getGetTimeoutMillis());
      assertEquals(0, remoteHttpCacheAttributes0.getFailoverIndex());
      assertTrue(remoteHttpCacheAttributes0.isIncludeCacheNameAsParameter());
      assertEquals(RemoteType.LOCAL, remoteHttpCacheAttributes0.getRemoteType());
      assertNull(remoteHttpCacheAttributes0.getEventQueuePoolName());
      assertNull(remoteHttpCacheAttributes0.getCacheName());
      assertEquals("org.apache.commons.jcs3.auxiliary.remote.http.client.RemoteHttpCacheClient", remoteHttpCacheAttributes0.getRemoteHttpClientClassName());
      assertEquals(10000, remoteHttpCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
      assertTrue(remoteHttpCacheAttributes0.isIncludeKeysAndPatternsAsParameter());
      assertEquals(3000, remoteHttpCacheAttributes0.getSocketTimeoutMillis());
      assertEquals(100, remoteHttpCacheAttributes0.getMaxConnectionsPerHost());
      assertEquals(5000, remoteHttpCacheAttributes0.getConnectionTimeoutMillis());
      assertTrue(remoteHttpCacheAttributes0.isReceive());
      assertEquals("remote_cache_client", remoteHttpCacheAttributes0.getThreadPoolName());
      assertNotNull(remoteHttpCacheAttributes0);
      
      remoteHttpCacheAttributes0.setHttpVersion((String) null);
      assertNull(remoteHttpCacheAttributes0.getUrl());
      assertEquals("", remoteHttpCacheAttributes0.getFailoverServers());
      assertEquals("", remoteHttpCacheAttributes0.getClusterServers());
      assertNull(remoteHttpCacheAttributes0.getName());
      assertEquals("org.apache.commons.jcs3.engine.behavior.ICacheServiceNonLocal", remoteHttpCacheAttributes0.getRemoteServiceName());
      assertFalse(remoteHttpCacheAttributes0.isLocalClusterConsistency());
      assertTrue(remoteHttpCacheAttributes0.getRemoveUponRemotePut());
      assertNull(remoteHttpCacheAttributes0.getHttpVersion());
      assertEquals(0, remoteHttpCacheAttributes0.getLocalPort());
      assertNull(remoteHttpCacheAttributes0.getEventQueueType());
      assertFalse(remoteHttpCacheAttributes0.getGetOnly());
      assertEquals(1000, remoteHttpCacheAttributes0.getZombieQueueMaxSize());
      assertTrue(remoteHttpCacheAttributes0.isIncludeRequestTypeasAsParameter());
      assertEquals((-1), remoteHttpCacheAttributes0.getGetTimeoutMillis());
      assertEquals(0, remoteHttpCacheAttributes0.getFailoverIndex());
      assertTrue(remoteHttpCacheAttributes0.isIncludeCacheNameAsParameter());
      assertEquals(RemoteType.LOCAL, remoteHttpCacheAttributes0.getRemoteType());
      assertNull(remoteHttpCacheAttributes0.getEventQueuePoolName());
      assertNull(remoteHttpCacheAttributes0.getCacheName());
      assertEquals("org.apache.commons.jcs3.auxiliary.remote.http.client.RemoteHttpCacheClient", remoteHttpCacheAttributes0.getRemoteHttpClientClassName());
      assertEquals(10000, remoteHttpCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
      assertTrue(remoteHttpCacheAttributes0.isIncludeKeysAndPatternsAsParameter());
      assertEquals(3000, remoteHttpCacheAttributes0.getSocketTimeoutMillis());
      assertEquals(100, remoteHttpCacheAttributes0.getMaxConnectionsPerHost());
      assertEquals(5000, remoteHttpCacheAttributes0.getConnectionTimeoutMillis());
      assertTrue(remoteHttpCacheAttributes0.isReceive());
      assertEquals("remote_cache_client", remoteHttpCacheAttributes0.getThreadPoolName());
      
      String string0 = remoteHttpCacheAttributes0.getHttpVersion();
      assertNull(remoteHttpCacheAttributes0.getUrl());
      assertEquals("", remoteHttpCacheAttributes0.getFailoverServers());
      assertEquals("", remoteHttpCacheAttributes0.getClusterServers());
      assertNull(remoteHttpCacheAttributes0.getName());
      assertEquals("org.apache.commons.jcs3.engine.behavior.ICacheServiceNonLocal", remoteHttpCacheAttributes0.getRemoteServiceName());
      assertFalse(remoteHttpCacheAttributes0.isLocalClusterConsistency());
      assertTrue(remoteHttpCacheAttributes0.getRemoveUponRemotePut());
      assertNull(remoteHttpCacheAttributes0.getHttpVersion());
      assertEquals(0, remoteHttpCacheAttributes0.getLocalPort());
      assertNull(remoteHttpCacheAttributes0.getEventQueueType());
      assertFalse(remoteHttpCacheAttributes0.getGetOnly());
      assertEquals(1000, remoteHttpCacheAttributes0.getZombieQueueMaxSize());
      assertTrue(remoteHttpCacheAttributes0.isIncludeRequestTypeasAsParameter());
      assertEquals((-1), remoteHttpCacheAttributes0.getGetTimeoutMillis());
      assertEquals(0, remoteHttpCacheAttributes0.getFailoverIndex());
      assertTrue(remoteHttpCacheAttributes0.isIncludeCacheNameAsParameter());
      assertEquals(RemoteType.LOCAL, remoteHttpCacheAttributes0.getRemoteType());
      assertNull(remoteHttpCacheAttributes0.getEventQueuePoolName());
      assertNull(remoteHttpCacheAttributes0.getCacheName());
      assertEquals("org.apache.commons.jcs3.auxiliary.remote.http.client.RemoteHttpCacheClient", remoteHttpCacheAttributes0.getRemoteHttpClientClassName());
      assertEquals(10000, remoteHttpCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
      assertTrue(remoteHttpCacheAttributes0.isIncludeKeysAndPatternsAsParameter());
      assertEquals(3000, remoteHttpCacheAttributes0.getSocketTimeoutMillis());
      assertEquals(100, remoteHttpCacheAttributes0.getMaxConnectionsPerHost());
      assertEquals(5000, remoteHttpCacheAttributes0.getConnectionTimeoutMillis());
      assertTrue(remoteHttpCacheAttributes0.isReceive());
      assertEquals("remote_cache_client", remoteHttpCacheAttributes0.getThreadPoolName());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RemoteHttpCacheAttributes remoteHttpCacheAttributes0 = new RemoteHttpCacheAttributes();
      assertNull(remoteHttpCacheAttributes0.getEventQueuePoolName());
      assertTrue(remoteHttpCacheAttributes0.isIncludeKeysAndPatternsAsParameter());
      assertNull(remoteHttpCacheAttributes0.getCacheName());
      assertEquals(100, remoteHttpCacheAttributes0.getMaxConnectionsPerHost());
      assertEquals(10000, remoteHttpCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
      assertEquals(RemoteType.LOCAL, remoteHttpCacheAttributes0.getRemoteType());
      assertEquals("org.apache.commons.jcs3.auxiliary.remote.http.client.RemoteHttpCacheClient", remoteHttpCacheAttributes0.getRemoteHttpClientClassName());
      assertTrue(remoteHttpCacheAttributes0.getRemoveUponRemotePut());
      assertEquals(1000, remoteHttpCacheAttributes0.getZombieQueueMaxSize());
      assertTrue(remoteHttpCacheAttributes0.isIncludeCacheNameAsParameter());
      assertEquals(0, remoteHttpCacheAttributes0.getFailoverIndex());
      assertNull(remoteHttpCacheAttributes0.getName());
      assertEquals((-1), remoteHttpCacheAttributes0.getGetTimeoutMillis());
      assertTrue(remoteHttpCacheAttributes0.isIncludeRequestTypeasAsParameter());
      assertNull(remoteHttpCacheAttributes0.getEventQueueType());
      assertEquals("org.apache.commons.jcs3.engine.behavior.ICacheServiceNonLocal", remoteHttpCacheAttributes0.getRemoteServiceName());
      assertEquals(5000, remoteHttpCacheAttributes0.getConnectionTimeoutMillis());
      assertEquals("remote_cache_client", remoteHttpCacheAttributes0.getThreadPoolName());
      assertFalse(remoteHttpCacheAttributes0.getGetOnly());
      assertEquals(0, remoteHttpCacheAttributes0.getLocalPort());
      assertNull(remoteHttpCacheAttributes0.getUrl());
      assertEquals("1.1", remoteHttpCacheAttributes0.getHttpVersion());
      assertFalse(remoteHttpCacheAttributes0.isLocalClusterConsistency());
      assertEquals("", remoteHttpCacheAttributes0.getFailoverServers());
      assertEquals("", remoteHttpCacheAttributes0.getClusterServers());
      assertTrue(remoteHttpCacheAttributes0.isReceive());
      assertEquals(3000, remoteHttpCacheAttributes0.getSocketTimeoutMillis());
      assertNotNull(remoteHttpCacheAttributes0);
      
      remoteHttpCacheAttributes0.setHttpVersion("");
      assertNull(remoteHttpCacheAttributes0.getEventQueuePoolName());
      assertTrue(remoteHttpCacheAttributes0.isIncludeKeysAndPatternsAsParameter());
      assertNull(remoteHttpCacheAttributes0.getCacheName());
      assertEquals(100, remoteHttpCacheAttributes0.getMaxConnectionsPerHost());
      assertEquals(10000, remoteHttpCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
      assertEquals(RemoteType.LOCAL, remoteHttpCacheAttributes0.getRemoteType());
      assertEquals("org.apache.commons.jcs3.auxiliary.remote.http.client.RemoteHttpCacheClient", remoteHttpCacheAttributes0.getRemoteHttpClientClassName());
      assertTrue(remoteHttpCacheAttributes0.getRemoveUponRemotePut());
      assertEquals(1000, remoteHttpCacheAttributes0.getZombieQueueMaxSize());
      assertTrue(remoteHttpCacheAttributes0.isIncludeCacheNameAsParameter());
      assertEquals(0, remoteHttpCacheAttributes0.getFailoverIndex());
      assertNull(remoteHttpCacheAttributes0.getName());
      assertEquals((-1), remoteHttpCacheAttributes0.getGetTimeoutMillis());
      assertTrue(remoteHttpCacheAttributes0.isIncludeRequestTypeasAsParameter());
      assertNull(remoteHttpCacheAttributes0.getEventQueueType());
      assertEquals("", remoteHttpCacheAttributes0.getHttpVersion());
      assertEquals("org.apache.commons.jcs3.engine.behavior.ICacheServiceNonLocal", remoteHttpCacheAttributes0.getRemoteServiceName());
      assertEquals(5000, remoteHttpCacheAttributes0.getConnectionTimeoutMillis());
      assertEquals("remote_cache_client", remoteHttpCacheAttributes0.getThreadPoolName());
      assertFalse(remoteHttpCacheAttributes0.getGetOnly());
      assertEquals(0, remoteHttpCacheAttributes0.getLocalPort());
      assertNull(remoteHttpCacheAttributes0.getUrl());
      assertFalse(remoteHttpCacheAttributes0.isLocalClusterConsistency());
      assertEquals("", remoteHttpCacheAttributes0.getFailoverServers());
      assertEquals("", remoteHttpCacheAttributes0.getClusterServers());
      assertTrue(remoteHttpCacheAttributes0.isReceive());
      assertEquals(3000, remoteHttpCacheAttributes0.getSocketTimeoutMillis());
      
      String string0 = remoteHttpCacheAttributes0.getHttpVersion();
      assertNull(remoteHttpCacheAttributes0.getEventQueuePoolName());
      assertTrue(remoteHttpCacheAttributes0.isIncludeKeysAndPatternsAsParameter());
      assertNull(remoteHttpCacheAttributes0.getCacheName());
      assertEquals(100, remoteHttpCacheAttributes0.getMaxConnectionsPerHost());
      assertEquals(10000, remoteHttpCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
      assertEquals(RemoteType.LOCAL, remoteHttpCacheAttributes0.getRemoteType());
      assertEquals("org.apache.commons.jcs3.auxiliary.remote.http.client.RemoteHttpCacheClient", remoteHttpCacheAttributes0.getRemoteHttpClientClassName());
      assertTrue(remoteHttpCacheAttributes0.getRemoveUponRemotePut());
      assertEquals(1000, remoteHttpCacheAttributes0.getZombieQueueMaxSize());
      assertTrue(remoteHttpCacheAttributes0.isIncludeCacheNameAsParameter());
      assertEquals(0, remoteHttpCacheAttributes0.getFailoverIndex());
      assertNull(remoteHttpCacheAttributes0.getName());
      assertEquals((-1), remoteHttpCacheAttributes0.getGetTimeoutMillis());
      assertTrue(remoteHttpCacheAttributes0.isIncludeRequestTypeasAsParameter());
      assertNull(remoteHttpCacheAttributes0.getEventQueueType());
      assertEquals("", remoteHttpCacheAttributes0.getHttpVersion());
      assertEquals("org.apache.commons.jcs3.engine.behavior.ICacheServiceNonLocal", remoteHttpCacheAttributes0.getRemoteServiceName());
      assertEquals(5000, remoteHttpCacheAttributes0.getConnectionTimeoutMillis());
      assertEquals("remote_cache_client", remoteHttpCacheAttributes0.getThreadPoolName());
      assertFalse(remoteHttpCacheAttributes0.getGetOnly());
      assertEquals(0, remoteHttpCacheAttributes0.getLocalPort());
      assertNull(remoteHttpCacheAttributes0.getUrl());
      assertFalse(remoteHttpCacheAttributes0.isLocalClusterConsistency());
      assertEquals("", remoteHttpCacheAttributes0.getFailoverServers());
      assertEquals("", remoteHttpCacheAttributes0.getClusterServers());
      assertTrue(remoteHttpCacheAttributes0.isReceive());
      assertEquals(3000, remoteHttpCacheAttributes0.getSocketTimeoutMillis());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RemoteHttpCacheAttributes remoteHttpCacheAttributes0 = new RemoteHttpCacheAttributes();
      assertTrue(remoteHttpCacheAttributes0.isIncludeCacheNameAsParameter());
      assertEquals(0, remoteHttpCacheAttributes0.getFailoverIndex());
      assertEquals((-1), remoteHttpCacheAttributes0.getGetTimeoutMillis());
      assertNull(remoteHttpCacheAttributes0.getCacheName());
      assertEquals(RemoteType.LOCAL, remoteHttpCacheAttributes0.getRemoteType());
      assertNull(remoteHttpCacheAttributes0.getEventQueuePoolName());
      assertEquals(10000, remoteHttpCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
      assertEquals(100, remoteHttpCacheAttributes0.getMaxConnectionsPerHost());
      assertTrue(remoteHttpCacheAttributes0.isReceive());
      assertTrue(remoteHttpCacheAttributes0.isIncludeKeysAndPatternsAsParameter());
      assertEquals("remote_cache_client", remoteHttpCacheAttributes0.getThreadPoolName());
      assertEquals(3000, remoteHttpCacheAttributes0.getSocketTimeoutMillis());
      assertEquals(5000, remoteHttpCacheAttributes0.getConnectionTimeoutMillis());
      assertNull(remoteHttpCacheAttributes0.getUrl());
      assertEquals("", remoteHttpCacheAttributes0.getFailoverServers());
      assertNull(remoteHttpCacheAttributes0.getName());
      assertEquals("1.1", remoteHttpCacheAttributes0.getHttpVersion());
      assertEquals("", remoteHttpCacheAttributes0.getClusterServers());
      assertEquals("org.apache.commons.jcs3.auxiliary.remote.http.client.RemoteHttpCacheClient", remoteHttpCacheAttributes0.getRemoteHttpClientClassName());
      assertFalse(remoteHttpCacheAttributes0.isLocalClusterConsistency());
      assertEquals("org.apache.commons.jcs3.engine.behavior.ICacheServiceNonLocal", remoteHttpCacheAttributes0.getRemoteServiceName());
      assertTrue(remoteHttpCacheAttributes0.getRemoveUponRemotePut());
      assertEquals(0, remoteHttpCacheAttributes0.getLocalPort());
      assertNull(remoteHttpCacheAttributes0.getEventQueueType());
      assertFalse(remoteHttpCacheAttributes0.getGetOnly());
      assertTrue(remoteHttpCacheAttributes0.isIncludeRequestTypeasAsParameter());
      assertEquals(1000, remoteHttpCacheAttributes0.getZombieQueueMaxSize());
      assertNotNull(remoteHttpCacheAttributes0);
      
      remoteHttpCacheAttributes0.setConnectionTimeoutMillis((-2116));
      assertTrue(remoteHttpCacheAttributes0.isIncludeCacheNameAsParameter());
      assertEquals(0, remoteHttpCacheAttributes0.getFailoverIndex());
      assertEquals((-2116), remoteHttpCacheAttributes0.getConnectionTimeoutMillis());
      assertEquals((-1), remoteHttpCacheAttributes0.getGetTimeoutMillis());
      assertNull(remoteHttpCacheAttributes0.getCacheName());
      assertEquals(RemoteType.LOCAL, remoteHttpCacheAttributes0.getRemoteType());
      assertNull(remoteHttpCacheAttributes0.getEventQueuePoolName());
      assertEquals(10000, remoteHttpCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
      assertEquals(100, remoteHttpCacheAttributes0.getMaxConnectionsPerHost());
      assertTrue(remoteHttpCacheAttributes0.isReceive());
      assertTrue(remoteHttpCacheAttributes0.isIncludeKeysAndPatternsAsParameter());
      assertEquals("remote_cache_client", remoteHttpCacheAttributes0.getThreadPoolName());
      assertEquals(3000, remoteHttpCacheAttributes0.getSocketTimeoutMillis());
      assertNull(remoteHttpCacheAttributes0.getUrl());
      assertEquals("", remoteHttpCacheAttributes0.getFailoverServers());
      assertNull(remoteHttpCacheAttributes0.getName());
      assertEquals("1.1", remoteHttpCacheAttributes0.getHttpVersion());
      assertEquals("", remoteHttpCacheAttributes0.getClusterServers());
      assertEquals("org.apache.commons.jcs3.auxiliary.remote.http.client.RemoteHttpCacheClient", remoteHttpCacheAttributes0.getRemoteHttpClientClassName());
      assertFalse(remoteHttpCacheAttributes0.isLocalClusterConsistency());
      assertEquals("org.apache.commons.jcs3.engine.behavior.ICacheServiceNonLocal", remoteHttpCacheAttributes0.getRemoteServiceName());
      assertTrue(remoteHttpCacheAttributes0.getRemoveUponRemotePut());
      assertEquals(0, remoteHttpCacheAttributes0.getLocalPort());
      assertNull(remoteHttpCacheAttributes0.getEventQueueType());
      assertFalse(remoteHttpCacheAttributes0.getGetOnly());
      assertTrue(remoteHttpCacheAttributes0.isIncludeRequestTypeasAsParameter());
      assertEquals(1000, remoteHttpCacheAttributes0.getZombieQueueMaxSize());
      
      int int0 = remoteHttpCacheAttributes0.getConnectionTimeoutMillis();
      assertTrue(remoteHttpCacheAttributes0.isIncludeCacheNameAsParameter());
      assertEquals(0, remoteHttpCacheAttributes0.getFailoverIndex());
      assertEquals((-2116), remoteHttpCacheAttributes0.getConnectionTimeoutMillis());
      assertEquals((-1), remoteHttpCacheAttributes0.getGetTimeoutMillis());
      assertNull(remoteHttpCacheAttributes0.getCacheName());
      assertEquals(RemoteType.LOCAL, remoteHttpCacheAttributes0.getRemoteType());
      assertNull(remoteHttpCacheAttributes0.getEventQueuePoolName());
      assertEquals(10000, remoteHttpCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
      assertEquals(100, remoteHttpCacheAttributes0.getMaxConnectionsPerHost());
      assertTrue(remoteHttpCacheAttributes0.isReceive());
      assertTrue(remoteHttpCacheAttributes0.isIncludeKeysAndPatternsAsParameter());
      assertEquals("remote_cache_client", remoteHttpCacheAttributes0.getThreadPoolName());
      assertEquals(3000, remoteHttpCacheAttributes0.getSocketTimeoutMillis());
      assertNull(remoteHttpCacheAttributes0.getUrl());
      assertEquals("", remoteHttpCacheAttributes0.getFailoverServers());
      assertNull(remoteHttpCacheAttributes0.getName());
      assertEquals("1.1", remoteHttpCacheAttributes0.getHttpVersion());
      assertEquals("", remoteHttpCacheAttributes0.getClusterServers());
      assertEquals("org.apache.commons.jcs3.auxiliary.remote.http.client.RemoteHttpCacheClient", remoteHttpCacheAttributes0.getRemoteHttpClientClassName());
      assertFalse(remoteHttpCacheAttributes0.isLocalClusterConsistency());
      assertEquals("org.apache.commons.jcs3.engine.behavior.ICacheServiceNonLocal", remoteHttpCacheAttributes0.getRemoteServiceName());
      assertTrue(remoteHttpCacheAttributes0.getRemoveUponRemotePut());
      assertEquals(0, remoteHttpCacheAttributes0.getLocalPort());
      assertNull(remoteHttpCacheAttributes0.getEventQueueType());
      assertFalse(remoteHttpCacheAttributes0.getGetOnly());
      assertTrue(remoteHttpCacheAttributes0.isIncludeRequestTypeasAsParameter());
      assertEquals(1000, remoteHttpCacheAttributes0.getZombieQueueMaxSize());
      assertEquals((-2116), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RemoteHttpCacheAttributes remoteHttpCacheAttributes0 = new RemoteHttpCacheAttributes();
      assertTrue(remoteHttpCacheAttributes0.isIncludeCacheNameAsParameter());
      assertEquals(0, remoteHttpCacheAttributes0.getLocalPort());
      assertEquals(100, remoteHttpCacheAttributes0.getMaxConnectionsPerHost());
      assertEquals("org.apache.commons.jcs3.auxiliary.remote.http.client.RemoteHttpCacheClient", remoteHttpCacheAttributes0.getRemoteHttpClientClassName());
      assertEquals(RemoteType.LOCAL, remoteHttpCacheAttributes0.getRemoteType());
      assertNull(remoteHttpCacheAttributes0.getEventQueueType());
      assertNull(remoteHttpCacheAttributes0.getName());
      assertEquals(0, remoteHttpCacheAttributes0.getFailoverIndex());
      assertEquals((-1), remoteHttpCacheAttributes0.getGetTimeoutMillis());
      assertEquals(1000, remoteHttpCacheAttributes0.getZombieQueueMaxSize());
      assertNull(remoteHttpCacheAttributes0.getUrl());
      assertFalse(remoteHttpCacheAttributes0.isLocalClusterConsistency());
      assertEquals(3000, remoteHttpCacheAttributes0.getSocketTimeoutMillis());
      assertTrue(remoteHttpCacheAttributes0.isReceive());
      assertTrue(remoteHttpCacheAttributes0.isIncludeRequestTypeasAsParameter());
      assertEquals(10000, remoteHttpCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
      assertFalse(remoteHttpCacheAttributes0.getGetOnly());
      assertEquals("", remoteHttpCacheAttributes0.getFailoverServers());
      assertNull(remoteHttpCacheAttributes0.getEventQueuePoolName());
      assertTrue(remoteHttpCacheAttributes0.getRemoveUponRemotePut());
      assertEquals("remote_cache_client", remoteHttpCacheAttributes0.getThreadPoolName());
      assertNull(remoteHttpCacheAttributes0.getCacheName());
      assertTrue(remoteHttpCacheAttributes0.isIncludeKeysAndPatternsAsParameter());
      assertEquals("org.apache.commons.jcs3.engine.behavior.ICacheServiceNonLocal", remoteHttpCacheAttributes0.getRemoteServiceName());
      assertEquals(5000, remoteHttpCacheAttributes0.getConnectionTimeoutMillis());
      assertEquals("", remoteHttpCacheAttributes0.getClusterServers());
      assertEquals("1.1", remoteHttpCacheAttributes0.getHttpVersion());
      assertNotNull(remoteHttpCacheAttributes0);
      
      boolean boolean0 = remoteHttpCacheAttributes0.isIncludeCacheNameAsParameter();
      assertTrue(remoteHttpCacheAttributes0.isIncludeCacheNameAsParameter());
      assertEquals(0, remoteHttpCacheAttributes0.getLocalPort());
      assertEquals(100, remoteHttpCacheAttributes0.getMaxConnectionsPerHost());
      assertEquals("org.apache.commons.jcs3.auxiliary.remote.http.client.RemoteHttpCacheClient", remoteHttpCacheAttributes0.getRemoteHttpClientClassName());
      assertEquals(RemoteType.LOCAL, remoteHttpCacheAttributes0.getRemoteType());
      assertNull(remoteHttpCacheAttributes0.getEventQueueType());
      assertNull(remoteHttpCacheAttributes0.getName());
      assertEquals(0, remoteHttpCacheAttributes0.getFailoverIndex());
      assertEquals((-1), remoteHttpCacheAttributes0.getGetTimeoutMillis());
      assertEquals(1000, remoteHttpCacheAttributes0.getZombieQueueMaxSize());
      assertNull(remoteHttpCacheAttributes0.getUrl());
      assertFalse(remoteHttpCacheAttributes0.isLocalClusterConsistency());
      assertEquals(3000, remoteHttpCacheAttributes0.getSocketTimeoutMillis());
      assertTrue(remoteHttpCacheAttributes0.isReceive());
      assertTrue(remoteHttpCacheAttributes0.isIncludeRequestTypeasAsParameter());
      assertEquals(10000, remoteHttpCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
      assertFalse(remoteHttpCacheAttributes0.getGetOnly());
      assertEquals("", remoteHttpCacheAttributes0.getFailoverServers());
      assertNull(remoteHttpCacheAttributes0.getEventQueuePoolName());
      assertTrue(remoteHttpCacheAttributes0.getRemoveUponRemotePut());
      assertEquals("remote_cache_client", remoteHttpCacheAttributes0.getThreadPoolName());
      assertNull(remoteHttpCacheAttributes0.getCacheName());
      assertTrue(remoteHttpCacheAttributes0.isIncludeKeysAndPatternsAsParameter());
      assertEquals("org.apache.commons.jcs3.engine.behavior.ICacheServiceNonLocal", remoteHttpCacheAttributes0.getRemoteServiceName());
      assertEquals(5000, remoteHttpCacheAttributes0.getConnectionTimeoutMillis());
      assertEquals("", remoteHttpCacheAttributes0.getClusterServers());
      assertEquals("1.1", remoteHttpCacheAttributes0.getHttpVersion());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RemoteHttpCacheAttributes remoteHttpCacheAttributes0 = new RemoteHttpCacheAttributes();
      boolean boolean0 = remoteHttpCacheAttributes0.isIncludeKeysAndPatternsAsParameter();
      assertEquals(100, remoteHttpCacheAttributes0.getMaxConnectionsPerHost());
      assertTrue(remoteHttpCacheAttributes0.isIncludeCacheNameAsParameter());
      assertTrue(boolean0);
      assertTrue(remoteHttpCacheAttributes0.isIncludeRequestTypeasAsParameter());
      assertEquals("1.1", remoteHttpCacheAttributes0.getHttpVersion());
      assertEquals(3000, remoteHttpCacheAttributes0.getSocketTimeoutMillis());
      assertEquals(5000, remoteHttpCacheAttributes0.getConnectionTimeoutMillis());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RemoteHttpCacheAttributes remoteHttpCacheAttributes0 = new RemoteHttpCacheAttributes();
      int int0 = remoteHttpCacheAttributes0.getSocketTimeoutMillis();
      assertTrue(remoteHttpCacheAttributes0.isIncludeRequestTypeasAsParameter());
      assertEquals(3000, int0);
      assertTrue(remoteHttpCacheAttributes0.isIncludeKeysAndPatternsAsParameter());
      assertEquals(5000, remoteHttpCacheAttributes0.getConnectionTimeoutMillis());
      assertTrue(remoteHttpCacheAttributes0.isIncludeCacheNameAsParameter());
      assertEquals("1.1", remoteHttpCacheAttributes0.getHttpVersion());
      assertEquals(100, remoteHttpCacheAttributes0.getMaxConnectionsPerHost());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RemoteHttpCacheAttributes remoteHttpCacheAttributes0 = new RemoteHttpCacheAttributes();
      String string0 = remoteHttpCacheAttributes0.getUrl();
      assertEquals(5000, remoteHttpCacheAttributes0.getConnectionTimeoutMillis());
      assertNull(string0);
      assertEquals("1.1", remoteHttpCacheAttributes0.getHttpVersion());
      assertTrue(remoteHttpCacheAttributes0.isIncludeCacheNameAsParameter());
      assertEquals(100, remoteHttpCacheAttributes0.getMaxConnectionsPerHost());
      assertTrue(remoteHttpCacheAttributes0.isIncludeRequestTypeasAsParameter());
      assertEquals(3000, remoteHttpCacheAttributes0.getSocketTimeoutMillis());
      assertTrue(remoteHttpCacheAttributes0.isIncludeKeysAndPatternsAsParameter());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RemoteHttpCacheAttributes remoteHttpCacheAttributes0 = new RemoteHttpCacheAttributes();
      remoteHttpCacheAttributes0.getRemoteHttpClientClassName();
      assertTrue(remoteHttpCacheAttributes0.isIncludeCacheNameAsParameter());
      assertEquals(5000, remoteHttpCacheAttributes0.getConnectionTimeoutMillis());
      assertEquals("1.1", remoteHttpCacheAttributes0.getHttpVersion());
      assertEquals(3000, remoteHttpCacheAttributes0.getSocketTimeoutMillis());
      assertEquals(100, remoteHttpCacheAttributes0.getMaxConnectionsPerHost());
      assertTrue(remoteHttpCacheAttributes0.isIncludeKeysAndPatternsAsParameter());
      assertTrue(remoteHttpCacheAttributes0.isIncludeRequestTypeasAsParameter());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RemoteHttpCacheAttributes remoteHttpCacheAttributes0 = new RemoteHttpCacheAttributes();
      int int0 = remoteHttpCacheAttributes0.getConnectionTimeoutMillis();
      assertEquals(5000, int0);
      assertEquals("1.1", remoteHttpCacheAttributes0.getHttpVersion());
      assertTrue(remoteHttpCacheAttributes0.isIncludeRequestTypeasAsParameter());
      assertEquals(3000, remoteHttpCacheAttributes0.getSocketTimeoutMillis());
      assertTrue(remoteHttpCacheAttributes0.isIncludeKeysAndPatternsAsParameter());
      assertTrue(remoteHttpCacheAttributes0.isIncludeCacheNameAsParameter());
      assertEquals(100, remoteHttpCacheAttributes0.getMaxConnectionsPerHost());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RemoteHttpCacheAttributes remoteHttpCacheAttributes0 = new RemoteHttpCacheAttributes();
      boolean boolean0 = remoteHttpCacheAttributes0.isIncludeRequestTypeasAsParameter();
      assertEquals(100, remoteHttpCacheAttributes0.getMaxConnectionsPerHost());
      assertTrue(boolean0);
      assertEquals(3000, remoteHttpCacheAttributes0.getSocketTimeoutMillis());
      assertTrue(remoteHttpCacheAttributes0.isIncludeKeysAndPatternsAsParameter());
      assertTrue(remoteHttpCacheAttributes0.isIncludeCacheNameAsParameter());
      assertEquals(5000, remoteHttpCacheAttributes0.getConnectionTimeoutMillis());
      assertEquals("1.1", remoteHttpCacheAttributes0.getHttpVersion());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RemoteHttpCacheAttributes remoteHttpCacheAttributes0 = new RemoteHttpCacheAttributes();
      int int0 = remoteHttpCacheAttributes0.getMaxConnectionsPerHost();
      assertTrue(remoteHttpCacheAttributes0.isIncludeKeysAndPatternsAsParameter());
      assertEquals(3000, remoteHttpCacheAttributes0.getSocketTimeoutMillis());
      assertEquals(5000, remoteHttpCacheAttributes0.getConnectionTimeoutMillis());
      assertEquals(100, int0);
      assertEquals("1.1", remoteHttpCacheAttributes0.getHttpVersion());
      assertTrue(remoteHttpCacheAttributes0.isIncludeCacheNameAsParameter());
      assertTrue(remoteHttpCacheAttributes0.isIncludeRequestTypeasAsParameter());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RemoteHttpCacheAttributes remoteHttpCacheAttributes0 = new RemoteHttpCacheAttributes();
      String string0 = remoteHttpCacheAttributes0.getHttpVersion();
      assertTrue(remoteHttpCacheAttributes0.isIncludeCacheNameAsParameter());
      assertTrue(remoteHttpCacheAttributes0.isIncludeRequestTypeasAsParameter());
      assertTrue(remoteHttpCacheAttributes0.isIncludeKeysAndPatternsAsParameter());
      assertEquals(3000, remoteHttpCacheAttributes0.getSocketTimeoutMillis());
      assertEquals(5000, remoteHttpCacheAttributes0.getConnectionTimeoutMillis());
      assertEquals("1.1", string0);
      assertEquals(100, remoteHttpCacheAttributes0.getMaxConnectionsPerHost());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RemoteHttpCacheAttributes remoteHttpCacheAttributes0 = new RemoteHttpCacheAttributes();
      assertEquals(5000, remoteHttpCacheAttributes0.getConnectionTimeoutMillis());
      
      remoteHttpCacheAttributes0.setConnectionTimeoutMillis(0);
      int int0 = remoteHttpCacheAttributes0.getConnectionTimeoutMillis();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RemoteHttpCacheAttributes remoteHttpCacheAttributes0 = new RemoteHttpCacheAttributes();
      assertEquals(3000, remoteHttpCacheAttributes0.getSocketTimeoutMillis());
      
      remoteHttpCacheAttributes0.setSocketTimeoutMillis(0);
      int int0 = remoteHttpCacheAttributes0.getSocketTimeoutMillis();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RemoteHttpCacheAttributes remoteHttpCacheAttributes0 = new RemoteHttpCacheAttributes();
      assertEquals(100, remoteHttpCacheAttributes0.getMaxConnectionsPerHost());
      
      remoteHttpCacheAttributes0.setMaxConnectionsPerHost(0);
      int int0 = remoteHttpCacheAttributes0.getMaxConnectionsPerHost();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RemoteHttpCacheAttributes remoteHttpCacheAttributes0 = new RemoteHttpCacheAttributes();
      String string0 = remoteHttpCacheAttributes0.toString();
      assertEquals("\n RemoteHttpCacheAttributes\n maxConnectionsPerHost = [100]\n socketTimeoutMillis = [3000]\n httpVersion = [1.1]\n connectionTimeoutMillis = [5000]\n includeCacheNameAsParameter = [true]\n includeKeysAndPatternsAsParameter = [true]\n includeRequestTypeasAsParameter = [true]\n url = [null]\n remoteHttpClientClassName = [org.apache.commons.jcs3.auxiliary.remote.http.client.RemoteHttpCacheClient]\n RemoteCacheAttributes \n cacheName = [null]\n remoteType = [LOCAL]\n removeUponRemotePut = [true]\n getOnly = [false]\n receive = [true]\n getTimeoutMillis = [-1]\n threadPoolName = [remote_cache_client]\n localClusterConsistency = [false]\n zombieQueueMaxSize = [1000]", string0);
  }
}
