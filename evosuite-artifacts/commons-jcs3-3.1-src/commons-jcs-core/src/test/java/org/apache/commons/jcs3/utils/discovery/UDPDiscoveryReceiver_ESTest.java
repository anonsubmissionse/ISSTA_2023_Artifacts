/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 21:29:49 GMT 2022
 */

package org.apache.commons.jcs3.utils.discovery;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetAddress;
import java.net.SocketException;
import org.apache.commons.jcs3.utils.discovery.UDPDiscoveryAttributes;
import org.apache.commons.jcs3.utils.discovery.UDPDiscoveryReceiver;
import org.apache.commons.jcs3.utils.discovery.UDPDiscoveryService;
import org.apache.commons.jcs3.utils.serialization.CompressingSerializer;
import org.apache.commons.jcs3.utils.serialization.StandardSerializer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UDPDiscoveryReceiver_ESTest extends UDPDiscoveryReceiver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("");
      UDPDiscoveryReceiver uDPDiscoveryReceiver0 = null;
      try {
        uDPDiscoveryReceiver0 = new UDPDiscoveryReceiver((UDPDiscoveryService) null, "Received packet from address [{0}]", inetAddress0, 1852);
        fail("Expecting exception: SocketException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CompressingSerializer compressingSerializer0 = new CompressingSerializer();
      byte[] byteArray0 = new byte[4];
      InetAddress inetAddress0 = InetAddress.getByAddress(byteArray0);
      UDPDiscoveryReceiver uDPDiscoveryReceiver0 = null;
      try {
        uDPDiscoveryReceiver0 = new UDPDiscoveryReceiver((UDPDiscoveryService) null, (String) null, inetAddress0, 0);
        fail("Expecting exception: SocketException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      UDPDiscoveryAttributes uDPDiscoveryAttributes0 = new UDPDiscoveryAttributes();
      StandardSerializer standardSerializer0 = new StandardSerializer();
      UDPDiscoveryService uDPDiscoveryService0 = new UDPDiscoveryService(uDPDiscoveryAttributes0, standardSerializer0);
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      UDPDiscoveryReceiver uDPDiscoveryReceiver0 = null;
      try {
        uDPDiscoveryReceiver0 = new UDPDiscoveryReceiver(uDPDiscoveryService0, "org.apache.commons.jcs3.engine.control.CompositeCacheConfigurator", inetAddress0, (-358));
        fail("Expecting exception: SocketException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      UDPDiscoveryReceiver uDPDiscoveryReceiver0 = null;
      try {
        uDPDiscoveryReceiver0 = new UDPDiscoveryReceiver((UDPDiscoveryService) null, "V+k9TJ0wLo(pr]gBA", "V+k9TJ0wLo(pr]gBA", 1024);
        fail("Expecting exception: SocketException");
      
      } catch(Throwable e) {
      }
  }
}
