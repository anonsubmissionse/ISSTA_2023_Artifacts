/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 22:01:17 GMT 2022
 */

package org.apache.commons.jcs3.engine;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.jcs3.engine.CompositeCacheAttributes;
import org.apache.commons.jcs3.engine.behavior.ICompositeCacheAttributes;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompositeCacheAttributes_ESTest extends CompositeCacheAttributes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CompositeCacheAttributes compositeCacheAttributes0 = new CompositeCacheAttributes();
      assertTrue(compositeCacheAttributes0.isUseRemote());
      
      compositeCacheAttributes0.setUseRemote(false);
      boolean boolean0 = compositeCacheAttributes0.isUseRemote();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CompositeCacheAttributes compositeCacheAttributes0 = new CompositeCacheAttributes();
      assertFalse(compositeCacheAttributes0.isUseMemoryShrinker());
      
      compositeCacheAttributes0.setUseMemoryShrinker(true);
      boolean boolean0 = compositeCacheAttributes0.isUseMemoryShrinker();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CompositeCacheAttributes compositeCacheAttributes0 = new CompositeCacheAttributes();
      assertTrue(compositeCacheAttributes0.isUseLateral());
      
      compositeCacheAttributes0.setUseLateral(false);
      boolean boolean0 = compositeCacheAttributes0.isUseLateral();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CompositeCacheAttributes compositeCacheAttributes0 = new CompositeCacheAttributes();
      assertTrue(compositeCacheAttributes0.isUseDisk());
      
      compositeCacheAttributes0.setUseDisk(false);
      boolean boolean0 = compositeCacheAttributes0.isUseDisk();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CompositeCacheAttributes compositeCacheAttributes0 = new CompositeCacheAttributes();
      assertEquals(2, compositeCacheAttributes0.getSpoolChunkSize());
      
      compositeCacheAttributes0.setSpoolChunkSize(0);
      int int0 = compositeCacheAttributes0.getSpoolChunkSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CompositeCacheAttributes compositeCacheAttributes0 = new CompositeCacheAttributes();
      compositeCacheAttributes0.setSpoolChunkSize((-5928));
      int int0 = compositeCacheAttributes0.getSpoolChunkSize();
      assertEquals((-5928), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CompositeCacheAttributes compositeCacheAttributes0 = new CompositeCacheAttributes();
      assertEquals(30L, compositeCacheAttributes0.getShrinkerIntervalSeconds());
      
      compositeCacheAttributes0.setShrinkerIntervalSeconds(0L);
      compositeCacheAttributes0.getShrinkerIntervalSeconds();
      assertTrue(compositeCacheAttributes0.isUseDisk());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CompositeCacheAttributes compositeCacheAttributes0 = new CompositeCacheAttributes();
      compositeCacheAttributes0.setShrinkerIntervalSeconds((-974L));
      long long0 = compositeCacheAttributes0.getShrinkerIntervalSeconds();
      assertEquals((-974L), long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CompositeCacheAttributes compositeCacheAttributes0 = new CompositeCacheAttributes();
      assertEquals("org.apache.commons.jcs3.engine.memory.lru.LRUMemoryCache", compositeCacheAttributes0.getMemoryCacheName());
      
      compositeCacheAttributes0.setMemoryCacheName((String) null);
      compositeCacheAttributes0.getMemoryCacheName();
      assertTrue(compositeCacheAttributes0.isUseDisk());
      assertEquals(2, compositeCacheAttributes0.getSpoolChunkSize());
      assertEquals(7200L, compositeCacheAttributes0.getMaxMemoryIdleTimeSeconds());
      assertEquals(30L, compositeCacheAttributes0.getShrinkerIntervalSeconds());
      assertFalse(compositeCacheAttributes0.isUseMemoryShrinker());
      assertTrue(compositeCacheAttributes0.isUseRemote());
      assertEquals(100, compositeCacheAttributes0.getMaxObjects());
      assertEquals((-1), compositeCacheAttributes0.getMaxSpoolPerRun());
      assertTrue(compositeCacheAttributes0.isUseLateral());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CompositeCacheAttributes compositeCacheAttributes0 = new CompositeCacheAttributes();
      assertEquals("org.apache.commons.jcs3.engine.memory.lru.LRUMemoryCache", compositeCacheAttributes0.getMemoryCacheName());
      
      compositeCacheAttributes0.setMemoryCacheName("");
      compositeCacheAttributes0.getMemoryCacheName();
      assertEquals(7200L, compositeCacheAttributes0.getMaxMemoryIdleTimeSeconds());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CompositeCacheAttributes compositeCacheAttributes0 = new CompositeCacheAttributes();
      assertEquals((-1), compositeCacheAttributes0.getMaxSpoolPerRun());
      
      compositeCacheAttributes0.setMaxSpoolPerRun(0);
      int int0 = compositeCacheAttributes0.getMaxSpoolPerRun();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CompositeCacheAttributes compositeCacheAttributes0 = new CompositeCacheAttributes();
      compositeCacheAttributes0.setMaxSpoolPerRun(100);
      int int0 = compositeCacheAttributes0.getMaxSpoolPerRun();
      assertEquals(100, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CompositeCacheAttributes compositeCacheAttributes0 = new CompositeCacheAttributes();
      assertEquals(100, compositeCacheAttributes0.getMaxObjects());
      
      compositeCacheAttributes0.setMaxObjects(0);
      int int0 = compositeCacheAttributes0.getMaxObjects();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CompositeCacheAttributes compositeCacheAttributes0 = new CompositeCacheAttributes();
      compositeCacheAttributes0.setMaxObjects((-887));
      int int0 = compositeCacheAttributes0.getMaxObjects();
      assertEquals((-887), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CompositeCacheAttributes compositeCacheAttributes0 = new CompositeCacheAttributes();
      assertEquals(7200L, compositeCacheAttributes0.getMaxMemoryIdleTimeSeconds());
      
      compositeCacheAttributes0.setMaxMemoryIdleTimeSeconds(0L);
      compositeCacheAttributes0.getMaxMemoryIdleTimeSeconds();
      assertTrue(compositeCacheAttributes0.isUseDisk());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CompositeCacheAttributes compositeCacheAttributes0 = new CompositeCacheAttributes();
      compositeCacheAttributes0.setMaxMemoryIdleTimeSeconds((-1169L));
      long long0 = compositeCacheAttributes0.getMaxMemoryIdleTimeSeconds();
      assertEquals((-1169L), long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CompositeCacheAttributes compositeCacheAttributes0 = new CompositeCacheAttributes();
      compositeCacheAttributes0.setDiskUsagePattern((ICompositeCacheAttributes.DiskUsagePattern) null);
      compositeCacheAttributes0.getDiskUsagePattern();
      assertEquals(2, compositeCacheAttributes0.getSpoolChunkSize());
      assertEquals(7200L, compositeCacheAttributes0.getMaxMemoryIdleTimeSeconds());
      assertTrue(compositeCacheAttributes0.isUseLateral());
      assertTrue(compositeCacheAttributes0.isUseDisk());
      assertTrue(compositeCacheAttributes0.isUseRemote());
      assertFalse(compositeCacheAttributes0.isUseMemoryShrinker());
      assertEquals(100, compositeCacheAttributes0.getMaxObjects());
      assertEquals("org.apache.commons.jcs3.engine.memory.lru.LRUMemoryCache", compositeCacheAttributes0.getMemoryCacheName());
      assertEquals((-1), compositeCacheAttributes0.getMaxSpoolPerRun());
      assertEquals(30L, compositeCacheAttributes0.getShrinkerIntervalSeconds());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CompositeCacheAttributes compositeCacheAttributes0 = new CompositeCacheAttributes();
      compositeCacheAttributes0.setCacheName("SWAP");
      compositeCacheAttributes0.getCacheName();
      assertEquals(30L, compositeCacheAttributes0.getShrinkerIntervalSeconds());
      assertEquals("org.apache.commons.jcs3.engine.memory.lru.LRUMemoryCache", compositeCacheAttributes0.getMemoryCacheName());
      assertTrue(compositeCacheAttributes0.isUseRemote());
      assertEquals(100, compositeCacheAttributes0.getMaxObjects());
      assertEquals(7200L, compositeCacheAttributes0.getMaxMemoryIdleTimeSeconds());
      assertTrue(compositeCacheAttributes0.isUseLateral());
      assertEquals(2, compositeCacheAttributes0.getSpoolChunkSize());
      assertFalse(compositeCacheAttributes0.isUseMemoryShrinker());
      assertTrue(compositeCacheAttributes0.isUseDisk());
      assertEquals((-1), compositeCacheAttributes0.getMaxSpoolPerRun());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CompositeCacheAttributes compositeCacheAttributes0 = new CompositeCacheAttributes();
      compositeCacheAttributes0.setCacheName("");
      compositeCacheAttributes0.getCacheName();
      assertEquals(100, compositeCacheAttributes0.getMaxObjects());
      assertEquals(30L, compositeCacheAttributes0.getShrinkerIntervalSeconds());
      assertEquals((-1), compositeCacheAttributes0.getMaxSpoolPerRun());
      assertTrue(compositeCacheAttributes0.isUseRemote());
      assertEquals("org.apache.commons.jcs3.engine.memory.lru.LRUMemoryCache", compositeCacheAttributes0.getMemoryCacheName());
      assertTrue(compositeCacheAttributes0.isUseLateral());
      assertEquals(7200L, compositeCacheAttributes0.getMaxMemoryIdleTimeSeconds());
      assertFalse(compositeCacheAttributes0.isUseMemoryShrinker());
      assertEquals(2, compositeCacheAttributes0.getSpoolChunkSize());
      assertTrue(compositeCacheAttributes0.isUseDisk());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CompositeCacheAttributes compositeCacheAttributes0 = new CompositeCacheAttributes();
      assertTrue(compositeCacheAttributes0.isUseDisk());
      
      compositeCacheAttributes0.setUseDisk(false);
      compositeCacheAttributes0.clone();
      assertFalse(compositeCacheAttributes0.isUseDisk());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CompositeCacheAttributes compositeCacheAttributes0 = new CompositeCacheAttributes();
      assertEquals(2, compositeCacheAttributes0.getSpoolChunkSize());
      
      compositeCacheAttributes0.setSpoolChunkSize(0);
      compositeCacheAttributes0.clone();
      assertEquals(30L, compositeCacheAttributes0.getShrinkerIntervalSeconds());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CompositeCacheAttributes compositeCacheAttributes0 = new CompositeCacheAttributes();
      compositeCacheAttributes0.setSpoolChunkSize((-5928));
      compositeCacheAttributes0.clone();
      assertEquals((-5928), compositeCacheAttributes0.getSpoolChunkSize());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CompositeCacheAttributes compositeCacheAttributes0 = new CompositeCacheAttributes();
      compositeCacheAttributes0.setShrinkerIntervalSeconds((-2801L));
      compositeCacheAttributes0.clone();
      assertEquals((-2801L), compositeCacheAttributes0.getShrinkerIntervalSeconds());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CompositeCacheAttributes compositeCacheAttributes0 = new CompositeCacheAttributes();
      assertEquals((-1), compositeCacheAttributes0.getMaxSpoolPerRun());
      
      compositeCacheAttributes0.setMaxSpoolPerRun(0);
      compositeCacheAttributes0.clone();
      assertEquals(0, compositeCacheAttributes0.getMaxSpoolPerRun());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CompositeCacheAttributes compositeCacheAttributes0 = new CompositeCacheAttributes();
      compositeCacheAttributes0.setMaxSpoolPerRun(100);
      compositeCacheAttributes0.clone();
      assertEquals(100, compositeCacheAttributes0.getMaxSpoolPerRun());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CompositeCacheAttributes compositeCacheAttributes0 = new CompositeCacheAttributes();
      assertEquals(100, compositeCacheAttributes0.getMaxObjects());
      
      compositeCacheAttributes0.setMaxObjects(0);
      compositeCacheAttributes0.clone();
      assertEquals(0, compositeCacheAttributes0.getMaxObjects());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CompositeCacheAttributes compositeCacheAttributes0 = new CompositeCacheAttributes();
      assertEquals(7200L, compositeCacheAttributes0.getMaxMemoryIdleTimeSeconds());
      
      compositeCacheAttributes0.setMaxMemoryIdleTimeSeconds(0L);
      compositeCacheAttributes0.clone();
      assertEquals(2, compositeCacheAttributes0.getSpoolChunkSize());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CompositeCacheAttributes compositeCacheAttributes0 = new CompositeCacheAttributes();
      compositeCacheAttributes0.setMaxMemoryIdleTimeSeconds((-1169L));
      compositeCacheAttributes0.clone();
      assertEquals((-1169L), compositeCacheAttributes0.getMaxMemoryIdleTimeSeconds());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CompositeCacheAttributes compositeCacheAttributes0 = new CompositeCacheAttributes();
      compositeCacheAttributes0.setDiskUsagePatternName("SWARS");
      assertTrue(compositeCacheAttributes0.isUseLateral());
      assertEquals(2, compositeCacheAttributes0.getSpoolChunkSize());
      assertFalse(compositeCacheAttributes0.isUseMemoryShrinker());
      assertEquals((-1), compositeCacheAttributes0.getMaxSpoolPerRun());
      assertTrue(compositeCacheAttributes0.isUseDisk());
      assertEquals(100, compositeCacheAttributes0.getMaxObjects());
      assertEquals(ICompositeCacheAttributes.DiskUsagePattern.SWAP, compositeCacheAttributes0.getDiskUsagePattern());
      assertEquals("org.apache.commons.jcs3.engine.memory.lru.LRUMemoryCache", compositeCacheAttributes0.getMemoryCacheName());
      assertTrue(compositeCacheAttributes0.isUseRemote());
      assertEquals(30L, compositeCacheAttributes0.getShrinkerIntervalSeconds());
      assertEquals(7200L, compositeCacheAttributes0.getMaxMemoryIdleTimeSeconds());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CompositeCacheAttributes compositeCacheAttributes0 = new CompositeCacheAttributes();
      compositeCacheAttributes0.setDiskUsagePatternName("SWAP");
      assertFalse(compositeCacheAttributes0.isUseMemoryShrinker());
      assertTrue(compositeCacheAttributes0.isUseLateral());
      assertEquals(2, compositeCacheAttributes0.getSpoolChunkSize());
      assertTrue(compositeCacheAttributes0.isUseDisk());
      assertEquals((-1), compositeCacheAttributes0.getMaxSpoolPerRun());
      assertTrue(compositeCacheAttributes0.isUseRemote());
      assertEquals("org.apache.commons.jcs3.engine.memory.lru.LRUMemoryCache", compositeCacheAttributes0.getMemoryCacheName());
      assertEquals(100, compositeCacheAttributes0.getMaxObjects());
      assertEquals(7200L, compositeCacheAttributes0.getMaxMemoryIdleTimeSeconds());
      assertEquals(30L, compositeCacheAttributes0.getShrinkerIntervalSeconds());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CompositeCacheAttributes compositeCacheAttributes0 = new CompositeCacheAttributes();
      compositeCacheAttributes0.setDiskUsagePatternName((String) null);
      assertEquals(100, compositeCacheAttributes0.getMaxObjects());
      assertEquals("org.apache.commons.jcs3.engine.memory.lru.LRUMemoryCache", compositeCacheAttributes0.getMemoryCacheName());
      assertEquals(30L, compositeCacheAttributes0.getShrinkerIntervalSeconds());
      assertEquals((-1), compositeCacheAttributes0.getMaxSpoolPerRun());
      assertTrue(compositeCacheAttributes0.isUseLateral());
      assertEquals(2, compositeCacheAttributes0.getSpoolChunkSize());
      assertTrue(compositeCacheAttributes0.isUseDisk());
      assertEquals(7200L, compositeCacheAttributes0.getMaxMemoryIdleTimeSeconds());
      assertTrue(compositeCacheAttributes0.isUseRemote());
      assertFalse(compositeCacheAttributes0.isUseMemoryShrinker());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CompositeCacheAttributes compositeCacheAttributes0 = new CompositeCacheAttributes();
      long long0 = compositeCacheAttributes0.getMaxMemoryIdleTimeSeconds();
      assertEquals(2, compositeCacheAttributes0.getSpoolChunkSize());
      assertTrue(compositeCacheAttributes0.isUseLateral());
      assertFalse(compositeCacheAttributes0.isUseMemoryShrinker());
      assertTrue(compositeCacheAttributes0.isUseRemote());
      assertEquals(30L, compositeCacheAttributes0.getShrinkerIntervalSeconds());
      assertEquals(100, compositeCacheAttributes0.getMaxObjects());
      assertEquals((-1), compositeCacheAttributes0.getMaxSpoolPerRun());
      assertEquals("org.apache.commons.jcs3.engine.memory.lru.LRUMemoryCache", compositeCacheAttributes0.getMemoryCacheName());
      assertEquals(7200L, long0);
      assertTrue(compositeCacheAttributes0.isUseDisk());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CompositeCacheAttributes compositeCacheAttributes0 = new CompositeCacheAttributes();
      assertFalse(compositeCacheAttributes0.isUseMemoryShrinker());
      
      compositeCacheAttributes0.setUseMemoryShrinker(true);
      compositeCacheAttributes0.clone();
      assertTrue(compositeCacheAttributes0.isUseMemoryShrinker());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CompositeCacheAttributes compositeCacheAttributes0 = new CompositeCacheAttributes();
      long long0 = compositeCacheAttributes0.getShrinkerIntervalSeconds();
      assertTrue(compositeCacheAttributes0.isUseDisk());
      assertTrue(compositeCacheAttributes0.isUseLateral());
      assertTrue(compositeCacheAttributes0.isUseRemote());
      assertFalse(compositeCacheAttributes0.isUseMemoryShrinker());
      assertEquals(2, compositeCacheAttributes0.getSpoolChunkSize());
      assertEquals(30L, long0);
      assertEquals((-1), compositeCacheAttributes0.getMaxSpoolPerRun());
      assertEquals(100, compositeCacheAttributes0.getMaxObjects());
      assertEquals("org.apache.commons.jcs3.engine.memory.lru.LRUMemoryCache", compositeCacheAttributes0.getMemoryCacheName());
      assertEquals(7200L, compositeCacheAttributes0.getMaxMemoryIdleTimeSeconds());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CompositeCacheAttributes compositeCacheAttributes0 = new CompositeCacheAttributes();
      int int0 = compositeCacheAttributes0.getMaxSpoolPerRun();
      assertEquals(30L, compositeCacheAttributes0.getShrinkerIntervalSeconds());
      assertTrue(compositeCacheAttributes0.isUseRemote());
      assertEquals(100, compositeCacheAttributes0.getMaxObjects());
      assertEquals("org.apache.commons.jcs3.engine.memory.lru.LRUMemoryCache", compositeCacheAttributes0.getMemoryCacheName());
      assertEquals((-1), int0);
      assertEquals(7200L, compositeCacheAttributes0.getMaxMemoryIdleTimeSeconds());
      assertFalse(compositeCacheAttributes0.isUseMemoryShrinker());
      assertTrue(compositeCacheAttributes0.isUseLateral());
      assertTrue(compositeCacheAttributes0.isUseDisk());
      assertEquals(2, compositeCacheAttributes0.getSpoolChunkSize());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CompositeCacheAttributes compositeCacheAttributes0 = new CompositeCacheAttributes();
      boolean boolean0 = compositeCacheAttributes0.isUseLateral();
      assertTrue(compositeCacheAttributes0.isUseRemote());
      assertEquals(30L, compositeCacheAttributes0.getShrinkerIntervalSeconds());
      assertEquals("org.apache.commons.jcs3.engine.memory.lru.LRUMemoryCache", compositeCacheAttributes0.getMemoryCacheName());
      assertEquals(7200L, compositeCacheAttributes0.getMaxMemoryIdleTimeSeconds());
      assertEquals(100, compositeCacheAttributes0.getMaxObjects());
      assertTrue(boolean0);
      assertFalse(compositeCacheAttributes0.isUseMemoryShrinker());
      assertEquals((-1), compositeCacheAttributes0.getMaxSpoolPerRun());
      assertEquals(2, compositeCacheAttributes0.getSpoolChunkSize());
      assertTrue(compositeCacheAttributes0.isUseDisk());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CompositeCacheAttributes compositeCacheAttributes0 = new CompositeCacheAttributes();
      compositeCacheAttributes0.getCacheName();
      assertTrue(compositeCacheAttributes0.isUseDisk());
      assertEquals(2, compositeCacheAttributes0.getSpoolChunkSize());
      assertTrue(compositeCacheAttributes0.isUseRemote());
      assertEquals(7200L, compositeCacheAttributes0.getMaxMemoryIdleTimeSeconds());
      assertFalse(compositeCacheAttributes0.isUseMemoryShrinker());
      assertEquals(30L, compositeCacheAttributes0.getShrinkerIntervalSeconds());
      assertEquals("org.apache.commons.jcs3.engine.memory.lru.LRUMemoryCache", compositeCacheAttributes0.getMemoryCacheName());
      assertEquals(100, compositeCacheAttributes0.getMaxObjects());
      assertEquals((-1), compositeCacheAttributes0.getMaxSpoolPerRun());
      assertTrue(compositeCacheAttributes0.isUseLateral());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CompositeCacheAttributes compositeCacheAttributes0 = new CompositeCacheAttributes();
      assertTrue(compositeCacheAttributes0.isUseLateral());
      
      compositeCacheAttributes0.setUseLateral(false);
      compositeCacheAttributes0.clone();
      assertFalse(compositeCacheAttributes0.isUseLateral());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CompositeCacheAttributes compositeCacheAttributes0 = new CompositeCacheAttributes();
      assertTrue(compositeCacheAttributes0.isUseRemote());
      
      compositeCacheAttributes0.setUseRemote(false);
      compositeCacheAttributes0.clone();
      assertFalse(compositeCacheAttributes0.isUseRemote());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CompositeCacheAttributes compositeCacheAttributes0 = new CompositeCacheAttributes();
      int int0 = compositeCacheAttributes0.getSpoolChunkSize();
      assertEquals(30L, compositeCacheAttributes0.getShrinkerIntervalSeconds());
      assertEquals("org.apache.commons.jcs3.engine.memory.lru.LRUMemoryCache", compositeCacheAttributes0.getMemoryCacheName());
      assertEquals(100, compositeCacheAttributes0.getMaxObjects());
      assertEquals(7200L, compositeCacheAttributes0.getMaxMemoryIdleTimeSeconds());
      assertFalse(compositeCacheAttributes0.isUseMemoryShrinker());
      assertTrue(compositeCacheAttributes0.isUseLateral());
      assertEquals(2, int0);
      assertTrue(compositeCacheAttributes0.isUseDisk());
      assertEquals((-1), compositeCacheAttributes0.getMaxSpoolPerRun());
      assertTrue(compositeCacheAttributes0.isUseRemote());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CompositeCacheAttributes compositeCacheAttributes0 = new CompositeCacheAttributes();
      int int0 = compositeCacheAttributes0.getMaxObjects();
      assertEquals(100, int0);
      assertEquals(7200L, compositeCacheAttributes0.getMaxMemoryIdleTimeSeconds());
      assertFalse(compositeCacheAttributes0.isUseMemoryShrinker());
      assertTrue(compositeCacheAttributes0.isUseLateral());
      assertEquals(2, compositeCacheAttributes0.getSpoolChunkSize());
      assertTrue(compositeCacheAttributes0.isUseDisk());
      assertEquals((-1), compositeCacheAttributes0.getMaxSpoolPerRun());
      assertEquals(30L, compositeCacheAttributes0.getShrinkerIntervalSeconds());
      assertTrue(compositeCacheAttributes0.isUseRemote());
      assertEquals("org.apache.commons.jcs3.engine.memory.lru.LRUMemoryCache", compositeCacheAttributes0.getMemoryCacheName());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CompositeCacheAttributes compositeCacheAttributes0 = new CompositeCacheAttributes();
      assertEquals(30L, compositeCacheAttributes0.getShrinkerIntervalSeconds());
      
      compositeCacheAttributes0.setShrinkerIntervalSeconds(0L);
      compositeCacheAttributes0.clone();
      assertTrue(compositeCacheAttributes0.isUseLateral());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CompositeCacheAttributes compositeCacheAttributes0 = new CompositeCacheAttributes();
      compositeCacheAttributes0.setMaxObjects((-834));
      compositeCacheAttributes0.clone();
      assertEquals((-834), compositeCacheAttributes0.getMaxObjects());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CompositeCacheAttributes compositeCacheAttributes0 = new CompositeCacheAttributes();
      String string0 = compositeCacheAttributes0.toString();
      assertEquals(7200L, compositeCacheAttributes0.getMaxMemoryIdleTimeSeconds());
      assertEquals(30L, compositeCacheAttributes0.getShrinkerIntervalSeconds());
      assertEquals("org.apache.commons.jcs3.engine.memory.lru.LRUMemoryCache", compositeCacheAttributes0.getMemoryCacheName());
      assertFalse(compositeCacheAttributes0.isUseMemoryShrinker());
      assertEquals("[ useLateral = true, useRemote = true, useDisk = true, maxObjs = 100, maxSpoolPerRun = -1, diskUsagePattern = SWAP, spoolChunkSize = 2 ]", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CompositeCacheAttributes compositeCacheAttributes0 = new CompositeCacheAttributes();
      boolean boolean0 = compositeCacheAttributes0.isUseRemote();
      assertEquals(7200L, compositeCacheAttributes0.getMaxMemoryIdleTimeSeconds());
      assertTrue(compositeCacheAttributes0.isUseLateral());
      assertEquals(2, compositeCacheAttributes0.getSpoolChunkSize());
      assertTrue(compositeCacheAttributes0.isUseDisk());
      assertTrue(boolean0);
      assertEquals("org.apache.commons.jcs3.engine.memory.lru.LRUMemoryCache", compositeCacheAttributes0.getMemoryCacheName());
      assertEquals(30L, compositeCacheAttributes0.getShrinkerIntervalSeconds());
      assertEquals((-1), compositeCacheAttributes0.getMaxSpoolPerRun());
      assertEquals(100, compositeCacheAttributes0.getMaxObjects());
      assertFalse(compositeCacheAttributes0.isUseMemoryShrinker());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CompositeCacheAttributes compositeCacheAttributes0 = new CompositeCacheAttributes();
      compositeCacheAttributes0.getDiskUsagePattern();
      assertEquals(30L, compositeCacheAttributes0.getShrinkerIntervalSeconds());
      assertTrue(compositeCacheAttributes0.isUseDisk());
      assertEquals(100, compositeCacheAttributes0.getMaxObjects());
      assertEquals("org.apache.commons.jcs3.engine.memory.lru.LRUMemoryCache", compositeCacheAttributes0.getMemoryCacheName());
      assertEquals(2, compositeCacheAttributes0.getSpoolChunkSize());
      assertTrue(compositeCacheAttributes0.isUseRemote());
      assertFalse(compositeCacheAttributes0.isUseMemoryShrinker());
      assertEquals((-1), compositeCacheAttributes0.getMaxSpoolPerRun());
      assertEquals(7200L, compositeCacheAttributes0.getMaxMemoryIdleTimeSeconds());
      assertTrue(compositeCacheAttributes0.isUseLateral());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CompositeCacheAttributes compositeCacheAttributes0 = new CompositeCacheAttributes();
      compositeCacheAttributes0.setDiskUsagePatternName("UPDATE[ =SLATERAL = TREg USEREMOTE = TRUE, USEDISK = TRUE, MAXTBJS = 100, MAXSPOOPERRUN = -1v DISKUSAGEPATTERN = SWAP, S4OOLCHUNKSIZE = 2 ]");
      assertEquals(ICompositeCacheAttributes.DiskUsagePattern.UPDATE, compositeCacheAttributes0.getDiskUsagePattern());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CompositeCacheAttributes compositeCacheAttributes0 = new CompositeCacheAttributes();
      boolean boolean0 = compositeCacheAttributes0.isUseDisk();
      assertTrue(compositeCacheAttributes0.isUseRemote());
      assertTrue(compositeCacheAttributes0.isUseLateral());
      assertEquals(100, compositeCacheAttributes0.getMaxObjects());
      assertEquals(7200L, compositeCacheAttributes0.getMaxMemoryIdleTimeSeconds());
      assertEquals(30L, compositeCacheAttributes0.getShrinkerIntervalSeconds());
      assertEquals("org.apache.commons.jcs3.engine.memory.lru.LRUMemoryCache", compositeCacheAttributes0.getMemoryCacheName());
      assertTrue(boolean0);
      assertFalse(compositeCacheAttributes0.isUseMemoryShrinker());
      assertEquals(2, compositeCacheAttributes0.getSpoolChunkSize());
      assertEquals((-1), compositeCacheAttributes0.getMaxSpoolPerRun());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CompositeCacheAttributes compositeCacheAttributes0 = new CompositeCacheAttributes();
      boolean boolean0 = compositeCacheAttributes0.isUseMemoryShrinker();
      assertEquals(7200L, compositeCacheAttributes0.getMaxMemoryIdleTimeSeconds());
      assertTrue(compositeCacheAttributes0.isUseLateral());
      assertTrue(compositeCacheAttributes0.isUseDisk());
      assertEquals((-1), compositeCacheAttributes0.getMaxSpoolPerRun());
      assertEquals(2, compositeCacheAttributes0.getSpoolChunkSize());
      assertTrue(compositeCacheAttributes0.isUseRemote());
      assertEquals(30L, compositeCacheAttributes0.getShrinkerIntervalSeconds());
      assertEquals("org.apache.commons.jcs3.engine.memory.lru.LRUMemoryCache", compositeCacheAttributes0.getMemoryCacheName());
      assertEquals(100, compositeCacheAttributes0.getMaxObjects());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CompositeCacheAttributes compositeCacheAttributes0 = new CompositeCacheAttributes();
      String string0 = compositeCacheAttributes0.getMemoryCacheName();
      assertEquals(7200L, compositeCacheAttributes0.getMaxMemoryIdleTimeSeconds());
      assertTrue(compositeCacheAttributes0.isUseLateral());
      assertEquals(2, compositeCacheAttributes0.getSpoolChunkSize());
      assertTrue(compositeCacheAttributes0.isUseDisk());
      assertEquals("org.apache.commons.jcs3.engine.memory.lru.LRUMemoryCache", string0);
      assertTrue(compositeCacheAttributes0.isUseRemote());
      assertFalse(compositeCacheAttributes0.isUseMemoryShrinker());
      assertEquals(30L, compositeCacheAttributes0.getShrinkerIntervalSeconds());
      assertEquals((-1), compositeCacheAttributes0.getMaxSpoolPerRun());
      assertEquals(100, compositeCacheAttributes0.getMaxObjects());
  }
}
