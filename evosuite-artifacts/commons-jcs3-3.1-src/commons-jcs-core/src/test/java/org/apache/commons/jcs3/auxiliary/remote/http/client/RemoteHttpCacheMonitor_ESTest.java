/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 21:55:06 GMT 2022
 */

package org.apache.commons.jcs3.auxiliary.remote.http.client;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.jcs3.auxiliary.remote.behavior.IRemoteCacheListener;
import org.apache.commons.jcs3.auxiliary.remote.http.client.RemoteHttpCache;
import org.apache.commons.jcs3.auxiliary.remote.http.client.RemoteHttpCacheAttributes;
import org.apache.commons.jcs3.auxiliary.remote.http.client.RemoteHttpCacheFactory;
import org.apache.commons.jcs3.auxiliary.remote.http.client.RemoteHttpCacheMonitor;
import org.apache.commons.jcs3.engine.ZombieCacheServiceNonLocal;
import org.apache.commons.jcs3.engine.behavior.ICacheServiceNonLocal;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RemoteHttpCacheMonitor_ESTest extends RemoteHttpCacheMonitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RemoteHttpCacheFactory remoteHttpCacheFactory0 = new RemoteHttpCacheFactory();
      RemoteHttpCacheMonitor remoteHttpCacheMonitor0 = new RemoteHttpCacheMonitor(remoteHttpCacheFactory0);
      // Undeclared exception!
      try { 
        remoteHttpCacheMonitor0.notifyError((RemoteHttpCache<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RemoteHttpCacheFactory remoteHttpCacheFactory0 = new RemoteHttpCacheFactory();
      RemoteHttpCacheMonitor remoteHttpCacheMonitor0 = new RemoteHttpCacheMonitor(remoteHttpCacheFactory0);
      RemoteHttpCacheAttributes remoteHttpCacheAttributes0 = new RemoteHttpCacheAttributes();
      RemoteHttpCache<String, String> remoteHttpCache0 = new RemoteHttpCache<String, String>(remoteHttpCacheAttributes0, (ICacheServiceNonLocal<String, String>) null, (IRemoteCacheListener<String, String>) null, remoteHttpCacheMonitor0);
      remoteHttpCacheMonitor0.notifyError(remoteHttpCache0);
      remoteHttpCacheMonitor0.doWork();
      assertEquals(0, remoteHttpCacheMonitor0.countStackFrames());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RemoteHttpCacheMonitor remoteHttpCacheMonitor0 = new RemoteHttpCacheMonitor((RemoteHttpCacheFactory) null);
      remoteHttpCacheMonitor0.doWork();
      assertFalse(remoteHttpCacheMonitor0.isInterrupted());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RemoteHttpCacheFactory remoteHttpCacheFactory0 = new RemoteHttpCacheFactory();
      RemoteHttpCacheMonitor remoteHttpCacheMonitor0 = new RemoteHttpCacheMonitor(remoteHttpCacheFactory0);
      RemoteHttpCacheAttributes remoteHttpCacheAttributes0 = new RemoteHttpCacheAttributes();
      ZombieCacheServiceNonLocal<String, String> zombieCacheServiceNonLocal0 = new ZombieCacheServiceNonLocal<String, String>(0);
      RemoteHttpCache<String, String> remoteHttpCache0 = new RemoteHttpCache<String, String>(remoteHttpCacheAttributes0, zombieCacheServiceNonLocal0, (IRemoteCacheListener<String, String>) null, remoteHttpCacheMonitor0);
      remoteHttpCacheMonitor0.notifyError(remoteHttpCache0);
      // Undeclared exception!
      remoteHttpCacheMonitor0.doWork();
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      RemoteHttpCacheFactory remoteHttpCacheFactory0 = new RemoteHttpCacheFactory();
      RemoteHttpCacheMonitor remoteHttpCacheMonitor0 = new RemoteHttpCacheMonitor(remoteHttpCacheFactory0);
      remoteHttpCacheMonitor0.dispose();
      //  // Unstable assertion: assertFalse(remoteHttpCacheMonitor0.isDaemon());
  }
}
