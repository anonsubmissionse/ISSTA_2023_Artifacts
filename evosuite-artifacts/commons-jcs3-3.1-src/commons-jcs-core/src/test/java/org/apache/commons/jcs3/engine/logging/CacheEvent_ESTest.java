/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 21:56:45 GMT 2022
 */

package org.apache.commons.jcs3.engine.logging;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.jcs3.engine.logging.CacheEvent;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CacheEvent_ESTest extends CacheEvent_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CacheEvent<String> cacheEvent0 = new CacheEvent<String>();
      cacheEvent0.setSource("CacSeEvet+0: ");
      String string0 = cacheEvent0.getSource();
      assertEquals("CacSeEvet+0: ", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CacheEvent<String> cacheEvent0 = new CacheEvent<String>();
      cacheEvent0.setSource("");
      String string0 = cacheEvent0.getSource();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CacheEvent<Object> cacheEvent0 = new CacheEvent<Object>();
      cacheEvent0.setRegion("S}V3");
      String string0 = cacheEvent0.getRegion();
      assertEquals("S}V3", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CacheEvent<Object> cacheEvent0 = new CacheEvent<Object>();
      cacheEvent0.setRegion("");
      String string0 = cacheEvent0.getRegion();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CacheEvent<String> cacheEvent0 = new CacheEvent<String>();
      cacheEvent0.setOptionalDetails(",sO+x*k_z?/9{'3");
      String string0 = cacheEvent0.getOptionalDetails();
      assertEquals(",sO+x*k_z?/9{'3", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CacheEvent<Object> cacheEvent0 = new CacheEvent<Object>();
      cacheEvent0.setOptionalDetails("");
      String string0 = cacheEvent0.getOptionalDetails();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CacheEvent<String> cacheEvent0 = new CacheEvent<String>();
      cacheEvent0.setKey("&gxvh");
      String string0 = cacheEvent0.getKey();
      assertEquals("&gxvh", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CacheEvent<Integer> cacheEvent0 = new CacheEvent<Integer>();
      cacheEvent0.setEventName("");
      String string0 = cacheEvent0.getEventName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      CacheEvent<String> cacheEvent0 = new CacheEvent<String>();
      long long0 = cacheEvent0.getCreateTime();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      CacheEvent<Object> cacheEvent0 = new CacheEvent<Object>();
      long long0 = cacheEvent0.getCreateTime();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CacheEvent<Object> cacheEvent0 = new CacheEvent<Object>();
      String string0 = cacheEvent0.toString();
      assertEquals("CacheEvent: null Created: Fri Feb 14 20:21:21 GMT 2014", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CacheEvent<Object> cacheEvent0 = new CacheEvent<Object>();
      String string0 = cacheEvent0.getEventName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CacheEvent<String> cacheEvent0 = new CacheEvent<String>();
      cacheEvent0.setSource("CacSeEvet+0: ");
      String string0 = cacheEvent0.toString();
      assertEquals("CacheEvent: null Created: Fri Feb 14 20:21:21 GMT 2014 Source: CacSeEvet+0: ", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CacheEvent<String> cacheEvent0 = new CacheEvent<String>();
      long long0 = cacheEvent0.getCreateTime();
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CacheEvent<Object> cacheEvent0 = new CacheEvent<Object>();
      cacheEvent0.setEventName("(#H*");
      String string0 = cacheEvent0.getEventName();
      assertEquals("(#H*", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CacheEvent<Integer> cacheEvent0 = new CacheEvent<Integer>();
      Integer integer0 = cacheEvent0.getKey();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CacheEvent<String> cacheEvent0 = new CacheEvent<String>();
      String string0 = cacheEvent0.getSource();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CacheEvent<String> cacheEvent0 = new CacheEvent<String>();
      cacheEvent0.setOptionalDetails("CacSeEvet+0: ");
      String string0 = cacheEvent0.toString();
      assertEquals("CacheEvent: null Created: Fri Feb 14 20:21:21 GMT 2014 Details: CacSeEvet+0: ", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CacheEvent<String> cacheEvent0 = new CacheEvent<String>();
      String string0 = cacheEvent0.getRegion();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CacheEvent<Object> cacheEvent0 = new CacheEvent<Object>();
      String string0 = cacheEvent0.getOptionalDetails();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CacheEvent<Object> cacheEvent0 = new CacheEvent<Object>();
      cacheEvent0.setRegion("(#H*");
      String string0 = cacheEvent0.toString();
      assertEquals("CacheEvent: null Created: Fri Feb 14 20:21:21 GMT 2014 Region: (#H*", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CacheEvent<Object> cacheEvent0 = new CacheEvent<Object>();
      cacheEvent0.setKey("(#H*");
      String string0 = cacheEvent0.toString();
      assertEquals("CacheEvent: null Created: Fri Feb 14 20:21:21 GMT 2014 Key: (#H*", string0);
  }
}
