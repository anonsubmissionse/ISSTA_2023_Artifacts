/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 22:04:27 GMT 2022
 */

package org.apache.commons.jcs3.auxiliary.disk.indexed;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.jcs3.auxiliary.disk.indexed.IndexedDiskCacheAttributes;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IndexedDiskCacheAttributes_ESTest extends IndexedDiskCacheAttributes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IndexedDiskCacheAttributes indexedDiskCacheAttributes0 = new IndexedDiskCacheAttributes();
      assertFalse(indexedDiskCacheAttributes0.isClearDiskOnStartup());
      
      indexedDiskCacheAttributes0.setClearDiskOnStartup(true);
      indexedDiskCacheAttributes0.toString();
      assertTrue(indexedDiskCacheAttributes0.isClearDiskOnStartup());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IndexedDiskCacheAttributes indexedDiskCacheAttributes0 = new IndexedDiskCacheAttributes();
      assertTrue(indexedDiskCacheAttributes0.isOptimizeOnShutdown());
      
      indexedDiskCacheAttributes0.setOptimizeOnShutdown(false);
      indexedDiskCacheAttributes0.toString();
      assertFalse(indexedDiskCacheAttributes0.isOptimizeOnShutdown());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IndexedDiskCacheAttributes indexedDiskCacheAttributes0 = new IndexedDiskCacheAttributes();
      assertTrue(indexedDiskCacheAttributes0.isOptimizeOnShutdown());
      
      indexedDiskCacheAttributes0.setOptimizeOnShutdown(false);
      boolean boolean0 = indexedDiskCacheAttributes0.isOptimizeOnShutdown();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IndexedDiskCacheAttributes indexedDiskCacheAttributes0 = new IndexedDiskCacheAttributes();
      assertFalse(indexedDiskCacheAttributes0.isClearDiskOnStartup());
      
      indexedDiskCacheAttributes0.setClearDiskOnStartup(true);
      boolean boolean0 = indexedDiskCacheAttributes0.isClearDiskOnStartup();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IndexedDiskCacheAttributes indexedDiskCacheAttributes0 = new IndexedDiskCacheAttributes();
      assertEquals((-1), indexedDiskCacheAttributes0.getOptimizeAtRemoveCount());
      
      indexedDiskCacheAttributes0.setOptimizeAtRemoveCount(0);
      int int0 = indexedDiskCacheAttributes0.getOptimizeAtRemoveCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IndexedDiskCacheAttributes indexedDiskCacheAttributes0 = new IndexedDiskCacheAttributes();
      indexedDiskCacheAttributes0.setOptimizeAtRemoveCount(760);
      int int0 = indexedDiskCacheAttributes0.getOptimizeAtRemoveCount();
      assertEquals(760, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IndexedDiskCacheAttributes indexedDiskCacheAttributes0 = new IndexedDiskCacheAttributes();
      assertEquals(5000, indexedDiskCacheAttributes0.getMaxKeySize());
      
      indexedDiskCacheAttributes0.setMaxKeySize(0);
      int int0 = indexedDiskCacheAttributes0.getMaxKeySize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IndexedDiskCacheAttributes indexedDiskCacheAttributes0 = new IndexedDiskCacheAttributes();
      indexedDiskCacheAttributes0.setMaxKeySize((-465));
      int int0 = indexedDiskCacheAttributes0.getMaxKeySize();
      assertEquals((-465), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IndexedDiskCacheAttributes indexedDiskCacheAttributes0 = new IndexedDiskCacheAttributes();
      indexedDiskCacheAttributes0.setClearDiskOnStartup(false);
      assertEquals((-1), indexedDiskCacheAttributes0.getOptimizeAtRemoveCount());
      assertEquals(5000, indexedDiskCacheAttributes0.getMaxKeySize());
      assertTrue(indexedDiskCacheAttributes0.isOptimizeOnShutdown());
      assertFalse(indexedDiskCacheAttributes0.isClearDiskOnStartup());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IndexedDiskCacheAttributes indexedDiskCacheAttributes0 = new IndexedDiskCacheAttributes();
      int int0 = indexedDiskCacheAttributes0.getMaxKeySize();
      assertTrue(indexedDiskCacheAttributes0.isOptimizeOnShutdown());
      assertFalse(indexedDiskCacheAttributes0.isClearDiskOnStartup());
      assertEquals(5000, int0);
      assertEquals((-1), indexedDiskCacheAttributes0.getOptimizeAtRemoveCount());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IndexedDiskCacheAttributes indexedDiskCacheAttributes0 = new IndexedDiskCacheAttributes();
      int int0 = indexedDiskCacheAttributes0.getOptimizeAtRemoveCount();
      assertEquals(5000, indexedDiskCacheAttributes0.getMaxKeySize());
      assertTrue(indexedDiskCacheAttributes0.isOptimizeOnShutdown());
      assertFalse(indexedDiskCacheAttributes0.isClearDiskOnStartup());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IndexedDiskCacheAttributes indexedDiskCacheAttributes0 = new IndexedDiskCacheAttributes();
      indexedDiskCacheAttributes0.setMaxKeySize(1713);
      indexedDiskCacheAttributes0.toString();
      assertEquals(1713, indexedDiskCacheAttributes0.getMaxKeySize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IndexedDiskCacheAttributes indexedDiskCacheAttributes0 = new IndexedDiskCacheAttributes();
      boolean boolean0 = indexedDiskCacheAttributes0.isOptimizeOnShutdown();
      assertEquals((-1), indexedDiskCacheAttributes0.getOptimizeAtRemoveCount());
      assertFalse(indexedDiskCacheAttributes0.isClearDiskOnStartup());
      assertTrue(boolean0);
      assertEquals(5000, indexedDiskCacheAttributes0.getMaxKeySize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IndexedDiskCacheAttributes indexedDiskCacheAttributes0 = new IndexedDiskCacheAttributes();
      boolean boolean0 = indexedDiskCacheAttributes0.isClearDiskOnStartup();
      assertEquals((-1), indexedDiskCacheAttributes0.getOptimizeAtRemoveCount());
      assertTrue(indexedDiskCacheAttributes0.isOptimizeOnShutdown());
      assertEquals(5000, indexedDiskCacheAttributes0.getMaxKeySize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IndexedDiskCacheAttributes indexedDiskCacheAttributes0 = new IndexedDiskCacheAttributes();
      indexedDiskCacheAttributes0.setOptimizeOnShutdown(true);
      assertTrue(indexedDiskCacheAttributes0.isOptimizeOnShutdown());
      assertEquals(5000, indexedDiskCacheAttributes0.getMaxKeySize());
      assertFalse(indexedDiskCacheAttributes0.isClearDiskOnStartup());
      assertEquals((-1), indexedDiskCacheAttributes0.getOptimizeAtRemoveCount());
  }
}
