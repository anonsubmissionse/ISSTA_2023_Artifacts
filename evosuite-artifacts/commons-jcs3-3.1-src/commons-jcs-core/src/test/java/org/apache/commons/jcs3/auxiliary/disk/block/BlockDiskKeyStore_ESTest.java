/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 21:05:56 GMT 2022
 */

package org.apache.commons.jcs3.auxiliary.disk.block;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.nio.channels.AsynchronousChannelGroup;
import java.nio.file.OpenOption;
import java.nio.file.StandardOpenOption;
import java.util.AbstractMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.Callable;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jcs3.auxiliary.disk.behavior.IDiskCacheAttributes;
import org.apache.commons.jcs3.auxiliary.disk.block.BlockDiskCache;
import org.apache.commons.jcs3.auxiliary.disk.block.BlockDiskCacheAttributes;
import org.apache.commons.jcs3.auxiliary.disk.block.BlockDiskElementDescriptor;
import org.apache.commons.jcs3.auxiliary.disk.block.BlockDiskKeyStore;
import org.apache.commons.jcs3.engine.behavior.ICacheEventQueue;
import org.apache.commons.jcs3.log.LogManager;
import org.apache.commons.jcs3.utils.serialization.CompressingSerializer;
import org.apache.commons.jcs3.utils.serialization.EncryptingSerializer;
import org.apache.commons.jcs3.utils.serialization.StandardSerializer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BlockDiskKeyStore_ESTest extends BlockDiskKeyStore_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
      BlockDiskKeyStore<Runnable> blockDiskKeyStore0 = new BlockDiskKeyStore<Runnable>(blockDiskCacheAttributes0, (BlockDiskCache<Runnable, ?>) null);
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread((ThreadGroup) null, thread0, "> P=.qIyncUe7");
      MockThread mockThread1 = new MockThread(mockThread0);
      int[] intArray0 = new int[2];
      intArray0[0] = 4225;
      intArray0[1] = (-1080);
      blockDiskKeyStore0.put(mockThread1, intArray0);
      blockDiskKeyStore0.keySet();
      BlockDiskCache<AbstractMap.SimpleEntry<Object, Object>, BlockDiskElementDescriptor<Object>> blockDiskCache0 = null;
      try {
        blockDiskCache0 = new BlockDiskCache<AbstractMap.SimpleEntry<Object, Object>, BlockDiskElementDescriptor<Object>>(blockDiskCacheAttributes0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.block.BlockDiskCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
      blockDiskCacheAttributes0.setMaxKeySize(0);
      BlockDiskKeyStore<int[]> blockDiskKeyStore0 = new BlockDiskKeyStore<int[]>(blockDiskCacheAttributes0, (BlockDiskCache<int[], ?>) null);
      BlockDiskKeyStore.LRUMapSizeLimited blockDiskKeyStore_LRUMapSizeLimited0 = blockDiskKeyStore0.new LRUMapSizeLimited(0);
      // Undeclared exception!
      try { 
        blockDiskKeyStore_LRUMapSizeLimited0.remove((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
      blockDiskCacheAttributes0.setMaxKeySize((-449));
      blockDiskCacheAttributes0.setBlockSizeBytes((-449));
      BlockDiskKeyStore<Object> blockDiskKeyStore0 = new BlockDiskKeyStore<Object>(blockDiskCacheAttributes0, (BlockDiskCache<Object, ?>) null);
      BlockDiskKeyStore.LRUMapSizeLimited blockDiskKeyStore_LRUMapSizeLimited0 = blockDiskKeyStore0.new LRUMapSizeLimited(0);
      Integer integer0 = new Integer(0);
      int[] intArray0 = new int[2];
      Integer integer1 = new Integer(0);
      blockDiskKeyStore_LRUMapSizeLimited0.put((Object) integer1, intArray0);
      blockDiskKeyStore_LRUMapSizeLimited0.put((Object) integer0, intArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
      BlockDiskKeyStore<Callable<int[]>> blockDiskKeyStore0 = new BlockDiskKeyStore<Callable<int[]>>(blockDiskCacheAttributes0, (BlockDiskCache<Callable<int[]>, ?>) null);
      BlockDiskKeyStore.LRUMapSizeLimited blockDiskKeyStore_LRUMapSizeLimited0 = blockDiskKeyStore0.new LRUMapSizeLimited(1);
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[0] = 5039;
      blockDiskKeyStore_LRUMapSizeLimited0.put("orig-lru-size", intArray0);
      int[] intArray1 = new int[8];
      intArray1[0] = 1;
      intArray0[0] = 1;
      blockDiskKeyStore_LRUMapSizeLimited0.put("Q]4l2", intArray1);
      blockDiskKeyStore_LRUMapSizeLimited0.clear();
      int[] intArray2 = new int[5];
      intArray2[1] = 5039;
      intArray2[3] = 5039;
      intArray2[4] = 5039;
      blockDiskKeyStore_LRUMapSizeLimited0.put("KtRYm@SvEH'[po+", intArray2);
      intArray1[7] = 0;
      // Undeclared exception!
      try { 
        blockDiskKeyStore_LRUMapSizeLimited0.put("", intArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.block.BlockDiskKeyStore$LRUMapSizeLimited", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
      ICacheEventQueue.QueueType iCacheEventQueue_QueueType0 = ICacheEventQueue.QueueType.SINGLE;
      blockDiskCacheAttributes0.setEventQueueType(iCacheEventQueue_QueueType0);
      IDiskCacheAttributes.DiskLimitType iDiskCacheAttributes_DiskLimitType0 = IDiskCacheAttributes.DiskLimitType.SIZE;
      blockDiskCacheAttributes0.setDiskLimitType(iDiskCacheAttributes_DiskLimitType0);
      BlockDiskKeyStore<Object> blockDiskKeyStore0 = new BlockDiskKeyStore<Object>(blockDiskCacheAttributes0, (BlockDiskCache<Object, ?>) null);
      int[] intArray0 = new int[5];
      intArray0[0] = (-1726);
      intArray0[1] = 1996;
      intArray0[2] = 10;
      intArray0[3] = 2;
      intArray0[4] = 599;
      blockDiskKeyStore0.put(blockDiskCacheAttributes0, intArray0);
      blockDiskKeyStore0.isEmpty();
      BlockDiskCacheAttributes blockDiskCacheAttributes1 = new BlockDiskCacheAttributes();
      CompressingSerializer compressingSerializer0 = new CompressingSerializer();
      BlockDiskCache<AbstractMap.SimpleEntry<Integer, Object>, Object> blockDiskCache0 = null;
      try {
        blockDiskCache0 = new BlockDiskCache<AbstractMap.SimpleEntry<Integer, Object>, Object>(blockDiskCacheAttributes0, compressingSerializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.block.BlockDiskCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
      BlockDiskKeyStore<InputStream> blockDiskKeyStore0 = new BlockDiskKeyStore<InputStream>(blockDiskCacheAttributes0, (BlockDiskCache<InputStream, ?>) null);
      blockDiskCacheAttributes0.setShutdownSpoolTimeLimit(1110);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      int[] intArray0 = new int[5];
      intArray0[0] = 1110;
      intArray0[1] = 1815;
      intArray0[2] = 1110;
      intArray0[3] = 1110;
      intArray0[4] = 448;
      blockDiskKeyStore0.put(pipedInputStream0, intArray0);
      blockDiskKeyStore0.size();
      CompressingSerializer compressingSerializer0 = new CompressingSerializer();
      String string0 = "0Pp?LVpl1miHyIy|{8A";
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(1);
      // Undeclared exception!
      try { 
        AsynchronousChannelGroup.withThreadPool(forkJoinPool0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.nio.channels.spi.AsynchronousChannelProvider$ProviderHolder
         //
         verifyException("java.nio.channels.spi.AsynchronousChannelProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("null.key");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "a#bN2b::4NC|");
      BlockDiskKeyStore<Object> blockDiskKeyStore0 = new BlockDiskKeyStore<Object>(blockDiskCacheAttributes0, (BlockDiskCache<Object, ?>) null);
      blockDiskKeyStore0.loadKeys();
      BlockDiskKeyStore.LRUMapSizeLimited blockDiskKeyStore_LRUMapSizeLimited0 = blockDiskKeyStore0.new LRUMapSizeLimited();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)81;
      byteArray0[6] = (byte) (-40);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 566, (-1089));
      int[] intArray0 = new int[3];
      intArray0[0] = (-671);
      intArray0[1] = (int) (byte) (-107);
      intArray0[2] = (-1089);
      blockDiskKeyStore0.put(byteArrayInputStream0, intArray0);
      blockDiskKeyStore0.entrySet();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
      ICacheEventQueue.QueueType iCacheEventQueue_QueueType0 = ICacheEventQueue.QueueType.POOLED;
      blockDiskCacheAttributes0.setEventQueueType(iCacheEventQueue_QueueType0);
      BlockDiskKeyStore<Object> blockDiskKeyStore0 = new BlockDiskKeyStore<Object>(blockDiskCacheAttributes0, (BlockDiskCache<Object, ?>) null);
      int[] intArray0 = new int[3];
      intArray0[0] = (-666);
      intArray0[1] = 1000;
      intArray0[2] = (-2325);
      // Undeclared exception!
      try { 
        blockDiskKeyStore0.put((Object) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
      BlockDiskKeyStore<LinkedHashSet<Integer>> blockDiskKeyStore0 = new BlockDiskKeyStore<LinkedHashSet<Integer>>(blockDiskCacheAttributes0, (BlockDiskCache<LinkedHashSet<Integer>, ?>) null);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      int[] intArray0 = new int[0];
      blockDiskKeyStore0.put(linkedHashSet0, intArray0);
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>();
      blockDiskKeyStore0.remove(linkedHashSet1);
      BlockDiskKeyStore.LRUMapSizeLimited blockDiskKeyStore_LRUMapSizeLimited0 = blockDiskKeyStore0.new LRUMapSizeLimited(10000);
      blockDiskKeyStore_LRUMapSizeLimited0.remove((Object) blockDiskCacheAttributes0);
      blockDiskKeyStore_LRUMapSizeLimited0.shouldRemove();
      int[] intArray1 = new int[2];
      intArray1[0] = 10000;
      BlockDiskKeyStore.LRUMapCountLimited blockDiskKeyStore_LRUMapCountLimited0 = blockDiskKeyStore0.new LRUMapCountLimited(1594);
      Callable<int[]> callable0 = (Callable<int[]>) mock(Callable.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(3038);
      AbstractMap.SimpleEntry<Callable<int[]>, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Callable<int[]>, Integer>(callable0, integer0);
      // Undeclared exception!
      try { 
        blockDiskKeyStore_LRUMapCountLimited0.processRemovedLRU(abstractMap_SimpleEntry0, intArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.block.BlockDiskKeyStore$LRUMapCountLimited", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
          BlockDiskKeyStore<Callable<int[]>> blockDiskKeyStore0 = new BlockDiskKeyStore<Callable<int[]>>(blockDiskCacheAttributes0, (BlockDiskCache<Callable<int[]>, ?>) null);
          BlockDiskKeyStore.LRUMapSizeLimited blockDiskKeyStore_LRUMapSizeLimited0 = blockDiskKeyStore0.new LRUMapSizeLimited(2);
          int[] intArray0 = new int[2];
          intArray0[0] = 2;
          intArray0[1] = 5039;
          blockDiskKeyStore_LRUMapSizeLimited0.put("{0}: Loading keys for {1}", intArray0);
          int[] intArray1 = new int[8];
          intArray1[0] = 2;
          intArray1[1] = 2;
          intArray1[3] = 2;
          intArray1[4] = 2;
          intArray1[5] = 2;
          int[] intArray2 = new int[5];
          intArray2[0] = 5039;
          intArray2[1] = 5039;
          intArray2[2] = 2;
          intArray2[3] = 5039;
          intArray2[4] = 5039;
          blockDiskKeyStore_LRUMapSizeLimited0.put("KtRYm@SvEH'[po+", intArray2);
          intArray1[7] = 2;
          blockDiskKeyStore_LRUMapSizeLimited0.put("", intArray1);
          blockDiskKeyStore_LRUMapSizeLimited0.shouldRemove();
          // Undeclared exception!
          try { 
            blockDiskKeyStore0.reset();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"null.key\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newFileChannel(UnixFileSystemProvider.java:175)
             // java.nio.channels.FileChannel.open(FileChannel.java:287)
             // java.nio.channels.FileChannel.open(FileChannel.java:335)
             // org.apache.commons.jcs3.auxiliary.disk.block.BlockDiskKeyStore.saveKeys(BlockDiskKeyStore.java:524)
             // org.apache.commons.jcs3.auxiliary.disk.block.BlockDiskKeyStore.reset(BlockDiskKeyStore.java:508)
             // sun.reflect.GeneratedMethodAccessor227.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("null.key");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "a#bN2b::4NC|");
      BlockDiskKeyStore<Object> blockDiskKeyStore0 = new BlockDiskKeyStore<Object>(blockDiskCacheAttributes0, (BlockDiskCache<Object, ?>) null);
      BlockDiskKeyStore.LRUMapSizeLimited blockDiskKeyStore_LRUMapSizeLimited0 = blockDiskKeyStore0.new LRUMapSizeLimited();
      LinkedHashSet<Delayed> linkedHashSet0 = null;
      int[] intArray0 = new int[4];
      blockDiskKeyStore0.put(blockDiskKeyStore_LRUMapSizeLimited0, intArray0);
      intArray0[2] = 0;
      int int0 = (-1);
      // Undeclared exception!
      try { 
        blockDiskKeyStore0.remove((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
          BlockDiskKeyStore<Callable<int[]>> blockDiskKeyStore0 = new BlockDiskKeyStore<Callable<int[]>>(blockDiskCacheAttributes0, (BlockDiskCache<Callable<int[]>, ?>) null);
          BlockDiskKeyStore.LRUMapSizeLimited blockDiskKeyStore_LRUMapSizeLimited0 = blockDiskKeyStore0.new LRUMapSizeLimited(2);
          int[] intArray0 = new int[2];
          intArray0[0] = 2;
          intArray0[1] = 5039;
          blockDiskKeyStore_LRUMapSizeLimited0.put("{0}: Loading keys for {1}", intArray0);
          int[] intArray1 = new int[8];
          intArray1[0] = 2;
          intArray1[1] = 2;
          intArray1[3] = 2;
          intArray1[4] = 2;
          intArray1[5] = 2;
          intArray1[7] = 2;
          blockDiskKeyStore_LRUMapSizeLimited0.put("", intArray1);
          blockDiskKeyStore_LRUMapSizeLimited0.shouldRemove();
          // Undeclared exception!
          try { 
            blockDiskKeyStore0.reset();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"null.key\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newFileChannel(UnixFileSystemProvider.java:175)
             // java.nio.channels.FileChannel.open(FileChannel.java:287)
             // java.nio.channels.FileChannel.open(FileChannel.java:335)
             // org.apache.commons.jcs3.auxiliary.disk.block.BlockDiskKeyStore.saveKeys(BlockDiskKeyStore.java:524)
             // org.apache.commons.jcs3.auxiliary.disk.block.BlockDiskKeyStore.reset(BlockDiskKeyStore.java:508)
             // sun.reflect.GeneratedMethodAccessor227.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
      blockDiskCacheAttributes0.setBlockSizeBytes(1090);
      BlockDiskKeyStore<Object> blockDiskKeyStore0 = new BlockDiskKeyStore<Object>(blockDiskCacheAttributes0, (BlockDiskCache<Object, ?>) null);
      BlockDiskKeyStore.LRUMapSizeLimited blockDiskKeyStore_LRUMapSizeLimited0 = blockDiskKeyStore0.new LRUMapSizeLimited();
      int[] intArray0 = new int[4];
      intArray0[0] = 128;
      intArray0[1] = 185;
      intArray0[2] = 5000;
      // Undeclared exception!
      try { 
        blockDiskKeyStore_LRUMapSizeLimited0.put((LinkedHashSet<Delayed>) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
          ICacheEventQueue.QueueType iCacheEventQueue_QueueType0 = ICacheEventQueue.QueueType.SINGLE;
          blockDiskCacheAttributes0.setEventQueueType(iCacheEventQueue_QueueType0);
          IDiskCacheAttributes.DiskLimitType iDiskCacheAttributes_DiskLimitType0 = IDiskCacheAttributes.DiskLimitType.SIZE;
          blockDiskCacheAttributes0.setDiskLimitType(iDiskCacheAttributes_DiskLimitType0);
          EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("null.key");
          FileSystemHandling.appendLineToFile(evoSuiteFile0, "x");
          BlockDiskKeyStore<Object> blockDiskKeyStore0 = new BlockDiskKeyStore<Object>(blockDiskCacheAttributes0, (BlockDiskCache<Object, ?>) null);
          blockDiskKeyStore0.isEmpty();
          // Undeclared exception!
          try { 
            blockDiskKeyStore0.reset();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"null.key\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newFileChannel(UnixFileSystemProvider.java:175)
             // java.nio.channels.FileChannel.open(FileChannel.java:287)
             // java.nio.channels.FileChannel.open(FileChannel.java:335)
             // org.apache.commons.jcs3.auxiliary.disk.block.BlockDiskKeyStore.saveKeys(BlockDiskKeyStore.java:524)
             // org.apache.commons.jcs3.auxiliary.disk.block.BlockDiskKeyStore.reset(BlockDiskKeyStore.java:508)
             // sun.reflect.GeneratedMethodAccessor227.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
      BlockDiskKeyStore<Callable<int[]>> blockDiskKeyStore0 = new BlockDiskKeyStore<Callable<int[]>>(blockDiskCacheAttributes0, (BlockDiskCache<Callable<int[]>, ?>) null);
      Callable<int[]> callable0 = (Callable<int[]>) mock(Callable.class, new ViolatedAssumptionAnswer());
      blockDiskKeyStore0.get(callable0);
      BlockDiskKeyStore.LRUMapSizeLimited blockDiskKeyStore_LRUMapSizeLimited0 = blockDiskKeyStore0.new LRUMapSizeLimited(2);
      String string0 = null;
      // Undeclared exception!
      try { 
        blockDiskKeyStore_LRUMapSizeLimited0.put((String) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
      blockDiskCacheAttributes0.clone();
      blockDiskCacheAttributes0.setCacheName("");
      BlockDiskKeyStore<Object> blockDiskKeyStore0 = new BlockDiskKeyStore<Object>(blockDiskCacheAttributes0, (BlockDiskCache<Object, ?>) null);
      BlockDiskKeyStore.LRUMapSizeLimited blockDiskKeyStore_LRUMapSizeLimited0 = blockDiskKeyStore0.new LRUMapSizeLimited(0);
      Integer integer0 = new Integer(0);
      int[] intArray0 = new int[1];
      Integer integer1 = new Integer(0);
      blockDiskKeyStore_LRUMapSizeLimited0.put((Object) integer1, intArray0);
      int[] intArray1 = new int[0];
      blockDiskKeyStore_LRUMapSizeLimited0.put((Object) integer0, intArray1);
      intArray0[0] = 0;
      // Undeclared exception!
      try { 
        blockDiskKeyStore_LRUMapSizeLimited0.processRemovedLRU(integer0, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.block.BlockDiskKeyStore$LRUMapSizeLimited", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getName());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertNotNull(blockDiskCacheAttributes0);
      
      BlockDiskKeyStore<String> blockDiskKeyStore0 = new BlockDiskKeyStore<String>(blockDiskCacheAttributes0, (BlockDiskCache<String, ?>) null);
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getName());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertTrue(blockDiskKeyStore0.isEmpty());
      assertEquals(0, blockDiskKeyStore0.size());
      assertNotNull(blockDiskKeyStore0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1024;
      intArray0[7] = 0;
      intArray0[4] = 2;
      intArray0[5] = (-13);
      intArray0[6] = 28;
      intArray0[7] = 188;
      intArray0[8] = 1024;
      blockDiskKeyStore0.put("{0}: Found {1} in keys file.", intArray0);
      assertArrayEquals(new int[] {0, 0, 1024, 0, 2, (-13), 28, 188, 1024}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getName());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertFalse(blockDiskKeyStore0.isEmpty());
      assertEquals(1, blockDiskKeyStore0.size());
      
      BlockDiskKeyStore.LRUMapSizeLimited blockDiskKeyStore_LRUMapSizeLimited0 = blockDiskKeyStore0.new LRUMapSizeLimited();
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getName());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertFalse(blockDiskKeyStore0.isEmpty());
      assertEquals(1, blockDiskKeyStore0.size());
      assertTrue(blockDiskKeyStore_LRUMapSizeLimited0.isEmpty());
      assertEquals(0, blockDiskKeyStore_LRUMapSizeLimited0.size());
      assertNotNull(blockDiskKeyStore_LRUMapSizeLimited0);
      
      StandardOpenOption standardOpenOption0 = StandardOpenOption.SPARSE;
      assertEquals(StandardOpenOption.SPARSE, standardOpenOption0);
      
      int[] intArray1 = blockDiskKeyStore0.get("{0}: Found {1} in keys file.");
      assertArrayEquals(new int[] {0, 0, 1024, 0, 2, (-13), 28, 188, 1024}, intArray1);
      assertEquals(9, intArray1.length);
      assertSame(intArray1, intArray0);
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getName());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertFalse(blockDiskKeyStore0.isEmpty());
      assertEquals(1, blockDiskKeyStore0.size());
      assertNotNull(intArray1);
      
      boolean boolean0 = blockDiskKeyStore_LRUMapSizeLimited0.shouldRemove();
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getName());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertFalse(blockDiskKeyStore0.isEmpty());
      assertEquals(1, blockDiskKeyStore0.size());
      assertTrue(blockDiskKeyStore_LRUMapSizeLimited0.isEmpty());
      assertEquals(0, blockDiskKeyStore_LRUMapSizeLimited0.size());
      assertFalse(boolean0);
      
      EncryptingSerializer encryptingSerializer0 = new EncryptingSerializer();
      assertNotNull(encryptingSerializer0);
      
      blockDiskCacheAttributes0.setEventQueuePoolName("{0}: Found {1} in keys file.");
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals("{0}: Found {1} in keys file.", blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      
      BlockDiskCache<Object, Callable<int[]>> blockDiskCache0 = null;
      try {
        blockDiskCache0 = new BlockDiskCache<Object, Callable<int[]>>(blockDiskCacheAttributes0, encryptingSerializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.block.BlockDiskCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getName());
      assertNotNull(blockDiskCacheAttributes0);
      
      BlockDiskKeyStore<String> blockDiskKeyStore0 = new BlockDiskKeyStore<String>(blockDiskCacheAttributes0, (BlockDiskCache<String, ?>) null);
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getName());
      assertTrue(blockDiskKeyStore0.isEmpty());
      assertEquals(0, blockDiskKeyStore0.size());
      assertNotNull(blockDiskKeyStore0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1024;
      intArray0[3] = 0;
      intArray0[4] = 2;
      intArray0[5] = 1;
      intArray0[6] = 28;
      intArray0[7] = 188;
      intArray0[8] = (-4492);
      blockDiskKeyStore0.put("{0}: Found {1} in keys file.", intArray0);
      assertArrayEquals(new int[] {0, 0, 1024, 0, 2, 1, 28, 188, (-4492)}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(1, blockDiskKeyStore0.size());
      assertFalse(blockDiskKeyStore0.isEmpty());
      
      BlockDiskKeyStore.LRUMapSizeLimited blockDiskKeyStore_LRUMapSizeLimited0 = blockDiskKeyStore0.new LRUMapSizeLimited();
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(1, blockDiskKeyStore0.size());
      assertFalse(blockDiskKeyStore0.isEmpty());
      assertTrue(blockDiskKeyStore_LRUMapSizeLimited0.isEmpty());
      assertEquals(0, blockDiskKeyStore_LRUMapSizeLimited0.size());
      assertNotNull(blockDiskKeyStore_LRUMapSizeLimited0);
      
      StandardOpenOption standardOpenOption0 = StandardOpenOption.SPARSE;
      assertEquals(StandardOpenOption.SPARSE, standardOpenOption0);
      
      int[] intArray1 = blockDiskKeyStore_LRUMapSizeLimited0.put((OpenOption) standardOpenOption0, intArray0);
      assertArrayEquals(new int[] {0, 0, 1024, 0, 2, 1, 28, 188, (-4492)}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(1, blockDiskKeyStore0.size());
      assertFalse(blockDiskKeyStore0.isEmpty());
      assertFalse(blockDiskKeyStore_LRUMapSizeLimited0.isEmpty());
      assertEquals(1, blockDiskKeyStore_LRUMapSizeLimited0.size());
      assertNull(intArray1);
      
      int[] intArray2 = blockDiskKeyStore_LRUMapSizeLimited0.put((OpenOption) standardOpenOption0, intArray0);
      assertArrayEquals(new int[] {0, 0, 1024, 0, 2, 1, 28, 188, (-4492)}, intArray2);
      assertArrayEquals(new int[] {0, 0, 1024, 0, 2, 1, 28, 188, (-4492)}, intArray0);
      assertEquals(9, intArray2.length);
      assertEquals(9, intArray0.length);
      assertSame(intArray2, intArray0);
      assertSame(intArray0, intArray2);
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(1, blockDiskKeyStore0.size());
      assertFalse(blockDiskKeyStore0.isEmpty());
      assertFalse(blockDiskKeyStore_LRUMapSizeLimited0.isEmpty());
      assertEquals(1, blockDiskKeyStore_LRUMapSizeLimited0.size());
      assertNotNull(intArray2);
      
      boolean boolean0 = blockDiskKeyStore_LRUMapSizeLimited0.shouldRemove();
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(1, blockDiskKeyStore0.size());
      assertFalse(blockDiskKeyStore0.isEmpty());
      assertFalse(blockDiskKeyStore_LRUMapSizeLimited0.isEmpty());
      assertEquals(1, blockDiskKeyStore_LRUMapSizeLimited0.size());
      assertFalse(boolean0);
      
      EncryptingSerializer encryptingSerializer0 = new EncryptingSerializer();
      assertNotNull(encryptingSerializer0);
      
      blockDiskCacheAttributes0.setEventQueuePoolName("{0}: Found {1} in keys file.");
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals("{0}: Found {1} in keys file.", blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getName());
      
      BlockDiskCache<Object, Callable<int[]>> blockDiskCache0 = null;
      try {
        blockDiskCache0 = new BlockDiskCache<Object, Callable<int[]>>(blockDiskCacheAttributes0, encryptingSerializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.block.BlockDiskCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertNotNull(blockDiskCacheAttributes0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("null.key");
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "Hbfwg=&m");
      assertTrue(boolean0);
      
      BlockDiskKeyStore<Integer> blockDiskKeyStore0 = new BlockDiskKeyStore<Integer>(blockDiskCacheAttributes0, (BlockDiskCache<Integer, ?>) null);
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertTrue(blockDiskKeyStore0.isEmpty());
      assertEquals(0, blockDiskKeyStore0.size());
      assertNotNull(blockDiskKeyStore0);
      
      Set<Integer> set0 = blockDiskKeyStore0.keySet();
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertTrue(blockDiskKeyStore0.isEmpty());
      assertEquals(0, blockDiskKeyStore0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      blockDiskCacheAttributes0.setShutdownSpoolTimeLimit(936);
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(936, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      
      blockDiskKeyStore0.clearMemoryMap();
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(936, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertTrue(blockDiskKeyStore0.isEmpty());
      assertEquals(0, blockDiskKeyStore0.size());
      
      Integer integer0 = new Integer(4);
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      int[] intArray0 = blockDiskKeyStore0.remove(integer0);
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(936, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertTrue(blockDiskKeyStore0.isEmpty());
      assertEquals(0, blockDiskKeyStore0.size());
      assertNull(intArray0);
      
      blockDiskCacheAttributes0.setEventQueuePoolName((String) null);
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(936, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      
      EncryptingSerializer encryptingSerializer0 = new EncryptingSerializer();
      assertNotNull(encryptingSerializer0);
      
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("null.key");
      boolean boolean1 = FileSystemHandling.appendLineToFile(evoSuiteFile1, (String) null);
      assertFalse(evoSuiteFile1.equals((Object)evoSuiteFile0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(evoSuiteFile1, evoSuiteFile0);
      assertFalse(boolean1);
      
      Set<Map.Entry<Integer, int[]>> set1 = (Set<Map.Entry<Integer, int[]>>)blockDiskKeyStore0.entrySet();
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(936, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertTrue(blockDiskKeyStore0.isEmpty());
      assertEquals(0, blockDiskKeyStore0.size());
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertNotNull(set1);
      
      boolean boolean2 = blockDiskKeyStore0.isEmpty();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(936, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertTrue(blockDiskKeyStore0.isEmpty());
      assertEquals(0, blockDiskKeyStore0.size());
      assertTrue(boolean2);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      PushbackInputStream pushbackInputStream0 = null;
      try {
        pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size <= 0
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertNotNull(blockDiskCacheAttributes0);
      
      BlockDiskKeyStore<Object> blockDiskKeyStore0 = new BlockDiskKeyStore<Object>(blockDiskCacheAttributes0, (BlockDiskCache<Object, ?>) null);
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(0, blockDiskKeyStore0.size());
      assertTrue(blockDiskKeyStore0.isEmpty());
      assertNotNull(blockDiskKeyStore0);
      
      BlockDiskKeyStore.LRUMapSizeLimited blockDiskKeyStore_LRUMapSizeLimited0 = blockDiskKeyStore0.new LRUMapSizeLimited();
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(0, blockDiskKeyStore0.size());
      assertTrue(blockDiskKeyStore0.isEmpty());
      assertEquals(0, blockDiskKeyStore_LRUMapSizeLimited0.size());
      assertTrue(blockDiskKeyStore_LRUMapSizeLimited0.isEmpty());
      assertNotNull(blockDiskKeyStore_LRUMapSizeLimited0);
      
      LinkedHashSet<Delayed> linkedHashSet0 = null;
      int[] intArray0 = new int[9];
      intArray0[0] = (-2694);
      intArray0[1] = (-2926);
      intArray0[2] = (-3970);
      intArray0[3] = (-1);
      int int0 = 1917;
      BlockDiskKeyStore<Callable<int[]>> blockDiskKeyStore1 = new BlockDiskKeyStore<Callable<int[]>>(blockDiskCacheAttributes0, (BlockDiskCache<Callable<int[]>, ?>) null);
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(0, blockDiskKeyStore1.size());
      assertTrue(blockDiskKeyStore1.isEmpty());
      assertNotNull(blockDiskKeyStore1);
      
      int int1 = blockDiskKeyStore1.size();
      assertFalse(int1 == int0);
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(0, blockDiskKeyStore1.size());
      assertTrue(blockDiskKeyStore1.isEmpty());
      assertEquals(0, int1);
      
      CompressingSerializer compressingSerializer0 = new CompressingSerializer();
      assertNotNull(compressingSerializer0);
      
      BlockDiskCache<BufferedInputStream, Delayed> blockDiskCache0 = null;
      try {
        blockDiskCache0 = new BlockDiskCache<BufferedInputStream, Delayed>(blockDiskCacheAttributes0, compressingSerializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.block.BlockDiskCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
          assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
          assertNull(blockDiskCacheAttributes0.getEventQueueType());
          assertNull(blockDiskCacheAttributes0.getName());
          assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
          assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
          assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
          assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
          assertNull(blockDiskCacheAttributes0.getCacheName());
          assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
          assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
          assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
          assertNotNull(blockDiskCacheAttributes0);
          
          BlockDiskKeyStore<LinkedHashSet<Integer>> blockDiskKeyStore0 = new BlockDiskKeyStore<LinkedHashSet<Integer>>(blockDiskCacheAttributes0, (BlockDiskCache<LinkedHashSet<Integer>, ?>) null);
          assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
          assertNull(blockDiskCacheAttributes0.getEventQueueType());
          assertNull(blockDiskCacheAttributes0.getName());
          assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
          assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
          assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
          assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
          assertNull(blockDiskCacheAttributes0.getCacheName());
          assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
          assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
          assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
          assertTrue(blockDiskKeyStore0.isEmpty());
          assertEquals(0, blockDiskKeyStore0.size());
          assertNotNull(blockDiskKeyStore0);
          
          LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
          assertTrue(linkedHashSet0.isEmpty());
          assertEquals(0, linkedHashSet0.size());
          assertNotNull(linkedHashSet0);
          
          BlockDiskKeyStore.LRUMapSizeLimited blockDiskKeyStore_LRUMapSizeLimited0 = blockDiskKeyStore0.new LRUMapSizeLimited(10000);
          assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
          assertNull(blockDiskCacheAttributes0.getEventQueueType());
          assertNull(blockDiskCacheAttributes0.getName());
          assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
          assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
          assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
          assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
          assertNull(blockDiskCacheAttributes0.getCacheName());
          assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
          assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
          assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
          assertTrue(blockDiskKeyStore0.isEmpty());
          assertEquals(0, blockDiskKeyStore0.size());
          assertTrue(blockDiskKeyStore_LRUMapSizeLimited0.isEmpty());
          assertEquals(0, blockDiskKeyStore_LRUMapSizeLimited0.size());
          assertNotNull(blockDiskKeyStore_LRUMapSizeLimited0);
          
          boolean boolean0 = blockDiskKeyStore_LRUMapSizeLimited0.shouldRemove();
          assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
          assertNull(blockDiskCacheAttributes0.getEventQueueType());
          assertNull(blockDiskCacheAttributes0.getName());
          assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
          assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
          assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
          assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
          assertNull(blockDiskCacheAttributes0.getCacheName());
          assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
          assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
          assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
          assertTrue(blockDiskKeyStore0.isEmpty());
          assertEquals(0, blockDiskKeyStore0.size());
          assertTrue(blockDiskKeyStore_LRUMapSizeLimited0.isEmpty());
          assertEquals(0, blockDiskKeyStore_LRUMapSizeLimited0.size());
          assertFalse(boolean0);
          
          int[] intArray0 = new int[2];
          intArray0[0] = 244;
          intArray0[1] = 1594;
          blockDiskKeyStore0.put(linkedHashSet0, intArray0);
          assertArrayEquals(new int[] {244, 1594}, intArray0);
          assertEquals(2, intArray0.length);
          assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
          assertNull(blockDiskCacheAttributes0.getEventQueueType());
          assertNull(blockDiskCacheAttributes0.getName());
          assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
          assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
          assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
          assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
          assertNull(blockDiskCacheAttributes0.getCacheName());
          assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
          assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
          assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
          assertEquals(1, blockDiskKeyStore0.size());
          assertFalse(blockDiskKeyStore0.isEmpty());
          assertTrue(linkedHashSet0.isEmpty());
          assertEquals(0, linkedHashSet0.size());
          assertFalse(linkedHashSet0.contains(10000));
          
          // Undeclared exception!
          try { 
            blockDiskKeyStore0.reset();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"null.key\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newFileChannel(UnixFileSystemProvider.java:175)
             // java.nio.channels.FileChannel.open(FileChannel.java:287)
             // java.nio.channels.FileChannel.open(FileChannel.java:335)
             // org.apache.commons.jcs3.auxiliary.disk.block.BlockDiskKeyStore.saveKeys(BlockDiskKeyStore.java:524)
             // org.apache.commons.jcs3.auxiliary.disk.block.BlockDiskKeyStore.reset(BlockDiskKeyStore.java:508)
             // sun.reflect.GeneratedMethodAccessor227.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
          assertNull(blockDiskCacheAttributes0.getName());
          assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
          assertNull(blockDiskCacheAttributes0.getCacheName());
          assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
          assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
          assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
          assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
          assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
          assertNull(blockDiskCacheAttributes0.getEventQueueType());
          assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
          assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
          assertNotNull(blockDiskCacheAttributes0);
          
          BlockDiskKeyStore<LinkedHashSet<Integer>> blockDiskKeyStore0 = new BlockDiskKeyStore<LinkedHashSet<Integer>>(blockDiskCacheAttributes0, (BlockDiskCache<LinkedHashSet<Integer>, ?>) null);
          assertNull(blockDiskCacheAttributes0.getName());
          assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
          assertNull(blockDiskCacheAttributes0.getCacheName());
          assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
          assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
          assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
          assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
          assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
          assertNull(blockDiskCacheAttributes0.getEventQueueType());
          assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
          assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
          assertTrue(blockDiskKeyStore0.isEmpty());
          assertEquals(0, blockDiskKeyStore0.size());
          assertNotNull(blockDiskKeyStore0);
          
          blockDiskKeyStore0.loadKeys();
          assertNull(blockDiskCacheAttributes0.getName());
          assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
          assertNull(blockDiskCacheAttributes0.getCacheName());
          assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
          assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
          assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
          assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
          assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
          assertNull(blockDiskCacheAttributes0.getEventQueueType());
          assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
          assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
          assertTrue(blockDiskKeyStore0.isEmpty());
          assertEquals(0, blockDiskKeyStore0.size());
          
          BlockDiskKeyStore.LRUMapSizeLimited blockDiskKeyStore_LRUMapSizeLimited0 = blockDiskKeyStore0.new LRUMapSizeLimited((-3179));
          assertNull(blockDiskCacheAttributes0.getName());
          assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
          assertNull(blockDiskCacheAttributes0.getCacheName());
          assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
          assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
          assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
          assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
          assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
          assertNull(blockDiskCacheAttributes0.getEventQueueType());
          assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
          assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
          assertTrue(blockDiskKeyStore0.isEmpty());
          assertEquals(0, blockDiskKeyStore0.size());
          assertEquals(0, blockDiskKeyStore_LRUMapSizeLimited0.size());
          assertTrue(blockDiskKeyStore_LRUMapSizeLimited0.isEmpty());
          assertNotNull(blockDiskKeyStore_LRUMapSizeLimited0);
          
          DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
          assertNotNull(dataInputStream0);
          
          int[] intArray0 = blockDiskKeyStore_LRUMapSizeLimited0.put((InputStream) dataInputStream0, (int[]) null);
          assertNull(blockDiskCacheAttributes0.getName());
          assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
          assertNull(blockDiskCacheAttributes0.getCacheName());
          assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
          assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
          assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
          assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
          assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
          assertNull(blockDiskCacheAttributes0.getEventQueueType());
          assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
          assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
          assertTrue(blockDiskKeyStore0.isEmpty());
          assertEquals(0, blockDiskKeyStore0.size());
          assertFalse(blockDiskKeyStore_LRUMapSizeLimited0.isEmpty());
          assertEquals(1, blockDiskKeyStore_LRUMapSizeLimited0.size());
          assertNull(intArray0);
          
          // Undeclared exception!
          try { 
            blockDiskKeyStore0.reset();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"null.key\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newFileChannel(UnixFileSystemProvider.java:175)
             // java.nio.channels.FileChannel.open(FileChannel.java:287)
             // java.nio.channels.FileChannel.open(FileChannel.java:335)
             // org.apache.commons.jcs3.auxiliary.disk.block.BlockDiskKeyStore.saveKeys(BlockDiskKeyStore.java:524)
             // org.apache.commons.jcs3.auxiliary.disk.block.BlockDiskKeyStore.reset(BlockDiskKeyStore.java:508)
             // sun.reflect.GeneratedMethodAccessor227.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertNull(blockDiskCacheAttributes0.getName());
      assertNotNull(blockDiskCacheAttributes0);
      
      ICacheEventQueue.QueueType iCacheEventQueue_QueueType0 = ICacheEventQueue.QueueType.SINGLE;
      blockDiskCacheAttributes0.setEventQueueType(iCacheEventQueue_QueueType0);
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertEquals(ICacheEventQueue.QueueType.SINGLE, blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertNull(blockDiskCacheAttributes0.getName());
      
      BlockDiskKeyStore<Object> blockDiskKeyStore0 = new BlockDiskKeyStore<Object>(blockDiskCacheAttributes0, (BlockDiskCache<Object, ?>) null);
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertEquals(ICacheEventQueue.QueueType.SINGLE, blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertNull(blockDiskCacheAttributes0.getName());
      assertTrue(blockDiskKeyStore0.isEmpty());
      assertEquals(0, blockDiskKeyStore0.size());
      assertNotNull(blockDiskKeyStore0);
      
      // Undeclared exception!
      try { 
        blockDiskKeyStore0.remove((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNotNull(blockDiskCacheAttributes0);
      
      BlockDiskCacheAttributes blockDiskCacheAttributes1 = (BlockDiskCacheAttributes)blockDiskCacheAttributes0.clone();
      assertFalse(blockDiskCacheAttributes1.equals((Object)blockDiskCacheAttributes0));
      assertNotSame(blockDiskCacheAttributes0, blockDiskCacheAttributes1);
      assertNotSame(blockDiskCacheAttributes1, blockDiskCacheAttributes0);
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes1.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes1.getMaxKeySize());
      assertNull(blockDiskCacheAttributes1.getName());
      assertNull(blockDiskCacheAttributes1.getEventQueueType());
      assertTrue(blockDiskCacheAttributes1.isAllowRemoveAll());
      assertEquals(5000, blockDiskCacheAttributes1.getMaxPurgatorySize());
      assertEquals(300L, blockDiskCacheAttributes1.getKeyPersistenceIntervalSeconds());
      assertEquals(0, blockDiskCacheAttributes1.getBlockSizeBytes());
      assertEquals(60, blockDiskCacheAttributes1.getShutdownSpoolTimeLimit());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes1.getDiskLimitType());
      assertNull(blockDiskCacheAttributes1.getCacheName());
      assertNotNull(blockDiskCacheAttributes1);
      
      blockDiskCacheAttributes0.setCacheName("");
      assertFalse(blockDiskCacheAttributes0.equals((Object)blockDiskCacheAttributes1));
      assertNotSame(blockDiskCacheAttributes0, blockDiskCacheAttributes1);
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertEquals("", blockDiskCacheAttributes0.getCacheName());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      
      BlockDiskKeyStore<Object> blockDiskKeyStore0 = new BlockDiskKeyStore<Object>(blockDiskCacheAttributes0, (BlockDiskCache<Object, ?>) null);
      assertFalse(blockDiskCacheAttributes0.equals((Object)blockDiskCacheAttributes1));
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertEquals("", blockDiskCacheAttributes0.getCacheName());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertTrue(blockDiskKeyStore0.isEmpty());
      assertEquals(0, blockDiskKeyStore0.size());
      assertNotNull(blockDiskKeyStore0);
      
      BlockDiskKeyStore.LRUMapSizeLimited blockDiskKeyStore_LRUMapSizeLimited0 = blockDiskKeyStore0.new LRUMapSizeLimited(0);
      assertFalse(blockDiskCacheAttributes0.equals((Object)blockDiskCacheAttributes1));
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertEquals("", blockDiskCacheAttributes0.getCacheName());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertTrue(blockDiskKeyStore0.isEmpty());
      assertEquals(0, blockDiskKeyStore0.size());
      assertEquals(0, blockDiskKeyStore_LRUMapSizeLimited0.size());
      assertTrue(blockDiskKeyStore_LRUMapSizeLimited0.isEmpty());
      assertNotNull(blockDiskKeyStore_LRUMapSizeLimited0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      int[] intArray0 = new int[1];
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = blockDiskKeyStore_LRUMapSizeLimited0.put((Object) integer0, intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray1.length);
      assertFalse(blockDiskCacheAttributes0.equals((Object)blockDiskCacheAttributes1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(blockDiskCacheAttributes0, blockDiskCacheAttributes1);
      assertNotSame(intArray1, intArray0);
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertEquals("", blockDiskCacheAttributes0.getCacheName());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertTrue(blockDiskKeyStore0.isEmpty());
      assertEquals(0, blockDiskKeyStore0.size());
      assertEquals(1, blockDiskKeyStore_LRUMapSizeLimited0.size());
      assertFalse(blockDiskKeyStore_LRUMapSizeLimited0.isEmpty());
      assertNull(intArray2);
      
      intArray0[0] = 0;
      // Undeclared exception!
      try { 
        blockDiskKeyStore_LRUMapSizeLimited0.processRemovedLRU(integer0, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.block.BlockDiskKeyStore$LRUMapSizeLimited", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNotNull(blockDiskCacheAttributes0);
      
      ICacheEventQueue.QueueType iCacheEventQueue_QueueType0 = ICacheEventQueue.QueueType.SINGLE;
      blockDiskCacheAttributes0.setEventQueueType(iCacheEventQueue_QueueType0);
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(ICacheEventQueue.QueueType.SINGLE, blockDiskCacheAttributes0.getEventQueueType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      
      BlockDiskKeyStore<Object> blockDiskKeyStore0 = new BlockDiskKeyStore<Object>(blockDiskCacheAttributes0, (BlockDiskCache<Object, ?>) null);
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(ICacheEventQueue.QueueType.SINGLE, blockDiskCacheAttributes0.getEventQueueType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertTrue(blockDiskKeyStore0.isEmpty());
      assertEquals(0, blockDiskKeyStore0.size());
      assertNotNull(blockDiskKeyStore0);
      
      int int0 = (-1956);
      BlockDiskKeyStore.LRUMapCountLimited blockDiskKeyStore_LRUMapCountLimited0 = blockDiskKeyStore0.new LRUMapCountLimited((-1956));
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(ICacheEventQueue.QueueType.SINGLE, blockDiskCacheAttributes0.getEventQueueType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertTrue(blockDiskKeyStore0.isEmpty());
      assertEquals(0, blockDiskKeyStore0.size());
      assertFalse(blockDiskKeyStore_LRUMapCountLimited0.shouldRemove());
      assertTrue(blockDiskKeyStore_LRUMapCountLimited0.isEmpty());
      assertEquals(0, blockDiskKeyStore_LRUMapCountLimited0.size());
      assertNotNull(blockDiskKeyStore_LRUMapCountLimited0);
      
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      assertNotNull(delayQueue0);
      
      Delayed delayed0 = delayQueue0.peek();
      assertNull(delayed0);
      
      int[] intArray0 = new int[7];
      BlockDiskKeyStore<Delayed> blockDiskKeyStore1 = new BlockDiskKeyStore<Delayed>(blockDiskCacheAttributes0, (BlockDiskCache<Delayed, ?>) null);
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(ICacheEventQueue.QueueType.SINGLE, blockDiskCacheAttributes0.getEventQueueType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertEquals(0, blockDiskKeyStore1.size());
      assertTrue(blockDiskKeyStore1.isEmpty());
      assertNotNull(blockDiskKeyStore1);
      
      // Undeclared exception!
      try { 
        blockDiskKeyStore1.get((Delayed) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
          assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
          assertNull(blockDiskCacheAttributes0.getEventQueueType());
          assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
          assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
          assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
          assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
          assertNull(blockDiskCacheAttributes0.getCacheName());
          assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
          assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
          assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
          assertNull(blockDiskCacheAttributes0.getName());
          assertNotNull(blockDiskCacheAttributes0);
          
          EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("null.key");
          boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "v{nWG8hqVbc#");
          assertTrue(boolean0);
          
          BlockDiskKeyStore<LinkedHashSet<Integer>> blockDiskKeyStore0 = new BlockDiskKeyStore<LinkedHashSet<Integer>>(blockDiskCacheAttributes0, (BlockDiskCache<LinkedHashSet<Integer>, ?>) null);
          assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
          assertNull(blockDiskCacheAttributes0.getEventQueueType());
          assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
          assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
          assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
          assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
          assertNull(blockDiskCacheAttributes0.getCacheName());
          assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
          assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
          assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
          assertNull(blockDiskCacheAttributes0.getName());
          assertTrue(blockDiskKeyStore0.isEmpty());
          assertEquals(0, blockDiskKeyStore0.size());
          assertNotNull(blockDiskKeyStore0);
          
          // Undeclared exception!
          try { 
            blockDiskKeyStore0.reset();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"null.key\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newFileChannel(UnixFileSystemProvider.java:175)
             // java.nio.channels.FileChannel.open(FileChannel.java:287)
             // java.nio.channels.FileChannel.open(FileChannel.java:335)
             // org.apache.commons.jcs3.auxiliary.disk.block.BlockDiskKeyStore.saveKeys(BlockDiskKeyStore.java:524)
             // org.apache.commons.jcs3.auxiliary.disk.block.BlockDiskKeyStore.reset(BlockDiskKeyStore.java:508)
             // sun.reflect.GeneratedMethodAccessor227.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
          assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
          assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
          assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
          assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
          assertNull(blockDiskCacheAttributes0.getEventQueueType());
          assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
          assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
          assertNull(blockDiskCacheAttributes0.getName());
          assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
          assertNull(blockDiskCacheAttributes0.getCacheName());
          assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
          assertNotNull(blockDiskCacheAttributes0);
          
          BlockDiskKeyStore<LinkedHashSet<Integer>> blockDiskKeyStore0 = new BlockDiskKeyStore<LinkedHashSet<Integer>>(blockDiskCacheAttributes0, (BlockDiskCache<LinkedHashSet<Integer>, ?>) null);
          assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
          assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
          assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
          assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
          assertNull(blockDiskCacheAttributes0.getEventQueueType());
          assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
          assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
          assertNull(blockDiskCacheAttributes0.getName());
          assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
          assertNull(blockDiskCacheAttributes0.getCacheName());
          assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
          assertTrue(blockDiskKeyStore0.isEmpty());
          assertEquals(0, blockDiskKeyStore0.size());
          assertNotNull(blockDiskKeyStore0);
          
          LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
          assertEquals(0, linkedHashSet0.size());
          assertTrue(linkedHashSet0.isEmpty());
          assertNotNull(linkedHashSet0);
          
          int[] intArray0 = new int[6];
          intArray0[0] = 10000;
          intArray0[1] = (-1);
          intArray0[2] = (-1);
          intArray0[3] = (-1723);
          intArray0[4] = 3918;
          intArray0[5] = 3005;
          blockDiskKeyStore0.put(linkedHashSet0, intArray0);
          assertArrayEquals(new int[] {10000, (-1), (-1), (-1723), 3918, 3005}, intArray0);
          assertEquals(6, intArray0.length);
          assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
          assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
          assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
          assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
          assertNull(blockDiskCacheAttributes0.getEventQueueType());
          assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
          assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
          assertNull(blockDiskCacheAttributes0.getName());
          assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
          assertNull(blockDiskCacheAttributes0.getCacheName());
          assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
          assertFalse(blockDiskKeyStore0.isEmpty());
          assertEquals(1, blockDiskKeyStore0.size());
          assertEquals(0, linkedHashSet0.size());
          assertTrue(linkedHashSet0.isEmpty());
          assertFalse(linkedHashSet0.contains((-1)));
          
          LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>();
          assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
          assertTrue(linkedHashSet1.isEmpty());
          assertEquals(0, linkedHashSet1.size());
          assertNotNull(linkedHashSet1);
          assertFalse(linkedHashSet1.contains((-1)));
          
          int[] intArray1 = blockDiskKeyStore0.remove(linkedHashSet1);
          assertArrayEquals(new int[] {10000, (-1), (-1), (-1723), 3918, 3005}, intArray1);
          assertEquals(6, intArray1.length);
          assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
          assertNotSame(linkedHashSet1, linkedHashSet0);
          assertSame(intArray1, intArray0);
          assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
          assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
          assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
          assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
          assertNull(blockDiskCacheAttributes0.getEventQueueType());
          assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
          assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
          assertNull(blockDiskCacheAttributes0.getName());
          assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
          assertNull(blockDiskCacheAttributes0.getCacheName());
          assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
          assertTrue(blockDiskKeyStore0.isEmpty());
          assertEquals(0, blockDiskKeyStore0.size());
          assertTrue(linkedHashSet1.isEmpty());
          assertEquals(0, linkedHashSet1.size());
          assertNotNull(intArray1);
          assertFalse(linkedHashSet1.contains((-1)));
          
          // Undeclared exception!
          try { 
            blockDiskKeyStore0.reset();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"null.key\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newFileChannel(UnixFileSystemProvider.java:175)
             // java.nio.channels.FileChannel.open(FileChannel.java:287)
             // java.nio.channels.FileChannel.open(FileChannel.java:335)
             // org.apache.commons.jcs3.auxiliary.disk.block.BlockDiskKeyStore.saveKeys(BlockDiskKeyStore.java:524)
             // org.apache.commons.jcs3.auxiliary.disk.block.BlockDiskKeyStore.reset(BlockDiskKeyStore.java:508)
             // sun.reflect.GeneratedMethodAccessor227.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertNotNull(blockDiskCacheAttributes0);
      
      BlockDiskKeyStore<BlockDiskElementDescriptor<String>> blockDiskKeyStore0 = new BlockDiskKeyStore<BlockDiskElementDescriptor<String>>(blockDiskCacheAttributes0, (BlockDiskCache<BlockDiskElementDescriptor<String>, ?>) null);
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertTrue(blockDiskKeyStore0.isEmpty());
      assertEquals(0, blockDiskKeyStore0.size());
      assertNotNull(blockDiskKeyStore0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1260);
      intArray0[1] = 1512;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "getMatching");
      assertFalse(boolean0);
      
      intArray0[2] = (-6357);
      intArray0[3] = 0;
      intArray0[4] = 1305;
      intArray0[5] = 1;
      intArray0[6] = (-1866);
      intArray0[7] = 0;
      BlockDiskElementDescriptor<String> blockDiskElementDescriptor0 = new BlockDiskElementDescriptor<String>(">OisEs2h1XELvL6", intArray0);
      assertArrayEquals(new int[] {(-1260), 1512, (-6357), 0, 1305, 1, (-1866), 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(blockDiskElementDescriptor0);
      
      int[] intArray1 = blockDiskKeyStore0.get(blockDiskElementDescriptor0);
      assertArrayEquals(new int[] {(-1260), 1512, (-6357), 0, 1305, 1, (-1866), 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertTrue(blockDiskKeyStore0.isEmpty());
      assertEquals(0, blockDiskKeyStore0.size());
      assertNull(intArray1);
      
      BlockDiskKeyStore.LRUMapCountLimited blockDiskKeyStore_LRUMapCountLimited0 = blockDiskKeyStore0.new LRUMapCountLimited(0);
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertTrue(blockDiskKeyStore0.isEmpty());
      assertEquals(0, blockDiskKeyStore0.size());
      assertEquals(0, blockDiskKeyStore_LRUMapCountLimited0.size());
      assertFalse(blockDiskKeyStore_LRUMapCountLimited0.shouldRemove());
      assertTrue(blockDiskKeyStore_LRUMapCountLimited0.isEmpty());
      assertNotNull(blockDiskKeyStore_LRUMapCountLimited0);
      
      int[] intArray2 = new int[9];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 0;
      intArray2[1] = 0;
      intArray2[2] = 0;
      intArray2[3] = 1512;
      intArray2[4] = (-1866);
      intArray2[5] = 0;
      intArray2[6] = (-6357);
      intArray2[7] = 1;
      intArray2[8] = 0;
      // Undeclared exception!
      try { 
        blockDiskKeyStore_LRUMapCountLimited0.processRemovedLRU(intArray0, intArray2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.block.BlockDiskKeyStore$LRUMapCountLimited", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertNull(blockDiskCacheAttributes0.getName());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertNotNull(blockDiskCacheAttributes0);
      
      BlockDiskKeyStore<String> blockDiskKeyStore0 = new BlockDiskKeyStore<String>(blockDiskCacheAttributes0, (BlockDiskCache<String, ?>) null);
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertNull(blockDiskCacheAttributes0.getName());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertTrue(blockDiskKeyStore0.isEmpty());
      assertEquals(0, blockDiskKeyStore0.size());
      assertNotNull(blockDiskKeyStore0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1024;
      intArray0[3] = 0;
      intArray0[4] = 2;
      intArray0[5] = 42;
      intArray0[6] = 28;
      intArray0[7] = 188;
      intArray0[8] = (-4492);
      blockDiskKeyStore0.put("{0}: Found {1} in keys file.", intArray0);
      assertArrayEquals(new int[] {0, 0, 1024, 0, 2, 42, 28, 188, (-4492)}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertNull(blockDiskCacheAttributes0.getName());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(1, blockDiskKeyStore0.size());
      assertFalse(blockDiskKeyStore0.isEmpty());
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("null.key");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean0);
      
      BlockDiskKeyStore.LRUMapSizeLimited blockDiskKeyStore_LRUMapSizeLimited0 = blockDiskKeyStore0.new LRUMapSizeLimited();
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertNull(blockDiskCacheAttributes0.getName());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(1, blockDiskKeyStore0.size());
      assertFalse(blockDiskKeyStore0.isEmpty());
      assertEquals(0, blockDiskKeyStore_LRUMapSizeLimited0.size());
      assertTrue(blockDiskKeyStore_LRUMapSizeLimited0.isEmpty());
      assertNotNull(blockDiskKeyStore_LRUMapSizeLimited0);
      
      blockDiskKeyStore_LRUMapSizeLimited0.clear();
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertNull(blockDiskCacheAttributes0.getName());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(1, blockDiskKeyStore0.size());
      assertFalse(blockDiskKeyStore0.isEmpty());
      assertEquals(0, blockDiskKeyStore_LRUMapSizeLimited0.size());
      assertTrue(blockDiskKeyStore_LRUMapSizeLimited0.isEmpty());
      
      boolean boolean1 = blockDiskKeyStore_LRUMapSizeLimited0.shouldRemove();
      assertFalse(boolean1 == boolean0);
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertNull(blockDiskCacheAttributes0.getName());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(1, blockDiskKeyStore0.size());
      assertFalse(blockDiskKeyStore0.isEmpty());
      assertEquals(0, blockDiskKeyStore_LRUMapSizeLimited0.size());
      assertTrue(blockDiskKeyStore_LRUMapSizeLimited0.isEmpty());
      assertFalse(boolean1);
      
      BlockDiskKeyStore.LRUMapSizeLimited blockDiskKeyStore_LRUMapSizeLimited1 = blockDiskKeyStore0.new LRUMapSizeLimited((-50));
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertNull(blockDiskCacheAttributes0.getName());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(1, blockDiskKeyStore0.size());
      assertFalse(blockDiskKeyStore0.isEmpty());
      assertEquals(0, blockDiskKeyStore_LRUMapSizeLimited1.size());
      assertTrue(blockDiskKeyStore_LRUMapSizeLimited1.isEmpty());
      assertNotNull(blockDiskKeyStore_LRUMapSizeLimited1);
      
      int[] intArray1 = blockDiskKeyStore_LRUMapSizeLimited1.remove((Object) blockDiskCacheAttributes0);
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertNull(blockDiskCacheAttributes0.getName());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(1, blockDiskKeyStore0.size());
      assertFalse(blockDiskKeyStore0.isEmpty());
      assertEquals(0, blockDiskKeyStore_LRUMapSizeLimited1.size());
      assertTrue(blockDiskKeyStore_LRUMapSizeLimited1.isEmpty());
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertNotNull(blockDiskCacheAttributes0);
      
      BlockDiskKeyStore<Object> blockDiskKeyStore0 = new BlockDiskKeyStore<Object>(blockDiskCacheAttributes0, (BlockDiskCache<Object, ?>) null);
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(0, blockDiskKeyStore0.size());
      assertTrue(blockDiskKeyStore0.isEmpty());
      assertNotNull(blockDiskKeyStore0);
      
      BlockDiskKeyStore.LRUMapSizeLimited blockDiskKeyStore_LRUMapSizeLimited0 = blockDiskKeyStore0.new LRUMapSizeLimited();
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(0, blockDiskKeyStore0.size());
      assertTrue(blockDiskKeyStore0.isEmpty());
      assertTrue(blockDiskKeyStore_LRUMapSizeLimited0.isEmpty());
      assertEquals(0, blockDiskKeyStore_LRUMapSizeLimited0.size());
      assertNotNull(blockDiskKeyStore_LRUMapSizeLimited0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 128;
      intArray0[1] = 185;
      intArray0[2] = 5000;
      intArray0[3] = (-1);
      // Undeclared exception!
      try { 
        blockDiskKeyStore_LRUMapSizeLimited0.put((LinkedHashSet<Delayed>) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNotNull(blockDiskCacheAttributes0);
      
      BlockDiskKeyStore<LinkedHashSet<OpenOption>> blockDiskKeyStore0 = new BlockDiskKeyStore<LinkedHashSet<OpenOption>>(blockDiskCacheAttributes0, (BlockDiskCache<LinkedHashSet<OpenOption>, ?>) null);
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertTrue(blockDiskKeyStore0.isEmpty());
      assertEquals(0, blockDiskKeyStore0.size());
      assertNotNull(blockDiskKeyStore0);
      
      LinkedHashSet<OpenOption> linkedHashSet0 = new LinkedHashSet<OpenOption>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      int[] intArray0 = blockDiskKeyStore0.get(linkedHashSet0);
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertTrue(blockDiskKeyStore0.isEmpty());
      assertEquals(0, blockDiskKeyStore0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertNull(blockDiskCacheAttributes0.getName());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNotNull(blockDiskCacheAttributes0);
      
      BlockDiskKeyStore<String> blockDiskKeyStore0 = new BlockDiskKeyStore<String>(blockDiskCacheAttributes0, (BlockDiskCache<String, ?>) null);
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertNull(blockDiskCacheAttributes0.getName());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertTrue(blockDiskKeyStore0.isEmpty());
      assertEquals(0, blockDiskKeyStore0.size());
      assertNotNull(blockDiskKeyStore0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1024;
      intArray0[3] = 0;
      intArray0[4] = 2;
      intArray0[5] = 1;
      intArray0[6] = 28;
      intArray0[7] = 188;
      intArray0[8] = (-4492);
      blockDiskKeyStore0.put("{0}: Found {1} in keys file.", intArray0);
      assertArrayEquals(new int[] {0, 0, 1024, 0, 2, 1, 28, 188, (-4492)}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertNull(blockDiskCacheAttributes0.getName());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertFalse(blockDiskKeyStore0.isEmpty());
      assertEquals(1, blockDiskKeyStore0.size());
      
      BlockDiskKeyStore.LRUMapSizeLimited blockDiskKeyStore_LRUMapSizeLimited0 = blockDiskKeyStore0.new LRUMapSizeLimited();
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertNull(blockDiskCacheAttributes0.getName());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertFalse(blockDiskKeyStore0.isEmpty());
      assertEquals(1, blockDiskKeyStore0.size());
      assertTrue(blockDiskKeyStore_LRUMapSizeLimited0.isEmpty());
      assertEquals(0, blockDiskKeyStore_LRUMapSizeLimited0.size());
      assertNotNull(blockDiskKeyStore_LRUMapSizeLimited0);
      
      StandardOpenOption standardOpenOption0 = StandardOpenOption.SPARSE;
      assertEquals(StandardOpenOption.SPARSE, standardOpenOption0);
      
      int[] intArray1 = blockDiskKeyStore_LRUMapSizeLimited0.put((OpenOption) standardOpenOption0, intArray0);
      assertArrayEquals(new int[] {0, 0, 1024, 0, 2, 1, 28, 188, (-4492)}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertNull(blockDiskCacheAttributes0.getName());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertFalse(blockDiskKeyStore0.isEmpty());
      assertEquals(1, blockDiskKeyStore0.size());
      assertFalse(blockDiskKeyStore_LRUMapSizeLimited0.isEmpty());
      assertEquals(1, blockDiskKeyStore_LRUMapSizeLimited0.size());
      assertNull(intArray1);
      
      boolean boolean0 = blockDiskKeyStore_LRUMapSizeLimited0.shouldRemove();
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertNull(blockDiskCacheAttributes0.getName());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertFalse(blockDiskKeyStore0.isEmpty());
      assertEquals(1, blockDiskKeyStore0.size());
      assertFalse(blockDiskKeyStore_LRUMapSizeLimited0.isEmpty());
      assertEquals(1, blockDiskKeyStore_LRUMapSizeLimited0.size());
      assertFalse(boolean0);
      
      EncryptingSerializer encryptingSerializer0 = new EncryptingSerializer();
      assertNotNull(encryptingSerializer0);
      
      blockDiskCacheAttributes0.setEventQueuePoolName("{0}: Found {1} in keys file.");
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals("{0}: Found {1} in keys file.", blockDiskCacheAttributes0.getEventQueuePoolName());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      
      BlockDiskCache<Object, Callable<int[]>> blockDiskCache0 = null;
      try {
        blockDiskCache0 = new BlockDiskCache<Object, Callable<int[]>>(blockDiskCacheAttributes0, encryptingSerializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.block.BlockDiskCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertNull(blockDiskCacheAttributes0.getName());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNotNull(blockDiskCacheAttributes0);
      
      BlockDiskKeyStore<Object> blockDiskKeyStore0 = new BlockDiskKeyStore<Object>(blockDiskCacheAttributes0, (BlockDiskCache<Object, ?>) null);
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertNull(blockDiskCacheAttributes0.getName());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertEquals(0, blockDiskKeyStore0.size());
      assertTrue(blockDiskKeyStore0.isEmpty());
      assertNotNull(blockDiskKeyStore0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-146);
      intArray0[1] = 3;
      intArray0[2] = 3;
      intArray0[3] = (-1);
      intArray0[4] = (-1575);
      intArray0[5] = 0;
      intArray0[6] = 3;
      intArray0[7] = 477;
      // Undeclared exception!
      try { 
        blockDiskKeyStore0.put((Object) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
          assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
          assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
          assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
          assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
          assertNull(blockDiskCacheAttributes0.getCacheName());
          assertNull(blockDiskCacheAttributes0.getName());
          assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
          assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
          assertNull(blockDiskCacheAttributes0.getEventQueueType());
          assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
          assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
          assertNotNull(blockDiskCacheAttributes0);
          
          BlockDiskKeyStore<BlockDiskKeyStore<Object>> blockDiskKeyStore0 = new BlockDiskKeyStore<BlockDiskKeyStore<Object>>(blockDiskCacheAttributes0, (BlockDiskCache<BlockDiskKeyStore<Object>, ?>) null);
          assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
          assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
          assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
          assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
          assertNull(blockDiskCacheAttributes0.getCacheName());
          assertNull(blockDiskCacheAttributes0.getName());
          assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
          assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
          assertNull(blockDiskCacheAttributes0.getEventQueueType());
          assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
          assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
          assertTrue(blockDiskKeyStore0.isEmpty());
          assertEquals(0, blockDiskKeyStore0.size());
          assertNotNull(blockDiskKeyStore0);
          
          // Undeclared exception!
          try { 
            blockDiskKeyStore0.saveKeys();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"null.key\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newFileChannel(UnixFileSystemProvider.java:175)
             // java.nio.channels.FileChannel.open(FileChannel.java:287)
             // java.nio.channels.FileChannel.open(FileChannel.java:335)
             // org.apache.commons.jcs3.auxiliary.disk.block.BlockDiskKeyStore.saveKeys(BlockDiskKeyStore.java:524)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertNotNull(blockDiskCacheAttributes0);
      
      BlockDiskKeyStore<Integer> blockDiskKeyStore0 = new BlockDiskKeyStore<Integer>(blockDiskCacheAttributes0, (BlockDiskCache<Integer, ?>) null);
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertTrue(blockDiskKeyStore0.isEmpty());
      assertEquals(0, blockDiskKeyStore0.size());
      assertNotNull(blockDiskKeyStore0);
      
      Set<Integer> set0 = blockDiskKeyStore0.keySet();
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertTrue(blockDiskKeyStore0.isEmpty());
      assertEquals(0, blockDiskKeyStore0.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      blockDiskCacheAttributes0.setShutdownSpoolTimeLimit(936);
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertEquals(936, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      
      Integer integer0 = new Integer(4);
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      int[] intArray0 = blockDiskKeyStore0.remove(integer0);
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertEquals(936, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertTrue(blockDiskKeyStore0.isEmpty());
      assertEquals(0, blockDiskKeyStore0.size());
      assertNull(intArray0);
      
      blockDiskCacheAttributes0.setEventQueuePoolName((String) null);
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertEquals(936, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      
      EncryptingSerializer encryptingSerializer0 = new EncryptingSerializer();
      assertNotNull(encryptingSerializer0);
      
      BlockDiskCache<String, Integer> blockDiskCache0 = null;
      try {
        blockDiskCache0 = new BlockDiskCache<String, Integer>(blockDiskCacheAttributes0, encryptingSerializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.block.BlockDiskCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNotNull(blockDiskCacheAttributes0);
      
      BlockDiskKeyStore<Object> blockDiskKeyStore0 = new BlockDiskKeyStore<Object>(blockDiskCacheAttributes0, (BlockDiskCache<Object, ?>) null);
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertTrue(blockDiskKeyStore0.isEmpty());
      assertEquals(0, blockDiskKeyStore0.size());
      assertNotNull(blockDiskKeyStore0);
      
      BlockDiskKeyStore.LRUMapSizeLimited blockDiskKeyStore_LRUMapSizeLimited0 = blockDiskKeyStore0.new LRUMapSizeLimited();
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertTrue(blockDiskKeyStore0.isEmpty());
      assertEquals(0, blockDiskKeyStore0.size());
      assertTrue(blockDiskKeyStore_LRUMapSizeLimited0.isEmpty());
      assertEquals(0, blockDiskKeyStore_LRUMapSizeLimited0.size());
      assertNotNull(blockDiskKeyStore_LRUMapSizeLimited0);
      
      boolean boolean0 = blockDiskKeyStore_LRUMapSizeLimited0.shouldRemove();
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertTrue(blockDiskKeyStore0.isEmpty());
      assertEquals(0, blockDiskKeyStore0.size());
      assertTrue(blockDiskKeyStore_LRUMapSizeLimited0.isEmpty());
      assertEquals(0, blockDiskKeyStore_LRUMapSizeLimited0.size());
      assertFalse(boolean0);
      
      blockDiskCacheAttributes0.setCacheName("");
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertEquals("", blockDiskCacheAttributes0.getCacheName());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      
      BlockDiskCacheAttributes blockDiskCacheAttributes1 = new BlockDiskCacheAttributes();
      assertFalse(blockDiskCacheAttributes1.equals((Object)blockDiskCacheAttributes0));
      assertNull(blockDiskCacheAttributes1.getCacheName());
      assertNull(blockDiskCacheAttributes1.getName());
      assertEquals(0, blockDiskCacheAttributes1.getBlockSizeBytes());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes1.getDiskLimitType());
      assertEquals(60, blockDiskCacheAttributes1.getShutdownSpoolTimeLimit());
      assertEquals(5000, blockDiskCacheAttributes1.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes1.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes1.getMaxKeySize());
      assertEquals(300L, blockDiskCacheAttributes1.getKeyPersistenceIntervalSeconds());
      assertNull(blockDiskCacheAttributes1.getEventQueueType());
      assertTrue(blockDiskCacheAttributes1.isAllowRemoveAll());
      assertNotNull(blockDiskCacheAttributes1);
      
      BlockDiskCache<Integer, OpenOption> blockDiskCache0 = null;
      try {
        blockDiskCache0 = new BlockDiskCache<Integer, OpenOption>(blockDiskCacheAttributes1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.block.BlockDiskCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNotNull(blockDiskCacheAttributes0);
      
      BlockDiskKeyStore<OpenOption> blockDiskKeyStore0 = new BlockDiskKeyStore<OpenOption>(blockDiskCacheAttributes0, (BlockDiskCache<OpenOption, ?>) null);
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertTrue(blockDiskKeyStore0.isEmpty());
      assertEquals(0, blockDiskKeyStore0.size());
      assertNotNull(blockDiskKeyStore0);
      
      StandardOpenOption standardOpenOption0 = StandardOpenOption.DELETE_ON_CLOSE;
      assertEquals(StandardOpenOption.DELETE_ON_CLOSE, standardOpenOption0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-3025);
      intArray0[3] = 1688;
      intArray0[4] = 0;
      intArray0[5] = 1024;
      intArray0[6] = 93;
      intArray0[7] = (-2127);
      intArray0[8] = (-1734);
      blockDiskKeyStore0.put(standardOpenOption0, intArray0);
      assertArrayEquals(new int[] {0, 0, (-3025), 1688, 0, 1024, 93, (-2127), (-1734)}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertFalse(blockDiskKeyStore0.isEmpty());
      assertEquals(1, blockDiskKeyStore0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertNull(blockDiskCacheAttributes0.getName());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNotNull(blockDiskCacheAttributes0);
      
      BlockDiskCache<int[], OpenOption> blockDiskCache0 = null;
      blockDiskCacheAttributes0.setShutdownSpoolTimeLimit((-950));
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertEquals((-950), blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertNull(blockDiskCacheAttributes0.getName());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      
      blockDiskCacheAttributes0.setMaxKeySize((-2926));
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertEquals((-2926), blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals((-950), blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertNull(blockDiskCacheAttributes0.getName());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      
      BlockDiskKeyStore<int[]> blockDiskKeyStore0 = new BlockDiskKeyStore<int[]>(blockDiskCacheAttributes0, (BlockDiskCache<int[], ?>) null);
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertEquals((-2926), blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals((-950), blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertNull(blockDiskCacheAttributes0.getName());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertEquals(0, blockDiskKeyStore0.size());
      assertTrue(blockDiskKeyStore0.isEmpty());
      assertNotNull(blockDiskKeyStore0);
      
      blockDiskKeyStore0.clearMemoryMap();
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertEquals((-2926), blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals((-950), blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertNull(blockDiskCacheAttributes0.getName());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertEquals(0, blockDiskKeyStore0.size());
      assertTrue(blockDiskKeyStore0.isEmpty());
      
      BlockDiskKeyStore.LRUMapCountLimited blockDiskKeyStore_LRUMapCountLimited0 = blockDiskKeyStore0.new LRUMapCountLimited((-2502));
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertEquals((-2926), blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals((-950), blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertNull(blockDiskCacheAttributes0.getName());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertEquals(0, blockDiskKeyStore0.size());
      assertTrue(blockDiskKeyStore0.isEmpty());
      assertEquals(0, blockDiskKeyStore_LRUMapCountLimited0.size());
      assertFalse(blockDiskKeyStore_LRUMapCountLimited0.shouldRemove());
      assertTrue(blockDiskKeyStore_LRUMapCountLimited0.isEmpty());
      assertNotNull(blockDiskKeyStore_LRUMapCountLimited0);
      
      BlockDiskKeyStore.LRUMapSizeLimited blockDiskKeyStore_LRUMapSizeLimited0 = blockDiskKeyStore0.new LRUMapSizeLimited((-2926));
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertEquals((-2926), blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals((-950), blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertNull(blockDiskCacheAttributes0.getName());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertEquals(0, blockDiskKeyStore0.size());
      assertTrue(blockDiskKeyStore0.isEmpty());
      assertTrue(blockDiskKeyStore_LRUMapSizeLimited0.isEmpty());
      assertEquals(0, blockDiskKeyStore_LRUMapSizeLimited0.size());
      assertNotNull(blockDiskKeyStore_LRUMapSizeLimited0);
      
      // Undeclared exception!
      try { 
        blockDiskKeyStore_LRUMapSizeLimited0.remove((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertNotNull(blockDiskCacheAttributes0);
      
      BlockDiskCacheAttributes blockDiskCacheAttributes1 = (BlockDiskCacheAttributes)blockDiskCacheAttributes0.clone();
      assertFalse(blockDiskCacheAttributes1.equals((Object)blockDiskCacheAttributes0));
      assertNotSame(blockDiskCacheAttributes0, blockDiskCacheAttributes1);
      assertNotSame(blockDiskCacheAttributes1, blockDiskCacheAttributes0);
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(60, blockDiskCacheAttributes1.getShutdownSpoolTimeLimit());
      assertEquals(300L, blockDiskCacheAttributes1.getKeyPersistenceIntervalSeconds());
      assertNull(blockDiskCacheAttributes1.getEventQueueType());
      assertTrue(blockDiskCacheAttributes1.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes1.getCacheName());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes1.getDiskLimitType());
      assertNull(blockDiskCacheAttributes1.getName());
      assertEquals(5000, blockDiskCacheAttributes1.getMaxPurgatorySize());
      assertEquals(0, blockDiskCacheAttributes1.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes1.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes1.getMaxKeySize());
      assertNotNull(blockDiskCacheAttributes1);
      
      BlockDiskKeyStore<Object> blockDiskKeyStore0 = new BlockDiskKeyStore<Object>(blockDiskCacheAttributes0, (BlockDiskCache<Object, ?>) null);
      assertFalse(blockDiskCacheAttributes0.equals((Object)blockDiskCacheAttributes1));
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(0, blockDiskKeyStore0.size());
      assertTrue(blockDiskKeyStore0.isEmpty());
      assertNotNull(blockDiskKeyStore0);
      
      BlockDiskKeyStore.LRUMapSizeLimited blockDiskKeyStore_LRUMapSizeLimited0 = blockDiskKeyStore0.new LRUMapSizeLimited(0);
      assertFalse(blockDiskCacheAttributes0.equals((Object)blockDiskCacheAttributes1));
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(0, blockDiskKeyStore0.size());
      assertTrue(blockDiskKeyStore0.isEmpty());
      assertTrue(blockDiskKeyStore_LRUMapSizeLimited0.isEmpty());
      assertEquals(0, blockDiskKeyStore_LRUMapSizeLimited0.size());
      assertNotNull(blockDiskKeyStore_LRUMapSizeLimited0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      // Undeclared exception!
      try { 
        blockDiskKeyStore_LRUMapSizeLimited0.processRemovedLRU(integer0, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.block.BlockDiskKeyStore$LRUMapSizeLimited", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BlockDiskKeyStore<Object> blockDiskKeyStore0 = null;
      try {
        blockDiskKeyStore0 = new BlockDiskKeyStore<Object>((BlockDiskCacheAttributes) null, (BlockDiskCache<Object, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.block.BlockDiskKeyStore", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
          assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
          assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
          assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
          assertNull(blockDiskCacheAttributes0.getName());
          assertNull(blockDiskCacheAttributes0.getCacheName());
          assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
          assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
          assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
          assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
          assertNull(blockDiskCacheAttributes0.getEventQueueType());
          assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
          assertNotNull(blockDiskCacheAttributes0);
          
          blockDiskCacheAttributes0.setMaxPurgatorySize(0);
          assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
          assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
          assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
          assertNull(blockDiskCacheAttributes0.getName());
          assertNull(blockDiskCacheAttributes0.getCacheName());
          assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
          assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
          assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
          assertEquals(0, blockDiskCacheAttributes0.getMaxPurgatorySize());
          assertNull(blockDiskCacheAttributes0.getEventQueueType());
          assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
          
          BlockDiskKeyStore<String> blockDiskKeyStore0 = new BlockDiskKeyStore<String>(blockDiskCacheAttributes0, (BlockDiskCache<String, ?>) null);
          assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
          assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
          assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
          assertNull(blockDiskCacheAttributes0.getName());
          assertNull(blockDiskCacheAttributes0.getCacheName());
          assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
          assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
          assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
          assertEquals(0, blockDiskCacheAttributes0.getMaxPurgatorySize());
          assertNull(blockDiskCacheAttributes0.getEventQueueType());
          assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
          assertTrue(blockDiskKeyStore0.isEmpty());
          assertEquals(0, blockDiskKeyStore0.size());
          assertNotNull(blockDiskKeyStore0);
          
          LogManager.setLogSystem("{0}: Not alive and dispose was called, filename: {1}");
          blockDiskKeyStore0.loadKeys();
          assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
          assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
          assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
          assertNull(blockDiskCacheAttributes0.getName());
          assertNull(blockDiskCacheAttributes0.getCacheName());
          assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
          assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
          assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
          assertEquals(0, blockDiskCacheAttributes0.getMaxPurgatorySize());
          assertNull(blockDiskCacheAttributes0.getEventQueueType());
          assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
          assertTrue(blockDiskKeyStore0.isEmpty());
          assertEquals(0, blockDiskKeyStore0.size());
          
          // Undeclared exception!
          try { 
            blockDiskKeyStore0.reset();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"null.key\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newFileChannel(UnixFileSystemProvider.java:175)
             // java.nio.channels.FileChannel.open(FileChannel.java:287)
             // java.nio.channels.FileChannel.open(FileChannel.java:335)
             // org.apache.commons.jcs3.auxiliary.disk.block.BlockDiskKeyStore.saveKeys(BlockDiskKeyStore.java:524)
             // org.apache.commons.jcs3.auxiliary.disk.block.BlockDiskKeyStore.reset(BlockDiskKeyStore.java:508)
             // sun.reflect.GeneratedMethodAccessor227.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertNull(blockDiskCacheAttributes0.getName());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertNotNull(blockDiskCacheAttributes0);
      
      ICacheEventQueue.QueueType iCacheEventQueue_QueueType0 = ICacheEventQueue.QueueType.SINGLE;
      blockDiskCacheAttributes0.setEventQueueType(iCacheEventQueue_QueueType0);
      assertEquals(ICacheEventQueue.QueueType.SINGLE, blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertNull(blockDiskCacheAttributes0.getName());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      
      BlockDiskKeyStore<Object> blockDiskKeyStore0 = new BlockDiskKeyStore<Object>(blockDiskCacheAttributes0, (BlockDiskCache<Object, ?>) null);
      assertEquals(ICacheEventQueue.QueueType.SINGLE, blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertNull(blockDiskCacheAttributes0.getName());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(0, blockDiskKeyStore0.size());
      assertTrue(blockDiskKeyStore0.isEmpty());
      assertNotNull(blockDiskKeyStore0);
      
      blockDiskKeyStore0.loadKeys();
      assertEquals(ICacheEventQueue.QueueType.SINGLE, blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertNull(blockDiskCacheAttributes0.getName());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(0, blockDiskKeyStore0.size());
      assertTrue(blockDiskKeyStore0.isEmpty());
      
      boolean boolean0 = blockDiskKeyStore0.isEmpty();
      assertEquals(ICacheEventQueue.QueueType.SINGLE, blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertNull(blockDiskCacheAttributes0.getName());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(0, blockDiskKeyStore0.size());
      assertTrue(blockDiskKeyStore0.isEmpty());
      assertTrue(boolean0);
      
      BlockDiskCacheAttributes blockDiskCacheAttributes1 = new BlockDiskCacheAttributes();
      assertFalse(blockDiskCacheAttributes1.equals((Object)blockDiskCacheAttributes0));
      assertEquals(5000, blockDiskCacheAttributes1.getMaxPurgatorySize());
      assertEquals(300L, blockDiskCacheAttributes1.getKeyPersistenceIntervalSeconds());
      assertNull(blockDiskCacheAttributes1.getCacheName());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes1.getDiskLimitType());
      assertEquals(60, blockDiskCacheAttributes1.getShutdownSpoolTimeLimit());
      assertNull(blockDiskCacheAttributes1.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes1.getMaxKeySize());
      assertEquals(0, blockDiskCacheAttributes1.getBlockSizeBytes());
      assertTrue(blockDiskCacheAttributes1.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes1.getName());
      assertNull(blockDiskCacheAttributes1.getEventQueueType());
      assertNotNull(blockDiskCacheAttributes1);
      
      CompressingSerializer compressingSerializer0 = new CompressingSerializer();
      assertNotNull(compressingSerializer0);
      
      BlockDiskCache<AbstractMap.SimpleEntry<Integer, Object>, Object> blockDiskCache0 = null;
      try {
        blockDiskCache0 = new BlockDiskCache<AbstractMap.SimpleEntry<Integer, Object>, Object>(blockDiskCacheAttributes0, compressingSerializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.block.BlockDiskCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getName());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertNotNull(blockDiskCacheAttributes0);
      
      BlockDiskKeyStore<OpenOption> blockDiskKeyStore0 = new BlockDiskKeyStore<OpenOption>(blockDiskCacheAttributes0, (BlockDiskCache<OpenOption, ?>) null);
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getName());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(0, blockDiskKeyStore0.size());
      assertTrue(blockDiskKeyStore0.isEmpty());
      assertNotNull(blockDiskKeyStore0);
      
      BlockDiskKeyStore.LRUMapSizeLimited blockDiskKeyStore_LRUMapSizeLimited0 = blockDiskKeyStore0.new LRUMapSizeLimited(0);
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getName());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(0, blockDiskKeyStore0.size());
      assertTrue(blockDiskKeyStore0.isEmpty());
      assertEquals(0, blockDiskKeyStore_LRUMapSizeLimited0.size());
      assertTrue(blockDiskKeyStore_LRUMapSizeLimited0.isEmpty());
      assertNotNull(blockDiskKeyStore_LRUMapSizeLimited0);
      
      StandardSerializer standardSerializer0 = new StandardSerializer();
      assertNotNull(standardSerializer0);
      
      CompressingSerializer compressingSerializer0 = new CompressingSerializer(standardSerializer0);
      assertNotNull(compressingSerializer0);
      
      EncryptingSerializer encryptingSerializer0 = new EncryptingSerializer(compressingSerializer0);
      assertNotNull(encryptingSerializer0);
      
      BlockDiskCache<Delayed, Object> blockDiskCache0 = null;
      try {
        blockDiskCache0 = new BlockDiskCache<Delayed, Object>(blockDiskCacheAttributes0, encryptingSerializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.block.BlockDiskCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
      assertNull(blockDiskCacheAttributes0.getName());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertNotNull(blockDiskCacheAttributes0);
      
      BlockDiskKeyStore<Object> blockDiskKeyStore0 = new BlockDiskKeyStore<Object>(blockDiskCacheAttributes0, (BlockDiskCache<Object, ?>) null);
      assertNull(blockDiskCacheAttributes0.getName());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertTrue(blockDiskKeyStore0.isEmpty());
      assertEquals(0, blockDiskKeyStore0.size());
      assertNotNull(blockDiskKeyStore0);
      
      BlockDiskKeyStore.LRUMapSizeLimited blockDiskKeyStore_LRUMapSizeLimited0 = blockDiskKeyStore0.new LRUMapSizeLimited();
      assertNull(blockDiskCacheAttributes0.getName());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertTrue(blockDiskKeyStore0.isEmpty());
      assertEquals(0, blockDiskKeyStore0.size());
      assertTrue(blockDiskKeyStore_LRUMapSizeLimited0.isEmpty());
      assertEquals(0, blockDiskKeyStore_LRUMapSizeLimited0.size());
      assertNotNull(blockDiskKeyStore_LRUMapSizeLimited0);
      
      // Undeclared exception!
      try { 
        StandardOpenOption.valueOf("ivZWEWm2CnW)~R,r");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.nio.file.StandardOpenOption.ivZWEWm2CnW)~R,r
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertNull(blockDiskCacheAttributes0.getName());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertNotNull(blockDiskCacheAttributes0);
      
      BlockDiskKeyStore<OpenOption> blockDiskKeyStore0 = new BlockDiskKeyStore<OpenOption>(blockDiskCacheAttributes0, (BlockDiskCache<OpenOption, ?>) null);
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertNull(blockDiskCacheAttributes0.getName());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertTrue(blockDiskKeyStore0.isEmpty());
      assertEquals(0, blockDiskKeyStore0.size());
      assertNotNull(blockDiskKeyStore0);
      
      BlockDiskKeyStore.LRUMapSizeLimited blockDiskKeyStore_LRUMapSizeLimited0 = blockDiskKeyStore0.new LRUMapSizeLimited((-1888));
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertNull(blockDiskCacheAttributes0.getName());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertTrue(blockDiskKeyStore0.isEmpty());
      assertEquals(0, blockDiskKeyStore0.size());
      assertTrue(blockDiskKeyStore_LRUMapSizeLimited0.isEmpty());
      assertEquals(0, blockDiskKeyStore_LRUMapSizeLimited0.size());
      assertNotNull(blockDiskKeyStore_LRUMapSizeLimited0);
      
      // Undeclared exception!
      try { 
        blockDiskKeyStore_LRUMapSizeLimited0.put((ForkJoinTask<Integer>) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
          assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
          assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
          assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
          assertNull(blockDiskCacheAttributes0.getCacheName());
          assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
          assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
          assertNull(blockDiskCacheAttributes0.getName());
          assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
          assertNull(blockDiskCacheAttributes0.getEventQueueType());
          assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
          assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
          assertNotNull(blockDiskCacheAttributes0);
          
          String string0 = blockDiskCacheAttributes0.toString();
          assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
          assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
          assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
          assertNull(blockDiskCacheAttributes0.getCacheName());
          assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
          assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
          assertNull(blockDiskCacheAttributes0.getName());
          assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
          assertNull(blockDiskCacheAttributes0.getEventQueueType());
          assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
          assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
          assertNotNull(string0);
          assertEquals("\nBlockDiskAttributes \n DiskPath [null]\n MaxKeySize [5000]\n MaxPurgatorySize [5000]\n BlockSizeBytes [0]\n KeyPersistenceIntervalSeconds [300]\n DiskLimitType [COUNT]", string0);
          
          IDiskCacheAttributes.DiskLimitType iDiskCacheAttributes_DiskLimitType0 = IDiskCacheAttributes.DiskLimitType.SIZE;
          blockDiskCacheAttributes0.setDiskLimitType(iDiskCacheAttributes_DiskLimitType0);
          assertEquals(IDiskCacheAttributes.DiskLimitType.SIZE, blockDiskCacheAttributes0.getDiskLimitType());
          assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
          assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
          assertNull(blockDiskCacheAttributes0.getCacheName());
          assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
          assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
          assertNull(blockDiskCacheAttributes0.getName());
          assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
          assertNull(blockDiskCacheAttributes0.getEventQueueType());
          assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
          assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
          
          BlockDiskKeyStore<Object> blockDiskKeyStore0 = new BlockDiskKeyStore<Object>(blockDiskCacheAttributes0, (BlockDiskCache<Object, ?>) null);
          assertEquals(IDiskCacheAttributes.DiskLimitType.SIZE, blockDiskCacheAttributes0.getDiskLimitType());
          assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
          assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
          assertNull(blockDiskCacheAttributes0.getCacheName());
          assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
          assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
          assertNull(blockDiskCacheAttributes0.getName());
          assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
          assertNull(blockDiskCacheAttributes0.getEventQueueType());
          assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
          assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
          assertTrue(blockDiskKeyStore0.isEmpty());
          assertEquals(0, blockDiskKeyStore0.size());
          assertNotNull(blockDiskKeyStore0);
          
          int[] intArray0 = new int[5];
          blockDiskKeyStore0.put(blockDiskCacheAttributes0, intArray0);
          assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
          assertEquals(5, intArray0.length);
          assertEquals(IDiskCacheAttributes.DiskLimitType.SIZE, blockDiskCacheAttributes0.getDiskLimitType());
          assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
          assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
          assertNull(blockDiskCacheAttributes0.getCacheName());
          assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
          assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
          assertNull(blockDiskCacheAttributes0.getName());
          assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
          assertNull(blockDiskCacheAttributes0.getEventQueueType());
          assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
          assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
          assertFalse(blockDiskKeyStore0.isEmpty());
          assertEquals(1, blockDiskKeyStore0.size());
          
          boolean boolean0 = blockDiskKeyStore0.isEmpty();
          assertEquals(IDiskCacheAttributes.DiskLimitType.SIZE, blockDiskCacheAttributes0.getDiskLimitType());
          assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
          assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
          assertNull(blockDiskCacheAttributes0.getCacheName());
          assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
          assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
          assertNull(blockDiskCacheAttributes0.getName());
          assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
          assertNull(blockDiskCacheAttributes0.getEventQueueType());
          assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
          assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
          assertFalse(blockDiskKeyStore0.isEmpty());
          assertEquals(1, blockDiskKeyStore0.size());
          assertFalse(boolean0);
          
          // Undeclared exception!
          try { 
            blockDiskKeyStore0.saveKeys();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"null.key\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newFileChannel(UnixFileSystemProvider.java:175)
             // java.nio.channels.FileChannel.open(FileChannel.java:287)
             // java.nio.channels.FileChannel.open(FileChannel.java:335)
             // org.apache.commons.jcs3.auxiliary.disk.block.BlockDiskKeyStore.saveKeys(BlockDiskKeyStore.java:524)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
          assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
          assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
          assertNull(blockDiskCacheAttributes0.getCacheName());
          assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
          assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
          assertNull(blockDiskCacheAttributes0.getEventQueueType());
          assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
          assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
          assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
          assertNull(blockDiskCacheAttributes0.getName());
          assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
          assertNotNull(blockDiskCacheAttributes0);
          
          BlockDiskKeyStore<Callable<int[]>> blockDiskKeyStore0 = new BlockDiskKeyStore<Callable<int[]>>(blockDiskCacheAttributes0, (BlockDiskCache<Callable<int[]>, ?>) null);
          assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
          assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
          assertNull(blockDiskCacheAttributes0.getCacheName());
          assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
          assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
          assertNull(blockDiskCacheAttributes0.getEventQueueType());
          assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
          assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
          assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
          assertNull(blockDiskCacheAttributes0.getName());
          assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
          assertTrue(blockDiskKeyStore0.isEmpty());
          assertEquals(0, blockDiskKeyStore0.size());
          assertNotNull(blockDiskKeyStore0);
          
          // Undeclared exception!
          try { 
            blockDiskKeyStore0.reset();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"null.key\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newFileChannel(UnixFileSystemProvider.java:175)
             // java.nio.channels.FileChannel.open(FileChannel.java:287)
             // java.nio.channels.FileChannel.open(FileChannel.java:335)
             // org.apache.commons.jcs3.auxiliary.disk.block.BlockDiskKeyStore.saveKeys(BlockDiskKeyStore.java:524)
             // org.apache.commons.jcs3.auxiliary.disk.block.BlockDiskKeyStore.reset(BlockDiskKeyStore.java:508)
             // sun.reflect.GeneratedMethodAccessor227.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertNull(blockDiskCacheAttributes0.getName());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertNotNull(blockDiskCacheAttributes0);
      
      BlockDiskKeyStore<Callable<int[]>> blockDiskKeyStore0 = new BlockDiskKeyStore<Callable<int[]>>(blockDiskCacheAttributes0, (BlockDiskCache<Callable<int[]>, ?>) null);
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertNull(blockDiskCacheAttributes0.getName());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertTrue(blockDiskKeyStore0.isEmpty());
      assertEquals(0, blockDiskKeyStore0.size());
      assertNotNull(blockDiskKeyStore0);
      
      BlockDiskKeyStore.LRUMapSizeLimited blockDiskKeyStore_LRUMapSizeLimited0 = blockDiskKeyStore0.new LRUMapSizeLimited(1);
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertNull(blockDiskCacheAttributes0.getName());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertTrue(blockDiskKeyStore0.isEmpty());
      assertEquals(0, blockDiskKeyStore0.size());
      assertTrue(blockDiskKeyStore_LRUMapSizeLimited0.isEmpty());
      assertEquals(0, blockDiskKeyStore_LRUMapSizeLimited0.size());
      assertNotNull(blockDiskKeyStore_LRUMapSizeLimited0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[0] = 1;
      int[] intArray1 = blockDiskKeyStore_LRUMapSizeLimited0.put("orig-lru-size", intArray0);
      assertArrayEquals(new int[] {1, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertNull(blockDiskCacheAttributes0.getName());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertTrue(blockDiskKeyStore0.isEmpty());
      assertEquals(0, blockDiskKeyStore0.size());
      assertFalse(blockDiskKeyStore_LRUMapSizeLimited0.isEmpty());
      assertEquals(1, blockDiskKeyStore_LRUMapSizeLimited0.size());
      assertNull(intArray1);
      
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 1;
      int[] intArray3 = blockDiskKeyStore_LRUMapSizeLimited0.put("Q]4l2", intArray2);
      assertArrayEquals(new int[] {1, 0, 0, 0, 0, 0, 0, 0}, intArray2);
      assertEquals(8, intArray2.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray2, intArray0);
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertNull(blockDiskCacheAttributes0.getName());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertTrue(blockDiskKeyStore0.isEmpty());
      assertEquals(0, blockDiskKeyStore0.size());
      assertFalse(blockDiskKeyStore_LRUMapSizeLimited0.isEmpty());
      assertEquals(2, blockDiskKeyStore_LRUMapSizeLimited0.size());
      assertNull(intArray3);
      
      blockDiskKeyStore_LRUMapSizeLimited0.clear();
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertNull(blockDiskCacheAttributes0.getName());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertTrue(blockDiskKeyStore0.isEmpty());
      assertEquals(0, blockDiskKeyStore0.size());
      assertTrue(blockDiskKeyStore_LRUMapSizeLimited0.isEmpty());
      assertEquals(0, blockDiskKeyStore_LRUMapSizeLimited0.size());
      
      int[] intArray4 = blockDiskKeyStore_LRUMapSizeLimited0.put("Q]4l2", intArray2);
      assertArrayEquals(new int[] {1, 0, 0, 0, 0, 0, 0, 0}, intArray2);
      assertEquals(8, intArray2.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray2, intArray0);
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertNull(blockDiskCacheAttributes0.getName());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertTrue(blockDiskKeyStore0.isEmpty());
      assertEquals(0, blockDiskKeyStore0.size());
      assertFalse(blockDiskKeyStore_LRUMapSizeLimited0.isEmpty());
      assertEquals(1, blockDiskKeyStore_LRUMapSizeLimited0.size());
      assertNull(intArray4);
      
      // Undeclared exception!
      try { 
        blockDiskKeyStore_LRUMapSizeLimited0.put("orig-lru-size", intArray2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.block.BlockDiskKeyStore$LRUMapSizeLimited", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertNotNull(blockDiskCacheAttributes0);
      
      blockDiskCacheAttributes0.setMaxKeySize(2);
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(2, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      
      BlockDiskKeyStore<int[]> blockDiskKeyStore0 = new BlockDiskKeyStore<int[]>(blockDiskCacheAttributes0, (BlockDiskCache<int[], ?>) null);
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(2, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertTrue(blockDiskKeyStore0.isEmpty());
      assertEquals(0, blockDiskKeyStore0.size());
      assertNotNull(blockDiskKeyStore0);
      
      BlockDiskKeyStore.LRUMapSizeLimited blockDiskKeyStore_LRUMapSizeLimited0 = blockDiskKeyStore0.new LRUMapSizeLimited(2);
      assertEquals(0, blockDiskCacheAttributes0.getBlockSizeBytes());
      assertEquals(60, blockDiskCacheAttributes0.getShutdownSpoolTimeLimit());
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertNull(blockDiskCacheAttributes0.getEventQueueType());
      assertTrue(blockDiskCacheAttributes0.isAllowRemoveAll());
      assertNull(blockDiskCacheAttributes0.getName());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxPurgatorySize());
      assertNull(blockDiskCacheAttributes0.getEventQueuePoolName());
      assertEquals(2, blockDiskCacheAttributes0.getMaxKeySize());
      assertEquals(IDiskCacheAttributes.DiskLimitType.COUNT, blockDiskCacheAttributes0.getDiskLimitType());
      assertNull(blockDiskCacheAttributes0.getCacheName());
      assertTrue(blockDiskKeyStore0.isEmpty());
      assertEquals(0, blockDiskKeyStore0.size());
      assertTrue(blockDiskKeyStore_LRUMapSizeLimited0.isEmpty());
      assertEquals(0, blockDiskKeyStore_LRUMapSizeLimited0.size());
      assertNotNull(blockDiskKeyStore_LRUMapSizeLimited0);
      
      // Undeclared exception!
      try { 
        blockDiskKeyStore_LRUMapSizeLimited0.remove((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
      blockDiskCacheAttributes0.setMaxKeySize((-449));
      BlockDiskKeyStore<Object> blockDiskKeyStore0 = new BlockDiskKeyStore<Object>(blockDiskCacheAttributes0, (BlockDiskCache<Object, ?>) null);
      BlockDiskKeyStore.LRUMapSizeLimited blockDiskKeyStore_LRUMapSizeLimited0 = blockDiskKeyStore0.new LRUMapSizeLimited(0);
      Integer integer0 = new Integer(0);
      int[] intArray0 = new int[2];
      blockDiskKeyStore_LRUMapSizeLimited0.put((Object) integer0, intArray0);
      blockDiskKeyStore_LRUMapSizeLimited0.put((Object) integer0, intArray0);
      blockDiskKeyStore_LRUMapSizeLimited0.remove((Object) integer0);
      System.setCurrentTimeMillis(0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("null.key");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "a#bN2b::4NC|");
      BlockDiskKeyStore<Object> blockDiskKeyStore0 = new BlockDiskKeyStore<Object>(blockDiskCacheAttributes0, (BlockDiskCache<Object, ?>) null);
      Set<Map.Entry<Object, int[]>> set0 = (Set<Map.Entry<Object, int[]>>)blockDiskKeyStore0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("null.key");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "Hbfwg=&m");
      BlockDiskKeyStore<Integer> blockDiskKeyStore0 = new BlockDiskKeyStore<Integer>(blockDiskCacheAttributes0, (BlockDiskCache<Integer, ?>) null);
      blockDiskKeyStore0.keySet();
      Integer integer0 = new Integer((-2));
      blockDiskKeyStore0.remove(integer0);
      EncryptingSerializer encryptingSerializer0 = new EncryptingSerializer();
      BlockDiskKeyStore.LRUMapSizeLimited blockDiskKeyStore_LRUMapSizeLimited0 = blockDiskKeyStore0.new LRUMapSizeLimited();
      BlockDiskElementDescriptor<int[]> blockDiskElementDescriptor0 = new BlockDiskElementDescriptor<int[]>();
      blockDiskKeyStore_LRUMapSizeLimited0.put(blockDiskElementDescriptor0, (int[]) null);
      // Undeclared exception!
      try { 
        blockDiskKeyStore_LRUMapSizeLimited0.remove((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
      BlockDiskKeyStore<Object> blockDiskKeyStore0 = new BlockDiskKeyStore<Object>(blockDiskCacheAttributes0, (BlockDiskCache<Object, ?>) null);
      boolean boolean0 = blockDiskKeyStore0.isEmpty();
      assertTrue(boolean0);
      
      blockDiskKeyStore0.get(blockDiskKeyStore0);
      assertTrue(blockDiskKeyStore0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
      BlockDiskKeyStore<LinkedHashSet<Integer>> blockDiskKeyStore0 = new BlockDiskKeyStore<LinkedHashSet<Integer>>(blockDiskCacheAttributes0, (BlockDiskCache<LinkedHashSet<Integer>, ?>) null);
      BlockDiskKeyStore.LRUMapSizeLimited blockDiskKeyStore_LRUMapSizeLimited0 = blockDiskKeyStore0.new LRUMapSizeLimited(10000);
      blockDiskKeyStore_LRUMapSizeLimited0.remove((Object) blockDiskCacheAttributes0);
      int[] intArray0 = new int[2];
      BlockDiskKeyStore.LRUMapCountLimited blockDiskKeyStore_LRUMapCountLimited0 = blockDiskKeyStore0.new LRUMapCountLimited(10000);
      Callable<int[]> callable0 = (Callable<int[]>) mock(Callable.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(10000);
      AbstractMap.SimpleEntry<Callable<int[]>, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Callable<int[]>, Integer>(callable0, integer0);
      // Undeclared exception!
      try { 
        blockDiskKeyStore_LRUMapCountLimited0.processRemovedLRU(abstractMap_SimpleEntry0, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.block.BlockDiskKeyStore$LRUMapCountLimited", e);
      }
  }
}
