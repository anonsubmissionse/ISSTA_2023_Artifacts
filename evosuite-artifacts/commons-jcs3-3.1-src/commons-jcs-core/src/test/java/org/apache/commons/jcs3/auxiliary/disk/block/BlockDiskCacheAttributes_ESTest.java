/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 22:04:45 GMT 2022
 */

package org.apache.commons.jcs3.auxiliary.disk.block;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.jcs3.auxiliary.disk.block.BlockDiskCacheAttributes;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BlockDiskCacheAttributes_ESTest extends BlockDiskCacheAttributes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
      
      blockDiskCacheAttributes0.setMaxKeySize(0);
      int int0 = blockDiskCacheAttributes0.getMaxKeySize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
      blockDiskCacheAttributes0.setMaxKeySize((-1526));
      int int0 = blockDiskCacheAttributes0.getMaxKeySize();
      assertEquals((-1526), int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      
      blockDiskCacheAttributes0.setKeyPersistenceIntervalSeconds(0);
      blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds();
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
      blockDiskCacheAttributes0.setKeyPersistenceIntervalSeconds((-3587));
      long long0 = blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds();
      assertEquals((-3587L), long0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
      blockDiskCacheAttributes0.setBlockSizeBytes(1);
      int int0 = blockDiskCacheAttributes0.getBlockSizeBytes();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
      blockDiskCacheAttributes0.setBlockSizeBytes((-423));
      int int0 = blockDiskCacheAttributes0.getBlockSizeBytes();
      assertEquals((-423), int0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
      long long0 = blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds();
      assertEquals(300L, long0);
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
      int int0 = blockDiskCacheAttributes0.getBlockSizeBytes();
      assertEquals(0, int0);
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
      assertEquals(5000, blockDiskCacheAttributes0.getMaxKeySize());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
      int int0 = blockDiskCacheAttributes0.getMaxKeySize();
      assertEquals(5000, int0);
      assertEquals(300L, blockDiskCacheAttributes0.getKeyPersistenceIntervalSeconds());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
      String string0 = blockDiskCacheAttributes0.toString();
      assertEquals("\nBlockDiskAttributes \n DiskPath [null]\n MaxKeySize [5000]\n MaxPurgatorySize [5000]\n BlockSizeBytes [0]\n KeyPersistenceIntervalSeconds [300]\n DiskLimitType [COUNT]", string0);
  }
}
