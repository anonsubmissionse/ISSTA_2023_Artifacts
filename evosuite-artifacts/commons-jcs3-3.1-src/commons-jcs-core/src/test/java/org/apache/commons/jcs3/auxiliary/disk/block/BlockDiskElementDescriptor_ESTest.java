/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 22:03:20 GMT 2022
 */

package org.apache.commons.jcs3.auxiliary.disk.block;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.PipedInputStream;
import org.apache.commons.jcs3.auxiliary.disk.block.BlockDiskElementDescriptor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BlockDiskElementDescriptor_ESTest extends BlockDiskElementDescriptor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      int[] intArray0 = new int[0];
      BlockDiskElementDescriptor<Integer> blockDiskElementDescriptor0 = new BlockDiskElementDescriptor<Integer>(integer0, intArray0);
      Integer integer1 = blockDiskElementDescriptor0.getKey();
      assertEquals((-1), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      int[] intArray0 = new int[7];
      BlockDiskElementDescriptor<Object> blockDiskElementDescriptor0 = new BlockDiskElementDescriptor<Object>(pipedInputStream0, intArray0);
      int[] intArray1 = blockDiskElementDescriptor0.getBlocks();
      assertEquals(7, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      int[] intArray0 = new int[0];
      BlockDiskElementDescriptor<Object> blockDiskElementDescriptor0 = new BlockDiskElementDescriptor<Object>(dataInputStream0, intArray0);
      int[] intArray1 = blockDiskElementDescriptor0.getBlocks();
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BlockDiskElementDescriptor<Object> blockDiskElementDescriptor0 = new BlockDiskElementDescriptor<Object>();
      // Undeclared exception!
      try { 
        blockDiskElementDescriptor0.writeExternal((ObjectOutput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.block.BlockDiskElementDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[5];
      BlockDiskElementDescriptor<String> blockDiskElementDescriptor0 = new BlockDiskElementDescriptor<String>("", intArray0);
      String string0 = blockDiskElementDescriptor0.toString();
      assertEquals("\nBlockDiskElementDescriptor\n key []\n blocks [00000]", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BlockDiskElementDescriptor<String> blockDiskElementDescriptor0 = new BlockDiskElementDescriptor<String>();
      String string0 = blockDiskElementDescriptor0.toString();
      assertEquals("\nBlockDiskElementDescriptor\n key [null]\n blocks []", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[5];
      BlockDiskElementDescriptor<String> blockDiskElementDescriptor0 = new BlockDiskElementDescriptor<String>("", intArray0);
      // Undeclared exception!
      try { 
        blockDiskElementDescriptor0.readExternal((ObjectInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.block.BlockDiskElementDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(0);
      BlockDiskElementDescriptor<Integer> blockDiskElementDescriptor0 = new BlockDiskElementDescriptor<Integer>(integer0, (int[]) null);
      int[] intArray0 = blockDiskElementDescriptor0.getBlocks();
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BlockDiskElementDescriptor<String> blockDiskElementDescriptor0 = new BlockDiskElementDescriptor<String>("", (int[]) null);
      blockDiskElementDescriptor0.setKey("z^%");
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(0);
      BlockDiskElementDescriptor<Integer> blockDiskElementDescriptor0 = new BlockDiskElementDescriptor<Integer>(integer0, (int[]) null);
      blockDiskElementDescriptor0.setBlocks((int[]) null);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BlockDiskElementDescriptor<String> blockDiskElementDescriptor0 = new BlockDiskElementDescriptor<String>("", (int[]) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      blockDiskElementDescriptor0.writeExternal(objectOutputStream0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BlockDiskElementDescriptor<Integer> blockDiskElementDescriptor0 = new BlockDiskElementDescriptor<Integer>();
      Integer integer0 = blockDiskElementDescriptor0.getKey();
      assertNull(integer0);
  }
}
