/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 21:58:26 GMT 2022
 */

package org.apache.commons.jcs3.auxiliary.disk.jdbc.mysql;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.Date;
import java.sql.Timestamp;
import java.time.Instant;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadPoolExecutor;
import org.apache.commons.jcs3.auxiliary.AbstractAuxiliaryCacheAttributes;
import org.apache.commons.jcs3.auxiliary.AuxiliaryCacheAttributes;
import org.apache.commons.jcs3.auxiliary.disk.jdbc.TableState;
import org.apache.commons.jcs3.auxiliary.disk.jdbc.mysql.MySQLDiskCacheAttributes;
import org.apache.commons.jcs3.auxiliary.disk.jdbc.mysql.MySQLDiskCacheFactory;
import org.apache.commons.jcs3.auxiliary.disk.jdbc.mysql.MySQLTableOptimizer;
import org.apache.commons.jcs3.auxiliary.lateral.LateralCache;
import org.apache.commons.jcs3.auxiliary.lateral.LateralCacheAttributes;
import org.apache.commons.jcs3.auxiliary.lateral.LateralCacheMonitor;
import org.apache.commons.jcs3.auxiliary.lateral.LateralCacheNoWait;
import org.apache.commons.jcs3.auxiliary.lateral.behavior.ILateralCacheAttributes;
import org.apache.commons.jcs3.auxiliary.lateral.socket.tcp.LateralTCPCacheFactory;
import org.apache.commons.jcs3.engine.behavior.ICacheServiceNonLocal;
import org.apache.commons.jcs3.engine.behavior.ICompositeCacheManager;
import org.apache.commons.jcs3.engine.behavior.IElementSerializer;
import org.apache.commons.jcs3.engine.control.CompositeCacheManager;
import org.apache.commons.jcs3.engine.logging.CacheEventLoggerDebugLogger;
import org.apache.commons.jcs3.engine.logging.behavior.ICacheEventLogger;
import org.apache.commons.jcs3.utils.serialization.CompressingSerializer;
import org.apache.commons.jcs3.utils.serialization.StandardSerializer;
import org.apache.commons.jcs3.utils.threadpool.DaemonThreadFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.jdbc.jdbcDataSource;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MySQLDiskCacheFactory_ESTest extends MySQLDiskCacheFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MySQLDiskCacheFactory mySQLDiskCacheFactory0 = new MySQLDiskCacheFactory();
      assertEquals("MySQLDiskCacheFactory", mySQLDiskCacheFactory0.getName());
      
      MySQLDiskCacheAttributes mySQLDiskCacheAttributes0 = new MySQLDiskCacheAttributes();
      DaemonThreadFactory daemonThreadFactory0 = new DaemonThreadFactory("jcs", 300);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(10, daemonThreadFactory0);
      mySQLDiskCacheFactory0.setScheduledExecutorService(scheduledThreadPoolExecutor0);
      mySQLDiskCacheFactory0.initialize();
      mySQLDiskCacheAttributes0.setOptimizationSchedule("jcs");
      TableState tableState0 = new TableState("jcs");
      jdbcDataSource jdbcDataSource0 = new jdbcDataSource();
      mySQLDiskCacheFactory0.scheduleOptimizations(mySQLDiskCacheAttributes0, tableState0, jdbcDataSource0);
      MockDate mockDate0 = new MockDate(0, 300, 1, 0, 0);
      MySQLTableOptimizer mySQLTableOptimizer0 = new MySQLTableOptimizer(mySQLDiskCacheAttributes0, tableState0, jdbcDataSource0);
      Random.setNextRandom(0);
      // Undeclared exception!
      try { 
        mySQLDiskCacheFactory0.scheduleOptimization(mockDate0, mySQLTableOptimizer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      System.setCurrentTimeMillis(435L);
      System.setCurrentTimeMillis(435L);
      System.setCurrentTimeMillis(435L);
      MySQLDiskCacheFactory mySQLDiskCacheFactory0 = new MySQLDiskCacheFactory();
      MySQLDiskCacheAttributes mySQLDiskCacheAttributes0 = new MySQLDiskCacheAttributes();
      TableState tableState0 = new TableState("jcs");
      mySQLDiskCacheAttributes0.setMaxTotal(1);
      mySQLDiskCacheFactory0.initialize();
      tableState0.setState(10);
      jdbcDataSource jdbcDataSource0 = new jdbcDataSource();
      mySQLDiskCacheFactory0.scheduleOptimizations(mySQLDiskCacheAttributes0, tableState0, jdbcDataSource0);
      System.setCurrentTimeMillis(3996L);
      System.setCurrentTimeMillis(1);
      mySQLDiskCacheFactory0.scheduleOptimizations(mySQLDiskCacheAttributes0, tableState0, jdbcDataSource0);
      mySQLDiskCacheFactory0.scheduleOptimizations(mySQLDiskCacheAttributes0, tableState0, jdbcDataSource0);
      mySQLDiskCacheFactory0.scheduleOptimizations(mySQLDiskCacheAttributes0, tableState0, jdbcDataSource0);
      CompositeCacheManager compositeCacheManager0 = CompositeCacheManager.getUnconfiguredInstance();
      CacheEventLoggerDebugLogger cacheEventLoggerDebugLogger0 = new CacheEventLoggerDebugLogger();
      StandardSerializer standardSerializer0 = new StandardSerializer();
      // Undeclared exception!
      try { 
        mySQLDiskCacheFactory0.createCache((AuxiliaryCacheAttributes) mySQLDiskCacheAttributes0, (ICompositeCacheManager) compositeCacheManager0, (ICacheEventLogger) cacheEventLoggerDebugLogger0, (IElementSerializer) standardSerializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      MySQLDiskCacheFactory mySQLDiskCacheFactory0 = new MySQLDiskCacheFactory();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      MySQLDiskCacheAttributes mySQLDiskCacheAttributes0 = new MySQLDiskCacheAttributes();
      FileSystemHandling.shouldAllThrowIOExceptions();
      mySQLDiskCacheAttributes0.setDiskPath("Le!jd$B@}");
      TableState tableState0 = new TableState("jcs");
      mySQLDiskCacheAttributes0.setDatabase("uvk-fgirh\"giM6%Z");
      tableState0.setState(10);
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(98, threadPoolExecutor_CallerRunsPolicy0);
      mySQLDiskCacheFactory0.setScheduledExecutorService(scheduledThreadPoolExecutor0);
      jdbcDataSource jdbcDataSource0 = new jdbcDataSource();
      tableState0.setTableName("");
      jdbcDataSource0.getConnection("", ":>Z");
      jdbcDataSource0.setUser(":>Z");
      mySQLDiskCacheFactory0.scheduleOptimizations(mySQLDiskCacheAttributes0, tableState0, jdbcDataSource0);
      mySQLDiskCacheFactory0.scheduleOptimizations(mySQLDiskCacheAttributes0, tableState0, jdbcDataSource0);
      MockDate mockDate0 = new MockDate(2, 0, 1, 300, (-1));
      MySQLTableOptimizer mySQLTableOptimizer0 = new MySQLTableOptimizer(mySQLDiskCacheAttributes0, tableState0, jdbcDataSource0);
      mySQLDiskCacheFactory0.scheduleOptimization(mockDate0, mySQLTableOptimizer0);
      mySQLDiskCacheFactory0.scheduleOptimizations(mySQLDiskCacheAttributes0, tableState0, jdbcDataSource0);
      TableState tableState1 = new TableState("");
      mySQLDiskCacheFactory0.scheduleOptimizations(mySQLDiskCacheAttributes0, tableState1, jdbcDataSource0);
      mySQLDiskCacheFactory0.scheduleOptimization(mockDate0, mySQLTableOptimizer0);
      System.setCurrentTimeMillis(98);
      ICompositeCacheManager iCompositeCacheManager0 = null;
      CacheEventLoggerDebugLogger cacheEventLoggerDebugLogger0 = new CacheEventLoggerDebugLogger();
      LateralCache<Integer, Integer> lateralCache0 = (LateralCache<Integer, Integer>) mock(LateralCache.class, new ViolatedAssumptionAnswer());
      doReturn((ICacheEventLogger) null).when(lateralCache0).getCacheEventLogger();
      doReturn((IElementSerializer) null).when(lateralCache0).getElementSerializer();
      doReturn((ILateralCacheAttributes) null).when(lateralCache0).getAuxiliaryCacheAttributes();
      doReturn((String) null, (String) null).when(lateralCache0).getCacheName();
      LateralCacheNoWait<Integer, Integer> lateralCacheNoWait0 = null;
      try {
        lateralCacheNoWait0 = new LateralCacheNoWait<Integer, Integer>(lateralCache0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.lateral.LateralCacheNoWait", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MySQLDiskCacheFactory mySQLDiskCacheFactory0 = new MySQLDiskCacheFactory();
      MySQLDiskCacheAttributes mySQLDiskCacheAttributes0 = new MySQLDiskCacheAttributes();
      mySQLDiskCacheAttributes0.setOptimizationSchedule("Optimization is not configured for table [{0}]");
      TableState tableState0 = new TableState("jcs");
      jdbcDataSource jdbcDataSource0 = new jdbcDataSource();
      mySQLDiskCacheFactory0.scheduleOptimizations(mySQLDiskCacheAttributes0, tableState0, jdbcDataSource0);
      MockDate mockDate0 = new MockDate((-2248), (-1476), 115);
      TableState tableState1 = new TableState("Will try to configure optimization for table [{0}] on schedule [{1}]");
      MySQLTableOptimizer mySQLTableOptimizer0 = new MySQLTableOptimizer(mySQLDiskCacheAttributes0, tableState1, jdbcDataSource0);
      // Undeclared exception!
      try { 
        mySQLDiskCacheFactory0.scheduleOptimization(mockDate0, mySQLTableOptimizer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.jdbc.mysql.MySQLDiskCacheFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MySQLDiskCacheFactory mySQLDiskCacheFactory0 = new MySQLDiskCacheFactory();
      MySQLDiskCacheAttributes mySQLDiskCacheAttributes0 = new MySQLDiskCacheAttributes();
      TableState tableState0 = new TableState("jcs");
      jdbcDataSource jdbcDataSource0 = new jdbcDataSource();
      mySQLDiskCacheFactory0.scheduleOptimizations(mySQLDiskCacheAttributes0, tableState0, jdbcDataSource0);
      assertEquals("", mySQLDiskCacheAttributes0.getDatabase());
      
      jdbcDataSource jdbcDataSource1 = new jdbcDataSource();
      mySQLDiskCacheFactory0.scheduleOptimizations((MySQLDiskCacheAttributes) null, (TableState) null, jdbcDataSource1);
      // Undeclared exception!
      try { 
        MockInstant.plusSeconds((Instant) null, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.time.MockInstant", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MySQLDiskCacheFactory mySQLDiskCacheFactory0 = new MySQLDiskCacheFactory();
      LateralCacheAttributes lateralCacheAttributes0 = new LateralCacheAttributes();
      CompositeCacheManager compositeCacheManager0 = CompositeCacheManager.getUnconfiguredInstance();
      LateralTCPCacheFactory lateralTCPCacheFactory0 = new LateralTCPCacheFactory();
      LateralCacheMonitor lateralCacheMonitor0 = new LateralCacheMonitor(lateralTCPCacheFactory0);
      LateralCache<String, Object> lateralCache0 = new LateralCache<String, Object>(lateralCacheAttributes0, (ICacheServiceNonLocal<String, Object>) null, lateralCacheMonitor0);
      lateralCache0.getCacheEventLogger();
      StandardSerializer standardSerializer0 = new StandardSerializer();
      // Undeclared exception!
      try { 
        mySQLDiskCacheFactory0.createCache((AuxiliaryCacheAttributes) lateralCacheAttributes0, (ICompositeCacheManager) compositeCacheManager0, (ICacheEventLogger) null, (IElementSerializer) standardSerializer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.jcs3.auxiliary.lateral.LateralCacheAttributes cannot be cast to org.apache.commons.jcs3.auxiliary.disk.jdbc.mysql.MySQLDiskCacheAttributes
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.jdbc.mysql.MySQLDiskCacheFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MySQLDiskCacheFactory mySQLDiskCacheFactory0 = new MySQLDiskCacheFactory();
      MySQLDiskCacheAttributes mySQLDiskCacheAttributes0 = new MySQLDiskCacheAttributes();
      AbstractAuxiliaryCacheAttributes abstractAuxiliaryCacheAttributes0 = mySQLDiskCacheAttributes0.clone();
      CompositeCacheManager compositeCacheManager0 = CompositeCacheManager.getUnconfiguredInstance();
      CacheEventLoggerDebugLogger cacheEventLoggerDebugLogger0 = new CacheEventLoggerDebugLogger();
      CompressingSerializer compressingSerializer0 = new CompressingSerializer();
      // Undeclared exception!
      try { 
        mySQLDiskCacheFactory0.createCache((AuxiliaryCacheAttributes) abstractAuxiliaryCacheAttributes0, (ICompositeCacheManager) compositeCacheManager0, (ICacheEventLogger) cacheEventLoggerDebugLogger0, (IElementSerializer) compressingSerializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.jdbc.JDBCDiskCacheFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MySQLDiskCacheFactory mySQLDiskCacheFactory0 = new MySQLDiskCacheFactory();
      Timestamp timestamp0 = new Timestamp(127L);
      MySQLDiskCacheAttributes mySQLDiskCacheAttributes0 = new MySQLDiskCacheAttributes();
      TableState tableState0 = new TableState("jcs");
      mySQLDiskCacheAttributes0.clone();
      jdbcDataSource jdbcDataSource0 = new jdbcDataSource();
      MySQLTableOptimizer mySQLTableOptimizer0 = new MySQLTableOptimizer(mySQLDiskCacheAttributes0, tableState0, jdbcDataSource0);
      // Undeclared exception!
      try { 
        mySQLDiskCacheFactory0.scheduleOptimization(timestamp0, mySQLTableOptimizer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.jdbc.mysql.MySQLDiskCacheFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MySQLDiskCacheFactory mySQLDiskCacheFactory0 = new MySQLDiskCacheFactory();
      Date date0 = new Date(1373L);
      // Undeclared exception!
      try { 
        mySQLDiskCacheFactory0.scheduleOptimization(date0, (MySQLTableOptimizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.jdbc.mysql.MySQLDiskCacheFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MySQLDiskCacheFactory mySQLDiskCacheFactory0 = new MySQLDiskCacheFactory();
      LateralCacheAttributes lateralCacheAttributes0 = new LateralCacheAttributes();
      StandardSerializer standardSerializer0 = new StandardSerializer();
      CompositeCacheManager compositeCacheManager0 = CompositeCacheManager.getUnconfiguredInstance();
      CacheEventLoggerDebugLogger cacheEventLoggerDebugLogger0 = new CacheEventLoggerDebugLogger();
      // Undeclared exception!
      try { 
        mySQLDiskCacheFactory0.createCache((AuxiliaryCacheAttributes) lateralCacheAttributes0, (ICompositeCacheManager) compositeCacheManager0, (ICacheEventLogger) cacheEventLoggerDebugLogger0, (IElementSerializer) standardSerializer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.jcs3.auxiliary.lateral.LateralCacheAttributes cannot be cast to org.apache.commons.jcs3.auxiliary.disk.jdbc.mysql.MySQLDiskCacheAttributes
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.jdbc.mysql.MySQLDiskCacheFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MySQLDiskCacheFactory mySQLDiskCacheFactory0 = new MySQLDiskCacheFactory();
      TableState tableState0 = new TableState("{IUzsipPP&NSMP5]$");
      jdbcDataSource jdbcDataSource0 = new jdbcDataSource();
      mySQLDiskCacheFactory0.scheduleOptimizations((MySQLDiskCacheAttributes) null, tableState0, jdbcDataSource0);
      MySQLDiskCacheAttributes mySQLDiskCacheAttributes0 = new MySQLDiskCacheAttributes();
      mySQLDiskCacheFactory0.scheduleOptimizations(mySQLDiskCacheAttributes0, tableState0, jdbcDataSource0);
      assertEquals(60, mySQLDiskCacheAttributes0.getShutdownSpoolTimeLimit());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MySQLDiskCacheFactory mySQLDiskCacheFactory0 = new MySQLDiskCacheFactory();
      MySQLDiskCacheAttributes mySQLDiskCacheAttributes0 = new MySQLDiskCacheAttributes();
      mySQLDiskCacheAttributes0.setOptimizationSchedule("jcs");
      TableState tableState0 = new TableState("jcs");
      jdbcDataSource jdbcDataSource0 = new jdbcDataSource();
      mySQLDiskCacheFactory0.scheduleOptimizations(mySQLDiskCacheAttributes0, tableState0, jdbcDataSource0);
      MockDate mockDate0 = new MockDate(0, 300, 1, 0, 0);
      MySQLTableOptimizer mySQLTableOptimizer0 = new MySQLTableOptimizer(mySQLDiskCacheAttributes0, tableState0, jdbcDataSource0);
      // Undeclared exception!
      try { 
        mySQLDiskCacheFactory0.scheduleOptimization(mockDate0, mySQLTableOptimizer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.jdbc.mysql.MySQLDiskCacheFactory", e);
      }
  }
}
