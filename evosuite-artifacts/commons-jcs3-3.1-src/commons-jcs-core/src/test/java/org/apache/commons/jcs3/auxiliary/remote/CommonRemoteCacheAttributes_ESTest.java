/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 22:00:48 GMT 2022
 */

package org.apache.commons.jcs3.auxiliary.remote;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.jcs3.auxiliary.remote.CommonRemoteCacheAttributes;
import org.apache.commons.jcs3.auxiliary.remote.RemoteLocation;
import org.apache.commons.jcs3.auxiliary.remote.server.behavior.RemoteType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CommonRemoteCacheAttributes_ESTest extends CommonRemoteCacheAttributes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CommonRemoteCacheAttributes commonRemoteCacheAttributes0 = new CommonRemoteCacheAttributes();
      commonRemoteCacheAttributes0.setRemoteTypeName("LOCAL");
      assertTrue(commonRemoteCacheAttributes0.getRemoveUponRemotePut());
      assertEquals(10000, commonRemoteCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CommonRemoteCacheAttributes commonRemoteCacheAttributes0 = new CommonRemoteCacheAttributes();
      commonRemoteCacheAttributes0.setLocalClusterConsistency(true);
      boolean boolean0 = commonRemoteCacheAttributes0.isLocalClusterConsistency();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CommonRemoteCacheAttributes commonRemoteCacheAttributes0 = new CommonRemoteCacheAttributes();
      assertEquals(10000, commonRemoteCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
      
      commonRemoteCacheAttributes0.setRmiSocketFactoryTimeoutMillis(0);
      int int0 = commonRemoteCacheAttributes0.getRmiSocketFactoryTimeoutMillis();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CommonRemoteCacheAttributes commonRemoteCacheAttributes0 = new CommonRemoteCacheAttributes();
      assertEquals(10000, commonRemoteCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
      
      commonRemoteCacheAttributes0.setRmiSocketFactoryTimeoutMillis((-1));
      int int0 = commonRemoteCacheAttributes0.getRmiSocketFactoryTimeoutMillis();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CommonRemoteCacheAttributes commonRemoteCacheAttributes0 = new CommonRemoteCacheAttributes();
      commonRemoteCacheAttributes0.setRemoteType((RemoteType) null);
      commonRemoteCacheAttributes0.getRemoteType();
      assertTrue(commonRemoteCacheAttributes0.getRemoveUponRemotePut());
      assertEquals(10000, commonRemoteCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CommonRemoteCacheAttributes commonRemoteCacheAttributes0 = new CommonRemoteCacheAttributes();
      commonRemoteCacheAttributes0.setRemoteServiceName((String) null);
      commonRemoteCacheAttributes0.getRemoteServiceName();
      assertEquals(10000, commonRemoteCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
      assertTrue(commonRemoteCacheAttributes0.getRemoveUponRemotePut());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CommonRemoteCacheAttributes commonRemoteCacheAttributes0 = new CommonRemoteCacheAttributes();
      commonRemoteCacheAttributes0.setRemoteServiceName("");
      commonRemoteCacheAttributes0.getRemoteServiceName();
      assertEquals(10000, commonRemoteCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
      assertTrue(commonRemoteCacheAttributes0.getRemoveUponRemotePut());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CommonRemoteCacheAttributes commonRemoteCacheAttributes0 = new CommonRemoteCacheAttributes();
      commonRemoteCacheAttributes0.setRemoteLocation((String) null, 0);
      RemoteLocation remoteLocation0 = commonRemoteCacheAttributes0.getRemoteLocation();
      assertEquals(10000, commonRemoteCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
      assertEquals(0, remoteLocation0.getPort());
      assertTrue(commonRemoteCacheAttributes0.getRemoveUponRemotePut());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CommonRemoteCacheAttributes commonRemoteCacheAttributes0 = new CommonRemoteCacheAttributes();
      commonRemoteCacheAttributes0.setRemoteLocation("", 3);
      RemoteLocation remoteLocation0 = commonRemoteCacheAttributes0.getRemoteLocation();
      assertTrue(commonRemoteCacheAttributes0.getRemoveUponRemotePut());
      assertEquals(10000, commonRemoteCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
      assertEquals(3, remoteLocation0.getPort());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CommonRemoteCacheAttributes commonRemoteCacheAttributes0 = new CommonRemoteCacheAttributes();
      commonRemoteCacheAttributes0.setRemoteLocation("", (-2824));
      RemoteLocation remoteLocation0 = commonRemoteCacheAttributes0.getRemoteLocation();
      assertEquals(10000, commonRemoteCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
      assertTrue(commonRemoteCacheAttributes0.getRemoveUponRemotePut());
      assertEquals((-2824), remoteLocation0.getPort());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CommonRemoteCacheAttributes commonRemoteCacheAttributes0 = new CommonRemoteCacheAttributes();
      commonRemoteCacheAttributes0.setGetOnly(true);
      boolean boolean0 = commonRemoteCacheAttributes0.getGetOnly();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CommonRemoteCacheAttributes commonRemoteCacheAttributes0 = new CommonRemoteCacheAttributes();
      commonRemoteCacheAttributes0.setClusterServers((String) null);
      commonRemoteCacheAttributes0.getClusterServers();
      assertEquals(10000, commonRemoteCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
      assertTrue(commonRemoteCacheAttributes0.getRemoveUponRemotePut());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CommonRemoteCacheAttributes commonRemoteCacheAttributes0 = new CommonRemoteCacheAttributes();
      commonRemoteCacheAttributes0.setClusterServers("LOCAL");
      commonRemoteCacheAttributes0.getClusterServers();
      assertTrue(commonRemoteCacheAttributes0.getRemoveUponRemotePut());
      assertEquals(10000, commonRemoteCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CommonRemoteCacheAttributes commonRemoteCacheAttributes0 = new CommonRemoteCacheAttributes();
      String string0 = commonRemoteCacheAttributes0.toString();
      assertEquals(10000, commonRemoteCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
      assertEquals("\n RemoteCacheAttributes \n cacheName = [null]\n remoteType = [LOCAL]\n removeUponRemotePut = [true]\n getOnly = [false]", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CommonRemoteCacheAttributes commonRemoteCacheAttributes0 = new CommonRemoteCacheAttributes();
      commonRemoteCacheAttributes0.getRemoteTypeName();
      assertTrue(commonRemoteCacheAttributes0.getRemoveUponRemotePut());
      assertEquals(10000, commonRemoteCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CommonRemoteCacheAttributes commonRemoteCacheAttributes0 = new CommonRemoteCacheAttributes();
      commonRemoteCacheAttributes0.getRemoteServiceName();
      assertTrue(commonRemoteCacheAttributes0.getRemoveUponRemotePut());
      assertEquals(10000, commonRemoteCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CommonRemoteCacheAttributes commonRemoteCacheAttributes0 = new CommonRemoteCacheAttributes();
      commonRemoteCacheAttributes0.setRemoteType((RemoteType) null);
      commonRemoteCacheAttributes0.getRemoteTypeName();
      assertEquals(10000, commonRemoteCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
      assertTrue(commonRemoteCacheAttributes0.getRemoveUponRemotePut());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CommonRemoteCacheAttributes commonRemoteCacheAttributes0 = new CommonRemoteCacheAttributes();
      commonRemoteCacheAttributes0.getGetOnly();
      assertTrue(commonRemoteCacheAttributes0.getRemoveUponRemotePut());
      assertEquals(10000, commonRemoteCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CommonRemoteCacheAttributes commonRemoteCacheAttributes0 = new CommonRemoteCacheAttributes();
      commonRemoteCacheAttributes0.isLocalClusterConsistency();
      assertEquals(10000, commonRemoteCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
      assertTrue(commonRemoteCacheAttributes0.getRemoveUponRemotePut());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CommonRemoteCacheAttributes commonRemoteCacheAttributes0 = new CommonRemoteCacheAttributes();
      int int0 = commonRemoteCacheAttributes0.getRmiSocketFactoryTimeoutMillis();
      assertEquals(10000, int0);
      assertTrue(commonRemoteCacheAttributes0.getRemoveUponRemotePut());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CommonRemoteCacheAttributes commonRemoteCacheAttributes0 = new CommonRemoteCacheAttributes();
      commonRemoteCacheAttributes0.setRemoteLocation("", 3);
      String string0 = commonRemoteCacheAttributes0.toString();
      assertEquals(10000, commonRemoteCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
      assertEquals("\n RemoteCacheAttributes \n remoteHost = []\n remotePort = [3]\n cacheName = [null]\n remoteType = [LOCAL]\n removeUponRemotePut = [true]\n getOnly = [false]", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CommonRemoteCacheAttributes commonRemoteCacheAttributes0 = new CommonRemoteCacheAttributes();
      assertTrue(commonRemoteCacheAttributes0.getRemoveUponRemotePut());
      
      commonRemoteCacheAttributes0.setRemoveUponRemotePut(false);
      boolean boolean0 = commonRemoteCacheAttributes0.getRemoveUponRemotePut();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CommonRemoteCacheAttributes commonRemoteCacheAttributes0 = new CommonRemoteCacheAttributes();
      RemoteLocation remoteLocation0 = commonRemoteCacheAttributes0.getRemoteLocation();
      commonRemoteCacheAttributes0.setRemoteLocation(remoteLocation0);
      assertTrue(commonRemoteCacheAttributes0.getRemoveUponRemotePut());
      assertEquals(10000, commonRemoteCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CommonRemoteCacheAttributes commonRemoteCacheAttributes0 = new CommonRemoteCacheAttributes();
      boolean boolean0 = commonRemoteCacheAttributes0.getRemoveUponRemotePut();
      assertTrue(boolean0);
      assertEquals(10000, commonRemoteCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CommonRemoteCacheAttributes commonRemoteCacheAttributes0 = new CommonRemoteCacheAttributes();
      commonRemoteCacheAttributes0.getRemoteType();
      assertEquals(10000, commonRemoteCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
      assertTrue(commonRemoteCacheAttributes0.getRemoveUponRemotePut());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CommonRemoteCacheAttributes commonRemoteCacheAttributes0 = new CommonRemoteCacheAttributes();
      commonRemoteCacheAttributes0.getClusterServers();
      assertTrue(commonRemoteCacheAttributes0.getRemoveUponRemotePut());
      assertEquals(10000, commonRemoteCacheAttributes0.getRmiSocketFactoryTimeoutMillis());
  }
}
