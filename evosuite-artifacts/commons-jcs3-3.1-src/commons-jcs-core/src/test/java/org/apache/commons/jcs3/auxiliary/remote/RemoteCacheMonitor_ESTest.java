/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 22:03:49 GMT 2022
 */

package org.apache.commons.jcs3.auxiliary.remote;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.jcs3.auxiliary.remote.RemoteCacheManager;
import org.apache.commons.jcs3.auxiliary.remote.RemoteCacheMonitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RemoteCacheMonitor_ESTest extends RemoteCacheMonitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RemoteCacheMonitor remoteCacheMonitor0 = new RemoteCacheMonitor();
      // Undeclared exception!
      try { 
        remoteCacheMonitor0.addManager((RemoteCacheManager) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RemoteCacheMonitor remoteCacheMonitor0 = new RemoteCacheMonitor();
      remoteCacheMonitor0.dispose();
      //  // Unstable assertion: assertFalse(remoteCacheMonitor0.isDaemon());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RemoteCacheMonitor remoteCacheMonitor0 = new RemoteCacheMonitor();
      remoteCacheMonitor0.doWork();
      assertEquals(0, remoteCacheMonitor0.countStackFrames());
  }
}
