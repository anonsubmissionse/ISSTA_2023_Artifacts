/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 22:02:16 GMT 2022
 */

package org.apache.commons.jcs3.utils.threadpool;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.jcs3.utils.threadpool.PoolConfiguration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PoolConfiguration_ESTest extends PoolConfiguration_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PoolConfiguration.WhenBlockedPolicy poolConfiguration_WhenBlockedPolicy0 = PoolConfiguration.WhenBlockedPolicy.DISCARDOLDEST;
      PoolConfiguration poolConfiguration0 = new PoolConfiguration(false, 1150, 1150, (-1176), (-1176), poolConfiguration_WhenBlockedPolicy0, 1150);
      boolean boolean0 = poolConfiguration0.isUseBoundary();
      assertEquals((-1176), poolConfiguration0.getMinimumPoolSize());
      assertFalse(boolean0);
      assertEquals(1150, poolConfiguration0.getStartUpSize());
      assertEquals((-1176), poolConfiguration0.getKeepAliveTime());
      assertEquals(PoolConfiguration.WhenBlockedPolicy.DISCARDOLDEST, poolConfiguration0.getWhenBlockedPolicy());
      assertEquals(1150, poolConfiguration0.getMaximumPoolSize());
      assertEquals(1150, poolConfiguration0.getBoundarySize());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PoolConfiguration.WhenBlockedPolicy poolConfiguration_WhenBlockedPolicy0 = PoolConfiguration.WhenBlockedPolicy.WAIT;
      PoolConfiguration poolConfiguration0 = new PoolConfiguration(true, (-3135), 0, (-3135), (-3135), poolConfiguration_WhenBlockedPolicy0, 0);
      int int0 = poolConfiguration0.getStartUpSize();
      assertTrue(poolConfiguration0.isUseBoundary());
      assertEquals((-3135), poolConfiguration0.getKeepAliveTime());
      assertEquals(0, poolConfiguration0.getMaximumPoolSize());
      assertEquals((-3135), poolConfiguration0.getMinimumPoolSize());
      assertEquals(PoolConfiguration.WhenBlockedPolicy.WAIT, poolConfiguration0.getWhenBlockedPolicy());
      assertEquals(0, int0);
      assertEquals((-3135), poolConfiguration0.getBoundarySize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PoolConfiguration.WhenBlockedPolicy poolConfiguration_WhenBlockedPolicy0 = PoolConfiguration.WhenBlockedPolicy.BLOCK;
      PoolConfiguration poolConfiguration0 = new PoolConfiguration(true, 0, 0, (-135), (-3196), poolConfiguration_WhenBlockedPolicy0, (-1585));
      int int0 = poolConfiguration0.getStartUpSize();
      assertEquals(0, poolConfiguration0.getMaximumPoolSize());
      assertEquals(PoolConfiguration.WhenBlockedPolicy.BLOCK, poolConfiguration0.getWhenBlockedPolicy());
      assertEquals((-135), poolConfiguration0.getMinimumPoolSize());
      assertTrue(poolConfiguration0.isUseBoundary());
      assertEquals((-1585), int0);
      assertEquals(0, poolConfiguration0.getBoundarySize());
      assertEquals((-3196), poolConfiguration0.getKeepAliveTime());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PoolConfiguration.WhenBlockedPolicy poolConfiguration_WhenBlockedPolicy0 = PoolConfiguration.WhenBlockedPolicy.RUN;
      PoolConfiguration poolConfiguration0 = new PoolConfiguration(false, 814, 0, 0, 0, poolConfiguration_WhenBlockedPolicy0, 300000);
      int int0 = poolConfiguration0.getMinimumPoolSize();
      assertEquals(300000, poolConfiguration0.getStartUpSize());
      assertFalse(poolConfiguration0.isUseBoundary());
      assertEquals(814, poolConfiguration0.getBoundarySize());
      assertEquals(0, int0);
      assertEquals(0, poolConfiguration0.getKeepAliveTime());
      assertEquals(0, poolConfiguration0.getMaximumPoolSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PoolConfiguration poolConfiguration0 = new PoolConfiguration();
      poolConfiguration0.setMinimumPoolSize((-809));
      int int0 = poolConfiguration0.getMinimumPoolSize();
      assertEquals((-809), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PoolConfiguration.WhenBlockedPolicy poolConfiguration_WhenBlockedPolicy0 = PoolConfiguration.WhenBlockedPolicy.ABORT;
      PoolConfiguration poolConfiguration0 = new PoolConfiguration(false, 0, 0, 2297, 2297, poolConfiguration_WhenBlockedPolicy0, 0);
      int int0 = poolConfiguration0.getMaximumPoolSize();
      assertEquals(0, int0);
      assertEquals(0, poolConfiguration0.getBoundarySize());
      assertEquals(2297, poolConfiguration0.getKeepAliveTime());
      assertEquals(0, poolConfiguration0.getStartUpSize());
      assertEquals(PoolConfiguration.WhenBlockedPolicy.ABORT, poolConfiguration0.getWhenBlockedPolicy());
      assertEquals(2297, poolConfiguration0.getMinimumPoolSize());
      assertFalse(poolConfiguration0.isUseBoundary());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PoolConfiguration.WhenBlockedPolicy poolConfiguration_WhenBlockedPolicy0 = PoolConfiguration.WhenBlockedPolicy.WAIT;
      PoolConfiguration poolConfiguration0 = new PoolConfiguration(true, 0, 0, 0, (-3650), poolConfiguration_WhenBlockedPolicy0, (-1));
      assertEquals((-3650), poolConfiguration0.getKeepAliveTime());
      
      poolConfiguration0.setKeepAliveTime(0);
      int int0 = poolConfiguration0.getKeepAliveTime();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PoolConfiguration.WhenBlockedPolicy poolConfiguration_WhenBlockedPolicy0 = PoolConfiguration.WhenBlockedPolicy.BLOCK;
      PoolConfiguration poolConfiguration0 = new PoolConfiguration(false, (-1), (-1569), 0, (-641), poolConfiguration_WhenBlockedPolicy0, (-641));
      int int0 = poolConfiguration0.getKeepAliveTime();
      assertEquals(PoolConfiguration.WhenBlockedPolicy.BLOCK, poolConfiguration0.getWhenBlockedPolicy());
      assertEquals((-641), poolConfiguration0.getStartUpSize());
      assertEquals((-641), int0);
      assertFalse(poolConfiguration0.isUseBoundary());
      assertEquals((-1), poolConfiguration0.getBoundarySize());
      assertEquals(0, poolConfiguration0.getMinimumPoolSize());
      assertEquals((-1569), poolConfiguration0.getMaximumPoolSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PoolConfiguration poolConfiguration0 = new PoolConfiguration();
      poolConfiguration0.setBoundarySize((-2712));
      int int0 = poolConfiguration0.getBoundarySize();
      assertEquals((-2712), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PoolConfiguration poolConfiguration0 = new PoolConfiguration();
      poolConfiguration0.setKeepAliveTime(0);
      poolConfiguration0.clone();
      assertEquals(0, poolConfiguration0.getKeepAliveTime());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PoolConfiguration.WhenBlockedPolicy poolConfiguration_WhenBlockedPolicy0 = PoolConfiguration.WhenBlockedPolicy.DISCARDOLDEST;
      PoolConfiguration poolConfiguration0 = new PoolConfiguration(false, (-1), (-1), (-1), (-1), poolConfiguration_WhenBlockedPolicy0, 1859);
      PoolConfiguration poolConfiguration1 = poolConfiguration0.clone();
      assertEquals((-1), poolConfiguration0.getMaximumPoolSize());
      assertEquals((-1), poolConfiguration0.getBoundarySize());
      assertEquals(1859, poolConfiguration0.getStartUpSize());
      assertEquals(1859, poolConfiguration1.getStartUpSize());
      assertFalse(poolConfiguration0.isUseBoundary());
      assertEquals((-1), poolConfiguration1.getKeepAliveTime());
      assertEquals((-1), poolConfiguration1.getMaximumPoolSize());
      assertEquals((-1), poolConfiguration1.getMinimumPoolSize());
      assertEquals((-1), poolConfiguration0.getKeepAliveTime());
      assertEquals((-1), poolConfiguration1.getBoundarySize());
      assertEquals((-1), poolConfiguration0.getMinimumPoolSize());
      assertEquals(PoolConfiguration.WhenBlockedPolicy.DISCARDOLDEST, poolConfiguration1.getWhenBlockedPolicy());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PoolConfiguration.WhenBlockedPolicy poolConfiguration_WhenBlockedPolicy0 = PoolConfiguration.WhenBlockedPolicy.ABORT;
      PoolConfiguration poolConfiguration0 = new PoolConfiguration(false, 0, 0, 0, 1, poolConfiguration_WhenBlockedPolicy0, 0);
      PoolConfiguration poolConfiguration1 = poolConfiguration0.clone();
      assertEquals(0, poolConfiguration1.getMinimumPoolSize());
      assertEquals(1, poolConfiguration0.getKeepAliveTime());
      assertEquals(0, poolConfiguration1.getBoundarySize());
      assertEquals(0, poolConfiguration1.getMaximumPoolSize());
      assertEquals(0, poolConfiguration1.getStartUpSize());
      assertFalse(poolConfiguration0.isUseBoundary());
      assertEquals(PoolConfiguration.WhenBlockedPolicy.ABORT, poolConfiguration1.getWhenBlockedPolicy());
      assertEquals(1, poolConfiguration1.getKeepAliveTime());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PoolConfiguration.WhenBlockedPolicy poolConfiguration_WhenBlockedPolicy0 = PoolConfiguration.WhenBlockedPolicy.BLOCK;
      PoolConfiguration poolConfiguration0 = new PoolConfiguration(false, (-1), (-1), (-1), 4, poolConfiguration_WhenBlockedPolicy0, (-1));
      PoolConfiguration poolConfiguration1 = poolConfiguration0.clone();
      assertEquals((-1), poolConfiguration0.getStartUpSize());
      assertEquals(4, poolConfiguration1.getKeepAliveTime());
      assertEquals((-1), poolConfiguration0.getMaximumPoolSize());
      assertEquals((-1), poolConfiguration1.getStartUpSize());
      assertEquals((-1), poolConfiguration0.getMinimumPoolSize());
      assertEquals((-1), poolConfiguration1.getBoundarySize());
      assertFalse(poolConfiguration0.isUseBoundary());
      assertEquals(4, poolConfiguration0.getKeepAliveTime());
      assertEquals((-1), poolConfiguration1.getMaximumPoolSize());
      assertEquals(PoolConfiguration.WhenBlockedPolicy.BLOCK, poolConfiguration1.getWhenBlockedPolicy());
      assertEquals((-1), poolConfiguration0.getBoundarySize());
      assertEquals((-1), poolConfiguration1.getMinimumPoolSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PoolConfiguration poolConfiguration0 = new PoolConfiguration();
      PoolConfiguration.WhenBlockedPolicy poolConfiguration_WhenBlockedPolicy0 = PoolConfiguration.WhenBlockedPolicy.RUN;
      poolConfiguration0.setWhenBlockedPolicy(poolConfiguration_WhenBlockedPolicy0);
      assertEquals(2000, poolConfiguration0.getBoundarySize());
      assertEquals(1, poolConfiguration0.getStartUpSize());
      assertEquals(300000, poolConfiguration0.getKeepAliveTime());
      assertEquals(150, poolConfiguration0.getMaximumPoolSize());
      assertTrue(poolConfiguration0.isUseBoundary());
      assertEquals(1, poolConfiguration0.getMinimumPoolSize());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PoolConfiguration poolConfiguration0 = new PoolConfiguration();
      assertTrue(poolConfiguration0.isUseBoundary());
      
      poolConfiguration0.setUseBoundary(false);
      assertEquals(1, poolConfiguration0.getStartUpSize());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PoolConfiguration poolConfiguration0 = new PoolConfiguration();
      poolConfiguration0.setMaximumPoolSize((-545));
      int int0 = poolConfiguration0.getMaximumPoolSize();
      assertEquals((-545), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PoolConfiguration.WhenBlockedPolicy poolConfiguration_WhenBlockedPolicy0 = PoolConfiguration.WhenBlockedPolicy.WAIT;
      PoolConfiguration poolConfiguration0 = new PoolConfiguration(true, (-3135), 0, (-3135), (-3135), poolConfiguration_WhenBlockedPolicy0, 0);
      PoolConfiguration.WhenBlockedPolicy poolConfiguration_WhenBlockedPolicy1 = poolConfiguration0.getWhenBlockedPolicy();
      assertTrue(poolConfiguration0.isUseBoundary());
      assertEquals((-3135), poolConfiguration0.getMinimumPoolSize());
      assertEquals((-3135), poolConfiguration0.getKeepAliveTime());
      assertEquals(0, poolConfiguration0.getStartUpSize());
      assertEquals((-3135), poolConfiguration0.getBoundarySize());
      assertEquals(PoolConfiguration.WhenBlockedPolicy.WAIT, poolConfiguration_WhenBlockedPolicy1);
      assertEquals(0, poolConfiguration0.getMaximumPoolSize());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PoolConfiguration.WhenBlockedPolicy poolConfiguration_WhenBlockedPolicy0 = PoolConfiguration.WhenBlockedPolicy.WAIT;
      PoolConfiguration poolConfiguration0 = new PoolConfiguration(true, (-3135), 0, (-3135), (-3135), poolConfiguration_WhenBlockedPolicy0, 0);
      poolConfiguration0.setStartUpSize(0);
      assertEquals((-3135), poolConfiguration0.getBoundarySize());
      assertEquals(0, poolConfiguration0.getMaximumPoolSize());
      assertEquals((-3135), poolConfiguration0.getKeepAliveTime());
      assertEquals((-3135), poolConfiguration0.getMinimumPoolSize());
      assertEquals(0, poolConfiguration0.getStartUpSize());
      assertEquals(PoolConfiguration.WhenBlockedPolicy.WAIT, poolConfiguration0.getWhenBlockedPolicy());
      assertTrue(poolConfiguration0.isUseBoundary());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PoolConfiguration.WhenBlockedPolicy poolConfiguration_WhenBlockedPolicy0 = PoolConfiguration.WhenBlockedPolicy.WAIT;
      PoolConfiguration poolConfiguration0 = new PoolConfiguration(true, (-3135), 0, (-3135), (-3135), poolConfiguration_WhenBlockedPolicy0, 0);
      assertEquals((-3135), poolConfiguration0.getBoundarySize());
      
      poolConfiguration0.setBoundarySize(0);
      int int0 = poolConfiguration0.getBoundarySize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PoolConfiguration.WhenBlockedPolicy poolConfiguration_WhenBlockedPolicy0 = PoolConfiguration.WhenBlockedPolicy.DISCARDOLDEST;
      PoolConfiguration poolConfiguration0 = new PoolConfiguration(true, 2, 2, 2, (-1125), poolConfiguration_WhenBlockedPolicy0, (-1125));
      boolean boolean0 = poolConfiguration0.isUseBoundary();
      assertTrue(boolean0);
      assertEquals(2, poolConfiguration0.getMinimumPoolSize());
      assertEquals(2, poolConfiguration0.getMaximumPoolSize());
      assertEquals(PoolConfiguration.WhenBlockedPolicy.DISCARDOLDEST, poolConfiguration0.getWhenBlockedPolicy());
      assertEquals((-1125), poolConfiguration0.getKeepAliveTime());
      assertEquals(2, poolConfiguration0.getBoundarySize());
      assertEquals((-1125), poolConfiguration0.getStartUpSize());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PoolConfiguration poolConfiguration0 = new PoolConfiguration();
      poolConfiguration0.setWhenBlockedPolicy((PoolConfiguration.WhenBlockedPolicy) null);
      assertEquals(300000, poolConfiguration0.getKeepAliveTime());
      assertEquals(150, poolConfiguration0.getMaximumPoolSize());
      assertEquals(1, poolConfiguration0.getStartUpSize());
      assertTrue(poolConfiguration0.isUseBoundary());
      assertEquals(1, poolConfiguration0.getMinimumPoolSize());
      assertEquals(2000, poolConfiguration0.getBoundarySize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PoolConfiguration poolConfiguration0 = new PoolConfiguration();
      poolConfiguration0.setWhenBlockedPolicy("BLOCK");
      assertEquals(PoolConfiguration.WhenBlockedPolicy.BLOCK, poolConfiguration0.getWhenBlockedPolicy());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PoolConfiguration poolConfiguration0 = new PoolConfiguration();
      poolConfiguration0.setWhenBlockedPolicy((String) null);
      assertEquals(1, poolConfiguration0.getMinimumPoolSize());
      assertEquals(300000, poolConfiguration0.getKeepAliveTime());
      assertEquals(150, poolConfiguration0.getMaximumPoolSize());
      assertEquals(1, poolConfiguration0.getStartUpSize());
      assertTrue(poolConfiguration0.isUseBoundary());
      assertEquals(2000, poolConfiguration0.getBoundarySize());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PoolConfiguration poolConfiguration0 = new PoolConfiguration();
      int int0 = poolConfiguration0.getStartUpSize();
      assertTrue(poolConfiguration0.isUseBoundary());
      assertEquals(1, poolConfiguration0.getMinimumPoolSize());
      assertEquals(150, poolConfiguration0.getMaximumPoolSize());
      assertEquals(1, int0);
      assertEquals(2000, poolConfiguration0.getBoundarySize());
      assertEquals(300000, poolConfiguration0.getKeepAliveTime());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PoolConfiguration poolConfiguration0 = new PoolConfiguration();
      int int0 = poolConfiguration0.getKeepAliveTime();
      assertEquals(150, poolConfiguration0.getMaximumPoolSize());
      assertEquals(1, poolConfiguration0.getStartUpSize());
      assertEquals(300000, int0);
      assertEquals(2000, poolConfiguration0.getBoundarySize());
      assertEquals(1, poolConfiguration0.getMinimumPoolSize());
      assertTrue(poolConfiguration0.isUseBoundary());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PoolConfiguration poolConfiguration0 = new PoolConfiguration();
      int int0 = poolConfiguration0.getMaximumPoolSize();
      assertEquals(1, poolConfiguration0.getMinimumPoolSize());
      assertTrue(poolConfiguration0.isUseBoundary());
      assertEquals(2000, poolConfiguration0.getBoundarySize());
      assertEquals(1, poolConfiguration0.getStartUpSize());
      assertEquals(150, int0);
      assertEquals(300000, poolConfiguration0.getKeepAliveTime());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PoolConfiguration poolConfiguration0 = new PoolConfiguration();
      String string0 = poolConfiguration0.toString();
      assertEquals("useBoundary = [true] boundarySize = [2000] maximumPoolSize = [150] minimumPoolSize = [1] keepAliveTime = [300000] whenBlockedPolicy = [RUN] startUpSize = [1]", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PoolConfiguration poolConfiguration0 = new PoolConfiguration();
      int int0 = poolConfiguration0.getMinimumPoolSize();
      assertEquals(1, int0);
      assertEquals(1, poolConfiguration0.getStartUpSize());
      assertEquals(300000, poolConfiguration0.getKeepAliveTime());
      assertEquals(2000, poolConfiguration0.getBoundarySize());
      assertEquals(150, poolConfiguration0.getMaximumPoolSize());
      assertTrue(poolConfiguration0.isUseBoundary());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PoolConfiguration poolConfiguration0 = new PoolConfiguration();
      int int0 = poolConfiguration0.getBoundarySize();
      assertTrue(poolConfiguration0.isUseBoundary());
      assertEquals(300000, poolConfiguration0.getKeepAliveTime());
      assertEquals(150, poolConfiguration0.getMaximumPoolSize());
      assertEquals(1, poolConfiguration0.getStartUpSize());
      assertEquals(2000, int0);
      assertEquals(1, poolConfiguration0.getMinimumPoolSize());
  }
}
