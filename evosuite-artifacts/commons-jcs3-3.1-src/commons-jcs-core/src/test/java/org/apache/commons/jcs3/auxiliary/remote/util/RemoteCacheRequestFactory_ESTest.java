/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 22:02:46 GMT 2022
 */

package org.apache.commons.jcs3.auxiliary.remote.util;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedHashSet;
import java.util.Set;
import org.apache.commons.jcs3.auxiliary.remote.util.RemoteCacheRequestFactory;
import org.apache.commons.jcs3.auxiliary.remote.value.RemoteCacheRequest;
import org.apache.commons.jcs3.auxiliary.remote.value.RemoteRequestType;
import org.apache.commons.jcs3.engine.CacheElement;
import org.apache.commons.jcs3.engine.behavior.ICacheElement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RemoteCacheRequestFactory_ESTest extends RemoteCacheRequestFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CacheElement<RemoteCacheRequestFactory, String> cacheElement0 = new CacheElement<RemoteCacheRequestFactory, String>("JV@T'Y(CN", (RemoteCacheRequestFactory) null, "JV@T'Y(CN");
      RemoteCacheRequest<RemoteCacheRequestFactory, String> remoteCacheRequest0 = RemoteCacheRequestFactory.createUpdateRequest((ICacheElement<RemoteCacheRequestFactory, String>) cacheElement0, 0L);
      assertEquals(RemoteRequestType.UPDATE, remoteCacheRequest0.getRequestType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RemoteCacheRequest<String, Integer> remoteCacheRequest0 = RemoteCacheRequestFactory.createRemoveRequest("DISPOSE", "DISPOSE", 0L);
      assertEquals("DISPOSE", remoteCacheRequest0.getCacheName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RemoteCacheRequestFactory remoteCacheRequestFactory0 = new RemoteCacheRequestFactory();
      RemoteCacheRequest<RemoteCacheRequestFactory, Object> remoteCacheRequest0 = RemoteCacheRequestFactory.createRemoveRequest((String) null, remoteCacheRequestFactory0, (-1224L));
      assertEquals((-1224L), remoteCacheRequest0.getRequesterId());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RemoteCacheRequest<Integer, String> remoteCacheRequest0 = RemoteCacheRequestFactory.createRemoveAllRequest("", 0L);
      assertEquals(RemoteRequestType.REMOVE_ALL, remoteCacheRequest0.getRequestType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RemoteCacheRequest<Integer, Object> remoteCacheRequest0 = RemoteCacheRequestFactory.createRemoveAllRequest("", (-814L));
      assertEquals((-814L), remoteCacheRequest0.getRequesterId());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RemoteCacheRequest<Object, String> remoteCacheRequest0 = RemoteCacheRequestFactory.createGetRequest("", (Object) "", 0L);
      assertNull(remoteCacheRequest0.getPattern());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RemoteCacheRequest<String, Integer> remoteCacheRequest0 = RemoteCacheRequestFactory.createGetRequest("", "", 3275L);
      assertEquals(3275L, remoteCacheRequest0.getRequesterId());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      RemoteCacheRequest<Object, Integer> remoteCacheRequest0 = RemoteCacheRequestFactory.createGetMultipleRequest("hE%@ZOL_<j", (Set<Object>) linkedHashSet0, 0L);
      assertEquals("hE%@ZOL_<j", remoteCacheRequest0.getCacheName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      RemoteCacheRequest<String, Integer> remoteCacheRequest0 = RemoteCacheRequestFactory.createGetMultipleRequest("", (Set<String>) linkedHashSet0, (-1L));
      assertEquals((-1L), remoteCacheRequest0.getRequesterId());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RemoteCacheRequest<String, String> remoteCacheRequest0 = RemoteCacheRequestFactory.createGetMatchingRequest("", ";qOgZZMJ", 0L);
      assertEquals("", remoteCacheRequest0.getCacheName());
      assertEquals(";qOgZZMJ", remoteCacheRequest0.getPattern());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RemoteCacheRequest<Object, Object> remoteCacheRequest0 = RemoteCacheRequestFactory.createGetMatchingRequest("5uK", "x(7gf4h[]9]p", (-783L));
      assertEquals((-783L), remoteCacheRequest0.getRequesterId());
      assertEquals("x(7gf4h[]9]p", remoteCacheRequest0.getPattern());
      assertEquals("5uK", remoteCacheRequest0.getCacheName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RemoteCacheRequest<String, String> remoteCacheRequest0 = RemoteCacheRequestFactory.createGetKeySetRequest("\n keySet [", 0L);
      assertNull(remoteCacheRequest0.getPattern());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RemoteCacheRequest<String, String> remoteCacheRequest0 = RemoteCacheRequestFactory.createGetKeySetRequest("", 1801L);
      assertEquals(1801L, remoteCacheRequest0.getRequesterId());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RemoteCacheRequest<Object, String> remoteCacheRequest0 = RemoteCacheRequestFactory.createDisposeRequest("", 0L);
      assertEquals(RemoteRequestType.DISPOSE, remoteCacheRequest0.getRequestType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RemoteCacheRequest<String, Object> remoteCacheRequest0 = RemoteCacheRequestFactory.createDisposeRequest("84eL;r)17.G", (-1L));
      assertEquals((-1L), remoteCacheRequest0.getRequesterId());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RemoteCacheRequest<Integer, String> remoteCacheRequest0 = RemoteCacheRequestFactory.createAliveCheckRequest(0L);
      assertEquals(0L, remoteCacheRequest0.getRequesterId());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RemoteCacheRequest<Integer, Integer> remoteCacheRequest0 = RemoteCacheRequestFactory.createAliveCheckRequest(1000L);
      assertEquals(1000L, remoteCacheRequest0.getRequesterId());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RemoteCacheRequest<RemoteCacheRequestFactory, RemoteCacheRequestFactory> remoteCacheRequest0 = RemoteCacheRequestFactory.createUpdateRequest((ICacheElement<RemoteCacheRequestFactory, RemoteCacheRequestFactory>) null, (-1743L));
      assertEquals((-1743L), remoteCacheRequest0.getRequesterId());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RemoteCacheRequest<Object, String> remoteCacheRequest0 = RemoteCacheRequestFactory.createAliveCheckRequest((-1743L));
      assertEquals((-1743L), remoteCacheRequest0.getRequesterId());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RemoteCacheRequest<Object, Object> remoteCacheRequest0 = RemoteCacheRequestFactory.createGetRequest("h", (Object) "h", (-1743L));
      assertEquals((-1743L), remoteCacheRequest0.getRequesterId());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RemoteCacheRequestFactory remoteCacheRequestFactory0 = new RemoteCacheRequestFactory();
      CacheElement<RemoteCacheRequestFactory, RemoteCacheRequestFactory> cacheElement0 = new CacheElement<RemoteCacheRequestFactory, RemoteCacheRequestFactory>("c5x9!}hA$e[c:6h", remoteCacheRequestFactory0, remoteCacheRequestFactory0);
      RemoteCacheRequest<RemoteCacheRequestFactory, RemoteCacheRequestFactory> remoteCacheRequest0 = RemoteCacheRequestFactory.createUpdateRequest((ICacheElement<RemoteCacheRequestFactory, RemoteCacheRequestFactory>) cacheElement0, 43L);
      assertEquals(43L, remoteCacheRequest0.getRequesterId());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RemoteCacheRequest<String, Integer> remoteCacheRequest0 = RemoteCacheRequestFactory.createRemoveRequest("c5x9!}hA$e[c:6h", "c5x9!}hA$e[c:6h", 43L);
      assertEquals(43L, remoteCacheRequest0.getRequesterId());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RemoteCacheRequest<Integer, String> remoteCacheRequest0 = RemoteCacheRequestFactory.createGetMultipleRequest("c5x9!}hA$e[c:6h", (Set<Integer>) null, 43L);
      assertEquals(43L, remoteCacheRequest0.getRequesterId());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RemoteCacheRequest<String, String> remoteCacheRequest0 = RemoteCacheRequestFactory.createGetKeySetRequest("h", (-1743L));
      assertEquals((-1743L), remoteCacheRequest0.getRequesterId());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RemoteCacheRequest<Object, String> remoteCacheRequest0 = RemoteCacheRequestFactory.createRemoveAllRequest("Can't create a proper update request for a null cache element.", 17L);
      assertEquals(17L, remoteCacheRequest0.getRequesterId());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RemoteCacheRequest<String, Integer> remoteCacheRequest0 = RemoteCacheRequestFactory.createGetMatchingRequest("Can't create a proper update request for a null cache element.", "Can't create a proper update request for a null cache element.", 17L);
      assertEquals(17L, remoteCacheRequest0.getRequesterId());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RemoteCacheRequest<String, Object> remoteCacheRequest0 = RemoteCacheRequestFactory.createDisposeRequest("c5x9!}hA$e[c:6h", 43L);
      assertEquals(43L, remoteCacheRequest0.getRequesterId());
  }
}
