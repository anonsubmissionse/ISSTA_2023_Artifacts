/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 21:40:17 GMT 2022
 */

package org.apache.commons.jcs3.engine.behavior;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.NotSerializableException;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.io.StreamCorruptedException;
import java.net.ProtocolFamily;
import java.net.StandardProtocolFamily;
import java.nio.BufferUnderflowException;
import java.nio.channels.AsynchronousByteChannel;
import java.nio.channels.ClosedChannelException;
import java.nio.channels.DatagramChannel;
import java.nio.channels.FileChannel;
import java.nio.channels.NonReadableChannelException;
import java.nio.channels.NonWritableChannelException;
import java.nio.channels.NotYetConnectedException;
import java.nio.channels.ReadableByteChannel;
import java.nio.channels.SocketChannel;
import java.nio.channels.WritableByteChannel;
import java.nio.file.LinkOption;
import java.nio.file.OpenOption;
import java.nio.file.StandardOpenOption;
import java.util.Enumeration;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jcs3.engine.behavior.IElementSerializer;
import org.apache.commons.jcs3.utils.serialization.CompressingSerializer;
import org.apache.commons.jcs3.utils.serialization.EncryptingSerializer;
import org.apache.commons.jcs3.utils.serialization.StandardSerializer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IElementSerializer_ESTest extends IElementSerializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StandardSerializer standardSerializer0 = new StandardSerializer();
      SocketChannel socketChannel0 = SocketChannel.open();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      socketChannel0.configureBlocking(true);
      socketChannel0.close();
      classLoader0.clearAssertionStatus();
      try { 
        standardSerializer0.deSerializeFrom((ReadableByteChannel) socketChannel0, classLoader0);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CompressingSerializer compressingSerializer0 = new CompressingSerializer();
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      delayQueue0.poll((-1095L), timeUnit0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      // Undeclared exception!
      try { 
        compressingSerializer0.serializeTo((Delayed) null, (WritableByteChannel) fileChannel0);
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EncryptingSerializer encryptingSerializer0 = new EncryptingSerializer();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      FileChannel fileChannel1 = fileChannel0.position(1924L);
      try { 
        encryptingSerializer0.deSerializeFrom((ReadableByteChannel) fileChannel1, (ClassLoader) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CompressingSerializer compressingSerializer0 = new CompressingSerializer();
      MockFile mockFile0 = new MockFile("xSHAK8J80");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      compressingSerializer0.serializeTo((String) null, (WritableByteChannel) fileChannel0);
      // Undeclared exception!
      try { 
        compressingSerializer0.serializeTo((String) null, (AsynchronousByteChannel) null, 1000);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.engine.behavior.IElementSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EncryptingSerializer encryptingSerializer0 = new EncryptingSerializer();
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      // Undeclared exception!
      try { 
        encryptingSerializer0.deSerializeFrom((InputStream) byteArrayInputStream0, (ClassLoader) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StandardSerializer standardSerializer0 = new StandardSerializer();
      String string0 = "org.apache.commons.jcs3.utils.serialization.CompressingSerializer";
      MockFile mockFile0 = new MockFile("org.apache.commons.jcs3.utils.serialization.CompressingSerializer");
      MockFile mockFile1 = new MockFile("Read timeout exceeded (object)", "org.apache.commons.jcs3.utils.serialization.CompressingSerializer");
      mockFile0.setWritable(false, false);
      SocketChannel socketChannel0 = SocketChannel.open();
      socketChannel0.close();
      try { 
        standardSerializer0.serializeTo((Object) mockFile0, (WritableByteChannel) socketChannel0);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EncryptingSerializer encryptingSerializer0 = new EncryptingSerializer();
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      // Undeclared exception!
      try { 
        encryptingSerializer0.deSerializeFrom((InputStream) byteArrayInputStream0, (ClassLoader) null);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EncryptingSerializer encryptingSerializer0 = new EncryptingSerializer();
      encryptingSerializer0.setAesCipherTransformation("A1}X-t&");
      encryptingSerializer0.setPreSharedKey("org.apache.commons.jcs3.engine.behavior.IElementSerializer");
      CompressingSerializer compressingSerializer0 = new CompressingSerializer();
      compressingSerializer0.serialize("org.apache.commons.jcs3.engine.behavior.IElementSerializer");
      StandardOpenOption standardOpenOption0 = StandardOpenOption.READ;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Xn", false);
      compressingSerializer0.serializeTo((OpenOption) standardOpenOption0, (OutputStream) mockFileOutputStream0);
      Integer integer0 = new Integer(16);
      compressingSerializer0.serialize(integer0);
      Integer integer1 = new Integer(0);
      try { 
        encryptingSerializer0.serialize((OpenOption) standardOpenOption0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error while encrypting
         //
         verifyException("org.apache.commons.jcs3.utils.serialization.EncryptingSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EncryptingSerializer encryptingSerializer0 = new EncryptingSerializer();
      String string0 = "D#ad{";
      encryptingSerializer0.setAesCipherTransformation("D#ad{");
      byte[] byteArray0 = new byte[16];
      byte byte0 = (byte) (-25);
      byteArray0[0] = (byte) (-25);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      MockThread.currentThread();
      MockThread mockThread0 = new MockThread("D#ad{");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      String string1 = " *, *";
      encryptingSerializer0.setAesCipherTransformation(" *, *");
      ClassLoader classLoader1 = classLoader0.getParent();
      // Undeclared exception!
      try { 
        encryptingSerializer0.deSerializeFrom((InputStream) byteArrayInputStream0, classLoader1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.engine.behavior.IElementSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EncryptingSerializer encryptingSerializer0 = new EncryptingSerializer();
      String string0 = "D#ad{";
      encryptingSerializer0.setAesCipherTransformation("D#ad{");
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-25);
      byteArray0[0] = (byte) (-25);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(thread0, "D#ad{");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      String string1 = " *, *";
      encryptingSerializer0.setAesCipherTransformation(" *, *");
      ClassLoader classLoader1 = classLoader0.getParent();
      // Undeclared exception!
      try { 
        encryptingSerializer0.deSerializeFrom((InputStream) byteArrayInputStream0, classLoader1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EncryptingSerializer encryptingSerializer0 = new EncryptingSerializer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)110;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-675), (byte)5);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      // Undeclared exception!
      try { 
        encryptingSerializer0.deSerializeFrom((InputStream) byteArrayInputStream0, classLoader0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EncryptingSerializer encryptingSerializer0 = new EncryptingSerializer();
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)110;
      int int0 = 347;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        encryptingSerializer0.deSerializeFrom((InputStream) byteArrayInputStream0, (ClassLoader) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EncryptingSerializer encryptingSerializer0 = new EncryptingSerializer();
      encryptingSerializer0.setAesCipherTransformation("A1}X-t&");
      encryptingSerializer0.setPreSharedKey("org.apache.commons.jcs3.engine.behavior.IElementSerializer");
      CompressingSerializer compressingSerializer0 = new CompressingSerializer();
      compressingSerializer0.serialize("org.apache.commons.jcs3.engine.behavior.IElementSerializer");
      StandardOpenOption standardOpenOption0 = StandardOpenOption.READ;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Xn", false);
      compressingSerializer0.serialize("org.apache.commons.jcs3.engine.behavior.IElementSerializer");
      compressingSerializer0.serializeTo((OpenOption) standardOpenOption0, (OutputStream) mockFileOutputStream0);
      Integer integer0 = new Integer(16);
      compressingSerializer0.serialize(integer0);
      Integer integer1 = new Integer(0);
      try { 
        encryptingSerializer0.serializeTo((OpenOption) standardOpenOption0, (OutputStream) mockFileOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error while encrypting
         //
         verifyException("org.apache.commons.jcs3.utils.serialization.EncryptingSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EncryptingSerializer encryptingSerializer0 = new EncryptingSerializer();
      encryptingSerializer0.setAesCipherTransformation("A1}X-t&");
      encryptingSerializer0.setPreSharedKey("org.apache.commons.jcs3.engine.behavior.IElementSerializer");
      CompressingSerializer compressingSerializer0 = new CompressingSerializer();
      compressingSerializer0.serialize("org.apache.commons.jcs3.engine.behavior.IElementSerializer");
      StandardOpenOption standardOpenOption0 = StandardOpenOption.READ;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Xn", false);
      compressingSerializer0.serializeTo((OpenOption) standardOpenOption0, (OutputStream) mockFileOutputStream0);
      Integer integer0 = new Integer(16);
      byte[] byteArray0 = compressingSerializer0.serialize(integer0);
      Integer integer1 = new Integer(0);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, (Runnable) null, "A1}X-t&");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      compressingSerializer0.deSerialize(byteArray0, classLoader0);
      compressingSerializer0.deSerialize(byteArray0, classLoader0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CompressingSerializer compressingSerializer0 = new CompressingSerializer();
      String string0 = null;
      AsynchronousByteChannel asynchronousByteChannel0 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-97);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      try { 
        compressingSerializer0.serializeTo((FilterInputStream) bufferedInputStream0, (AsynchronousByteChannel) null, (int)  (-97));
        fail("Expecting exception: NotSerializableException");
      
      } catch(NotSerializableException e) {
         //
         // java.io.BufferedInputStream
         //
         verifyException("java.io.ObjectOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EncryptingSerializer encryptingSerializer0 = new EncryptingSerializer();
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      encryptingSerializer0.setPreSharedKey(">xddzHu`a");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">xddzHu`a", true);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        encryptingSerializer0.deSerializeFrom((ReadableByteChannel) fileChannel0, classLoader0);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StandardSerializer standardSerializer0 = new StandardSerializer();
      File file0 = MockFile.createTempFile("]KQ", "]KQ");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      StandardProtocolFamily standardProtocolFamily0 = StandardProtocolFamily.INET;
      DatagramChannel datagramChannel0 = DatagramChannel.open((ProtocolFamily) standardProtocolFamily0);
      try { 
        standardSerializer0.serializeTo((InputStream) mockFileInputStream0, (WritableByteChannel) datagramChannel0);
        fail("Expecting exception: NotSerializableException");
      
      } catch(NotSerializableException e) {
         //
         // org.evosuite.runtime.mock.java.io.MockFileInputStream
         //
         verifyException("java.io.ObjectOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StandardSerializer standardSerializer0 = new StandardSerializer();
      assertNotNull(standardSerializer0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)32;
      byte byte0 = (byte) (-25);
      byteArray0[1] = (byte) (-25);
      byte byte1 = (byte)21;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)40;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      try { 
        standardSerializer0.deSerialize(byteArray0, classLoader0);
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(StreamCorruptedException e) {
         //
         // invalid stream header: 20E71528
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StandardSerializer standardSerializer0 = new StandardSerializer();
      assertNotNull(standardSerializer0);
      
      Integer integer0 = new Integer((-6));
      assertNotNull(integer0);
      assertEquals((-6), (int)integer0);
      
      byte[] byteArray0 = standardSerializer0.serialize(integer0);
      assertNotNull(byteArray0);
      assertEquals(81, byteArray0.length);
      
      EncryptingSerializer encryptingSerializer0 = new EncryptingSerializer(standardSerializer0);
      assertNotNull(encryptingSerializer0);
      
      encryptingSerializer0.setPreSharedKey("");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 28);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        standardSerializer0.serialize((InputStream) pipedInputStream0);
        fail("Expecting exception: NotSerializableException");
      
      } catch(NotSerializableException e) {
         //
         // java.io.PipedInputStream
         //
         verifyException("java.io.ObjectOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IElementSerializer iElementSerializer0 = null;
      CompressingSerializer compressingSerializer0 = new CompressingSerializer((IElementSerializer) null);
      assertNotNull(compressingSerializer0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)0;
      byte byte0 = (byte) (-55);
      byteArray0[3] = (byte) (-55);
      byte byte1 = (byte)0;
      byteArray0[4] = (byte)0;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      String string0 = "PBKDF2WithHmacSHA256";
      classLoader0.clearAssertionStatus();
      classLoader0.setClassAssertionStatus("PBKDF2WithHmacSHA256", true);
      // Undeclared exception!
      try { 
        compressingSerializer0.deSerialize(byteArray0, classLoader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.utils.serialization.CompressingSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EncryptingSerializer encryptingSerializer0 = new EncryptingSerializer();
      assertNotNull(encryptingSerializer0);
      
      EncryptingSerializer encryptingSerializer1 = new EncryptingSerializer(encryptingSerializer0);
      assertNotNull(encryptingSerializer1);
      assertFalse(encryptingSerializer1.equals((Object)encryptingSerializer0));
      
      // Undeclared exception!
      try { 
        encryptingSerializer1.serialize("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.utils.serialization.EncryptingSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CompressingSerializer compressingSerializer0 = new CompressingSerializer();
      assertNotNull(compressingSerializer0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-19);
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte) (-56);
      byteArray0[8] = (byte)0;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      try { 
        compressingSerializer0.deSerialize(byteArray0, classLoader1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CompressingSerializer compressingSerializer0 = new CompressingSerializer();
      assertNotNull(compressingSerializer0);
      
      EncryptingSerializer encryptingSerializer0 = new EncryptingSerializer(compressingSerializer0);
      assertNotNull(encryptingSerializer0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      // Undeclared exception!
      try { 
        encryptingSerializer0.deSerializeFrom((ReadableByteChannel) null, classLoader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.engine.behavior.IElementSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CompressingSerializer compressingSerializer0 = new CompressingSerializer();
      assertNotNull(compressingSerializer0);
      
      CompressingSerializer compressingSerializer1 = new CompressingSerializer(compressingSerializer0);
      assertNotNull(compressingSerializer1);
      assertFalse(compressingSerializer1.equals((Object)compressingSerializer0));
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setPackageAssertionStatus("Nr^>eFfL?lWWSZI}j", false);
      FilterInputStream filterInputStream0 = compressingSerializer1.deSerialize((byte[]) null, classLoader0);
      assertNull(filterInputStream0);
      assertNotSame(compressingSerializer0, compressingSerializer1);
      assertNotSame(compressingSerializer1, compressingSerializer0);
      assertFalse(compressingSerializer0.equals((Object)compressingSerializer1));
      assertFalse(compressingSerializer1.equals((Object)compressingSerializer0));
      
      String string0 = "7^=7'3R0\\nT[,";
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CompressingSerializer compressingSerializer0 = new CompressingSerializer();
      assertNotNull(compressingSerializer0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-97);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      // Undeclared exception!
      compressingSerializer0.deSerialize(byteArray0, classLoader0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EncryptingSerializer encryptingSerializer0 = new EncryptingSerializer();
      assertNotNull(encryptingSerializer0);
      
      EncryptingSerializer encryptingSerializer1 = new EncryptingSerializer(encryptingSerializer0);
      assertNotNull(encryptingSerializer1);
      assertFalse(encryptingSerializer1.equals((Object)encryptingSerializer0));
      
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      // Undeclared exception!
      try { 
        encryptingSerializer1.deSerializeFrom((InputStream) dataInputStream0, classLoader1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EncryptingSerializer encryptingSerializer0 = new EncryptingSerializer();
      //  // Unstable assertion: assertNotNull(encryptingSerializer0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-117);
      byte byte0 = (byte)24;
      byteArray0[3] = (byte)24;
      byte byte1 = (byte)78;
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)0;
      MockThread mockThread0 = new MockThread((ThreadGroup) null, "org.apache.commons.jcs3.engine.behavior.IElementSerializer$1");
      //  // Unstable assertion: assertNotNull(mockThread0);
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      //  // Unstable assertion: assertNotNull(classLoader0);
      //  // Unstable assertion: assertEquals(0, mockThread0.countStackFrames());
      //  // Unstable assertion: assertFalse(mockThread0.isDaemon());
      //  // Unstable assertion: assertFalse(mockThread0.isInterrupted());
      
      ClassLoader classLoader1 = classLoader0.getParent();
      //  // Unstable assertion: assertNotNull(classLoader1);
      //  // Unstable assertion: assertEquals(0, mockThread0.countStackFrames());
      //  // Unstable assertion: assertFalse(mockThread0.isDaemon());
      //  // Unstable assertion: assertFalse(mockThread0.isInterrupted());
      //  // Unstable assertion: assertFalse(classLoader1.equals((Object)classLoader0));
      
      ClassLoader classLoader2 = classLoader0.getParent();
      //  // Unstable assertion: assertNotNull(classLoader2);
      //  // Unstable assertion: assertEquals(0, mockThread0.countStackFrames());
      //  // Unstable assertion: assertFalse(mockThread0.isDaemon());
      //  // Unstable assertion: assertFalse(mockThread0.isInterrupted());
      //  // Unstable assertion: assertSame(classLoader2, classLoader1);
      //  // Unstable assertion: assertFalse(classLoader0.equals((Object)classLoader1));
      //  // Unstable assertion: assertFalse(classLoader2.equals((Object)classLoader0));
      
      // Undeclared exception!
      try { 
        encryptingSerializer0.deSerialize(byteArray0, classLoader2);
       //  fail("Expecting exception: BufferUnderflowException");
       // Unstable assertion
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EncryptingSerializer encryptingSerializer0 = new EncryptingSerializer((IElementSerializer) null);
      assertNotNull(encryptingSerializer0);
      
      DatagramChannel datagramChannel0 = DatagramChannel.open();
      assertNotNull(datagramChannel0);
      assertTrue(datagramChannel0.isBlocking());
      assertTrue(datagramChannel0.isOpen());
      assertFalse(datagramChannel0.isConnected());
      assertFalse(datagramChannel0.isRegistered());
      assertEquals(5, datagramChannel0.validOps());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      // Undeclared exception!
      try { 
        encryptingSerializer0.deSerializeFrom((ReadableByteChannel) datagramChannel0, classLoader1);
        fail("Expecting exception: NotYetConnectedException");
      
      } catch(NotYetConnectedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StandardSerializer standardSerializer0 = new StandardSerializer();
      assertNotNull(standardSerializer0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      byte[] byteArray0 = standardSerializer0.serialize(integer0);
      assertNotNull(byteArray0);
      assertEquals(81, byteArray0.length);
      
      EncryptingSerializer encryptingSerializer0 = new EncryptingSerializer();
      assertNotNull(encryptingSerializer0);
      
      EncryptingSerializer encryptingSerializer1 = new EncryptingSerializer(encryptingSerializer0);
      assertNotNull(encryptingSerializer1);
      assertFalse(encryptingSerializer1.equals((Object)encryptingSerializer0));
      
      encryptingSerializer1.setAesCipherTransformation("");
      assertNotSame(encryptingSerializer0, encryptingSerializer1);
      assertNotSame(encryptingSerializer1, encryptingSerializer0);
      assertFalse(encryptingSerializer0.equals((Object)encryptingSerializer1));
      assertFalse(encryptingSerializer1.equals((Object)encryptingSerializer0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CompressingSerializer compressingSerializer0 = new CompressingSerializer();
      assertNotNull(compressingSerializer0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      int int0 = 0;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      int int1 = compressingSerializer0.serializeTo(linkOption0, (OutputStream) byteArrayOutputStream0);
      assertEquals(84, byteArrayOutputStream0.size());
      assertEquals("\u0000\u0000\u0000Px\uFFFD[\uDB18\uDC75\uFFFD\uFFFDA\"+\uFFFD,Q//3_/-3'U\uFFFD'3/\u06FF\uFFFD$3?\uFFFD\u0001\n\uFFFD\u0018\u0018*\uFFFD\u0018\uFFFD\uFFFD\uFFFDr\u0012\uFFFD\uFFFD\uFFFD\\\uFFFDJs\uFFFD%\u000BJ\u0018\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD}|\uFFFD\uFFFD\uFFFD}<\uFFFD\uFFFD\uFFFD\u0001\uFFFD\uFFFD\u0017\uFFFD", byteArrayOutputStream0.toString());
      assertFalse(int1 == int0);
      assertEquals(84, int1);
      
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StandardSerializer standardSerializer0 = new StandardSerializer();
      assertNotNull(standardSerializer0);
      
      EncryptingSerializer encryptingSerializer0 = new EncryptingSerializer(standardSerializer0);
      assertNotNull(encryptingSerializer0);
      
      // Undeclared exception!
      try { 
        encryptingSerializer0.serializeTo("@zIh2&>[oO;IwQ?+:Lt", (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.utils.serialization.EncryptingSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CompressingSerializer compressingSerializer0 = new CompressingSerializer();
      assertNotNull(compressingSerializer0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(2, byteArray0.length);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)17);
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(2, byteArray0.length);
      
      bufferedInputStream0.close();
      assertArrayEquals(new byte[] {(byte)17, (byte)0}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(2, byteArray0.length);
      
      bufferedInputStream0.mark((byte)17);
      assertArrayEquals(new byte[] {(byte)17, (byte)0}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(2, byteArray0.length);
      
      try { 
        compressingSerializer0.serializeTo((FilterInputStream) bufferedInputStream0, (OutputStream) null);
        fail("Expecting exception: NotSerializableException");
      
      } catch(NotSerializableException e) {
         //
         // java.io.BufferedInputStream
         //
         verifyException("java.io.ObjectOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StandardSerializer standardSerializer0 = new StandardSerializer();
      assertNotNull(standardSerializer0);
      
      // Undeclared exception!
      try { 
        standardSerializer0.serializeTo("Hg", (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.engine.behavior.IElementSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CompressingSerializer compressingSerializer0 = new CompressingSerializer();
      //  // Unstable assertion: assertNotNull(compressingSerializer0);
      
      Thread thread0 = MockThread.currentThread();
      //  // Unstable assertion: assertNotNull(thread0);
      //  // Unstable assertion: assertFalse(thread0.isDaemon());
      //  // Unstable assertion: assertFalse(thread0.isInterrupted());
      
      MockThread mockThread0 = new MockThread(thread0);
      //  // Unstable assertion: assertNotNull(mockThread0);
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      //  // Unstable assertion: assertNotNull(classLoader0);
      //  // Unstable assertion: assertFalse(thread0.isDaemon());
      //  // Unstable assertion: assertFalse(thread0.isInterrupted());
      //  // Unstable assertion: assertFalse(mockThread0.isDaemon());
      //  // Unstable assertion: assertEquals(0, mockThread0.countStackFrames());
      //  // Unstable assertion: assertFalse(mockThread0.isInterrupted());
      
      // Undeclared exception!
      try { 
        compressingSerializer0.deSerializeFrom((AsynchronousByteChannel) null, (-197), classLoader0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.engine.behavior.IElementSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CompressingSerializer compressingSerializer0 = new CompressingSerializer((IElementSerializer) null);
      assertNotNull(compressingSerializer0);
      
      EncryptingSerializer encryptingSerializer0 = new EncryptingSerializer(compressingSerializer0);
      assertNotNull(encryptingSerializer0);
      
      Integer integer0 = new Integer(12);
      assertNotNull(integer0);
      assertEquals(12, (int)integer0);
      
      int int0 = 0;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      // Undeclared exception!
      try { 
        encryptingSerializer0.serializeTo((FilterInputStream) dataInputStream0, (AsynchronousByteChannel) null, 12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.utils.serialization.CompressingSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CompressingSerializer compressingSerializer0 = new CompressingSerializer();
      assertNotNull(compressingSerializer0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      // Undeclared exception!
      try { 
        compressingSerializer0.serializeTo((Object) integer0, (WritableByteChannel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.engine.behavior.IElementSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StandardSerializer standardSerializer0 = new StandardSerializer();
      assertNotNull(standardSerializer0);
      
      String string0 = "org.apache.commons.jcs3.utils.serialization.CompressingSerializer";
      MockFile mockFile0 = new MockFile("org.apache.commons.jcs3.utils.serialization.CompressingSerializer");
      assertNotNull(mockFile0);
      
      String string1 = "1e:>g $}(4qBCpgv*";
      File file0 = MockFile.createTempFile("1e:>g $}(4qBCpgv*", "Read timeout exceeded (object)", (File) mockFile0);
      assertNotNull(file0);
      assertEquals("org.apache.commons.jcs3.utils.serialization.CompressingSerializer", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("org.apache.commons.jcs3.utils.serialization.CompressingSerializer", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/commons-jcs3-3.1-src/commons-jcs-core/org.apache.commons.jcs3.utils.serialization.CompressingSerializer/1e:>g $}(4qBCpgv*0Read timeout exceeded (object)", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/commons-jcs3-3.1-src/commons-jcs-core/org.apache.commons.jcs3.utils.serialization.CompressingSerializer", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals("1e:>g $}(4qBCpgv*0Read timeout exceeded (object)", file0.getName());
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      
      boolean boolean0 = mockFile0.setWritable(false, false);
      assertEquals("org.apache.commons.jcs3.utils.serialization.CompressingSerializer", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("org.apache.commons.jcs3.utils.serialization.CompressingSerializer", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertNotSame(mockFile0, file0);
      assertFalse(mockFile0.equals((Object)file0));
      assertTrue(boolean0);
      
      SocketChannel socketChannel0 = SocketChannel.open();
      assertNotNull(socketChannel0);
      assertFalse(socketChannel0.isConnected());
      assertTrue(socketChannel0.isBlocking());
      assertEquals(13, socketChannel0.validOps());
      assertTrue(socketChannel0.isOpen());
      assertFalse(socketChannel0.isConnectionPending());
      assertFalse(socketChannel0.isRegistered());
      
      // Undeclared exception!
      try { 
        standardSerializer0.serializeTo((Object) mockFile0, (WritableByteChannel) socketChannel0);
        fail("Expecting exception: NotYetConnectedException");
      
      } catch(NotYetConnectedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      EncryptingSerializer encryptingSerializer0 = new EncryptingSerializer();
      assertNotNull(encryptingSerializer0);
      
      encryptingSerializer0.setAesCipherTransformation("A1}X-t&");
      encryptingSerializer0.setPreSharedKey("org.apache.commons.jcs3.engine.behavior.IElementSerializer");
      CompressingSerializer compressingSerializer0 = new CompressingSerializer();
      assertNotNull(compressingSerializer0);
      
      byte[] byteArray0 = compressingSerializer0.serialize("org.apache.commons.jcs3.engine.behavior.IElementSerializer");
      assertNotNull(byteArray0);
      assertEquals(73, byteArray0.length);
      
      Integer integer0 = new Integer(16);
      assertNotNull(integer0);
      assertEquals(16, (int)integer0);
      
      byte[] byteArray1 = compressingSerializer0.serialize(integer0);
      assertNotNull(byteArray1);
      assertEquals(82, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      assertNotNull(fileChannel0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      
      FileChannel fileChannel1 = fileChannel0.position((long) 16);
      assertNotNull(fileChannel1);
      assertFalse(fileDescriptor0.valid());
      assertEquals(16L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(16L, fileChannel1.position());
      assertTrue(fileChannel1.isOpen());
      assertSame(fileChannel0, fileChannel1);
      assertSame(fileChannel1, fileChannel0);
      
      try { 
        encryptingSerializer0.serializeTo((Object) "org.apache.commons.jcs3.engine.behavior.IElementSerializer", (WritableByteChannel) fileChannel1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error while encrypting
         //
         verifyException("org.apache.commons.jcs3.utils.serialization.EncryptingSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      EncryptingSerializer encryptingSerializer0 = new EncryptingSerializer();
      //  // Unstable assertion: assertNotNull(encryptingSerializer0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      //  // Unstable assertion: assertNotNull(pipedInputStream0);
      //  // Unstable assertion: assertEquals(0, pipedInputStream0.available());
      
      String string0 = "";
      MockThread mockThread0 = new MockThread("");
      //  // Unstable assertion: assertNotNull(mockThread0);
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      //  // Unstable assertion: assertNotNull(classLoader0);
      //  // Unstable assertion: assertFalse(mockThread0.isDaemon());
      //  // Unstable assertion: assertFalse(mockThread0.isInterrupted());
      //  // Unstable assertion: assertEquals(0, mockThread0.countStackFrames());
      
      String string1 = null;
      classLoader0.setDefaultAssertionStatus(false);
      //  // Unstable assertion: assertFalse(mockThread0.isDaemon());
      //  // Unstable assertion: assertFalse(mockThread0.isInterrupted());
      //  // Unstable assertion: assertEquals(0, mockThread0.countStackFrames());
      
      classLoader0.setPackageAssertionStatus((String) null, true);
      //  // Unstable assertion: assertFalse(mockThread0.isDaemon());
      //  // Unstable assertion: assertFalse(mockThread0.isInterrupted());
      //  // Unstable assertion: assertEquals(0, mockThread0.countStackFrames());
      
      try { 
        encryptingSerializer0.deSerializeFrom((InputStream) pipedInputStream0, classLoader0);
       //  fail("Expecting exception: IOException");
       // Unstable assertion
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StandardSerializer standardSerializer0 = new StandardSerializer();
      assertNotNull(standardSerializer0);
      
      EncryptingSerializer encryptingSerializer0 = new EncryptingSerializer(standardSerializer0);
      assertNotNull(encryptingSerializer0);
      
      StandardOpenOption standardOpenOption0 = StandardOpenOption.DELETE_ON_CLOSE;
      assertEquals(StandardOpenOption.DELETE_ON_CLOSE, standardOpenOption0);
      
      // Undeclared exception!
      try { 
        encryptingSerializer0.serializeTo((OpenOption) standardOpenOption0, (WritableByteChannel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.utils.serialization.EncryptingSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      EncryptingSerializer encryptingSerializer0 = new EncryptingSerializer();
      assertNotNull(encryptingSerializer0);
      
      EncryptingSerializer encryptingSerializer1 = new EncryptingSerializer(encryptingSerializer0);
      assertNotNull(encryptingSerializer1);
      assertFalse(encryptingSerializer1.equals((Object)encryptingSerializer0));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 28, (-3446));
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-86), (byte) (-35), (byte)0, (byte)0}, byteArray0);
      assertEquals((-3446), byteArrayInputStream0.available());
      assertEquals(4, byteArray0.length);
      
      try { 
        encryptingSerializer1.deSerializeFrom((InputStream) byteArrayInputStream0, (ClassLoader) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached
         //
         verifyException("org.apache.commons.jcs3.engine.behavior.IElementSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CompressingSerializer compressingSerializer0 = new CompressingSerializer();
      assertNotNull(compressingSerializer0);
      
      // Undeclared exception!
      try { 
        compressingSerializer0.serializeTo((String) null, (AsynchronousByteChannel) null, 1000);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.engine.behavior.IElementSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      EncryptingSerializer encryptingSerializer0 = new EncryptingSerializer();
      assertNotNull(encryptingSerializer0);
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)5;
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(3, byteArray0.length);
      
      // Undeclared exception!
      try { 
        encryptingSerializer0.deSerializeFrom((InputStream) byteArrayInputStream0, (ClassLoader) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CompressingSerializer compressingSerializer0 = new CompressingSerializer();
      assertNotNull(compressingSerializer0);
      
      StandardOpenOption standardOpenOption0 = StandardOpenOption.DSYNC;
      assertEquals(StandardOpenOption.DSYNC, standardOpenOption0);
      
      byte[] byteArray0 = compressingSerializer0.serialize((OpenOption) standardOpenOption0);
      assertNotNull(byteArray0);
      assertEquals(79, byteArray0.length);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(79, byteArray0.length);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      try { 
        compressingSerializer0.deSerializeFrom((InputStream) byteArrayInputStream0, classLoader0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached
         //
         verifyException("org.apache.commons.jcs3.engine.behavior.IElementSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CompressingSerializer compressingSerializer0 = new CompressingSerializer();
      assertNotNull(compressingSerializer0);
      
      StandardOpenOption standardOpenOption0 = StandardOpenOption.READ;
      assertEquals(StandardOpenOption.READ, standardOpenOption0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Xn", false);
      assertNotNull(mockFileOutputStream0);
      
      int int0 = compressingSerializer0.serializeTo((OpenOption) standardOpenOption0, (OutputStream) mockFileOutputStream0);
      assertEquals(82, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      EncryptingSerializer encryptingSerializer0 = new EncryptingSerializer();
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        encryptingSerializer0.deSerializeFrom((InputStream) byteArrayInputStream0, (ClassLoader) null);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      EncryptingSerializer encryptingSerializer0 = new EncryptingSerializer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        encryptingSerializer0.deSerializeFrom((InputStream) byteArrayInputStream0, (ClassLoader) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      EncryptingSerializer encryptingSerializer0 = new EncryptingSerializer();
      CompressingSerializer compressingSerializer0 = new CompressingSerializer(encryptingSerializer0);
      ClassLoader classLoader0 = null;
      // Undeclared exception!
      try { 
        compressingSerializer0.deSerializeFrom((AsynchronousByteChannel) null, 4, (ClassLoader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.engine.behavior.IElementSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      EncryptingSerializer encryptingSerializer0 = new EncryptingSerializer();
      encryptingSerializer0.setPreSharedKey("Ndl");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Ndl", true);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        encryptingSerializer0.deSerializeFrom((ReadableByteChannel) fileChannel0, classLoader0);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StandardSerializer standardSerializer0 = new StandardSerializer();
      String string0 = "org.apache.commons.jcs3.utils.seri[lization.Compressingerializer";
      MockFile mockFile0 = new MockFile("org.apache.commons.jcs3.utils.seri[lization.Compressingerializer", "org.apache.commons.jcs3.utils.seri[lization.Compressingerializer");
      String string1 = "1e:>g $}(4qBCpgv*";
      MockFile.createTempFile("1e:>g $}(4qBCpgv*", "Read tmeout exceeded (object)", (File) mockFile0);
      SocketChannel socketChannel0 = SocketChannel.open();
      // Undeclared exception!
      try { 
        standardSerializer0.serializeTo((Object) mockFile0, (WritableByteChannel) socketChannel0);
        fail("Expecting exception: NotYetConnectedException");
      
      } catch(NotYetConnectedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StandardSerializer standardSerializer0 = new StandardSerializer();
      String string0 = "org.apache.commons.jcs3.utils.serialization.CompressingSerializer";
      MockFile mockFile0 = new MockFile("org.apache.commons.jcs3.utils.serialization.CompressingSerializer");
      SocketChannel socketChannel0 = SocketChannel.open();
      // Undeclared exception!
      try { 
        standardSerializer0.serializeTo((Object) mockFile0, (WritableByteChannel) socketChannel0);
        fail("Expecting exception: NotYetConnectedException");
      
      } catch(NotYetConnectedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CompressingSerializer compressingSerializer0 = new CompressingSerializer();
      // Undeclared exception!
      try { 
        compressingSerializer0.serializeTo((String) null, (AsynchronousByteChannel) null, 1013);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.engine.behavior.IElementSerializer", e);
      }
  }
}
