/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 21:41:37 GMT 2022
 */

package org.apache.commons.jcs3.auxiliary.remote;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.PushbackInputStream;
import java.nio.file.OpenOption;
import java.nio.file.StandardOpenOption;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.Delayed;
import java.util.concurrent.ForkJoinTask;
import org.apache.commons.jcs3.auxiliary.remote.RemoteCache;
import org.apache.commons.jcs3.auxiliary.remote.RemoteCacheAttributes;
import org.apache.commons.jcs3.auxiliary.remote.RemoteCacheFactory;
import org.apache.commons.jcs3.auxiliary.remote.RemoteCacheMonitor;
import org.apache.commons.jcs3.auxiliary.remote.RemoteCacheNoWait;
import org.apache.commons.jcs3.auxiliary.remote.RemoteCacheNoWaitFacade;
import org.apache.commons.jcs3.auxiliary.remote.behavior.IRemoteCacheAttributes;
import org.apache.commons.jcs3.auxiliary.remote.behavior.IRemoteCacheListener;
import org.apache.commons.jcs3.engine.CacheElement;
import org.apache.commons.jcs3.engine.CacheStatus;
import org.apache.commons.jcs3.engine.ZombieCacheServiceNonLocal;
import org.apache.commons.jcs3.engine.behavior.ICacheElement;
import org.apache.commons.jcs3.engine.behavior.ICacheType;
import org.apache.commons.jcs3.engine.behavior.IElementAttributes;
import org.apache.commons.jcs3.engine.behavior.IElementSerializer;
import org.apache.commons.jcs3.engine.logging.CacheEventLoggerDebugLogger;
import org.apache.commons.jcs3.engine.logging.behavior.ICacheEventLogger;
import org.apache.commons.jcs3.engine.stats.behavior.IStats;
import org.apache.commons.jcs3.utils.serialization.CompressingSerializer;
import org.apache.commons.jcs3.utils.serialization.EncryptingSerializer;
import org.apache.commons.jcs3.utils.serialization.StandardSerializer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractRemoteCacheNoWaitFacade_ESTest extends AbstractRemoteCacheNoWaitFacade_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CacheEventLoggerDebugLogger cacheEventLoggerDebugLogger0 = new CacheEventLoggerDebugLogger();
      CompressingSerializer compressingSerializer0 = new CompressingSerializer();
      RemoteCacheFactory remoteCacheFactory0 = new RemoteCacheFactory();
      LinkedList<RemoteCacheNoWait<CacheElement<String, Object>, Object>> linkedList0 = new LinkedList<RemoteCacheNoWait<CacheElement<String, Object>, Object>>();
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      ZombieCacheServiceNonLocal<CacheElement<String, Object>, Object> zombieCacheServiceNonLocal0 = new ZombieCacheServiceNonLocal<CacheElement<String, Object>, Object>();
      RemoteCacheMonitor remoteCacheMonitor0 = new RemoteCacheMonitor();
      RemoteCache<CacheElement<String, Object>, Object> remoteCache0 = new RemoteCache<CacheElement<String, Object>, Object>(remoteCacheAttributes0, zombieCacheServiceNonLocal0, (IRemoteCacheListener<CacheElement<String, Object>, Object>) null, remoteCacheMonitor0);
      RemoteCacheNoWait<CacheElement<String, Object>, Object> remoteCacheNoWait0 = new RemoteCacheNoWait<CacheElement<String, Object>, Object>(remoteCache0);
      linkedList0.add(remoteCacheNoWait0);
      RemoteCacheNoWaitFacade<CacheElement<String, Object>, Object> remoteCacheNoWaitFacade0 = new RemoteCacheNoWaitFacade<CacheElement<String, Object>, Object>(linkedList0, remoteCacheAttributes0, cacheEventLoggerDebugLogger0, compressingSerializer0, remoteCacheFactory0);
      RemoteCacheNoWait<CacheElement<String, Object>, Object> remoteCacheNoWait1 = remoteCacheNoWaitFacade0.getPrimaryServer();
      assertSame(remoteCacheNoWait1, remoteCacheNoWait0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<RemoteCacheNoWait<Integer, Object>> linkedList0 = new LinkedList<RemoteCacheNoWait<Integer, Object>>();
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      CacheEventLoggerDebugLogger cacheEventLoggerDebugLogger0 = new CacheEventLoggerDebugLogger();
      CompressingSerializer compressingSerializer0 = new CompressingSerializer();
      RemoteCacheFactory remoteCacheFactory0 = new RemoteCacheFactory();
      remoteCacheAttributes0.setCacheName("-KQU&(AVZ(63vD0");
      RemoteCacheNoWaitFacade<Integer, Object> remoteCacheNoWaitFacade0 = new RemoteCacheNoWaitFacade<Integer, Object>(linkedList0, remoteCacheAttributes0, cacheEventLoggerDebugLogger0, compressingSerializer0, remoteCacheFactory0);
      String string0 = remoteCacheNoWaitFacade0.getCacheName();
      assertEquals("-KQU&(AVZ(63vD0", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<RemoteCacheNoWait<Integer, Integer>> linkedList0 = new LinkedList<RemoteCacheNoWait<Integer, Integer>>();
      CacheEventLoggerDebugLogger cacheEventLoggerDebugLogger0 = new CacheEventLoggerDebugLogger();
      StandardSerializer standardSerializer0 = new StandardSerializer();
      RemoteCacheFactory remoteCacheFactory0 = new RemoteCacheFactory();
      RemoteCacheNoWaitFacade<Integer, Integer> remoteCacheNoWaitFacade0 = new RemoteCacheNoWaitFacade<Integer, Integer>(linkedList0, (IRemoteCacheAttributes) null, cacheEventLoggerDebugLogger0, standardSerializer0, remoteCacheFactory0);
      IRemoteCacheAttributes iRemoteCacheAttributes0 = remoteCacheNoWaitFacade0.getAuxiliaryCacheAttributes();
      assertNull(iRemoteCacheAttributes0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CacheEventLoggerDebugLogger cacheEventLoggerDebugLogger0 = new CacheEventLoggerDebugLogger();
      CompressingSerializer compressingSerializer0 = new CompressingSerializer();
      RemoteCacheFactory remoteCacheFactory0 = new RemoteCacheFactory();
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      remoteCacheAttributes0.setZombieQueueMaxSize(0);
      LinkedList<RemoteCacheNoWait<RemoteCacheNoWaitFacade<Object, Object>, StandardOpenOption>> linkedList0 = new LinkedList<RemoteCacheNoWait<RemoteCacheNoWaitFacade<Object, Object>, StandardOpenOption>>();
      RemoteCacheNoWaitFacade<RemoteCacheNoWaitFacade<Object, Object>, StandardOpenOption> remoteCacheNoWaitFacade0 = new RemoteCacheNoWaitFacade<RemoteCacheNoWaitFacade<Object, Object>, StandardOpenOption>(linkedList0, remoteCacheAttributes0, cacheEventLoggerDebugLogger0, compressingSerializer0, remoteCacheFactory0);
      IRemoteCacheAttributes iRemoteCacheAttributes0 = remoteCacheNoWaitFacade0.getAuxiliaryCacheAttributes();
      assertEquals((-1), iRemoteCacheAttributes0.getGetTimeoutMillis());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArrayList<RemoteCacheNoWait<Runnable, InputStream>> arrayList0 = new ArrayList<RemoteCacheNoWait<Runnable, InputStream>>();
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      EncryptingSerializer encryptingSerializer0 = new EncryptingSerializer();
      RemoteCacheFactory remoteCacheFactory0 = new RemoteCacheFactory();
      remoteCacheAttributes0.setRemoveUponRemotePut(false);
      RemoteCacheNoWaitFacade<Runnable, InputStream> remoteCacheNoWaitFacade0 = new RemoteCacheNoWaitFacade<Runnable, InputStream>(arrayList0, remoteCacheAttributes0, (ICacheEventLogger) null, encryptingSerializer0, remoteCacheFactory0);
      IRemoteCacheAttributes iRemoteCacheAttributes0 = remoteCacheNoWaitFacade0.getAuxiliaryCacheAttributes();
      assertEquals(0, iRemoteCacheAttributes0.getFailoverIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArrayList<RemoteCacheNoWait<RemoteCacheNoWait<OpenOption, Runnable>, Integer>> arrayList0 = new ArrayList<RemoteCacheNoWait<RemoteCacheNoWait<OpenOption, Runnable>, Integer>>();
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      CacheEventLoggerDebugLogger cacheEventLoggerDebugLogger0 = new CacheEventLoggerDebugLogger();
      CompressingSerializer compressingSerializer0 = new CompressingSerializer();
      RemoteCacheFactory remoteCacheFactory0 = new RemoteCacheFactory();
      remoteCacheAttributes0.setLocalPort(486);
      RemoteCacheNoWaitFacade<RemoteCacheNoWait<OpenOption, Runnable>, Integer> remoteCacheNoWaitFacade0 = new RemoteCacheNoWaitFacade<RemoteCacheNoWait<OpenOption, Runnable>, Integer>(arrayList0, remoteCacheAttributes0, cacheEventLoggerDebugLogger0, compressingSerializer0, remoteCacheFactory0);
      IRemoteCacheAttributes iRemoteCacheAttributes0 = remoteCacheNoWaitFacade0.getAuxiliaryCacheAttributes();
      assertNull(iRemoteCacheAttributes0.getEventQueuePoolName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrayList<RemoteCacheNoWait<RemoteCacheNoWaitFacade<Object, CacheStatus>, String>> arrayList0 = new ArrayList<RemoteCacheNoWait<RemoteCacheNoWaitFacade<Object, CacheStatus>, String>>();
      CacheEventLoggerDebugLogger cacheEventLoggerDebugLogger0 = new CacheEventLoggerDebugLogger();
      EncryptingSerializer encryptingSerializer0 = new EncryptingSerializer();
      RemoteCacheFactory remoteCacheFactory0 = new RemoteCacheFactory();
      RemoteCacheNoWaitFacade<RemoteCacheNoWaitFacade<Object, CacheStatus>, String> remoteCacheNoWaitFacade0 = new RemoteCacheNoWaitFacade<RemoteCacheNoWaitFacade<Object, CacheStatus>, String>(arrayList0, (IRemoteCacheAttributes) null, cacheEventLoggerDebugLogger0, encryptingSerializer0, remoteCacheFactory0);
      // Undeclared exception!
      try { 
        remoteCacheNoWaitFacade0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.remote.AbstractRemoteCacheNoWaitFacade", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      LinkedList<RemoteCacheNoWait<OpenOption, Integer>> linkedList0 = new LinkedList<RemoteCacheNoWait<OpenOption, Integer>>();
      RemoteCacheFactory remoteCacheFactory0 = new RemoteCacheFactory();
      RemoteCacheNoWaitFacade<OpenOption, Integer> remoteCacheNoWaitFacade0 = new RemoteCacheNoWaitFacade<OpenOption, Integer>(linkedList0, remoteCacheAttributes0, (ICacheEventLogger) null, (IElementSerializer) null, remoteCacheFactory0);
      remoteCacheNoWaitFacade0.restorePrimaryServer((RemoteCacheNoWait<OpenOption, Integer>) null);
      // Undeclared exception!
      try { 
        remoteCacheNoWaitFacade0.getKeySet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.remote.AbstractRemoteCacheNoWaitFacade", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArrayList<RemoteCacheNoWait<Object, CacheStatus>> arrayList0 = new ArrayList<RemoteCacheNoWait<Object, CacheStatus>>();
      CacheEventLoggerDebugLogger cacheEventLoggerDebugLogger0 = new CacheEventLoggerDebugLogger();
      CompressingSerializer compressingSerializer0 = new CompressingSerializer();
      RemoteCacheNoWaitFacade<Object, CacheStatus> remoteCacheNoWaitFacade0 = new RemoteCacheNoWaitFacade<Object, CacheStatus>(arrayList0, (IRemoteCacheAttributes) null, cacheEventLoggerDebugLogger0, compressingSerializer0, (RemoteCacheFactory) null);
      // Undeclared exception!
      try { 
        remoteCacheNoWaitFacade0.getCacheName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.remote.AbstractRemoteCacheNoWaitFacade", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      LinkedList<RemoteCacheNoWait<Integer, CacheStatus>> linkedList0 = new LinkedList<RemoteCacheNoWait<Integer, CacheStatus>>();
      StandardSerializer standardSerializer0 = new StandardSerializer();
      EncryptingSerializer encryptingSerializer0 = new EncryptingSerializer(standardSerializer0);
      RemoteCacheFactory remoteCacheFactory0 = new RemoteCacheFactory();
      RemoteCacheNoWaitFacade<Integer, CacheStatus> remoteCacheNoWaitFacade0 = new RemoteCacheNoWaitFacade<Integer, CacheStatus>(linkedList0, remoteCacheAttributes0, (ICacheEventLogger) null, encryptingSerializer0, remoteCacheFactory0);
      IStats iStats0 = remoteCacheNoWaitFacade0.getStatistics();
      assertEquals("Remote Cache No Wait Facade", iStats0.getTypeName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayList<RemoteCacheNoWait<Object, Integer>> arrayList0 = new ArrayList<RemoteCacheNoWait<Object, Integer>>();
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      CacheEventLoggerDebugLogger cacheEventLoggerDebugLogger0 = new CacheEventLoggerDebugLogger();
      ZombieCacheServiceNonLocal<Object, Integer> zombieCacheServiceNonLocal0 = new ZombieCacheServiceNonLocal<Object, Integer>(1);
      RemoteCacheMonitor remoteCacheMonitor0 = new RemoteCacheMonitor();
      RemoteCache<Object, Integer> remoteCache0 = new RemoteCache<Object, Integer>(remoteCacheAttributes0, zombieCacheServiceNonLocal0, (IRemoteCacheListener<Object, Integer>) null, remoteCacheMonitor0);
      RemoteCacheNoWait<Object, Integer> remoteCacheNoWait0 = new RemoteCacheNoWait<Object, Integer>(remoteCache0);
      arrayList0.add(remoteCacheNoWait0);
      CompressingSerializer compressingSerializer0 = new CompressingSerializer();
      RemoteCacheFactory remoteCacheFactory0 = new RemoteCacheFactory();
      RemoteCacheNoWaitFacade<Object, Integer> remoteCacheNoWaitFacade0 = new RemoteCacheNoWaitFacade<Object, Integer>(arrayList0, remoteCacheAttributes0, cacheEventLoggerDebugLogger0, compressingSerializer0, remoteCacheFactory0);
      remoteCacheNoWaitFacade0.removeAll();
      assertEquals("Remote Cache No Wait Facade", remoteCacheNoWaitFacade0.getEventLoggingExtraInfo());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArrayList<RemoteCacheNoWait<Object, Integer>> arrayList0 = new ArrayList<RemoteCacheNoWait<Object, Integer>>();
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      CacheEventLoggerDebugLogger cacheEventLoggerDebugLogger0 = new CacheEventLoggerDebugLogger();
      ZombieCacheServiceNonLocal<Object, Integer> zombieCacheServiceNonLocal0 = new ZombieCacheServiceNonLocal<Object, Integer>(1);
      RemoteCacheMonitor remoteCacheMonitor0 = new RemoteCacheMonitor();
      RemoteCache<Object, Integer> remoteCache0 = new RemoteCache<Object, Integer>(remoteCacheAttributes0, zombieCacheServiceNonLocal0, (IRemoteCacheListener<Object, Integer>) null, remoteCacheMonitor0);
      RemoteCacheNoWait<Object, Integer> remoteCacheNoWait0 = new RemoteCacheNoWait<Object, Integer>(remoteCache0);
      arrayList0.add(remoteCacheNoWait0);
      CompressingSerializer compressingSerializer0 = new CompressingSerializer();
      RemoteCacheFactory remoteCacheFactory0 = new RemoteCacheFactory();
      RemoteCacheNoWaitFacade<Object, Integer> remoteCacheNoWaitFacade0 = new RemoteCacheNoWaitFacade<Object, Integer>(arrayList0, remoteCacheAttributes0, cacheEventLoggerDebugLogger0, compressingSerializer0, remoteCacheFactory0);
      boolean boolean0 = remoteCacheNoWaitFacade0.remove(remoteCacheAttributes0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayList<RemoteCacheNoWait<Object, Integer>> arrayList0 = new ArrayList<RemoteCacheNoWait<Object, Integer>>();
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      CacheEventLoggerDebugLogger cacheEventLoggerDebugLogger0 = new CacheEventLoggerDebugLogger();
      ZombieCacheServiceNonLocal<Object, Integer> zombieCacheServiceNonLocal0 = new ZombieCacheServiceNonLocal<Object, Integer>(1);
      RemoteCacheMonitor remoteCacheMonitor0 = new RemoteCacheMonitor();
      RemoteCache<Object, Integer> remoteCache0 = new RemoteCache<Object, Integer>(remoteCacheAttributes0, zombieCacheServiceNonLocal0, (IRemoteCacheListener<Object, Integer>) null, remoteCacheMonitor0);
      RemoteCacheNoWait<Object, Integer> remoteCacheNoWait0 = new RemoteCacheNoWait<Object, Integer>(remoteCache0);
      arrayList0.add(remoteCacheNoWait0);
      CompressingSerializer compressingSerializer0 = new CompressingSerializer();
      RemoteCacheFactory remoteCacheFactory0 = new RemoteCacheFactory();
      RemoteCacheNoWaitFacade<Object, Integer> remoteCacheNoWaitFacade0 = new RemoteCacheNoWaitFacade<Object, Integer>(arrayList0, remoteCacheAttributes0, cacheEventLoggerDebugLogger0, compressingSerializer0, remoteCacheFactory0);
      Set<Object> set0 = remoteCacheNoWaitFacade0.getKeySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      CacheEventLoggerDebugLogger cacheEventLoggerDebugLogger0 = new CacheEventLoggerDebugLogger();
      CompressingSerializer compressingSerializer0 = new CompressingSerializer((IElementSerializer) null);
      RemoteCacheFactory remoteCacheFactory0 = new RemoteCacheFactory();
      LinkedList<RemoteCacheNoWait<Object, String>> linkedList0 = new LinkedList<RemoteCacheNoWait<Object, String>>();
      RemoteCacheNoWaitFacade<Object, String> remoteCacheNoWaitFacade0 = new RemoteCacheNoWaitFacade<Object, String>(linkedList0, remoteCacheAttributes0, cacheEventLoggerDebugLogger0, compressingSerializer0, remoteCacheFactory0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      ZombieCacheServiceNonLocal<Object, String> zombieCacheServiceNonLocal0 = new ZombieCacheServiceNonLocal<Object, String>();
      RemoteCacheMonitor remoteCacheMonitor0 = new RemoteCacheMonitor();
      RemoteCache<Object, String> remoteCache0 = new RemoteCache<Object, String>(remoteCacheAttributes0, zombieCacheServiceNonLocal0, (IRemoteCacheListener<Object, String>) null, remoteCacheMonitor0);
      RemoteCacheNoWait<Object, String> remoteCacheNoWait0 = new RemoteCacheNoWait<Object, String>(remoteCache0);
      remoteCacheNoWaitFacade0.restorePrimaryServer(remoteCacheNoWait0);
      linkedHashSet0.add(compressingSerializer0);
      Map<Object, ICacheElement<Object, String>> map0 = remoteCacheNoWaitFacade0.getMultiple(linkedHashSet0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      CacheEventLoggerDebugLogger cacheEventLoggerDebugLogger0 = new CacheEventLoggerDebugLogger();
      CompressingSerializer compressingSerializer0 = new CompressingSerializer((IElementSerializer) null);
      RemoteCacheFactory remoteCacheFactory0 = new RemoteCacheFactory();
      LinkedList<RemoteCacheNoWait<Object, String>> linkedList0 = new LinkedList<RemoteCacheNoWait<Object, String>>();
      RemoteCacheNoWaitFacade<Object, String> remoteCacheNoWaitFacade0 = new RemoteCacheNoWaitFacade<Object, String>(linkedList0, remoteCacheAttributes0, cacheEventLoggerDebugLogger0, compressingSerializer0, remoteCacheFactory0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      linkedHashSet0.add(compressingSerializer0);
      Map<Object, ICacheElement<Object, String>> map0 = remoteCacheNoWaitFacade0.getMultiple(linkedHashSet0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      CacheEventLoggerDebugLogger cacheEventLoggerDebugLogger0 = new CacheEventLoggerDebugLogger();
      CompressingSerializer compressingSerializer0 = new CompressingSerializer((IElementSerializer) null);
      RemoteCacheFactory remoteCacheFactory0 = new RemoteCacheFactory();
      LinkedList<RemoteCacheNoWait<Object, String>> linkedList0 = new LinkedList<RemoteCacheNoWait<Object, String>>();
      RemoteCacheNoWaitFacade<Object, String> remoteCacheNoWaitFacade0 = new RemoteCacheNoWaitFacade<Object, String>(linkedList0, remoteCacheAttributes0, cacheEventLoggerDebugLogger0, compressingSerializer0, remoteCacheFactory0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Map<Object, ICacheElement<Object, String>> map0 = remoteCacheNoWaitFacade0.getMultiple(linkedHashSet0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      CacheEventLoggerDebugLogger cacheEventLoggerDebugLogger0 = new CacheEventLoggerDebugLogger();
      EncryptingSerializer encryptingSerializer0 = new EncryptingSerializer();
      RemoteCacheFactory remoteCacheFactory0 = new RemoteCacheFactory();
      ArrayList<RemoteCacheNoWait<CacheStatus, Object>> arrayList0 = new ArrayList<RemoteCacheNoWait<CacheStatus, Object>>();
      RemoteCacheNoWaitFacade<CacheStatus, Object> remoteCacheNoWaitFacade0 = new RemoteCacheNoWaitFacade<CacheStatus, Object>(arrayList0, remoteCacheAttributes0, cacheEventLoggerDebugLogger0, encryptingSerializer0, remoteCacheFactory0);
      Map<CacheStatus, ICacheElement<CacheStatus, Object>> map0 = remoteCacheNoWaitFacade0.getMultiple((Set<CacheStatus>) null);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      CacheEventLoggerDebugLogger cacheEventLoggerDebugLogger0 = new CacheEventLoggerDebugLogger();
      CompressingSerializer compressingSerializer0 = new CompressingSerializer((IElementSerializer) null);
      RemoteCacheFactory remoteCacheFactory0 = new RemoteCacheFactory();
      LinkedList<RemoteCacheNoWait<Object, String>> linkedList0 = new LinkedList<RemoteCacheNoWait<Object, String>>();
      RemoteCacheNoWaitFacade<Object, String> remoteCacheNoWaitFacade0 = new RemoteCacheNoWaitFacade<Object, String>(linkedList0, remoteCacheAttributes0, cacheEventLoggerDebugLogger0, compressingSerializer0, remoteCacheFactory0);
      ZombieCacheServiceNonLocal<Object, String> zombieCacheServiceNonLocal0 = new ZombieCacheServiceNonLocal<Object, String>();
      RemoteCacheMonitor remoteCacheMonitor0 = new RemoteCacheMonitor();
      RemoteCache<Object, String> remoteCache0 = new RemoteCache<Object, String>(remoteCacheAttributes0, zombieCacheServiceNonLocal0, (IRemoteCacheListener<Object, String>) null, remoteCacheMonitor0);
      RemoteCacheNoWait<Object, String> remoteCacheNoWait0 = new RemoteCacheNoWait<Object, String>(remoteCache0);
      remoteCacheNoWaitFacade0.restorePrimaryServer(remoteCacheNoWait0);
      Map<Object, ICacheElement<Object, String>> map0 = remoteCacheNoWaitFacade0.getMatching("");
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ArrayList<RemoteCacheNoWait<CacheStatus, Delayed>> arrayList0 = new ArrayList<RemoteCacheNoWait<CacheStatus, Delayed>>();
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      CacheEventLoggerDebugLogger cacheEventLoggerDebugLogger0 = new CacheEventLoggerDebugLogger();
      CompressingSerializer compressingSerializer0 = new CompressingSerializer((IElementSerializer) null);
      EncryptingSerializer encryptingSerializer0 = new EncryptingSerializer(compressingSerializer0);
      RemoteCacheFactory remoteCacheFactory0 = new RemoteCacheFactory();
      RemoteCacheNoWaitFacade<CacheStatus, Delayed> remoteCacheNoWaitFacade0 = new RemoteCacheNoWaitFacade<CacheStatus, Delayed>(arrayList0, remoteCacheAttributes0, cacheEventLoggerDebugLogger0, encryptingSerializer0, remoteCacheFactory0);
      Map<CacheStatus, ICacheElement<CacheStatus, Delayed>> map0 = remoteCacheNoWaitFacade0.getMatching("");
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      CacheEventLoggerDebugLogger cacheEventLoggerDebugLogger0 = new CacheEventLoggerDebugLogger();
      CompressingSerializer compressingSerializer0 = new CompressingSerializer();
      RemoteCacheFactory remoteCacheFactory0 = new RemoteCacheFactory();
      LinkedList<RemoteCacheNoWait<OpenOption, Integer>> linkedList0 = new LinkedList<RemoteCacheNoWait<OpenOption, Integer>>();
      RemoteCacheNoWaitFacade<OpenOption, Integer> remoteCacheNoWaitFacade0 = new RemoteCacheNoWaitFacade<OpenOption, Integer>(linkedList0, remoteCacheAttributes0, cacheEventLoggerDebugLogger0, compressingSerializer0, remoteCacheFactory0);
      StandardOpenOption standardOpenOption0 = StandardOpenOption.SYNC;
      ICacheElement<OpenOption, Integer> iCacheElement0 = remoteCacheNoWaitFacade0.get(standardOpenOption0);
      assertNull(iCacheElement0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ArrayList<RemoteCacheNoWait<Object, Integer>> arrayList0 = new ArrayList<RemoteCacheNoWait<Object, Integer>>();
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      CacheEventLoggerDebugLogger cacheEventLoggerDebugLogger0 = new CacheEventLoggerDebugLogger();
      ZombieCacheServiceNonLocal<Object, Integer> zombieCacheServiceNonLocal0 = new ZombieCacheServiceNonLocal<Object, Integer>();
      RemoteCacheMonitor remoteCacheMonitor0 = new RemoteCacheMonitor();
      RemoteCache<Object, Integer> remoteCache0 = new RemoteCache<Object, Integer>(remoteCacheAttributes0, zombieCacheServiceNonLocal0, (IRemoteCacheListener<Object, Integer>) null, remoteCacheMonitor0);
      RemoteCacheNoWait<Object, Integer> remoteCacheNoWait0 = new RemoteCacheNoWait<Object, Integer>(remoteCache0);
      arrayList0.add(remoteCacheNoWait0);
      CompressingSerializer compressingSerializer0 = new CompressingSerializer();
      RemoteCacheFactory remoteCacheFactory0 = new RemoteCacheFactory();
      RemoteCacheNoWaitFacade<Object, Integer> remoteCacheNoWaitFacade0 = new RemoteCacheNoWaitFacade<Object, Integer>(arrayList0, remoteCacheAttributes0, cacheEventLoggerDebugLogger0, compressingSerializer0, remoteCacheFactory0);
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 1379);
      Integer integer0 = new Integer((byte)0);
      CacheElement<Object, Integer> cacheElement0 = new CacheElement<Object, Integer>("RemoteCacheNoWaitFacade: null, rca = \n RemoteCacheAttributes \n cacheName = [null]\n remoteType = [LOCAL]\n removeUponRemotePut = [true]\n getOnly = [false]\n receive = [true]\n getTimeoutMillis = [-1]\n threadPoolName = [remote_cache_client]\n localClusterConsistency = [false]\n zombieQueueMaxSize = [1000]", pushbackInputStream0, integer0, (IElementAttributes) null);
      remoteCacheNoWaitFacade0.update(cacheElement0);
      assertEquals(ICacheType.CacheType.REMOTE_CACHE, remoteCacheNoWaitFacade0.getCacheType());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ArrayList<RemoteCacheNoWait<Object, Integer>> arrayList0 = new ArrayList<RemoteCacheNoWait<Object, Integer>>();
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      CacheEventLoggerDebugLogger cacheEventLoggerDebugLogger0 = new CacheEventLoggerDebugLogger();
      ZombieCacheServiceNonLocal<Object, Integer> zombieCacheServiceNonLocal0 = new ZombieCacheServiceNonLocal<Object, Integer>(1);
      RemoteCacheMonitor remoteCacheMonitor0 = new RemoteCacheMonitor();
      RemoteCache<Object, Integer> remoteCache0 = new RemoteCache<Object, Integer>(remoteCacheAttributes0, zombieCacheServiceNonLocal0, (IRemoteCacheListener<Object, Integer>) null, remoteCacheMonitor0);
      RemoteCacheNoWait<Object, Integer> remoteCacheNoWait0 = new RemoteCacheNoWait<Object, Integer>(remoteCache0);
      arrayList0.add(remoteCacheNoWait0);
      CompressingSerializer compressingSerializer0 = new CompressingSerializer();
      RemoteCacheFactory remoteCacheFactory0 = new RemoteCacheFactory();
      RemoteCacheNoWaitFacade<Object, Integer> remoteCacheNoWaitFacade0 = new RemoteCacheNoWaitFacade<Object, Integer>(arrayList0, remoteCacheAttributes0, cacheEventLoggerDebugLogger0, compressingSerializer0, remoteCacheFactory0);
      ICacheElement<Object, Integer> iCacheElement0 = remoteCacheNoWaitFacade0.get("GgfeN2,57G[EF;]B5B");
      assertNull(iCacheElement0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ArrayList<RemoteCacheNoWait<RemoteCacheNoWait<Integer, Object>, Integer>> arrayList0 = new ArrayList<RemoteCacheNoWait<RemoteCacheNoWait<Integer, Object>, Integer>>();
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      CacheEventLoggerDebugLogger cacheEventLoggerDebugLogger0 = new CacheEventLoggerDebugLogger();
      EncryptingSerializer encryptingSerializer0 = new EncryptingSerializer();
      RemoteCacheFactory remoteCacheFactory0 = new RemoteCacheFactory();
      RemoteCacheNoWaitFacade<RemoteCacheNoWait<Integer, Object>, Integer> remoteCacheNoWaitFacade0 = new RemoteCacheNoWaitFacade<RemoteCacheNoWait<Integer, Object>, Integer>(arrayList0, remoteCacheAttributes0, cacheEventLoggerDebugLogger0, encryptingSerializer0, remoteCacheFactory0);
      String string0 = remoteCacheNoWaitFacade0.getCacheName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      CacheEventLoggerDebugLogger cacheEventLoggerDebugLogger0 = new CacheEventLoggerDebugLogger();
      EncryptingSerializer encryptingSerializer0 = new EncryptingSerializer();
      RemoteCacheFactory remoteCacheFactory0 = new RemoteCacheFactory();
      ArrayList<RemoteCacheNoWait<RemoteCacheNoWaitFacade<Object, Object>, StandardOpenOption>> arrayList0 = new ArrayList<RemoteCacheNoWait<RemoteCacheNoWaitFacade<Object, Object>, StandardOpenOption>>();
      RemoteCacheNoWaitFacade<RemoteCacheNoWaitFacade<Object, Object>, StandardOpenOption> remoteCacheNoWaitFacade0 = new RemoteCacheNoWaitFacade<RemoteCacheNoWaitFacade<Object, Object>, StandardOpenOption>(arrayList0, remoteCacheAttributes0, cacheEventLoggerDebugLogger0, encryptingSerializer0, remoteCacheFactory0);
      remoteCacheNoWaitFacade0.dispose();
      assertEquals(ICacheType.CacheType.REMOTE_CACHE, remoteCacheNoWaitFacade0.getCacheType());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      CacheEventLoggerDebugLogger cacheEventLoggerDebugLogger0 = new CacheEventLoggerDebugLogger();
      CompressingSerializer compressingSerializer0 = new CompressingSerializer((IElementSerializer) null);
      RemoteCacheFactory remoteCacheFactory0 = new RemoteCacheFactory();
      LinkedList<RemoteCacheNoWait<OpenOption, Integer>> linkedList0 = new LinkedList<RemoteCacheNoWait<OpenOption, Integer>>();
      RemoteCacheNoWaitFacade<OpenOption, Integer> remoteCacheNoWaitFacade0 = new RemoteCacheNoWaitFacade<OpenOption, Integer>(linkedList0, remoteCacheAttributes0, cacheEventLoggerDebugLogger0, compressingSerializer0, remoteCacheFactory0);
      remoteCacheNoWaitFacade0.restorePrimaryServer((RemoteCacheNoWait<OpenOption, Integer>) null);
      StandardOpenOption standardOpenOption0 = StandardOpenOption.SYNC;
      // Undeclared exception!
      try { 
        remoteCacheNoWaitFacade0.get(standardOpenOption0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.remote.AbstractRemoteCacheNoWaitFacade", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      CacheEventLoggerDebugLogger cacheEventLoggerDebugLogger0 = new CacheEventLoggerDebugLogger();
      CompressingSerializer compressingSerializer0 = new CompressingSerializer();
      RemoteCacheFactory remoteCacheFactory0 = new RemoteCacheFactory();
      LinkedList<RemoteCacheNoWait<RemoteCacheMonitor, RemoteCacheNoWaitFacade<CacheStatus, OpenOption>>> linkedList0 = new LinkedList<RemoteCacheNoWait<RemoteCacheMonitor, RemoteCacheNoWaitFacade<CacheStatus, OpenOption>>>();
      RemoteCacheNoWaitFacade<RemoteCacheMonitor, RemoteCacheNoWaitFacade<CacheStatus, OpenOption>> remoteCacheNoWaitFacade0 = new RemoteCacheNoWaitFacade<RemoteCacheMonitor, RemoteCacheNoWaitFacade<CacheStatus, OpenOption>>(linkedList0, remoteCacheAttributes0, cacheEventLoggerDebugLogger0, compressingSerializer0, remoteCacheFactory0);
      ICacheType.CacheType iCacheType_CacheType0 = remoteCacheNoWaitFacade0.getCacheType();
      assertEquals(ICacheType.CacheType.REMOTE_CACHE, iCacheType_CacheType0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      CacheEventLoggerDebugLogger cacheEventLoggerDebugLogger0 = new CacheEventLoggerDebugLogger();
      EncryptingSerializer encryptingSerializer0 = new EncryptingSerializer();
      RemoteCacheFactory remoteCacheFactory0 = new RemoteCacheFactory();
      ArrayList<RemoteCacheNoWait<RemoteCacheNoWaitFacade<Object, Object>, StandardOpenOption>> arrayList0 = new ArrayList<RemoteCacheNoWait<RemoteCacheNoWaitFacade<Object, Object>, StandardOpenOption>>();
      RemoteCacheNoWaitFacade<RemoteCacheNoWaitFacade<Object, Object>, StandardOpenOption> remoteCacheNoWaitFacade0 = new RemoteCacheNoWaitFacade<RemoteCacheNoWaitFacade<Object, Object>, StandardOpenOption>(arrayList0, remoteCacheAttributes0, cacheEventLoggerDebugLogger0, encryptingSerializer0, remoteCacheFactory0);
      String string0 = remoteCacheNoWaitFacade0.getEventLoggingExtraInfo();
      assertEquals("Remote Cache No Wait Facade", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ArrayList<RemoteCacheNoWait<Object, Integer>> arrayList0 = new ArrayList<RemoteCacheNoWait<Object, Integer>>();
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      CacheEventLoggerDebugLogger cacheEventLoggerDebugLogger0 = new CacheEventLoggerDebugLogger();
      CompressingSerializer compressingSerializer0 = new CompressingSerializer();
      RemoteCacheFactory remoteCacheFactory0 = new RemoteCacheFactory();
      RemoteCacheNoWaitFacade<Object, Integer> remoteCacheNoWaitFacade0 = new RemoteCacheNoWaitFacade<Object, Integer>(arrayList0, remoteCacheAttributes0, cacheEventLoggerDebugLogger0, compressingSerializer0, remoteCacheFactory0);
      String string0 = remoteCacheNoWaitFacade0.toString();
      assertEquals("RemoteCacheNoWaitFacade: null, rca = \n RemoteCacheAttributes \n cacheName = [null]\n remoteType = [LOCAL]\n removeUponRemotePut = [true]\n getOnly = [false]\n receive = [true]\n getTimeoutMillis = [-1]\n threadPoolName = [remote_cache_client]\n localClusterConsistency = [false]\n zombieQueueMaxSize = [1000]", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ArrayList<RemoteCacheNoWait<RemoteCacheNoWait<Integer, Object>, Integer>> arrayList0 = new ArrayList<RemoteCacheNoWait<RemoteCacheNoWait<Integer, Object>, Integer>>();
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      CacheEventLoggerDebugLogger cacheEventLoggerDebugLogger0 = new CacheEventLoggerDebugLogger();
      EncryptingSerializer encryptingSerializer0 = new EncryptingSerializer();
      RemoteCacheFactory remoteCacheFactory0 = new RemoteCacheFactory();
      RemoteCacheNoWaitFacade<RemoteCacheNoWait<Integer, Object>, Integer> remoteCacheNoWaitFacade0 = new RemoteCacheNoWaitFacade<RemoteCacheNoWait<Integer, Object>, Integer>(arrayList0, remoteCacheAttributes0, cacheEventLoggerDebugLogger0, encryptingSerializer0, remoteCacheFactory0);
      CacheStatus cacheStatus0 = remoteCacheNoWaitFacade0.getStatus();
      assertEquals(CacheStatus.DISPOSED, cacheStatus0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<RemoteCacheNoWait<Integer, StandardOpenOption>> linkedList0 = new LinkedList<RemoteCacheNoWait<Integer, StandardOpenOption>>();
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      CacheEventLoggerDebugLogger cacheEventLoggerDebugLogger0 = new CacheEventLoggerDebugLogger();
      StandardSerializer standardSerializer0 = new StandardSerializer();
      CompressingSerializer compressingSerializer0 = new CompressingSerializer(standardSerializer0);
      RemoteCacheFactory remoteCacheFactory0 = new RemoteCacheFactory();
      RemoteCacheNoWaitFacade<Integer, StandardOpenOption> remoteCacheNoWaitFacade0 = new RemoteCacheNoWaitFacade<Integer, StandardOpenOption>(linkedList0, remoteCacheAttributes0, cacheEventLoggerDebugLogger0, compressingSerializer0, remoteCacheFactory0);
      String string0 = remoteCacheNoWaitFacade0.getStats();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CacheEventLoggerDebugLogger cacheEventLoggerDebugLogger0 = new CacheEventLoggerDebugLogger();
      CompressingSerializer compressingSerializer0 = new CompressingSerializer();
      RemoteCacheFactory remoteCacheFactory0 = new RemoteCacheFactory();
      LinkedList<RemoteCacheNoWait<CacheElement<String, Object>, Object>> linkedList0 = new LinkedList<RemoteCacheNoWait<CacheElement<String, Object>, Object>>();
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      RemoteCacheNoWaitFacade<CacheElement<String, Object>, Object> remoteCacheNoWaitFacade0 = new RemoteCacheNoWaitFacade<CacheElement<String, Object>, Object>(linkedList0, remoteCacheAttributes0, cacheEventLoggerDebugLogger0, compressingSerializer0, remoteCacheFactory0);
      // Undeclared exception!
      try { 
        remoteCacheNoWaitFacade0.getPrimaryServer();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      CacheEventLoggerDebugLogger cacheEventLoggerDebugLogger0 = new CacheEventLoggerDebugLogger();
      EncryptingSerializer encryptingSerializer0 = new EncryptingSerializer();
      RemoteCacheFactory remoteCacheFactory0 = new RemoteCacheFactory();
      ArrayList<RemoteCacheNoWait<ForkJoinTask<Delayed>, Integer>> arrayList0 = new ArrayList<RemoteCacheNoWait<ForkJoinTask<Delayed>, Integer>>();
      RemoteCacheNoWaitFacade<ForkJoinTask<Delayed>, Integer> remoteCacheNoWaitFacade0 = new RemoteCacheNoWaitFacade<ForkJoinTask<Delayed>, Integer>(arrayList0, remoteCacheAttributes0, cacheEventLoggerDebugLogger0, encryptingSerializer0, remoteCacheFactory0);
      int int0 = remoteCacheNoWaitFacade0.getSize();
      assertEquals(0, int0);
  }
}
