/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 21:55:28 GMT 2022
 */

package org.apache.commons.jcs3.engine.memory.soft;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.Delayed;
import java.util.concurrent.ForkJoinTask;
import org.apache.commons.jcs3.engine.CacheElement;
import org.apache.commons.jcs3.engine.CacheElementSerialized;
import org.apache.commons.jcs3.engine.ElementAttributes;
import org.apache.commons.jcs3.engine.behavior.ICacheElement;
import org.apache.commons.jcs3.engine.control.CompositeCache;
import org.apache.commons.jcs3.engine.control.CompositeCacheManager;
import org.apache.commons.jcs3.engine.memory.soft.SoftReferenceMemoryCache;
import org.apache.commons.jcs3.engine.memory.util.MemoryElementDescriptor;
import org.apache.commons.jcs3.engine.memory.util.SoftReferenceElementDescriptor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SoftReferenceMemoryCache_ESTest extends SoftReferenceMemoryCache_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SoftReferenceMemoryCache<CacheElementSerialized<String, Object>, String> softReferenceMemoryCache0 = new SoftReferenceMemoryCache<CacheElementSerialized<String, Object>, String>();
      // Undeclared exception!
      try { 
        softReferenceMemoryCache0.initialize((CompositeCache<CacheElementSerialized<String, Object>, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.engine.memory.AbstractMemoryCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SoftReferenceMemoryCache<Integer, MemoryElementDescriptor<String, Object>> softReferenceMemoryCache0 = new SoftReferenceMemoryCache<Integer, MemoryElementDescriptor<String, Object>>();
      // Undeclared exception!
      try { 
        softReferenceMemoryCache0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.engine.memory.soft.SoftReferenceMemoryCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SoftReferenceMemoryCache<AbstractMap.SimpleEntry<Integer, Object>, AbstractMap.SimpleEntry<Integer, String>> softReferenceMemoryCache0 = new SoftReferenceMemoryCache<AbstractMap.SimpleEntry<Integer, Object>, AbstractMap.SimpleEntry<Integer, String>>();
      // Undeclared exception!
      try { 
        softReferenceMemoryCache0.getKeySet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.engine.memory.soft.SoftReferenceMemoryCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SoftReferenceMemoryCache<CacheElement<Object, Object>, Object> softReferenceMemoryCache0 = new SoftReferenceMemoryCache<CacheElement<Object, Object>, Object>();
      CacheElement<Object, Object> cacheElement0 = new CacheElement<Object, Object>("?'7q- :pz9mWf_!Pf", "?'7q- :pz9mWf_!Pf", "?'7q- :pz9mWf_!Pf");
      ElementAttributes elementAttributes0 = new ElementAttributes();
      CacheElement<CacheElement<Object, Object>, Object> cacheElement1 = new CacheElement<CacheElement<Object, Object>, Object>("?'7q- :pz9mWf_!Pf", cacheElement0, cacheElement0, elementAttributes0);
      MemoryElementDescriptor<CacheElement<Object, Object>, Object> memoryElementDescriptor0 = new MemoryElementDescriptor<CacheElement<Object, Object>, Object>(cacheElement1);
      // Undeclared exception!
      try { 
        softReferenceMemoryCache0.lockedRemoveElement(memoryElementDescriptor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.engine.memory.soft.SoftReferenceMemoryCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SoftReferenceMemoryCache<AbstractMap.SimpleEntry<String, Integer>, MemoryElementDescriptor<String, Object>> softReferenceMemoryCache0 = new SoftReferenceMemoryCache<AbstractMap.SimpleEntry<String, Integer>, MemoryElementDescriptor<String, Object>>();
      CompositeCacheManager compositeCacheManager0 = CompositeCacheManager.getInstance("");
      CompositeCache<AbstractMap.SimpleEntry<String, Integer>, MemoryElementDescriptor<String, Object>> compositeCache0 = compositeCacheManager0.getCache("gO,)l<R");
      softReferenceMemoryCache0.initialize(compositeCache0);
      softReferenceMemoryCache0.getStatistics();
      ConcurrentMap<AbstractMap.SimpleEntry<String, Integer>, MemoryElementDescriptor<AbstractMap.SimpleEntry<String, Integer>, MemoryElementDescriptor<String, Object>>> concurrentMap0 = softReferenceMemoryCache0.createMap();
      assertTrue(concurrentMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SoftReferenceMemoryCache<MemoryElementDescriptor<Object, Object>, Integer> softReferenceMemoryCache0 = new SoftReferenceMemoryCache<MemoryElementDescriptor<Object, Object>, Integer>();
      // Undeclared exception!
      try { 
        softReferenceMemoryCache0.lockedRemoveAll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.engine.memory.soft.SoftReferenceMemoryCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SoftReferenceMemoryCache<ForkJoinTask<Integer>, Object> softReferenceMemoryCache0 = new SoftReferenceMemoryCache<ForkJoinTask<Integer>, Object>();
      SoftReferenceMemoryCache<Delayed, Delayed> softReferenceMemoryCache1 = new SoftReferenceMemoryCache<Delayed, Delayed>();
      SoftReferenceElementDescriptor<Delayed, Delayed> softReferenceElementDescriptor0 = new SoftReferenceElementDescriptor<Delayed, Delayed>((ICacheElement<Delayed, Delayed>) null);
      // Undeclared exception!
      try { 
        softReferenceMemoryCache1.lockedGetElement(softReferenceElementDescriptor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.engine.memory.soft.SoftReferenceMemoryCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SoftReferenceMemoryCache<String, Integer> softReferenceMemoryCache0 = new SoftReferenceMemoryCache<String, Integer>();
      int int0 = softReferenceMemoryCache0.freeElements((-529));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SoftReferenceMemoryCache<AbstractMap.SimpleEntry<String, Integer>, MemoryElementDescriptor<String, Object>> softReferenceMemoryCache0 = new SoftReferenceMemoryCache<AbstractMap.SimpleEntry<String, Integer>, MemoryElementDescriptor<String, Object>>();
      CompositeCacheManager.getInstance("");
      // Undeclared exception!
      try { 
        softReferenceMemoryCache0.getStatistics();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.engine.memory.soft.SoftReferenceMemoryCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      SoftReferenceMemoryCache<Integer, Object> softReferenceMemoryCache0 = new SoftReferenceMemoryCache<Integer, Object>();
      Integer integer0 = new Integer((-1576));
      Object object0 = new Object();
      CacheElement<Integer, Object> cacheElement0 = new CacheElement<Integer, Object>("$~d}", integer0, object0);
      // Undeclared exception!
      try { 
        softReferenceMemoryCache0.update(cacheElement0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.engine.memory.soft.SoftReferenceMemoryCache", e);
      }
  }
}
