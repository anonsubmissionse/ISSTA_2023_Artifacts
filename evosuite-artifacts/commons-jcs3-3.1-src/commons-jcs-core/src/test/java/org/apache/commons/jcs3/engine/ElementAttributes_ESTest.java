/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 22:00:12 GMT 2022
 */

package org.apache.commons.jcs3.engine;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.ConcurrentModificationException;
import java.util.List;
import org.apache.commons.jcs3.engine.ElementAttributes;
import org.apache.commons.jcs3.engine.behavior.IElementAttributes;
import org.apache.commons.jcs3.engine.control.event.behavior.IElementEventHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ElementAttributes_ESTest extends ElementAttributes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      assertEquals(1000L, elementAttributes0.getTimeFactorForMilliseconds());
      
      elementAttributes0.setTimeFactorForMilliseconds(0L);
      long long0 = elementAttributes0.getTimeToLiveSeconds();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      elementAttributes0.setTimeFactorForMilliseconds((-3266L));
      long long0 = elementAttributes0.getTimeToLiveSeconds();
      assertEquals((-3266L), elementAttributes0.getTimeFactorForMilliseconds());
      assertEquals(3L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      assertEquals(1000L, elementAttributes0.getTimeFactorForMilliseconds());
      
      elementAttributes0.setTimeFactorForMilliseconds(0L);
      elementAttributes0.getTimeFactorForMilliseconds();
      assertTrue(elementAttributes0.getIsRemote());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      elementAttributes0.setTimeFactorForMilliseconds((-901));
      long long0 = elementAttributes0.getTimeFactorForMilliseconds();
      assertEquals((-901L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      elementAttributes0.setSize(1578);
      int int0 = elementAttributes0.getSize();
      assertEquals(1578, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      elementAttributes0.setSize((-901));
      int int0 = elementAttributes0.getSize();
      assertEquals((-901), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      assertEquals((-1L), elementAttributes0.getTimeToLiveSeconds());
      
      elementAttributes0.setMaxLife(0L);
      elementAttributes0.getMaxLife();
      assertEquals((-1L), elementAttributes0.getIdleTime());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      elementAttributes0.setMaxLife(929L);
      long long0 = elementAttributes0.getMaxLife();
      assertEquals(929L, elementAttributes0.getTimeToLiveSeconds());
      assertEquals(929L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      ElementAttributes elementAttributes1 = new ElementAttributes(elementAttributes0);
      elementAttributes1.getLastAccessTime();
      assertTrue(elementAttributes1.getIsLateral());
      assertTrue(elementAttributes1.getIsSpool());
      assertEquals((-1L), elementAttributes1.getMaxLife());
      assertTrue(elementAttributes1.getIsEternal());
      assertEquals((-1L), elementAttributes0.getTimeToLiveSeconds());
      assertTrue(elementAttributes1.getIsRemote());
      assertEquals(1000L, elementAttributes1.getTimeFactorForMilliseconds());
      assertEquals(0, elementAttributes1.getSize());
      assertEquals(1000L, elementAttributes0.getTimeFactorForMilliseconds());
      assertEquals(1392409281320L, elementAttributes0.getLastAccessTime());
      assertEquals((-1L), elementAttributes1.getIdleTime());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      elementAttributes0.setLastAccessTime((-1043L));
      long long0 = elementAttributes0.getLastAccessTime();
      assertEquals((-1043L), long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      assertTrue(elementAttributes0.getIsSpool());
      
      elementAttributes0.setIsSpool(false);
      boolean boolean0 = elementAttributes0.getIsSpool();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      assertTrue(elementAttributes0.getIsRemote());
      
      elementAttributes0.setIsRemote(false);
      boolean boolean0 = elementAttributes0.getIsRemote();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      assertTrue(elementAttributes0.getIsLateral());
      
      elementAttributes0.setIsLateral(false);
      boolean boolean0 = elementAttributes0.getIsLateral();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      assertTrue(elementAttributes0.getIsEternal());
      
      elementAttributes0.setIsEternal(false);
      boolean boolean0 = elementAttributes0.getIsEternal();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      assertEquals((-1L), elementAttributes0.getIdleTime());
      
      elementAttributes0.setIdleTime(0L);
      elementAttributes0.getIdleTime();
      assertEquals(1392409281320L, elementAttributes0.getLastAccessTime());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      elementAttributes0.setIdleTime(281L);
      long long0 = elementAttributes0.getIdleTime();
      assertEquals(281L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      ElementAttributes elementAttributes1 = new ElementAttributes(elementAttributes0);
      elementAttributes1.getCreateTime();
      assertEquals((-1L), elementAttributes1.getMaxLife());
      assertEquals((-1L), elementAttributes0.getTimeToLiveSeconds());
      assertEquals(1000L, elementAttributes1.getTimeFactorForMilliseconds());
      assertEquals(0, elementAttributes1.getSize());
      assertTrue(elementAttributes1.getIsEternal());
      assertEquals((-1L), elementAttributes1.getIdleTime());
      assertTrue(elementAttributes1.getIsLateral());
      assertTrue(elementAttributes1.getIsSpool());
      assertEquals(1000L, elementAttributes0.getTimeFactorForMilliseconds());
      assertTrue(elementAttributes1.getIsRemote());
      assertEquals(1392409281320L, elementAttributes0.getLastAccessTime());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      ElementAttributes elementAttributes0 = new ElementAttributes();
      long long0 = elementAttributes0.getCreateTime();
      assertEquals((-1L), elementAttributes0.getTimeToLiveSeconds());
      assertEquals((-1L), elementAttributes0.getIdleTime());
      assertTrue(elementAttributes0.getIsLateral());
      assertEquals((-1L), elementAttributes0.getLastAccessTime());
      assertTrue(elementAttributes0.getIsSpool());
      assertEquals(1000L, elementAttributes0.getTimeFactorForMilliseconds());
      assertTrue(elementAttributes0.getIsRemote());
      assertTrue(elementAttributes0.getIsEternal());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      assertEquals((-1L), elementAttributes0.getTimeToLiveSeconds());
      
      elementAttributes0.setTimeFactorForMilliseconds(0L);
      elementAttributes0.clone();
      assertTrue(elementAttributes0.getIsEternal());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      elementAttributes0.setTimeFactorForMilliseconds((-3266L));
      elementAttributes0.clone();
      assertEquals((-3266L), elementAttributes0.getTimeFactorForMilliseconds());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      elementAttributes0.setSize(1578);
      elementAttributes0.clone();
      assertEquals(1578, elementAttributes0.getSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      elementAttributes0.setSize((-901));
      elementAttributes0.clone();
      assertEquals((-901), elementAttributes0.getSize());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      assertEquals((-1L), elementAttributes0.getMaxLife());
      
      elementAttributes0.setMaxLife(0L);
      elementAttributes0.clone();
      assertEquals((-1L), elementAttributes0.getIdleTime());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      elementAttributes0.setMaxLife(1392409281320L);
      elementAttributes0.clone();
      assertEquals(1392409281320L, elementAttributes0.getMaxLife());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      elementAttributes0.setLastAccessTime((-1L));
      elementAttributes0.clone();
      assertEquals((-1L), elementAttributes0.getLastAccessTime());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      assertTrue(elementAttributes0.getIsSpool());
      
      elementAttributes0.setIsSpool(false);
      elementAttributes0.clone();
      assertFalse(elementAttributes0.getIsSpool());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      assertTrue(elementAttributes0.getIsRemote());
      
      elementAttributes0.setIsRemote(false);
      elementAttributes0.clone();
      assertFalse(elementAttributes0.getIsRemote());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      assertEquals((-1L), elementAttributes0.getIdleTime());
      
      elementAttributes0.setIdleTime(0L);
      elementAttributes0.clone();
      assertEquals(1000L, elementAttributes0.getTimeFactorForMilliseconds());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      elementAttributes0.setIdleTime(2340L);
      elementAttributes0.clone();
      assertEquals(2340L, elementAttributes0.getIdleTime());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      System.setCurrentTimeMillis(0L);
      elementAttributes0.clone();
      assertEquals(1392409280L, elementAttributes0.getTimeToLiveSeconds());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      System.setCurrentTimeMillis((-1184L));
      elementAttributes0.clone();
      assertEquals(1392409281L, elementAttributes0.getTimeToLiveSeconds());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ElementAttributes elementAttributes0 = null;
      try {
        elementAttributes0 = new ElementAttributes((ElementAttributes) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.engine.ElementAttributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      long long0 = elementAttributes0.getIdleTime();
      assertEquals((-1L), elementAttributes0.getTimeToLiveSeconds());
      assertEquals(1392409281320L, elementAttributes0.getLastAccessTime());
      assertEquals(1000L, elementAttributes0.getTimeFactorForMilliseconds());
      assertEquals((-1L), long0);
      assertTrue(elementAttributes0.getIsLateral());
      assertTrue(elementAttributes0.getIsSpool());
      assertTrue(elementAttributes0.getIsEternal());
      assertTrue(elementAttributes0.getIsRemote());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      long long0 = elementAttributes0.getTimeToLiveSeconds();
      assertTrue(elementAttributes0.getIsLateral());
      assertTrue(elementAttributes0.getIsSpool());
      assertEquals((-1L), long0);
      assertEquals(1000L, elementAttributes0.getTimeFactorForMilliseconds());
      assertEquals((-1L), elementAttributes0.getIdleTime());
      assertEquals(1392409281320L, elementAttributes0.getLastAccessTime());
      assertTrue(elementAttributes0.getIsRemote());
      assertTrue(elementAttributes0.getIsEternal());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      long long0 = elementAttributes0.getTimeFactorForMilliseconds();
      assertEquals((-1L), elementAttributes0.getIdleTime());
      assertTrue(elementAttributes0.getIsLateral());
      assertTrue(elementAttributes0.getIsSpool());
      assertTrue(elementAttributes0.getIsEternal());
      assertEquals((-1L), elementAttributes0.getTimeToLiveSeconds());
      assertTrue(elementAttributes0.getIsRemote());
      assertEquals(1000L, long0);
      assertEquals(1392409281320L, elementAttributes0.getLastAccessTime());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      long long0 = elementAttributes0.getLastAccessTime();
      assertEquals((-1L), elementAttributes0.getTimeToLiveSeconds());
      assertEquals(1000L, elementAttributes0.getTimeFactorForMilliseconds());
      assertEquals((-1L), elementAttributes0.getIdleTime());
      assertTrue(elementAttributes0.getIsLateral());
      assertEquals(1392409281320L, long0);
      assertTrue(elementAttributes0.getIsSpool());
      assertTrue(elementAttributes0.getIsEternal());
      assertTrue(elementAttributes0.getIsRemote());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      long long0 = elementAttributes0.getMaxLife();
      assertEquals((-1L), elementAttributes0.getIdleTime());
      assertTrue(elementAttributes0.getIsLateral());
      assertEquals(1000L, elementAttributes0.getTimeFactorForMilliseconds());
      assertTrue(elementAttributes0.getIsSpool());
      assertEquals(1392409281320L, elementAttributes0.getLastAccessTime());
      assertTrue(elementAttributes0.getIsEternal());
      assertTrue(elementAttributes0.getIsRemote());
      assertEquals((-1L), elementAttributes0.getTimeToLiveSeconds());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      long long0 = elementAttributes0.getCreateTime();
      assertEquals((-1L), elementAttributes0.getTimeToLiveSeconds());
      assertEquals(1392409281320L, elementAttributes0.getLastAccessTime());
      assertTrue(elementAttributes0.getIsEternal());
      assertTrue(elementAttributes0.getIsRemote());
      assertEquals((-1L), elementAttributes0.getIdleTime());
      assertEquals(1000L, elementAttributes0.getTimeFactorForMilliseconds());
      assertTrue(elementAttributes0.getIsSpool());
      assertTrue(elementAttributes0.getIsLateral());
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      elementAttributes0.setCreateTime();
      assertTrue(elementAttributes0.getIsRemote());
      assertEquals((-1L), elementAttributes0.getTimeToLiveSeconds());
      assertTrue(elementAttributes0.getIsEternal());
      assertTrue(elementAttributes0.getIsSpool());
      assertTrue(elementAttributes0.getIsLateral());
      assertEquals(1000L, elementAttributes0.getTimeFactorForMilliseconds());
      assertEquals((-1L), elementAttributes0.getIdleTime());
      assertEquals(1392409281320L, elementAttributes0.getLastAccessTime());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      IElementEventHandler iElementEventHandler0 = mock(IElementEventHandler.class, new ViolatedAssumptionAnswer());
      doReturn("a").when(iElementEventHandler0).toString();
      elementAttributes0.addElementEventHandler(iElementEventHandler0);
      ElementAttributes elementAttributes1 = new ElementAttributes(elementAttributes0);
      ArrayList<IElementEventHandler> arrayList0 = elementAttributes0.getElementEventHandlers();
      elementAttributes1.addElementEventHandlers(arrayList0);
      assertEquals((-1L), elementAttributes1.getIdleTime());
      assertEquals((-1L), elementAttributes1.getMaxLife());
      assertTrue(elementAttributes1.getIsSpool());
      assertTrue(elementAttributes1.getIsLateral());
      assertEquals(0, elementAttributes1.getSize());
      assertTrue(elementAttributes1.getIsEternal());
      assertTrue(elementAttributes1.getIsRemote());
      assertEquals(1000L, elementAttributes0.getTimeFactorForMilliseconds());
      assertEquals(1392409281320L, elementAttributes0.getLastAccessTime());
      assertEquals((-1L), elementAttributes0.getTimeToLiveSeconds());
      assertEquals(1000L, elementAttributes1.getTimeFactorForMilliseconds());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      elementAttributes0.addElementEventHandlers((List<IElementEventHandler>) null);
      assertEquals((-1L), elementAttributes0.getTimeToLiveSeconds());
      assertTrue(elementAttributes0.getIsEternal());
      assertTrue(elementAttributes0.getIsRemote());
      assertTrue(elementAttributes0.getIsSpool());
      assertEquals(1000L, elementAttributes0.getTimeFactorForMilliseconds());
      assertEquals((-1L), elementAttributes0.getIdleTime());
      assertEquals(1392409281320L, elementAttributes0.getLastAccessTime());
      assertTrue(elementAttributes0.getIsLateral());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      IElementEventHandler iElementEventHandler0 = mock(IElementEventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(iElementEventHandler0).toString();
      elementAttributes0.addElementEventHandler(iElementEventHandler0);
      ArrayList<IElementEventHandler> arrayList0 = elementAttributes0.getElementEventHandlers();
      // Undeclared exception!
      try { 
        elementAttributes0.addElementEventHandlers(arrayList0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      elementAttributes0.addElementEventHandler((IElementEventHandler) null);
      elementAttributes0.addElementEventHandler((IElementEventHandler) null);
      assertEquals((-1L), elementAttributes0.getIdleTime());
      assertTrue(elementAttributes0.getIsRemote());
      assertTrue(elementAttributes0.getIsEternal());
      assertEquals((-1L), elementAttributes0.getTimeToLiveSeconds());
      assertEquals(1392409281320L, elementAttributes0.getLastAccessTime());
      assertEquals(1000L, elementAttributes0.getTimeFactorForMilliseconds());
      assertTrue(elementAttributes0.getIsSpool());
      assertTrue(elementAttributes0.getIsLateral());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      ElementAttributes elementAttributes1 = new ElementAttributes(elementAttributes0);
      IElementAttributes iElementAttributes0 = elementAttributes1.clone();
      assertEquals((-1L), iElementAttributes0.getIdleTime());
      assertTrue(iElementAttributes0.getIsSpool());
      assertTrue(iElementAttributes0.getIsEternal());
      assertEquals(1000L, iElementAttributes0.getTimeFactorForMilliseconds());
      assertTrue(iElementAttributes0.getIsLateral());
      assertEquals(1392409281320L, elementAttributes0.getLastAccessTime());
      assertEquals(1000L, elementAttributes0.getTimeFactorForMilliseconds());
      assertEquals((-1L), iElementAttributes0.getTimeToLiveSeconds());
      assertTrue(iElementAttributes0.getIsRemote());
      assertEquals(0, iElementAttributes0.getSize());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      boolean boolean0 = elementAttributes0.getIsRemote();
      assertTrue(boolean0);
      assertTrue(elementAttributes0.getIsLateral());
      assertTrue(elementAttributes0.getIsEternal());
      assertEquals((-1L), elementAttributes0.getTimeToLiveSeconds());
      assertEquals(1000L, elementAttributes0.getTimeFactorForMilliseconds());
      assertEquals((-1L), elementAttributes0.getIdleTime());
      assertEquals(1392409281320L, elementAttributes0.getLastAccessTime());
      assertTrue(elementAttributes0.getIsSpool());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      elementAttributes0.getElementEventHandlers();
      assertTrue(elementAttributes0.getIsSpool());
      assertTrue(elementAttributes0.getIsLateral());
      assertEquals((-1L), elementAttributes0.getTimeToLiveSeconds());
      assertTrue(elementAttributes0.getIsRemote());
      assertTrue(elementAttributes0.getIsEternal());
      assertEquals(1000L, elementAttributes0.getTimeFactorForMilliseconds());
      assertEquals(1392409281320L, elementAttributes0.getLastAccessTime());
      assertEquals((-1L), elementAttributes0.getIdleTime());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      boolean boolean0 = elementAttributes0.getIsSpool();
      assertEquals((-1L), elementAttributes0.getTimeToLiveSeconds());
      assertEquals((-1L), elementAttributes0.getIdleTime());
      assertTrue(elementAttributes0.getIsEternal());
      assertEquals(1000L, elementAttributes0.getTimeFactorForMilliseconds());
      assertTrue(elementAttributes0.getIsLateral());
      assertTrue(boolean0);
      assertTrue(elementAttributes0.getIsRemote());
      assertEquals(1392409281320L, elementAttributes0.getLastAccessTime());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      assertEquals(1392409281320L, elementAttributes0.getLastAccessTime());
      
      elementAttributes0.setLastAccessTimeNow();
      assertEquals(1000L, elementAttributes0.getTimeFactorForMilliseconds());
      assertEquals((-1L), elementAttributes0.getIdleTime());
      assertTrue(elementAttributes0.getIsLateral());
      assertTrue(elementAttributes0.getIsSpool());
      assertEquals((-1L), elementAttributes0.getTimeToLiveSeconds());
      assertTrue(elementAttributes0.getIsRemote());
      assertTrue(elementAttributes0.getIsEternal());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      boolean boolean0 = elementAttributes0.getIsLateral();
      assertEquals(1000L, elementAttributes0.getTimeFactorForMilliseconds());
      assertEquals((-1L), elementAttributes0.getIdleTime());
      assertEquals(1392409281320L, elementAttributes0.getLastAccessTime());
      assertTrue(elementAttributes0.getIsSpool());
      assertTrue(boolean0);
      assertTrue(elementAttributes0.getIsEternal());
      assertTrue(elementAttributes0.getIsRemote());
      assertEquals((-1L), elementAttributes0.getTimeToLiveSeconds());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      boolean boolean0 = elementAttributes0.getIsEternal();
      assertTrue(elementAttributes0.getIsRemote());
      assertTrue(elementAttributes0.getIsSpool());
      assertTrue(elementAttributes0.getIsLateral());
      assertEquals(1000L, elementAttributes0.getTimeFactorForMilliseconds());
      assertEquals((-1L), elementAttributes0.getIdleTime());
      assertEquals(1392409281320L, elementAttributes0.getLastAccessTime());
      assertEquals((-1L), elementAttributes0.getTimeToLiveSeconds());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      String string0 = elementAttributes0.toString();
      assertEquals("[ IS_LATERAL = true, IS_SPOOL = true, IS_REMOTE = true, IS_ETERNAL = true, MaxLifeSeconds = -1, IdleTime = -1, CreateTime = 1392409281320, LastAccessTime = 1392409281320, getTimeToLiveSeconds() = -1, createTime = 1392409281320 ]", string0);
      assertEquals(1000L, elementAttributes0.getTimeFactorForMilliseconds());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      assertTrue(elementAttributes0.getIsEternal());
      
      elementAttributes0.setIsEternal(false);
      elementAttributes0.clone();
      assertFalse(elementAttributes0.getIsEternal());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      assertTrue(elementAttributes0.getIsLateral());
      
      elementAttributes0.setIsLateral(false);
      elementAttributes0.clone();
      assertFalse(elementAttributes0.getIsLateral());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ElementAttributes elementAttributes0 = new ElementAttributes();
      int int0 = elementAttributes0.getSize();
      assertEquals((-1L), elementAttributes0.getIdleTime());
      assertTrue(elementAttributes0.getIsSpool());
      assertTrue(elementAttributes0.getIsRemote());
      assertTrue(elementAttributes0.getIsEternal());
      assertEquals(0, int0);
      assertEquals((-1L), elementAttributes0.getTimeToLiveSeconds());
      assertEquals(1392409281320L, elementAttributes0.getLastAccessTime());
      assertEquals(1000L, elementAttributes0.getTimeFactorForMilliseconds());
      assertTrue(elementAttributes0.getIsLateral());
  }
}
