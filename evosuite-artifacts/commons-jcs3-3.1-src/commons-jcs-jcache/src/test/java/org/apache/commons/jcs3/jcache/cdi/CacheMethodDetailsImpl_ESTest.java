/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 22:22:39 GMT 2022
 */

package org.apache.commons.jcs3.jcache.cdi;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Method;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Set;
import javax.cache.annotation.CacheKeyGenerator;
import javax.cache.annotation.CachePut;
import javax.cache.annotation.CacheRemove;
import javax.cache.annotation.CacheRemoveAll;
import javax.cache.annotation.CacheResult;
import javax.interceptor.InvocationContext;
import org.apache.commons.jcs3.jcache.cdi.CDIJCacheHelper;
import org.apache.commons.jcs3.jcache.cdi.CacheInvocationContextImpl;
import org.apache.commons.jcs3.jcache.cdi.CacheKeyGeneratorImpl;
import org.apache.commons.jcs3.jcache.cdi.CacheKeyInvocationContextImpl;
import org.apache.commons.jcs3.jcache.cdi.CacheMethodDetailsImpl;
import org.apache.commons.jcs3.jcache.cdi.CacheResolverFactoryImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CacheMethodDetailsImpl_ESTest extends CacheMethodDetailsImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InvocationContext invocationContext0 = mock(InvocationContext.class, new ViolatedAssumptionAnswer());
      doReturn((Method) null).when(invocationContext0).getMethod();
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 12);
      LinkedHashSet<Set<Annotation>> linkedHashSet0 = new LinkedHashSet<Set<Annotation>>();
      LinkedList<Set<Annotation>> linkedList0 = new LinkedList<Set<Annotation>>(linkedHashSet0);
      LinkedHashSet<Annotation> linkedHashSet1 = new LinkedHashSet<Annotation>();
      Integer[] integerArray0 = new Integer[2];
      CacheResolverFactoryImpl cacheResolverFactoryImpl0 = new CacheResolverFactoryImpl();
      CacheKeyGeneratorImpl cacheKeyGeneratorImpl0 = new CacheKeyGeneratorImpl();
      CacheResult cacheResult0 = mock(CacheResult.class, new ViolatedAssumptionAnswer());
      CachePut cachePut0 = mock(CachePut.class, new ViolatedAssumptionAnswer());
      CacheRemove cacheRemove0 = mock(CacheRemove.class, new ViolatedAssumptionAnswer());
      CacheRemoveAll cacheRemoveAll0 = mock(CacheRemoveAll.class, new ViolatedAssumptionAnswer());
      CDIJCacheHelper.MethodMeta cDIJCacheHelper_MethodMeta0 = new CDIJCacheHelper.MethodMeta(classArray0, linkedList0, linkedHashSet1, integerArray0, integerArray0[1], integerArray0, "j}8>&&4=uJf5TxwmE ", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, cacheResult0, "j}8>&&4=uJf5TxwmE ", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, true, cachePut0, "yTY1<K_e", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, true, cacheRemove0, ")", cacheResolverFactoryImpl0, true, cacheRemoveAll0);
      CacheMethodDetailsImpl<Annotation> cacheMethodDetailsImpl0 = new CacheMethodDetailsImpl<Annotation>(invocationContext0, (Annotation) null, "j}8>&&4=uJf5TxwmE ", cDIJCacheHelper_MethodMeta0);
      InvocationContext invocationContext1 = cacheMethodDetailsImpl0.delegate;
      CacheKeyInvocationContextImpl<Annotation> cacheKeyInvocationContextImpl0 = new CacheKeyInvocationContextImpl<Annotation>(invocationContext1, (Annotation) null, "/wyaXBx", cDIJCacheHelper_MethodMeta0);
      Method method0 = cacheKeyInvocationContextImpl0.getMethod();
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 1);
      LinkedList<Set<Annotation>> linkedList0 = new LinkedList<Set<Annotation>>();
      Integer[] integerArray0 = new Integer[5];
      CacheResolverFactoryImpl cacheResolverFactoryImpl0 = new CacheResolverFactoryImpl();
      CacheKeyGeneratorImpl cacheKeyGeneratorImpl0 = new CacheKeyGeneratorImpl();
      CacheResult cacheResult0 = mock(CacheResult.class, new ViolatedAssumptionAnswer());
      CachePut cachePut0 = mock(CachePut.class, new ViolatedAssumptionAnswer());
      CacheRemove cacheRemove0 = mock(CacheRemove.class, new ViolatedAssumptionAnswer());
      CacheRemoveAll cacheRemoveAll0 = mock(CacheRemoveAll.class, new ViolatedAssumptionAnswer());
      CDIJCacheHelper.MethodMeta cDIJCacheHelper_MethodMeta0 = new CDIJCacheHelper.MethodMeta(classArray0, linkedList0, (Set<Annotation>) null, integerArray0, integerArray0[0], integerArray0, "", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, cacheResult0, (String) null, cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, false, cachePut0, (String) null, cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, false, cacheRemove0, "", cacheResolverFactoryImpl0, false, cacheRemoveAll0);
      CacheKeyInvocationContextImpl<Annotation> cacheKeyInvocationContextImpl0 = new CacheKeyInvocationContextImpl<Annotation>((InvocationContext) null, (Annotation) null, (String) null, cDIJCacheHelper_MethodMeta0);
      String string0 = cacheKeyInvocationContextImpl0.getCacheName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InvocationContext invocationContext0 = mock(InvocationContext.class, new ViolatedAssumptionAnswer());
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 5);
      LinkedList<Set<Annotation>> linkedList0 = new LinkedList<Set<Annotation>>();
      LinkedHashSet<Annotation> linkedHashSet0 = new LinkedHashSet<Annotation>();
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer(0);
      CacheResolverFactoryImpl cacheResolverFactoryImpl0 = new CacheResolverFactoryImpl();
      CacheResult cacheResult0 = mock(CacheResult.class, new ViolatedAssumptionAnswer());
      CacheKeyGeneratorImpl cacheKeyGeneratorImpl0 = new CacheKeyGeneratorImpl();
      CachePut cachePut0 = mock(CachePut.class, new ViolatedAssumptionAnswer());
      CacheRemove cacheRemove0 = mock(CacheRemove.class, new ViolatedAssumptionAnswer());
      CacheRemoveAll cacheRemoveAll0 = mock(CacheRemoveAll.class, new ViolatedAssumptionAnswer());
      CDIJCacheHelper.MethodMeta cDIJCacheHelper_MethodMeta0 = new CDIJCacheHelper.MethodMeta(classArray0, linkedList0, linkedHashSet0, integerArray0, integer0, integerArray0, "'?N", cacheResolverFactoryImpl0, (CacheKeyGenerator) null, cacheResult0, "ZrJ|tG", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, false, cachePut0, "", cacheResolverFactoryImpl0, (CacheKeyGenerator) null, false, cacheRemove0, "", cacheResolverFactoryImpl0, false, cacheRemoveAll0);
      CacheMethodDetailsImpl<Annotation> cacheMethodDetailsImpl0 = new CacheMethodDetailsImpl<Annotation>(invocationContext0, (Annotation) null, "", cDIJCacheHelper_MethodMeta0);
      InvocationContext invocationContext1 = cacheMethodDetailsImpl0.delegate;
      CacheKeyInvocationContextImpl<Annotation> cacheKeyInvocationContextImpl0 = new CacheKeyInvocationContextImpl<Annotation>(invocationContext1, (Annotation) null, "", cDIJCacheHelper_MethodMeta0);
      String string0 = cacheKeyInvocationContextImpl0.getCacheName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Annotation annotation0 = mock(Annotation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(annotation0).toString();
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 0);
      LinkedList<Set<Annotation>> linkedList0 = new LinkedList<Set<Annotation>>();
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(2186);
      CacheResolverFactoryImpl cacheResolverFactoryImpl0 = new CacheResolverFactoryImpl();
      CacheResult cacheResult0 = mock(CacheResult.class, new ViolatedAssumptionAnswer());
      CachePut cachePut0 = mock(CachePut.class, new ViolatedAssumptionAnswer());
      CacheRemove cacheRemove0 = mock(CacheRemove.class, new ViolatedAssumptionAnswer());
      CacheRemoveAll cacheRemoveAll0 = mock(CacheRemoveAll.class, new ViolatedAssumptionAnswer());
      CDIJCacheHelper.MethodMeta cDIJCacheHelper_MethodMeta0 = new CDIJCacheHelper.MethodMeta(classArray0, linkedList0, (Set<Annotation>) null, integerArray0, integer0, integerArray0, "n,{M+pJ<", cacheResolverFactoryImpl0, (CacheKeyGenerator) null, cacheResult0, "n,{M+pJ<", cacheResolverFactoryImpl0, (CacheKeyGenerator) null, true, cachePut0, "", cacheResolverFactoryImpl0, (CacheKeyGenerator) null, true, cacheRemove0, "org.apache.commons.jcs3.jcache.cdi.CDIJCacheHelper", cacheResolverFactoryImpl0, true, cacheRemoveAll0);
      CacheInvocationContextImpl<Annotation> cacheInvocationContextImpl0 = new CacheInvocationContextImpl<Annotation>((InvocationContext) null, annotation0, "", cDIJCacheHelper_MethodMeta0);
      Annotation annotation1 = cacheInvocationContextImpl0.getCacheAnnotation();
      CacheKeyInvocationContextImpl<Annotation> cacheKeyInvocationContextImpl0 = new CacheKeyInvocationContextImpl<Annotation>((InvocationContext) null, annotation1, "cM(gop_d", cDIJCacheHelper_MethodMeta0);
      Annotation annotation2 = cacheKeyInvocationContextImpl0.getCacheAnnotation();
      assertSame(annotation2, annotation1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 5);
      LinkedList<Set<Annotation>> linkedList0 = new LinkedList<Set<Annotation>>();
      LinkedHashSet<Annotation> linkedHashSet0 = new LinkedHashSet<Annotation>();
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-1));
      CacheResolverFactoryImpl cacheResolverFactoryImpl0 = new CacheResolverFactoryImpl();
      CacheKeyGeneratorImpl cacheKeyGeneratorImpl0 = new CacheKeyGeneratorImpl();
      CacheResult cacheResult0 = mock(CacheResult.class, new ViolatedAssumptionAnswer());
      CachePut cachePut0 = mock(CachePut.class, new ViolatedAssumptionAnswer());
      CacheRemove cacheRemove0 = mock(CacheRemove.class, new ViolatedAssumptionAnswer());
      CDIJCacheHelper.MethodMeta cDIJCacheHelper_MethodMeta0 = new CDIJCacheHelper.MethodMeta(classArray0, linkedList0, linkedHashSet0, integerArray0, integer0, integerArray0, "(KU::t-D_+.!xcs", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, cacheResult0, "(", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, false, cachePut0, "(", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, false, cacheRemove0, "", cacheResolverFactoryImpl0, true, (CacheRemoveAll) null);
      CacheKeyInvocationContextImpl<Annotation> cacheKeyInvocationContextImpl0 = new CacheKeyInvocationContextImpl<Annotation>((InvocationContext) null, (Annotation) null, "(KU::t-D_+.!xcs", cDIJCacheHelper_MethodMeta0);
      Set<Annotation> set0 = cacheKeyInvocationContextImpl0.getAnnotations();
      assertFalse(linkedList0.contains(set0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InvocationContext invocationContext0 = mock(InvocationContext.class, new ViolatedAssumptionAnswer());
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 12);
      LinkedHashSet<Set<Annotation>> linkedHashSet0 = new LinkedHashSet<Set<Annotation>>();
      LinkedList<Set<Annotation>> linkedList0 = new LinkedList<Set<Annotation>>(linkedHashSet0);
      LinkedHashSet<Annotation> linkedHashSet1 = new LinkedHashSet<Annotation>();
      Integer[] integerArray0 = new Integer[2];
      linkedHashSet1.add((Annotation) null);
      CacheResolverFactoryImpl cacheResolverFactoryImpl0 = new CacheResolverFactoryImpl();
      CacheKeyGeneratorImpl cacheKeyGeneratorImpl0 = new CacheKeyGeneratorImpl();
      CacheResult cacheResult0 = mock(CacheResult.class, new ViolatedAssumptionAnswer());
      CachePut cachePut0 = mock(CachePut.class, new ViolatedAssumptionAnswer());
      CacheRemove cacheRemove0 = mock(CacheRemove.class, new ViolatedAssumptionAnswer());
      CacheRemoveAll cacheRemoveAll0 = mock(CacheRemoveAll.class, new ViolatedAssumptionAnswer());
      CDIJCacheHelper.MethodMeta cDIJCacheHelper_MethodMeta0 = new CDIJCacheHelper.MethodMeta(classArray0, linkedList0, linkedHashSet1, integerArray0, integerArray0[1], integerArray0, "j}8>&&4=uJf5TxwmE ", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, cacheResult0, "j}8>&&4=uJf5TxwmE ", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, true, cachePut0, "yTY1<K_e", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, true, cacheRemove0, ")", cacheResolverFactoryImpl0, true, cacheRemoveAll0);
      CacheMethodDetailsImpl<Annotation> cacheMethodDetailsImpl0 = new CacheMethodDetailsImpl<Annotation>(invocationContext0, (Annotation) null, "j}8>&&4=uJf5TxwmE ", cDIJCacheHelper_MethodMeta0);
      InvocationContext invocationContext1 = cacheMethodDetailsImpl0.delegate;
      CacheKeyInvocationContextImpl<Annotation> cacheKeyInvocationContextImpl0 = new CacheKeyInvocationContextImpl<Annotation>(invocationContext1, (Annotation) null, "/wyaXBx", cDIJCacheHelper_MethodMeta0);
      Set<Annotation> set0 = cacheKeyInvocationContextImpl0.getAnnotations();
      assertFalse(linkedList0.contains(set0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CacheMethodDetailsImpl<Annotation> cacheMethodDetailsImpl0 = null;
      try {
        cacheMethodDetailsImpl0 = new CacheMethodDetailsImpl<Annotation>((InvocationContext) null, (Annotation) null, "rh|f", (CDIJCacheHelper.MethodMeta) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.jcache.cdi.CacheMethodDetailsImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 5);
      LinkedList<Set<Annotation>> linkedList0 = new LinkedList<Set<Annotation>>();
      Integer[] integerArray0 = new Integer[1];
      int int0 = 0;
      CacheResolverFactoryImpl cacheResolverFactoryImpl0 = new CacheResolverFactoryImpl();
      CacheKeyGeneratorImpl cacheKeyGeneratorImpl0 = new CacheKeyGeneratorImpl();
      CachePut cachePut0 = mock(CachePut.class, new ViolatedAssumptionAnswer());
      CacheRemove cacheRemove0 = mock(CacheRemove.class, new ViolatedAssumptionAnswer());
      CacheRemoveAll cacheRemoveAll0 = mock(CacheRemoveAll.class, new ViolatedAssumptionAnswer());
      CDIJCacheHelper.MethodMeta cDIJCacheHelper_MethodMeta0 = new CDIJCacheHelper.MethodMeta(classArray0, linkedList0, (Set<Annotation>) null, integerArray0, (Integer) int0, integerArray0, "4(Q7#.tB4", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, (CacheResult) null, "4(Q7#.tB4", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, true, cachePut0, "q?UfU", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, true, cacheRemove0, "", cacheResolverFactoryImpl0, false, cacheRemoveAll0);
      CacheKeyInvocationContextImpl<Annotation> cacheKeyInvocationContextImpl0 = new CacheKeyInvocationContextImpl<Annotation>((InvocationContext) null, (Annotation) null, "", cDIJCacheHelper_MethodMeta0);
      Set<Annotation> set0 = cacheKeyInvocationContextImpl0.getAnnotations();
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CDIJCacheHelper.MethodMeta cDIJCacheHelper_MethodMeta0 = mock(CDIJCacheHelper.MethodMeta.class, new ViolatedAssumptionAnswer());
      doReturn((Set) null, (Set) null).when(cDIJCacheHelper_MethodMeta0).getAnnotations();
      CacheMethodDetailsImpl<Annotation> cacheMethodDetailsImpl0 = new CacheMethodDetailsImpl<Annotation>((InvocationContext) null, (Annotation) null, " le-YZ", cDIJCacheHelper_MethodMeta0);
      CDIJCacheHelper.MethodMeta cDIJCacheHelper_MethodMeta1 = cacheMethodDetailsImpl0.meta;
      CacheKeyInvocationContextImpl<Annotation> cacheKeyInvocationContextImpl0 = new CacheKeyInvocationContextImpl<Annotation>((InvocationContext) null, (Annotation) null, " le-YZ", cDIJCacheHelper_MethodMeta1);
      // Undeclared exception!
      try { 
        cacheKeyInvocationContextImpl0.getMethod();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.jcache.cdi.CacheMethodDetailsImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 5);
      LinkedList<Set<Annotation>> linkedList0 = new LinkedList<Set<Annotation>>();
      Integer[] integerArray0 = new Integer[1];
      int int0 = 0;
      CacheResolverFactoryImpl cacheResolverFactoryImpl0 = new CacheResolverFactoryImpl();
      CacheKeyGeneratorImpl cacheKeyGeneratorImpl0 = new CacheKeyGeneratorImpl();
      CachePut cachePut0 = mock(CachePut.class, new ViolatedAssumptionAnswer());
      CacheRemove cacheRemove0 = mock(CacheRemove.class, new ViolatedAssumptionAnswer());
      CacheRemoveAll cacheRemoveAll0 = mock(CacheRemoveAll.class, new ViolatedAssumptionAnswer());
      CDIJCacheHelper.MethodMeta cDIJCacheHelper_MethodMeta0 = new CDIJCacheHelper.MethodMeta(classArray0, linkedList0, (Set<Annotation>) null, integerArray0, (Integer) int0, integerArray0, "4(Q7#.tB4", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, (CacheResult) null, "4(Q7#.tB4", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, true, cachePut0, "q?UfU", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, true, cacheRemove0, "", cacheResolverFactoryImpl0, false, cacheRemoveAll0);
      CacheMethodDetailsImpl<Annotation> cacheMethodDetailsImpl0 = new CacheMethodDetailsImpl<Annotation>((InvocationContext) null, (Annotation) null, "4(Q7#.tB4", cDIJCacheHelper_MethodMeta0);
      Annotation annotation0 = cacheMethodDetailsImpl0.getCacheAnnotation();
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 0);
      LinkedList<Set<Annotation>> linkedList0 = new LinkedList<Set<Annotation>>();
      LinkedHashSet<Annotation> linkedHashSet0 = new LinkedHashSet<Annotation>();
      Integer[] integerArray0 = new Integer[4];
      int int0 = 1;
      CacheResolverFactoryImpl cacheResolverFactoryImpl0 = new CacheResolverFactoryImpl();
      CacheKeyGeneratorImpl cacheKeyGeneratorImpl0 = new CacheKeyGeneratorImpl();
      CacheResult cacheResult0 = mock(CacheResult.class, new ViolatedAssumptionAnswer());
      CachePut cachePut0 = mock(CachePut.class, new ViolatedAssumptionAnswer());
      CacheRemove cacheRemove0 = mock(CacheRemove.class, new ViolatedAssumptionAnswer());
      CacheRemoveAll cacheRemoveAll0 = mock(CacheRemoveAll.class, new ViolatedAssumptionAnswer());
      CDIJCacheHelper.MethodMeta cDIJCacheHelper_MethodMeta0 = new CDIJCacheHelper.MethodMeta(classArray0, linkedList0, linkedHashSet0, integerArray0, (Integer) int0, integerArray0, "org.apache.commons.jcs3.jcache.cdi.CacheMethodDetailsImpl", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, cacheResult0, "org.apache.commons.jcs3.jcache.cdi.CacheMethodDetailsImpl", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, true, cachePut0, (String) null, cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, true, cacheRemove0, "org.apache.commons.jcs3.jcache.cdi.CacheMethodDetailsImpl", cacheResolverFactoryImpl0, true, cacheRemoveAll0);
      CacheKeyInvocationContextImpl<Annotation> cacheKeyInvocationContextImpl0 = new CacheKeyInvocationContextImpl<Annotation>((InvocationContext) null, (Annotation) null, "org.apache.commons.jcs3.jcache.cdi.CacheMethodDetailsImpl", cDIJCacheHelper_MethodMeta0);
      String string0 = cacheKeyInvocationContextImpl0.getCacheName();
      assertEquals("org.apache.commons.jcs3.jcache.cdi.CacheMethodDetailsImpl", string0);
  }
}
