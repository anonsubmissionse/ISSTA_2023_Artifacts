/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 22:29:17 GMT 2022
 */

package org.apache.commons.jcs3.jcache.cdi;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Method;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import javax.cache.annotation.CacheKeyGenerator;
import javax.cache.annotation.CachePut;
import javax.cache.annotation.CacheRemove;
import javax.cache.annotation.CacheRemoveAll;
import javax.cache.annotation.CacheResolverFactory;
import javax.cache.annotation.CacheResult;
import javax.enterprise.inject.spi.AnnotatedType;
import javax.enterprise.inject.spi.BeanManager;
import javax.enterprise.inject.spi.InjectionTarget;
import javax.interceptor.InvocationContext;
import org.apache.commons.jcs3.jcache.cdi.CDIJCacheHelper;
import org.apache.commons.jcs3.jcache.cdi.CacheKeyGeneratorImpl;
import org.apache.commons.jcs3.jcache.cdi.CacheMethodDetailsImpl;
import org.apache.commons.jcs3.jcache.cdi.CacheResolverFactoryImpl;
import org.apache.commons.jcs3.jcache.cdi.MakeJCacheCDIInterceptorFriendly;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CDIJCacheHelper_ESTest extends CDIJCacheHelper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<CDIJCacheHelper.MethodMeta>[] classArray0 = (Class<CDIJCacheHelper.MethodMeta>[]) Array.newInstance(Class.class, 0);
      LinkedList<Set<Annotation>> linkedList0 = new LinkedList<Set<Annotation>>();
      AnnotatedType<CDIJCacheHelper> annotatedType0 = (AnnotatedType<CDIJCacheHelper>) mock(AnnotatedType.class, new ViolatedAssumptionAnswer());
      MakeJCacheCDIInterceptorFriendly.HelperBean makeJCacheCDIInterceptorFriendly_HelperBean0 = new MakeJCacheCDIInterceptorFriendly.HelperBean(annotatedType0, (InjectionTarget<CDIJCacheHelper>) null, "");
      Set<Annotation> set0 = makeJCacheCDIInterceptorFriendly_HelperBean0.getQualifiers();
      Integer[] integerArray0 = new Integer[1];
      CacheResolverFactoryImpl cacheResolverFactoryImpl0 = new CacheResolverFactoryImpl();
      CacheKeyGeneratorImpl cacheKeyGeneratorImpl0 = new CacheKeyGeneratorImpl();
      CachePut cachePut0 = mock(CachePut.class, new ViolatedAssumptionAnswer());
      CacheRemove cacheRemove0 = mock(CacheRemove.class, new ViolatedAssumptionAnswer());
      CacheRemoveAll cacheRemoveAll0 = mock(CacheRemoveAll.class, new ViolatedAssumptionAnswer());
      CDIJCacheHelper.MethodMeta cDIJCacheHelper_MethodMeta0 = new CDIJCacheHelper.MethodMeta(classArray0, linkedList0, set0, integerArray0, (Integer) null, integerArray0, "7A05uZkFj=z=Xa", cacheResolverFactoryImpl0, (CacheKeyGenerator) null, (CacheResult) null, "", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, false, cachePut0, "", cacheResolverFactoryImpl0, (CacheKeyGenerator) null, true, cacheRemove0, ":xeM|kR+&ha]'m`7nN", cacheResolverFactoryImpl0, true, cacheRemoveAll0);
      assertEquals("7A05uZkFj=z=Xa", cDIJCacheHelper_MethodMeta0.getCacheResultCacheName());
      assertFalse(cDIJCacheHelper_MethodMeta0.isCachePutAfter());
      assertEquals(":xeM|kR+&ha]'m`7nN", cDIJCacheHelper_MethodMeta0.getCacheRemoveAllCacheName());
      assertTrue(cDIJCacheHelper_MethodMeta0.isCacheRemoveAllAfter());
      assertEquals("", cDIJCacheHelper_MethodMeta0.getCachePutCacheName());
      assertTrue(cDIJCacheHelper_MethodMeta0.isCacheRemoveAfter());
      assertEquals("", cDIJCacheHelper_MethodMeta0.getCacheRemoveCacheName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 1);
      LinkedList<Set<Annotation>> linkedList0 = new LinkedList<Set<Annotation>>();
      LinkedHashSet<Annotation> linkedHashSet0 = new LinkedHashSet<Annotation>();
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer(1072);
      CacheResolverFactoryImpl cacheResolverFactoryImpl0 = new CacheResolverFactoryImpl();
      CacheKeyGeneratorImpl cacheKeyGeneratorImpl0 = new CacheKeyGeneratorImpl();
      CacheResult cacheResult0 = mock(CacheResult.class, new ViolatedAssumptionAnswer());
      CacheRemove cacheRemove0 = mock(CacheRemove.class, new ViolatedAssumptionAnswer());
      CacheRemoveAll cacheRemoveAll0 = mock(CacheRemoveAll.class, new ViolatedAssumptionAnswer());
      CDIJCacheHelper.MethodMeta cDIJCacheHelper_MethodMeta0 = new CDIJCacheHelper.MethodMeta(classArray0, linkedList0, linkedHashSet0, integerArray0, integer0, integerArray0, "", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, cacheResult0, "lib", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, true, (CachePut) null, "", (CacheResolverFactory) null, cacheKeyGeneratorImpl0, false, cacheRemove0, "", (CacheResolverFactory) null, true, cacheRemoveAll0);
      assertEquals("", cDIJCacheHelper_MethodMeta0.getCacheRemoveCacheName());
      assertFalse(cDIJCacheHelper_MethodMeta0.isCacheRemoveAfter());
      assertEquals("lib", cDIJCacheHelper_MethodMeta0.getCachePutCacheName());
      assertEquals("", cDIJCacheHelper_MethodMeta0.getCacheResultCacheName());
      assertTrue(cDIJCacheHelper_MethodMeta0.isCachePutAfter());
      assertTrue(cDIJCacheHelper_MethodMeta0.isCacheRemoveAllAfter());
      assertEquals("", cDIJCacheHelper_MethodMeta0.getCacheRemoveAllCacheName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AnnotatedType<CDIJCacheHelper> annotatedType0 = (AnnotatedType<CDIJCacheHelper>) mock(AnnotatedType.class, new ViolatedAssumptionAnswer());
      InjectionTarget<CDIJCacheHelper> injectionTarget0 = (InjectionTarget<CDIJCacheHelper>) mock(InjectionTarget.class, new ViolatedAssumptionAnswer());
      MakeJCacheCDIInterceptorFriendly.HelperBean makeJCacheCDIInterceptorFriendly_HelperBean0 = new MakeJCacheCDIInterceptorFriendly.HelperBean(annotatedType0, injectionTarget0, "bZ");
      Set<Annotation> set0 = makeJCacheCDIInterceptorFriendly_HelperBean0.getQualifiers();
      Integer[] integerArray0 = new Integer[2];
      CacheResolverFactoryImpl cacheResolverFactoryImpl0 = new CacheResolverFactoryImpl();
      CacheKeyGeneratorImpl cacheKeyGeneratorImpl0 = new CacheKeyGeneratorImpl();
      CacheResult cacheResult0 = mock(CacheResult.class, new ViolatedAssumptionAnswer());
      CachePut cachePut0 = mock(CachePut.class, new ViolatedAssumptionAnswer());
      CacheRemove cacheRemove0 = mock(CacheRemove.class, new ViolatedAssumptionAnswer());
      CacheRemoveAll cacheRemoveAll0 = mock(CacheRemoveAll.class, new ViolatedAssumptionAnswer());
      CDIJCacheHelper.MethodMeta cDIJCacheHelper_MethodMeta0 = new CDIJCacheHelper.MethodMeta((Class<?>[]) null, (List<Set<Annotation>>) null, set0, integerArray0, integerArray0[1], integerArray0, "bZ", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, cacheResult0, "bZ", cacheResolverFactoryImpl0, (CacheKeyGenerator) null, true, cachePut0, "bZ", cacheResolverFactoryImpl0, (CacheKeyGenerator) null, true, cacheRemove0, "bZ", cacheResolverFactoryImpl0, true, cacheRemoveAll0);
      assertTrue(cDIJCacheHelper_MethodMeta0.isCachePutAfter());
      assertTrue(cDIJCacheHelper_MethodMeta0.isCacheRemoveAfter());
      assertTrue(cDIJCacheHelper_MethodMeta0.isCacheRemoveAllAfter());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<CDIJCacheHelper>[] classArray0 = (Class<CDIJCacheHelper>[]) Array.newInstance(Class.class, 8);
      LinkedList<Set<Annotation>> linkedList0 = new LinkedList<Set<Annotation>>();
      Integer integer0 = new Integer(0);
      CacheResolverFactoryImpl cacheResolverFactoryImpl0 = new CacheResolverFactoryImpl();
      CacheKeyGeneratorImpl cacheKeyGeneratorImpl0 = new CacheKeyGeneratorImpl();
      CacheResult cacheResult0 = mock(CacheResult.class, new ViolatedAssumptionAnswer());
      CachePut cachePut0 = mock(CachePut.class, new ViolatedAssumptionAnswer());
      CacheRemove cacheRemove0 = mock(CacheRemove.class, new ViolatedAssumptionAnswer());
      CacheRemoveAll cacheRemoveAll0 = mock(CacheRemoveAll.class, new ViolatedAssumptionAnswer());
      CDIJCacheHelper.MethodMeta cDIJCacheHelper_MethodMeta0 = new CDIJCacheHelper.MethodMeta(classArray0, linkedList0, (Set<Annotation>) null, (Integer[]) null, integer0, (Integer[]) null, "fxtlz`/`/", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, cacheResult0, "HX", (CacheResolverFactory) null, cacheKeyGeneratorImpl0, true, cachePut0, "", (CacheResolverFactory) null, cacheKeyGeneratorImpl0, false, cacheRemove0, "B7lGn%J gB@0^Q", cacheResolverFactoryImpl0, true, cacheRemoveAll0);
      assertEquals("fxtlz`/`/", cDIJCacheHelper_MethodMeta0.getCacheResultCacheName());
      assertFalse(cDIJCacheHelper_MethodMeta0.isCacheRemoveAfter());
      assertTrue(cDIJCacheHelper_MethodMeta0.isCachePutAfter());
      assertEquals("", cDIJCacheHelper_MethodMeta0.getCacheRemoveCacheName());
      assertEquals("HX", cDIJCacheHelper_MethodMeta0.getCachePutCacheName());
      assertTrue(cDIJCacheHelper_MethodMeta0.isCacheRemoveAllAfter());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Set<Annotation>> linkedList0 = new LinkedList<Set<Annotation>>();
      AnnotatedType<CDIJCacheHelper> annotatedType0 = (AnnotatedType<CDIJCacheHelper>) mock(AnnotatedType.class, new ViolatedAssumptionAnswer());
      InjectionTarget<CDIJCacheHelper> injectionTarget0 = (InjectionTarget<CDIJCacheHelper>) mock(InjectionTarget.class, new ViolatedAssumptionAnswer());
      MakeJCacheCDIInterceptorFriendly.HelperBean makeJCacheCDIInterceptorFriendly_HelperBean0 = new MakeJCacheCDIInterceptorFriendly.HelperBean(annotatedType0, injectionTarget0, "0}FIyGoWA5\"9b9h\"V");
      Set<Annotation> set0 = makeJCacheCDIInterceptorFriendly_HelperBean0.getQualifiers();
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = new Integer[1];
      CacheResolverFactoryImpl cacheResolverFactoryImpl0 = new CacheResolverFactoryImpl();
      CacheKeyGeneratorImpl cacheKeyGeneratorImpl0 = new CacheKeyGeneratorImpl();
      CacheResult cacheResult0 = mock(CacheResult.class, new ViolatedAssumptionAnswer());
      CachePut cachePut0 = mock(CachePut.class, new ViolatedAssumptionAnswer());
      CacheRemove cacheRemove0 = mock(CacheRemove.class, new ViolatedAssumptionAnswer());
      CacheRemoveAll cacheRemoveAll0 = mock(CacheRemoveAll.class, new ViolatedAssumptionAnswer());
      CDIJCacheHelper.MethodMeta cDIJCacheHelper_MethodMeta0 = new CDIJCacheHelper.MethodMeta((Class<?>[]) null, linkedList0, set0, integerArray0, (Integer) null, integerArray1, "a6*n\"Dq:^NKb", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, cacheResult0, "0}FIyGoWA5\"9b9h\"V", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, true, cachePut0, "a6*n\"Dq:^NKb", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, true, cacheRemove0, "org.apache.commons.jcs3.jcache.cdi.CDIJCacheHelper$MethodMeta", cacheResolverFactoryImpl0, true, cacheRemoveAll0);
      assertEquals("0}FIyGoWA5\"9b9h\"V", cDIJCacheHelper_MethodMeta0.getCachePutCacheName());
      assertTrue(cDIJCacheHelper_MethodMeta0.isCacheRemoveAfter());
      assertEquals("org.apache.commons.jcs3.jcache.cdi.CDIJCacheHelper$MethodMeta", cDIJCacheHelper_MethodMeta0.getCacheRemoveAllCacheName());
      assertEquals("a6*n\"Dq:^NKb", cDIJCacheHelper_MethodMeta0.getCacheResultCacheName());
      assertEquals("a6*n\"Dq:^NKb", cDIJCacheHelper_MethodMeta0.getCacheRemoveCacheName());
      assertTrue(cDIJCacheHelper_MethodMeta0.isCachePutAfter());
      assertTrue(cDIJCacheHelper_MethodMeta0.isCacheRemoveAllAfter());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 3);
      LinkedHashSet<Annotation> linkedHashSet0 = new LinkedHashSet<Annotation>();
      Integer[] integerArray0 = new Integer[6];
      CacheResolverFactoryImpl cacheResolverFactoryImpl0 = new CacheResolverFactoryImpl();
      CacheKeyGeneratorImpl cacheKeyGeneratorImpl0 = new CacheKeyGeneratorImpl();
      CacheResult cacheResult0 = mock(CacheResult.class, new ViolatedAssumptionAnswer());
      CachePut cachePut0 = mock(CachePut.class, new ViolatedAssumptionAnswer());
      CacheRemove cacheRemove0 = mock(CacheRemove.class, new ViolatedAssumptionAnswer());
      CacheRemoveAll cacheRemoveAll0 = mock(CacheRemoveAll.class, new ViolatedAssumptionAnswer());
      CDIJCacheHelper.MethodMeta cDIJCacheHelper_MethodMeta0 = new CDIJCacheHelper.MethodMeta(classArray0, (List<Set<Annotation>>) null, linkedHashSet0, integerArray0, integerArray0[2], integerArray0, (String) null, cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, cacheResult0, "J&8TLc%rqn2+dL>f?*", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, false, cachePut0, ")*", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, false, cacheRemove0, (String) null, cacheResolverFactoryImpl0, false, cacheRemoveAll0);
      cDIJCacheHelper_MethodMeta0.getParameterTypes();
      assertFalse(cDIJCacheHelper_MethodMeta0.isCacheRemoveAfter());
      assertFalse(cDIJCacheHelper_MethodMeta0.isCacheRemoveAllAfter());
      assertEquals("J&8TLc%rqn2+dL>f?*", cDIJCacheHelper_MethodMeta0.getCachePutCacheName());
      assertFalse(cDIJCacheHelper_MethodMeta0.isCachePutAfter());
      assertEquals(")*", cDIJCacheHelper_MethodMeta0.getCacheRemoveCacheName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<CacheResolverFactoryImpl>[] classArray0 = (Class<CacheResolverFactoryImpl>[]) Array.newInstance(Class.class, 1);
      LinkedList<Set<Annotation>> linkedList0 = new LinkedList<Set<Annotation>>();
      LinkedHashSet<Annotation> linkedHashSet0 = new LinkedHashSet<Annotation>();
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-997));
      CacheResolverFactoryImpl cacheResolverFactoryImpl0 = new CacheResolverFactoryImpl();
      CacheResult cacheResult0 = mock(CacheResult.class, new ViolatedAssumptionAnswer());
      CachePut cachePut0 = mock(CachePut.class, new ViolatedAssumptionAnswer());
      CacheRemove cacheRemove0 = mock(CacheRemove.class, new ViolatedAssumptionAnswer());
      CacheRemoveAll cacheRemoveAll0 = mock(CacheRemoveAll.class, new ViolatedAssumptionAnswer());
      CDIJCacheHelper.MethodMeta cDIJCacheHelper_MethodMeta0 = new CDIJCacheHelper.MethodMeta(classArray0, linkedList0, linkedHashSet0, integerArray0, integer0, integerArray0, "p[&~M", cacheResolverFactoryImpl0, (CacheKeyGenerator) null, cacheResult0, "p[&~M", cacheResolverFactoryImpl0, (CacheKeyGenerator) null, false, cachePut0, "1E", cacheResolverFactoryImpl0, (CacheKeyGenerator) null, false, cacheRemove0, "!d%b;74C3=@L?h", cacheResolverFactoryImpl0, false, cacheRemoveAll0);
      cDIJCacheHelper_MethodMeta0.getParameterAnnotations();
      assertEquals("p[&~M", cDIJCacheHelper_MethodMeta0.getCachePutCacheName());
      assertFalse(cDIJCacheHelper_MethodMeta0.isCacheRemoveAllAfter());
      assertEquals("p[&~M", cDIJCacheHelper_MethodMeta0.getCacheResultCacheName());
      assertEquals("!d%b;74C3=@L?h", cDIJCacheHelper_MethodMeta0.getCacheRemoveAllCacheName());
      assertFalse(cDIJCacheHelper_MethodMeta0.isCachePutAfter());
      assertFalse(cDIJCacheHelper_MethodMeta0.isCacheRemoveAfter());
      assertEquals("1E", cDIJCacheHelper_MethodMeta0.getCacheRemoveCacheName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<CDIJCacheHelper>[] classArray0 = (Class<CDIJCacheHelper>[]) Array.newInstance(Class.class, 4);
      LinkedList<Set<Annotation>> linkedList0 = new LinkedList<Set<Annotation>>();
      Integer[] integerArray0 = new Integer[5];
      CacheResolverFactoryImpl cacheResolverFactoryImpl0 = new CacheResolverFactoryImpl();
      CacheKeyGeneratorImpl cacheKeyGeneratorImpl0 = new CacheKeyGeneratorImpl();
      CacheResult cacheResult0 = mock(CacheResult.class, new ViolatedAssumptionAnswer());
      CachePut cachePut0 = mock(CachePut.class, new ViolatedAssumptionAnswer());
      CacheRemove cacheRemove0 = mock(CacheRemove.class, new ViolatedAssumptionAnswer());
      CacheRemoveAll cacheRemoveAll0 = mock(CacheRemoveAll.class, new ViolatedAssumptionAnswer());
      CDIJCacheHelper.MethodMeta cDIJCacheHelper_MethodMeta0 = new CDIJCacheHelper.MethodMeta(classArray0, linkedList0, (Set<Annotation>) null, integerArray0, integerArray0[0], integerArray0, "org.apache.commons.jcs3.jcache.cdi.CacheKeyInvocationContextImpl", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, cacheResult0, (String) null, cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, true, cachePut0, "duI wJ6tM`of", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, true, cacheRemove0, "duI wJ6tM`of", cacheResolverFactoryImpl0, true, cacheRemoveAll0);
      cDIJCacheHelper_MethodMeta0.getKeysIndices();
      assertTrue(cDIJCacheHelper_MethodMeta0.isCacheRemoveAfter());
      assertEquals("org.apache.commons.jcs3.jcache.cdi.CacheKeyInvocationContextImpl", cDIJCacheHelper_MethodMeta0.getCacheResultCacheName());
      assertEquals("duI wJ6tM`of", cDIJCacheHelper_MethodMeta0.getCacheRemoveCacheName());
      assertTrue(cDIJCacheHelper_MethodMeta0.isCacheRemoveAllAfter());
      assertEquals("duI wJ6tM`of", cDIJCacheHelper_MethodMeta0.getCacheRemoveAllCacheName());
      assertTrue(cDIJCacheHelper_MethodMeta0.isCachePutAfter());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<CacheResolverFactoryImpl>[] classArray0 = (Class<CacheResolverFactoryImpl>[]) Array.newInstance(Class.class, 1);
      LinkedList<Set<Annotation>> linkedList0 = new LinkedList<Set<Annotation>>();
      LinkedHashSet<Annotation> linkedHashSet0 = new LinkedHashSet<Annotation>();
      Integer[] integerArray0 = new Integer[1];
      CacheResolverFactoryImpl cacheResolverFactoryImpl0 = new CacheResolverFactoryImpl();
      CacheResult cacheResult0 = mock(CacheResult.class, new ViolatedAssumptionAnswer());
      CachePut cachePut0 = mock(CachePut.class, new ViolatedAssumptionAnswer());
      CacheRemove cacheRemove0 = mock(CacheRemove.class, new ViolatedAssumptionAnswer());
      CacheRemoveAll cacheRemoveAll0 = mock(CacheRemoveAll.class, new ViolatedAssumptionAnswer());
      CDIJCacheHelper.MethodMeta cDIJCacheHelper_MethodMeta0 = new CDIJCacheHelper.MethodMeta(classArray0, linkedList0, linkedHashSet0, integerArray0, integerArray0[0], integerArray0, "R{3:M#7_cYPUE\"d.nq'", cacheResolverFactoryImpl0, (CacheKeyGenerator) null, cacheResult0, "R{3:M#7_cYPUE\"d.nq'", cacheResolverFactoryImpl0, (CacheKeyGenerator) null, false, cachePut0, (String) null, cacheResolverFactoryImpl0, (CacheKeyGenerator) null, true, cacheRemove0, (String) null, cacheResolverFactoryImpl0, false, cacheRemoveAll0);
      cDIJCacheHelper_MethodMeta0.getAnnotations();
      assertFalse(cDIJCacheHelper_MethodMeta0.isCachePutAfter());
      assertFalse(cDIJCacheHelper_MethodMeta0.isCacheRemoveAllAfter());
      assertTrue(cDIJCacheHelper_MethodMeta0.isCacheRemoveAfter());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CDIJCacheHelper cDIJCacheHelper0 = new CDIJCacheHelper();
      BeanManager beanManager0 = mock(BeanManager.class, new ViolatedAssumptionAnswer());
      Injector.inject(cDIJCacheHelper0, (Class<?>) CDIJCacheHelper.class, "beanManager", (Object) beanManager0);
      Injector.validateBean(cDIJCacheHelper0, (Class<?>) CDIJCacheHelper.class);
      Class<Integer> class0 = Integer.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 4);
      Class<Object> class1 = Object.class;
      classArray0[0] = class1;
      Class<CDIJCacheHelper.MethodMeta>[] classArray1 = (Class<CDIJCacheHelper.MethodMeta>[]) Array.newInstance(Class.class, 3);
      Class<CDIJCacheHelper.MethodMeta> class2 = CDIJCacheHelper.MethodMeta.class;
      classArray1[0] = class2;
      classArray1[1] = class2;
      classArray1[2] = class2;
      boolean boolean0 = cDIJCacheHelper0.isIncluded(class0, classArray0, classArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CDIJCacheHelper cDIJCacheHelper0 = new CDIJCacheHelper();
      BeanManager beanManager0 = mock(BeanManager.class, new ViolatedAssumptionAnswer());
      Injector.inject(cDIJCacheHelper0, (Class<?>) CDIJCacheHelper.class, "beanManager", (Object) beanManager0);
      Injector.validateBean(cDIJCacheHelper0, (Class<?>) CDIJCacheHelper.class);
      Class<String> class0 = String.class;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 21);
      classArray0[0] = class0;
      boolean boolean0 = cDIJCacheHelper0.isIncluded(class0, classArray0, classArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CDIJCacheHelper cDIJCacheHelper0 = new CDIJCacheHelper();
      BeanManager beanManager0 = mock(BeanManager.class, new ViolatedAssumptionAnswer());
      Injector.inject(cDIJCacheHelper0, (Class<?>) CDIJCacheHelper.class, "beanManager", (Object) beanManager0);
      Injector.validateBean(cDIJCacheHelper0, (Class<?>) CDIJCacheHelper.class);
      Class<CacheResolverFactoryImpl> class0 = CacheResolverFactoryImpl.class;
      Class<CDIJCacheHelper>[] classArray0 = (Class<CDIJCacheHelper>[]) Array.newInstance(Class.class, 1);
      Class<CDIJCacheHelper> class1 = CDIJCacheHelper.class;
      classArray0[0] = class1;
      boolean boolean0 = cDIJCacheHelper0.isIncluded(class0, classArray0, classArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CDIJCacheHelper cDIJCacheHelper0 = new CDIJCacheHelper();
      BeanManager beanManager0 = mock(BeanManager.class, new ViolatedAssumptionAnswer());
      Injector.inject(cDIJCacheHelper0, (Class<?>) CDIJCacheHelper.class, "beanManager", (Object) beanManager0);
      Injector.validateBean(cDIJCacheHelper0, (Class<?>) CDIJCacheHelper.class);
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 21);
      Class<CDIJCacheHelper>[] classArray1 = (Class<CDIJCacheHelper>[]) Array.newInstance(Class.class, 0);
      boolean boolean0 = cDIJCacheHelper0.isIncluded(classArray0[3], classArray1, classArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CDIJCacheHelper cDIJCacheHelper0 = new CDIJCacheHelper();
      BeanManager beanManager0 = mock(BeanManager.class, new ViolatedAssumptionAnswer());
      Injector.inject(cDIJCacheHelper0, (Class<?>) CDIJCacheHelper.class, "beanManager", (Object) beanManager0);
      Injector.validateBean(cDIJCacheHelper0, (Class<?>) CDIJCacheHelper.class);
      Class<CacheResolverFactoryImpl> class0 = CacheResolverFactoryImpl.class;
      Class<CDIJCacheHelper>[] classArray0 = (Class<CDIJCacheHelper>[]) Array.newInstance(Class.class, 0);
      boolean boolean0 = cDIJCacheHelper0.isIncluded(class0, classArray0, classArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CDIJCacheHelper cDIJCacheHelper0 = new CDIJCacheHelper();
      BeanManager beanManager0 = mock(BeanManager.class, new ViolatedAssumptionAnswer());
      Injector.inject(cDIJCacheHelper0, (Class<?>) CDIJCacheHelper.class, "beanManager", (Object) beanManager0);
      Injector.validateBean(cDIJCacheHelper0, (Class<?>) CDIJCacheHelper.class);
      Class<CacheResolverFactoryImpl> class0 = CacheResolverFactoryImpl.class;
      Class<CDIJCacheHelper>[] classArray0 = (Class<CDIJCacheHelper>[]) Array.newInstance(Class.class, 1);
      // Undeclared exception!
      try { 
        cDIJCacheHelper0.isIncluded(class0, classArray0, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.jcache.cdi.CDIJCacheHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<CacheResolverFactoryImpl> class0 = CacheResolverFactoryImpl.class;
      CDIJCacheHelper cDIJCacheHelper0 = new CDIJCacheHelper();
      BeanManager beanManager0 = mock(BeanManager.class, new ViolatedAssumptionAnswer());
      Injector.inject(cDIJCacheHelper0, (Class<?>) CDIJCacheHelper.class, "beanManager", (Object) beanManager0);
      Injector.validateBean(cDIJCacheHelper0, (Class<?>) CDIJCacheHelper.class);
      InvocationContext invocationContext0 = mock(InvocationContext.class, new ViolatedAssumptionAnswer());
      doReturn((Method) null).when(invocationContext0).getMethod();
      doReturn(class0).when(invocationContext0).getTarget();
      // Undeclared exception!
      try { 
        cDIJCacheHelper0.findMeta(invocationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.jcache.cdi.CDIJCacheHelper$MethodKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CDIJCacheHelper cDIJCacheHelper0 = new CDIJCacheHelper();
      BeanManager beanManager0 = mock(BeanManager.class, new ViolatedAssumptionAnswer());
      Injector.inject(cDIJCacheHelper0, (Class<?>) CDIJCacheHelper.class, "beanManager", (Object) beanManager0);
      Injector.validateBean(cDIJCacheHelper0, (Class<?>) CDIJCacheHelper.class);
      InvocationContext invocationContext0 = mock(InvocationContext.class, new ViolatedAssumptionAnswer());
      doReturn((Method) null).when(invocationContext0).getMethod();
      doReturn((Object) null).when(invocationContext0).getTarget();
      // Undeclared exception!
      try { 
        cDIJCacheHelper0.findMeta(invocationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.jcache.cdi.CDIJCacheHelper$MethodKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 21);
      LinkedList<Set<Annotation>> linkedList0 = new LinkedList<Set<Annotation>>();
      AnnotatedType<CDIJCacheHelper> annotatedType0 = (AnnotatedType<CDIJCacheHelper>) mock(AnnotatedType.class, new ViolatedAssumptionAnswer());
      InjectionTarget<CDIJCacheHelper> injectionTarget0 = (InjectionTarget<CDIJCacheHelper>) mock(InjectionTarget.class, new ViolatedAssumptionAnswer());
      MakeJCacheCDIInterceptorFriendly.HelperBean makeJCacheCDIInterceptorFriendly_HelperBean0 = new MakeJCacheCDIInterceptorFriendly.HelperBean(annotatedType0, injectionTarget0, "");
      Set<Annotation> set0 = makeJCacheCDIInterceptorFriendly_HelperBean0.getQualifiers();
      Integer[] integerArray0 = new Integer[1];
      CacheResolverFactoryImpl cacheResolverFactoryImpl0 = new CacheResolverFactoryImpl();
      CacheKeyGeneratorImpl cacheKeyGeneratorImpl0 = new CacheKeyGeneratorImpl();
      CacheResult cacheResult0 = mock(CacheResult.class, new ViolatedAssumptionAnswer());
      CachePut cachePut0 = mock(CachePut.class, new ViolatedAssumptionAnswer());
      CacheRemove cacheRemove0 = mock(CacheRemove.class, new ViolatedAssumptionAnswer());
      doReturn("").when(cacheRemove0).toString();
      CDIJCacheHelper.MethodMeta cDIJCacheHelper_MethodMeta0 = new CDIJCacheHelper.MethodMeta(classArray0, linkedList0, set0, integerArray0, (Integer) null, integerArray0, "", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, cacheResult0, "", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, false, cachePut0, "", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, false, cacheRemove0, "", cacheResolverFactoryImpl0, false, (CacheRemoveAll) null);
      cDIJCacheHelper_MethodMeta0.getCacheRemove();
      assertFalse(cDIJCacheHelper_MethodMeta0.isCacheRemoveAfter());
      assertFalse(cDIJCacheHelper_MethodMeta0.isCachePutAfter());
      assertFalse(cDIJCacheHelper_MethodMeta0.isCacheRemoveAllAfter());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<CacheResolverFactoryImpl>[] classArray0 = (Class<CacheResolverFactoryImpl>[]) Array.newInstance(Class.class, 8);
      LinkedList<Set<Annotation>> linkedList0 = new LinkedList<Set<Annotation>>();
      LinkedHashSet<Annotation> linkedHashSet0 = new LinkedHashSet<Annotation>();
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-997));
      CacheResolverFactoryImpl cacheResolverFactoryImpl0 = new CacheResolverFactoryImpl();
      CacheResult cacheResult0 = mock(CacheResult.class, new ViolatedAssumptionAnswer());
      CachePut cachePut0 = mock(CachePut.class, new ViolatedAssumptionAnswer());
      CacheRemove cacheRemove0 = mock(CacheRemove.class, new ViolatedAssumptionAnswer());
      CacheRemoveAll cacheRemoveAll0 = mock(CacheRemoveAll.class, new ViolatedAssumptionAnswer());
      CDIJCacheHelper.MethodMeta cDIJCacheHelper_MethodMeta0 = new CDIJCacheHelper.MethodMeta(classArray0, linkedList0, linkedHashSet0, integerArray0, integer0, integerArray0, "p[&~M", cacheResolverFactoryImpl0, (CacheKeyGenerator) null, cacheResult0, "p[&~M", cacheResolverFactoryImpl0, (CacheKeyGenerator) null, false, cachePut0, "p[&~M", cacheResolverFactoryImpl0, (CacheKeyGenerator) null, false, cacheRemove0, "p[&~M", cacheResolverFactoryImpl0, false, cacheRemoveAll0);
      boolean boolean0 = cDIJCacheHelper_MethodMeta0.isCacheRemoveAfter();
      assertFalse(cDIJCacheHelper_MethodMeta0.isCachePutAfter());
      assertFalse(cDIJCacheHelper_MethodMeta0.isCacheRemoveAllAfter());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<CDIJCacheHelper>[] classArray0 = (Class<CDIJCacheHelper>[]) Array.newInstance(Class.class, 1);
      LinkedList<Set<Annotation>> linkedList0 = new LinkedList<Set<Annotation>>();
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(0);
      CacheResolverFactoryImpl cacheResolverFactoryImpl0 = new CacheResolverFactoryImpl();
      CacheKeyGeneratorImpl cacheKeyGeneratorImpl0 = new CacheKeyGeneratorImpl();
      CacheResult cacheResult0 = mock(CacheResult.class, new ViolatedAssumptionAnswer());
      CachePut cachePut0 = mock(CachePut.class, new ViolatedAssumptionAnswer());
      CacheRemove cacheRemove0 = mock(CacheRemove.class, new ViolatedAssumptionAnswer());
      CacheRemoveAll cacheRemoveAll0 = mock(CacheRemoveAll.class, new ViolatedAssumptionAnswer());
      CDIJCacheHelper.MethodMeta cDIJCacheHelper_MethodMeta0 = new CDIJCacheHelper.MethodMeta(classArray0, linkedList0, (Set<Annotation>) null, integerArray0, integer0, integerArray0, "", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, cacheResult0, "", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, false, cachePut0, "", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, false, cacheRemove0, "", cacheResolverFactoryImpl0, false, cacheRemoveAll0);
      cDIJCacheHelper_MethodMeta0.getCacheRemoveAllCacheName();
      assertFalse(cDIJCacheHelper_MethodMeta0.isCacheRemoveAfter());
      assertFalse(cDIJCacheHelper_MethodMeta0.isCacheRemoveAllAfter());
      assertFalse(cDIJCacheHelper_MethodMeta0.isCachePutAfter());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedHashSet<Annotation> linkedHashSet0 = new LinkedHashSet<Annotation>();
      Integer[] integerArray0 = new Integer[2];
      CacheResolverFactoryImpl cacheResolverFactoryImpl0 = new CacheResolverFactoryImpl();
      CacheKeyGeneratorImpl cacheKeyGeneratorImpl0 = new CacheKeyGeneratorImpl();
      CacheResult cacheResult0 = mock(CacheResult.class, new ViolatedAssumptionAnswer());
      doReturn("W2*").when(cacheResult0).toString();
      CachePut cachePut0 = mock(CachePut.class, new ViolatedAssumptionAnswer());
      CacheRemove cacheRemove0 = mock(CacheRemove.class, new ViolatedAssumptionAnswer());
      CacheRemoveAll cacheRemoveAll0 = mock(CacheRemoveAll.class, new ViolatedAssumptionAnswer());
      CDIJCacheHelper.MethodMeta cDIJCacheHelper_MethodMeta0 = new CDIJCacheHelper.MethodMeta((Class<?>[]) null, (List<Set<Annotation>>) null, linkedHashSet0, integerArray0, integerArray0[0], integerArray0, "W2*", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, cacheResult0, "W2*", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, true, cachePut0, "W2*", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, true, cacheRemove0, "W2*", cacheResolverFactoryImpl0, true, cacheRemoveAll0);
      cDIJCacheHelper_MethodMeta0.getCacheResult();
      assertTrue(cDIJCacheHelper_MethodMeta0.isCacheRemoveAllAfter());
      assertTrue(cDIJCacheHelper_MethodMeta0.isCachePutAfter());
      assertTrue(cDIJCacheHelper_MethodMeta0.isCacheRemoveAfter());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 1);
      LinkedList<Set<Annotation>> linkedList0 = new LinkedList<Set<Annotation>>();
      LinkedHashSet<Annotation> linkedHashSet0 = new LinkedHashSet<Annotation>();
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer(1062);
      CacheResolverFactoryImpl cacheResolverFactoryImpl0 = new CacheResolverFactoryImpl();
      CacheKeyGeneratorImpl cacheKeyGeneratorImpl0 = new CacheKeyGeneratorImpl();
      CacheResult cacheResult0 = mock(CacheResult.class, new ViolatedAssumptionAnswer());
      CacheRemove cacheRemove0 = mock(CacheRemove.class, new ViolatedAssumptionAnswer());
      CacheRemoveAll cacheRemoveAll0 = mock(CacheRemoveAll.class, new ViolatedAssumptionAnswer());
      CDIJCacheHelper.MethodMeta cDIJCacheHelper_MethodMeta0 = new CDIJCacheHelper.MethodMeta(classArray0, linkedList0, linkedHashSet0, integerArray0, integer0, integerArray0, "=", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, cacheResult0, "lib", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, true, (CachePut) null, "=", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, false, cacheRemove0, "=", cacheResolverFactoryImpl0, false, cacheRemoveAll0);
      boolean boolean0 = cDIJCacheHelper_MethodMeta0.isCacheRemoveAllAfter();
      assertTrue(cDIJCacheHelper_MethodMeta0.isCachePutAfter());
      assertFalse(boolean0);
      assertFalse(cDIJCacheHelper_MethodMeta0.isCacheRemoveAfter());
      assertEquals("=", cDIJCacheHelper_MethodMeta0.getCacheRemoveCacheName());
      assertEquals("=", cDIJCacheHelper_MethodMeta0.getCacheRemoveAllCacheName());
      assertEquals("lib", cDIJCacheHelper_MethodMeta0.getCachePutCacheName());
      assertEquals("=", cDIJCacheHelper_MethodMeta0.getCacheResultCacheName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<CDIJCacheHelper>[] classArray0 = (Class<CDIJCacheHelper>[]) Array.newInstance(Class.class, 10);
      LinkedList<Set<Annotation>> linkedList0 = new LinkedList<Set<Annotation>>();
      Integer[] integerArray0 = new Integer[7];
      CacheResolverFactoryImpl cacheResolverFactoryImpl0 = new CacheResolverFactoryImpl();
      CacheKeyGeneratorImpl cacheKeyGeneratorImpl0 = new CacheKeyGeneratorImpl();
      CacheResult cacheResult0 = mock(CacheResult.class, new ViolatedAssumptionAnswer());
      CachePut cachePut0 = mock(CachePut.class, new ViolatedAssumptionAnswer());
      CacheRemove cacheRemove0 = mock(CacheRemove.class, new ViolatedAssumptionAnswer());
      CacheRemoveAll cacheRemoveAll0 = mock(CacheRemoveAll.class, new ViolatedAssumptionAnswer());
      CDIJCacheHelper.MethodMeta cDIJCacheHelper_MethodMeta0 = new CDIJCacheHelper.MethodMeta(classArray0, linkedList0, (Set<Annotation>) null, integerArray0, integerArray0[4], integerArray0, (String) null, cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, cacheResult0, (String) null, cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, false, cachePut0, (String) null, cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, false, cacheRemove0, (String) null, cacheResolverFactoryImpl0, false, cacheRemoveAll0);
      cDIJCacheHelper_MethodMeta0.getValueIndex();
      assertFalse(cDIJCacheHelper_MethodMeta0.isCachePutAfter());
      assertFalse(cDIJCacheHelper_MethodMeta0.isCacheRemoveAllAfter());
      assertFalse(cDIJCacheHelper_MethodMeta0.isCacheRemoveAfter());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<CDIJCacheHelper>[] classArray0 = (Class<CDIJCacheHelper>[]) Array.newInstance(Class.class, 1);
      LinkedList<Set<Annotation>> linkedList0 = new LinkedList<Set<Annotation>>();
      LinkedHashSet<Annotation> linkedHashSet0 = new LinkedHashSet<Annotation>();
      Integer integer0 = new Integer(8);
      CacheResolverFactoryImpl cacheResolverFactoryImpl0 = new CacheResolverFactoryImpl();
      CacheKeyGeneratorImpl cacheKeyGeneratorImpl0 = new CacheKeyGeneratorImpl();
      CacheResult cacheResult0 = mock(CacheResult.class, new ViolatedAssumptionAnswer());
      CachePut cachePut0 = mock(CachePut.class, new ViolatedAssumptionAnswer());
      CacheRemoveAll cacheRemoveAll0 = mock(CacheRemoveAll.class, new ViolatedAssumptionAnswer());
      CDIJCacheHelper.MethodMeta cDIJCacheHelper_MethodMeta0 = new CDIJCacheHelper.MethodMeta(classArray0, linkedList0, linkedHashSet0, (Integer[]) null, integer0, (Integer[]) null, "KGJ,3?^>^J$u(:KD+", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, cacheResult0, "KGJ,3?^>^J$u(:KD+", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, false, cachePut0, "KGJ,3?^>^J$u(:KD+", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, false, (CacheRemove) null, "KGJ,3?^>^J$u(:KD+", cacheResolverFactoryImpl0, false, cacheRemoveAll0);
      cDIJCacheHelper_MethodMeta0.getCachePutKeyGenerator();
      assertFalse(cDIJCacheHelper_MethodMeta0.isCachePutAfter());
      assertFalse(cDIJCacheHelper_MethodMeta0.isCacheRemoveAllAfter());
      assertFalse(cDIJCacheHelper_MethodMeta0.isCacheRemoveAfter());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<CacheResolverFactoryImpl>[] classArray0 = (Class<CacheResolverFactoryImpl>[]) Array.newInstance(Class.class, 8);
      LinkedList<Set<Annotation>> linkedList0 = new LinkedList<Set<Annotation>>();
      LinkedHashSet<Annotation> linkedHashSet0 = new LinkedHashSet<Annotation>();
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-997));
      CacheResolverFactoryImpl cacheResolverFactoryImpl0 = new CacheResolverFactoryImpl();
      CacheResult cacheResult0 = mock(CacheResult.class, new ViolatedAssumptionAnswer());
      CachePut cachePut0 = mock(CachePut.class, new ViolatedAssumptionAnswer());
      CacheRemove cacheRemove0 = mock(CacheRemove.class, new ViolatedAssumptionAnswer());
      CacheRemoveAll cacheRemoveAll0 = mock(CacheRemoveAll.class, new ViolatedAssumptionAnswer());
      CDIJCacheHelper.MethodMeta cDIJCacheHelper_MethodMeta0 = new CDIJCacheHelper.MethodMeta(classArray0, linkedList0, linkedHashSet0, integerArray0, integer0, integerArray0, "p[&~M", cacheResolverFactoryImpl0, (CacheKeyGenerator) null, cacheResult0, "p[&~M", cacheResolverFactoryImpl0, (CacheKeyGenerator) null, false, cachePut0, "p[&~M", cacheResolverFactoryImpl0, (CacheKeyGenerator) null, false, cacheRemove0, "p[&~M", cacheResolverFactoryImpl0, false, cacheRemoveAll0);
      cDIJCacheHelper_MethodMeta0.getCacheResultCacheName();
      assertFalse(cDIJCacheHelper_MethodMeta0.isCacheRemoveAfter());
      assertFalse(cDIJCacheHelper_MethodMeta0.isCacheRemoveAllAfter());
      assertFalse(cDIJCacheHelper_MethodMeta0.isCachePutAfter());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<CDIJCacheHelper.MethodMeta>[] classArray0 = (Class<CDIJCacheHelper.MethodMeta>[]) Array.newInstance(Class.class, 4);
      LinkedList<Set<Annotation>> linkedList0 = new LinkedList<Set<Annotation>>();
      InjectionTarget<CDIJCacheHelper> injectionTarget0 = (InjectionTarget<CDIJCacheHelper>) mock(InjectionTarget.class, new ViolatedAssumptionAnswer());
      MakeJCacheCDIInterceptorFriendly.HelperBean makeJCacheCDIInterceptorFriendly_HelperBean0 = new MakeJCacheCDIInterceptorFriendly.HelperBean((AnnotatedType<CDIJCacheHelper>) null, injectionTarget0, "s%V");
      Set<Annotation> set0 = makeJCacheCDIInterceptorFriendly_HelperBean0.getQualifiers();
      Integer[] integerArray0 = new Integer[1];
      CacheResolverFactoryImpl cacheResolverFactoryImpl0 = new CacheResolverFactoryImpl();
      CacheKeyGeneratorImpl cacheKeyGeneratorImpl0 = new CacheKeyGeneratorImpl();
      CacheResult cacheResult0 = mock(CacheResult.class, new ViolatedAssumptionAnswer());
      CachePut cachePut0 = mock(CachePut.class, new ViolatedAssumptionAnswer());
      CacheRemove cacheRemove0 = mock(CacheRemove.class, new ViolatedAssumptionAnswer());
      CacheRemoveAll cacheRemoveAll0 = mock(CacheRemoveAll.class, new ViolatedAssumptionAnswer());
      CDIJCacheHelper.MethodMeta cDIJCacheHelper_MethodMeta0 = new CDIJCacheHelper.MethodMeta(classArray0, linkedList0, set0, integerArray0, integerArray0[0], integerArray0, "s%V", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, cacheResult0, "s%V", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, false, cachePut0, "s%V", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, false, cacheRemove0, "s%V", cacheResolverFactoryImpl0, false, cacheRemoveAll0);
      cDIJCacheHelper_MethodMeta0.getValuesIndex();
      assertFalse(cDIJCacheHelper_MethodMeta0.isCacheRemoveAfter());
      assertFalse(cDIJCacheHelper_MethodMeta0.isCacheRemoveAllAfter());
      assertFalse(cDIJCacheHelper_MethodMeta0.isCachePutAfter());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 1);
      LinkedHashSet<Annotation> linkedHashSet0 = new LinkedHashSet<Annotation>();
      Integer[] integerArray0 = new Integer[10];
      CacheResolverFactoryImpl cacheResolverFactoryImpl0 = new CacheResolverFactoryImpl();
      CacheResult cacheResult0 = mock(CacheResult.class, new ViolatedAssumptionAnswer());
      CachePut cachePut0 = mock(CachePut.class, new ViolatedAssumptionAnswer());
      CacheRemove cacheRemove0 = mock(CacheRemove.class, new ViolatedAssumptionAnswer());
      CacheRemoveAll cacheRemoveAll0 = mock(CacheRemoveAll.class, new ViolatedAssumptionAnswer());
      CDIJCacheHelper.MethodMeta cDIJCacheHelper_MethodMeta0 = new CDIJCacheHelper.MethodMeta(classArray0, (List<Set<Annotation>>) null, linkedHashSet0, integerArray0, integerArray0[0], integerArray0, "o9&GSBrn", cacheResolverFactoryImpl0, (CacheKeyGenerator) null, cacheResult0, "o9&GSBrn", cacheResolverFactoryImpl0, (CacheKeyGenerator) null, true, cachePut0, "o9&GSBrn", cacheResolverFactoryImpl0, (CacheKeyGenerator) null, true, cacheRemove0, "org.apache.commons.jcs3.jcache.cdi.CDIJCacheHelper$MethodKey", cacheResolverFactoryImpl0, true, cacheRemoveAll0);
      cDIJCacheHelper_MethodMeta0.getCacheRemoveKeyGenerator();
      assertEquals("org.apache.commons.jcs3.jcache.cdi.CDIJCacheHelper$MethodKey", cDIJCacheHelper_MethodMeta0.getCacheRemoveAllCacheName());
      assertTrue(cDIJCacheHelper_MethodMeta0.isCacheRemoveAllAfter());
      assertTrue(cDIJCacheHelper_MethodMeta0.isCacheRemoveAfter());
      assertEquals("o9&GSBrn", cDIJCacheHelper_MethodMeta0.getCacheResultCacheName());
      assertEquals("o9&GSBrn", cDIJCacheHelper_MethodMeta0.getCachePutCacheName());
      assertEquals("o9&GSBrn", cDIJCacheHelper_MethodMeta0.getCacheRemoveCacheName());
      assertTrue(cDIJCacheHelper_MethodMeta0.isCachePutAfter());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<CacheResolverFactoryImpl>[] classArray0 = (Class<CacheResolverFactoryImpl>[]) Array.newInstance(Class.class, 4);
      LinkedList<Set<Annotation>> linkedList0 = new LinkedList<Set<Annotation>>();
      LinkedHashSet<Annotation> linkedHashSet0 = new LinkedHashSet<Annotation>();
      Integer[] integerArray0 = new Integer[4];
      CacheResolverFactoryImpl cacheResolverFactoryImpl0 = new CacheResolverFactoryImpl();
      CacheKeyGeneratorImpl cacheKeyGeneratorImpl0 = new CacheKeyGeneratorImpl();
      CacheResult cacheResult0 = mock(CacheResult.class, new ViolatedAssumptionAnswer());
      CachePut cachePut0 = mock(CachePut.class, new ViolatedAssumptionAnswer());
      CacheRemove cacheRemove0 = mock(CacheRemove.class, new ViolatedAssumptionAnswer());
      CacheRemoveAll cacheRemoveAll0 = mock(CacheRemoveAll.class, new ViolatedAssumptionAnswer());
      CDIJCacheHelper.MethodMeta cDIJCacheHelper_MethodMeta0 = new CDIJCacheHelper.MethodMeta(classArray0, linkedList0, linkedHashSet0, integerArray0, (Integer) null, integerArray0, "YT", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, cacheResult0, "YT", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, true, cachePut0, "YT", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, true, cacheRemove0, "YT", cacheResolverFactoryImpl0, true, cacheRemoveAll0);
      cDIJCacheHelper_MethodMeta0.getParameterIndices();
      assertTrue(cDIJCacheHelper_MethodMeta0.isCacheRemoveAfter());
      assertTrue(cDIJCacheHelper_MethodMeta0.isCacheRemoveAllAfter());
      assertTrue(cDIJCacheHelper_MethodMeta0.isCachePutAfter());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 1);
      LinkedList<Set<Annotation>> linkedList0 = new LinkedList<Set<Annotation>>();
      LinkedHashSet<Annotation> linkedHashSet0 = new LinkedHashSet<Annotation>();
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer(1062);
      CacheResolverFactoryImpl cacheResolverFactoryImpl0 = new CacheResolverFactoryImpl();
      CacheKeyGeneratorImpl cacheKeyGeneratorImpl0 = new CacheKeyGeneratorImpl();
      CacheResult cacheResult0 = mock(CacheResult.class, new ViolatedAssumptionAnswer());
      CacheRemove cacheRemove0 = mock(CacheRemove.class, new ViolatedAssumptionAnswer());
      CacheRemoveAll cacheRemoveAll0 = mock(CacheRemoveAll.class, new ViolatedAssumptionAnswer());
      CDIJCacheHelper.MethodMeta cDIJCacheHelper_MethodMeta0 = new CDIJCacheHelper.MethodMeta(classArray0, linkedList0, linkedHashSet0, integerArray0, integer0, integerArray0, "=", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, cacheResult0, "lib", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, true, (CachePut) null, "=", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, false, cacheRemove0, "=", cacheResolverFactoryImpl0, false, cacheRemoveAll0);
      cDIJCacheHelper_MethodMeta0.getCacheResultResolverFactory();
      assertEquals("lib", cDIJCacheHelper_MethodMeta0.getCachePutCacheName());
      assertFalse(cDIJCacheHelper_MethodMeta0.isCacheRemoveAllAfter());
      assertEquals("=", cDIJCacheHelper_MethodMeta0.getCacheResultCacheName());
      assertFalse(cDIJCacheHelper_MethodMeta0.isCacheRemoveAfter());
      assertEquals("=", cDIJCacheHelper_MethodMeta0.getCacheRemoveAllCacheName());
      assertEquals("=", cDIJCacheHelper_MethodMeta0.getCacheRemoveCacheName());
      assertTrue(cDIJCacheHelper_MethodMeta0.isCachePutAfter());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 1);
      LinkedList<Set<Annotation>> linkedList0 = new LinkedList<Set<Annotation>>();
      LinkedHashSet<Annotation> linkedHashSet0 = new LinkedHashSet<Annotation>();
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer(1062);
      CacheResolverFactoryImpl cacheResolverFactoryImpl0 = new CacheResolverFactoryImpl();
      CacheKeyGeneratorImpl cacheKeyGeneratorImpl0 = new CacheKeyGeneratorImpl();
      CacheResult cacheResult0 = mock(CacheResult.class, new ViolatedAssumptionAnswer());
      CacheRemove cacheRemove0 = mock(CacheRemove.class, new ViolatedAssumptionAnswer());
      CacheRemoveAll cacheRemoveAll0 = mock(CacheRemoveAll.class, new ViolatedAssumptionAnswer());
      CDIJCacheHelper.MethodMeta cDIJCacheHelper_MethodMeta0 = new CDIJCacheHelper.MethodMeta(classArray0, linkedList0, linkedHashSet0, integerArray0, integer0, integerArray0, "=", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, cacheResult0, "lib", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, true, (CachePut) null, "=", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, false, cacheRemove0, "=", cacheResolverFactoryImpl0, false, cacheRemoveAll0);
      boolean boolean0 = cDIJCacheHelper_MethodMeta0.isCachePutAfter();
      assertEquals("=", cDIJCacheHelper_MethodMeta0.getCacheRemoveAllCacheName());
      assertTrue(boolean0);
      assertEquals("lib", cDIJCacheHelper_MethodMeta0.getCachePutCacheName());
      assertEquals("=", cDIJCacheHelper_MethodMeta0.getCacheRemoveCacheName());
      assertEquals("=", cDIJCacheHelper_MethodMeta0.getCacheResultCacheName());
      assertFalse(cDIJCacheHelper_MethodMeta0.isCacheRemoveAfter());
      assertFalse(cDIJCacheHelper_MethodMeta0.isCacheRemoveAllAfter());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 6);
      LinkedList<Set<Annotation>> linkedList0 = new LinkedList<Set<Annotation>>();
      LinkedHashSet<Annotation> linkedHashSet0 = new LinkedHashSet<Annotation>();
      Integer[] integerArray0 = new Integer[3];
      CacheResolverFactoryImpl cacheResolverFactoryImpl0 = new CacheResolverFactoryImpl();
      CacheKeyGeneratorImpl cacheKeyGeneratorImpl0 = new CacheKeyGeneratorImpl();
      CacheResult cacheResult0 = mock(CacheResult.class, new ViolatedAssumptionAnswer());
      CacheRemove cacheRemove0 = mock(CacheRemove.class, new ViolatedAssumptionAnswer());
      CacheRemoveAll cacheRemoveAll0 = mock(CacheRemoveAll.class, new ViolatedAssumptionAnswer());
      CDIJCacheHelper.MethodMeta cDIJCacheHelper_MethodMeta0 = new CDIJCacheHelper.MethodMeta(classArray0, linkedList0, linkedHashSet0, integerArray0, integerArray0[1], integerArray0, "S", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, cacheResult0, "S", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, false, (CachePut) null, "S", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, false, cacheRemove0, "S", cacheResolverFactoryImpl0, false, cacheRemoveAll0);
      cDIJCacheHelper_MethodMeta0.getCacheRemoveAllResolverFactory();
      assertFalse(cDIJCacheHelper_MethodMeta0.isCachePutAfter());
      assertFalse(cDIJCacheHelper_MethodMeta0.isCacheRemoveAfter());
      assertFalse(cDIJCacheHelper_MethodMeta0.isCacheRemoveAllAfter());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 22);
      LinkedList<Set<Annotation>> linkedList0 = new LinkedList<Set<Annotation>>();
      AnnotatedType<CDIJCacheHelper> annotatedType0 = (AnnotatedType<CDIJCacheHelper>) mock(AnnotatedType.class, new ViolatedAssumptionAnswer());
      InjectionTarget<CDIJCacheHelper> injectionTarget0 = (InjectionTarget<CDIJCacheHelper>) mock(InjectionTarget.class, new ViolatedAssumptionAnswer());
      MakeJCacheCDIInterceptorFriendly.HelperBean makeJCacheCDIInterceptorFriendly_HelperBean0 = new MakeJCacheCDIInterceptorFriendly.HelperBean(annotatedType0, injectionTarget0, "G.e_3?EKm]");
      Set<Annotation> set0 = makeJCacheCDIInterceptorFriendly_HelperBean0.getQualifiers();
      Integer integer0 = new Integer(296);
      CacheResolverFactoryImpl cacheResolverFactoryImpl0 = new CacheResolverFactoryImpl();
      CacheResult cacheResult0 = mock(CacheResult.class, new ViolatedAssumptionAnswer());
      CachePut cachePut0 = mock(CachePut.class, new ViolatedAssumptionAnswer());
      CacheRemove cacheRemove0 = mock(CacheRemove.class, new ViolatedAssumptionAnswer());
      CacheRemoveAll cacheRemoveAll0 = mock(CacheRemoveAll.class, new ViolatedAssumptionAnswer());
      CDIJCacheHelper.MethodMeta cDIJCacheHelper_MethodMeta0 = new CDIJCacheHelper.MethodMeta(classArray0, linkedList0, set0, (Integer[]) null, integer0, (Integer[]) null, "G.e_3?EKm]", cacheResolverFactoryImpl0, (CacheKeyGenerator) null, cacheResult0, "G.e_3?EKm]", cacheResolverFactoryImpl0, (CacheKeyGenerator) null, true, cachePut0, "G.e_3?EKm]", cacheResolverFactoryImpl0, (CacheKeyGenerator) null, true, cacheRemove0, "G.e_3?EKm]", cacheResolverFactoryImpl0, true, cacheRemoveAll0);
      cDIJCacheHelper_MethodMeta0.getCacheRemoveCacheName();
      assertTrue(cDIJCacheHelper_MethodMeta0.isCachePutAfter());
      assertTrue(cDIJCacheHelper_MethodMeta0.isCacheRemoveAllAfter());
      assertTrue(cDIJCacheHelper_MethodMeta0.isCacheRemoveAfter());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<Set<Annotation>> linkedList0 = new LinkedList<Set<Annotation>>();
      AnnotatedType<CDIJCacheHelper> annotatedType0 = (AnnotatedType<CDIJCacheHelper>) mock(AnnotatedType.class, new ViolatedAssumptionAnswer());
      InjectionTarget<CDIJCacheHelper> injectionTarget0 = (InjectionTarget<CDIJCacheHelper>) mock(InjectionTarget.class, new ViolatedAssumptionAnswer());
      MakeJCacheCDIInterceptorFriendly.HelperBean makeJCacheCDIInterceptorFriendly_HelperBean0 = new MakeJCacheCDIInterceptorFriendly.HelperBean(annotatedType0, injectionTarget0, "org.pache.commons.jcs3.jcache.cdi.CDIJCacheHelper$MethodKey");
      Set<Annotation> set0 = makeJCacheCDIInterceptorFriendly_HelperBean0.getQualifiers();
      Integer[] integerArray0 = new Integer[2];
      CacheResolverFactoryImpl cacheResolverFactoryImpl0 = new CacheResolverFactoryImpl();
      CacheKeyGeneratorImpl cacheKeyGeneratorImpl0 = new CacheKeyGeneratorImpl();
      CacheResult cacheResult0 = mock(CacheResult.class, new ViolatedAssumptionAnswer());
      CachePut cachePut0 = mock(CachePut.class, new ViolatedAssumptionAnswer());
      CacheRemove cacheRemove0 = mock(CacheRemove.class, new ViolatedAssumptionAnswer());
      CacheRemoveAll cacheRemoveAll0 = mock(CacheRemoveAll.class, new ViolatedAssumptionAnswer());
      CDIJCacheHelper.MethodMeta cDIJCacheHelper_MethodMeta0 = new CDIJCacheHelper.MethodMeta((Class<?>[]) null, linkedList0, set0, integerArray0, integerArray0[1], integerArray0, "org.pache.commons.jcs3.jcache.cdi.CDIJCacheHelper$MethodKey", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, cacheResult0, "org.pache.commons.jcs3.jcache.cdi.CDIJCacheHelper$MethodKey", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, true, cachePut0, "org.pache.commons.jcs3.jcache.cdi.CDIJCacheHelper$MethodKey", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, true, cacheRemove0, "org.pache.commons.jcs3.jcache.cdi.CDIJCacheHelper$MethodKey", cacheResolverFactoryImpl0, true, cacheRemoveAll0);
      cDIJCacheHelper_MethodMeta0.getCacheRemoveResolverFactory();
      assertTrue(cDIJCacheHelper_MethodMeta0.isCacheRemoveAllAfter());
      assertTrue(cDIJCacheHelper_MethodMeta0.isCachePutAfter());
      assertTrue(cDIJCacheHelper_MethodMeta0.isCacheRemoveAfter());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 19);
      LinkedList<Set<Annotation>> linkedList0 = new LinkedList<Set<Annotation>>();
      AnnotatedType<CDIJCacheHelper> annotatedType0 = (AnnotatedType<CDIJCacheHelper>) mock(AnnotatedType.class, new ViolatedAssumptionAnswer());
      InjectionTarget<CDIJCacheHelper> injectionTarget0 = (InjectionTarget<CDIJCacheHelper>) mock(InjectionTarget.class, new ViolatedAssumptionAnswer());
      MakeJCacheCDIInterceptorFriendly.HelperBean makeJCacheCDIInterceptorFriendly_HelperBean0 = new MakeJCacheCDIInterceptorFriendly.HelperBean(annotatedType0, injectionTarget0, "");
      Set<Annotation> set0 = makeJCacheCDIInterceptorFriendly_HelperBean0.getQualifiers();
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-680));
      CacheKeyGeneratorImpl cacheKeyGeneratorImpl0 = new CacheKeyGeneratorImpl();
      CacheResult cacheResult0 = mock(CacheResult.class, new ViolatedAssumptionAnswer());
      CachePut cachePut0 = mock(CachePut.class, new ViolatedAssumptionAnswer());
      CacheRemove cacheRemove0 = mock(CacheRemove.class, new ViolatedAssumptionAnswer());
      CacheResolverFactoryImpl cacheResolverFactoryImpl0 = new CacheResolverFactoryImpl();
      CacheRemoveAll cacheRemoveAll0 = mock(CacheRemoveAll.class, new ViolatedAssumptionAnswer());
      CDIJCacheHelper.MethodMeta cDIJCacheHelper_MethodMeta0 = new CDIJCacheHelper.MethodMeta(classArray0, linkedList0, set0, integerArray0, integer0, integerArray0, "", (CacheResolverFactory) null, cacheKeyGeneratorImpl0, cacheResult0, "", (CacheResolverFactory) null, cacheKeyGeneratorImpl0, true, cachePut0, "", (CacheResolverFactory) null, cacheKeyGeneratorImpl0, true, cacheRemove0, "", cacheResolverFactoryImpl0, true, cacheRemoveAll0);
      CacheResolverFactory cacheResolverFactory0 = cDIJCacheHelper_MethodMeta0.getCachePutResolverFactory();
      assertTrue(cDIJCacheHelper_MethodMeta0.isCachePutAfter());
      assertTrue(cDIJCacheHelper_MethodMeta0.isCacheRemoveAllAfter());
      assertNull(cacheResolverFactory0);
      assertTrue(cDIJCacheHelper_MethodMeta0.isCacheRemoveAfter());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<Set<Annotation>> linkedList0 = new LinkedList<Set<Annotation>>();
      LinkedHashSet<Annotation> linkedHashSet0 = new LinkedHashSet<Annotation>();
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-4653));
      CacheResolverFactoryImpl cacheResolverFactoryImpl0 = new CacheResolverFactoryImpl();
      CacheKeyGeneratorImpl cacheKeyGeneratorImpl0 = new CacheKeyGeneratorImpl();
      CacheResult cacheResult0 = mock(CacheResult.class, new ViolatedAssumptionAnswer());
      CachePut cachePut0 = mock(CachePut.class, new ViolatedAssumptionAnswer());
      CacheRemove cacheRemove0 = mock(CacheRemove.class, new ViolatedAssumptionAnswer());
      CacheRemoveAll cacheRemoveAll0 = mock(CacheRemoveAll.class, new ViolatedAssumptionAnswer());
      doReturn("qU").when(cacheRemoveAll0).toString();
      CDIJCacheHelper.MethodMeta cDIJCacheHelper_MethodMeta0 = new CDIJCacheHelper.MethodMeta((Class<?>[]) null, linkedList0, linkedHashSet0, integerArray0, integer0, integerArray0, "qU", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, cacheResult0, "qU", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, false, cachePut0, "qU", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, false, cacheRemove0, "qU", cacheResolverFactoryImpl0, false, cacheRemoveAll0);
      cDIJCacheHelper_MethodMeta0.getCacheRemoveAll();
      assertFalse(cDIJCacheHelper_MethodMeta0.isCacheRemoveAfter());
      assertFalse(cDIJCacheHelper_MethodMeta0.isCachePutAfter());
      assertFalse(cDIJCacheHelper_MethodMeta0.isCacheRemoveAllAfter());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 26);
      LinkedList<Set<Annotation>> linkedList0 = new LinkedList<Set<Annotation>>();
      Integer[] integerArray0 = new Integer[3];
      CacheResolverFactoryImpl cacheResolverFactoryImpl0 = new CacheResolverFactoryImpl();
      CacheKeyGeneratorImpl cacheKeyGeneratorImpl0 = new CacheKeyGeneratorImpl();
      CacheResult cacheResult0 = mock(CacheResult.class, new ViolatedAssumptionAnswer());
      CachePut cachePut0 = mock(CachePut.class, new ViolatedAssumptionAnswer());
      CacheRemove cacheRemove0 = mock(CacheRemove.class, new ViolatedAssumptionAnswer());
      CacheRemoveAll cacheRemoveAll0 = mock(CacheRemoveAll.class, new ViolatedAssumptionAnswer());
      CDIJCacheHelper.MethodMeta cDIJCacheHelper_MethodMeta0 = new CDIJCacheHelper.MethodMeta(classArray0, linkedList0, (Set<Annotation>) null, integerArray0, integerArray0[2], integerArray0, "pXu,be@p#&{FTEn~\"", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, cacheResult0, "pXu,be@p#&{FTEn~\"", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, false, cachePut0, "pXu,be@p#&{FTEn~\"", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, false, cacheRemove0, "pXu,be@p#&{FTEn~\"", cacheResolverFactoryImpl0, false, cacheRemoveAll0);
      cDIJCacheHelper_MethodMeta0.getCachePutCacheName();
      assertFalse(cDIJCacheHelper_MethodMeta0.isCacheRemoveAfter());
      assertFalse(cDIJCacheHelper_MethodMeta0.isCacheRemoveAllAfter());
      assertFalse(cDIJCacheHelper_MethodMeta0.isCachePutAfter());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AnnotatedType<CDIJCacheHelper> annotatedType0 = (AnnotatedType<CDIJCacheHelper>) mock(AnnotatedType.class, new ViolatedAssumptionAnswer());
      InjectionTarget<CDIJCacheHelper> injectionTarget0 = (InjectionTarget<CDIJCacheHelper>) mock(InjectionTarget.class, new ViolatedAssumptionAnswer());
      MakeJCacheCDIInterceptorFriendly.HelperBean makeJCacheCDIInterceptorFriendly_HelperBean0 = new MakeJCacheCDIInterceptorFriendly.HelperBean(annotatedType0, injectionTarget0, (String) null);
      Set<Annotation> set0 = makeJCacheCDIInterceptorFriendly_HelperBean0.getQualifiers();
      Integer integer0 = new Integer(8);
      CacheResolverFactoryImpl cacheResolverFactoryImpl0 = new CacheResolverFactoryImpl();
      CacheKeyGeneratorImpl cacheKeyGeneratorImpl0 = new CacheKeyGeneratorImpl();
      CacheResult cacheResult0 = mock(CacheResult.class, new ViolatedAssumptionAnswer());
      CachePut cachePut0 = mock(CachePut.class, new ViolatedAssumptionAnswer());
      CacheRemove cacheRemove0 = mock(CacheRemove.class, new ViolatedAssumptionAnswer());
      CacheRemoveAll cacheRemoveAll0 = mock(CacheRemoveAll.class, new ViolatedAssumptionAnswer());
      CDIJCacheHelper.MethodMeta cDIJCacheHelper_MethodMeta0 = new CDIJCacheHelper.MethodMeta((Class<?>[]) null, (List<Set<Annotation>>) null, set0, (Integer[]) null, integer0, (Integer[]) null, (String) null, cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, cacheResult0, (String) null, cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, false, cachePut0, (String) null, cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, false, cacheRemove0, (String) null, cacheResolverFactoryImpl0, false, cacheRemoveAll0);
      cDIJCacheHelper_MethodMeta0.getCacheResultKeyGenerator();
      assertFalse(cDIJCacheHelper_MethodMeta0.isCacheRemoveAllAfter());
      assertFalse(cDIJCacheHelper_MethodMeta0.isCachePutAfter());
      assertFalse(cDIJCacheHelper_MethodMeta0.isCacheRemoveAfter());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Class<CacheResolverFactoryImpl>[] classArray0 = (Class<CacheResolverFactoryImpl>[]) Array.newInstance(Class.class, 8);
      LinkedList<Set<Annotation>> linkedList0 = new LinkedList<Set<Annotation>>();
      LinkedHashSet<Annotation> linkedHashSet0 = new LinkedHashSet<Annotation>();
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-997));
      CacheResolverFactoryImpl cacheResolverFactoryImpl0 = new CacheResolverFactoryImpl();
      CacheResult cacheResult0 = mock(CacheResult.class, new ViolatedAssumptionAnswer());
      CachePut cachePut0 = mock(CachePut.class, new ViolatedAssumptionAnswer());
      doReturn("p[&~M").when(cachePut0).toString();
      CacheRemove cacheRemove0 = mock(CacheRemove.class, new ViolatedAssumptionAnswer());
      CacheRemoveAll cacheRemoveAll0 = mock(CacheRemoveAll.class, new ViolatedAssumptionAnswer());
      CDIJCacheHelper.MethodMeta cDIJCacheHelper_MethodMeta0 = new CDIJCacheHelper.MethodMeta(classArray0, linkedList0, linkedHashSet0, integerArray0, integer0, integerArray0, "p[&~M", cacheResolverFactoryImpl0, (CacheKeyGenerator) null, cacheResult0, "p[&~M", cacheResolverFactoryImpl0, (CacheKeyGenerator) null, false, cachePut0, "p[&~M", cacheResolverFactoryImpl0, (CacheKeyGenerator) null, false, cacheRemove0, "p[&~M", cacheResolverFactoryImpl0, false, cacheRemoveAll0);
      CachePut cachePut1 = cDIJCacheHelper_MethodMeta0.getCachePut();
      InvocationContext invocationContext0 = mock(InvocationContext.class, new ViolatedAssumptionAnswer());
      CacheMethodDetailsImpl<Annotation> cacheMethodDetailsImpl0 = new CacheMethodDetailsImpl<Annotation>(invocationContext0, cachePut1, "p[&~M", cDIJCacheHelper_MethodMeta0);
      assertFalse(cDIJCacheHelper_MethodMeta0.isCacheRemoveAfter());
      assertFalse(cDIJCacheHelper_MethodMeta0.isCacheRemoveAllAfter());
      assertFalse(cDIJCacheHelper_MethodMeta0.isCachePutAfter());
  }
}
