/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 07 16:06:05 GMT 2022
 */

package org.asynchttpclient.extras.rxjava2.maybe;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import io.netty.channel.ChannelDuplexHandler;
import io.reactivex.MaybeEmitter;
import java.sql.SQLTransientConnectionException;
import java.time.chrono.HijrahEra;
import org.asynchttpclient.AsyncHandler;
import org.asynchttpclient.extras.rxjava2.maybe.ProgressAsyncMaybeEmitterBridge;
import org.asynchttpclient.handler.ProgressAsyncHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractMaybeProgressAsyncHandlerBridge_ESTest extends AbstractMaybeProgressAsyncHandlerBridge_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MaybeEmitter<Void> maybeEmitter0 = (MaybeEmitter<Void>) mock(MaybeEmitter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(maybeEmitter0).isDisposed();
      ProgressAsyncHandler<Void> progressAsyncHandler0 = (ProgressAsyncHandler<Void>) mock(ProgressAsyncHandler.class, new ViolatedAssumptionAnswer());
      doReturn((AsyncHandler.State) null).when(progressAsyncHandler0).onContentWriteProgress(anyLong() , anyLong() , anyLong());
      ProgressAsyncMaybeEmitterBridge<Void> progressAsyncMaybeEmitterBridge0 = new ProgressAsyncMaybeEmitterBridge<Void>(maybeEmitter0, progressAsyncHandler0);
      progressAsyncMaybeEmitterBridge0.onContentWriteProgress(0L, (-1301L), 0L);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MaybeEmitter<Object> maybeEmitter0 = (MaybeEmitter<Object>) mock(MaybeEmitter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(maybeEmitter0).isDisposed();
      ProgressAsyncHandler<Object> progressAsyncHandler0 = (ProgressAsyncHandler<Object>) mock(ProgressAsyncHandler.class, new ViolatedAssumptionAnswer());
      doReturn((AsyncHandler.State) null).when(progressAsyncHandler0).onHeadersWritten();
      ProgressAsyncMaybeEmitterBridge<Object> progressAsyncMaybeEmitterBridge0 = new ProgressAsyncMaybeEmitterBridge<Object>(maybeEmitter0, progressAsyncHandler0);
      progressAsyncMaybeEmitterBridge0.onHeadersWritten();
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MaybeEmitter<Object> maybeEmitter0 = (MaybeEmitter<Object>) mock(MaybeEmitter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(maybeEmitter0).isDisposed();
      ProgressAsyncHandler<Object> progressAsyncHandler0 = (ProgressAsyncHandler<Object>) mock(ProgressAsyncHandler.class, new ViolatedAssumptionAnswer());
      doReturn((AsyncHandler.State) null).when(progressAsyncHandler0).onContentWritten();
      ProgressAsyncMaybeEmitterBridge<Object> progressAsyncMaybeEmitterBridge0 = new ProgressAsyncMaybeEmitterBridge<Object>(maybeEmitter0, progressAsyncHandler0);
      progressAsyncMaybeEmitterBridge0.onContentWritten();
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MaybeEmitter<ChannelDuplexHandler> maybeEmitter0 = (MaybeEmitter<ChannelDuplexHandler>) mock(MaybeEmitter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(maybeEmitter0).isDisposed();
      ProgressAsyncHandler<ChannelDuplexHandler> progressAsyncHandler0 = (ProgressAsyncHandler<ChannelDuplexHandler>) mock(ProgressAsyncHandler.class, new ViolatedAssumptionAnswer());
      doReturn((AsyncHandler.State) null).when(progressAsyncHandler0).onContentWriteProgress(anyLong() , anyLong() , anyLong());
      ProgressAsyncMaybeEmitterBridge<ChannelDuplexHandler> progressAsyncMaybeEmitterBridge0 = new ProgressAsyncMaybeEmitterBridge<ChannelDuplexHandler>(maybeEmitter0, progressAsyncHandler0);
      progressAsyncMaybeEmitterBridge0.onContentWriteProgress((-3680L), (-3680L), (-588L));
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MaybeEmitter<HijrahEra> maybeEmitter0 = (MaybeEmitter<HijrahEra>) mock(MaybeEmitter.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(maybeEmitter0).isDisposed();
      ProgressAsyncHandler<HijrahEra> progressAsyncHandler0 = (ProgressAsyncHandler<HijrahEra>) mock(ProgressAsyncHandler.class, new ViolatedAssumptionAnswer());
      ProgressAsyncMaybeEmitterBridge<HijrahEra> progressAsyncMaybeEmitterBridge0 = new ProgressAsyncMaybeEmitterBridge<HijrahEra>(maybeEmitter0, progressAsyncHandler0);
      MaybeEmitter<Void> maybeEmitter1 = (MaybeEmitter<Void>) mock(MaybeEmitter.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(maybeEmitter1).isDisposed();
      ProgressAsyncMaybeEmitterBridge<Void> progressAsyncMaybeEmitterBridge1 = new ProgressAsyncMaybeEmitterBridge<Void>(maybeEmitter1, progressAsyncMaybeEmitterBridge0);
      AsyncHandler.State asyncHandler_State0 = progressAsyncMaybeEmitterBridge1.onContentWriteProgress((-2517L), 0L, (-2517L));
      assertEquals(AsyncHandler.State.ABORT, asyncHandler_State0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MaybeEmitter<Object> maybeEmitter0 = (MaybeEmitter<Object>) mock(MaybeEmitter.class, new ViolatedAssumptionAnswer());
      doReturn(true, false, false, true).when(maybeEmitter0).isDisposed();
      AsyncHandler.State asyncHandler_State0 = AsyncHandler.State.ABORT;
      ProgressAsyncHandler<String> progressAsyncHandler0 = (ProgressAsyncHandler<String>) mock(ProgressAsyncHandler.class, new ViolatedAssumptionAnswer());
      doReturn(asyncHandler_State0).when(progressAsyncHandler0).onContentWriteProgress(anyLong() , anyLong() , anyLong());
      ProgressAsyncMaybeEmitterBridge<Object> progressAsyncMaybeEmitterBridge0 = new ProgressAsyncMaybeEmitterBridge<Object>(maybeEmitter0, progressAsyncHandler0);
      progressAsyncMaybeEmitterBridge0.onHeadersWritten();
      MaybeEmitter<Void> maybeEmitter1 = (MaybeEmitter<Void>) mock(MaybeEmitter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(maybeEmitter1).isDisposed();
      ProgressAsyncMaybeEmitterBridge<Void> progressAsyncMaybeEmitterBridge1 = new ProgressAsyncMaybeEmitterBridge<Void>(maybeEmitter1, progressAsyncMaybeEmitterBridge0);
      progressAsyncMaybeEmitterBridge1.onContentWriteProgress(0L, 0L, 0L);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.asynchttpclient.extras.rxjava2.maybe.AbstractMaybeProgressAsyncHandlerBridge", "TL!;qXVeMm0!O>8~", 13);
      MockThrowable mockThrowable0 = new MockThrowable("TL!;qXVeMm0!O>8~", sQLTransientConnectionException0);
      progressAsyncMaybeEmitterBridge0.onTlsHandshakeFailure(mockThrowable0);
      AsyncHandler.State asyncHandler_State1 = progressAsyncMaybeEmitterBridge0.onContentWritten();
      assertSame(asyncHandler_State1, asyncHandler_State0);
  }
}
