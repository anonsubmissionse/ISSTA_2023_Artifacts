/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 07 16:14:12 GMT 2022
 */

package org.asynchttpclient.extras.simple;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.nio.ByteBuffer;
import java.nio.ReadOnlyBufferException;
import org.asynchttpclient.extras.simple.FileBodyConsumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileBodyConsumer_ESTest extends FileBodyConsumer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileBodyConsumer fileBodyConsumer0 = new FileBodyConsumer((RandomAccessFile) null);
      byte[] byteArray0 = new byte[9];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      byteBuffer0.putLong(0L);
      // Undeclared exception!
      try { 
        fileBodyConsumer0.consume(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.extras.simple.FileBodyConsumer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("+=k*4S2_");
      File file0 = MockFile.createTempFile("!&@)hUU82[DHSYB?<0", "!&@)hUU82[DHSYB?<0", (File) mockFile0);
      MockRandomAccessFile mockRandomAccessFile0 = new MockRandomAccessFile(file0, "r");
      FileBodyConsumer fileBodyConsumer0 = new FileBodyConsumer(mockRandomAccessFile0);
      long long0 = fileBodyConsumer0.getTransferredBytes();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("+=k*4S2_/!&@)hUU82[DHSYB?<00!&@)hUU82[DHSYB?<0");
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      MockFile mockFile0 = new MockFile("+=k*4S2_");
      File file0 = MockFile.createTempFile("!&@)hUU82[DHSYB?<0", "!&@)hUU82[DHSYB?<0", (File) mockFile0);
      MockRandomAccessFile mockRandomAccessFile0 = new MockRandomAccessFile(file0, "r");
      FileBodyConsumer fileBodyConsumer0 = new FileBodyConsumer(mockRandomAccessFile0);
      long long0 = fileBodyConsumer0.getTransferredBytes();
      assertEquals(6L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileBodyConsumer fileBodyConsumer0 = new FileBodyConsumer((RandomAccessFile) null);
      // Undeclared exception!
      try { 
        fileBodyConsumer0.resume();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.extras.simple.FileBodyConsumer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandomAccessFile mockRandomAccessFile0 = new MockRandomAccessFile("", "r");
      FileBodyConsumer fileBodyConsumer0 = new FileBodyConsumer(mockRandomAccessFile0);
      try { 
        fileBodyConsumer0.resume();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(7);
      ByteBuffer byteBuffer1 = byteBuffer0.asReadOnlyBuffer();
      FileBodyConsumer fileBodyConsumer0 = new FileBodyConsumer((RandomAccessFile) null);
      // Undeclared exception!
      try { 
        fileBodyConsumer0.consume(byteBuffer1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileBodyConsumer fileBodyConsumer0 = new FileBodyConsumer((RandomAccessFile) null);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(821);
      // Undeclared exception!
      try { 
        fileBodyConsumer0.consume(byteBuffer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFile mockFile0 = new MockFile("+=k*4S2_");
      File file0 = MockFile.createTempFile("!&@)hUU82[DHSYB?<0", "!&@)hUU82[DHSYB?<0", (File) mockFile0);
      MockRandomAccessFile mockRandomAccessFile0 = new MockRandomAccessFile(file0, "r");
      FileBodyConsumer fileBodyConsumer0 = new FileBodyConsumer(mockRandomAccessFile0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(31);
      try { 
        fileBodyConsumer0.consume(byteBuffer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockRandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileBodyConsumer fileBodyConsumer0 = new FileBodyConsumer((RandomAccessFile) null);
      // Undeclared exception!
      try { 
        fileBodyConsumer0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.extras.simple.FileBodyConsumer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile("q&@)hUU2[>HSYB?<0");
      File file0 = MockFile.createTempFile("q&@)hUU2[>HSYB?<0", "q&@)hUU2[>HSYB?<0", (File) mockFile0);
      MockRandomAccessFile mockRandomAccessFile0 = new MockRandomAccessFile(file0, "r");
      FileBodyConsumer fileBodyConsumer0 = new FileBodyConsumer(mockRandomAccessFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        fileBodyConsumer0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileBodyConsumer fileBodyConsumer0 = new FileBodyConsumer((RandomAccessFile) null);
      // Undeclared exception!
      try { 
        fileBodyConsumer0.getTransferredBytes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.extras.simple.FileBodyConsumer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFile mockFile0 = new MockFile("+=k*4S2_");
      File file0 = MockFile.createTempFile("!&@)hUU82[DHSYB?<0", "!&@)hUU82[DHSYB?<0", (File) mockFile0);
      MockRandomAccessFile mockRandomAccessFile0 = new MockRandomAccessFile(file0, "r");
      FileBodyConsumer fileBodyConsumer0 = new FileBodyConsumer(mockRandomAccessFile0);
      fileBodyConsumer0.close();
      try { 
        fileBodyConsumer0.getTransferredBytes();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockRandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile("+=k*4S2_");
      File file0 = MockFile.createTempFile("!&@)hUU82[DHSYB?<0", "!&@)hUU82[DHSYB?<0", (File) mockFile0);
      MockRandomAccessFile mockRandomAccessFile0 = new MockRandomAccessFile(file0, "r");
      FileBodyConsumer fileBodyConsumer0 = new FileBodyConsumer(mockRandomAccessFile0);
      fileBodyConsumer0.resume();
      assertEquals(0L, fileBodyConsumer0.getTransferredBytes());
  }
}
