/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 07 14:57:02 GMT 2022
 */

package org.asynchttpclient.uri;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.URI;
import java.net.URISyntaxException;
import org.asynchttpclient.uri.Uri;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Uri_ESTest extends Uri_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Uri uri0 = new Uri("503$Wbn", "503$Wbn", "503$Wbn", 1626, "", "", "://");
      Uri uri1 = Uri.create(uri0, "");
      boolean boolean0 = uri1.isSameBase(uri0);
      assertEquals("://", uri1.getFragment());
      assertEquals("503$Wbn", uri1.getHost());
      assertTrue(uri1.equals((Object)uri0));
      assertEquals("", uri1.getQuery());
      assertTrue(boolean0);
      assertEquals("503$Wbn", uri1.getUserInfo());
      assertFalse(uri0.isSecured());
      assertEquals(1626, uri0.getExplicitPort());
      assertEquals("", uri1.getPath());
      assertFalse(uri1.isWebSocket());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Uri uri0 = new Uri("^iy)!", "oB41B", "^iy)!", 1307, "^iy)!", "http", "8:2");
      String string0 = uri0.toBaseUrl();
      assertEquals(80, uri0.getSchemeDefaultPort());
      assertEquals("http", uri0.getQuery());
      assertEquals("oB41B", uri0.getUserInfo());
      assertFalse(uri0.isWebSocket());
      assertEquals("^iy)!://^iy)!:1307^iy)!", string0);
      assertEquals("8:2", uri0.getFragment());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, ":M?tkc+F/.qX", 0, (String) null, ":M?tkc+F/.qX", ":M?tkc+F/.qX");
      Uri uri1 = uri0.withNewScheme("wss");
      assertEquals(":M?tkc+F/.qX", uri1.getHost());
      assertFalse(uri0.isWebSocket());
      assertEquals(443, uri1.getSchemeDefaultPort());
      assertEquals(":M?tkc+F/.qX", uri1.getFragment());
      assertEquals(0, uri1.getPort());
      assertEquals(":M?tkc+F/.qX", uri0.getScheme());
      assertEquals(":M?tkc+F/.qX", uri1.getQuery());
      assertTrue(uri1.isWebSocket());
      assertFalse(uri0.isSecured());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Uri uri0 = new Uri("wss", "wss", "wss", (-1), "wss", "wss", "wss");
      Uri uri1 = uri0.withNewQuery("ws");
      assertEquals("wss", uri1.getUserInfo());
      assertEquals(443, uri1.getExplicitPort());
      assertEquals("ws", uri1.getQuery());
      assertEquals("wss", uri1.getFragment());
      assertEquals("wss", uri0.getQuery());
      assertTrue(uri1.isWebSocket());
      assertEquals("wss", uri1.getHost());
      assertEquals("wss", uri1.getPath());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Uri uri0 = new Uri("https", "~N7tv<]Ic;dDA,", "~N7tv<]Ic;dDA,", 512, "https", "~N7tv<]Ic;dDA,", "");
      Uri uri1 = uri0.withNewQuery("WQAu>9`f*4E");
      assertEquals("~N7tv<]Ic;dDA,", uri1.getHost());
      assertFalse(uri1.isWebSocket());
      assertEquals("~N7tv<]Ic;dDA,", uri1.getUserInfo());
      assertEquals(512, uri0.getExplicitPort());
      assertEquals("WQAu>9`f*4E", uri1.getQuery());
      assertEquals(512, uri1.getExplicitPort());
      assertEquals("https", uri1.getPath());
      assertTrue(uri1.isSecured());
      assertEquals("", uri1.getFragment());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Uri uri0 = new Uri("url:", ":M?tkc+F/https", "url:", 2730, "https", "https", (String) null);
      URI uRI0 = uri0.toJavaNetURI();
      assertEquals(80, uri0.getSchemeDefaultPort());
      assertFalse(uri0.isWebSocket());
      assertEquals("url:://:M?tkc+F/https@url::2730https?https", uRI0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Uri uri0 = new Uri("host", "/", "host", (-666), "/", "host", "h");
      Uri uri1 = uri0.withNewScheme("/");
      URI uRI0 = uri1.toJavaNetURI();
      assertFalse(uri1.isWebSocket());
      assertEquals("h", uri1.getFragment());
      assertEquals(80, uri1.getSchemeDefaultPort());
      assertEquals("/:///@host:-666/?host", uRI0.toString());
      assertEquals((-666), uri0.getExplicitPort());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Uri uri0 = new Uri("ro", "", "ro", 0, "", "ro", "");
      URI uRI0 = uri0.toJavaNetURI();
      assertFalse(uri0.isWebSocket());
      assertEquals("ro://@ro:0?ro", uRI0.toString());
      assertEquals("", uri0.getFragment());
      assertEquals(80, uri0.getSchemeDefaultPort());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Uri uri0 = new Uri("http", "http", "http", 1, "", ":", "");
      URI uRI0 = uri0.toJavaNetURI();
      assertEquals("", uri0.getFragment());
      assertEquals("http://http@http:1?:", uRI0.toString());
      assertFalse(uri0.isWebSocket());
      assertFalse(uri0.isSecured());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Uri uri0 = new Uri("host", "/", "host", (-666), "/", "host", "h");
      URI uRI0 = uri0.toJavaNetURI();
      assertEquals("h", uri0.getFragment());
      assertFalse(uri0.isWebSocket());
      assertFalse(uri0.isSecured());
      assertEquals("host:///@host:-666/?host", uRI0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Uri uri0 = new Uri("D#2ML", "D#2ML", "D#2ML", (-2084441635), (String) null, (String) null, "D#2ML");
      boolean boolean0 = uri0.isWebSocket();
      assertEquals("D#2ML", uri0.getFragment());
      assertEquals("D#2ML", uri0.getScheme());
      assertFalse(boolean0);
      assertEquals("D#2ML", uri0.getHost());
      assertFalse(uri0.isSecured());
      assertEquals("D#2ML", uri0.getUserInfo());
      assertEquals((-2084441635), uri0.getPort());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Uri uri0 = new Uri("wss", "kV$}!6_97rIf!O", "kV$}!6_97rIf!O", 0, "", "wss", "kV$}!6_97rIf!O");
      boolean boolean0 = uri0.isSecured();
      assertEquals("kV$}!6_97rIf!O", uri0.getHost());
      assertTrue(boolean0);
      assertEquals("", uri0.getPath());
      assertEquals("kV$}!6_97rIf!O", uri0.getFragment());
      assertEquals("wss", uri0.getQuery());
      assertTrue(uri0.isWebSocket());
      assertEquals("kV$}!6_97rIf!O", uri0.getUserInfo());
      assertEquals(0, uri0.getPort());
      assertEquals("wss", uri0.getScheme());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Uri uri0 = new Uri("}s", "H:Bi22vA(pjak&KTc", "}s", 0, "ws", "", "ws");
      String string0 = uri0.getUserInfo();
      assertEquals("ws", uri0.getPath());
      assertEquals(80, uri0.getSchemeDefaultPort());
      assertEquals("}s", uri0.getScheme());
      assertEquals("}s", uri0.getHost());
      assertEquals("", uri0.getQuery());
      assertEquals("H:Bi22vA(pjak&KTc", string0);
      assertEquals(0, uri0.getPort());
      assertFalse(uri0.isWebSocket());
      assertEquals("ws", uri0.getFragment());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Uri uri0 = new Uri("\"c.QW?bDaM1.Y.q", "", "\"c.QW?bDaM1.Y.q", 91, "\"c.QW?bDaM1.Y.q", " could not be parsed into a proper Uri, missing scheme", ";+FUY");
      String string0 = uri0.getUserInfo();
      assertEquals("", string0);
      assertEquals("\"c.QW?bDaM1.Y.q", uri0.getHost());
      assertEquals("\"c.QW?bDaM1.Y.q", uri0.getScheme());
      assertFalse(uri0.isWebSocket());
      assertEquals(" could not be parsed into a proper Uri, missing scheme", uri0.getQuery());
      assertEquals("\"c.QW?bDaM1.Y.q", uri0.getPath());
      assertEquals(";+FUY", uri0.getFragment());
      assertEquals(80, uri0.getSchemeDefaultPort());
      assertEquals(91, uri0.getExplicitPort());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Uri uri0 = new Uri("http", ":L~~Yd?", "http", 64, "org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool");
      Uri uri1 = Uri.create(uri0, ".qmcuAgkbxc*h5)");
      String string0 = uri1.getQuery();
      assertFalse(uri1.isSecured());
      assertNull(string0);
      assertEquals("http", uri1.getHost());
      assertEquals(".qmcuAgkbxc*h5)", uri1.getPath());
      assertEquals(":L~~Yd?", uri1.getUserInfo());
      assertFalse(uri1.isWebSocket());
      assertEquals(64, uri1.getExplicitPort());
      assertEquals("org.asynchttpclient.util.StringBuilderPool", uri0.getFragment());
      assertEquals(64, uri0.getPort());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Uri uri0 = new Uri("/", "/", "v", (-1448), "v", "", "/");
      String string0 = uri0.getQuery();
      assertFalse(uri0.isWebSocket());
      assertEquals("v", uri0.getHost());
      assertEquals("v", uri0.getPath());
      assertEquals("/", uri0.getScheme());
      assertEquals("", string0);
      assertEquals("/", uri0.getFragment());
      assertEquals("/", uri0.getUserInfo());
      assertEquals((-1448), uri0.getPort());
      assertFalse(uri0.isSecured());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", 0, "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      int int0 = uri0.getPort();
      assertEquals(":M?tkc+F/.qX", uri0.getFragment());
      assertFalse(uri0.isWebSocket());
      assertEquals(0, int0);
      assertEquals("4Pt+P|-G/'V^5.Zng", uri0.getPath());
      assertEquals("osZV\">{U{y\"<PIN", uri0.getHost());
      assertEquals("", uri0.getQuery());
      assertEquals(":M?tkc+F/.qX", uri0.getScheme());
      assertEquals(80, uri0.getSchemeDefaultPort());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZjy!{U{y\"<PIN", 24, "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      int int0 = uri0.getPort();
      assertEquals(24, int0);
      assertEquals("", uri0.getQuery());
      assertEquals(":M?tkc+F/.qX", uri0.getScheme());
      assertEquals(":M?tkc+F/.qX", uri0.getFragment());
      assertFalse(uri0.isWebSocket());
      assertEquals("4Pt+P|-G/'V^5.Zng", uri0.getPath());
      assertEquals("osZjy!{U{y\"<PIN", uri0.getHost());
      assertEquals(80, uri0.getSchemeDefaultPort());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Uri uri0 = new Uri("S3R$ *P*VG. @JK", "", "S3R$ *P*VG. @JK", 1598, "S3R$ *P*VG. @JK", "", "");
      String string0 = uri0.getPath();
      assertFalse(uri0.isWebSocket());
      assertEquals("", uri0.getQuery());
      assertEquals("", uri0.getUserInfo());
      assertEquals(80, uri0.getSchemeDefaultPort());
      assertEquals("S3R$ *P*VG. @JK", uri0.getScheme());
      assertEquals("S3R$ *P*VG. @JK", string0);
      assertEquals("S3R$ *P*VG. @JK", uri0.getHost());
      assertEquals(1598, uri0.getExplicitPort());
      assertEquals("", uri0.getFragment());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Uri uri0 = new Uri("503$Wbn", "503$Wbn", "503$Wbn", 1626, "", "", "://");
      String string0 = uri0.getPath();
      assertEquals("503$Wbn", uri0.getHost());
      assertEquals("", string0);
      assertEquals("503$Wbn", uri0.getUserInfo());
      assertEquals("", uri0.getQuery());
      assertEquals("503$Wbn", uri0.getScheme());
      assertEquals(80, uri0.getSchemeDefaultPort());
      assertFalse(uri0.isWebSocket());
      assertEquals("://", uri0.getFragment());
      assertEquals(1626, uri0.getExplicitPort());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Uri uri0 = new Uri("org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool", 0, "org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool", (String) null);
      String string0 = uri0.getFragment();
      assertEquals("org.asynchttpclient.util.StringBuilderPool", uri0.getQuery());
      assertEquals(80, uri0.getSchemeDefaultPort());
      assertEquals("org.asynchttpclient.util.StringBuilderPool", uri0.getPath());
      assertEquals("org.asynchttpclient.util.StringBuilderPool", uri0.getHost());
      assertNull(string0);
      assertEquals("org.asynchttpclient.util.StringBuilderPool", uri0.getUserInfo());
      assertEquals("org.asynchttpclient.util.StringBuilderPool", uri0.getScheme());
      assertEquals(0, uri0.getPort());
      assertFalse(uri0.isWebSocket());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Uri uri0 = new Uri("https", "~N7tv<]Ic;dDA,", "~N7tv<]Ic;dDA,", 512, "https", "~N7tv<]Ic;dDA,", "");
      String string0 = uri0.getFragment();
      assertEquals("~N7tv<]Ic;dDA,", uri0.getHost());
      assertTrue(uri0.isSecured());
      assertEquals("~N7tv<]Ic;dDA,", uri0.getUserInfo());
      assertEquals("https", uri0.getPath());
      assertEquals("", string0);
      assertEquals("https", uri0.getScheme());
      assertEquals("~N7tv<]Ic;dDA,", uri0.getQuery());
      assertFalse(uri0.isWebSocket());
      assertEquals(512, uri0.getPort());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Uri uri0 = new Uri("scheme", "scheme", "scheme", 0, "scheme", "", "");
      int int0 = uri0.getExplicitPort();
      assertEquals("", uri0.getFragment());
      assertEquals("scheme", uri0.getPath());
      assertEquals("", uri0.getQuery());
      assertFalse(uri0.isWebSocket());
      assertEquals("scheme", uri0.getHost());
      assertEquals(0, int0);
      assertEquals("scheme", uri0.getUserInfo());
      assertEquals("scheme", uri0.getScheme());
      assertEquals(80, uri0.getSchemeDefaultPort());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Uri uri0 = new Uri("https", "~N7tv<]Ic;dDA,", "~N7tv<]Ic;dDA,", 512, "https", "~N7tv<]Ic;dDA,", "");
      Uri uri1 = Uri.create(uri0, "ws");
      assertEquals("~N7tv<]Ic;dDA,", uri0.getQuery());
      assertEquals("~N7tv<]Ic;dDA,", uri1.getHost());
      assertEquals(512, uri0.getExplicitPort());
      assertEquals("~N7tv<]Ic;dDA,", uri0.getUserInfo());
      assertFalse(uri1.isWebSocket());
      assertEquals("", uri0.getFragment());
      assertEquals("https", uri0.getPath());
      assertEquals(512, uri1.getExplicitPort());
      assertTrue(uri1.isSecured());
      assertEquals("ws", uri1.getPath());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Uri uri0 = Uri.create("wss://kV$}!6_97rIf!O:0");
      assertEquals("kV$}!6_97rIf!O", uri0.getHost());
      assertEquals("wss", uri0.getScheme());
      assertTrue(uri0.isWebSocket());
      assertEquals("", uri0.getPath());
      assertEquals(443, uri0.getSchemeDefaultPort());
      assertEquals(0, uri0.getPort());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Uri uri0 = Uri.create("r://r@r could not be parsed into a proper Uri, missing scheme?r# could not be parsed into a proper Uri, missing scheme");
      assertEquals("r could not be parsed into a proper Uri, missing scheme", uri0.getHost());
      assertEquals(" could not be parsed into a proper Uri, missing scheme", uri0.getFragment());
      assertEquals(80, uri0.getExplicitPort());
      assertEquals("r", uri0.getScheme());
      assertEquals("r", uri0.getUserInfo());
      assertEquals("", uri0.getPath());
      assertEquals("r", uri0.getQuery());
      assertFalse(uri0.isWebSocket());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Uri uri0 = Uri.create("dqp://(s.T:11");
      assertEquals("dqp", uri0.getScheme());
      assertFalse(uri0.isWebSocket());
      assertEquals("", uri0.getPath());
      assertEquals("(s.T", uri0.getHost());
      assertEquals(80, uri0.getSchemeDefaultPort());
      assertEquals(11, uri0.getExplicitPort());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Uri uri0 = new Uri("7B:", "", "7B:", 0, "", "", "");
      // Undeclared exception!
      try { 
        uri0.withNewScheme((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // scheme
         //
         verifyException("org.asynchttpclient.util.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Uri uri0 = new Uri("#", "#", "#", (-1651), "", "#", "");
      // Undeclared exception!
      try { 
        uri0.withNewScheme("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // empty scheme
         //
         verifyException("org.asynchttpclient.util.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        Uri.validateSupportedScheme((Uri) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.uri.Uri", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Uri uri0 = new Uri("ZH", "ZH", "ZH", (-1), " could not be parsed into a proper Uri, missing scheme", "ZH", " could not be parsed into a proper Uri, missing scheme");
      // Undeclared exception!
      try { 
        uri0.isSameBase((Uri) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.uri.Uri", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZjy!{U{y\"<PIN", 0, (String) null, (String) null, ":M?tkc+F/.qX");
      // Undeclared exception!
      try { 
        Uri.create(uri0, "https://http:0osZjy!{U{y\"<PIN");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"0osZjy!{U{y\"<PIN\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Uri uri0 = new Uri("host", "/", "host", (-666), "/", "host", "h");
      // Undeclared exception!
      try { 
        Uri.create(uri0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // originalUrl
         //
         verifyException("org.asynchttpclient.util.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        Uri.create("https://http:24osZjy!{U{y\"<PIN");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"24osZjy!{U{y\"<PIN\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        Uri.create((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // originalUrl
         //
         verifyException("org.asynchttpclient.util.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Uri uri0 = null;
      try {
        uri0 = new Uri("?", "?", (String) null, 1643, (String) null, "?", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // host
         //
         verifyException("org.asynchttpclient.util.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Uri uri0 = null;
      try {
        uri0 = new Uri("http", "http", "", 891, "http", "", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // empty host
         //
         verifyException("org.asynchttpclient.util.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Uri uri0 = new Uri("kqXah", "kqXah", "kqXah", 31, "kqXah", (String) null, "kqXah");
      String string0 = uri0.toUrl();
      assertFalse(uri0.isWebSocket());
      assertEquals("kqXah://kqXah@kqXah:31kqXah", string0);
      assertNotNull(string0);
      assertEquals("kqXah", uri0.getFragment());
      assertEquals(80, uri0.getSchemeDefaultPort());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Uri uri0 = new Uri("NDG", "NDG", "[\"g*tk$", (-2084441645), (String) null, "~?&#IaqCK_F$]i%j_", "NDG");
      String string0 = uri0.toUrl();
      assertFalse(uri0.isWebSocket());
      assertEquals("NDG://NDG@[\"g*tk$:-2084441645?~?&#IaqCK_F$]i%j_", string0);
      assertEquals("NDG", uri0.getFragment());
      assertFalse(uri0.isSecured());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, ":M?tkc+F/.qX", (-18), ":M?tkc+F/.qX", ":M?tkc+F/.qX", ":M?tkc+F/.qX");
      String string0 = uri0.toUrl();
      assertNotNull(string0);
      assertFalse(uri0.isSecured());
      assertEquals(":M?tkc+F/.qX", uri0.getFragment());
      assertFalse(uri0.isWebSocket());
      assertEquals(":M?tkc+F/.qX://:M?tkc+F/.qX:-18:M?tkc+F/.qX?:M?tkc+F/.qX", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Uri uri0 = new Uri("\"c.QW?bDaM1.Y.q", "", "\"c.QW?bDaM1.Y.q", 91, "\"c.QW?bDaM1.Y.q", " could not be parsed into a proper Uri, missing scheme", ";+FUY");
      Uri uri1 = uri0.withNewScheme("}vb=0*d;");
      String string0 = uri1.toUrl();
      assertEquals("}vb=0*d;://@\"c.QW?bDaM1.Y.q:91\"c.QW?bDaM1.Y.q? could not be parsed into a proper Uri, missing scheme", string0);
      assertEquals(";+FUY", uri1.getFragment());
      assertFalse(uri1.isWebSocket());
      assertNotNull(string0);
      assertEquals(80, uri1.getSchemeDefaultPort());
      assertEquals(91, uri0.getPort());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Uri uri0 = new Uri("wss", "wss", "ws", (-4), "https", "osZV\">{U{y\"<PIN", ":M?tkc+F/.qX://osZV\">{U{y\"<PIN:-44Pt+P|-G/'V^5.Zng");
      int int0 = uri0.getSchemeDefaultPort();
      assertEquals(":M?tkc+F/.qX://osZV\">{U{y\"<PIN:-44Pt+P|-G/'V^5.Zng", uri0.getFragment());
      assertEquals((-4), uri0.getPort());
      assertEquals(443, int0);
      assertEquals("https", uri0.getPath());
      assertEquals("wss", uri0.getScheme());
      assertTrue(uri0.isWebSocket());
      assertEquals("wss", uri0.getUserInfo());
      assertEquals("ws", uri0.getHost());
      assertEquals("osZV\">{U{y\"<PIN", uri0.getQuery());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Uri uri0 = new Uri("NDG", "NDG", "[\"g*tk$", (-2084441645), (String) null, "~?&#IaqCK_F$]i%j_", "NDG");
      int int0 = uri0.getSchemeDefaultPort();
      assertEquals("~?&#IaqCK_F$]i%j_", uri0.getQuery());
      assertFalse(uri0.isWebSocket());
      assertEquals("NDG", uri0.getUserInfo());
      assertEquals((-2084441645), uri0.getExplicitPort());
      assertEquals("NDG", uri0.getFragment());
      assertEquals(80, int0);
      assertEquals("[\"g*tk$", uri0.getHost());
      assertEquals("NDG", uri0.getScheme());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Uri uri0 = new Uri("QI#", "M", "M", (-1), "QI#", "QI#", "M");
      int int0 = uri0.getExplicitPort();
      assertEquals("M", uri0.getFragment());
      assertEquals(80, int0);
      assertEquals("M", uri0.getHost());
      assertEquals("M", uri0.getUserInfo());
      assertEquals("QI#", uri0.getQuery());
      assertEquals("QI#", uri0.getPath());
      assertEquals("QI#", uri0.getScheme());
      assertFalse(uri0.isWebSocket());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Uri uri0 = new Uri("P", "P", "ts&(XjfO.j&", (-180), "6kx0sS~I/.M", "P", "P");
      int int0 = uri0.getExplicitPort();
      assertEquals("P", uri0.getUserInfo());
      assertFalse(uri0.isWebSocket());
      assertEquals("6kx0sS~I/.M", uri0.getPath());
      assertEquals("P", uri0.getQuery());
      assertEquals("ts&(XjfO.j&", uri0.getHost());
      assertEquals(80, uri0.getSchemeDefaultPort());
      assertEquals("P", uri0.getScheme());
      assertEquals((-180), int0);
      assertEquals("P", uri0.getFragment());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        Uri.create((Uri) null, "N:.0T,@BX\"yhm}Qw]!*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // N:.0T,@BX\"yhm}Qw]!* could not be parsed into a proper Uri, missing host
         //
         verifyException("org.asynchttpclient.uri.Uri", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        Uri.create((Uri) null, "mxr\"czX8o/D:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // mxr\"czX8o/D: could not be parsed into a proper Uri, missing scheme
         //
         verifyException("org.asynchttpclient.uri.Uri", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Uri uri0 = new Uri("scheme", "scheme", "scheme", 0, "scheme", "", "");
      String string0 = uri0.getScheme();
      assertEquals("scheme", uri0.getUserInfo());
      assertEquals("", uri0.getFragment());
      assertEquals("scheme", string0);
      assertEquals("scheme", uri0.getHost());
      assertEquals(0, uri0.getPort());
      assertFalse(uri0.isSecured());
      assertFalse(uri0.isWebSocket());
      assertEquals("", uri0.getQuery());
      assertEquals("scheme", uri0.getPath());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Uri uri0 = new Uri("#", "&uqe7KX}XQ_T0d`6d", "K2;6%]lyE3a0wy~XBs", 0, "org.asynchttpclient.uri.Uri", "#", "Z>vLBe0R?(H3`H");
      String string0 = uri0.getQuery();
      assertEquals("Z>vLBe0R?(H3`H", uri0.getFragment());
      assertEquals(0, uri0.getPort());
      assertFalse(uri0.isWebSocket());
      assertEquals("&uqe7KX}XQ_T0d`6d", uri0.getUserInfo());
      assertEquals("K2;6%]lyE3a0wy~XBs", uri0.getHost());
      assertEquals("#", uri0.getScheme());
      assertEquals("#", string0);
      assertEquals(80, uri0.getSchemeDefaultPort());
      assertEquals("org.asynchttpclient.uri.Uri", uri0.getPath());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", (-4), "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      int int0 = uri0.getPort();
      assertEquals((-4), int0);
      assertEquals("", uri0.getQuery());
      assertEquals("4Pt+P|-G/'V^5.Zng", uri0.getPath());
      assertFalse(uri0.isSecured());
      assertEquals("osZV\">{U{y\"<PIN", uri0.getHost());
      assertEquals(":M?tkc+F/.qX", uri0.getFragment());
      assertEquals(":M?tkc+F/.qX", uri0.getScheme());
      assertFalse(uri0.isWebSocket());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", (-4), "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      String string0 = uri0.getHost();
      assertEquals("4Pt+P|-G/'V^5.Zng", uri0.getPath());
      assertEquals("osZV\">{U{y\"<PIN", string0);
      assertEquals(":M?tkc+F/.qX", uri0.getFragment());
      assertFalse(uri0.isWebSocket());
      assertEquals(":M?tkc+F/.qX", uri0.getScheme());
      assertFalse(uri0.isSecured());
      assertEquals("", uri0.getQuery());
      assertEquals((-4), uri0.getExplicitPort());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Uri uri0 = new Uri(")=`P0`/xpV0^Ne", ")=`P0`/xpV0^Ne", " r0:5LV}Fq0,:zic@", 512, ")=`P0`/xpV0^Ne", " r0:5LV}Fq0,:zic@", ")=`P0`/xpV0^Ne");
      boolean boolean0 = uri0.isSecured();
      assertFalse(uri0.isWebSocket());
      assertEquals(" r0:5LV}Fq0,:zic@", uri0.getQuery());
      assertEquals(512, uri0.getPort());
      assertEquals(")=`P0`/xpV0^Ne", uri0.getScheme());
      assertFalse(boolean0);
      assertEquals(")=`P0`/xpV0^Ne", uri0.getUserInfo());
      assertEquals(")=`P0`/xpV0^Ne", uri0.getFragment());
      assertEquals(" r0:5LV}Fq0,:zic@", uri0.getHost());
      assertEquals(")=`P0`/xpV0^Ne", uri0.getPath());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", 0, "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      String string0 = uri0.getUserInfo();
      assertEquals(":M?tkc+F/.qX", uri0.getFragment());
      assertFalse(uri0.isWebSocket());
      assertEquals(0, uri0.getExplicitPort());
      assertNull(string0);
      assertEquals("4Pt+P|-G/'V^5.Zng", uri0.getPath());
      assertEquals("osZV\">{U{y\"<PIN", uri0.getHost());
      assertEquals("", uri0.getQuery());
      assertEquals(":M?tkc+F/.qX", uri0.getScheme());
      assertEquals(80, uri0.getSchemeDefaultPort());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Uri uri0 = new Uri("QI#", "M", "M", (-1), "QI#", "QI#", "M");
      String string0 = uri0.getFragment();
      assertEquals("QI#", uri0.getPath());
      assertEquals("QI#", uri0.getQuery());
      assertEquals("M", uri0.getHost());
      assertFalse(uri0.isWebSocket());
      assertEquals("QI#", uri0.getScheme());
      assertEquals("M", uri0.getUserInfo());
      assertEquals(80, uri0.getExplicitPort());
      assertEquals("M", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Uri uri0 = new Uri(":m?tkc+f/.qx", (String) null, "k{f.`m", 787, (String) null, "k{f.`m", ":m?tkc+f/.qx");
      String string0 = uri0.getPath();
      assertFalse(uri0.isWebSocket());
      assertEquals(":m?tkc+f/.qx", uri0.getFragment());
      assertNull(string0);
      assertEquals(":m?tkc+f/.qx", uri0.getScheme());
      assertEquals(80, uri0.getSchemeDefaultPort());
      assertEquals("k{f.`m", uri0.getHost());
      assertEquals("k{f.`m", uri0.getQuery());
      assertEquals(787, uri0.getExplicitPort());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Uri uri0 = new Uri(":M?[tkc+F/.qX", (String) null, ":M?[tkc+F/.qX", (-6), (String) null, ":M?[tkc+F/.qX", ":M?[tkc+F/.qX");
      Uri uri1 = uri0.withNewScheme("wss");
      Uri.validateSupportedScheme(uri1);
      assertFalse(uri0.isWebSocket());
      assertEquals(":M?[tkc+F/.qX", uri1.getHost());
      assertEquals(":M?[tkc+F/.qX", uri1.getQuery());
      assertTrue(uri1.isWebSocket());
      assertEquals(80, uri0.getSchemeDefaultPort());
      assertEquals("wss", uri1.getScheme());
      assertEquals((-6), uri1.getExplicitPort());
      assertEquals(":M?[tkc+F/.qX", uri1.getFragment());
      assertTrue(uri1.isSecured());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Uri uri0 = new Uri("ws", "ws", "ws", 1951, "ws", "ws", "ws");
      Uri.validateSupportedScheme(uri0);
      assertEquals("ws", uri0.getFragment());
      assertEquals("ws", uri0.getUserInfo());
      assertEquals(1951, uri0.getExplicitPort());
      assertEquals("ws", uri0.getScheme());
      assertEquals("ws", uri0.getHost());
      assertTrue(uri0.isWebSocket());
      assertEquals("ws", uri0.getQuery());
      assertEquals(80, uri0.getSchemeDefaultPort());
      assertEquals("ws", uri0.getPath());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Uri uri0 = new Uri("https", "http", "http", 0, "#", (String) null, "http");
      Uri.validateSupportedScheme(uri0);
      assertEquals("http", uri0.getFragment());
      assertFalse(uri0.isWebSocket());
      assertEquals("#", uri0.getPath());
      assertEquals(0, uri0.getExplicitPort());
      assertEquals("http", uri0.getUserInfo());
      assertEquals("https", uri0.getScheme());
      assertEquals("http", uri0.getHost());
      assertTrue(uri0.isSecured());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Uri uri0 = new Uri("r", "r", "r", (-1), " could not be parsed into a proper Uri, missing scheme", "r", " could not be parsed into a proper Uri, missing scheme");
      Uri uri1 = uri0.withNewScheme("http");
      Uri.validateSupportedScheme(uri1);
      assertFalse(uri1.equals((Object)uri0));
      assertEquals(80, uri1.getExplicitPort());
      assertEquals("r", uri1.getHost());
      assertEquals("r", uri1.getQuery());
      assertEquals(" could not be parsed into a proper Uri, missing scheme", uri1.getFragment());
      assertEquals("r", uri1.getUserInfo());
      assertFalse(uri1.isWebSocket());
      assertEquals(" could not be parsed into a proper Uri, missing scheme", uri1.getPath());
      assertEquals("r", uri0.getScheme());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Uri uri0 = new Uri("s", "s", "s", (-2761), "s", "s", "s");
      Uri uri1 = Uri.create(uri0, "s?s");
      boolean boolean0 = uri0.equals(uri1);
      assertEquals("s", uri1.getScheme());
      assertEquals((-2761), uri1.getPort());
      assertFalse(uri1.isWebSocket());
      assertEquals("s", uri1.getHost());
      assertEquals("s", uri1.getQuery());
      assertEquals("s", uri1.getUserInfo());
      assertFalse(boolean0);
      assertEquals("s", uri1.getPath());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Uri uri0 = new Uri("s", "s", "s", (-2761), "s", "s", "s");
      Uri uri1 = Uri.create(uri0, "s?s");
      boolean boolean0 = uri1.equals(uri0);
      assertEquals("s", uri1.getUserInfo());
      assertEquals("s", uri1.getPath());
      assertEquals("s", uri1.getHost());
      assertEquals("s", uri1.getQuery());
      assertFalse(uri1.isWebSocket());
      assertFalse(boolean0);
      assertEquals((-2761), uri0.getPort());
      assertEquals("s", uri1.getScheme());
      assertEquals(80, uri1.getSchemeDefaultPort());
      assertEquals((-2761), uri1.getPort());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Uri uri0 = new Uri(" qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", (-1073741822), " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N");
      Uri uri1 = Uri.create(uri0, "https");
      Uri uri2 = uri1.withNewScheme(" qXMAI~+zRs\u0006YWHo8N");
      boolean boolean0 = uri1.equals(uri2);
      assertTrue(boolean0);
      assertEquals("https", uri2.getPath());
      assertEquals(80, uri1.getSchemeDefaultPort());
      assertEquals(" qXMAI~+zRs\u0006YWHo8N", uri1.getUserInfo());
      assertEquals(" qXMAI~+zRs\u0006YWHo8N", uri2.getHost());
      assertEquals(" qXMAI~+zRs\u0006YWHo8N", uri0.getFragment());
      assertFalse(uri2.isWebSocket());
      assertEquals(" qXMAI~+zRs\u0006YWHo8N", uri0.getPath());
      assertEquals(" qXMAI~+zRs\u0006YWHo8N", uri0.getQuery());
      assertEquals((-1073741822), uri1.getExplicitPort());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Uri uri0 = new Uri("Fc\r&fWvh(d0$j", "Fc\r&fWvh(d0$j", "Fc\r&fWvh(d0$j", 263, "Fc\r&fWvh(d0$j", "Fc\r&fWvh(d0$j", "Fc\r&fWvh(d0$j");
      Uri uri1 = new Uri("Fc\r&fWvh(d0$j", "ws", "Fc\r&fWvh(d0$j", 263, "Fc\r&fWvh(d0$j", "ws", "ws");
      Uri uri2 = uri0.withNewQuery("ws");
      uri2.equals(uri1);
      assertFalse(uri2.isSecured());
      assertEquals("Fc\r&fWvh(d0$j", uri2.getPath());
      assertFalse(uri2.equals((Object)uri0));
      assertEquals("Fc\r&fWvh(d0$j", uri2.getUserInfo());
      assertEquals("Fc\r&fWvh(d0$j", uri2.getHost());
      assertFalse(uri1.isWebSocket());
      assertEquals("ws", uri1.getUserInfo());
      assertEquals("Fc\r&fWvh(d0$j", uri1.getPath());
      assertEquals(263, uri2.getExplicitPort());
      assertEquals("Fc\r&fWvh(d0$j", uri2.getFragment());
      assertEquals("Fc\r&fWvh(d0$j", uri2.getScheme());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Uri uri0 = new Uri("JO0o!W#8%|$98jzQ", (String) null, "JO0o!W#8%|$98jzQ", (-1075830814), "JO0o!W#8%|$98jzQ", "JO0o!W#8%|$98jzQ", "JO0o!W#8%|$98jzQ");
      Uri uri1 = new Uri("JO0o!W#8%|$98jzQ", "ws", "JO0o!W#8%|$98jzQ", (-1075830814), "JO0o!W#8%|$98jzQ", "ws", "http");
      Uri uri2 = uri0.withNewQuery("ws");
      boolean boolean0 = uri2.equals(uri1);
      assertEquals("JO0o!W#8%|$98jzQ", uri2.getHost());
      assertFalse(uri1.isWebSocket());
      assertEquals("JO0o!W#8%|$98jzQ", uri1.getPath());
      assertFalse(uri0.equals((Object)uri2));
      assertEquals("JO0o!W#8%|$98jzQ", uri2.getFragment());
      assertEquals((-1075830814), uri2.getExplicitPort());
      assertEquals("ws", uri1.getUserInfo());
      assertEquals("JO0o!W#8%|$98jzQ", uri2.getPath());
      assertEquals("http", uri1.getFragment());
      assertEquals("JO0o!W#8%|$98jzQ", uri2.getScheme());
      assertEquals("ws", uri2.getQuery());
      assertEquals((-1075830814), uri1.getPort());
      assertEquals(80, uri2.getSchemeDefaultPort());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Uri uri0 = new Uri("#", (String) null, "#", 0, (String) null, "#", "#");
      Uri uri1 = uri0.withNewQuery("#");
      boolean boolean0 = uri1.equals(uri0);
      assertEquals("#", uri0.getQuery());
      assertFalse(uri0.isWebSocket());
      assertTrue(boolean0);
      assertEquals("#", uri1.getHost());
      assertEquals("#", uri1.getFragment());
      assertEquals(80, uri1.getSchemeDefaultPort());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Uri uri0 = new Uri("ws", "ws", "ws", 1951, "ws", "ws", "ws");
      Uri uri1 = Uri.create(uri0, "ws");
      boolean boolean0 = uri0.equals(uri1);
      assertEquals("ws", uri1.getHost());
      assertEquals("ws", uri1.getUserInfo());
      assertFalse(boolean0);
      assertEquals("ws", uri0.getFragment());
      assertTrue(uri1.isWebSocket());
      assertEquals("ws", uri1.getPath());
      assertEquals(1951, uri1.getExplicitPort());
      assertFalse(uri1.isSecured());
      assertEquals(1951, uri0.getExplicitPort());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Uri uri0 = new Uri(" qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", (-1073741822), " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N");
      Uri uri1 = Uri.create(uri0, "https");
      Uri uri2 = uri1.withNewScheme("wss");
      boolean boolean0 = uri2.equals(uri1);
      assertEquals(" qXMAI~+zRs\u0006YWHo8N", uri0.getQuery());
      assertEquals(" qXMAI~+zRs\u0006YWHo8N", uri0.getPath());
      assertEquals(" qXMAI~+zRs\u0006YWHo8N", uri0.getFragment());
      assertEquals(80, uri1.getSchemeDefaultPort());
      assertEquals(443, uri2.getSchemeDefaultPort());
      assertEquals(" qXMAI~+zRs\u0006YWHo8N", uri2.getHost());
      assertEquals("https", uri2.getPath());
      assertFalse(boolean0);
      assertTrue(uri2.isWebSocket());
      assertEquals((-1073741822), uri2.getExplicitPort());
      assertFalse(uri1.isWebSocket());
      assertEquals(" qXMAI~+zRs\u0006YWHo8N", uri2.getUserInfo());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Uri uri0 = new Uri("yq", "yq", "yq", (-2236), "yq", "yq", "yq");
      Uri uri1 = Uri.create(uri0, "ws");
      uri1.equals(uri0);
      assertFalse(uri1.isWebSocket());
      assertEquals("yq", uri1.getUserInfo());
      assertEquals((-2236), uri1.getExplicitPort());
      assertEquals("yq", uri1.getHost());
      assertEquals("yq", uri0.getQuery());
      assertEquals("yq", uri1.getScheme());
      assertEquals((-2236), uri0.getExplicitPort());
      assertEquals("yq", uri0.getFragment());
      assertEquals("ws", uri1.getPath());
      assertFalse(uri1.isSecured());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZjy!{U{y\"<PIN", 0, (String) null, (String) null, ":M?tkc+F/.qX");
      Uri uri1 = Uri.create(uri0, ":");
      boolean boolean0 = uri0.equals(uri1);
      assertEquals(0, uri1.getPort());
      assertEquals(":M?tkc+F/.qX", uri1.getScheme());
      assertFalse(boolean0);
      assertEquals(":M?tkc+F/.qX", uri0.getFragment());
      assertFalse(uri1.isWebSocket());
      assertEquals("osZjy!{U{y\"<PIN", uri1.getHost());
      assertEquals("/:", uri1.getPath());
      assertEquals(80, uri1.getSchemeDefaultPort());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Uri uri0 = new Uri("NDG", "NDG", "[\"g*tk$", (-2084441645), (String) null, "~?&#IaqCK_F$]i%j_", "NDG");
      Uri uri1 = uri0.withNewQuery((String) null);
      boolean boolean0 = uri1.equals(uri0);
      assertFalse(boolean0);
      assertEquals("NDG", uri1.getUserInfo());
      assertFalse(uri1.isWebSocket());
      assertEquals("NDG", uri1.getFragment());
      assertEquals("NDG", uri1.getScheme());
      assertEquals("[\"g*tk$", uri1.getHost());
      assertEquals((-2084441645), uri1.getPort());
      assertEquals(80, uri1.getSchemeDefaultPort());
      assertEquals("NDG", uri0.getFragment());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", (-4), "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      Uri uri1 = new Uri("wss", "wss", "ws", (-4), "https", "osZV\">{U{y\"<PIN", ":M?tkc+F/.qX://osZV\">{U{y\"<PIN:-44Pt+P|-G/'V^5.Zng");
      boolean boolean0 = uri1.equals(uri0);
      assertEquals("4Pt+P|-G/'V^5.Zng", uri0.getPath());
      assertEquals(443, uri1.getSchemeDefaultPort());
      assertTrue(uri1.isWebSocket());
      assertFalse(boolean0);
      assertEquals("https", uri1.getPath());
      assertFalse(uri0.isWebSocket());
      assertEquals(":M?tkc+F/.qX://osZV\">{U{y\"<PIN:-44Pt+P|-G/'V^5.Zng", uri1.getFragment());
      assertEquals("wss", uri1.getUserInfo());
      assertEquals((-4), uri1.getPort());
      assertEquals("ws", uri1.getHost());
      assertFalse(uri0.isSecured());
      assertEquals("osZV\">{U{y\"<PIN", uri1.getQuery());
      assertEquals(":M?tkc+F/.qX", uri0.getScheme());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Uri uri0 = new Uri("#", "&uqe7KX}XQ_T0d`6d", "K2;6%]lyE3a0wy~XBs", 0, "org.asynchttpclient.uri.Uri", "#", "Z>vLBe0R?(H3`H");
      boolean boolean0 = uri0.equals("");
      assertEquals(0, uri0.getExplicitPort());
      assertEquals("#", uri0.getScheme());
      assertEquals("Z>vLBe0R?(H3`H", uri0.getFragment());
      assertEquals("org.asynchttpclient.uri.Uri", uri0.getPath());
      assertFalse(boolean0);
      assertFalse(uri0.isSecured());
      assertEquals("K2;6%]lyE3a0wy~XBs", uri0.getHost());
      assertEquals("&uqe7KX}XQ_T0d`6d", uri0.getUserInfo());
      assertEquals("#", uri0.getQuery());
      assertFalse(uri0.isWebSocket());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Uri uri0 = new Uri("NDG", "NDG", "[\"g*tk$", (-2084441645), (String) null, "~?&#IaqCK_F$]i%j_", "NDG");
      boolean boolean0 = uri0.equals((Object) null);
      assertEquals("~?&#IaqCK_F$]i%j_", uri0.getQuery());
      assertFalse(boolean0);
      assertEquals("NDG", uri0.getFragment());
      assertEquals("NDG", uri0.getScheme());
      assertEquals("NDG", uri0.getUserInfo());
      assertEquals("[\"g*tk$", uri0.getHost());
      assertFalse(uri0.isSecured());
      assertEquals((-2084441645), uri0.getExplicitPort());
      assertFalse(uri0.isWebSocket());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Uri uri0 = new Uri(" qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", (-1073741822), " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N");
      uri0.equals(uri0);
      assertEquals(" qXMAI~+zRs\u0006YWHo8N", uri0.getHost());
      assertEquals(" qXMAI~+zRs\u0006YWHo8N", uri0.getUserInfo());
      assertEquals(80, uri0.getSchemeDefaultPort());
      assertEquals(" qXMAI~+zRs\u0006YWHo8N", uri0.getScheme());
      assertEquals(" qXMAI~+zRs\u0006YWHo8N", uri0.getFragment());
      assertEquals(" qXMAI~+zRs\u0006YWHo8N", uri0.getQuery());
      assertEquals((-1073741822), uri0.getExplicitPort());
      assertFalse(uri0.isWebSocket());
      assertEquals(" qXMAI~+zRs\u0006YWHo8N", uri0.getPath());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Uri uri0 = new Uri(" qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", (-1073741822), " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N");
      Uri uri1 = Uri.create(uri0, "https");
      Uri uri2 = uri1.withNewScheme("wss");
      uri2.hashCode();
      assertEquals(" qXMAI~+zRs\u0006YWHo8N", uri0.getFragment());
      assertEquals("wss", uri2.getScheme());
      assertEquals(80, uri0.getSchemeDefaultPort());
      assertEquals(" qXMAI~+zRs\u0006YWHo8N", uri0.getQuery());
      assertTrue(uri2.isWebSocket());
      assertEquals(" qXMAI~+zRs\u0006YWHo8N", uri0.getPath());
      assertEquals(" qXMAI~+zRs\u0006YWHo8N", uri2.getUserInfo());
      assertEquals(" qXMAI~+zRs\u0006YWHo8N", uri2.getHost());
      assertEquals("https", uri2.getPath());
      assertEquals((-1073741822), uri2.getPort());
      assertEquals(443, uri2.getSchemeDefaultPort());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Uri uri0 = new Uri("org.Isynchttpcliet.uriUriParser", (String) null, "org.Isynchttpcliet.uriUriParser", 1334, (String) null, "org.Isynchttpcliet.uriUriParser", "org.Isynchttpcliet.uriUriParser");
      uri0.hashCode();
      assertEquals("org.Isynchttpcliet.uriUriParser", uri0.getScheme());
      assertEquals("org.Isynchttpcliet.uriUriParser", uri0.getHost());
      assertEquals(1334, uri0.getPort());
      assertEquals("org.Isynchttpcliet.uriUriParser", uri0.getFragment());
      assertEquals("org.Isynchttpcliet.uriUriParser", uri0.getQuery());
      assertFalse(uri0.isWebSocket());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Uri uri0 = new Uri("ZH", "ZH", "ZH", (-1), " could not be parsed into a proper Uri, missing scheme", "ZH", " could not be parsed into a proper Uri, missing scheme");
      String string0 = uri0.getNonEmptyPath();
      assertEquals("ZH", uri0.getQuery());
      assertEquals(80, uri0.getExplicitPort());
      assertEquals(" could not be parsed into a proper Uri, missing scheme", uri0.getFragment());
      assertEquals(" could not be parsed into a proper Uri, missing scheme", string0);
      assertFalse(uri0.isWebSocket());
      assertEquals("ZH", uri0.getHost());
      assertEquals("ZH", uri0.getUserInfo());
      assertEquals("ZH", uri0.getScheme());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Uri uri0 = new Uri("wss", "kV$}!6_97rIf!O", "kV$}!6_97rIf!O", 0, "", "wss", "kV$}!6_97rIf!O");
      String string0 = uri0.getNonEmptyPath();
      assertEquals("/", string0);
      assertTrue(uri0.isWebSocket());
      assertEquals("kV$}!6_97rIf!O", uri0.getUserInfo());
      assertEquals("kV$}!6_97rIf!O", uri0.getFragment());
      assertTrue(uri0.isSecured());
      assertEquals("wss", uri0.getScheme());
      assertEquals(0, uri0.getExplicitPort());
      assertEquals("wss", uri0.getQuery());
      assertEquals("kV$}!6_97rIf!O", uri0.getHost());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Uri uri0 = new Uri("lso", "lso", "lso", 106, "lso", "lso", "lso");
      Uri uri1 = new Uri("lso", "wss", "wss", 106, "https", "ws", "wss");
      boolean boolean0 = uri0.isSameBase(uri1);
      assertEquals("lso", uri1.getScheme());
      assertEquals("ws", uri1.getQuery());
      assertEquals("https", uri1.getPath());
      assertEquals("lso", uri0.getPath());
      assertEquals("lso", uri0.getUserInfo());
      assertFalse(boolean0);
      assertFalse(uri1.isWebSocket());
      assertEquals("lso", uri0.getHost());
      assertEquals(106, uri1.getExplicitPort());
      assertEquals("wss", uri1.getFragment());
      assertEquals("wss", uri1.getUserInfo());
      assertEquals("lso", uri0.getFragment());
      assertFalse(uri1.isSecured());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", (-4), "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      Uri uri1 = new Uri("wss", "wss", "ws", (-4), "https", "osZV\">{U{y\"<PIN", ":M?tkc+F/.qX://osZV\">{U{y\"<PIN:-44Pt+P|-G/'V^5.Zng");
      boolean boolean0 = uri0.isSameBase(uri1);
      assertEquals(":M?tkc+F/.qX://osZV\">{U{y\"<PIN:-44Pt+P|-G/'V^5.Zng", uri1.getFragment());
      assertFalse(uri0.isWebSocket());
      assertEquals(":M?tkc+F/.qX", uri0.getScheme());
      assertEquals("wss", uri1.getUserInfo());
      assertFalse(boolean0);
      assertTrue(uri1.isWebSocket());
      assertEquals("ws", uri1.getHost());
      assertEquals((-4), uri1.getExplicitPort());
      assertFalse(uri0.isSecured());
      assertEquals("https", uri1.getPath());
      assertEquals("4Pt+P|-G/'V^5.Zng", uri0.getPath());
      assertEquals("osZV\">{U{y\"<PIN", uri1.getQuery());
      assertTrue(uri1.isSecured());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Uri uri0 = new Uri("url:", ":M?tkc+F/https", "url:", 2730, "https", "https", (String) null);
      String string0 = uri0.toFullUrl();
      assertNotNull(string0);
      assertFalse(uri0.isWebSocket());
      assertEquals("url:://:M?tkc+F/https@url::2730https?https", string0);
      assertEquals(80, uri0.getSchemeDefaultPort());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Uri uri0 = new Uri("NDG", "NDG", "[\"g*tk$", (-2084441645), (String) null, "~?&#IaqCK_F$]i%j_", "NDG");
      String string0 = uri0.toFullUrl();
      assertFalse(uri0.isSecured());
      assertFalse(uri0.isWebSocket());
      assertEquals("NDG://NDG@[\"g*tk$:-2084441645?~?&#IaqCK_F$]i%j_#NDG", string0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Uri uri0 = new Uri("kqXah", "kqXah", "kqXah", 31, "kqXah", (String) null, "kqXah");
      String string0 = uri0.toRelativeUrl();
      assertEquals("kqXah", uri0.getFragment());
      assertEquals("kqXah", string0);
      assertFalse(uri0.isWebSocket());
      assertEquals("kqXah", uri0.getScheme());
      assertEquals("kqXah", uri0.getHost());
      assertEquals(80, uri0.getSchemeDefaultPort());
      assertEquals("kqXah", uri0.getUserInfo());
      assertEquals(31, uri0.getExplicitPort());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Uri uri0 = new Uri("NDG", "NDG", "[\"g*tk$", (-2084441645), (String) null, "~?&#IaqCK_F$]i%j_", "NDG");
      String string0 = uri0.toRelativeUrl();
      assertEquals("NDG", uri0.getFragment());
      assertFalse(uri0.isWebSocket());
      assertEquals("[\"g*tk$", uri0.getHost());
      assertEquals("NDG", uri0.getUserInfo());
      assertEquals((-2084441645), uri0.getExplicitPort());
      assertEquals("NDG", uri0.getScheme());
      assertEquals(80, uri0.getSchemeDefaultPort());
      assertEquals("/?~?&#IaqCK_F$]i%j_", string0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Uri uri0 = new Uri("wss", "kV$}!6_97rIf!O", "kV$}!6_97rIf!O", 0, "", "wss", "kV$}!6_97rIf!O");
      String string0 = uri0.toBaseUrl();
      assertEquals("kV$}!6_97rIf!O", uri0.getUserInfo());
      assertEquals("kV$}!6_97rIf!O", uri0.getFragment());
      assertEquals("wss", uri0.getQuery());
      assertTrue(uri0.isWebSocket());
      assertEquals("wss://kV$}!6_97rIf!O:0", string0);
      assertEquals(443, uri0.getSchemeDefaultPort());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Uri uri0 = new Uri("VS-KYBo-jHq9V", "[K]llPlJao", "HW", 80, "syizPT$|P|", "syizPT$|P|", "VS-KYBo-jHq9V");
      String string0 = uri0.toBaseUrl();
      assertFalse(uri0.isWebSocket());
      assertEquals("VS-KYBo-jHq9V://HWsyizPT$|P|", string0);
      assertEquals("VS-KYBo-jHq9V", uri0.getFragment());
      assertEquals("syizPT$|P|", uri0.getQuery());
      assertEquals("[K]llPlJao", uri0.getUserInfo());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Uri uri0 = new Uri("+6 v`G4+GFhjb08r", "+6 v`G4+GFhjb08r", "+6 v`G4+GFhjb08r", (-1), "+6 v`G4+GFhjb08r", "+6 v`G4+GFhjb08r", "+6 v`G4+GFhjb08r");
      String string0 = uri0.toBaseUrl();
      assertEquals("+6 v`G4+GFhjb08r", uri0.getUserInfo());
      assertEquals("+6 v`G4+GFhjb08r://+6 v`G4+GFhjb08r+6 v`G4+GFhjb08r", string0);
      assertEquals("+6 v`G4+GFhjb08r", uri0.getFragment());
      assertEquals("+6 v`G4+GFhjb08r", uri0.getQuery());
      assertFalse(uri0.isWebSocket());
      assertFalse(uri0.isSecured());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Uri uri0 = new Uri("r", "r", "r", (-1), " could not be parsed into a proper Uri, missing scheme", "r", " could not be parsed into a proper Uri, missing scheme");
      String string0 = uri0.toUrl();
      assertEquals("r://r@r could not be parsed into a proper Uri, missing scheme?r", string0);
      assertFalse(uri0.isWebSocket());
      assertNotNull(string0);
      assertFalse(uri0.isSecured());
      assertEquals(" could not be parsed into a proper Uri, missing scheme", uri0.getFragment());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Uri uri0 = new Uri("-{xAWr)is-%&!Y3}mjO", (String) null, "-{xAWr)is-%&!Y3}mjO", (-23), (String) null, (String) null, "-{xAWr)is-%&!Y3}mjO");
      // Undeclared exception!
      try { 
        Uri.validateSupportedScheme(uri0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The URI scheme, of the URI -{xAWr)is-%&!Y3}mjO://-{xAWr)is-%&!Y3}mjO:-23, must be equal (ignoring case) to 'http', 'https', 'ws', or 'wss'
         //
         verifyException("org.asynchttpclient.uri.Uri", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Uri uri0 = new Uri("VS-KYBo-jHq9V", "[K]llPlJao", "HW", 80, "syizPT$|P|", "syizPT$|P|", "VS-KYBo-jHq9V");
      Uri uri1 = Uri.create(uri0, "K5j");
      String string0 = uri1.toString();
      assertEquals("VS-KYBo-jHq9V://[K]llPlJao@HW:80K5j", string0);
      assertFalse(uri1.isWebSocket());
      assertEquals("VS-KYBo-jHq9V", uri0.getFragment());
      assertEquals("syizPT$|P|", uri0.getQuery());
      assertEquals("HW", uri0.getHost());
      assertNotNull(string0);
      assertEquals(80, uri0.getExplicitPort());
      assertEquals("VS-KYBo-jHq9V", uri0.getScheme());
      assertFalse(uri0.isSecured());
      assertEquals("K5j", uri1.getPath());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Uri uri0 = new Uri("r", "r", "r", (-1), " could not be parsed into a proper Uri, missing scheme", "r", " could not be parsed into a proper Uri, missing scheme");
      String string0 = uri0.getAuthority();
      assertEquals(" could not be parsed into a proper Uri, missing scheme", uri0.getFragment());
      assertEquals("r", uri0.getScheme());
      assertFalse(uri0.isWebSocket());
      assertEquals(" could not be parsed into a proper Uri, missing scheme", uri0.getPath());
      assertEquals("r", uri0.getQuery());
      assertEquals("r:80", string0);
      assertEquals("r", uri0.getUserInfo());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      // Undeclared exception!
      try { 
        Uri.create("zh:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zh: could not be parsed into a proper Uri, missing host
         //
         verifyException("org.asynchttpclient.uri.Uri", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Uri uri0 = new Uri("VS-KYBo-jHq9V", "[K]llPlJao", "HW", 80, "syizPT$|P|", "syizPT$|P|", "VS-KYBo-jHq9V");
      String string0 = uri0.getBaseUrl();
      assertEquals("VS-KYBo-jHq9V", uri0.getFragment());
      assertFalse(uri0.isWebSocket());
      assertEquals("[K]llPlJao", uri0.getUserInfo());
      assertFalse(uri0.isSecured());
      assertEquals("syizPT$|P|", uri0.getPath());
      assertEquals("syizPT$|P|", uri0.getQuery());
      assertEquals("VS-KYBo-jHq9V://HW:80", string0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Uri uri0 = new Uri("wss", "wss", "wss", 13, "", "wss", "wss");
      boolean boolean0 = uri0.isWebSocket();
      assertEquals("wss", uri0.getUserInfo());
      assertTrue(boolean0);
      assertEquals(443, uri0.getSchemeDefaultPort());
      assertEquals("wss", uri0.getFragment());
      assertEquals(13, uri0.getExplicitPort());
      assertEquals("wss", uri0.getScheme());
      assertEquals("wss", uri0.getQuery());
      assertEquals("wss", uri0.getHost());
      assertEquals("", uri0.getPath());
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Uri uri0 = new Uri("VS-KYBo-jHq9V", "[K]llPlJao", "HW", 80, "syizPT$|P|", "syizPT$|P|", "VS-KYBo-jHq9V");
      try { 
        uri0.toJavaNetURI();
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in authority at index 16: VS-KYBo-jHq9V://[K]llPlJao@HW:80syizPT$|P|?syizPT$|P|
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", (-4), "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      String string0 = uri0.toBaseUrl();
      assertEquals(80, uri0.getSchemeDefaultPort());
      assertEquals("", uri0.getQuery());
      assertEquals(":M?tkc+F/.qX", uri0.getFragment());
      assertFalse(uri0.isWebSocket());
      assertEquals(":M?tkc+F/.qX://osZV\">{U{y\"<PIN:-44Pt+P|-G/'V^5.Zng", string0);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", 0, "_/../", "osZV\">{U{y\"<PIN", ":M?tkc+F/.qX");
      // Undeclared exception!
      Uri.create(uri0, "https");
  }
}
