/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 07 15:50:07 GMT 2022
 */

package org.asynchttpclient.request.body.multipart;

import org.junit.Test;
import static org.junit.Assert.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.PipedInputStream;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.List;
import org.asynchttpclient.Param;
import org.asynchttpclient.request.body.multipart.ByteArrayPart;
import org.asynchttpclient.request.body.multipart.FilePart;
import org.asynchttpclient.request.body.multipart.InputStreamPart;
import org.asynchttpclient.request.body.multipart.StringPart;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PartBase_ESTest extends PartBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      StringPart stringPart0 = new StringPart("_J{|9", "_J{|9", "_J{|9", charset0, "_J{|9", "_J{|9");
      stringPart0.addCustomHeader("p$HS", "_J{|9");
      assertEquals("_J{|9", stringPart0.getTransferEncoding());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringPart stringPart0 = new StringPart("lT7/ao\"WZdXgxJFdI(2", "lT7/ao\"WZdXgxJFdI(2", "lT7/ao\"WZdXgxJFdI(2", (Charset) null, "lT7/ao\"WZdXgxJFdI(2", " dispositionType=");
      String string0 = stringPart0.getTransferEncoding();
      assertEquals("lT7/ao\"WZdXgxJFdI(2", stringPart0.getName());
      assertEquals(" dispositionType=", string0);
      assertEquals("lT7/ao\"WZdXgxJFdI(2", stringPart0.getContentType());
      assertEquals("lT7/ao\"WZdXgxJFdI(2", stringPart0.getContentId());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 12, 1791);
      InputStreamPart inputStreamPart0 = new InputStreamPart("", byteArrayInputStream0, "}b", 629L, "c4", (Charset) null, "", "");
      String string0 = inputStreamPart0.getTransferEncoding();
      assertEquals("c4", inputStreamPart0.getContentType());
      assertEquals("", inputStreamPart0.getContentId());
      assertEquals("", string0);
      assertEquals("", inputStreamPart0.getName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Charset charset0 = Charset.defaultCharset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart((String) null, byteArray0, "Gu", charset0);
      String string0 = byteArrayPart0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Charset charset0 = Charset.defaultCharset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("-GslQz.`T", byteArray0, "-GslQz.`T", charset0, "cQwB!fK!-sN}A`fO", ":; G,v");
      String string0 = byteArrayPart0.getName();
      assertEquals("-GslQz.`T", byteArrayPart0.getContentType());
      assertEquals("-GslQz.`T", string0);
      assertNotNull(string0);
      assertEquals(":; G,v", byteArrayPart0.getContentId());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringPart stringPart0 = new StringPart("DC1su*[W=Kl^", "Adding exclude: [{}]", "", (Charset) null);
      stringPart0.setDispositionType("org.asynchttpclient.request.body.multipart.FileLikePart");
      stringPart0.getDispositionType();
      assertEquals("DC1su*[W=Kl^", stringPart0.getName());
      assertEquals("", stringPart0.getContentType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Charset charset0 = Charset.defaultCharset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("", byteArray0, "", charset0, "$:$r..!A[");
      byteArrayPart0.setDispositionType("");
      String string0 = byteArrayPart0.getDispositionType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("$!$^``SPOr%umi", byteArray0);
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Param> list0 = Param.map2ParamList(hashMap0);
      byteArrayPart0.setCustomHeaders(list0);
      byteArrayPart0.getCustomHeaders();
      assertEquals("$!$^``SPOr%umi", byteArrayPart0.getName());
      assertEquals("application/octet-stream", byteArrayPart0.getContentType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringPart stringPart0 = new StringPart("", "");
      stringPart0.addCustomHeader("", "");
      List<Param> list0 = stringPart0.getCustomHeaders();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringPart stringPart0 = new StringPart("i", "i");
      String string0 = stringPart0.getContentType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.io.filefilter.WildcardFileFilter", "org.apache.commons.io.filefilter.WildcardFileFilter");
      FilePart filePart0 = new FilePart("org.apache.commons.io.filefilter.WildcardFileFilter", file0, "", (Charset) null);
      String string0 = filePart0.getContentType();
      assertEquals("org.apache.commons.io.filefilter.WildcardFileFilter", filePart0.getName());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      StringPart stringPart0 = new StringPart("_J{|9", "_J{|9", "_J{|9", charset0, "_J{|9", "_J{|9");
      String string0 = stringPart0.getContentId();
      assertEquals("_J{|9", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("", byteArray0, "", (Charset) null, "", "");
      String string0 = byteArrayPart0.getContentId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringPart stringPart0 = new StringPart("", "");
      String string0 = stringPart0.getTransferEncoding();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringPart stringPart0 = new StringPart("", "");
      String string0 = stringPart0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("$!$^``SPOr%umi", byteArray0);
      byteArrayPart0.getCharset();
      assertEquals("application/octet-stream", byteArrayPart0.getContentType());
      assertEquals("$!$^``SPOr%umi", byteArrayPart0.getName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      InputStreamPart inputStreamPart0 = new InputStreamPart("", pipedInputStream0, "");
      String string0 = inputStreamPart0.getContentId();
      assertNull(string0);
      assertEquals("application/octet-stream", inputStreamPart0.getContentType());
      assertEquals("", inputStreamPart0.getName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      InputStreamPart inputStreamPart0 = new InputStreamPart("", pipedInputStream0, "");
      String string0 = inputStreamPart0.getContentType();
      assertNotNull(string0);
      assertEquals("", inputStreamPart0.getName());
      assertEquals("application/octet-stream", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      StringPart stringPart0 = new StringPart("_J{|9", "_J{|9", "_J{|9", charset0, "_J{|9", "_J{|9");
      String string0 = stringPart0.getDispositionType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringPart stringPart0 = new StringPart("5/oK", "5/oK", "5/oK");
      stringPart0.addCustomHeader("5/oK", "5/oK");
      stringPart0.addCustomHeader("StringPart name=5/oK contentType=5/oK charset=UTF-8 transferEncoding=null contentId=null dispositionType=null", "StringPart name=5/oK contentType=5/oK charset=UTF-8 transferEncoding=null contentId=null dispositionType=null");
      assertEquals("5/oK", stringPart0.getContentType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringPart stringPart0 = new StringPart("5/oK", "5/oK", "5/oK");
      List<Param> list0 = stringPart0.getCustomHeaders();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringPart stringPart0 = new StringPart("5/oK", "5/oK", "5/oK");
      String string0 = stringPart0.toString();
      assertEquals("StringPart name=5/oK contentType=5/oK charset=UTF-8 transferEncoding=null contentId=null dispositionType=null", string0);
  }
}
