/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 07 15:22:49 GMT 2022
 */

package org.asynchttpclient.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.netty.util.AsciiString;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.apache.tomcat.util.buf.Utf8Encoder;
import org.asynchttpclient.AsyncHttpClientConfig;
import org.asynchttpclient.Param;
import org.asynchttpclient.Request;
import org.asynchttpclient.uri.Uri;
import org.asynchttpclient.util.HttpUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpUtils_ESTest extends HttpUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = HttpUtils.extractContentTypeBoundaryAttribute("boundary=ul6x#+");
      assertEquals("ul6x#+", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = HttpUtils.extractContentTypeBoundaryAttribute("^npw~3boundary=#");
      assertEquals("#", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Uri uri0 = new Uri("r<;)05@[[Sv$HI", "charset=", "r<;)05@[[Sv$HI", 815, ")g", "r<;)05@[[Sv$HI", "!)vGZmkd*p");
      assertEquals(815, uri0.getExplicitPort());
      assertEquals("r<;)05@[[Sv$HI", uri0.getScheme());
      assertEquals(815, uri0.getPort());
      assertFalse(uri0.isWebSocket());
      assertEquals(")g", uri0.getPath());
      assertEquals("r<;)05@[[Sv$HI", uri0.getHost());
      assertFalse(uri0.isSecured());
      assertEquals("r<;)05@[[Sv$HI", uri0.getQuery());
      assertEquals("!)vGZmkd*p", uri0.getFragment());
      assertEquals("charset=", uri0.getUserInfo());
      assertEquals(80, uri0.getSchemeDefaultPort());
      assertNotNull(uri0);
      
      String string0 = HttpUtils.originHeader(uri0);
      assertEquals("http://r<;)05@[[Sv$HI:815", string0);
      assertEquals(815, uri0.getExplicitPort());
      assertEquals("r<;)05@[[Sv$HI", uri0.getScheme());
      assertEquals(815, uri0.getPort());
      assertFalse(uri0.isWebSocket());
      assertEquals(")g", uri0.getPath());
      assertEquals("r<;)05@[[Sv$HI", uri0.getHost());
      assertFalse(uri0.isSecured());
      assertEquals("r<;)05@[[Sv$HI", uri0.getQuery());
      assertEquals("!)vGZmkd*p", uri0.getFragment());
      assertEquals("charset=", uri0.getUserInfo());
      assertEquals(80, uri0.getSchemeDefaultPort());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Uri uri0 = new Uri("Ksh}\"C,L", "Ksh}\"C,L", "=]nI`!jwX-", 318, "Ksh}\"C,L", "bW", "=]nI`!jwX-");
      assertFalse(uri0.isSecured());
      assertEquals("bW", uri0.getQuery());
      assertEquals(318, uri0.getPort());
      assertEquals("Ksh}\"C,L", uri0.getScheme());
      assertEquals(318, uri0.getExplicitPort());
      assertFalse(uri0.isWebSocket());
      assertEquals("=]nI`!jwX-", uri0.getHost());
      assertEquals("Ksh}\"C,L", uri0.getUserInfo());
      assertEquals("Ksh}\"C,L", uri0.getPath());
      assertEquals(80, uri0.getSchemeDefaultPort());
      assertEquals("=]nI`!jwX-", uri0.getFragment());
      assertNotNull(uri0);
      
      String string0 = HttpUtils.hostHeader(uri0);
      assertEquals("=]nI`!jwX-:318", string0);
      assertFalse(uri0.isSecured());
      assertEquals("bW", uri0.getQuery());
      assertEquals(318, uri0.getPort());
      assertEquals("Ksh}\"C,L", uri0.getScheme());
      assertEquals(318, uri0.getExplicitPort());
      assertFalse(uri0.isWebSocket());
      assertEquals("=]nI`!jwX-", uri0.getHost());
      assertEquals("Ksh}\"C,L", uri0.getUserInfo());
      assertEquals("Ksh}\"C,L", uri0.getPath());
      assertEquals(80, uri0.getSchemeDefaultPort());
      assertEquals("=]nI`!jwX-", uri0.getFragment());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Uri uri0 = new Uri("~(|-\"&Fv^CY[", "~(|-\"&Fv^CY[", "85JB<)]b@jIjRF", (-403371614), "", " boundary=SovFVXjAIIFeXnQ3jJ2_0ZoRnFdcfdgV2", "w5");
      assertEquals("", uri0.getPath());
      assertEquals("~(|-\"&Fv^CY[", uri0.getUserInfo());
      assertFalse(uri0.isSecured());
      assertEquals((-403371614), uri0.getPort());
      assertEquals(80, uri0.getSchemeDefaultPort());
      assertEquals(" boundary=SovFVXjAIIFeXnQ3jJ2_0ZoRnFdcfdgV2", uri0.getQuery());
      assertEquals("85JB<)]b@jIjRF", uri0.getHost());
      assertFalse(uri0.isWebSocket());
      assertEquals("w5", uri0.getFragment());
      assertEquals("~(|-\"&Fv^CY[", uri0.getScheme());
      assertEquals((-403371614), uri0.getExplicitPort());
      assertNotNull(uri0);
      
      String string0 = HttpUtils.hostHeader(uri0);
      assertEquals("85JB<)]b@jIjRF:-403371614", string0);
      assertEquals("", uri0.getPath());
      assertEquals("~(|-\"&Fv^CY[", uri0.getUserInfo());
      assertFalse(uri0.isSecured());
      assertEquals((-403371614), uri0.getPort());
      assertEquals(80, uri0.getSchemeDefaultPort());
      assertEquals(" boundary=SovFVXjAIIFeXnQ3jJ2_0ZoRnFdcfdgV2", uri0.getQuery());
      assertEquals("85JB<)]b@jIjRF", uri0.getHost());
      assertFalse(uri0.isWebSocket());
      assertEquals("w5", uri0.getFragment());
      assertEquals("~(|-\"&Fv^CY[", uri0.getScheme());
      assertEquals((-403371614), uri0.getExplicitPort());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharSequence charSequence0 = HttpUtils.filterOutBrotliFromAcceptEncoding(", br");
      assertEquals("", charSequence0);
      assertNotNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUtils.urlEncodeFormParams((List<Param>) null, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.util.HttpUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AsciiString asciiString0 = AsciiString.cached("io.netty.channel.kqueue.AbstractKQueueServerChannel$KQueueServerSocketUnsafe");
      assertTrue(asciiString0.isEntireArrayUsed());
      assertEquals(0, asciiString0.arrayOffset());
      assertFalse(asciiString0.isEmpty());
      assertEquals(76, asciiString0.length());
      assertTrue(asciiString0.parseBoolean());
      assertEquals((-1), AsciiString.INDEX_NOT_FOUND);
      assertNotNull(asciiString0);
      
      // Undeclared exception!
      try { 
        HttpUtils.patchContentTypeWithBoundaryAttribute(asciiString0, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUtils.originHeader((Uri) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.util.HttpUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUtils.hostHeader((Uri) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.util.HttpUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        HttpUtils.followRedirect(asyncHttpClientConfig0, (Request) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.util.HttpUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUtils.filterOutBrotliFromAcceptEncoding((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUtils.extractContentTypeCharsetAttribute("http.acharset=t=omain");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // t=omain
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharSequence charSequence0 = HttpUtils.filterOutBrotliFromAcceptEncoding(" boundary=6OBnz0qm2eUf4zwTWtROvm9-IdtfwLBPaYdx1, br");
      assertEquals(" boundary=6OBnz0qm2eUf4zwTWtROvm9-IdtfwLBPaYdx1", charSequence0);
      assertNotNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharSequence charSequence0 = HttpUtils.filterOutBrotliFromAcceptEncoding(";");
      assertEquals(";", charSequence0);
      assertNotNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      Param param0 = new Param("*/*", (String) null);
      assertEquals("*/*", param0.getName());
      assertNull(param0.getValue());
      assertNotNull(param0);
      
      boolean boolean0 = stack0.add(param0);
      assertTrue(boolean0);
      assertTrue(stack0.contains(param0));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("*/*", param0.getName());
      assertNull(param0.getValue());
      
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      assertEquals(1.1F, utf8Encoder0.averageBytesPerChar(), 0.01F);
      assertEquals(4.0F, utf8Encoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(utf8Encoder0);
      
      Charset charset0 = utf8Encoder0.charset();
      assertEquals(1.1F, utf8Encoder0.averageBytesPerChar(), 0.01F);
      assertEquals(4.0F, utf8Encoder0.maxBytesPerChar(), 0.01F);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
      assertTrue(stack0.contains(param0));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(1.1F, utf8Encoder0.averageBytesPerChar(), 0.01F);
      assertEquals(4.0F, utf8Encoder0.maxBytesPerChar(), 0.01F);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=5 cap=5]", byteBuffer0.toString());
      assertEquals(5, byteBuffer0.limit());
      assertEquals(5, byteBuffer0.remaining());
      assertEquals(5, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasRemaining());
      assertNotNull(byteBuffer0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Param param0 = new Param("ISY+\"", "lift is null");
      assertEquals("ISY+\"", param0.getName());
      assertEquals("lift is null", param0.getValue());
      assertNotNull(param0);
      
      boolean boolean0 = stack0.add(param0);
      assertTrue(boolean0);
      assertTrue(stack0.contains(param0));
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("ISY+\"", param0.getName());
      assertEquals("lift is null", param0.getValue());
      
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      assertEquals(1.1F, utf8Encoder0.averageBytesPerChar(), 0.01F);
      assertEquals(4.0F, utf8Encoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(utf8Encoder0);
      
      Charset charset0 = utf8Encoder0.charset();
      assertEquals(1.1F, utf8Encoder0.averageBytesPerChar(), 0.01F);
      assertEquals(4.0F, utf8Encoder0.maxBytesPerChar(), 0.01F);
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
      assertTrue(stack0.contains(param0));
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1.1F, utf8Encoder0.averageBytesPerChar(), 0.01F);
      assertEquals(4.0F, utf8Encoder0.maxBytesPerChar(), 0.01F);
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=22 cap=22]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(22, byteBuffer0.remaining());
      assertEquals(22, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(22, byteBuffer0.limit());
      assertNotNull(byteBuffer0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = HttpUtils.computeMultipartBoundary();
      //  // Unstable assertion: assertEquals(37, byteArray0.length);
      //  // Unstable assertion: assertNotNull(byteArray0);
      
      String string0 = HttpUtils.patchContentTypeWithBoundaryAttribute(";", byteArray0);
      //  // Unstable assertion: assertEquals("; boundary=75l71W0I1IHDVBavwOsf6MrA7l5dOPKtAvVX5", string0);
      //  // Unstable assertion: assertEquals(37, byteArray0.length);
      //  // Unstable assertion: assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = HttpUtils.computeMultipartBoundary();
      //  // Unstable assertion: assertEquals(35, byteArray0.length);
      //  // Unstable assertion: assertNotNull(byteArray0);
      
      String string0 = HttpUtils.patchContentTypeWithBoundaryAttribute("", byteArray0);
      //  // Unstable assertion: assertEquals(" boundary=B3tBwg5H4ZFrJDHQB0R-46NOMXK6WGmBrRV", string0);
      //  // Unstable assertion: assertEquals(35, byteArray0.length);
      //  // Unstable assertion: assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUtils.extractContentTypeCharsetAttribute("icharset=o;=dx");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // o
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = HttpUtils.extractContentTypeBoundaryAttribute(" boundary=e6xcwikbybtfytpwsfe2hgb8charset=kc1nji8, br");
      assertEquals("e6xcwikbybtfytpwsfe2hgb8charset=kc1nji8,", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = HttpUtils.extractContentTypeBoundaryAttribute("boundary=");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = HttpUtils.extractContentTypeBoundaryAttribute((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Charset charset0 = HttpUtils.extractContentTypeCharsetAttribute("");
      assertNull(charset0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      assertFalse(uri0.isSecured());
      assertEquals(80, uri0.getSchemeDefaultPort());
      assertNull(uri0.getFragment());
      assertEquals("=Ft$vI", uri0.getHost());
      assertEquals((-1), uri0.getPort());
      assertFalse(uri0.isWebSocket());
      assertEquals("lLD", uri0.getPath());
      assertEquals("+VR4W7fw;BJo>1", uri0.getScheme());
      assertEquals("o@", uri0.getQuery());
      assertEquals("o@", uri0.getUserInfo());
      assertEquals(80, uri0.getExplicitPort());
      assertNotNull(uri0);
      
      Uri uri1 = uri0.withNewScheme("https");
      assertFalse(uri1.equals((Object)uri0));
      assertFalse(uri0.isSecured());
      assertEquals(80, uri0.getSchemeDefaultPort());
      assertNull(uri0.getFragment());
      assertEquals("=Ft$vI", uri0.getHost());
      assertEquals((-1), uri0.getPort());
      assertFalse(uri0.isWebSocket());
      assertEquals("lLD", uri0.getPath());
      assertEquals("+VR4W7fw;BJo>1", uri0.getScheme());
      assertEquals("o@", uri0.getQuery());
      assertEquals("o@", uri0.getUserInfo());
      assertEquals(80, uri0.getExplicitPort());
      assertEquals("=Ft$vI", uri1.getHost());
      assertEquals(443, uri1.getSchemeDefaultPort());
      assertEquals("lLD", uri1.getPath());
      assertEquals((-1), uri1.getPort());
      assertFalse(uri1.isWebSocket());
      assertEquals("o@", uri1.getQuery());
      assertEquals("https", uri1.getScheme());
      assertEquals(443, uri1.getExplicitPort());
      assertTrue(uri1.isSecured());
      assertNull(uri1.getFragment());
      assertEquals("o@", uri1.getUserInfo());
      assertNotNull(uri1);
      assertNotSame(uri0, uri1);
      assertNotSame(uri1, uri0);
      
      String string0 = HttpUtils.originHeader(uri1);
      assertEquals("https://=Ft$vI", string0);
      assertFalse(uri0.equals((Object)uri1));
      assertFalse(uri1.equals((Object)uri0));
      assertFalse(uri0.isSecured());
      assertEquals(80, uri0.getSchemeDefaultPort());
      assertNull(uri0.getFragment());
      assertEquals("=Ft$vI", uri0.getHost());
      assertEquals((-1), uri0.getPort());
      assertFalse(uri0.isWebSocket());
      assertEquals("lLD", uri0.getPath());
      assertEquals("+VR4W7fw;BJo>1", uri0.getScheme());
      assertEquals("o@", uri0.getQuery());
      assertEquals("o@", uri0.getUserInfo());
      assertEquals(80, uri0.getExplicitPort());
      assertEquals("=Ft$vI", uri1.getHost());
      assertEquals(443, uri1.getSchemeDefaultPort());
      assertEquals("lLD", uri1.getPath());
      assertEquals((-1), uri1.getPort());
      assertFalse(uri1.isWebSocket());
      assertEquals("o@", uri1.getQuery());
      assertEquals("https", uri1.getScheme());
      assertEquals(443, uri1.getExplicitPort());
      assertTrue(uri1.isSecured());
      assertNull(uri1.getFragment());
      assertEquals("o@", uri1.getUserInfo());
      assertNotNull(string0);
      assertNotSame(uri0, uri1);
      assertNotSame(uri1, uri0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Uri uri0 = new Uri("#*NK}=rvL;%]v", (String) null, "#*NK}=rvL;%]v", 61, "", "F(z/`~V9", "F(z/`~V9");
      assertEquals("F(z/`~V9", uri0.getFragment());
      assertNull(uri0.getUserInfo());
      assertFalse(uri0.isSecured());
      assertEquals(80, uri0.getSchemeDefaultPort());
      assertEquals(61, uri0.getExplicitPort());
      assertEquals(61, uri0.getPort());
      assertEquals("#*NK}=rvL;%]v", uri0.getScheme());
      assertFalse(uri0.isWebSocket());
      assertEquals("F(z/`~V9", uri0.getQuery());
      assertEquals("", uri0.getPath());
      assertEquals("#*NK}=rvL;%]v", uri0.getHost());
      assertNotNull(uri0);
      
      String string0 = HttpUtils.originHeader(uri0);
      assertEquals("http://#*NK}=rvL;%]v:61", string0);
      assertEquals("F(z/`~V9", uri0.getFragment());
      assertNull(uri0.getUserInfo());
      assertFalse(uri0.isSecured());
      assertEquals(80, uri0.getSchemeDefaultPort());
      assertEquals(61, uri0.getExplicitPort());
      assertEquals(61, uri0.getPort());
      assertEquals("#*NK}=rvL;%]v", uri0.getScheme());
      assertFalse(uri0.isWebSocket());
      assertEquals("F(z/`~V9", uri0.getQuery());
      assertEquals("", uri0.getPath());
      assertEquals("#*NK}=rvL;%]v", uri0.getHost());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Uri uri0 = new Uri("@", "@", "htcharset=arset=omain", (-1), ", br", "@", (String) null);
      assertEquals((-1), uri0.getPort());
      assertFalse(uri0.isWebSocket());
      assertEquals("@", uri0.getScheme());
      assertEquals(", br", uri0.getPath());
      assertNull(uri0.getFragment());
      assertEquals(80, uri0.getSchemeDefaultPort());
      assertEquals(80, uri0.getExplicitPort());
      assertEquals("htcharset=arset=omain", uri0.getHost());
      assertEquals("@", uri0.getUserInfo());
      assertEquals("@", uri0.getQuery());
      assertFalse(uri0.isSecured());
      assertNotNull(uri0);
      
      String string0 = HttpUtils.hostHeader(uri0);
      assertEquals("htcharset=arset=omain", string0);
      assertEquals((-1), uri0.getPort());
      assertFalse(uri0.isWebSocket());
      assertEquals("@", uri0.getScheme());
      assertEquals(", br", uri0.getPath());
      assertNull(uri0.getFragment());
      assertEquals(80, uri0.getSchemeDefaultPort());
      assertEquals(80, uri0.getExplicitPort());
      assertEquals("htcharset=arset=omain", uri0.getHost());
      assertEquals("@", uri0.getUserInfo());
      assertEquals("@", uri0.getQuery());
      assertFalse(uri0.isSecured());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector<Param> vector0 = new Vector<Param>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      // Undeclared exception!
      try { 
        HttpUtils.urlEncodeFormParams(vector0, (Charset) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(16384);
      byte[] byteArray0 = new byte[2];
      String string0 = HttpUtils.patchContentTypeWithBoundaryAttribute(charBuffer0, byteArray0);
      // Undeclared exception!
      HttpUtils.extractContentTypeBoundaryAttribute(string0);
  }
}
