/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 07 15:54:01 GMT 2022
 */

package org.asynchttpclient.request.body.generator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import org.asynchttpclient.request.body.generator.FileBodyGenerator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileBodyGenerator_ESTest extends FileBodyGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileBodyGenerator fileBodyGenerator0 = new FileBodyGenerator(mockFile0, 1L, 0L);
      long long0 = fileBodyGenerator0.getRegionSeek();
      assertEquals(0L, fileBodyGenerator0.getRegionLength());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileBodyGenerator fileBodyGenerator0 = new FileBodyGenerator(mockFile0, (-2358L), 488L);
      long long0 = fileBodyGenerator0.getRegionSeek();
      assertEquals(488L, fileBodyGenerator0.getRegionLength());
      assertEquals((-2358L), long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFile mockFile0 = new MockFile("p");
      FileBodyGenerator fileBodyGenerator0 = new FileBodyGenerator(mockFile0);
      long long0 = fileBodyGenerator0.getRegionLength();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileBodyGenerator fileBodyGenerator0 = new FileBodyGenerator(mockFile0, 0L, 1000L);
      long long0 = fileBodyGenerator0.getRegionLength();
      assertEquals(0L, fileBodyGenerator0.getRegionSeek());
      assertEquals(1000L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      File file0 = MockFile.createTempFile("+y*^_B8!1hG'RY1>", "7vjr44oLU");
      FileBodyGenerator fileBodyGenerator0 = new FileBodyGenerator(file0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/+y*^_B8!1hG'RY1>07vjr44oLU");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "+y*^_B8!1hG'RY1>");
      File file1 = fileBodyGenerator0.getFile();
      assertEquals("/tmp/+y*^_B8!1hG'RY1>07vjr44oLU", file1.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile("./");
      FileBodyGenerator fileBodyGenerator0 = new FileBodyGenerator(mockFile0);
      File file0 = fileBodyGenerator0.getFile();
      assertTrue(file0.isFile());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileBodyGenerator fileBodyGenerator0 = null;
      try {
        fileBodyGenerator0 = new FileBodyGenerator((File) null, (-1L), (-1L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("org.asynchttpclient.util.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileBodyGenerator fileBodyGenerator0 = new FileBodyGenerator(mockFile0, 0L, (-1L));
      // Undeclared exception!
      try { 
        fileBodyGenerator0.createBody();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FileBodyGenerator.createBody isn't used, Netty direclt sends the file
         //
         verifyException("org.asynchttpclient.request.body.generator.FileBodyGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileBodyGenerator fileBodyGenerator0 = new FileBodyGenerator(mockFile0, 0L, (-1L));
      long long0 = fileBodyGenerator0.getRegionSeek();
      assertEquals(0L, long0);
      assertEquals((-1L), fileBodyGenerator0.getRegionLength());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileBodyGenerator fileBodyGenerator0 = null;
      try {
        fileBodyGenerator0 = new FileBodyGenerator((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.generator.FileBodyGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileBodyGenerator fileBodyGenerator0 = new FileBodyGenerator(mockFile0, 0L, (-1L));
      fileBodyGenerator0.getFile();
      assertEquals(0L, fileBodyGenerator0.getRegionSeek());
      assertEquals((-1L), fileBodyGenerator0.getRegionLength());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileBodyGenerator fileBodyGenerator0 = new FileBodyGenerator(mockFile0, 0L, (-1L));
      long long0 = fileBodyGenerator0.getRegionLength();
      assertEquals((-1L), long0);
      assertEquals(0L, fileBodyGenerator0.getRegionSeek());
  }
}
