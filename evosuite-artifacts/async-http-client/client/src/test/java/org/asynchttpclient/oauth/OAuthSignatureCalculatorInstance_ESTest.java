/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 07 15:37:47 GMT 2022
 */

package org.asynchttpclient.oauth;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import org.asynchttpclient.Param;
import org.asynchttpclient.oauth.ConsumerKey;
import org.asynchttpclient.oauth.OAuthSignatureCalculatorInstance;
import org.asynchttpclient.oauth.RequestToken;
import org.asynchttpclient.uri.Uri;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OAuthSignatureCalculatorInstance_ESTest extends OAuthSignatureCalculatorInstance_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OAuthSignatureCalculatorInstance oAuthSignatureCalculatorInstance0 = new OAuthSignatureCalculatorInstance();
      ConsumerKey consumerKey0 = new ConsumerKey("*", "1?6Q eB%Ks_");
      RequestToken requestToken0 = new RequestToken("^(", "");
      Uri uri0 = new Uri("y0G&5;RF`P", "", "1?6Q eB%Ks_", 38, "", " could not be parsed into a proper Uri, missing host", "");
      LinkedList<Param> linkedList0 = new LinkedList<Param>();
      LinkedList<Param> linkedList1 = new LinkedList<Param>();
      String string0 = oAuthSignatureCalculatorInstance0.computeAuthorizationHeader(consumerKey0, requestToken0, uri0, "^(", (List<Param>) linkedList0, (List<Param>) linkedList1, (long) 38, "1?6Q eB%Ks_");
      assertEquals("OAuth oauth_consumer_key=\"%2A\", oauth_token=\"%5E%28\", oauth_signature_method=\"HMAC-SHA1\", oauth_signature=\"e1KJlB1LhqXAiuQKCAQflI8cGbc%3D\", oauth_timestamp=\"38\", oauth_nonce=\"1%3F6Q%20eB%25Ks_\", oauth_version=\"1.0\"", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OAuthSignatureCalculatorInstance oAuthSignatureCalculatorInstance0 = new OAuthSignatureCalculatorInstance();
      ConsumerKey consumerKey0 = new ConsumerKey("&+F7~VMP", "&+F7~VMP");
      RequestToken requestToken0 = new RequestToken("~", (String) null);
      Uri uri0 = new Uri("xe<pl]ZU3ghVL(+;Z", "", "*", 0, "HmacSHA1", "xe<pl]ZU3ghVL(+;Z", "&+F7~VMP");
      LinkedList<Param> linkedList0 = new LinkedList<Param>();
      StringBuilder stringBuilder0 = oAuthSignatureCalculatorInstance0.signatureBaseString(consumerKey0, requestToken0, uri0, "ws", linkedList0, linkedList0, 0L, "wss");
      assertEquals("ws&xe%3Cpl%5DZU3ghVL%28%2B%3BZ%3A%2F%2F%2A%3A0HmacSHA1&oauth_consumer_key%3D%2526%252BF7~VMP%26oauth_nonce%3Dwss%26oauth_signature_method%3DHMAC-SHA1%26oauth_timestamp%3D0%26oauth_token%3D~%26oauth_version%3D1.0", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OAuthSignatureCalculatorInstance oAuthSignatureCalculatorInstance0 = new OAuthSignatureCalculatorInstance();
      ConsumerKey consumerKey0 = new ConsumerKey("&+F7~VMP", "&+F7~VMP");
      RequestToken requestToken0 = new RequestToken("~", (String) null);
      Uri uri0 = new Uri("xe<pl]ZU3ghVL(+;Z", "", "*", 0, "HmacSHA1", "xe<pl]ZU3ghVL(+;Z", "&+F7~VMP");
      LinkedList<Param> linkedList0 = new LinkedList<Param>();
      String string0 = oAuthSignatureCalculatorInstance0.computeSignature(consumerKey0, requestToken0, uri0, (String) null, linkedList0, linkedList0, 383L, "ws");
      assertEquals("sDM0w5L8xUsWyETbKNksS2wskbY=", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OAuthSignatureCalculatorInstance oAuthSignatureCalculatorInstance0 = new OAuthSignatureCalculatorInstance();
      ConsumerKey consumerKey0 = mock(ConsumerKey.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(consumerKey0).getPercentEncodedKey();
      RequestToken requestToken0 = mock(RequestToken.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(requestToken0).getKey();
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(uri0).toBaseUrl();
      // Undeclared exception!
      try { 
        oAuthSignatureCalculatorInstance0.signatureBaseString(consumerKey0, requestToken0, uri0, "|_Y|:e\"gL", (List<Param>) null, (List<Param>) null, 1L, "9AZ)c#gG`I%");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OAuthSignatureCalculatorInstance oAuthSignatureCalculatorInstance0 = new OAuthSignatureCalculatorInstance();
      ConsumerKey consumerKey0 = mock(ConsumerKey.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(consumerKey0).getPercentEncodedKey();
      RequestToken requestToken0 = mock(RequestToken.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(requestToken0).getKey();
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(uri0).toBaseUrl();
      // Undeclared exception!
      try { 
        oAuthSignatureCalculatorInstance0.computeSignature(consumerKey0, requestToken0, uri0, "", (List<Param>) null, (List<Param>) null, (-1302L), "j#%q]%|=b\"$-<9");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OAuthSignatureCalculatorInstance oAuthSignatureCalculatorInstance0 = new OAuthSignatureCalculatorInstance();
      RequestToken requestToken0 = new RequestToken("~", (String) null);
      Uri uri0 = new Uri("xe<pl]ZU3ghVL(+;Z", "", "*", 0, "HmacSHA1", "xe<pl]ZU3ghVL(+;Z", "&+F7~VMP");
      LinkedList<Param> linkedList0 = new LinkedList<Param>();
      ConsumerKey consumerKey0 = new ConsumerKey("https", (String) null);
      // Undeclared exception!
      try { 
        oAuthSignatureCalculatorInstance0.computeAuthorizationHeader(consumerKey0, requestToken0, uri0, "(iHB<;.x<", (List<Param>) linkedList0, (List<Param>) linkedList0, 1806L, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OAuthSignatureCalculatorInstance oAuthSignatureCalculatorInstance0 = new OAuthSignatureCalculatorInstance();
      ConsumerKey consumerKey0 = new ConsumerKey("", "");
      RequestToken requestToken0 = new RequestToken("", "");
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Param> list0 = Param.map2ParamList(hashMap0);
      // Undeclared exception!
      try { 
        oAuthSignatureCalculatorInstance0.computeAuthorizationHeader(consumerKey0, requestToken0, (Uri) null, "", list0, (List<Param>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.oauth.OAuthSignatureCalculatorInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OAuthSignatureCalculatorInstance oAuthSignatureCalculatorInstance0 = new OAuthSignatureCalculatorInstance();
      ConsumerKey consumerKey0 = mock(ConsumerKey.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(consumerKey0).getPercentEncodedKey();
      // Undeclared exception!
      try { 
        oAuthSignatureCalculatorInstance0.computeAuthorizationHeader(consumerKey0, (RequestToken) null, "", 3305L, "\"MqT%=h\"z@/pwo");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.oauth.OAuthSignatureCalculatorInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OAuthSignatureCalculatorInstance oAuthSignatureCalculatorInstance0 = new OAuthSignatureCalculatorInstance();
      ConsumerKey consumerKey0 = new ConsumerKey("&+F7~VMP", "&+F7~VMP");
      RequestToken requestToken0 = new RequestToken("~", (String) null);
      String string0 = oAuthSignatureCalculatorInstance0.computeAuthorizationHeader(consumerKey0, requestToken0, "xe<pl]ZU3ghVL(+;Z", 5028L, "UefLgH51a");
      assertEquals("OAuth oauth_consumer_key=\"%26%2BF7~VMP\", oauth_token=\"~\", oauth_signature_method=\"HMAC-SHA1\", oauth_signature=\"xe%3Cpl%5DZU3ghVL%28%2B%3BZ\", oauth_timestamp=\"5028\", oauth_nonce=\"UefLgH51a\", oauth_version=\"1.0\"", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OAuthSignatureCalculatorInstance oAuthSignatureCalculatorInstance0 = new OAuthSignatureCalculatorInstance();
      ConsumerKey consumerKey0 = mock(ConsumerKey.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(consumerKey0).getPercentEncodedKey();
      RequestToken requestToken0 = mock(RequestToken.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(requestToken0).getKey();
      String string0 = oAuthSignatureCalculatorInstance0.computeAuthorizationHeader(consumerKey0, requestToken0, "9bRxT]G", 2138L, "9bRxT]G");
      assertEquals("OAuth oauth_consumer_key=\"null\", oauth_signature_method=\"HMAC-SHA1\", oauth_signature=\"9bRxT%5DG\", oauth_timestamp=\"2138\", oauth_nonce=\"9bRxT]G\", oauth_version=\"1.0\"", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConsumerKey consumerKey0 = new ConsumerKey("oa%uth_nonc-", "oa%uth_nonc-");
      RequestToken requestToken0 = new RequestToken("oa%uth_nonc-", "oa%uth_nonc-");
      Uri uri0 = new Uri("oa%uth_nonc-", "oa%uth_nonc-", "oa%uth_nonc-", 25, "oa%uth_nonc-", "oa%uth_nonc-", "oa%uth_nonc-");
      LinkedList<Param> linkedList0 = new LinkedList<Param>();
      Param param0 = new Param("https", "wss");
      linkedList0.add(param0);
      OAuthSignatureCalculatorInstance oAuthSignatureCalculatorInstance0 = new OAuthSignatureCalculatorInstance();
      String string0 = oAuthSignatureCalculatorInstance0.computeAuthorizationHeader(consumerKey0, requestToken0, uri0, "ws", (List<Param>) linkedList0, (List<Param>) linkedList0, (long) 25, "oa%uth_nonc-");
      assertEquals("OAuth oauth_consumer_key=\"oa%25uth_nonc-\", oauth_token=\"oa%25uth_nonc-\", oauth_signature_method=\"HMAC-SHA1\", oauth_signature=\"np6qSP52Z5wYm8xGooBDky32s6Y%3D\", oauth_timestamp=\"25\", oauth_nonce=\"oa%25uth_nonc-\", oauth_version=\"1.0\"", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OAuthSignatureCalculatorInstance oAuthSignatureCalculatorInstance0 = new OAuthSignatureCalculatorInstance();
      ConsumerKey consumerKey0 = new ConsumerKey((String) null, "PLZED");
      RequestToken requestToken0 = new RequestToken((String) null, (String) null);
      Uri uri0 = new Uri("PLZED", "PLZED", "PLZED", (-7), (String) null, "PLZED", "PLZED");
      String string0 = oAuthSignatureCalculatorInstance0.computeAuthorizationHeader(consumerKey0, requestToken0, uri0, "https", (List<Param>) null, (List<Param>) null);
      //  // Unstable assertion: assertEquals("OAuth oauth_consumer_key=\"null\", oauth_signature_method=\"HMAC-SHA1\", oauth_signature=\"1SQa5hxvo4PjCjff%2BR5r7EtHjcM%3D\", oauth_timestamp=\"1392409281\", oauth_nonce=\"%2Fp0iELqBtb1zFGy9AkIRdQ%3D%3D\", oauth_version=\"1.0\"", string0);
  }
}
