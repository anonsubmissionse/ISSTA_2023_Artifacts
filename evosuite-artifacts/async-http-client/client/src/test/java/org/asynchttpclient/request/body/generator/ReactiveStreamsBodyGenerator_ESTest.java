/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 07 15:52:54 GMT 2022
 */

package org.asynchttpclient.request.body.generator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import io.netty.buffer.ByteBuf;
import org.asynchttpclient.request.body.Body;
import org.asynchttpclient.request.body.generator.FeedListener;
import org.asynchttpclient.request.body.generator.ReactiveStreamsBodyGenerator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.reactivestreams.Publisher;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ReactiveStreamsBodyGenerator_ESTest extends ReactiveStreamsBodyGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ReactiveStreamsBodyGenerator reactiveStreamsBodyGenerator0 = new ReactiveStreamsBodyGenerator((Publisher<ByteBuf>) null, 0L);
      Publisher<ByteBuf> publisher0 = reactiveStreamsBodyGenerator0.getPublisher();
      assertNull(publisher0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ReactiveStreamsBodyGenerator reactiveStreamsBodyGenerator0 = new ReactiveStreamsBodyGenerator((Publisher<ByteBuf>) null, 0L);
      long long0 = reactiveStreamsBodyGenerator0.getContentLength();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ReactiveStreamsBodyGenerator reactiveStreamsBodyGenerator0 = new ReactiveStreamsBodyGenerator((Publisher<ByteBuf>) null, (-1954L));
      long long0 = reactiveStreamsBodyGenerator0.getContentLength();
      assertEquals((-1954L), long0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Publisher<ByteBuf> publisher0 = (Publisher<ByteBuf>) mock(Publisher.class, new ViolatedAssumptionAnswer());
      ReactiveStreamsBodyGenerator reactiveStreamsBodyGenerator0 = new ReactiveStreamsBodyGenerator(publisher0, 1L);
      ByteBuf byteBuf0 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      reactiveStreamsBodyGenerator0.feed(byteBuf0, false);
      assertEquals(1L, reactiveStreamsBodyGenerator0.getContentLength());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Publisher<ByteBuf> publisher0 = (Publisher<ByteBuf>) mock(Publisher.class, new ViolatedAssumptionAnswer());
      ReactiveStreamsBodyGenerator reactiveStreamsBodyGenerator0 = new ReactiveStreamsBodyGenerator(publisher0, 1L);
      Body body0 = reactiveStreamsBodyGenerator0.createBody();
      assertEquals(1L, body0.getContentLength());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Publisher<ByteBuf> publisher0 = (Publisher<ByteBuf>) mock(Publisher.class, new ViolatedAssumptionAnswer());
      ReactiveStreamsBodyGenerator reactiveStreamsBodyGenerator0 = new ReactiveStreamsBodyGenerator(publisher0, 1L);
      FeedListener feedListener0 = mock(FeedListener.class, new ViolatedAssumptionAnswer());
      reactiveStreamsBodyGenerator0.setListener(feedListener0);
      assertEquals(1L, reactiveStreamsBodyGenerator0.getContentLength());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Publisher<ByteBuf> publisher0 = (Publisher<ByteBuf>) mock(Publisher.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(publisher0).toString();
      ReactiveStreamsBodyGenerator reactiveStreamsBodyGenerator0 = new ReactiveStreamsBodyGenerator(publisher0, 1L);
      reactiveStreamsBodyGenerator0.getPublisher();
      assertEquals(1L, reactiveStreamsBodyGenerator0.getContentLength());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Publisher<ByteBuf> publisher0 = (Publisher<ByteBuf>) mock(Publisher.class, new ViolatedAssumptionAnswer());
      ReactiveStreamsBodyGenerator reactiveStreamsBodyGenerator0 = new ReactiveStreamsBodyGenerator(publisher0, 1L);
      long long0 = reactiveStreamsBodyGenerator0.getContentLength();
      assertEquals(1L, long0);
  }
}
