/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 07 15:50:42 GMT 2022
 */

package org.asynchttpclient.netty.channel;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Collection;
import java.util.concurrent.TimeUnit;
import org.asynchttpclient.netty.channel.InfiniteSemaphore;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InfiniteSemaphore_ESTest extends InfiniteSemaphore_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InfiniteSemaphore infiniteSemaphore0 = InfiniteSemaphore.INSTANCE;
      int int0 = infiniteSemaphore0.availablePermits();
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InfiniteSemaphore infiniteSemaphore0 = InfiniteSemaphore.INSTANCE;
      infiniteSemaphore0.acquire();
      assertEquals(Integer.MAX_VALUE, infiniteSemaphore0.availablePermits());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InfiniteSemaphore infiniteSemaphore0 = InfiniteSemaphore.INSTANCE;
      boolean boolean0 = infiniteSemaphore0.isFair();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InfiniteSemaphore infiniteSemaphore0 = InfiniteSemaphore.INSTANCE;
      Collection<Thread> collection0 = infiniteSemaphore0.getQueuedThreads();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InfiniteSemaphore infiniteSemaphore0 = InfiniteSemaphore.INSTANCE;
      infiniteSemaphore0.release(Integer.MAX_VALUE);
      assertTrue(infiniteSemaphore0.tryAcquire());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InfiniteSemaphore infiniteSemaphore0 = InfiniteSemaphore.INSTANCE;
      boolean boolean0 = infiniteSemaphore0.tryAcquire(Integer.MAX_VALUE);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InfiniteSemaphore infiniteSemaphore0 = InfiniteSemaphore.INSTANCE;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = infiniteSemaphore0.tryAcquire((long) Integer.MAX_VALUE, timeUnit0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InfiniteSemaphore infiniteSemaphore0 = InfiniteSemaphore.INSTANCE;
      boolean boolean0 = infiniteSemaphore0.tryAcquire();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InfiniteSemaphore infiniteSemaphore0 = InfiniteSemaphore.INSTANCE;
      infiniteSemaphore0.reducePermits(Integer.MAX_VALUE);
      assertTrue(infiniteSemaphore0.tryAcquire());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InfiniteSemaphore infiniteSemaphore0 = InfiniteSemaphore.INSTANCE;
      int int0 = infiniteSemaphore0.drainPermits();
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InfiniteSemaphore infiniteSemaphore0 = InfiniteSemaphore.INSTANCE;
      infiniteSemaphore0.acquireUninterruptibly(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, infiniteSemaphore0.availablePermits());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InfiniteSemaphore infiniteSemaphore0 = InfiniteSemaphore.INSTANCE;
      infiniteSemaphore0.acquireUninterruptibly();
      assertEquals(Integer.MAX_VALUE, infiniteSemaphore0.availablePermits());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InfiniteSemaphore infiniteSemaphore0 = InfiniteSemaphore.INSTANCE;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = infiniteSemaphore0.tryAcquire(Integer.MAX_VALUE, (long) Integer.MAX_VALUE, timeUnit0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InfiniteSemaphore infiniteSemaphore0 = InfiniteSemaphore.INSTANCE;
      infiniteSemaphore0.release();
      assertEquals(Integer.MAX_VALUE, infiniteSemaphore0.drainPermits());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InfiniteSemaphore infiniteSemaphore0 = InfiniteSemaphore.INSTANCE;
      infiniteSemaphore0.acquire(Integer.MAX_VALUE);
      assertTrue(infiniteSemaphore0.isFair());
  }
}
