/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 01:20:32 GMT 2022
 */

package org.apache.commons.geometry.euclidean.oned;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.UnaryOperator;
import org.apache.commons.geometry.core.RegionLocation;
import org.apache.commons.geometry.core.Transform;
import org.apache.commons.geometry.core.partitioning.Hyperplane;
import org.apache.commons.geometry.core.partitioning.Split;
import org.apache.commons.geometry.core.partitioning.SplitLocation;
import org.apache.commons.geometry.euclidean.oned.AffineTransformMatrix1D;
import org.apache.commons.geometry.euclidean.oned.Interval;
import org.apache.commons.geometry.euclidean.oned.OrientedPoint;
import org.apache.commons.geometry.euclidean.oned.Vector1D;
import org.apache.commons.numbers.core.Precision;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Interval_ESTest extends Interval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.of(0.0, 0.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      UnaryOperator<Vector1D> unaryOperator0 = UnaryOperator.identity();
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.from(unaryOperator0);
      OrientedPoint orientedPoint1 = orientedPoint0.transform(affineTransformMatrix1D0);
      // Undeclared exception!
      try { 
        Interval.of(orientedPoint1, orientedPoint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid interval: hyperplanes have same orientation: OrientedPoint[point= (0.0), direction= (-1.0)], OrientedPoint[point= (0.0), direction= (-1.0)]
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Interval interval0 = Interval.full();
      Interval interval1 = interval0.transform((Transform<Vector1D>) null);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(0.0, 0.0, 0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, false, precision_DoubleEquivalence0);
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation((Vector1D) vector1D_Unit0);
      OrientedPoint orientedPoint1 = orientedPoint0.transform(affineTransformMatrix1D0);
      OrientedPoint orientedPoint2 = orientedPoint1.reverse();
      Interval interval0 = Interval.of(orientedPoint2, orientedPoint0);
      Interval interval1 = interval0.transform(affineTransformMatrix1D0);
      assertEquals((-1.0), interval0.getSize(), 0.01);
      assertEquals((-1.0), interval1.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.min(1603.3, precision_DoubleEquivalence0);
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(1603.3);
      Interval interval1 = interval0.transform(affineTransformMatrix1D0);
      assertEquals(Double.POSITIVE_INFINITY, interval1.getSize(), 0.01);
      assertEquals(2570570.8899999997, interval1.getMin(), 0.01);
      assertEquals(1603.3, interval0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.max((-2759.48456), precision_DoubleEquivalence0);
      Interval interval1 = interval0.transform(affineTransformMatrix1D0);
      assertTrue(interval0.isInfinite());
      assertEquals((-2759.48456), interval1.getMax(), 0.01);
      assertEquals((-2759.48456), interval0.getMax(), 0.01);
      assertFalse(interval1.hasMinBoundary());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of(0.0, 0.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      OrientedPoint orientedPoint1 = orientedPoint0.reverse();
      Interval interval1 = Interval.of(orientedPoint1, orientedPoint0);
      assertEquals(0.0, interval1.getMin(), 0.01);
      assertEquals(0.0, interval0.getMin(), 0.01);
      assertFalse(orientedPoint1.isPositiveFacing());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.min(Double.NEGATIVE_INFINITY, precision_DoubleEquivalence0);
      assertFalse(interval0.hasMaxBoundary());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.max(Double.POSITIVE_INFINITY, precision_DoubleEquivalence0);
      assertEquals(Double.NEGATIVE_INFINITY, interval0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Interval interval0 = Interval.point(370.95824183326, (Precision.DoubleEquivalence) null);
      double double0 = interval0.getSize();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, false, precision_DoubleEquivalence0);
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale((-1.0));
      OrientedPoint orientedPoint1 = orientedPoint0.transform(affineTransformMatrix1D0);
      Interval interval0 = Interval.of(orientedPoint1, orientedPoint0);
      double double0 = interval0.getSize();
      assertEquals((-2.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Interval interval0 = Interval.full();
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      assertNull(orientedPoint0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(1166.7329232, 0.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      assertEquals(1166.7329232, interval0.getSize(), 0.01);
      assertFalse(orientedPoint0.isPositiveFacing());
      assertEquals(0.0, orientedPoint0.getLocation(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.point(1386.307566, precision_DoubleEquivalence0);
      double double0 = interval0.getMin();
      assertEquals(0.0, interval0.getSize(), 0.01);
      assertEquals(1386.307566, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Interval interval0 = Interval.full();
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      assertNull(orientedPoint0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.point(0.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      assertEquals(0.0, interval0.getMin(), 0.01);
      assertTrue(orientedPoint0.isPositiveFacing());
      assertEquals(0.0, orientedPoint0.getLocation(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.max((-1177.029681), precision_DoubleEquivalence0);
      double double0 = interval0.getMax();
      assertTrue(interval0.isInfinite());
      assertEquals((-1177.029681), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.point(0.0, precision_DoubleEquivalence0);
      Vector1D vector1D0 = interval0.getCentroid();
      Vector1D vector1D1 = interval0.project(vector1D0);
      assertTrue(vector1D1.equals((Object)vector1D0));
      assertEquals(0.0, interval0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of((-2802.579228931), (-1069.845395603), precision_DoubleEquivalence0);
      Vector1D vector1D0 = interval0.getCentroid();
      assertEquals((-1936.212312267), vector1D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(0.0, 277.60882242, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        interval0.transform((Transform<Vector1D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.OrientedPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Interval interval0 = Interval.max(1326.2228774699652, (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        interval0.split((Hyperplane<Vector1D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(0.0, 0.0, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        interval0.project((Vector1D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Interval.point(Double.NEGATIVE_INFINITY, precision_DoubleEquivalence0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid interval values: [-\u221E, -\u221E]
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Interval.of((Vector1D) null, (Vector1D) null, precision_DoubleEquivalence0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      // Undeclared exception!
      try { 
        Interval.of(vector1D0, vector1D0, (Precision.DoubleEquivalence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid interval values: [\u221E, \u221E]
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Interval interval0 = Interval.point(2.409919865102884E-181, (Precision.DoubleEquivalence) null);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      OrientedPoint orientedPoint1 = interval0.getMinBoundary();
      // Undeclared exception!
      try { 
        Interval.of(orientedPoint0, orientedPoint1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.OrientedPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Interval.of(Double.NaN, Double.NaN, precision_DoubleEquivalence0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid interval values: [\uFFFD, \uFFFD]
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Interval interval0 = Interval.max((-2556.783116914), (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        interval0.contains((-1.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.OrientedPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.point((-461.7278720759529), precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        interval0.classify((Vector1D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Interval interval0 = Interval.min((-2556.783116914), (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        interval0.classify((-1294.4));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.OrientedPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.point((-1568.5505671361), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Interval interval1 = Interval.of((OrientedPoint) null, orientedPoint0);
      assertEquals(0.0, interval0.getSize(), 0.01);
      assertEquals((-1568.5505671361), interval1.getMax(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, interval1.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Interval interval0 = Interval.of(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, (Precision.DoubleEquivalence) null);
      assertFalse(interval0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(0.0, Double.NEGATIVE_INFINITY, precision_DoubleEquivalence0);
      assertTrue(interval0.isInfinite());
      assertEquals(0.0, interval0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(116.43503181).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.min(116.43503181, precision_DoubleEquivalence0);
      RegionLocation regionLocation0 = interval0.classify(116.43503181);
      assertEquals(116.43503181, interval0.getMin(), 0.01);
      assertEquals(RegionLocation.OUTSIDE, regionLocation0);
      assertFalse(interval0.isFinite());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.max(780.319272543376, precision_DoubleEquivalence0);
      RegionLocation regionLocation0 = interval0.classify(780.319272543376);
      assertEquals(780.319272543376, interval0.getMax(), 0.01);
      assertFalse(interval0.isFinite());
      assertEquals(RegionLocation.BOUNDARY, regionLocation0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.point((-2540.88), precision_DoubleEquivalence0);
      RegionLocation regionLocation0 = interval0.classify((-2540.88));
      assertEquals(0.0, interval0.getSize(), 0.01);
      assertEquals(RegionLocation.BOUNDARY, regionLocation0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.point((-1139.094493753), precision_DoubleEquivalence0);
      interval0.isInfinite();
      assertEquals(0.0, interval0.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.min(0.0, precision_DoubleEquivalence0);
      boolean boolean0 = interval0.isInfinite();
      assertEquals(0.0, interval0.getMin(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.point(0.0, precision_DoubleEquivalence0);
      double double0 = interval0.getMax();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, interval0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.min((-390.863487546476), precision_DoubleEquivalence0);
      double double0 = interval0.getMax();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals((-390.863487546476), interval0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Interval interval0 = Interval.full();
      double double0 = interval0.getMin();
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(0.0, 1431.0878063748687, precision_DoubleEquivalence0);
      double double0 = interval0.getMin();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1431.0878063748687, interval0.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of((-1277.5065134));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false, precision_DoubleEquivalence0);
      Interval interval0 = Interval.of(orientedPoint0, (OrientedPoint) null);
      RegionLocation regionLocation0 = interval0.classify(vector1D0);
      assertEquals(RegionLocation.BOUNDARY, regionLocation0);
      assertEquals(Double.POSITIVE_INFINITY, interval0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Interval.min(Double.POSITIVE_INFINITY, precision_DoubleEquivalence0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid interval values: [\u221E, \u221E]
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        Interval.max(Double.NaN, (Precision.DoubleEquivalence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid interval values: [-\u221E, \uFFFD]
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of(0.0, 0.0, precision_DoubleEquivalence0);
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      Interval interval1 = interval0.transform(affineTransformMatrix1D0);
      assertEquals(0.0, interval0.getMin(), 0.01);
      assertTrue(interval1.isFinite());
      assertEquals(0.0, interval0.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NaN;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(1.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint1 = orientedPoint0.reverse();
      // Undeclared exception!
      try { 
        Interval.of(orientedPoint1, orientedPoint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid interval: hyperplanes do not form interval: OrientedPoint[point= (NaN), direction= (1.0)], OrientedPoint[point= (NaN), direction= (-1.0)]
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(0.0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn((-189.53204134020137), 1.9563291713325808).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.point((-189.53204134020137), precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        interval0.transform(affineTransformMatrix1D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid interval: hyperplanes do not form interval: OrientedPoint[point= (-189.53204134020137), direction= (-1.0)], OrientedPoint[point= (-189.53204134020137), direction= (1.0)]
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, false, precision_DoubleEquivalence0);
      Interval interval0 = Interval.of((OrientedPoint) null, orientedPoint0);
      assertEquals(1.0, interval0.getMin(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, interval0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(0.0, 1.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Interval interval1 = Interval.of(orientedPoint0, (OrientedPoint) null);
      assertEquals(1.0, interval1.getMax(), 0.01);
      assertEquals(0.0, interval0.getMin(), 0.01);
      assertTrue(interval1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Vector1D vector1D1 = Vector1D.POSITIVE_INFINITY;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(vector1D1, vector1D0, precision_DoubleEquivalence0);
      assertFalse(interval0.hasMinBoundary());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of((-1576.4973813883212), (-1576.4973813883212), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Split<Interval> split0 = interval0.split(orientedPoint0);
      assertFalse(orientedPoint0.isPositiveFacing());
      assertEquals(SplitLocation.NEITHER, split0.getLocation());
      assertEquals(0.0, interval0.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 1.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of(0.0, 1.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Split<Interval> split0 = interval0.split(orientedPoint0);
      assertEquals(SplitLocation.PLUS, split0.getLocation());
      assertEquals(0.0, interval0.getMin(), 0.01);
      assertEquals(1.0, interval0.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.max((-189.53204134020137), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Interval interval1 = Interval.full();
      Split<Interval> split0 = interval1.split(orientedPoint0);
      assertTrue(orientedPoint0.isPositiveFacing());
      assertEquals(SplitLocation.BOTH, split0.getLocation());
      assertEquals((-189.53204134020137), orientedPoint0.getLocation(), 0.01);
      assertTrue(interval0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn((-980.43904926), (-980.43904926)).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of(1338.1161294, (-980.43904926), precision_DoubleEquivalence0);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, false, precision_DoubleEquivalence1);
      Split<Interval> split0 = interval0.split(orientedPoint0);
      assertEquals(2318.55517866, interval0.getSize(), 0.01);
      assertEquals(SplitLocation.BOTH, split0.getLocation());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.max((-189.53204134020137), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Split<Interval> split0 = interval0.split(orientedPoint0);
      assertEquals((-189.53204134020137), interval0.getMax(), 0.01);
      assertEquals(SplitLocation.MINUS, split0.getLocation());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Interval interval0 = Interval.full();
      double double0 = interval0.getSize();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertTrue(interval0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Interval interval0 = Interval.full();
      boolean boolean0 = interval0.isFull();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.max(1603.3, precision_DoubleEquivalence0);
      boolean boolean0 = interval0.isFull();
      assertTrue(interval0.isInfinite());
      assertFalse(boolean0);
      assertEquals(1603.3, interval0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(vector1D0, vector1D0, precision_DoubleEquivalence0);
      boolean boolean0 = interval0.isFull();
      assertEquals(0.0, interval0.getMin(), 0.01);
      assertEquals(0.0, interval0.getMax(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.max(0.0, precision_DoubleEquivalence0);
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      Interval interval1 = interval0.transform(affineTransformMatrix1D0);
      assertEquals(0.0, interval1.getMax(), 0.01);
      assertEquals(0.0, interval0.getMax(), 0.01);
      assertTrue(interval0.isInfinite());
      assertFalse(interval1.isFinite());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.max(1603.3, precision_DoubleEquivalence0);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Vector1D vector1D0 = interval0.project((Vector1D) vector1D_Unit0);
      assertNotNull(vector1D0);
      assertEquals(1603.3, interval0.getMax(), 0.01);
      assertTrue(interval0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.point((-256.0), precision_DoubleEquivalence0);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      interval0.project((Vector1D) vector1D_Unit0);
      assertEquals(0.0, interval0.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(3764.46, 3764.46, precision_DoubleEquivalence0);
      Vector1D vector1D0 = interval0.getCentroid();
      assertNotNull(vector1D0);
      
      Interval interval1 = Interval.of(1.0, 3764.46, (Precision.DoubleEquivalence) null);
      Vector1D vector1D1 = interval1.project(vector1D0);
      assertTrue(vector1D1.equals((Object)vector1D0));
      assertEquals(3763.46, interval1.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of((-1277.5065134));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false, precision_DoubleEquivalence0);
      Interval interval0 = Interval.of(orientedPoint0, (OrientedPoint) null);
      Vector1D vector1D1 = interval0.project(vector1D0);
      assertNotNull(vector1D1);
      assertFalse(interval0.hasMaxBoundary());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(1338.1161294, (-980.43904926), precision_DoubleEquivalence0);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Vector1D vector1D0 = interval0.project((Vector1D) vector1D_Unit0);
      assertEquals(1338.1161294, interval0.getMax(), 0.01);
      assertEquals((-980.43904926), vector1D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Interval interval0 = Interval.full();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint((Vector1D) null, true, precision_DoubleEquivalence0);
      Vector1D.Unit vector1D_Unit0 = orientedPoint0.getDirection();
      Vector1D vector1D0 = interval0.project((Vector1D) vector1D_Unit0);
      assertNull(vector1D0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn((-980.43904926), (-980.43904926)).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of(1338.1161294, (-980.43904926), precision_DoubleEquivalence0);
      boolean boolean0 = interval0.contains(Double.POSITIVE_INFINITY);
      assertTrue(boolean0);
      assertEquals(2318.55517866, interval0.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn((-524.73524298), Double.POSITIVE_INFINITY).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of((Vector1D) vector1D_Unit0, (Vector1D) vector1D_Unit0, precision_DoubleEquivalence0);
      boolean boolean0 = interval0.contains(vector1D_Unit0);
      assertEquals(0.0, interval0.getSize(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.min(0.0, precision_DoubleEquivalence0);
      Vector1D vector1D0 = Vector1D.NaN;
      boolean boolean0 = interval0.contains(vector1D0);
      assertFalse(boolean0);
      assertEquals(0.0, interval0.getMin(), 0.01);
      assertFalse(interval0.hasMaxBoundary());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.25).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.max(780.319272543376, precision_DoubleEquivalence0);
      RegionLocation regionLocation0 = interval0.classify(780.319272543376);
      assertEquals(780.319272543376, interval0.getMax(), 0.01);
      assertEquals(RegionLocation.OUTSIDE, regionLocation0);
      assertFalse(interval0.isFinite());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(4254.0, 4254.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of(vector1D0, vector1D0, precision_DoubleEquivalence0);
      boolean boolean0 = interval0.contains(4254.0);
      assertFalse(boolean0);
      assertEquals(0.0, interval0.getMin(), 0.01);
      assertEquals(0.0, interval0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Interval interval0 = Interval.of((OrientedPoint) null, (OrientedPoint) null);
      RegionLocation regionLocation0 = interval0.classify(780.319272543376);
      assertEquals(RegionLocation.INSIDE, regionLocation0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of((Vector1D) vector1D_Unit0, (Vector1D) vector1D_Unit0, precision_DoubleEquivalence0);
      boolean boolean0 = interval0.isFinite();
      assertTrue(boolean0);
      assertEquals(0.0, interval0.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Interval interval0 = Interval.full();
      boolean boolean0 = interval0.isFinite();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.min((-390.863487546476), precision_DoubleEquivalence0);
      Vector1D vector1D0 = interval0.getCentroid();
      assertNull(vector1D0);
      assertEquals((-390.863487546476), interval0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Interval interval0 = Interval.of((OrientedPoint) null, (OrientedPoint) null);
      boolean boolean0 = interval0.isInfinite();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(vector1D0, vector1D0, precision_DoubleEquivalence0);
      boolean boolean0 = interval0.hasMaxBoundary();
      assertEquals(0.0, interval0.getMax(), 0.01);
      assertEquals(0.0, interval0.getMin(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Interval interval0 = Interval.full();
      boolean boolean0 = interval0.hasMaxBoundary();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Interval interval0 = Interval.min((-2555.8158955202953), (Precision.DoubleEquivalence) null);
      boolean boolean0 = interval0.hasMinBoundary();
      assertTrue(boolean0);
      assertEquals((-2555.8158955202953), interval0.getMin(), 0.01);
      assertTrue(interval0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.max((-189.53204134020137), precision_DoubleEquivalence0);
      String string0 = interval0.toString();
      assertEquals("Interval[min= -Infinity, max= -189.53204134020137]", string0);
      assertFalse(interval0.hasMinBoundary());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(0.0, 1.0, precision_DoubleEquivalence0);
      boolean boolean0 = interval0.isEmpty();
      assertEquals(1.0, interval0.getSize(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, interval0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(3764.46, 3764.46, precision_DoubleEquivalence0);
      double double0 = interval0.getBoundarySize();
      assertEquals(0.0, interval0.getSize(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Interval interval0 = Interval.full();
      boolean boolean0 = interval0.hasMinBoundary();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(3764.46, 3764.46, precision_DoubleEquivalence0);
      interval0.toTree();
      assertEquals(0.0, interval0.getSize(), 0.01);
  }
}
