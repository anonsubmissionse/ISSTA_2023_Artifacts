/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 01:28:28 GMT 2022
 */

package org.apache.commons.geometry.euclidean.threed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.geometry.euclidean.threed.AffineTransformMatrix3D;
import org.apache.commons.geometry.euclidean.threed.EmbeddingPlane;
import org.apache.commons.geometry.euclidean.threed.Plane;
import org.apache.commons.geometry.euclidean.threed.SimpleTriangle3D;
import org.apache.commons.geometry.euclidean.threed.Vector3D;
import org.apache.commons.geometry.euclidean.threed.rotation.AxisSequence;
import org.apache.commons.geometry.euclidean.threed.rotation.QuaternionRotation;
import org.apache.commons.numbers.core.Precision;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleTriangle3D_ESTest extends SimpleTriangle3D_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D((Plane) null, vector3D0, vector3D0, vector3D0);
      boolean boolean0 = simpleTriangle3D0.isInfinite();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Plane plane0 = new Plane(vector3D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(embeddingPlane0, (Vector3D) null, (Vector3D) null, (Vector3D) null);
      Vector3D vector3D0 = simpleTriangle3D0.getPoint3();
      assertNull(vector3D0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D((Plane) null, vector3D0, vector3D0, vector3D0);
      Vector3D vector3D1 = simpleTriangle3D0.getPoint3();
      assertEquals(Double.NaN, vector3D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Plane plane0 = new Plane(vector3D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(embeddingPlane0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      Vector3D vector3D0 = simpleTriangle3D0.getPoint3();
      assertSame(vector3D_Unit0, vector3D0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D((Plane) null, vector3D0, vector3D0, vector3D0);
      Vector3D vector3D1 = simpleTriangle3D0.getPoint3();
      assertEquals(3, vector3D1.getDimension());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Plane plane0 = new Plane(vector3D_Unit0, (-1011.20471493188), (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(embeddingPlane0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createTranslation((-1011.20471493188), (-1011.20471493188), (-1011.20471493188));
      SimpleTriangle3D simpleTriangle3D1 = simpleTriangle3D0.transform(affineTransformMatrix3D0);
      Vector3D vector3D0 = simpleTriangle3D1.getPoint3();
      assertFalse(vector3D0.isNaN());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D((Plane) null, (Vector3D) null, (Vector3D) null, (Vector3D) null);
      Vector3D vector3D0 = simpleTriangle3D0.getPoint2();
      assertNull(vector3D0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Plane plane0 = new Plane(vector3D_Unit0, 3148.377492271555, (Precision.DoubleEquivalence) null);
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(plane0, vector3D_Unit0, vector3D0, vector3D_Unit0);
      Vector3D vector3D1 = simpleTriangle3D0.getPoint2();
      assertSame(vector3D0, vector3D1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Plane plane0 = new Plane(vector3D_Unit0, 2384.4780395627004, (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      Vector3D vector3D0 = Vector3D.NaN;
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(embeddingPlane0, vector3D_Unit0, vector3D0, vector3D_Unit0);
      Vector3D vector3D1 = simpleTriangle3D0.getPoint2();
      assertFalse(vector3D1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Plane plane0 = new Plane(vector3D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(embeddingPlane0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      Vector3D vector3D0 = simpleTriangle3D0.getPoint2();
      assertSame(vector3D_Unit0, vector3D0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Plane plane0 = new Plane(vector3D_Unit0, 3148.377492271555, (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(embeddingPlane0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      Vector3D vector3D0 = simpleTriangle3D0.getPoint2();
      assertEquals(0.0, vector3D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from((-3578.751744), 1436.9786684800968, (-3578.751744));
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D((Plane) null, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      Vector3D vector3D0 = simpleTriangle3D0.getPoint2();
      assertEquals((-0.6802206594318344), vector3D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Plane plane0 = new Plane((Vector3D.Unit) null, 0.0, (Precision.DoubleEquivalence) null);
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(plane0, (Vector3D) null, (Vector3D) null, (Vector3D) null);
      Vector3D vector3D0 = simpleTriangle3D0.getPoint1();
      assertNull(vector3D0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Vector3D vector3D1 = Vector3D.NaN;
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D((Plane) null, vector3D1, vector3D0, vector3D0);
      Vector3D vector3D2 = simpleTriangle3D0.getPoint1();
      assertTrue(vector3D2.isNaN());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D((Plane) null, vector3D0, vector3D0, vector3D0);
      Vector3D vector3D1 = simpleTriangle3D0.getPoint1();
      assertEquals(Double.POSITIVE_INFINITY, vector3D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D((Plane) null, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      Vector3D vector3D0 = simpleTriangle3D0.getPoint1();
      assertSame(vector3D0, vector3D_Unit0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Plane plane0 = new Plane(vector3D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(embeddingPlane0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      Vector3D vector3D0 = simpleTriangle3D0.getPoint1();
      assertEquals((-1.0), vector3D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Plane plane0 = new Plane(vector3D_Unit0, Double.NEGATIVE_INFINITY, (Precision.DoubleEquivalence) null);
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(plane0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      Vector3D vector3D0 = simpleTriangle3D0.getPoint1();
      assertFalse(vector3D0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D((Plane) null, vector3D0, vector3D0, vector3D0);
      Vector3D vector3D1 = simpleTriangle3D0.getCentroid();
      assertEquals(Double.NaN, vector3D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Plane plane0 = new Plane(vector3D_Unit0, 3148.377492271555, (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(embeddingPlane0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      Vector3D vector3D0 = simpleTriangle3D0.getCentroid();
      assertFalse(vector3D0.isNaN());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D((Plane) null, vector3D0, vector3D0, vector3D0);
      Vector3D vector3D1 = simpleTriangle3D0.getCentroid();
      assertEquals(Double.POSITIVE_INFINITY, vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D((Plane) null, (Vector3D) null, (Vector3D) null, (Vector3D) null);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      // Undeclared exception!
      try { 
        simpleTriangle3D0.transform(quaternionRotation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.SimpleTriangle3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Plane plane0 = new Plane(vector3D_Unit0, 2073.0329836, (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(embeddingPlane0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createTranslation(Double.NEGATIVE_INFINITY, (-1.0), 2073.0329836);
      // Undeclared exception!
      try { 
        simpleTriangle3D0.transform(affineTransformMatrix3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: NaN
         //
         verifyException("org.apache.commons.geometry.euclidean.internal.Vectors", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis1();
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D((Plane) null, vector3D0, vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        simpleTriangle3D0.reverse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.SimpleTriangle3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D((Plane) null, (Vector3D) null, (Vector3D) null, (Vector3D) null);
      // Undeclared exception!
      try { 
        simpleTriangle3D0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.SimpleTriangle3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D((Plane) null, (Vector3D) null, (Vector3D) null, (Vector3D) null);
      // Undeclared exception!
      try { 
        simpleTriangle3D0.getCentroid();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Plane plane0 = new Plane(vector3D_Unit0, (-1011.20471493188), (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(embeddingPlane0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createTranslation((-1011.20471493188), (-1011.20471493188), (-1011.20471493188));
      SimpleTriangle3D simpleTriangle3D1 = simpleTriangle3D0.transform(affineTransformMatrix3D0);
      Vector3D vector3D0 = simpleTriangle3D1.getCentroid();
      assertFalse(vector3D0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Plane plane0 = new Plane(vector3D_Unit0, (-1011.20471493188), (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(embeddingPlane0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      Vector3D vector3D0 = simpleTriangle3D0.getCentroid();
      assertEquals(0.0, vector3D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D((Plane) null, (Vector3D) null, (Vector3D) null, (Vector3D) null);
      List<Vector3D> list0 = simpleTriangle3D0.getVertices();
      assertEquals(3, list0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Plane plane0 = new Plane(vector3D_Unit0, (-1011.20471493188), (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(embeddingPlane0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      double double0 = simpleTriangle3D0.getSize();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Plane plane0 = new Plane(vector3D_Unit0, (-1011.20471493188), (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(embeddingPlane0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      SimpleTriangle3D simpleTriangle3D1 = simpleTriangle3D0.reverse();
      assertNotSame(simpleTriangle3D0, simpleTriangle3D1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Plane plane0 = new Plane(vector3D_Unit0, (-1011.20471493188), (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(embeddingPlane0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      Vector3D vector3D0 = simpleTriangle3D0.getPoint3();
      assertEquals(3, vector3D0.getDimension());
  }
}
