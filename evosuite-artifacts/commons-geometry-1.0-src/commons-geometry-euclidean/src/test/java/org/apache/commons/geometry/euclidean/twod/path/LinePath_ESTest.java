/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 01:05:40 GMT 2022
 */

package org.apache.commons.geometry.euclidean.twod.path;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.stream.Stream;
import org.apache.commons.geometry.core.Transform;
import org.apache.commons.geometry.euclidean.oned.RegionBSPTree1D;
import org.apache.commons.geometry.euclidean.twod.AffineTransformMatrix2D;
import org.apache.commons.geometry.euclidean.twod.EmbeddedTreeLineSubset;
import org.apache.commons.geometry.euclidean.twod.Line;
import org.apache.commons.geometry.euclidean.twod.LineConvexSubset;
import org.apache.commons.geometry.euclidean.twod.Ray;
import org.apache.commons.geometry.euclidean.twod.ReverseRay;
import org.apache.commons.geometry.euclidean.twod.Segment;
import org.apache.commons.geometry.euclidean.twod.Vector2D;
import org.apache.commons.geometry.euclidean.twod.path.LinePath;
import org.apache.commons.numbers.core.Precision;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LinePath_ESTest extends LinePath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinePath.Builder linePath_Builder0 = LinePath.builder((Precision.DoubleEquivalence) null);
      Vector2D[] vector2DArray0 = new Vector2D[1];
      // Undeclared exception!
      try { 
        linePath_Builder0.prependVertices(vector2DArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unable to create line segment: no vertex precision specified
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.path.LinePath$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Stack<LineConvexSubset> stack0 = new Stack<LineConvexSubset>();
      LinePath linePath0 = new LinePath(stack0);
      stack0.add((LineConvexSubset) null);
      stack0.add((LineConvexSubset) null);
      boolean boolean0 = linePath0.isClosed();
      assertFalse(linePath0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinePath.Builder linePath_Builder0 = LinePath.builder((Precision.DoubleEquivalence) null);
      Vector2D[] vector2DArray0 = new Vector2D[0];
      LinePath.Builder linePath_Builder1 = linePath_Builder0.prependVertices(vector2DArray0);
      assertSame(linePath_Builder1, linePath_Builder0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinePath.Builder linePath_Builder0 = LinePath.builder((Precision.DoubleEquivalence) null);
      Vector2D[] vector2DArray0 = new Vector2D[0];
      LinePath.Builder linePath_Builder1 = linePath_Builder0.appendVertices(vector2DArray0);
      assertSame(linePath_Builder0, linePath_Builder1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinePath.Builder linePath_Builder0 = LinePath.builder((Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        linePath_Builder0.prepend((Vector2D) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unable to create line segment: no vertex precision specified
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.path.LinePath$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinePath.Builder linePath_Builder0 = LinePath.builder((Precision.DoubleEquivalence) null);
      LineConvexSubset lineConvexSubset0 = linePath_Builder0.getStart();
      assertNull(lineConvexSubset0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinePath.Builder linePath_Builder0 = LinePath.builder((Precision.DoubleEquivalence) null);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      // Undeclared exception!
      try { 
        linePath_Builder0.append((Vector2D) vector2D_Unit0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unable to create line segment: no vertex precision specified
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.path.LinePath$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LineConvexSubset[] lineConvexSubsetArray0 = new LineConvexSubset[0];
      LinePath linePath0 = LinePath.from(lineConvexSubsetArray0);
      assertTrue(linePath0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Stack<LineConvexSubset> stack0 = new Stack<LineConvexSubset>();
      LinePath linePath0 = new LinePath(stack0);
      stack0.add((LineConvexSubset) null);
      // Undeclared exception!
      try { 
        linePath0.simplify();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.path.LinePath", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector<LineConvexSubset> vector0 = new Vector<LineConvexSubset>();
      vector0.add((LineConvexSubset) null);
      LinePath linePath0 = new LinePath(vector0);
      // Undeclared exception!
      try { 
        linePath0.getVertexSequence();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.path.LinePath", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<LineConvexSubset> linkedList0 = new LinkedList<LineConvexSubset>();
      LinePath linePath0 = new LinePath(linkedList0);
      linkedList0.add((LineConvexSubset) null);
      // Undeclared exception!
      try { 
        linePath0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.path.LinePath", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        LinePath.fromVertices((Collection<Vector2D>) null, true, (Precision.DoubleEquivalence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.path.LinePath$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector<Vector2D> vector0 = new Vector<Vector2D>();
      Vector2D vector2D0 = Vector2D.NaN;
      vector0.add(vector2D0);
      // Undeclared exception!
      try { 
        LinePath.fromVertices((Collection<Vector2D>) vector0, true, (Precision.DoubleEquivalence) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unable to create line segment: no vertex precision specified
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.path.LinePath$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        LinePath.fromVertices((Collection<Vector2D>) null, (Precision.DoubleEquivalence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.path.LinePath$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        LinePath.fromVertexLoop((Collection<Vector2D>) null, (Precision.DoubleEquivalence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.path.LinePath$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashSet<Vector2D> hashSet0 = new HashSet<Vector2D>();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      hashSet0.add(vector2D_Unit0);
      // Undeclared exception!
      try { 
        LinePath.fromVertexLoop(hashSet0, (Precision.DoubleEquivalence) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unable to create line segment: no vertex precision specified
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.path.LinePath$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinePath linePath0 = null;
      try {
        linePath0 = new LinePath((List<LineConvexSubset>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinePath.Builder linePath_Builder0 = LinePath.builder((Precision.DoubleEquivalence) null);
      LinePath linePath0 = linePath_Builder0.build(false);
      assertTrue(linePath0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinePath.Builder linePath_Builder0 = LinePath.builder((Precision.DoubleEquivalence) null);
      LinePath linePath0 = linePath_Builder0.build(true);
      assertTrue(linePath0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinePath.Builder linePath_Builder0 = LinePath.builder((Precision.DoubleEquivalence) null);
      TreeSet<Vector2D> treeSet0 = new TreeSet<Vector2D>();
      LinePath.Builder linePath_Builder1 = linePath_Builder0.appendVertices((Collection<? extends Vector2D>) treeSet0);
      assertSame(linePath_Builder1, linePath_Builder0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinePath.Builder linePath_Builder0 = LinePath.builder((Precision.DoubleEquivalence) null);
      Stack<Vector2D> stack0 = new Stack<Vector2D>();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from((-2305.34284678423), (-2079.588));
      stack0.add((Vector2D) vector2D_Unit0);
      // Undeclared exception!
      try { 
        linePath_Builder0.appendVertices((Collection<? extends Vector2D>) stack0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unable to create line segment: no vertex precision specified
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.path.LinePath$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinePath.Builder linePath_Builder0 = LinePath.builder((Precision.DoubleEquivalence) null);
      LineConvexSubset lineConvexSubset0 = linePath_Builder0.getEnd();
      assertNull(lineConvexSubset0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RegionBSPTree1D regionBSPTree1D0 = new RegionBSPTree1D(true);
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset((Line) null, regionBSPTree1D0);
      List<LineConvexSubset> list0 = embeddedTreeLineSubset0.toConvex();
      // Undeclared exception!
      try { 
        LinePath.from((Collection<? extends LineConvexSubset>) list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.LineSubset", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashSet<ReverseRay> hashSet0 = new HashSet<ReverseRay>();
      LinePath linePath0 = LinePath.from((Collection<? extends LineConvexSubset>) hashSet0);
      boolean boolean0 = linePath0.isClosed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RegionBSPTree1D regionBSPTree1D0 = new RegionBSPTree1D(true);
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset((Line) null, regionBSPTree1D0);
      List<LineConvexSubset> list0 = embeddedTreeLineSubset0.toConvex();
      LinePath linePath0 = new LinePath(list0);
      boolean boolean0 = linePath0.isClosed();
      assertFalse(boolean0);
      assertFalse(linePath0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ArrayList<LineConvexSubset> arrayList0 = new ArrayList<LineConvexSubset>();
      LinePath linePath0 = new LinePath(arrayList0);
      arrayList0.add((LineConvexSubset) null);
      boolean boolean0 = linePath0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ArrayDeque<Segment> arrayDeque0 = new ArrayDeque<Segment>();
      LinePath linePath0 = LinePath.from((Collection<? extends LineConvexSubset>) arrayDeque0);
      boolean boolean0 = linePath0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ArrayList<LineConvexSubset> arrayList0 = new ArrayList<LineConvexSubset>();
      LinePath linePath0 = new LinePath(arrayList0);
      boolean boolean0 = linePath0.isInfinite();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ArrayList<LineConvexSubset> arrayList0 = new ArrayList<LineConvexSubset>();
      LinePath linePath0 = new LinePath(arrayList0);
      LineConvexSubset lineConvexSubset0 = linePath0.getEnd();
      assertNull(lineConvexSubset0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Stack<LineConvexSubset> stack0 = new Stack<LineConvexSubset>();
      LinePath linePath0 = new LinePath(stack0);
      stack0.add((LineConvexSubset) null);
      linePath0.getEnd();
      assertFalse(linePath0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinePath.Builder linePath_Builder0 = LinePath.builder((Precision.DoubleEquivalence) null);
      LinePath.Builder linePath_Builder1 = linePath_Builder0.setPrecision((Precision.DoubleEquivalence) null);
      assertSame(linePath_Builder1, linePath_Builder0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashSet<ReverseRay> hashSet0 = new HashSet<ReverseRay>();
      LinePath linePath0 = LinePath.from((Collection<? extends LineConvexSubset>) hashSet0);
      List<LineConvexSubset> list0 = linePath0.getElements();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinePath.Builder linePath_Builder0 = LinePath.builder((Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        linePath_Builder0.append((LineConvexSubset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.path.LinePath$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinePath.Builder linePath_Builder0 = LinePath.builder((Precision.DoubleEquivalence) null);
      LinePath linePath0 = linePath_Builder0.build();
      assertTrue(linePath0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashSet<Vector2D> hashSet0 = new HashSet<Vector2D>(857);
      LinePath linePath0 = LinePath.fromVertices((Collection<Vector2D>) hashSet0, false, (Precision.DoubleEquivalence) null);
      assertTrue(linePath0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinePath.Builder linePath_Builder0 = LinePath.builder((Precision.DoubleEquivalence) null);
      Vector2D[] vector2DArray0 = new Vector2D[7];
      // Undeclared exception!
      try { 
        linePath_Builder0.prependVertices(vector2DArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unable to create line segment: no vertex precision specified
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.path.LinePath$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashSet<Vector2D> hashSet0 = new HashSet<Vector2D>();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(733.00897, 733.00897);
      hashSet0.add(vector2D_Unit0);
      // Undeclared exception!
      try { 
        LinePath.fromVertices((Collection<Vector2D>) hashSet0, (Precision.DoubleEquivalence) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unable to create line segment: no vertex precision specified
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.path.LinePath$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Stack<LineConvexSubset> stack0 = new Stack<LineConvexSubset>();
      LinePath linePath0 = new LinePath(stack0);
      stack0.add((LineConvexSubset) null);
      stack0.add((LineConvexSubset) null);
      // Undeclared exception!
      try { 
        linePath0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.path.LinePath", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinePath linePath0 = LinePath.empty();
      String string0 = linePath0.toString();
      assertEquals("LinePath[empty= true]", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Stack<LineConvexSubset> stack0 = new Stack<LineConvexSubset>();
      LinePath linePath0 = new LinePath(stack0);
      stack0.add((LineConvexSubset) null);
      String string0 = linePath0.toString();
      assertEquals("LinePath[single= null]", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RegionBSPTree1D regionBSPTree1D0 = new RegionBSPTree1D(true);
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset((Line) null, regionBSPTree1D0);
      List<LineConvexSubset> list0 = embeddedTreeLineSubset0.toConvex();
      LinePath linePath0 = new LinePath(list0);
      // Undeclared exception!
      try { 
        linePath0.reverse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.LineSpanningSubset", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Stack<LineConvexSubset> stack0 = new Stack<LineConvexSubset>();
      LinePath linePath0 = new LinePath(stack0);
      LinePath linePath1 = linePath0.reverse();
      assertSame(linePath1, linePath0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Stack<LineConvexSubset> stack0 = new Stack<LineConvexSubset>();
      stack0.setSize(2703);
      LinePath linePath0 = new LinePath(stack0);
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.identity();
      // Undeclared exception!
      try { 
        linePath0.transform(affineTransformMatrix2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.path.LinePath", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Stack<LineConvexSubset> stack0 = new Stack<LineConvexSubset>();
      LinePath linePath0 = new LinePath(stack0);
      LinePath linePath1 = linePath0.transform((Transform<Vector2D>) null);
      assertSame(linePath1, linePath0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RegionBSPTree1D regionBSPTree1D0 = new RegionBSPTree1D(true);
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset((Line) null, regionBSPTree1D0);
      List<LineConvexSubset> list0 = embeddedTreeLineSubset0.toConvex();
      LinePath linePath0 = new LinePath(list0);
      double double0 = linePath0.getSize();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinePath linePath0 = LinePath.empty();
      double double0 = linePath0.getSize();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Stack<LineConvexSubset> stack0 = new Stack<LineConvexSubset>();
      LinePath linePath0 = new LinePath(stack0);
      stack0.add((LineConvexSubset) null);
      boolean boolean0 = linePath0.isFinite();
      assertFalse(linePath0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Stack<LineConvexSubset> stack0 = new Stack<LineConvexSubset>();
      LinePath linePath0 = new LinePath(stack0);
      stack0.add((LineConvexSubset) null);
      boolean boolean0 = linePath0.isInfinite();
      assertFalse(linePath0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinePath linePath0 = LinePath.empty();
      boolean boolean0 = linePath0.isFinite();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      RegionBSPTree1D regionBSPTree1D0 = new RegionBSPTree1D(true);
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset((Line) null, regionBSPTree1D0);
      List<LineConvexSubset> list0 = embeddedTreeLineSubset0.toConvex();
      LinePath linePath0 = new LinePath(list0);
      List<Vector2D> list1 = linePath0.getVertexSequence();
      assertFalse(linePath0.isEmpty());
      assertTrue(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      RegionBSPTree1D regionBSPTree1D0 = new RegionBSPTree1D(true);
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset((Line) null, regionBSPTree1D0);
      List<LineConvexSubset> list0 = embeddedTreeLineSubset0.toConvex();
      LinePath linePath0 = new LinePath(list0);
      LinePath linePath1 = linePath0.simplify();
      assertFalse(linePath1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LinePath linePath0 = LinePath.empty();
      LineConvexSubset lineConvexSubset0 = linePath0.getStart();
      assertNull(lineConvexSubset0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LinePath linePath0 = LinePath.empty();
      LinePath linePath1 = linePath0.simplify();
      LinePath linePath2 = linePath1.simplify();
      assertFalse(linePath2.equals((Object)linePath0));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      HashSet<Vector2D> hashSet0 = new HashSet<Vector2D>();
      LinePath linePath0 = LinePath.fromVertexLoop(hashSet0, (Precision.DoubleEquivalence) null);
      assertTrue(linePath0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HashSet<Vector2D> hashSet0 = new HashSet<Vector2D>();
      LinePath linePath0 = LinePath.fromVertices((Collection<Vector2D>) hashSet0, (Precision.DoubleEquivalence) null);
      assertTrue(linePath0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LinePath linePath0 = LinePath.empty();
      Stream<LineConvexSubset> stream0 = linePath0.boundaryStream();
      assertNotNull(stream0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LinkedList<Ray> linkedList0 = new LinkedList<Ray>();
      ArrayList<LineConvexSubset> arrayList0 = new ArrayList<LineConvexSubset>(linkedList0);
      LinePath linePath0 = new LinePath(arrayList0);
      assertTrue(linePath0.isEmpty());
      
      arrayList0.add((LineConvexSubset) null);
      linePath0.getStart();
      assertFalse(linePath0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LineConvexSubset[] lineConvexSubsetArray0 = new LineConvexSubset[4];
      // Undeclared exception!
      try { 
        LinePath.from(lineConvexSubsetArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.path.LinePath$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LinePath.Builder linePath_Builder0 = LinePath.builder((Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        linePath_Builder0.prepend((LineConvexSubset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.path.LinePath$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LinePath.Builder linePath_Builder0 = LinePath.builder((Precision.DoubleEquivalence) null);
      Stack<Vector2D> stack0 = new Stack<Vector2D>();
      LinePath.Builder linePath_Builder1 = linePath_Builder0.prependVertices((Collection<Vector2D>) stack0);
      assertSame(linePath_Builder0, linePath_Builder1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LinePath.Builder linePath_Builder0 = LinePath.builder((Precision.DoubleEquivalence) null);
      LinePath linePath0 = linePath_Builder0.close();
      assertTrue(linePath0.isEmpty());
  }
}
