/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 01:02:38 GMT 2022
 */

package org.apache.commons.geometry.euclidean.twod;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayDeque;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.Vector;
import java.util.function.UnaryOperator;
import org.apache.commons.geometry.euclidean.twod.AffineTransformMatrix2D;
import org.apache.commons.geometry.euclidean.twod.Vector2D;
import org.apache.commons.geometry.euclidean.twod.rotation.Rotation2D;
import org.apache.commons.numbers.core.Precision;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Vector2D_ESTest extends Vector2D_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      Vector2D[] vector2DArray0 = new Vector2D[1];
      // Undeclared exception!
      try { 
        Vector2D.Sum.of(vector2D0, vector2DArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      // Undeclared exception!
      try { 
        Vector2D.Unit.from(Double.POSITIVE_INFINITY, (-1.5707963267948966));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: Infinity
         //
         verifyException("org.apache.commons.geometry.euclidean.internal.Vectors", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      // Undeclared exception!
      try { 
        Vector2D.Unit.from(3.141592653589793, Double.NEGATIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: Infinity
         //
         verifyException("org.apache.commons.geometry.euclidean.internal.Vectors", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      // Undeclared exception!
      try { 
        Vector2D.of(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Dimension mismatch: 8 != 2
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit2 = vector2D_Unit1.negate();
      Vector2D.Unit vector2D_Unit3 = vector2D_Unit2.orthogonal();
      Rotation2D rotation2D0 = Rotation2D.createVectorRotation(vector2D_Unit0, vector2D_Unit0);
      Vector2D vector2D0 = rotation2D0.apply((Vector2D) vector2D_Unit3);
      boolean boolean0 = vector2D_Unit0.equals(vector2D0);
      assertFalse(boolean0);
      assertEquals(1.0, vector2D_Unit3.norm(), 0.01);
      assertEquals(0.0, vector2D0.getX(), 0.01);
      assertFalse(vector2D_Unit3.equals((Object)vector2D_Unit0));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.negate();
      boolean boolean0 = vector2D_Unit1.equals(vector2D_Unit0);
      assertEquals(0.0, vector2D_Unit0.getX(), 0.01);
      assertEquals(-0.0, vector2D_Unit1.getX(), 0.01);
      assertEquals((-1.0), vector2D_Unit0.getY(), 0.01);
      assertEquals(1.0, vector2D_Unit1.getY(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from((-4298.041421210678), (-4298.041421210678));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      boolean boolean0 = vector2D_Unit0.NaN.isZero(precision_DoubleEquivalence0);
      assertFalse(boolean0);
      assertEquals((-0.7071067811865476), vector2D_Unit0.getY(), 0.01);
      assertEquals((-0.7071067811865476), vector2D_Unit0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D vector2D0 = Vector2D.of(1233.02538775831, 0.9999999999);
      double double0 = vector2D_Unit0.angle(vector2D0);
      assertEquals(1233.02538775831, vector2D0.getX(), 0.01);
      assertEquals(1.5699853136636337, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D vector2D0 = Vector2D.of(1233.02538775831, 0.9999999999);
      double double0 = vector2D_Unit0.angle(vector2D0);
      assertEquals(3.1407816404585303, double0, 0.01);
      assertEquals(0.9999999999, vector2D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of((-768.553926980015), 1376.76);
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.fromColumnVectors(vector2D0, vector2D0, vector2D0);
      Vector2D.Unit vector2D_Unit0 = affineTransformMatrix2D0.applyDirection(vector2D0);
      double double0 = vector2D_Unit0.angle(vector2D0);
      assertEquals(3.740654857180447E-17, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D vector2D0 = vector2D_Unit0.withNorm(202.86);
      assertEquals(1.0, vector2D_Unit0.norm(), 0.01);
      
      double double0 = vector2D_Unit0.angle(vector2D0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, vector2D0.getY(), 0.01);
      assertEquals(202.86, vector2D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      assertEquals(0.0, vector2D_Unit0.getX(), 0.01);
      assertEquals((-1.0), vector2D_Unit0.getY(), 0.01);
      
      Vector2D[] vector2DArray0 = new Vector2D[7];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      vector2DArray0[3] = (Vector2D) vector2D_Unit0;
      vector2DArray0[4] = (Vector2D) vector2D_Unit0;
      vector2DArray0[5] = (Vector2D) vector2D_Unit0;
      vector2DArray0[6] = (Vector2D) vector2D_Unit0;
      Vector2D vector2D0 = Vector2D.min(vector2DArray0[5], vector2DArray0);
      Vector2D vector2D1 = vector2D0.withNorm(1232.9024906855714);
      assertEquals((-1232.9024906855714), vector2D1.getY(), 0.01);
      assertEquals((-1.0), vector2D0.getY(), 0.01);
      assertEquals(0.0, vector2D1.getX(), 0.01);
      assertEquals(0.0, vector2D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of((-1261.56625), (-1261.56625));
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createShear((-1261.56625), (-1261.56625));
      Vector2D.Unit vector2D_Unit0 = affineTransformMatrix2D0.applyDirection(vector2D0);
      Vector2D vector2D1 = vector2D_Unit0.withNorm(0.0);
      assertEquals(0.7071067811865476, vector2D_Unit0.getY(), 0.01);
      assertEquals(0.7071067811865476, vector2D_Unit0.getX(), 0.01);
      assertEquals(0.0, vector2D1.getY(), 0.01);
      assertEquals(0.0, vector2D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from((-0.9999999999), (-0.9999999999));
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.normalize();
      assertEquals((-0.7071067811865476), vector2D_Unit1.getX(), 0.01);
      assertEquals((-0.7071067811865476), vector2D_Unit1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      double double0 = vector2D_Unit0.normSq();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      double double0 = vector2D_Unit0.norm();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      boolean boolean0 = vector2D_Unit0.equals(vector2D_Unit0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D vector2D0 = vector2D_Unit0.withNorm(Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01);
      assertTrue(vector2D0.isNaN());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(2261.3514725738705, 2261.3514725738705);
      Vector2D vector2D1 = vector2D0.withNorm(Double.POSITIVE_INFINITY);
      assertEquals(2261.3514725738705, vector2D0.getX(), 0.01);
      assertEquals(2261.3514725738705, vector2D0.getY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.negate();
      Vector2D vector2D0 = vector2D_Unit1.withNorm(202.86);
      assertEquals(-0.0, vector2D0.getY(), 0.01);
      assertEquals((-1.0), vector2D_Unit1.getX(), 0.01);
      assertEquals(-0.0, vector2D_Unit1.getY(), 0.01);
      assertEquals((-202.86), vector2D0.getX(), 0.01);
      assertEquals(1.0, vector2D_Unit0.getX(), 0.01);
      assertEquals(0.0, vector2D_Unit0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of((-1261.56625), (-1261.56625));
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createShear((-1261.56625), (-1261.56625));
      Vector2D.Unit vector2D_Unit0 = affineTransformMatrix2D0.applyDirection(vector2D0);
      Vector2D vector2D1 = vector2D_Unit0.NaN.vectorTo((Vector2D) vector2D_Unit0);
      assertEquals(0.7071067811865476, vector2D_Unit0.getX(), 0.01);
      assertEquals(0.7071067811865476, vector2D_Unit0.getY(), 0.01);
      assertEquals(Double.NaN, vector2D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D vector2D0 = vector2D_Unit0.vectorTo((Vector2D) vector2D_Unit0);
      assertEquals(0.0, vector2D0.getX(), 0.01);
      assertEquals(0.0, vector2D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.MINUS_Y;
      Vector2D vector2D0 = vector2D_Unit0.ZERO.vectorTo((Vector2D) vector2D_Unit1);
      assertEquals((-1.0), vector2D0.getY(), 0.01);
      assertEquals(0.0, vector2D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D vector2D1 = vector2D_Unit0.NEGATIVE_INFINITY.vectorTo(vector2D0);
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.identity();
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      vector2D0.POSITIVE_INFINITY.transform(rotation2D0);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getX(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(0.9999, (-646.1));
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(vector2D0);
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createShear(0.9999, 0.9999);
      Vector2D vector2D1 = vector2D_Unit0.NEGATIVE_INFINITY.transform(affineTransformMatrix2D0);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D1.getX(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D1.getY(), 0.01);
      assertEquals(0.0015475913985442914, vector2D_Unit0.getX(), 0.01);
      assertEquals((-0.9999988024797146), vector2D_Unit0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.of(0.0);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D vector2D0 = vector2D_Unit0.ZERO.transform(rotation2D0);
      assertEquals(1.0, vector2D_Unit0.getX(), 0.01);
      assertEquals(0.0, vector2D0.getY(), 0.01);
      assertEquals(0.0, vector2D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D vector2D1 = vector2D0.subtract((Vector2D) vector2D_Unit0);
      assertTrue(vector2D1.equals((Object)vector2D0));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.negate();
      Vector2D.Unit vector2D_Unit2 = vector2D_Unit1.orthogonal();
      Vector2D vector2D0 = vector2D_Unit2.subtract((Vector2D) vector2D_Unit0);
      assertEquals((-1.0), vector2D0.getX(), 0.01);
      assertEquals((-1.0), vector2D0.getY(), 0.01);
      assertEquals(-0.0, vector2D_Unit1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.negate();
      Vector2D vector2D0 = vector2D_Unit1.subtract((Vector2D) vector2D_Unit0);
      assertEquals(0.0, vector2D_Unit0.getY(), 0.01);
      assertEquals((-2.0), vector2D0.getX(), 0.01);
      assertEquals(-0.0, vector2D_Unit1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D vector2D1 = vector2D0.NaN.subtract((-2199.3664), (Vector2D) vector2D_Unit0);
      assertNotSame(vector2D1, vector2D0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D vector2D0 = vector2D_Unit0.subtract(3.273390607896142E150, (Vector2D) vector2D_Unit0);
      assertEquals((-3.273390607896142E150), vector2D0.getX(), 0.01);
      assertEquals(0.0, vector2D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D vector2D0 = vector2D_Unit0.subtract(2485407.336504772, (Vector2D) vector2D_Unit0);
      assertEquals(0.0, vector2D0.getX(), 0.01);
      assertEquals(2485406.336504772, vector2D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D vector2D0 = vector2D_Unit0.NEGATIVE_INFINITY.subtract(4.149515568880993E180, (Vector2D) vector2D_Unit0);
      assertFalse(vector2D0.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getX(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      double double0 = vector2D_Unit0.signedArea(vector2D_Unit0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(0.9999, (-646.1));
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(vector2D0);
      Vector2D[] vector2DArray0 = new Vector2D[8];
      vector2DArray0[5] = (Vector2D) vector2D_Unit0;
      double double0 = vector2D0.signedArea(vector2DArray0[5]);
      assertEquals(4.124096477829777E-17, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from((-1628.1858910080105), (-222.817300036145));
      Vector2D vector2D0 = Vector2D.of(1.0, (-222.817300036145));
      double double0 = vector2D_Unit0.POSITIVE_INFINITY.signedArea(vector2D0);
      assertEquals((-0.990765539842187), vector2D_Unit0.getX(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      assertEquals((-0.13558630115620113), vector2D_Unit0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from((-1.0), (-3092.41476807));
      Vector2D vector2D0 = vector2D_Unit0.reject((Vector2D) vector2D_Unit0);
      assertEquals((-5.421010862427522E-20), vector2D0.getX(), 0.01);
      assertEquals((-0.9999999477153153), vector2D_Unit0.getY(), 0.01);
      assertEquals((-1.1102230246251565E-16), vector2D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      vector2D_Unit0.NaN.reject((Vector2D) vector2D_Unit0);
      assertEquals(1.0, vector2D_Unit0.normSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D vector2D0 = vector2D_Unit0.NEGATIVE_INFINITY.project((Vector2D) vector2D_Unit0);
      vector2D_Unit0.NaN.add(672.7, vector2D0);
      assertEquals(Double.NaN, vector2D0.getX(), 0.01);
      assertEquals(Double.NaN, vector2D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D vector2D0 = Vector2D.of(1233.02538775831, 0.9999999999);
      Vector2D vector2D1 = vector2D_Unit0.NEGATIVE_INFINITY.project(vector2D0);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D1.getX(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.parse("(-Infinity, -Infinity)");
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getX(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.parse("(0.0, 0.0)");
      assertEquals(0.0, vector2D0.getY(), 0.01);
      assertEquals(0.0, vector2D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.parse("(NaN, NaN)");
      assertTrue(vector2D0.isNaN());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.from((-1225.2606964338), (-1225.2606964338));
      Vector2D[] vector2DArray0 = new Vector2D[1];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      Vector2D vector2D0 = Vector2D.min((Vector2D) vector2D_Unit1, vector2DArray0);
      Vector2D.Unit vector2D_Unit2 = vector2D0.orthogonal((Vector2D) vector2D_Unit1);
      assertEquals((-0.8164965809277257), vector2D_Unit2.getX(), 0.01);
      assertEquals(0.5773502691896263, vector2D_Unit2.getY(), 0.01);
      assertEquals((-1.0), vector2D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.MINUS_Y;
      Vector2D.Unit vector2D_Unit2 = vector2D_Unit0.orthogonal((Vector2D) vector2D_Unit1);
      assertTrue(vector2D_Unit2.equals((Object)vector2D_Unit1));
      assertEquals(1.0, vector2D_Unit2.normSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.from((-1225.2606964338), (-1225.2606964338));
      Vector2D.Unit vector2D_Unit2 = vector2D_Unit0.orthogonal((Vector2D) vector2D_Unit1);
      assertEquals((-0.7071067811865476), vector2D_Unit1.getX(), 0.01);
      assertEquals((-0.7071067811865476), vector2D_Unit1.getY(), 0.01);
      assertEquals(0.0, vector2D_Unit2.getY(), 0.01);
      assertEquals((-1.0), vector2D_Unit2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit2 = vector2D_Unit0.orthogonal((Vector2D) vector2D_Unit1);
      Vector2D.Unit vector2D_Unit3 = vector2D_Unit2.negate();
      Vector2D.Unit vector2D_Unit4 = vector2D_Unit3.orthogonal();
      assertEquals(1.0, vector2D_Unit1.getX(), 0.01);
      assertTrue(vector2D_Unit2.equals((Object)vector2D_Unit1));
      assertEquals(1.0, vector2D_Unit4.normSq(), 0.01);
      assertEquals(0.0, vector2D_Unit1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.orthogonal();
      assertEquals(1.0, vector2D_Unit1.getY(), 0.01);
      assertEquals(-0.0, vector2D_Unit1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.orthogonal();
      assertEquals(1.0, vector2D_Unit1.getX(), 0.01);
      assertEquals(0.0, vector2D_Unit1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      Vector2D vector2D0 = Vector2D.of(doubleArray0);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01);
      assertEquals(0.0, vector2D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      double[] doubleArray0 = vector2D0.toArray();
      Vector2D vector2D1 = Vector2D.of(doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertEquals(Double.NaN, vector2D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-934.8430901601193);
      Vector2D vector2D0 = Vector2D.of(doubleArray0);
      assertEquals((-934.8430901601193), vector2D0.getY(), 0.01);
      assertEquals(0.0, vector2D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-0.9999999999);
      Vector2D vector2D0 = Vector2D.of(doubleArray0);
      assertEquals((-0.9999999999), vector2D0.getX(), 0.01);
      assertEquals(0.0, vector2D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.normalizeOrNull();
      assertEquals(0.0, vector2D_Unit1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.normalizeOrNull();
      assertFalse(vector2D_Unit1.isNaN());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.negate();
      Vector2D.Unit vector2D_Unit2 = vector2D_Unit1.normalizeOrNull();
      assertEquals((-1.0), vector2D_Unit2.getX(), 0.01);
      assertEquals(1.0, vector2D_Unit0.getX(), 0.01);
      assertEquals(-0.0, vector2D_Unit2.getY(), 0.01);
      assertEquals(0.0, vector2D_Unit0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.normalizeOrNull();
      assertEquals(2, vector2D_Unit1.getDimension());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.normalize();
      assertSame(vector2D_Unit1, vector2D_Unit0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.normalize();
      assertFalse(vector2D_Unit1.isNaN());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      double double0 = vector2D0.ZERO.normSq();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      double double0 = vector2D_Unit0.norm();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Vector2D[] vector2DArray0 = new Vector2D[1];
      Vector2D vector2D0 = vector2DArray0[0].NaN.negate();
      assertFalse(vector2D0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D vector2D0 = vector2D_Unit0.ZERO.negate();
      assertEquals(-0.0, vector2D0.getY(), 0.01);
      assertEquals(-0.0, vector2D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      Vector2D vector2D1 = vector2D0.NEGATIVE_INFINITY.negate();
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D vector2D0 = vector2D_Unit0.multiply(Double.NEGATIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01);
      assertEquals(Double.NaN, vector2D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D vector2D0 = vector2D_Unit0.POSITIVE_INFINITY.multiply((-1752.3859));
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getX(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.orthogonal();
      Vector2D vector2D0 = vector2D_Unit1.multiply(202.86);
      assertEquals(1.0, vector2D_Unit1.getY(), 0.01);
      assertEquals(202.86, vector2D0.getY(), 0.01);
      assertEquals(-0.0, vector2D0.getX(), 0.01);
      assertEquals(-0.0, vector2D_Unit1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D vector2D0 = vector2D_Unit0.subtract((Vector2D) vector2D_Unit0);
      Vector2D vector2D1 = vector2D0.multiply(202.86);
      assertTrue(vector2D1.equals((Object)vector2D0));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Vector2D[] vector2DArray0 = new Vector2D[0];
      Vector2D vector2D1 = Vector2D.min(vector2D0, vector2DArray0);
      assertTrue(vector2D1.equals((Object)vector2D0));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      Vector2D[] vector2DArray0 = new Vector2D[4];
      vector2DArray0[0] = vector2D0;
      vector2DArray0[1] = vector2D0;
      vector2DArray0[2] = vector2D0;
      vector2DArray0[3] = vector2D0;
      Vector2D vector2D1 = Vector2D.min(vector2D0, vector2DArray0);
      assertTrue(vector2D1.isNaN());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(Double.NaN, 2133.172304);
      Stack<Vector2D> stack0 = new Stack<Vector2D>();
      stack0.add(vector2D0);
      Vector2D vector2D1 = Vector2D.min((Iterable<Vector2D>) stack0);
      assertEquals("[(NaN, 2133.172304)]", stack0.toString());
      assertEquals(2133.172304, vector2D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      HashSet<Vector2D> hashSet0 = new HashSet<Vector2D>(857, 857);
      hashSet0.add(vector2D0);
      Vector2D vector2D1 = Vector2D.min((Iterable<Vector2D>) hashSet0);
      assertFalse(vector2D1.isNaN());
      assertTrue(hashSet0.contains(vector2D1));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ArrayDeque<Vector2D> arrayDeque0 = new ArrayDeque<Vector2D>();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      arrayDeque0.push(vector2D_Unit0);
      Vector2D vector2D0 = Vector2D.min((Iterable<Vector2D>) arrayDeque0);
      assertTrue(arrayDeque0.contains(vector2D0));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Vector2D[] vector2DArray0 = new Vector2D[5];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      vector2DArray0[3] = vector2D0;
      vector2DArray0[4] = vector2D0;
      Vector2D vector2D1 = Vector2D.max((Vector2D) vector2D_Unit0, vector2DArray0);
      assertTrue(vector2D1.equals((Object)vector2D0));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      assertEquals((-1.0), vector2D_Unit0.getX(), 0.01);
      assertEquals(0.0, vector2D_Unit0.getY(), 0.01);
      
      Vector2D[] vector2DArray0 = new Vector2D[7];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      vector2DArray0[3] = (Vector2D) vector2D_Unit0;
      vector2DArray0[4] = (Vector2D) vector2D_Unit0;
      vector2DArray0[5] = (Vector2D) vector2D_Unit0;
      vector2DArray0[6] = (Vector2D) vector2D_Unit0;
      Vector2D vector2D0 = Vector2D.max(vector2DArray0[4], vector2DArray0);
      assertEquals((-1.0), vector2D0.getX(), 0.01);
      assertEquals(0.0, vector2D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D[] vector2DArray0 = new Vector2D[7];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      vector2DArray0[3] = (Vector2D) vector2D_Unit0;
      vector2DArray0[4] = (Vector2D) vector2D_Unit0;
      vector2DArray0[5] = (Vector2D) vector2D_Unit0;
      vector2DArray0[6] = (Vector2D) vector2D_Unit0;
      Vector2D vector2D0 = Vector2D.max((Vector2D) vector2D_Unit0, vector2DArray0);
      assertEquals((-1.0), vector2D_Unit0.getY(), 0.01);
      assertEquals(0.0, vector2D_Unit0.getX(), 0.01);
      assertEquals(0.0, vector2D0.getX(), 0.01);
      assertEquals((-1.0), vector2D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from((-1.0), (-3092.41476807));
      Vector2D[] vector2DArray0 = new Vector2D[3];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      Vector2D vector2D0 = Vector2D.max((Vector2D) vector2D_Unit0, vector2DArray0);
      Vector2D vector2D1 = vector2D0.withNorm((-3092.41476807));
      assertEquals(0.9999999477153155, vector2D1.getX(), 0.01);
      assertEquals((-0.9999999477153153), vector2D_Unit0.getY(), 0.01);
      assertEquals((-3.233718704361974E-4), vector2D_Unit0.getX(), 0.01);
      assertEquals(3092.4146063840694, vector2D1.getY(), 0.01);
      assertEquals((-3.233718704361974E-4), vector2D0.getX(), 0.01);
      assertEquals((-0.9999999477153153), vector2D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Vector<Vector2D> vector0 = new Vector<Vector2D>(0);
      Vector2D vector2D0 = Vector2D.NaN;
      vector0.add(0, vector2D0);
      Vector2D vector2D1 = Vector2D.max((Iterable<Vector2D>) vector0);
      assertEquals(Double.NaN, vector2D1.getY(), 0.01);
      assertEquals(Double.NaN, vector2D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Vector<Vector2D> vector0 = new Vector<Vector2D>(0);
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      vector0.add(vector2D0);
      Vector2D vector2D1 = Vector2D.max((Iterable<Vector2D>) vector0);
      assertTrue(vector0.contains(vector2D1));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Vector<Vector2D.Unit> vector0 = new Vector<Vector2D.Unit>();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      vector0.add(vector2D_Unit0);
      Vector<Vector2D> vector1 = new Vector<Vector2D>(vector0);
      Vector2D vector2D0 = Vector2D.max((Iterable<Vector2D>) vector1);
      assertTrue(vector1.contains(vector2D0));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector<Vector2D> vector0 = new Vector<Vector2D>(0);
      vector0.add((Vector2D) vector2D_Unit0);
      Vector2D vector2D0 = Vector2D.max((Iterable<Vector2D>) vector0);
      assertTrue(vector0.contains(vector2D0));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(2.409919865102884E-181, 2.409919865102884E-181);
      Vector2D vector2D0 = vector2D_Unit0.NEGATIVE_INFINITY.lerp((Vector2D) vector2D_Unit0, (-757.9));
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getX(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getY(), 0.01);
      assertEquals(0.7071067811865475, vector2D_Unit0.getY(), 0.01);
      assertEquals(0.7071067811865475, vector2D_Unit0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Vector2D vector2D1 = vector2D0.lerp(vector2D0, 0.0);
      assertTrue(vector2D1.equals((Object)vector2D0));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      double double0 = vector2D0.getY();
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(0.9999, (-646.1));
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(vector2D0);
      double double0 = vector2D_Unit0.getX();
      assertEquals((-646.1), vector2D0.getY(), 0.01);
      assertEquals(0.0015475913985442914, double0, 0.01);
      assertEquals(0.9999, vector2D0.getX(), 0.01);
      assertEquals((-0.9999988024797146), vector2D_Unit0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.of((-1250.62821272));
      Rotation2D rotation2D1 = rotation2D0.inverse();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D vector2D0 = rotation2D1.apply((Vector2D) vector2D_Unit0);
      double double0 = vector2D0.getX();
      assertEquals((-0.2709083959619995), double0, 0.01);
      assertEquals(0.9626051324386841, vector2D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D vector2D0 = vector2D_Unit0.subtract((Vector2D) vector2D_Unit0);
      double double0 = vector2D_Unit0.dot(vector2D0);
      assertEquals(0.0, vector2D0.getY(), 0.01);
      assertEquals(0.0, vector2D0.getX(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Rotation2D rotation2D0 = Rotation2D.of((-447.9));
      Vector2D vector2D0 = rotation2D0.apply((Vector2D) vector2D_Unit0);
      double double0 = vector2D0.dot((Vector2D) vector2D_Unit0);
      assertEquals((-0.2212020318008077), double0, 0.01);
      assertEquals((-0.9752280046877214), vector2D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of((-1.0), (-2036.3610847474615));
      double double0 = vector2D0.ZERO.distanceSq(vector2D0);
      assertEquals(4146767.467473858, double0, 0.01);
      assertEquals((-1.0), vector2D0.getX(), 0.01);
      assertEquals((-2036.3610847474615), vector2D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      double double0 = vector2D0.ZERO.distance(vector2D0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit2 = vector2D_Unit1.directionTo((Vector2D) vector2D_Unit0);
      assertEquals((-0.7071067811865475), vector2D_Unit2.getX(), 0.01);
      assertEquals(0.7071067811865475, vector2D_Unit2.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.MINUS_Y;
      Vector2D.Unit vector2D_Unit2 = vector2D_Unit0.directionTo((Vector2D) vector2D_Unit1);
      assertTrue(vector2D_Unit2.equals((Object)vector2D_Unit1));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.MINUS_Y;
      Vector2D.Unit vector2D_Unit2 = vector2D_Unit0.directionTo((Vector2D) vector2D_Unit1);
      assertEquals(0.7071067811865475, vector2D_Unit2.getX(), 0.01);
      assertEquals((-0.7071067811865475), vector2D_Unit2.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D vector2D0 = Vector2D.ZERO;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.directionTo(vector2D0);
      assertEquals((-1.0), vector2D_Unit1.getX(), 0.01);
      assertEquals(0.0, vector2D_Unit1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Vector2D[] vector2DArray0 = new Vector2D[4];
      vector2DArray0[0] = vector2D0;
      vector2DArray0[1] = vector2D0;
      vector2DArray0[2] = vector2D0;
      vector2DArray0[3] = vector2D0;
      Vector2D vector2D1 = Vector2D.centroid(vector2D0, vector2DArray0);
      assertTrue(vector2D1.equals((Object)vector2D0));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      Vector2D[] vector2DArray0 = new Vector2D[1];
      vector2DArray0[0] = vector2D0;
      Vector2D vector2D1 = Vector2D.centroid(vector2D0, vector2DArray0);
      assertEquals(Double.NaN, vector2D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D[] vector2DArray0 = new Vector2D[0];
      Vector2D vector2D0 = Vector2D.centroid((Vector2D) vector2D_Unit0, vector2DArray0);
      assertEquals(0.0, vector2D0.getY(), 0.01);
      assertEquals((-1.0), vector2D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LinkedHashSet<Vector2D> linkedHashSet0 = new LinkedHashSet<Vector2D>();
      Vector2D vector2D0 = Vector2D.NaN;
      linkedHashSet0.add(vector2D0);
      Vector2D vector2D1 = Vector2D.centroid((Iterable<Vector2D>) linkedHashSet0);
      assertTrue(vector2D1.isNaN());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      LinkedHashSet<Vector2D> linkedHashSet0 = new LinkedHashSet<Vector2D>();
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      linkedHashSet0.add(vector2D0);
      Vector2D vector2D1 = Vector2D.centroid((Iterable<Vector2D>) linkedHashSet0);
      assertFalse(vector2D1.isNaN());
      assertTrue(linkedHashSet0.contains(vector2D1));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Vector<Vector2D.Unit> vector0 = new Vector<Vector2D.Unit>();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      vector0.add(vector2D_Unit0);
      Vector<Vector2D> vector1 = new Vector<Vector2D>(vector0);
      Vector2D vector2D0 = Vector2D.centroid((Iterable<Vector2D>) vector1);
      assertTrue(vector1.contains(vector2D0));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(0.0, 0.0);
      Vector2D vector2D1 = vector2D0.POSITIVE_INFINITY.add(vector2D0);
      assertEquals(0.0, vector2D0.getX(), 0.01);
      assertEquals(0.0, vector2D0.getY(), 0.01);
      assertFalse(vector2D1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getX(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.negate();
      Vector2D vector2D0 = vector2D_Unit1.add((Vector2D) vector2D_Unit0);
      assertEquals(0.0, vector2D0.getX(), 0.01);
      assertEquals(1.0, vector2D_Unit1.getY(), 0.01);
      assertEquals(0.0, vector2D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Vector2D[] vector2DArray0 = new Vector2D[4];
      vector2DArray0[0] = vector2D0;
      vector2DArray0[1] = vector2D0;
      vector2DArray0[2] = vector2D0;
      Rotation2D rotation2D0 = Rotation2D.of(0.0);
      Vector2D vector2D1 = rotation2D0.apply(vector2D0);
      vector2DArray0[3] = vector2D1;
      Vector2D vector2D2 = Vector2D.max(vector2D0, vector2DArray0);
      Vector2D vector2D3 = vector2D0.add(vector2D2);
      // Undeclared exception!
      try { 
        vector2D3.normalize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: NaN
         //
         verifyException("org.apache.commons.geometry.euclidean.internal.Vectors", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.orthogonal();
      Vector2D vector2D0 = vector2D_Unit0.add((Vector2D) vector2D_Unit1);
      assertEquals(1.0, vector2D0.getY(), 0.01);
      assertEquals((-1.0), vector2D_Unit1.getX(), 0.01);
      assertEquals((-1.0), vector2D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D vector2D0 = vector2D_Unit0.add(1.0, (Vector2D) vector2D_Unit0);
      assertEquals(2.0, vector2D0.getX(), 0.01);
      assertEquals(0.0, vector2D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D vector2D0 = vector2D_Unit0.NEGATIVE_INFINITY.add(0.0, (Vector2D) vector2D_Unit0);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getX(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getY(), 0.01);
      assertTrue(vector2D0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      // Undeclared exception!
      try { 
        vector2D_Unit0.NEGATIVE_INFINITY.withNorm(Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: Infinity
         //
         verifyException("org.apache.commons.geometry.euclidean.internal.Vectors", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      // Undeclared exception!
      try { 
        vector2D_Unit0.ZERO.vectorTo((Vector2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      // Undeclared exception!
      try { 
        vector2D_Unit0.NEGATIVE_INFINITY.transform((UnaryOperator<Vector2D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      // Undeclared exception!
      try { 
        vector2D_Unit0.ZERO.subtract((Vector2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      // Undeclared exception!
      try { 
        vector2D_Unit0.subtract(0.25, (Vector2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      // Undeclared exception!
      try { 
        vector2D0.NEGATIVE_INFINITY.signedArea((Vector2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      // Undeclared exception!
      try { 
        vector2D_Unit0.NEGATIVE_INFINITY.reject((Vector2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        vector2D0.reject(vector2D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: Infinity
         //
         verifyException("org.apache.commons.geometry.euclidean.internal.Vectors", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      // Undeclared exception!
      try { 
        vector2D_Unit0.project((Vector2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        Vector2D.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.core.internal.SimpleTupleFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      // Undeclared exception!
      try { 
        vector2D_Unit0.orthogonal((Vector2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        Vector2D.of((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      // Undeclared exception!
      try { 
        Vector2D.min((Vector2D) vector2D_Unit0, (Vector2D[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        Vector2D.min((Iterable<Vector2D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        Vector2D.max((Iterable<Vector2D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      // Undeclared exception!
      try { 
        vector2D_Unit0.lerp((Vector2D) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      // Undeclared exception!
      try { 
        vector2D_Unit0.eq((Vector2D) vector2D_Unit0, (Precision.DoubleEquivalence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.ZERO.normalizeOrNull();
      // Undeclared exception!
      try { 
        vector2D_Unit1.ZERO.dot((Vector2D) vector2D_Unit1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      // Undeclared exception!
      try { 
        vector2D_Unit0.distanceSq((Vector2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      // Undeclared exception!
      try { 
        vector2D_Unit0.distance((Vector2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        vector2D0.POSITIVE_INFINITY.directionTo((Vector2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D[] vector2DArray0 = new Vector2D[4];
      // Undeclared exception!
      try { 
        Vector2D.centroid((Vector2D) vector2D_Unit0, vector2DArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        Vector2D.centroid((Iterable<Vector2D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D[] vector2DArray0 = new Vector2D[7];
      // Undeclared exception!
      try { 
        vector2D_Unit0.angle(vector2DArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        vector2D0.NaN.add((Vector2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        vector2D0.add((-2207.8540374056), (Vector2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.normalizeOrNull();
      vector2D_Unit1.hashCode();
      Vector2D.Unit vector2D_Unit2 = Vector2D.Unit.from((Vector2D) vector2D_Unit1);
      UnaryOperator<Vector2D> unaryOperator0 = UnaryOperator.identity();
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Vector2D vector2D1 = vector2D_Unit2.transform(unaryOperator0);
      int int0 = 54;
      PriorityQueue<Vector2D> priorityQueue0 = new PriorityQueue<Vector2D>(54);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      boolean boolean0 = vector2D1.eq((Vector2D) vector2D_Unit0, precision_DoubleEquivalence0);
      assertFalse(boolean0);
      assertSame(vector2D1, vector2D_Unit0);
      assertFalse(vector2D1.isNaN());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      boolean boolean0 = vector2D_Unit0.eq((Vector2D) vector2D_Unit0, precision_DoubleEquivalence0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      boolean boolean0 = vector2D_Unit0.isNaN();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.of(0.9999);
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Vector2D vector2D1 = rotation2D0.apply(vector2D0);
      boolean boolean0 = vector2D1.isNaN();
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getY(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.identity();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(1431.79160268805, 1431.79160268805);
      Vector2D vector2D0 = rotation2D0.applyVector((Vector2D) vector2D_Unit0);
      Vector2D.Unit vector2D_Unit1 = vector2D0.normalize();
      assertEquals(0.7071067811865476, vector2D_Unit0.getY(), 0.01);
      assertEquals(0.7071067811865476, vector2D_Unit1.getX(), 0.01);
      assertTrue(vector2D_Unit1.equals((Object)vector2D_Unit0));
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      double double0 = vector2D0.normSq();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Vector2D.Sum vector2D_Sum0 = Vector2D.Sum.create();
      assertNotNull(vector2D_Sum0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      double double0 = vector2D_Unit0.getY();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      double double0 = vector2D_Unit0.getX();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D vector2D0 = vector2D_Unit0.POSITIVE_INFINITY.vectorTo((Vector2D) vector2D_Unit0);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getY(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Vector2D.Sum vector2D_Sum0 = new Vector2D.Sum(vector2D0);
      Vector2D.Sum vector2D_Sum1 = vector2D_Sum0.addScaled(0.0, vector2D0);
      assertSame(vector2D_Sum1, vector2D_Sum0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of((-2992.5), 2525.3);
      Vector2D.Sum vector2D_Sum0 = Vector2D.Sum.of(vector2D0);
      Vector2D vector2D1 = vector2D_Sum0.get();
      assertEquals(2525.3, vector2D0.getY(), 0.01);
      assertEquals((-2992.5), vector2D0.getX(), 0.01);
      assertTrue(vector2D1.equals((Object)vector2D0));
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      double double0 = vector2D_Unit0.dot((Vector2D) vector2D_Unit0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D.Sum vector2D_Sum0 = new Vector2D.Sum(vector2D_Unit0);
      Vector2D.Sum vector2D_Sum1 = vector2D_Sum0.add((Vector2D) vector2D_Unit0);
      assertSame(vector2D_Sum0, vector2D_Sum1);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from((-764.0), (-764.0));
      vector2D_Unit0.NaN.subtract((Vector2D) vector2D_Unit0);
      assertEquals((-0.7071067811865475), vector2D_Unit0.getX(), 0.01);
      assertEquals((-0.7071067811865475), vector2D_Unit0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      Vector2D vector2D0 = Vector2D.of(doubleArray0);
      vector2D0.norm();
      assertEquals(0.0, vector2D0.getY(), 0.01);
      assertEquals(0.0, vector2D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D[] vector2DArray0 = new Vector2D[9];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      vector2DArray0[3] = (Vector2D) vector2D_Unit0;
      vector2DArray0[4] = (Vector2D) vector2D_Unit0;
      vector2DArray0[5] = (Vector2D) vector2D_Unit0;
      vector2DArray0[6] = (Vector2D) vector2D_Unit0;
      vector2DArray0[7] = (Vector2D) vector2D_Unit0;
      vector2DArray0[8] = (Vector2D) vector2D_Unit0;
      Vector2D.Sum vector2D_Sum0 = Vector2D.Sum.of(vector2DArray0[4], vector2DArray0);
      assertNotNull(vector2D_Sum0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      LinkedHashSet<Vector2D> linkedHashSet0 = new LinkedHashSet<Vector2D>();
      // Undeclared exception!
      try { 
        Vector2D.centroid((Iterable<Vector2D>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot compute centroid: no points given
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Vector<Vector2D.Unit> vector0 = new Vector<Vector2D.Unit>();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      vector0.add(vector2D_Unit0);
      Vector<Vector2D> vector1 = new Vector<Vector2D>(vector0);
      Vector2D vector2D0 = Vector2D.centroid((Iterable<Vector2D>) vector1);
      assertTrue(vector1.contains(vector2D0));
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HashSet<Vector2D> hashSet0 = new HashSet<Vector2D>(2167, 2167);
      // Undeclared exception!
      try { 
        Vector2D.min((Iterable<Vector2D>) hashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot compute vector min: no vectors given
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Vector<Vector2D.Unit> vector0 = new Vector<Vector2D.Unit>();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      vector0.add(vector2D_Unit0);
      Vector<Vector2D> vector1 = new Vector<Vector2D>(vector0);
      Vector2D vector2D0 = Vector2D.min((Iterable<Vector2D>) vector1);
      assertTrue(vector1.contains(vector2D0));
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D[] vector2DArray0 = new Vector2D[7];
      // Undeclared exception!
      try { 
        Vector2D.max((Vector2D) vector2D_Unit0, vector2DArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      PriorityQueue<Vector2D> priorityQueue0 = new PriorityQueue<Vector2D>(28);
      // Undeclared exception!
      try { 
        Vector2D.max((Iterable<Vector2D>) priorityQueue0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot compute vector max: no vectors given
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Vector<Vector2D.Unit> vector0 = new Vector<Vector2D.Unit>();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      vector0.add(vector2D_Unit0);
      Vector<Vector2D> vector1 = new Vector<Vector2D>(vector0);
      Vector2D vector2D0 = Vector2D.max((Iterable<Vector2D>) vector1);
      assertTrue(vector1.contains(vector2D0));
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        Vector2D.of(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Dimension mismatch: 1 != 2
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D vector2D0 = vector2D_Unit0.ZERO.project((Vector2D) vector2D_Unit0);
      assertEquals(1.0, vector2D_Unit0.normSq(), 0.01);
      assertEquals(0.0, vector2D0.getY(), 0.01);
      assertEquals(0.0, vector2D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D vector2D0 = Vector2D.NaN;
      boolean boolean0 = vector2D_Unit0.equals(vector2D0);
      assertFalse(boolean0);
      assertTrue(vector2D0.isNaN());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      boolean boolean0 = vector2D0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.MINUS_X;
      Vector2D vector2D0 = vector2D_Unit1.reject((Vector2D) vector2D_Unit0);
      boolean boolean0 = vector2D_Unit1.equals(vector2D0);
      assertFalse(vector2D_Unit1.equals((Object)vector2D_Unit0));
      assertTrue(boolean0);
      assertEquals(1.0, vector2D_Unit1.normSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      boolean boolean0 = vector2D_Unit0.equals(vector2D0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      boolean boolean0 = vector2D_Unit0.isFinite();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(1576.0, Double.POSITIVE_INFINITY);
      boolean boolean0 = vector2D0.isFinite();
      assertFalse(boolean0);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01);
      assertEquals(1576.0, vector2D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      boolean boolean0 = vector2D_Unit0.NaN.isFinite();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(1576.4446084246456, Double.NEGATIVE_INFINITY);
      boolean boolean0 = vector2D0.isInfinite();
      assertEquals(1576.4446084246456, vector2D0.getX(), 0.01);
      assertTrue(boolean0);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      boolean boolean0 = vector2D0.isInfinite();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      boolean boolean0 = vector2D_Unit0.isInfinite();
      assertFalse(boolean0);
      assertFalse(vector2D_Unit0.isNaN());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      boolean boolean0 = vector2D0.isInfinite();
      assertTrue(vector2D0.isNaN());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.orthogonal();
      double double0 = vector2D_Unit1.getY();
      assertEquals(-0.0, vector2D_Unit1.getX(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      // Undeclared exception!
      try { 
        vector2D0.orthogonal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: Infinity
         //
         verifyException("org.apache.commons.geometry.euclidean.internal.Vectors", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      int int0 = vector2D_Unit0.getDimension();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D vector2D0 = vector2D_Unit0.getZero();
      boolean boolean0 = vector2D_Unit0.equals(vector2D0);
      assertEquals(0.0, vector2D0.getY(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      // Undeclared exception!
      try { 
        vector2D_Unit0.orthogonal((Vector2D) vector2D_Unit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException("org.apache.commons.geometry.euclidean.internal.Vectors", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D vector2D0 = vector2D_Unit0.add((Vector2D) vector2D_Unit0);
      assertEquals((-2.0), vector2D0.getY(), 0.01);
      assertEquals(0.0, vector2D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D vector2D0 = vector2D_Unit0.add(0.0, (Vector2D) vector2D_Unit0);
      assertEquals(0.0, vector2D0.getX(), 0.01);
      assertEquals((-1.0), vector2D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      // Undeclared exception!
      try { 
        Vector2D.parse("org.apache.commons.geometry.euclidean.twod.Vector2D");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse string \"org.apache.commons.geometry.euclidean.twod.Vector2D\" at index 0: expected \"(\" but found \"o\"
         //
         verifyException("org.apache.commons.geometry.core.internal.SimpleTupleFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(1576.4446084246456, Double.NEGATIVE_INFINITY);
      Vector2D vector2D1 = vector2D0.POSITIVE_INFINITY.negate();
      Vector2D vector2D2 = vector2D0.lerp(vector2D1, 1576.4446084246456);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D1.getY(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D1.getX(), 0.01);
      assertFalse(vector2D2.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, vector2D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(0.25, 0.25);
      String string0 = vector2D0.toString();
      assertEquals("(0.25, 0.25)", string0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D vector2D0 = vector2D_Unit0.reject((Vector2D) vector2D_Unit0);
      assertEquals(0.0, vector2D0.getX(), 0.01);
      assertEquals(0.0, vector2D0.getY(), 0.01);
      assertEquals(1.0, vector2D_Unit0.normSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      assertEquals((-1.0), vector2D_Unit0.getX(), 0.01);
      assertEquals(0.0, vector2D_Unit0.getY(), 0.01);
      
      Vector2D[] vector2DArray0 = new Vector2D[7];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      vector2DArray0[3] = (Vector2D) vector2D_Unit0;
      vector2DArray0[4] = (Vector2D) vector2D_Unit0;
      vector2DArray0[5] = (Vector2D) vector2D_Unit0;
      vector2DArray0[6] = (Vector2D) vector2D_Unit0;
      Vector2D vector2D0 = Vector2D.min(vector2DArray0[5], vector2DArray0);
      Vector2D vector2D1 = vector2D0.withNorm(0.0);
      assertEquals(0.0, vector2D1.getY(), 0.01);
      assertEquals(-0.0, vector2D1.getX(), 0.01);
      assertEquals((-1.0), vector2D0.getX(), 0.01);
      assertEquals(0.0, vector2D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      double double0 = vector2D_Unit0.distanceSq((Vector2D) vector2D_Unit0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D[] vector2DArray0 = new Vector2D[3];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      Vector2D vector2D0 = Vector2D.centroid((Vector2D) vector2D_Unit0, vector2DArray0);
      assertEquals((-1.0), vector2D0.getY(), 0.01);
      assertEquals(0.0, vector2D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(1576.0, Double.POSITIVE_INFINITY);
      Vector2D vector2D1 = vector2D0.lerp(vector2D0, Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01);
      assertEquals(Double.NaN, vector2D1.getX(), 0.01);
      assertEquals(1576.0, vector2D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      double double0 = vector2D_Unit0.distance((Vector2D) vector2D_Unit0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        vector2D0.POSITIVE_INFINITY.project(vector2D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: Infinity
         //
         verifyException("org.apache.commons.geometry.euclidean.internal.Vectors", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      // Undeclared exception!
      try { 
        vector2D_Unit0.directionTo((Vector2D) vector2D_Unit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException("org.apache.commons.geometry.euclidean.internal.Vectors", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(0.25, 0.25);
      // Undeclared exception!
      try { 
        vector2D0.ZERO.angle(vector2D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException("org.apache.commons.geometry.euclidean.internal.Vectors", e);
      }
  }
}
