/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 01:28:44 GMT 2022
 */

package org.apache.commons.geometry.euclidean;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.geometry.euclidean.oned.AffineTransformMatrix1D;
import org.apache.commons.geometry.euclidean.oned.Vector1D;
import org.apache.commons.geometry.euclidean.threed.AffineTransformMatrix3D;
import org.apache.commons.geometry.euclidean.threed.Vector3D;
import org.apache.commons.geometry.euclidean.threed.rotation.QuaternionRotation;
import org.apache.commons.geometry.euclidean.twod.AffineTransformMatrix2D;
import org.apache.commons.geometry.euclidean.twod.Vector2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractAffineTransformMatrix_ESTest extends AbstractAffineTransformMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createScale(0.0, 799.2);
      boolean boolean0 = affineTransformMatrix2D0.preservesOrientation();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.identity();
      AffineTransformMatrix3D affineTransformMatrix3D1 = affineTransformMatrix3D0.linearTranspose();
      assertNotSame(affineTransformMatrix3D1, affineTransformMatrix3D0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createRotation((Vector2D) vector2D_Unit0, 462.030185895411);
      AffineTransformMatrix2D affineTransformMatrix2D1 = affineTransformMatrix2D0.linear();
      assertNotSame(affineTransformMatrix2D0, affineTransformMatrix2D1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(1290.06140147);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.inverse();
      assertNotSame(affineTransformMatrix1D0, affineTransformMatrix1D1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.fromColumnVectors((Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0);
      double double0 = affineTransformMatrix3D0.determinant();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation((Vector1D) vector1D_Unit0);
      double double0 = affineTransformMatrix1D0.determinant();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale((-865.2472145684965));
      double double0 = affineTransformMatrix1D0.determinant();
      assertEquals((-865.2472145684965), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of(283.951790118378, 283.951790118378, 0.0);
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.fromColumnVectors(vector3D0, vector3D0, vector3D0);
      Vector3D vector3D1 = affineTransformMatrix3D0.applyDirection(vector3D0);
      assertEquals(3, vector3D1.getDimension());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createScale(0.0);
      // Undeclared exception!
      try { 
        affineTransformMatrix2D0.normalTransform();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Matrix is not invertible; matrix determinant is 0.0
         //
         verifyException("org.apache.commons.geometry.euclidean.internal.Matrices", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      Vector3D vector3D0 = quaternionRotation0.getAxis();
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.fromColumnVectors(vector3D0, vector3D0, vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        affineTransformMatrix3D0.inverse();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Matrix is not invertible; matrix determinant is 0.0
         //
         verifyException("org.apache.commons.geometry.euclidean.internal.Matrices", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.identity();
      // Undeclared exception!
      try { 
        affineTransformMatrix3D0.applyDirection((Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.AffineTransformMatrix3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation((-44.82733308452892));
      Vector1D vector1D0 = Vector1D.NaN;
      // Undeclared exception!
      try { 
        affineTransformMatrix1D0.applyDirection(vector1D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: NaN
         //
         verifyException("org.apache.commons.geometry.euclidean.internal.Vectors", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation((-44.82733308452892));
      boolean boolean0 = affineTransformMatrix1D0.preservesOrientation();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.normalTransform();
      assertTrue(affineTransformMatrix1D1.equals((Object)affineTransformMatrix1D0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale((-849.1986229250926));
      boolean boolean0 = affineTransformMatrix1D0.preservesOrientation();
      assertFalse(boolean0);
  }
}
