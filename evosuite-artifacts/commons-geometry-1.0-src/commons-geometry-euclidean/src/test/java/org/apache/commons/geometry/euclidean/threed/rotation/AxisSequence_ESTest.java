/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 01:29:32 GMT 2022
 */

package org.apache.commons.geometry.euclidean.threed.rotation;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.geometry.euclidean.threed.Vector3D;
import org.apache.commons.geometry.euclidean.threed.rotation.AxisSequence;
import org.apache.commons.geometry.euclidean.threed.rotation.AxisSequenceType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AxisSequence_ESTest extends AxisSequence_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AxisSequence[] axisSequenceArray0 = AxisSequence.values();
      assertEquals(12, axisSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.valueOf("XZX");
      assertEquals(AxisSequence.XZX, axisSequence0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis3();
      assertFalse(vector3D0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYX;
      Vector3D vector3D0 = axisSequence0.getAxis3();
      assertEquals(0.0, vector3D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      assertEquals(3, vector3D0.getDimension());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYX;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      assertEquals(1.0, vector3D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.YZY;
      Vector3D vector3D0 = axisSequence0.getAxis1();
      assertFalse(vector3D0.isNaN());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis1();
      assertEquals(1.0, vector3D0.norm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZXZ;
      Vector3D[] vector3DArray0 = axisSequence0.toArray();
      assertEquals(3, vector3DArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZXZ;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      assertEquals(0.0, vector3D0.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZXZ;
      Vector3D vector3D0 = axisSequence0.getAxis1();
      assertEquals(0.0, vector3D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZXZ;
      AxisSequenceType axisSequenceType0 = axisSequence0.getType();
      assertEquals(AxisSequenceType.EULER, axisSequenceType0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZXZ;
      Vector3D vector3D0 = axisSequence0.getAxis3();
      assertEquals(0.0, vector3D0.getX(), 0.01);
  }
}
