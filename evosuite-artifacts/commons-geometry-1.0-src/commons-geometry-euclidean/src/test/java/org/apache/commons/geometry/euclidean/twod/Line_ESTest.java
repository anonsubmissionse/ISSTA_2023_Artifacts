/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 01:17:16 GMT 2022
 */

package org.apache.commons.geometry.euclidean.twod;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.geometry.core.partitioning.Hyperplane;
import org.apache.commons.geometry.euclidean.oned.AffineTransformMatrix1D;
import org.apache.commons.geometry.euclidean.oned.Vector1D;
import org.apache.commons.geometry.euclidean.twod.AffineTransformMatrix2D;
import org.apache.commons.geometry.euclidean.twod.Line;
import org.apache.commons.geometry.euclidean.twod.Vector2D;
import org.apache.commons.geometry.euclidean.twod.rotation.Rotation2D;
import org.apache.commons.numbers.core.Precision;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Line_ESTest extends Line_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit0, 729.205442964, precision_DoubleEquivalence0);
      Line line1 = line0.reverse();
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.fromColumnVectors((Vector2D) vector2D_Unit0, (Vector2D) vector2D_Unit0, (Vector2D) vector2D_Unit0);
      Line line2 = line1.transform(affineTransformMatrix2D0);
      boolean boolean0 = line0.equals(line2);
      assertFalse(boolean0);
      assertEquals(0.0, line2.getOriginOffset(), 0.01);
      assertFalse(line2.equals((Object)line0));
      assertEquals((-729.205442964), line1.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 1453.39, precision_DoubleEquivalence0);
      line0.hashCode();
      assertEquals(1453.39, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(true, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit1, 0.0, precision_DoubleEquivalence0);
      Line line1 = line0.reverse();
      Rotation2D rotation2D0 = Rotation2D.identity();
      Line line2 = line1.transform(rotation2D0);
      line0.rayFrom((-880.394639267543));
      vector2D_Unit0.toString();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      vector2D_Unit1.reject((Vector2D) vector2D_Unit0);
      Line line3 = line2.reverse();
      line1.isParallel(line1);
      Vector2D vector2D0 = line3.intersection(line1);
      assertEquals(Double.NaN, vector2D0.getX(), 0.01);
      assertEquals(Double.NaN, vector2D0.getY(), 0.01);
      
      boolean boolean0 = line2.similarOrientation(line3);
      line2.subspaceTransform(rotation2D0);
      rotation2D0.inverse();
      double double0 = line2.distance((Vector2D) vector2D_Unit0);
      assertEquals(0.0, double0, 0.01);
      
      vector2D_Unit1.transform(rotation2D0);
      Precision.DoubleEquivalence precision_DoubleEquivalence2 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(precision_DoubleEquivalence2).eq(anyDouble() , anyDouble());
      boolean boolean1 = line0.eq(line2, precision_DoubleEquivalence2);
      assertTrue(boolean1 == boolean0);
      
      line1.contains((Vector2D) vector2D_Unit1);
      assertEquals(-0.0, line1.getOriginOffset(), 0.01);
      
      line0.rayFrom(0.0);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, true, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      Rotation2D rotation2D0 = Rotation2D.identity();
      Line line1 = line0.transform(rotation2D0);
      Vector2D vector2D0 = line1.intersection(line0);
      assertEquals(Double.NaN, vector2D0.getX(), 0.01);
      assertEquals(Double.NaN, vector2D0.getY(), 0.01);
      
      line1.isParallel(line1);
      boolean boolean0 = line0.contains(line1);
      assertEquals(0.0, line1.getOriginOffset(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit1, 0.0, precision_DoubleEquivalence0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line1 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence1);
      boolean boolean0 = line0.similarOrientation(line1);
      assertTrue(boolean0);
      assertEquals(0.0, line1.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      Vector2D vector2D0 = line0.intersection(line0);
      line0.toSubspace(vector2D0);
      assertEquals(Double.NaN, vector2D0.getX(), 0.01);
      assertEquals(Double.NaN, vector2D0.getY(), 0.01);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.orthogonal();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit1, 0.0, precision_DoubleEquivalence0);
      line0.toSubspace((Vector2D) vector2D_Unit0);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit0, 787.3417707, precision_DoubleEquivalence0);
      Line line1 = line0.reverse();
      Rotation2D rotation2D0 = Rotation2D.of((-805.485553746187));
      Line line2 = line1.transform(rotation2D0);
      line2.toSubspace((Vector2D) vector2D_Unit0);
      assertEquals((-787.3417707000001), line2.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.orthogonal();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit1, 1133.4723091, precision_DoubleEquivalence0);
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createScale(1133.4723091, 0.0);
      Line line1 = line0.transform(affineTransformMatrix2D0);
      Vector1D vector1D0 = Vector1D.ZERO;
      line1.toSpace(vector1D0);
      assertEquals(0.0, line1.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.orthogonal();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit1, 55.61455, precision_DoubleEquivalence0);
      Line line1 = line0.reverse();
      Rotation2D rotation2D0 = Rotation2D.of(55.61455);
      AffineTransformMatrix2D affineTransformMatrix2D0 = rotation2D0.toMatrix();
      Line line2 = line1.transform(affineTransformMatrix2D0);
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Vector2D vector2D0 = line2.toSpace(vector1D0);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getX(), 0.01);
      assertEquals((-55.614549999999994), line2.getOriginOffset(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Vector2D vector2D0 = line0.toSpace((Vector1D) vector1D_Unit0);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
      assertEquals(1.0, vector2D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 55.61455, precision_DoubleEquivalence0);
      Line line1 = line0.reverse();
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Vector2D vector2D0 = line1.toSpace(vector1D0);
      assertEquals((-55.61455), line1.getOriginOffset(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getX(), 0.01);
      assertEquals(55.61455, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-0.32684368534274094), precision_DoubleEquivalence0);
      line0.toSpace(Double.NaN);
      assertEquals((-0.32684368534274094), line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      line0.toSpace(0.0);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(2731.226933280934, 0.5403023058681398);
      Vector2D.Unit vector2D_Unit0 = vector2D0.normalize();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-1928.7130778), precision_DoubleEquivalence0);
      Vector2D vector2D1 = line0.toSpace((-699.2189));
      assertEquals((-1928.851362355176), vector2D1.getY(), 0.01);
      assertEquals((-698.8373405410875), vector2D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 787.3417707, precision_DoubleEquivalence0);
      line0.reverseRayTo(3357.0);
      assertEquals(787.3417707, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 1453.39, precision_DoubleEquivalence0);
      line0.rayFrom((Vector2D) vector2D_Unit0);
      assertEquals(1453.39, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Line line0 = new Line(vector2D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      Vector2D vector2D0 = line0.project((Vector2D) vector2D_Unit0);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
      assertEquals(1.0, vector2D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 1940.0, precision_DoubleEquivalence0);
      Vector2D vector2D0 = line0.getOrigin();
      Vector2D vector2D1 = line0.project(vector2D0);
      assertEquals((-1940.0), vector2D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.negate();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit1, 1453.39, precision_DoubleEquivalence0);
      Vector2D vector2D0 = line0.project((Vector2D) vector2D_Unit1);
      assertEquals(1.0, vector2D0.getX(), 0.01);
      assertEquals(1453.39, vector2D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, Double.NaN, precision_DoubleEquivalence0);
      Vector2D vector2D0 = line0.pointAt(Double.NaN, (-1145.835481429982));
      assertTrue(vector2D0.isNaN());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(165.69591222341, (-1298.2249405));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-1298.2249405), precision_DoubleEquivalence0);
      Vector2D vector2D0 = line0.pointAt(Double.NEGATIVE_INFINITY, 165.69591222341);
      assertEquals((-1298.2249405), line0.getOriginOffset(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      Vector2D vector2D0 = line0.pointAt((-1340.86612162371), 0.0);
      assertEquals((-1340.86612162371), vector2D0.getX(), 0.01);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
      assertEquals(0.0, vector2D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 729.205442964, precision_DoubleEquivalence0);
      Line line1 = line0.reverse();
      Vector2D vector2D0 = line1.pointAt((-335.2697559929026), 729.205442964);
      assertEquals(729.205442964, line0.getOriginOffset(), 0.01);
      assertEquals(1458.410885928, vector2D0.getX(), 0.01);
      assertEquals((-335.2697559929026), vector2D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 15.001125902863198, precision_DoubleEquivalence0);
      double double0 = line0.offset((Vector2D) vector2D_Unit0);
      assertEquals(15.001125902863198, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, (-1.5707963267948966), precision_DoubleEquivalence0);
      Line line1 = line0.reverse();
      Rotation2D rotation2D0 = Rotation2D.of((-1.5707963267948966));
      AffineTransformMatrix2D affineTransformMatrix2D0 = rotation2D0.toMatrix();
      Line line2 = line1.transform(affineTransformMatrix2D0);
      line0.isParallel(line2);
      double double0 = line2.offset(line1);
      assertEquals(1.5707963267948966, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(5283.827099409774, 5283.827099409774);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, 5283.827099409774, precision_DoubleEquivalence0);
      Rotation2D rotation2D0 = Rotation2D.identity();
      Line line1 = line0.transform(rotation2D0);
      Vector2D vector2D0 = line1.intersection(line0);
      assertEquals(5283.827099409774, line0.getOriginOffset(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(2731.226933280934, 0.5403023058681398);
      Vector2D.Unit vector2D_Unit0 = vector2D0.normalize();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, (-1928.7130778), precision_DoubleEquivalence0);
      Rotation2D rotation2D0 = Rotation2D.createVectorRotation(vector2D_Unit0, vector2D_Unit0);
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createRotation(vector2D0, rotation2D0);
      Line line1 = line0.transform(affineTransformMatrix2D0);
      Vector2D vector2D1 = line0.intersection(line1);
      assertEquals((-1928.7102077602335), vector2D1.getY(), 0.01);
      assertEquals(14.698817416404475, vector2D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit1, 0.0, precision_DoubleEquivalence0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence1).eqZero(anyDouble());
      Line line1 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence1);
      Vector2D vector2D0 = line1.intersection(line0);
      assertEquals(0.0, line1.getOriginOffset(), 0.01);
      assertEquals(0.0, vector2D0.getY(), 0.01);
      assertEquals(0.0, vector2D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 2856.452098310511, precision_DoubleEquivalence0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence1).eqZero(anyDouble());
      Line line1 = new Line(vector2D_Unit0, (-1.0), precision_DoubleEquivalence1);
      Vector2D vector2D0 = line1.intersection(line0);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getX(), 0.01);
      assertFalse(vector2D0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      double double0 = line0.getOriginOffset();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 1.0, precision_DoubleEquivalence0);
      double double0 = line0.getOriginOffset();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, Double.NEGATIVE_INFINITY, precision_DoubleEquivalence0);
      Vector2D vector2D0 = line0.getOrigin();
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.99, precision_DoubleEquivalence0);
      Vector2D vector2D0 = line0.getOrigin();
      double double0 = line0.offset(vector2D0);
      assertEquals(0.99, line0.getOriginOffset(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.negate();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit1, (-1665.5785465), precision_DoubleEquivalence0);
      Vector2D vector2D0 = line0.getOrigin();
      assertEquals((-1665.5785465), vector2D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-1.0), precision_DoubleEquivalence0);
      line0.getOffsetDirection();
      assertEquals((-1.0), line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      line0.getOffsetDirection();
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      line0.getOffsetDirection();
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line((Vector2D.Unit) null, 1.0, precision_DoubleEquivalence0);
      line0.getDirection();
      assertEquals(1.0, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      line0.getDirection();
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.negate();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit1, (-1665.5785465), precision_DoubleEquivalence0);
      Line line1 = line0.reverse();
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createShear((-482.02), (-1665.5785465));
      Line line2 = line1.transform(affineTransformMatrix2D0);
      line2.getDirection();
      assertEquals((-2774142.469231818), line2.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 787.3417707, precision_DoubleEquivalence0);
      line0.getAngle();
      assertEquals(787.3417707, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 1453.39, precision_DoubleEquivalence0);
      double double0 = line0.distance((Vector2D) vector2D_Unit0);
      assertEquals(1453.39, double0, 0.01);
      assertEquals(1453.39, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, true, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, (-1.5707963267948966), precision_DoubleEquivalence0);
      Rotation2D rotation2D0 = Rotation2D.of((-1.5707963267948966));
      AffineTransformMatrix2D affineTransformMatrix2D0 = rotation2D0.toMatrix();
      Line line1 = line0.transform(affineTransformMatrix2D0);
      line0.isParallel(line1);
      double double0 = line1.offset(line0);
      assertEquals((-1.5707963267948966), double0, 0.01);
      
      line0.contains((Vector2D) vector2D_Unit0);
      double double1 = line1.distance(line0);
      assertEquals(1.5707963267948966, double1, 0.01);
      assertEquals((-1.5707963267948966), line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit0, (-1.0), precision_DoubleEquivalence0);
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createRotation(835.2126020433);
      Line line1 = line0.transform(affineTransformMatrix2D0);
      double double0 = line1.angle(line0);
      assertEquals(0.4510438115850346, double0, 0.01);
      assertEquals((-1.0), line0.getOriginOffset(), 0.01);
      assertEquals((-1.0), line1.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      Line line1 = line0.reverse();
      double double0 = line1.angle(line0);
      assertEquals((-3.141592653589793), double0, 0.01);
      assertEquals(-0.0, line1.getOriginOffset(), 0.01);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.orthogonal();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit1, 0.0, precision_DoubleEquivalence0);
      line0.abscissa(vector2D_Unit0);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.5, precision_DoubleEquivalence0);
      Line line1 = line0.reverse();
      line1.abscissa(vector2D_Unit0);
      assertEquals(0.5, line0.getOriginOffset(), 0.01);
      assertEquals((-0.5), line1.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of((-2590.3971184727), (-2590.3971184727));
      Vector2D.Unit vector2D_Unit0 = vector2D0.orthogonal();
      Line line0 = new Line(vector2D_Unit0, (-2590.3971184727), (Precision.DoubleEquivalence) null);
      Rotation2D rotation2D0 = Rotation2D.identity();
      AffineTransformMatrix2D affineTransformMatrix2D0 = rotation2D0.toMatrix();
      // Undeclared exception!
      try { 
        line0.transform(affineTransformMatrix2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit0, 1453.39, precision_DoubleEquivalence0);
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createShear(Double.NEGATIVE_INFINITY, 1453.39);
      // Undeclared exception!
      try { 
        line0.transform(affineTransformMatrix2D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: NaN
         //
         verifyException("org.apache.commons.geometry.euclidean.internal.Vectors", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line((Vector2D.Unit) null, (-1.0), precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        line0.toSubspace((Vector2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line((Vector2D.Unit) null, 1171.422534, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        line0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-1.0), precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        line0.toSpace((Vector1D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line((Vector2D.Unit) null, 0.0, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        line0.toSpace((-0.32684368534274094));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Line line0 = new Line((Vector2D.Unit) null, 0.0, (Precision.DoubleEquivalence) null);
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createShear(335.0, (-2677.069452653));
      // Undeclared exception!
      try { 
        line0.subspaceTransform(affineTransformMatrix2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(1810.5888, 1810.5888);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, true).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit0, 1810.5888, precision_DoubleEquivalence0);
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createTranslation((Vector2D) vector2D_Unit0);
      // Undeclared exception!
      try { 
        line0.subspaceTransform(affineTransformMatrix2D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Line direction cannot be zero
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Lines", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 1316.2, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        line0.similarOrientation((Hyperplane<Vector2D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, Double.NEGATIVE_INFINITY, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        line0.segment((Vector2D) vector2D_Unit0, (Vector2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from((-1.0), (-1.0));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, (-1.0), precision_DoubleEquivalence0);
      Vector2D vector2D0 = line0.intersection(line0);
      // Undeclared exception!
      try { 
        line0.segment(vector2D0, vector2D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid line segment locations: NaN, NaN
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Lines", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line((Vector2D.Unit) null, 0.0, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        line0.segment((-2921.487), 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 1154.5384246390174, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        line0.segment(Double.POSITIVE_INFINITY, 1154.5384246390174);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid line segment locations: Infinity, 1154.5384246390174
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Lines", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 1.0918208453160845, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        line0.reverseRayTo((Vector2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Lines", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      Vector2D vector2D0 = line0.intersection(line0);
      // Undeclared exception!
      try { 
        line0.reverseRayTo(vector2D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid reverse ray end point: (NaN, NaN)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Lines", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line((Vector2D.Unit) null, 0.6, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        line0.reverseRayTo(0.6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Line line0 = new Line((Vector2D.Unit) null, 2950.9, (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        line0.reverse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-1083.47277), precision_DoubleEquivalence0);
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        line0.rayFrom(vector2D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid ray start point: (-Infinity, -Infinity)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Lines", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line((Vector2D.Unit) null, (-155.945596482), precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        line0.rayFrom((-155.945596482));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        line0.rayFrom(Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid ray start location: NaN
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Lines", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.9999, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        line0.project((Vector2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line((Vector2D.Unit) null, 1.073741824E9, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        line0.pointAt((-3264.51758694), 913.58133136);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line((Vector2D.Unit) null, (-1451.394159765), precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        line0.offset((Vector2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Line line0 = new Line(vector2D_Unit0, 1940.0, (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        line0.offset(line0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 1214.45, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        line0.isParallel((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from((-1721.5847585833), (-1721.5847585833));
      Line line0 = new Line(vector2D_Unit0, (-1721.5847585833), (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        line0.intersection((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line((Vector2D.Unit) null, 0.0, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        line0.getOrigin();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line((Vector2D.Unit) null, 0.0, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        line0.getOffsetDirection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line((Vector2D.Unit) null, 0.9999, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        line0.getAngle();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        line0.eq(line0, (Precision.DoubleEquivalence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line((Vector2D.Unit) null, 0.5403023058681398, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        line0.distance((Vector2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 2232.483215031, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        line0.distance((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Line line0 = new Line((Vector2D.Unit) null, 1.0, (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        line0.contains((Vector2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-3544.48814900487), precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        line0.contains((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line((Vector2D.Unit) null, 0.0, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        line0.angle((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line((Vector2D.Unit) null, (-1.0), precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        line0.abscissa((Vector2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      double double0 = line0.offset(line0);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, 1940.0, precision_DoubleEquivalence0);
      double double0 = line0.offset(line0);
      assertEquals(1940.0, line0.getOriginOffset(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.99, precision_DoubleEquivalence0);
      Vector2D vector2D0 = line0.project((Vector2D) vector2D_Unit0);
      assertEquals((-0.99), vector2D0.getY(), 0.01);
      assertEquals((-1.0), vector2D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 55.61455, precision_DoubleEquivalence0);
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Vector2D vector2D0 = line0.toSpace(vector1D0);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01);
      assertEquals(55.61455, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      line0.abscissa(vector2D_Unit0);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of((-2957.4356884704), (-2957.4356884704));
      Vector2D.Unit vector2D_Unit0 = vector2D0.normalizeOrNull();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-2957.4356884704), precision_DoubleEquivalence0);
      double double0 = line0.offset(vector2D0);
      assertEquals((-2957.4356884704), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 729.205442964, precision_DoubleEquivalence0);
      line0.getDirection();
      assertEquals(729.205442964, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit0, 729.205442964, precision_DoubleEquivalence0);
      Rotation2D rotation2D0 = Rotation2D.createVectorRotation(vector2D_Unit0, vector2D_Unit0);
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createRotation((Vector2D) vector2D_Unit0, rotation2D0);
      Line line1 = line0.transform(affineTransformMatrix2D0);
      boolean boolean0 = line1.equals(line0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit1, (-846.104), precision_DoubleEquivalence0);
      Line line1 = line0.reverse();
      Rotation2D rotation2D0 = Rotation2D.identity();
      Line line2 = line1.transform(rotation2D0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line3 = new Line(vector2D_Unit0, (-846.104), precision_DoubleEquivalence1);
      boolean boolean0 = line3.equals(line2);
      assertFalse(line2.equals((Object)line1));
      assertEquals(846.104, line2.getOriginOffset(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit1, 0.0, precision_DoubleEquivalence0);
      Line line1 = line0.reverse();
      Rotation2D rotation2D0 = Rotation2D.identity();
      Line line2 = line1.transform(rotation2D0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line3 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence1);
      boolean boolean0 = line3.equals(line2);
      assertFalse(line2.equals((Object)line0));
      assertEquals(-0.0, line1.getOriginOffset(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, line3.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 1316.2, precision_DoubleEquivalence0);
      boolean boolean0 = line0.equals(vector2D_Unit0);
      assertEquals(1316.2, line0.getOriginOffset(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      boolean boolean0 = line0.equals(line0);
      assertTrue(boolean0);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      Line line1 = line0.reverse();
      Rotation2D rotation2D0 = Rotation2D.identity();
      Line line2 = line1.transform(rotation2D0);
      boolean boolean0 = line1.equals(line2);
      assertEquals(-0.0, line1.getOriginOffset(), 0.01);
      assertFalse(line2.equals((Object)line0));
      assertEquals(0.0, line2.getOriginOffset(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 1.0918208453160845, precision_DoubleEquivalence0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, false).when(precision_DoubleEquivalence1).eq(anyDouble() , anyDouble());
      boolean boolean0 = line0.eq(line0, precision_DoubleEquivalence1);
      assertFalse(boolean0);
      assertEquals(1.0918208453160845, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      boolean boolean0 = line0.contains(line0);
      assertFalse(boolean0);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      boolean boolean0 = line0.similarOrientation(line0);
      assertTrue(boolean0);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      line0.contains((Vector2D) vector2D_Unit0);
      boolean boolean0 = line0.contains(line0);
      assertFalse(boolean0);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence1).eqZero(anyDouble());
      Line line1 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence1);
      Vector2D vector2D0 = line1.intersection(line0);
      assertNotNull(vector2D0);
      
      line0.project(vector2D0);
      assertEquals(0.0, line1.getOriginOffset(), 0.01);
      assertEquals(Double.NaN, vector2D0.getX(), 0.01);
      assertEquals(Double.NaN, vector2D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 729.205442964, precision_DoubleEquivalence0);
      line0.getOffsetDirection();
      assertEquals(729.205442964, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 1940.0, precision_DoubleEquivalence0);
      line0.segment((Vector2D) vector2D_Unit0, (Vector2D) vector2D_Unit0);
      assertEquals(1940.0, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      String string0 = line0.toString();
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
      assertEquals("Line[origin= (0.0, 0.0), direction= (1.0, 0.0)]", string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-783.0), precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        line0.rayFrom((Vector2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Lines", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      double double0 = line0.angle(line0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      line0.span();
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      double double0 = line0.getAngle();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 1940.0, precision_DoubleEquivalence0);
      Vector2D vector2D0 = line0.pointAt(0.0, 0.0);
      assertEquals((-1940.0), vector2D0.getY(), 0.01);
      assertEquals(0.0, vector2D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-204.3236961505446), precision_DoubleEquivalence0);
      double double0 = line0.getOriginOffset();
      assertEquals((-204.3236961505446), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, 15.001125902863198, precision_DoubleEquivalence0);
      double double0 = line0.distance(line0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(15.001125902863198, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.5403023058681398, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        line0.reverseRayTo(Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid reverse ray end location: NaN
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Lines", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 1940.0, precision_DoubleEquivalence0);
      line0.segment(445.6543, 0.0);
      assertEquals(1940.0, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      line0.reverseRayTo((Vector2D) vector2D_Unit0);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      Line.SubspaceTransform line_SubspaceTransform0 = new Line.SubspaceTransform((Line) null, affineTransformMatrix1D0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = line_SubspaceTransform0.getTransform();
      assertSame(affineTransformMatrix1D0, affineTransformMatrix1D1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-783.0), precision_DoubleEquivalence0);
      Vector1D vector1D0 = Vector1D.NaN;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(vector1D0);
      Line.SubspaceTransform line_SubspaceTransform0 = new Line.SubspaceTransform(line0, affineTransformMatrix1D0);
      Line line1 = line_SubspaceTransform0.getLine();
      assertEquals((-783.0), line1.getOriginOffset(), 0.01);
  }
}
