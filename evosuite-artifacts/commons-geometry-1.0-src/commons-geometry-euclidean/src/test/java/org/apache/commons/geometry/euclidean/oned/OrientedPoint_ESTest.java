/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 01:14:56 GMT 2022
 */

package org.apache.commons.geometry.euclidean.oned;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.geometry.core.partitioning.Hyperplane;
import org.apache.commons.geometry.core.partitioning.HyperplaneLocation;
import org.apache.commons.geometry.euclidean.oned.AffineTransformMatrix1D;
import org.apache.commons.geometry.euclidean.oned.OrientedPoint;
import org.apache.commons.geometry.euclidean.oned.Vector1D;
import org.apache.commons.numbers.core.Precision;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OrientedPoint_ESTest extends OrientedPoint_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, true, precision_DoubleEquivalence0);
      orientedPoint0.hashCode();
      assertTrue(orientedPoint0.isPositiveFacing());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn((-2166.75364868), 1048.109419777, 1048.109419777, Double.NaN).when(precision_DoubleEquivalence0).signum(anyDouble());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false, precision_DoubleEquivalence0);
      HyperplaneLocation hyperplaneLocation0 = orientedPoint0.classify(vector1D0);
      assertEquals(HyperplaneLocation.MINUS, hyperplaneLocation0);
      
      orientedPoint0.classify(1659.0234);
      HyperplaneLocation hyperplaneLocation1 = orientedPoint0.classify(1659.0234);
      assertEquals(HyperplaneLocation.PLUS, hyperplaneLocation1);
      
      HyperplaneLocation hyperplaneLocation2 = orientedPoint0.classify(vector1D0);
      assertFalse(orientedPoint0.isPositiveFacing());
      assertEquals(HyperplaneLocation.ON, hyperplaneLocation2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, true, precision_DoubleEquivalence0);
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      OrientedPoint orientedPoint1 = orientedPoint0.transform(affineTransformMatrix1D0);
      assertTrue(orientedPoint1.equals((Object)orientedPoint0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, true, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint1 = orientedPoint0.reverse();
      assertFalse(orientedPoint1.equals((Object)orientedPoint0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, true, precision_DoubleEquivalence0);
      orientedPoint0.project(vector1D0);
      assertTrue(orientedPoint0.isPositiveFacing());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, true, precision_DoubleEquivalence0);
      orientedPoint0.project(vector1D0);
      assertTrue(orientedPoint0.isPositiveFacing());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, true, precision_DoubleEquivalence0);
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale((-2235.548734766));
      OrientedPoint orientedPoint1 = orientedPoint0.transform(affineTransformMatrix1D0);
      orientedPoint1.project((Vector1D) vector1D_Unit0);
      assertFalse(orientedPoint1.isPositiveFacing());
      assertTrue(orientedPoint0.isPositiveFacing());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NaN;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false, precision_DoubleEquivalence0);
      orientedPoint0.project(vector1D0);
      assertFalse(orientedPoint0.isPositiveFacing());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of((-2251.568622));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false, precision_DoubleEquivalence0);
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale((-2251.568622));
      OrientedPoint orientedPoint1 = orientedPoint0.transform(affineTransformMatrix1D0);
      OrientedPoint orientedPoint2 = orientedPoint1.reverse();
      double double0 = orientedPoint2.offset(vector1D0);
      assertEquals(5071812.828196977, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of(0.0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false, precision_DoubleEquivalence0);
      double double0 = orientedPoint0.offset(0.0);
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false, precision_DoubleEquivalence0);
      double double0 = orientedPoint0.offset((-1.0));
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint((Vector1D) null, true, precision_DoubleEquivalence0);
      boolean boolean0 = orientedPoint0.isPositiveFacing();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false, precision_DoubleEquivalence0);
      orientedPoint0.getPoint();
      assertFalse(orientedPoint0.isPositiveFacing());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NaN;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false, precision_DoubleEquivalence0);
      orientedPoint0.getPoint();
      assertFalse(orientedPoint0.isPositiveFacing());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, true, precision_DoubleEquivalence0);
      orientedPoint0.getPoint();
      assertTrue(orientedPoint0.isPositiveFacing());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false, precision_DoubleEquivalence0);
      orientedPoint0.getLocation();
      assertFalse(orientedPoint0.isPositiveFacing());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, true, precision_DoubleEquivalence0);
      orientedPoint0.getLocation();
      assertTrue(orientedPoint0.isPositiveFacing());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint((Vector1D) null, true, precision_DoubleEquivalence0);
      double[] doubleArray0 = new double[2];
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.of(doubleArray0);
      // Undeclared exception!
      try { 
        orientedPoint0.transform(affineTransformMatrix1D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.AffineTransformMatrix1D", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, true, precision_DoubleEquivalence0);
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale((-2908.3555972));
      // Undeclared exception!
      try { 
        orientedPoint0.transform(affineTransformMatrix1D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Oriented point direction cannot be zero
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.OrientedPoints", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        orientedPoint0.similarOrientation((Hyperplane<Vector1D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.OrientedPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, true, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        orientedPoint0.offset((Vector1D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.OrientedPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint((Vector1D) null, false, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        orientedPoint0.offset((-1907.0353047647286));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.OrientedPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint((Vector1D) null, false, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        orientedPoint0.getLocation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.OrientedPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        orientedPoint0.eq(orientedPoint0, (Precision.DoubleEquivalence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.Vector1D", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, true, (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        orientedPoint0.classify((Vector1D) vector1D_Unit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.OrientedPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint((Vector1D) null, true, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        orientedPoint0.classify(1901.672);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.OrientedPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NaN;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.39903552594313924, 0.39903552594313924, 0.39903552594313924, (-1590.42730105213)).when(precision_DoubleEquivalence0).signum(anyDouble());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, true, precision_DoubleEquivalence0);
      orientedPoint0.contains(vector1D0);
      orientedPoint0.contains(vector1D0);
      HyperplaneLocation hyperplaneLocation0 = orientedPoint0.classify((-2746.2818818));
      assertEquals(HyperplaneLocation.PLUS, hyperplaneLocation0);
      
      HyperplaneLocation hyperplaneLocation1 = orientedPoint0.classify(Double.NaN);
      assertEquals(HyperplaneLocation.MINUS, hyperplaneLocation1);
      assertTrue(orientedPoint0.isPositiveFacing());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, true, precision_DoubleEquivalence0);
      double double0 = orientedPoint0.offset((-654.9302196545567));
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, true, precision_DoubleEquivalence0);
      Vector1D.Unit vector1D_Unit0 = orientedPoint0.getDirection();
      assertEquals(1.0, vector1D_Unit0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false, precision_DoubleEquivalence0);
      Vector1D.Unit vector1D_Unit0 = orientedPoint0.getDirection();
      assertEquals((-1.0), vector1D_Unit0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of((-916.27717937));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false, precision_DoubleEquivalence0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint1 = orientedPoint0.reverse();
      OrientedPoint orientedPoint2 = new OrientedPoint(vector1D0, false, precision_DoubleEquivalence1);
      OrientedPoint orientedPoint3 = orientedPoint2.reverse();
      boolean boolean0 = orientedPoint1.equals(orientedPoint3);
      assertFalse(orientedPoint3.equals((Object)orientedPoint2));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of(1169.564831381051);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from(vector1D0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, true, precision_DoubleEquivalence0);
      Vector1D vector1D1 = vector1D0.add(1.4487647751035, (Vector1D) vector1D_Unit0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint1 = new OrientedPoint(vector1D1, true, precision_DoubleEquivalence1);
      boolean boolean0 = orientedPoint0.equals(orientedPoint1);
      assertFalse(boolean0);
      assertTrue(orientedPoint1.isPositiveFacing());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of(1169.564831381051);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from(vector1D0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, true, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint1 = orientedPoint0.reverse();
      boolean boolean0 = orientedPoint1.equals(orientedPoint0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, false, precision_DoubleEquivalence0);
      boolean boolean0 = orientedPoint0.equals(orientedPoint0);
      assertTrue(boolean0);
      assertFalse(orientedPoint0.isPositiveFacing());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, false, precision_DoubleEquivalence0);
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale((Vector1D) vector1D_Unit0);
      boolean boolean0 = orientedPoint0.equals(affineTransformMatrix1D0);
      assertFalse(orientedPoint0.isPositiveFacing());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, false, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint1 = orientedPoint0.reverse();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence1).eq(anyDouble() , anyDouble());
      boolean boolean0 = orientedPoint0.eq(orientedPoint1, precision_DoubleEquivalence1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, false, precision_DoubleEquivalence0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence1).eq(anyDouble() , anyDouble());
      boolean boolean0 = orientedPoint0.eq(orientedPoint0, precision_DoubleEquivalence1);
      assertFalse(orientedPoint0.isPositiveFacing());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, false, precision_DoubleEquivalence0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence1).eq(anyDouble() , anyDouble());
      boolean boolean0 = orientedPoint0.eq(orientedPoint0, precision_DoubleEquivalence1);
      assertFalse(orientedPoint0.isPositiveFacing());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, false, precision_DoubleEquivalence0);
      boolean boolean0 = orientedPoint0.similarOrientation(orientedPoint0);
      assertTrue(boolean0);
      assertFalse(orientedPoint0.isPositiveFacing());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of((-916.27717937));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint1 = orientedPoint0.reverse();
      boolean boolean0 = orientedPoint1.similarOrientation(orientedPoint0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of(1169.564831381051);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from(vector1D0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, true, precision_DoubleEquivalence0);
      HyperplaneLocation hyperplaneLocation0 = orientedPoint0.classify(628.3);
      assertTrue(orientedPoint0.isPositiveFacing());
      assertEquals(HyperplaneLocation.ON, hyperplaneLocation0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, false, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint1 = orientedPoint0.reverse();
      double double0 = orientedPoint1.offset((Vector1D) vector1D_Unit0);
      assertEquals(0.0, double0, 0.01);
      assertFalse(orientedPoint0.isPositiveFacing());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false, precision_DoubleEquivalence0);
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      OrientedPoint orientedPoint1 = orientedPoint0.transform(affineTransformMatrix1D0);
      boolean boolean0 = orientedPoint0.equals(orientedPoint1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, false, precision_DoubleEquivalence0);
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation((Vector1D) vector1D_Unit0);
      OrientedPoint orientedPoint1 = orientedPoint0.transform(affineTransformMatrix1D0);
      OrientedPoint orientedPoint2 = orientedPoint1.reverse();
      double double0 = orientedPoint2.offset((Vector1D) vector1D_Unit0);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, false, precision_DoubleEquivalence0);
      boolean boolean0 = orientedPoint0.isPositiveFacing();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, false, precision_DoubleEquivalence0);
      orientedPoint0.span();
      assertFalse(orientedPoint0.isPositiveFacing());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint((Vector1D) null, true, precision_DoubleEquivalence0);
      String string0 = orientedPoint0.toString();
      assertEquals("OrientedPoint[point= null, direction= (1.0)]", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, false, precision_DoubleEquivalence0);
      orientedPoint0.getLocation();
      assertFalse(orientedPoint0.isPositiveFacing());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint((Vector1D) null, true, precision_DoubleEquivalence0);
      orientedPoint0.getPoint();
      assertTrue(orientedPoint0.isPositiveFacing());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint((Vector1D) null, true, precision_DoubleEquivalence0);
      orientedPoint0.project((Vector1D) null);
      assertTrue(orientedPoint0.isPositiveFacing());
  }
}
