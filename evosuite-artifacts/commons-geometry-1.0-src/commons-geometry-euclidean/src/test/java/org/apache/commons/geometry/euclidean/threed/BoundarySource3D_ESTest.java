/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 01:30:10 GMT 2022
 */

package org.apache.commons.geometry.euclidean.threed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Vector;
import java.util.stream.Stream;
import org.apache.commons.geometry.euclidean.threed.BoundaryList3D;
import org.apache.commons.geometry.euclidean.threed.BoundarySource3D;
import org.apache.commons.geometry.euclidean.threed.Bounds3D;
import org.apache.commons.geometry.euclidean.threed.PlaneConvexSubset;
import org.apache.commons.geometry.euclidean.threed.RegionBSPTree3D;
import org.apache.commons.geometry.euclidean.threed.SimpleTriangle3D;
import org.apache.commons.geometry.euclidean.threed.Triangle3D;
import org.apache.commons.geometry.euclidean.threed.line.LineConvexSubset3D;
import org.apache.commons.geometry.euclidean.threed.line.LinecastPoint3D;
import org.apache.commons.numbers.core.Precision;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BoundarySource3D_ESTest extends BoundarySource3D_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashSet<PlaneConvexSubset> hashSet0 = new HashSet<PlaneConvexSubset>();
      hashSet0.add((PlaneConvexSubset) null);
      BoundarySource3D boundarySource3D0 = BoundarySource3D.of((Collection<PlaneConvexSubset>) hashSet0);
      BoundaryList3D boundaryList3D0 = boundarySource3D0.toList();
      assertEquals(1, boundaryList3D0.count());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PlaneConvexSubset[] planeConvexSubsetArray0 = new PlaneConvexSubset[0];
      BoundarySource3D boundarySource3D0 = BoundarySource3D.of(planeConvexSubsetArray0);
      assertNotNull(boundarySource3D0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector<SimpleTriangle3D> vector0 = new Vector<SimpleTriangle3D>();
      BoundaryList3D boundaryList3D0 = new BoundaryList3D(vector0);
      vector0.add((SimpleTriangle3D) null);
      // Undeclared exception!
      try { 
        boundaryList3D0.toTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.core.partitioning.bsp.AbstractBSPTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        BoundarySource3D.of((Collection<PlaneConvexSubset>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.BoundarySource3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashSet<PlaneConvexSubset> hashSet0 = new HashSet<PlaneConvexSubset>();
      hashSet0.add((PlaneConvexSubset) null);
      BoundarySource3D boundarySource3D0 = BoundarySource3D.of((Collection<PlaneConvexSubset>) hashSet0);
      // Undeclared exception!
      try { 
        boundarySource3D0.getBounds();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.BoundarySourceBoundsBuilder3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector<SimpleTriangle3D> vector0 = new Vector<SimpleTriangle3D>();
      BoundaryList3D boundaryList3D0 = new BoundaryList3D(vector0);
      Stream<Triangle3D> stream0 = boundaryList3D0.triangleStream();
      assertNotNull(stream0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RegionBSPTree3D regionBSPTree3D0 = RegionBSPTree3D.full();
      // Undeclared exception!
      try { 
        regionBSPTree3D0.toTriangleMesh((Precision.DoubleEquivalence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Precision context must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector<SimpleTriangle3D> vector0 = new Vector<SimpleTriangle3D>();
      BoundaryList3D boundaryList3D0 = new BoundaryList3D(vector0);
      RegionBSPTree3D regionBSPTree3D0 = boundaryList3D0.toTree();
      assertNotNull(regionBSPTree3D0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedHashSet<PlaneConvexSubset> linkedHashSet0 = new LinkedHashSet<PlaneConvexSubset>();
      BoundarySource3D boundarySource3D0 = BoundarySource3D.of((Collection<PlaneConvexSubset>) linkedHashSet0);
      LinecastPoint3D linecastPoint3D0 = boundarySource3D0.linecastFirst((LineConvexSubset3D) null);
      assertNull(linecastPoint3D0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        BoundarySource3D.of((PlaneConvexSubset[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RegionBSPTree3D regionBSPTree3D0 = new RegionBSPTree3D();
      BoundaryList3D boundaryList3D0 = regionBSPTree3D0.toList();
      List<LinecastPoint3D> list0 = boundaryList3D0.linecast((LineConvexSubset3D) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RegionBSPTree3D regionBSPTree3D0 = RegionBSPTree3D.empty();
      Bounds3D bounds3D0 = regionBSPTree3D0.getBounds();
      assertNull(bounds3D0);
  }
}
