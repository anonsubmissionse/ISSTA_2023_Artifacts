/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 01:12:32 GMT 2022
 */

package org.apache.commons.geometry.euclidean.twod;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.stream.Stream;
import org.apache.commons.geometry.core.partitioning.Hyperplane;
import org.apache.commons.geometry.core.partitioning.HyperplaneConvexSubset;
import org.apache.commons.geometry.euclidean.twod.AffineTransformMatrix2D;
import org.apache.commons.geometry.euclidean.twod.ConvexArea;
import org.apache.commons.geometry.euclidean.twod.EmbeddedTreeLineSubset;
import org.apache.commons.geometry.euclidean.twod.Line;
import org.apache.commons.geometry.euclidean.twod.LineConvexSubset;
import org.apache.commons.geometry.euclidean.twod.LineSpanningSubset;
import org.apache.commons.geometry.euclidean.twod.RegionBSPTree2D;
import org.apache.commons.geometry.euclidean.twod.Segment;
import org.apache.commons.geometry.euclidean.twod.Vector2D;
import org.apache.commons.geometry.euclidean.twod.path.LinePath;
import org.apache.commons.geometry.euclidean.twod.rotation.Rotation2D;
import org.apache.commons.numbers.core.Precision;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConvexArea_ESTest extends ConvexArea_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Stack<LineConvexSubset> stack0 = new Stack<LineConvexSubset>();
      ConvexArea convexArea0 = new ConvexArea(stack0);
      Rotation2D rotation2D0 = Rotation2D.identity();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, true, false, true).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(true).when(precision_DoubleEquivalence0).lt(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit0, (-1376.106788564), precision_DoubleEquivalence0);
      line0.transform(rotation2D0);
      Segment segment0 = line0.segment((double) (-2), 1.0);
      stack0.add((LineConvexSubset) segment0);
      stack0.add((LineConvexSubset) segment0);
      convexArea0.transform(rotation2D0);
      stack0.add((LineConvexSubset) segment0);
      stack0.add((LineConvexSubset) segment0);
      LinePath linePath0 = LinePath.from((Collection<? extends LineConvexSubset>) stack0);
      // Undeclared exception!
      try { 
        ConvexArea.convexPolygonFromPath(linePath0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot construct convex polygon from non-convex path: LinePath[vertexSequence= [(-2.0, -1376.106788564), (1.0, -1376.106788564), (1.0, -1376.106788564), (1.0, -1376.106788564), (1.0, -1376.106788564)]]
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.ConvexArea", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Stack<LineConvexSubset> stack0 = new Stack<LineConvexSubset>();
      ConvexArea convexArea0 = new ConvexArea(stack0);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-1376.106788564), precision_DoubleEquivalence0);
      Line line1 = line0.reverse();
      Segment segment0 = line1.segment(0.0, 128.33155);
      stack0.add((LineConvexSubset) segment0);
      Vector2D vector2D0 = convexArea0.getCentroid();
      assertNull(vector2D0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Stack<LineConvexSubset> stack0 = new Stack<LineConvexSubset>();
      ConvexArea convexArea0 = new ConvexArea(stack0);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-1376.106788564), precision_DoubleEquivalence0);
      Segment segment0 = line0.segment((double) (-2), 1.0);
      stack0.add((LineConvexSubset) segment0);
      stack0.add((LineConvexSubset) segment0);
      Vector2D vector2D0 = convexArea0.getCentroid();
      assertEquals((-0.3333333333333333), vector2D0.getX(), 0.01);
      assertNotNull(vector2D0);
      assertEquals((-917.4045257093333), vector2D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(0.25, 1999.05);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 1999.05, precision_DoubleEquivalence0);
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      TreeSet<Line> treeSet0 = new TreeSet<Line>();
      PriorityQueue<Line> priorityQueue0 = new PriorityQueue<Line>((SortedSet<? extends Line>) treeSet0);
      ConvexArea convexArea0 = ConvexArea.fromBounds((Iterable<Line>) priorityQueue0);
      LineConvexSubset lineConvexSubset0 = convexArea0.trim(lineSpanningSubset0);
      assertEquals(Double.POSITIVE_INFINITY, lineConvexSubset0.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Stack<LineConvexSubset> stack0 = new Stack<LineConvexSubset>();
      ConvexArea convexArea0 = new ConvexArea(stack0);
      Rotation2D rotation2D0 = Rotation2D.of(1.0);
      ConvexArea convexArea1 = convexArea0.transform(rotation2D0);
      assertSame(convexArea0, convexArea1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Stack<LineConvexSubset> stack0 = new Stack<LineConvexSubset>();
      ConvexArea convexArea0 = new ConvexArea(stack0);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-1376.106788564), precision_DoubleEquivalence0);
      Segment segment0 = new Segment(line0, vector2D_Unit0, vector2D_Unit0);
      stack0.add((LineConvexSubset) segment0);
      double double0 = convexArea0.getSize();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Stack<LineConvexSubset> stack0 = new Stack<LineConvexSubset>();
      ConvexArea convexArea0 = new ConvexArea(stack0);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-1376.106788564), precision_DoubleEquivalence0);
      Line line1 = line0.reverse();
      Segment segment0 = line1.segment(0.0, 128.33155);
      stack0.add((LineConvexSubset) segment0);
      double double0 = convexArea0.getSize();
      assertEquals((-88298.9585709702), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Stack<LineConvexSubset> stack0 = new Stack<LineConvexSubset>();
      ConvexArea convexArea0 = new ConvexArea(stack0);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-1376.106788564), precision_DoubleEquivalence0);
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = lineSpanningSubset0.getPrecision();
      Line line1 = new Line(vector2D_Unit0, 128.33155, precision_DoubleEquivalence1);
      Line line2 = line1.reverse();
      Segment segment0 = line2.segment(0.0, 128.33155);
      stack0.add((LineConvexSubset) segment0);
      Vector2D vector2D0 = convexArea0.getCentroid();
      assertNotNull(vector2D0);
      assertEquals(42.777183333333326, vector2D0.getY(), 0.01);
      assertEquals(85.55436666666665, vector2D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Stack<LineConvexSubset> stack0 = new Stack<LineConvexSubset>();
      ConvexArea convexArea0 = new ConvexArea(stack0);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(2147353260).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      doReturn(false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, (-1376.106788564), precision_DoubleEquivalence0);
      Segment segment0 = line0.segment(0.0, 1.0);
      stack0.add((LineConvexSubset) segment0);
      List<LinePath> list0 = convexArea0.getBoundaryPaths();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Line[] lineArray0 = new Line[0];
      ConvexArea convexArea0 = ConvexArea.fromBounds(lineArray0);
      assertFalse(convexArea0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayDeque<Line> arrayDeque0 = new ArrayDeque<Line>((-1719));
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from((double) (-1719), (double) (-1719));
      Line line0 = new Line(vector2D_Unit0, (-1719), (Precision.DoubleEquivalence) null);
      arrayDeque0.add(line0);
      ConvexArea convexArea0 = ConvexArea.fromBounds((Iterable<Line>) arrayDeque0);
      // Undeclared exception!
      try { 
        convexArea0.trim((HyperplaneConvexSubset<Vector2D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.core.partitioning.AbstractConvexHyperplaneBoundedRegion", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArrayDeque<Line> arrayDeque0 = new ArrayDeque<Line>((-1719));
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from((double) (-1719), 2903.5336173616);
      Line line0 = new Line(vector2D_Unit0, (-1719), (Precision.DoubleEquivalence) null);
      arrayDeque0.add(line0);
      ConvexArea convexArea0 = ConvexArea.fromBounds((Iterable<Line>) arrayDeque0);
      Rotation2D rotation2D0 = Rotation2D.of(0.0);
      // Undeclared exception!
      try { 
        convexArea0.transform(rotation2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Line[] lineArray0 = new Line[7];
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit0, (-406.965878007), precision_DoubleEquivalence0);
      lineArray0[0] = line0;
      lineArray0[1] = line0;
      lineArray0[2] = line0;
      lineArray0[3] = line0;
      lineArray0[4] = line0;
      lineArray0[5] = line0;
      lineArray0[6] = lineArray0[1];
      ConvexArea convexArea0 = ConvexArea.fromBounds(lineArray0);
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createScale((-0.9999999999), 0.0);
      // Undeclared exception!
      try { 
        convexArea0.transform(affineTransformMatrix2D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException("org.apache.commons.geometry.euclidean.internal.Vectors", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PriorityQueue<Line> priorityQueue0 = new PriorityQueue<Line>();
      ConvexArea convexArea0 = ConvexArea.fromBounds((Iterable<Line>) priorityQueue0);
      // Undeclared exception!
      try { 
        convexArea0.split((Hyperplane<Vector2D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.core.partitioning.AbstractConvexHyperplaneBoundedRegion", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayDeque<Line> arrayDeque0 = new ArrayDeque<Line>((-1719));
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from((double) (-1719), 2903.5336173616);
      Line line0 = new Line(vector2D_Unit0, (-1719), (Precision.DoubleEquivalence) null);
      arrayDeque0.add(line0);
      ConvexArea convexArea0 = ConvexArea.fromBounds((Iterable<Line>) arrayDeque0);
      // Undeclared exception!
      try { 
        convexArea0.getVertices();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.path.AbstractLinePathConnector$ConnectableLineSubset", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Line[] lineArray0 = new Line[2];
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(0.25, 1999.05);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, true, true, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, 1999.05, precision_DoubleEquivalence0);
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.identity();
      lineSpanningSubset0.transform(affineTransformMatrix2D0);
      Line line1 = line0.transform(affineTransformMatrix2D0);
      lineArray0[0] = line1;
      lineArray0[1] = line0;
      ConvexArea convexArea0 = ConvexArea.fromBounds(lineArray0);
      // Undeclared exception!
      try { 
        convexArea0.getVertices();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Path line subsets are not connected: previous= ReverseRay[direction= (1.2505940230767012E-4, 0.9999999921800731), endPoint= (-1999.0504074826351, -3.1333126494202226)], next= Ray[startPoint= (-1999.0504074826351, -3.1333126494202226), direction= (1.2505940223857243E-4, 0.9999999921800728)]
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.path.LinePath$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<LineConvexSubset> linkedList0 = new LinkedList<LineConvexSubset>();
      linkedList0.add((LineConvexSubset) null);
      ConvexArea convexArea0 = new ConvexArea(linkedList0);
      // Undeclared exception!
      try { 
        convexArea0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.ConvexArea", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<LineConvexSubset> linkedList0 = new LinkedList<LineConvexSubset>();
      linkedList0.add((LineConvexSubset) null);
      ConvexArea convexArea0 = new ConvexArea(linkedList0);
      // Undeclared exception!
      try { 
        convexArea0.getCentroid();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.ConvexArea", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ArrayDeque<Line> arrayDeque0 = new ArrayDeque<Line>((-1719));
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from((double) (-1719), 2903.5336173616);
      Line line0 = new Line(vector2D_Unit0, (-1719), (Precision.DoubleEquivalence) null);
      arrayDeque0.add(line0);
      ConvexArea convexArea0 = ConvexArea.fromBounds((Iterable<Line>) arrayDeque0);
      // Undeclared exception!
      try { 
        convexArea0.getBoundaryPaths();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.path.AbstractLinePathConnector$ConnectableLineSubset", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Line[] lineArray0 = new Line[2];
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(0.25, 1999.05);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(1326, 1326).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      doReturn(true, false, true, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, (-0.999999999999998), precision_DoubleEquivalence0);
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = lineSpanningSubset0.getPrecision();
      Line line1 = new Line(vector2D_Unit0, 0.25, precision_DoubleEquivalence1);
      lineArray0[0] = line0;
      lineArray0[1] = line1;
      // Undeclared exception!
      try { 
        ConvexArea.fromBounds(lineArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bounding hyperplanes do not produce a convex region: [Line[origin= (0.9999999921800709, -1.2505940223857219E-4), direction= (1.2505940223857243E-4, 0.9999999921800728)], Line[origin= (-0.2499999980450182, 3.126485055964311E-5), direction= (1.2505940223857243E-4, 0.9999999921800728)]]
         //
         verifyException("org.apache.commons.geometry.core.partitioning.AbstractConvexHyperplaneBoundedRegion$ConvexRegionBoundaryBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        ConvexArea.fromBounds((Iterable<Line>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.core.partitioning.AbstractConvexHyperplaneBoundedRegion$ConvexRegionBoundaryBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 529.6012016350131, precision_DoubleEquivalence0);
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = lineSpanningSubset0.getPrecision();
      // Undeclared exception!
      try { 
        ConvexArea.convexPolygonFromVertices((Collection<Vector2D>) null, precision_DoubleEquivalence1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.path.LinePath$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Line[] lineArray0 = new Line[2];
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(0.25, 1999.05);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      doReturn(true, false, false, true, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, 1999.05, precision_DoubleEquivalence0);
      Line line1 = line0.reverse();
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line1);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = lineSpanningSubset0.getPrecision();
      lineArray0[0] = line0;
      lineArray0[1] = line1;
      ConvexArea convexArea0 = ConvexArea.fromBounds(lineArray0);
      List<Vector2D> list0 = convexArea0.getVertices();
      // Undeclared exception!
      try { 
        ConvexArea.convexPolygonFromVertices(list0, precision_DoubleEquivalence1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unable to create line path; only a single unique vertex provided: (NaN, NaN) 
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.path.LinePath$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        ConvexArea.convexPolygonFromPath((LinePath) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.ConvexArea", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConvexArea convexArea0 = null;
      try {
        convexArea0 = new ConvexArea((List<LineConvexSubset>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector<Segment> vector0 = new Vector<Segment>();
      LinePath linePath0 = LinePath.from((Collection<? extends LineConvexSubset>) vector0);
      // Undeclared exception!
      try { 
        ConvexArea.convexPolygonFromPath(linePath0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot construct convex polygon from unclosed path: LinePath[empty= true]
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.ConvexArea", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConvexArea convexArea0 = ConvexArea.full();
      assertTrue(convexArea0.isFull());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ArrayDeque<Line> arrayDeque0 = new ArrayDeque<Line>((-1719));
      ConvexArea convexArea0 = ConvexArea.fromBounds((Iterable<Line>) arrayDeque0);
      List<LinePath> list0 = convexArea0.getBoundaryPaths();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ArrayDeque<Line> arrayDeque0 = new ArrayDeque<Line>((-1719));
      ConvexArea convexArea0 = ConvexArea.fromBounds((Iterable<Line>) arrayDeque0);
      LineConvexSubset lineConvexSubset0 = convexArea0.trim((HyperplaneConvexSubset<Vector2D>) null);
      assertNull(lineConvexSubset0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Stack<LineConvexSubset> stack0 = new Stack<LineConvexSubset>();
      ConvexArea convexArea0 = new ConvexArea(stack0);
      Rotation2D rotation2D0 = Rotation2D.identity();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, true, false, true).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).lt(anyDouble() , anyDouble());
      doReturn(true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit0, (-1376.106788564), precision_DoubleEquivalence0);
      Line line1 = line0.transform(rotation2D0);
      line0.transform(rotation2D0);
      Segment segment0 = line1.segment((double) (-2), 1.0);
      stack0.add((LineConvexSubset) segment0);
      convexArea0.transform(rotation2D0);
      stack0.add((LineConvexSubset) segment0);
      stack0.add((LineConvexSubset) segment0);
      LinePath linePath0 = LinePath.from((Collection<? extends LineConvexSubset>) stack0);
      // Undeclared exception!
      try { 
        ConvexArea.convexPolygonFromPath(linePath0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot construct convex polygon from non-convex path: LinePath[vertexSequence= [(-2.0, -1376.106788564), (1.0, -1376.106788564), (1.0, -1376.106788564), (1.0, -1376.106788564)]]
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.ConvexArea", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Stack<LineConvexSubset> stack0 = new Stack<LineConvexSubset>();
      ConvexArea convexArea0 = new ConvexArea(stack0);
      Rotation2D rotation2D0 = Rotation2D.identity();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, true, false, true).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).lt(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit0, (-1376.106788564), precision_DoubleEquivalence0);
      Line line1 = line0.transform(rotation2D0);
      line0.transform(rotation2D0);
      Segment segment0 = line1.segment((double) (-2), 1.0);
      stack0.add((LineConvexSubset) segment0);
      convexArea0.transform(rotation2D0);
      stack0.add((LineConvexSubset) segment0);
      stack0.add((LineConvexSubset) segment0);
      LinePath linePath0 = LinePath.from((Collection<? extends LineConvexSubset>) stack0);
      ConvexArea convexArea1 = ConvexArea.convexPolygonFromPath(linePath0);
      assertFalse(convexArea1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Stack<LineConvexSubset> stack0 = new Stack<LineConvexSubset>();
      ConvexArea convexArea0 = new ConvexArea(stack0);
      Rotation2D rotation2D0 = Rotation2D.identity();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, true, false, true).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit0, (-1376.106788564), precision_DoubleEquivalence0);
      Line line1 = line0.transform(rotation2D0);
      line0.transform(rotation2D0);
      Segment segment0 = line1.segment((double) (-2), 1.0);
      stack0.add((LineConvexSubset) segment0);
      convexArea0.transform(rotation2D0);
      LinePath linePath0 = LinePath.from((Collection<? extends LineConvexSubset>) stack0);
      // Undeclared exception!
      try { 
        ConvexArea.convexPolygonFromPath(linePath0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot construct convex polygon from path with less than 3 elements: LinePath[single= Segment[startPoint= (-2.0, -1376.106788564), endPoint= (1.0, -1376.106788564)]]
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.ConvexArea", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ArrayDeque<Line> arrayDeque0 = new ArrayDeque<Line>((-1719));
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from((double) (-1719), 2903.5336173616);
      Line line0 = new Line(vector2D_Unit0, (-1719), (Precision.DoubleEquivalence) null);
      arrayDeque0.add(line0);
      ConvexArea convexArea0 = ConvexArea.fromBounds((Iterable<Line>) arrayDeque0);
      convexArea0.getCentroid();
      assertFalse(convexArea0.isFull());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Stack<LineConvexSubset> stack0 = new Stack<LineConvexSubset>();
      ConvexArea convexArea0 = new ConvexArea(stack0);
      Vector2D vector2D0 = convexArea0.getCentroid();
      assertNull(vector2D0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Stack<LineConvexSubset> stack0 = new Stack<LineConvexSubset>();
      ConvexArea convexArea0 = new ConvexArea(stack0);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-1376.106788564), precision_DoubleEquivalence0);
      Segment segment0 = line0.segment((double) (-2), 1.0);
      stack0.add((LineConvexSubset) segment0);
      double double0 = convexArea0.getSize();
      assertEquals(2064.1601828459998, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vector<LineConvexSubset> vector0 = new Vector<LineConvexSubset>();
      ConvexArea convexArea0 = new ConvexArea(vector0);
      double double0 = convexArea0.getSize();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Line[] lineArray0 = new Line[2];
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(0.25, 1999.05);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 1999.05, precision_DoubleEquivalence0);
      lineArray0[0] = line0;
      lineArray0[1] = lineArray0[0];
      ConvexArea convexArea0 = ConvexArea.fromBounds(lineArray0);
      double double0 = convexArea0.getSize();
      assertFalse(convexArea0.isFull());
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Stack<LineConvexSubset> stack0 = new Stack<LineConvexSubset>();
      ConvexArea convexArea0 = new ConvexArea(stack0);
      Rotation2D rotation2D0 = Rotation2D.identity();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn((-2)).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      doReturn(false, false, true, false, true).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(true, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, (-1376.106788564), precision_DoubleEquivalence0);
      Line line1 = line0.transform(rotation2D0);
      line0.transform(rotation2D0);
      Segment segment0 = line1.segment((double) (-2), 1.0);
      stack0.add((LineConvexSubset) segment0);
      convexArea0.transform(rotation2D0);
      List<Vector2D> list0 = convexArea0.getVertices();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Line[] lineArray0 = new Line[2];
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(0.25, 1999.05);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, 1999.05, precision_DoubleEquivalence0);
      lineArray0[0] = line0;
      lineArray0[1] = line0;
      ConvexArea convexArea0 = ConvexArea.fromBounds(lineArray0);
      List<Vector2D> list0 = convexArea0.getVertices();
      assertEquals(0, list0.size());
      assertFalse(convexArea0.isFull());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Vector<LineConvexSubset> vector0 = new Vector<LineConvexSubset>();
      ConvexArea convexArea0 = new ConvexArea(vector0);
      Stream<LineConvexSubset> stream0 = convexArea0.boundaryStream();
      assertNotNull(stream0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(0.25, 1999.05);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 1999.05, precision_DoubleEquivalence0);
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      Vector<LineConvexSubset> vector0 = new Vector<LineConvexSubset>();
      ConvexArea convexArea0 = new ConvexArea(vector0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = lineSpanningSubset0.getPrecision();
      List<Vector2D> list0 = convexArea0.getVertices();
      // Undeclared exception!
      try { 
        ConvexArea.convexPolygonFromVertices(list0, precision_DoubleEquivalence1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot construct convex polygon from unclosed path: LinePath[empty= true]
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.ConvexArea", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Line[] lineArray0 = new Line[2];
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(0.25, 1999.05);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, 1999.05, precision_DoubleEquivalence0);
      lineArray0[0] = line0;
      lineArray0[1] = line0;
      ConvexArea convexArea0 = ConvexArea.fromBounds(lineArray0);
      convexArea0.split(line0);
      assertFalse(convexArea0.isFull());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset((Line) null, true);
      List<LineConvexSubset> list0 = embeddedTreeLineSubset0.toConvex();
      ConvexArea convexArea0 = new ConvexArea(list0);
      // Undeclared exception!
      try { 
        convexArea0.toTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.core.partitioning.bsp.AbstractBSPTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ArrayDeque<Line> arrayDeque0 = new ArrayDeque<Line>();
      ConvexArea convexArea0 = ConvexArea.fromBounds((Iterable<Line>) arrayDeque0);
      RegionBSPTree2D regionBSPTree2D0 = convexArea0.toTree();
      assertNotNull(regionBSPTree2D0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        ConvexArea.fromBounds((Line[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }
}
