/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 01:29:34 GMT 2022
 */

package org.apache.commons.geometry.euclidean.twod;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.apache.commons.geometry.euclidean.twod.BoundaryList2D;
import org.apache.commons.geometry.euclidean.twod.LineConvexSubset;
import org.apache.commons.geometry.euclidean.twod.LineSpanningSubset;
import org.apache.commons.geometry.euclidean.twod.ReverseRay;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BoundaryList2D_ESTest extends BoundaryList2D_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Stack<LineSpanningSubset> stack0 = new Stack<LineSpanningSubset>();
      stack0.add((LineSpanningSubset) null);
      BoundaryList2D boundaryList2D0 = new BoundaryList2D(stack0);
      BoundaryList2D boundaryList2D1 = boundaryList2D0.toList();
      assertEquals(1, boundaryList2D1.count());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BoundaryList2D boundaryList2D0 = null;
      try {
        boundaryList2D0 = new BoundaryList2D((List<? extends LineConvexSubset>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Vector<ReverseRay> vector0 = new Vector<ReverseRay>();
      BoundaryList2D boundaryList2D0 = new BoundaryList2D(vector0);
      BoundaryList2D boundaryList2D1 = boundaryList2D0.toList();
      assertEquals(0, boundaryList2D1.count());
  }
}
