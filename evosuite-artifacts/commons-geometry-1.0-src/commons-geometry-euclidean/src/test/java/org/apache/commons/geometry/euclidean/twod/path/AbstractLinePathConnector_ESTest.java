/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 01:25:50 GMT 2022
 */

package org.apache.commons.geometry.euclidean.twod.path;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.apache.commons.geometry.euclidean.twod.LineConvexSubset;
import org.apache.commons.geometry.euclidean.twod.ReverseRay;
import org.apache.commons.geometry.euclidean.twod.Segment;
import org.apache.commons.geometry.euclidean.twod.Vector2D;
import org.apache.commons.geometry.euclidean.twod.path.AbstractLinePathConnector;
import org.apache.commons.geometry.euclidean.twod.path.InteriorAngleLinePathConnector;
import org.apache.commons.geometry.euclidean.twod.path.LinePath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractLinePathConnector_ESTest extends AbstractLinePathConnector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset0 = new AbstractLinePathConnector.ConnectableLineSubset((Vector2D) null);
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset1 = new AbstractLinePathConnector.ConnectableLineSubset((Vector2D) null);
      int int0 = abstractLinePathConnector_ConnectableLineSubset1.compareTo(abstractLinePathConnector_ConnectableLineSubset0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset0 = new AbstractLinePathConnector.ConnectableLineSubset(vector2D0);
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset1 = new AbstractLinePathConnector.ConnectableLineSubset((Vector2D) null);
      int int0 = abstractLinePathConnector_ConnectableLineSubset1.compareTo(abstractLinePathConnector_ConnectableLineSubset0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(1409.47173653, (-2130.72507822505));
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset0 = new AbstractLinePathConnector.ConnectableLineSubset(vector2D_Unit0);
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset1 = new AbstractLinePathConnector.ConnectableLineSubset(vector2D_Unit0);
      // Undeclared exception!
      try { 
        abstractLinePathConnector_ConnectableLineSubset1.shouldContinueConnectionSearch(abstractLinePathConnector_ConnectableLineSubset0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.path.AbstractLinePathConnector$ConnectableLineSubset", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset0 = new AbstractLinePathConnector.ConnectableLineSubset((Vector2D) null);
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset1 = new AbstractLinePathConnector.ConnectableLineSubset((Vector2D) null);
      assertFalse(abstractLinePathConnector_ConnectableLineSubset1.hasStart());
      
      boolean boolean0 = abstractLinePathConnector_ConnectableLineSubset0.shouldContinueConnectionSearch(abstractLinePathConnector_ConnectableLineSubset1, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset0 = new AbstractLinePathConnector.ConnectableLineSubset(vector2D_Unit0);
      boolean boolean0 = abstractLinePathConnector_ConnectableLineSubset0.hasStart();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset0 = new AbstractLinePathConnector.ConnectableLineSubset((Vector2D) null);
      boolean boolean0 = abstractLinePathConnector_ConnectableLineSubset0.hasEnd();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset0 = new AbstractLinePathConnector.ConnectableLineSubset((Vector2D) null);
      // Undeclared exception!
      try { 
        abstractLinePathConnector_ConnectableLineSubset0.canConnectTo(abstractLinePathConnector_ConnectableLineSubset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.path.AbstractLinePathConnector$ConnectableLineSubset", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InteriorAngleLinePathConnector.Maximize interiorAngleLinePathConnector_Maximize0 = new InteriorAngleLinePathConnector.Maximize();
      List<LinePath> list0 = interiorAngleLinePathConnector_Maximize0.connectAll();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InteriorAngleLinePathConnector.Maximize interiorAngleLinePathConnector_Maximize0 = new InteriorAngleLinePathConnector.Maximize();
      Class<LineConvexSubset> class0 = LineConvexSubset.class;
      ServiceLoader<LineConvexSubset> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      interiorAngleLinePathConnector_Maximize0.add((Iterable<? extends LineConvexSubset>) serviceLoader0);
      assertEquals("java.util.ServiceLoader[org.apache.commons.geometry.euclidean.twod.LineConvexSubset]", serviceLoader0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InteriorAngleLinePathConnector.Maximize interiorAngleLinePathConnector_Maximize0 = new InteriorAngleLinePathConnector.Maximize();
      TreeSet<Segment> treeSet0 = new TreeSet<Segment>();
      LinkedHashSet<Segment> linkedHashSet0 = new LinkedHashSet<Segment>(treeSet0);
      linkedHashSet0.add((Segment) null);
      // Undeclared exception!
      try { 
        interiorAngleLinePathConnector_Maximize0.add((Iterable<? extends LineConvexSubset>) linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.path.AbstractLinePathConnector$ConnectableLineSubset", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset0 = new AbstractLinePathConnector.ConnectableLineSubset((Vector2D) null);
      LineConvexSubset lineConvexSubset0 = abstractLinePathConnector_ConnectableLineSubset0.getLineSubset();
      assertNull(lineConvexSubset0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset0 = new AbstractLinePathConnector.ConnectableLineSubset((Vector2D) null);
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset1 = new AbstractLinePathConnector.ConnectableLineSubset((Vector2D) null);
      boolean boolean0 = abstractLinePathConnector_ConnectableLineSubset0.equals(abstractLinePathConnector_ConnectableLineSubset1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset0 = new AbstractLinePathConnector.ConnectableLineSubset(vector2D_Unit0);
      boolean boolean0 = abstractLinePathConnector_ConnectableLineSubset0.equals(vector2D_Unit0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset0 = new AbstractLinePathConnector.ConnectableLineSubset((Vector2D) null);
      boolean boolean0 = abstractLinePathConnector_ConnectableLineSubset0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset0 = new AbstractLinePathConnector.ConnectableLineSubset((Vector2D) null);
      boolean boolean0 = abstractLinePathConnector_ConnectableLineSubset0.equals(abstractLinePathConnector_ConnectableLineSubset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset0 = new AbstractLinePathConnector.ConnectableLineSubset(vector2D0);
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset1 = new AbstractLinePathConnector.ConnectableLineSubset((Vector2D) null);
      boolean boolean0 = abstractLinePathConnector_ConnectableLineSubset0.equals(abstractLinePathConnector_ConnectableLineSubset1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset0 = new AbstractLinePathConnector.ConnectableLineSubset(vector2D0);
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset1 = new AbstractLinePathConnector.ConnectableLineSubset((Vector2D) null);
      int int0 = abstractLinePathConnector_ConnectableLineSubset0.compareTo(abstractLinePathConnector_ConnectableLineSubset1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset0 = new AbstractLinePathConnector.ConnectableLineSubset((Vector2D) null);
      boolean boolean0 = abstractLinePathConnector_ConnectableLineSubset0.hasZeroSize();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset0 = new AbstractLinePathConnector.ConnectableLineSubset((Vector2D) null);
      boolean boolean0 = abstractLinePathConnector_ConnectableLineSubset0.endPointsEq(abstractLinePathConnector_ConnectableLineSubset0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      InteriorAngleLinePathConnector.Maximize interiorAngleLinePathConnector_Maximize0 = new InteriorAngleLinePathConnector.Maximize();
      Stack<LineConvexSubset> stack0 = new Stack<LineConvexSubset>();
      stack0.add((LineConvexSubset) null);
      // Undeclared exception!
      try { 
        interiorAngleLinePathConnector_Maximize0.connect(stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.path.AbstractLinePathConnector$ConnectableLineSubset", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InteriorAngleLinePathConnector.Maximize interiorAngleLinePathConnector_Maximize0 = new InteriorAngleLinePathConnector.Maximize();
      Class<ReverseRay> class0 = ReverseRay.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<ReverseRay> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      interiorAngleLinePathConnector_Maximize0.connect(serviceLoader0);
      assertEquals("java.util.ServiceLoader[org.apache.commons.geometry.euclidean.twod.ReverseRay]", serviceLoader0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector<LineConvexSubset> vector0 = new Vector<LineConvexSubset>();
      vector0.add((LineConvexSubset) null);
      InteriorAngleLinePathConnector.Maximize interiorAngleLinePathConnector_Maximize0 = new InteriorAngleLinePathConnector.Maximize();
      // Undeclared exception!
      try { 
        interiorAngleLinePathConnector_Maximize0.connectAll((Iterable<LineConvexSubset>) vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.path.AbstractLinePathConnector$ConnectableLineSubset", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset0 = new AbstractLinePathConnector.ConnectableLineSubset((Vector2D) null);
      // Undeclared exception!
      try { 
        abstractLinePathConnector_ConnectableLineSubset0.getConnectionSearchKey();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.path.AbstractLinePathConnector$ConnectableLineSubset", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset0 = new AbstractLinePathConnector.ConnectableLineSubset(vector2D0);
      // Undeclared exception!
      try { 
        abstractLinePathConnector_ConnectableLineSubset0.getRelativeAngle(abstractLinePathConnector_ConnectableLineSubset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.path.AbstractLinePathConnector$ConnectableLineSubset", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset0 = new AbstractLinePathConnector.ConnectableLineSubset((Vector2D) null);
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset1 = abstractLinePathConnector_ConnectableLineSubset0.getSelf();
      assertFalse(abstractLinePathConnector_ConnectableLineSubset1.hasStart());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset0 = null;
      try {
        abstractLinePathConnector_ConnectableLineSubset0 = new AbstractLinePathConnector.ConnectableLineSubset((LineConvexSubset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.path.AbstractLinePathConnector$ConnectableLineSubset", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      InteriorAngleLinePathConnector.Maximize interiorAngleLinePathConnector_Maximize0 = new InteriorAngleLinePathConnector.Maximize();
      // Undeclared exception!
      try { 
        interiorAngleLinePathConnector_Maximize0.add((LineConvexSubset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.path.AbstractLinePathConnector$ConnectableLineSubset", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      InteriorAngleLinePathConnector.Maximize interiorAngleLinePathConnector_Maximize0 = new InteriorAngleLinePathConnector.Maximize();
      Class<LineConvexSubset> class0 = LineConvexSubset.class;
      ServiceLoader<LineConvexSubset> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      List<LinePath> list0 = interiorAngleLinePathConnector_Maximize0.connectAll((Iterable<LineConvexSubset>) serviceLoader0);
      assertEquals(0, list0.size());
  }
}
