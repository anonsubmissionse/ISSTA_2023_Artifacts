/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 01:26:19 GMT 2022
 */

package org.apache.commons.geometry.euclidean.threed.line;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.geometry.core.Transform;
import org.apache.commons.geometry.core.partitioning.HyperplaneConvexSubset;
import org.apache.commons.geometry.core.partitioning.HyperplaneSubset;
import org.apache.commons.geometry.core.partitioning.bsp.RegionCutRule;
import org.apache.commons.geometry.euclidean.oned.AffineTransformMatrix1D;
import org.apache.commons.geometry.euclidean.oned.Interval;
import org.apache.commons.geometry.euclidean.oned.OrientedPoint;
import org.apache.commons.geometry.euclidean.oned.RegionBSPTree1D;
import org.apache.commons.geometry.euclidean.oned.Vector1D;
import org.apache.commons.geometry.euclidean.threed.AffineTransformMatrix3D;
import org.apache.commons.geometry.euclidean.threed.Bounds3D;
import org.apache.commons.geometry.euclidean.threed.Vector3D;
import org.apache.commons.geometry.euclidean.threed.line.EmbeddedTreeLineSubset3D;
import org.apache.commons.geometry.euclidean.threed.line.Line3D;
import org.apache.commons.geometry.euclidean.threed.line.LineConvexSubset3D;
import org.apache.commons.geometry.euclidean.threed.rotation.QuaternionRotation;
import org.apache.commons.numbers.core.Precision;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EmbeddedTreeLineSubset3D_ESTest extends EmbeddedTreeLineSubset3D_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(0.0, 3.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence1);
      RegionBSPTree1D regionBSPTree1D0 = interval0.toTree();
      EmbeddedTreeLineSubset3D embeddedTreeLineSubset3D0 = new EmbeddedTreeLineSubset3D(line3D0, regionBSPTree1D0);
      Bounds3D bounds3D0 = embeddedTreeLineSubset3D0.getBounds();
      assertNotNull(bounds3D0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EmbeddedTreeLineSubset3D embeddedTreeLineSubset3D0 = new EmbeddedTreeLineSubset3D((Line3D) null, true);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of(0.25, 0.25, 0.25);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.of((Vector1D) vector1D_Unit0, (Vector1D) vector1D_Unit0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence1);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createBasisRotation(vector3D0, vector3D0, vector3D0, vector3D0);
      EmbeddedTreeLineSubset3D embeddedTreeLineSubset3D0 = new EmbeddedTreeLineSubset3D(line3D0, false);
      EmbeddedTreeLineSubset3D embeddedTreeLineSubset3D1 = embeddedTreeLineSubset3D0.transform(quaternionRotation0);
      assertNotSame(embeddedTreeLineSubset3D0, embeddedTreeLineSubset3D1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of(0.25, 0.25, 0.25);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of((Vector1D) vector1D_Unit0, (Vector1D) vector1D_Unit0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence1);
      EmbeddedTreeLineSubset3D embeddedTreeLineSubset3D0 = new EmbeddedTreeLineSubset3D(line3D0, false);
      String string0 = embeddedTreeLineSubset3D0.toString();
      assertEquals("EmbeddedTreeLineSubset3D[lineOrigin= (0.25, 0.25, 0.25), lineDirection= (0.25, 0.25, 0.25), region= RegionBSPTree1D[count= 1, height= 0]]", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EmbeddedTreeLineSubset3D embeddedTreeLineSubset3D0 = new EmbeddedTreeLineSubset3D((Line3D) null, false);
      List<LineConvexSubset3D> list0 = embeddedTreeLineSubset3D0.toConvex();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EmbeddedTreeLineSubset3D embeddedTreeLineSubset3D0 = new EmbeddedTreeLineSubset3D((Line3D) null, (RegionBSPTree1D) null);
      RegionBSPTree1D regionBSPTree1D0 = embeddedTreeLineSubset3D0.getSubspaceRegion();
      assertNull(regionBSPTree1D0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EmbeddedTreeLineSubset3D embeddedTreeLineSubset3D0 = new EmbeddedTreeLineSubset3D((Line3D) null, false);
      double double0 = embeddedTreeLineSubset3D0.getSize();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(0.0, 0.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence1);
      RegionBSPTree1D regionBSPTree1D0 = interval0.toTree();
      EmbeddedTreeLineSubset3D embeddedTreeLineSubset3D0 = new EmbeddedTreeLineSubset3D(line3D0, regionBSPTree1D0);
      Vector3D vector3D0 = embeddedTreeLineSubset3D0.getCentroid();
      assertEquals((-1.0), vector3D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of((Vector1D) vector1D_Unit0, (Vector1D) vector1D_Unit0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence1);
      RegionBSPTree1D regionBSPTree1D0 = interval0.toTree();
      EmbeddedTreeLineSubset3D embeddedTreeLineSubset3D0 = new EmbeddedTreeLineSubset3D(line3D0, regionBSPTree1D0);
      Vector3D vector3D1 = embeddedTreeLineSubset3D0.getCentroid();
      assertNotSame(vector3D0, vector3D1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Vector3D vector3D1 = Vector3D.NEGATIVE_INFINITY;
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of((Vector1D) vector1D_Unit0, (Vector1D) vector1D_Unit0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = new Line3D(vector3D1, vector3D0, precision_DoubleEquivalence1);
      RegionBSPTree1D regionBSPTree1D0 = interval0.toTree();
      EmbeddedTreeLineSubset3D embeddedTreeLineSubset3D0 = new EmbeddedTreeLineSubset3D(line3D0, regionBSPTree1D0);
      Vector3D vector3D2 = embeddedTreeLineSubset3D0.getCentroid();
      assertFalse(vector3D2.equals((Object)vector3D0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Vector1D vector1D0 = Vector1D.of(5411.5);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.of(vector1D0, vector1D0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence1);
      EmbeddedTreeLineSubset3D embeddedTreeLineSubset3D0 = new EmbeddedTreeLineSubset3D(line3D0, true);
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createScale(0.0, (-1620.1744205316), 0.0);
      // Undeclared exception!
      try { 
        embeddedTreeLineSubset3D0.transform(affineTransformMatrix3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: NaN
         //
         verifyException("org.apache.commons.geometry.euclidean.internal.Vectors", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EmbeddedTreeLineSubset3D embeddedTreeLineSubset3D0 = new EmbeddedTreeLineSubset3D((Line3D) null, (RegionBSPTree1D) null);
      // Undeclared exception!
      try { 
        embeddedTreeLineSubset3D0.toConvex();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.line.EmbeddedTreeLineSubset3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn((-2585.064), (-2585.064), (-2585.064), 68.016846773).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of((-2585.064), (-2585.064), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = new Line3D(vector3D_Unit0, (Vector3D) null, precision_DoubleEquivalence1);
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale((-2585.064));
      Interval interval1 = interval0.transform(affineTransformMatrix1D0);
      RegionBSPTree1D regionBSPTree1D0 = interval1.toTree();
      EmbeddedTreeLineSubset3D embeddedTreeLineSubset3D0 = new EmbeddedTreeLineSubset3D(line3D0, regionBSPTree1D0);
      // Undeclared exception!
      try { 
        embeddedTreeLineSubset3D0.toConvex();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid interval: hyperplanes do not form interval: OrientedPoint[point= (6682555.884095999), direction= (-1.0)], OrientedPoint[point= (6682555.884095999), direction= (1.0)]
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of((-2585.064), (-2585.064), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = new Line3D(vector3D_Unit0, (Vector3D) null, precision_DoubleEquivalence1);
      EmbeddedTreeLineSubset3D embeddedTreeLineSubset3D0 = new EmbeddedTreeLineSubset3D(line3D0, (RegionBSPTree1D) null);
      // Undeclared exception!
      try { 
        embeddedTreeLineSubset3D0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.line.EmbeddedTreeLineSubset3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EmbeddedTreeLineSubset3D embeddedTreeLineSubset3D0 = new EmbeddedTreeLineSubset3D((Line3D) null, (RegionBSPTree1D) null);
      // Undeclared exception!
      try { 
        embeddedTreeLineSubset3D0.getCentroid();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.line.EmbeddedTreeLineSubset3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EmbeddedTreeLineSubset3D embeddedTreeLineSubset3D0 = new EmbeddedTreeLineSubset3D((Line3D) null, (RegionBSPTree1D) null);
      // Undeclared exception!
      try { 
        embeddedTreeLineSubset3D0.getBounds();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.line.EmbeddedTreeLineSubset3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of((-2583.334592994776), (-2583.334592994776), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence1);
      RegionBSPTree1D regionBSPTree1D0 = new RegionBSPTree1D(true);
      EmbeddedTreeLineSubset3D embeddedTreeLineSubset3D0 = new EmbeddedTreeLineSubset3D(line3D0, regionBSPTree1D0);
      double double0 = embeddedTreeLineSubset3D0.getSize();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn((-2482.363846487031), (-2482.363846487031)).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of((-2482.363846487031), (-2482.363846487031), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence1);
      RegionBSPTree1D regionBSPTree1D0 = interval0.toTree();
      EmbeddedTreeLineSubset3D embeddedTreeLineSubset3D0 = new EmbeddedTreeLineSubset3D(line3D0, regionBSPTree1D0);
      List<LineConvexSubset3D> list0 = embeddedTreeLineSubset3D0.toConvex();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of((-2583.334592994776), (-2583.334592994776), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence1);
      RegionBSPTree1D regionBSPTree1D0 = new RegionBSPTree1D(true);
      EmbeddedTreeLineSubset3D embeddedTreeLineSubset3D0 = new EmbeddedTreeLineSubset3D(line3D0, regionBSPTree1D0);
      HyperplaneConvexSubset<Vector1D> hyperplaneConvexSubset0 = orientedPoint0.span();
      RegionCutRule regionCutRule0 = RegionCutRule.PLUS_INSIDE;
      regionBSPTree1D0.insert((HyperplaneSubset<Vector1D>) hyperplaneConvexSubset0, regionCutRule0);
      Bounds3D bounds3D0 = embeddedTreeLineSubset3D0.getBounds();
      assertNull(bounds3D0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of((-2583.334592994776), (-2583.334592994776), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence1);
      RegionBSPTree1D regionBSPTree1D0 = new RegionBSPTree1D(true);
      EmbeddedTreeLineSubset3D embeddedTreeLineSubset3D0 = new EmbeddedTreeLineSubset3D(line3D0, regionBSPTree1D0);
      Bounds3D bounds3D0 = embeddedTreeLineSubset3D0.getBounds();
      assertNull(bounds3D0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of((-2482.363846487031), (-2482.363846487031), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence1);
      RegionBSPTree1D regionBSPTree1D0 = interval0.toTree();
      EmbeddedTreeLineSubset3D embeddedTreeLineSubset3D0 = new EmbeddedTreeLineSubset3D(line3D0, regionBSPTree1D0);
      Vector3D vector3D0 = embeddedTreeLineSubset3D0.getCentroid();
      assertFalse(vector3D0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of((-2583.334592994776), (-2583.334592994776), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence1);
      RegionBSPTree1D regionBSPTree1D0 = new RegionBSPTree1D(true);
      EmbeddedTreeLineSubset3D embeddedTreeLineSubset3D0 = new EmbeddedTreeLineSubset3D(line3D0, regionBSPTree1D0);
      Vector3D vector3D0 = embeddedTreeLineSubset3D0.getCentroid();
      assertNull(vector3D0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EmbeddedTreeLineSubset3D embeddedTreeLineSubset3D0 = new EmbeddedTreeLineSubset3D((Line3D) null);
      // Undeclared exception!
      try { 
        embeddedTreeLineSubset3D0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.line.EmbeddedTreeLineSubset3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of((-2583.334592994776), (-2583.334592994776), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence1);
      RegionBSPTree1D regionBSPTree1D0 = new RegionBSPTree1D(true);
      EmbeddedTreeLineSubset3D embeddedTreeLineSubset3D0 = new EmbeddedTreeLineSubset3D(line3D0, regionBSPTree1D0);
      RegionBSPTree1D regionBSPTree1D1 = embeddedTreeLineSubset3D0.getSubspaceRegion();
      assertEquals(0.0, regionBSPTree1D1.getBoundarySize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EmbeddedTreeLineSubset3D embeddedTreeLineSubset3D0 = new EmbeddedTreeLineSubset3D((Line3D) null);
      // Undeclared exception!
      try { 
        embeddedTreeLineSubset3D0.transform((Transform<Vector3D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.line.EmbeddedTreeLineSubset3D", e);
      }
  }
}
