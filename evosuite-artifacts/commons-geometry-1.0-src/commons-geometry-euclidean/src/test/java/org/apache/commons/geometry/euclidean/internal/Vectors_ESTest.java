/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 01:27:37 GMT 2022
 */

package org.apache.commons.geometry.euclidean.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.geometry.euclidean.internal.Vectors;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Vectors_ESTest extends Vectors_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double double0 = Vectors.linearCombination(2131.1387422, 2903.3997256532803, 2903.3997256532803, 2131.1387422);
      assertEquals(1.2375095278865112E7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double double0 = Vectors.normSq(1.0, (-0.9999999999));
      assertEquals(1.9999999998, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double double0 = Vectors.normSq(0.0, 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double double0 = Vectors.normSq((-0.999999999999998), (-0.999999999999998));
      assertEquals(1.999999999999992, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = Vectors.normSq(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double double0 = Vectors.norm(0.0, 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = Vectors.norm(0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = Vectors.norm(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double double0 = Vectors.linearCombination(0.0, 0.0, 0.0, 0.0, 0.0, (-315.2112));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double double0 = Vectors.linearCombination(0.0, (-1630.9), (-1630.9), 1270.1016, 0.0, (-72.45668));
      assertEquals((-2071408.69944), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = Vectors.linearCombination(0.0, (-1419.961666), 0.0, (-1419.961666));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double double0 = Vectors.linearCombination((-1.0), 3978.05, (-1.0), (-1.0));
      assertEquals((-3977.05), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = Vectors.checkedNorm((-1.0));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        Vectors.checkedNorm(0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException("org.apache.commons.geometry.euclidean.internal.Vectors", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = Vectors.checkedNorm(128.397951454976);
      assertEquals(128.397951454976, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean boolean0 = Vectors.isRealNonZero(1405.6817);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean boolean0 = Vectors.isRealNonZero(0.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = Vectors.isRealNonZero(Double.POSITIVE_INFINITY);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double double0 = Vectors.norm(1405.6817, 2211.0366377430296, 1563.439);
      assertEquals(3051.059744068918, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double double0 = Vectors.normSq(1.0, 3051.059744068918, (-2551.516));
      assertEquals(1.5819200460133892E7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double double0 = Vectors.normSq(0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double double0 = Vectors.normSq(1563.439);
      assertEquals(2444341.506721, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IllegalArgumentException illegalArgumentException0 = Vectors.illegalNorm(2444341.506721);
      assertNotNull(illegalArgumentException0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double double0 = Vectors.linearCombination(320.0, 3.273390607896142E150, 3051.059744068918, 0.0, (-2223.045149750673), 0.0);
      assertEquals(1.0474849945267654E153, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double double0 = Vectors.norm((-967.2962664577253), 1871324.1342061094);
      assertEquals(1871324.3842060927, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double double0 = Vectors.norm(Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }
}
