/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 01:30:14 GMT 2022
 */

package org.apache.commons.geometry.euclidean.threed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import org.apache.commons.geometry.euclidean.threed.BoundaryList3D;
import org.apache.commons.geometry.euclidean.threed.PlaneConvexSubset;
import org.apache.commons.geometry.euclidean.threed.SimpleTriangle3D;
import org.apache.commons.geometry.euclidean.threed.VertexListConvexPolygon3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BoundaryList3D_ESTest extends BoundaryList3D_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ArrayList<SimpleTriangle3D> arrayList0 = new ArrayList<SimpleTriangle3D>();
      BoundaryList3D boundaryList3D0 = new BoundaryList3D(arrayList0);
      arrayList0.add((SimpleTriangle3D) null);
      BoundaryList3D boundaryList3D1 = boundaryList3D0.toList();
      assertEquals(1, boundaryList3D1.count());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BoundaryList3D boundaryList3D0 = null;
      try {
        boundaryList3D0 = new BoundaryList3D((List<? extends PlaneConvexSubset>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Vector<VertexListConvexPolygon3D> vector0 = new Vector<VertexListConvexPolygon3D>();
      BoundaryList3D boundaryList3D0 = new BoundaryList3D(vector0);
      BoundaryList3D boundaryList3D1 = boundaryList3D0.toList();
      assertSame(boundaryList3D0, boundaryList3D1);
  }
}
