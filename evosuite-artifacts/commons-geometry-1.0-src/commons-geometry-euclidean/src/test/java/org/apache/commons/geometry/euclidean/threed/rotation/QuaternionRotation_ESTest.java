/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 01:01:41 GMT 2022
 */

package org.apache.commons.geometry.euclidean.threed.rotation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.geometry.euclidean.threed.AffineTransformMatrix3D;
import org.apache.commons.geometry.euclidean.threed.Vector3D;
import org.apache.commons.geometry.euclidean.threed.rotation.AxisAngleSequence;
import org.apache.commons.geometry.euclidean.threed.rotation.AxisReferenceFrame;
import org.apache.commons.geometry.euclidean.threed.rotation.AxisSequence;
import org.apache.commons.geometry.euclidean.threed.rotation.QuaternionRotation;
import org.apache.commons.numbers.quaternion.Quaternion;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class QuaternionRotation_ESTest extends QuaternionRotation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(3.141592653589793, 0.0, 0.0);
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.MINUS_Z;
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createBasisRotation(vector3D_Unit0, vector3D_Unit1, vector3D_Unit1, vector3D_Unit0);
      assertEquals(3.141592653589793, quaternionRotation0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of(0.0, 3512.141, (-836.565986374039));
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createBasisRotation(vector3D0, vector3D0, vector3D0, vector3D0);
      assertEquals(0.0, quaternionRotation0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(725.2653110863354, 725.2653110863354, 725.2653110863354, 725.2653110863354);
      QuaternionRotation quaternionRotation1 = QuaternionRotation.identity();
      QuaternionRotation quaternionRotation2 = quaternionRotation0.multiply(quaternionRotation1);
      Vector3D vector3D0 = Vector3D.of((-2317.7763229164), (-2317.7763229164), (-2317.7763229164));
      Vector3D vector3D1 = quaternionRotation2.getAxis();
      QuaternionRotation quaternionRotation3 = QuaternionRotation.createBasisRotation(vector3D0, vector3D1, vector3D1, vector3D1);
      assertEquals(0.5773502691896258, vector3D1.getZ(), 0.01);
      assertEquals(3.141592653589793, quaternionRotation3.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of((-369.1892755180724), 2206.88023156283, (-369.1892755180724));
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createVectorRotation(vector3D_Unit0, vector3D0);
      assertEquals(1.7343202719108723, quaternionRotation0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.identity();
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = 0.5;
      Vector3D vector3D0 = Vector3D.of(doubleArray0);
      Vector3D.Unit vector3D_Unit0 = affineTransformMatrix3D0.applyDirection(vector3D0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngle(vector3D_Unit0, (-1679.07558962));
      quaternionRotation0.toMatrix();
      assertEquals(1.4651126030504842, quaternionRotation0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.identity();
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-983.8942155006455);
      Vector3D vector3D0 = Vector3D.of(doubleArray0);
      Vector3D.Unit vector3D_Unit0 = affineTransformMatrix3D0.applyDirection(vector3D0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngle(vector3D_Unit0, (-1679.07558962));
      quaternionRotation0.toMatrix();
      assertEquals(1.4651126030504842, quaternionRotation0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(quaternion0);
      AffineTransformMatrix3D affineTransformMatrix3D0 = quaternionRotation0.toMatrix();
      assertNotNull(affineTransformMatrix3D0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 3052.1709124358235, 3052.1709124358235, 2.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      AxisAngleSequence axisAngleSequence1 = quaternionRotation0.toRelativeAxisAngleSequence(axisSequence0);
      assertEquals((-1.722995870687546), axisAngleSequence1.getAngle3(), 0.01);
      assertEquals(1.254262585890673, axisAngleSequence1.getAngle2(), 0.01);
      assertEquals(1.5294683166860508, axisAngleSequence1.getAngle1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.orthogonal();
      Vector3D.Unit vector3D_Unit2 = Vector3D.Unit.MINUS_Y;
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createVectorRotation(vector3D_Unit1, vector3D_Unit2);
      AxisSequence axisSequence0 = AxisSequence.YZY;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toRelativeAxisAngleSequence(axisSequence0);
      assertEquals(1.5707963267948966, axisAngleSequence0.getAngle3(), 0.01);
      assertEquals((-1.5707963267948966), axisAngleSequence0.getAngle1(), 0.01);
      assertEquals(1.5707963267948963, axisAngleSequence0.getAngle2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYZ;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createVectorRotation(vector3D0, vector3D0);
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.ABSOLUTE;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toAxisAngleSequence(axisReferenceFrame0, axisSequence0);
      assertEquals(0.0, axisAngleSequence0.getAngle2(), 0.01);
      assertEquals(0.0, axisAngleSequence0.getAngle1(), 0.01);
      assertEquals(0.0, axisAngleSequence0.getAngle3(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.identity();
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-983.8942155006455);
      doubleArray0[2] = 0.5;
      Vector3D vector3D0 = Vector3D.of(doubleArray0);
      Vector3D.Unit vector3D_Unit0 = affineTransformMatrix3D0.applyDirection(vector3D0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngle(vector3D_Unit0, (-1679.07558962));
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.ZXY;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toAxisAngleSequence(axisReferenceFrame0, axisSequence0);
      assertEquals((-4.5457767880330237E-4), axisAngleSequence0.getAngle2(), 0.01);
      assertEquals(1.4651123597848044, axisAngleSequence0.getAngle3(), 0.01);
      assertEquals((-5.053493923178044E-4), axisAngleSequence0.getAngle1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 3052.1709124358235, 3052.1709124358235, 2.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence1 = AxisSequence.ZYX;
      AxisAngleSequence axisAngleSequence1 = quaternionRotation0.toAxisAngleSequence(axisReferenceFrame0, axisSequence1);
      assertEquals(2.8235842435577947, axisAngleSequence1.getAngle3(), 0.01);
      assertEquals((-1.6182602018564705), axisAngleSequence1.getAngle1(), 0.01);
      assertEquals(0.10330248711761827, axisAngleSequence1.getAngle2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(1467.09091, 1467.09091, 4185.65842281, 1467.09091);
      AxisSequence axisSequence0 = AxisSequence.ZYX;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toAbsoluteAxisAngleSequence(axisSequence0);
      assertEquals((-2.662804407730725), axisAngleSequence0.getAngle3(), 0.01);
      assertEquals(0.7639234960254598, axisAngleSequence0.getAngle2(), 0.01);
      assertEquals((-2.662804407730725), axisAngleSequence0.getAngle1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 3052.1709124358235, 3052.1709124358235, 2.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      AxisAngleSequence axisAngleSequence1 = quaternionRotation0.toAbsoluteAxisAngleSequence(axisSequence0);
      assertEquals((-1.45714685345549), axisAngleSequence1.getAngle2(), 0.01);
      assertEquals((-1.4571468534554894), axisAngleSequence1.getAngle1(), 0.01);
      assertEquals(2.0, axisAngleSequence1.getAngle3(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYZ;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createVectorRotation(vector3D0, vector3D0);
      Vector3D vector3D1 = Vector3D.of((-369.1892755180724), 2206.88023156283, (-369.1892755180724));
      QuaternionRotation quaternionRotation1 = QuaternionRotation.createVectorRotation(vector3D0, vector3D1);
      QuaternionRotation quaternionRotation2 = quaternionRotation0.premultiply(quaternionRotation1);
      assertTrue(quaternionRotation2.equals((Object)quaternionRotation1));
      assertEquals(0.23231250062217276, quaternionRotation2.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(2.0, 0.0, 0.0, 0.0);
      assertEquals(0.0, quaternionRotation0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.XYZ;
      AxisAngleSequence axisAngleSequence0 = new AxisAngleSequence(axisReferenceFrame0, axisSequence0, 0.0, 2691.66937118266, 0.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      QuaternionRotation quaternionRotation1 = quaternionRotation0.multiply(quaternionRotation0);
      assertEquals(1.3510658875853245, quaternionRotation1.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      QuaternionRotation quaternionRotation1 = quaternionRotation0.inverse();
      assertNotSame(quaternionRotation0, quaternionRotation1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYZ;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createVectorRotation(vector3D0, vector3D0);
      Quaternion quaternion0 = quaternionRotation0.getQuaternion();
      assertEquals(0.0, quaternion0.getY(), 0.01);
      assertEquals(1.0, quaternion0.getW(), 0.01);
      assertEquals(0.0, quaternion0.getZ(), 0.01);
      assertEquals(0.0, quaternion0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 4.16643938139925;
      Quaternion quaternion0 = Quaternion.of(doubleArray0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(quaternion0);
      Quaternion quaternion1 = quaternionRotation0.getQuaternion();
      assertEquals(0.0, quaternion1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngle(vector3D_Unit0, (-2775.549637011024));
      Vector3D vector3D0 = quaternionRotation0.getAxis();
      assertEquals(1.618268762353162, quaternionRotation0.getAngle(), 0.01);
      assertTrue(vector3D0.equals((Object)vector3D_Unit0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-0.9999999999);
      doubleArray0[1] = (-0.999999999999998);
      doubleArray0[2] = (-4141.42206190945);
      Vector3D vector3D0 = Vector3D.of(doubleArray0);
      Vector3D[] vector3DArray0 = new Vector3D[6];
      vector3DArray0[0] = vector3D0;
      vector3DArray0[1] = vector3D0;
      vector3DArray0[2] = vector3D0;
      vector3DArray0[3] = vector3D0;
      vector3DArray0[4] = vector3D0;
      vector3DArray0[5] = vector3D0;
      Vector3D vector3D1 = Vector3D.centroid(vector3D0, vector3DArray0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createBasisRotation(vector3D0, vector3D1, vector3D0, vector3D0);
      Vector3D vector3D2 = quaternionRotation0.getAxis();
      assertEquals((-0.9999999695403656), vector3D2.getX(), 0.01);
      assertEquals(6.465584057530651E-10, vector3D2.getY(), 0.01);
      assertEquals(8.138020591362825E-5, quaternionRotation0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 3052.1709124358235, 3052.1709124358235, 2.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      double double0 = quaternionRotation0.getAngle();
      assertEquals(2.996998013538016, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(0.25, 0.0, (-1317.84), 0.25);
      Vector3D vector3D0 = quaternionRotation0.getAxis();
      QuaternionRotation quaternionRotation1 = QuaternionRotation.fromAxisAngle(vector3D0, 0.0);
      assertEquals(1.8970436130450724E-4, vector3D0.getZ(), 0.01);
      assertEquals((-0.9999999820061273), vector3D0.getY(), 0.01);
      assertEquals(0.0, quaternionRotation1.getAngle(), 0.01);
      assertEquals(0.0, vector3D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Vector3D vector3D1 = quaternionRotation0.applyVector(vector3D0);
      assertTrue(vector3D1.isNaN());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(0.0, 0.0, 29.555595878839796, (-596.373114590533));
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(quaternion0);
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.YXZ;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toAxisAngleSequence(axisReferenceFrame0, axisSequence0);
      QuaternionRotation quaternionRotation1 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      Vector3D vector3D0 = quaternionRotation1.getAxis();
      Vector3D vector3D1 = quaternionRotation1.applyVector(vector3D0);
      assertEquals(3.0308876709294196E-18, vector3D1.getX(), 0.01);
      assertEquals(3.141592653589793, axisAngleSequence0.getAngle3(), 0.01);
      assertEquals((-0.0494981520065972), vector3D1.getY(), 0.01);
      assertEquals(0.0, axisAngleSequence0.getAngle1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Vector3D vector3D0 = quaternionRotation0.applyVector((Vector3D) vector3D_Unit0);
      assertEquals((-1.0), vector3D0.getZ(), 0.01);
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(0.0, vector3D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(0.0, 0.0, (-1628.0836292115343), (-1628.0836292115343));
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(276.9, 0.0, 0.0);
      Vector3D vector3D0 = quaternionRotation0.applyVector((Vector3D) vector3D_Unit0);
      assertEquals((-1.0000000000000002), vector3D0.getX(), 0.01);
      assertEquals(0.0, vector3D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Vector3D vector3D0 = Vector3D.of(1.5707963267948966, 224.705666389, 1242.28407);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngle(vector3D_Unit0, 2282.555197);
      Vector3D vector3D1 = quaternionRotation0.apply(vector3D0);
      assertEquals(224.705666389, vector3D1.getY(), 0.01);
      assertEquals((-1220.6576294720135), vector3D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.YZY;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 296.552751143022, 296.552751143022, 2070.628);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      Vector3D vector3D0 = Vector3D.NaN;
      quaternionRotation0.apply(vector3D0);
      assertEquals(1.9232446333701587, quaternionRotation0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D vector3D0 = quaternionRotation0.apply((Vector3D) vector3D_Unit0);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals((-1.0), vector3D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      // Undeclared exception!
      try { 
        quaternionRotation0.toRelativeAxisAngleSequence((AxisSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Axis sequence cannot be null
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.rotation.QuaternionRotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      // Undeclared exception!
      try { 
        quaternionRotation0.toAbsoluteAxisAngleSequence((AxisSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Axis sequence cannot be null
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.rotation.QuaternionRotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.ZXZ;
      AxisAngleSequence axisAngleSequence0 = new AxisAngleSequence(axisReferenceFrame0, axisSequence0, 0.0, 0.0, 0.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      // Undeclared exception!
      try { 
        quaternionRotation0.slerp((QuaternionRotation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.rotation.QuaternionRotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      // Undeclared exception!
      try { 
        quaternionRotation0.premultiply((QuaternionRotation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.rotation.QuaternionRotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        QuaternionRotation.of((Quaternion) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      // Undeclared exception!
      try { 
        QuaternionRotation.of(quaternion0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException("org.apache.commons.numbers.quaternion.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        QuaternionRotation.of(0.0, 0.0, 0.0, 0.0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException("org.apache.commons.numbers.quaternion.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of((-5352.828376870025), (-5352.828376870025), (-5352.828376870025), 0.0);
      // Undeclared exception!
      try { 
        quaternionRotation0.multiply((QuaternionRotation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.rotation.QuaternionRotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        QuaternionRotation.fromAxisAngleSequence((AxisAngleSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.rotation.QuaternionRotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, (-703.0));
      // Undeclared exception!
      try { 
        QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid angle: Infinity
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.rotation.QuaternionRotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        QuaternionRotation.fromAxisAngle((Vector3D) null, (-2349.5174465036866));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.rotation.QuaternionRotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      // Undeclared exception!
      try { 
        QuaternionRotation.createVectorRotation((Vector3D) null, vector3D_Unit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.internal.Vectors", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of(6.696928794914171E299, (-2066.357763116722), 6135.232718164232);
      // Undeclared exception!
      try { 
        QuaternionRotation.createVectorRotation(vector3D0, vector3D0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Illegal norm: NaN
         //
         verifyException("org.apache.commons.numbers.quaternion.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        QuaternionRotation.createVectorRotation(vector3D0, vector3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: Infinity
         //
         verifyException("org.apache.commons.geometry.euclidean.internal.Vectors", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        QuaternionRotation.createBasisRotation((Vector3D) null, (Vector3D) null, (Vector3D) null, (Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.rotation.QuaternionRotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      // Undeclared exception!
      try { 
        quaternionRotation0.applyVector((Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.rotation.QuaternionRotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(79.268, (-597.9171676360878), (-1.0), (-375.76059));
      // Undeclared exception!
      try { 
        quaternionRotation0.apply((Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.rotation.QuaternionRotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.identity();
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-983.8942155006455);
      Vector3D vector3D0 = Vector3D.of(doubleArray0);
      Vector3D.Unit vector3D_Unit0 = affineTransformMatrix3D0.applyDirection(vector3D0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngle(vector3D_Unit0, (-1679.07558962));
      Vector3D vector3D1 = quaternionRotation0.apply(vector3D0);
      assertEquals(1.4651126030504842, quaternionRotation0.getAngle(), 0.01);
      assertTrue(vector3D1.equals((Object)vector3D0));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 3052.1709124358235, 3052.1709124358235, 2.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisAngleSequence axisAngleSequence1 = quaternionRotation0.toAxisAngleSequence(axisReferenceFrame0, axisSequence0);
      assertEquals(1.5294683166860508, axisAngleSequence1.getAngle1(), 0.01);
      assertEquals(1.254262585890673, axisAngleSequence1.getAngle2(), 0.01);
      assertEquals((-1.722995870687546), axisAngleSequence1.getAngle3(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(quaternion0);
      QuaternionRotation quaternionRotation1 = quaternionRotation0.multiply(quaternionRotation0);
      assertTrue(quaternionRotation1.preservesOrientation());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 3052.1709124358235, 3052.1709124358235, 2.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      Quaternion quaternion0 = quaternionRotation0.getQuaternion();
      QuaternionRotation quaternionRotation1 = QuaternionRotation.of(quaternion0);
      assertEquals(2.996998013538016, quaternionRotation1.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 3052.1709124358235, 3052.1709124358235, 2.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      QuaternionRotation quaternionRotation1 = quaternionRotation0.inverse();
      Quaternion quaternion0 = quaternionRotation1.getQuaternion();
      assertEquals(0.14961289682518827, quaternion0.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-0.9999999999);
      doubleArray0[1] = (-0.999999999999998);
      Vector3D vector3D0 = Vector3D.of(doubleArray0);
      Vector3D[] vector3DArray0 = new Vector3D[6];
      vector3DArray0[0] = vector3D0;
      vector3DArray0[1] = vector3D0;
      vector3DArray0[2] = vector3D0;
      vector3DArray0[3] = vector3D0;
      vector3DArray0[4] = vector3D0;
      vector3DArray0[5] = vector3D0;
      Vector3D vector3D1 = Vector3D.centroid(vector3D0, vector3DArray0);
      Vector3D vector3D2 = vector3D1.negate();
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createBasisRotation(vector3D2, vector3D0, vector3D0, vector3D0);
      assertEquals(2.7042547618419093, quaternionRotation0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-0.9999999999);
      doubleArray0[1] = (-0.999999999999998);
      Vector3D vector3D0 = Vector3D.of(doubleArray0);
      Vector3D vector3D1 = vector3D0.negate();
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createBasisRotation(vector3D1, vector3D0, vector3D0, vector3D0);
      assertEquals(3.141592653589793, quaternionRotation0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-0.9999999999);
      doubleArray0[1] = (-0.999999999999998);
      Vector3D vector3D0 = Vector3D.of(doubleArray0);
      Vector3D vector3D1 = Vector3D.of((-0.999999999999998), 0.99, (-0.999999999999998));
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createBasisRotation(vector3D1, vector3D1, vector3D0, vector3D0);
      assertEquals(2.889452588655283, quaternionRotation0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(0.25, 0.0, (-1317.84), 0.25);
      Vector3D vector3D0 = quaternionRotation0.getAxis();
      // Undeclared exception!
      try { 
        QuaternionRotation.fromAxisAngle(vector3D0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid angle: NaN
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.rotation.QuaternionRotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.MINUS_Y;
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createVectorRotation(vector3D_Unit0, vector3D_Unit1);
      AxisSequence axisSequence0 = AxisSequence.YZY;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toRelativeAxisAngleSequence(axisSequence0);
      assertEquals(0.0, axisAngleSequence0.getAngle1(), 0.01);
      assertEquals(1.5707963267948963, axisAngleSequence0.getAngle2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.negate();
      Vector3D vector3D0 = quaternionRotation0.apply((Vector3D) vector3D_Unit1);
      QuaternionRotation quaternionRotation1 = QuaternionRotation.createVectorRotation(vector3D0, vector3D_Unit0);
      AxisSequence axisSequence0 = AxisSequence.YZY;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation1.toAbsoluteAxisAngleSequence(axisSequence0);
      assertEquals(0.0, axisAngleSequence0.getAngle1(), 0.01);
      assertEquals(0.0, axisAngleSequence0.getAngle3(), 0.01);
      assertEquals(1.0, vector3D0.getY(), 0.01);
      assertEquals(3.141592653589793, axisAngleSequence0.getAngle2(), 0.01);
      assertEquals(0.0, vector3D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.orthogonal();
      Vector3D.Unit vector3D_Unit2 = Vector3D.Unit.MINUS_Y;
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createVectorRotation(vector3D_Unit1, vector3D_Unit2);
      AxisSequence axisSequence0 = AxisSequence.ZXY;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toRelativeAxisAngleSequence(axisSequence0);
      assertEquals((-1.5707963267948966), axisAngleSequence0.getAngle2(), 0.01);
      assertEquals(0.0, axisAngleSequence0.getAngle1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(1495.9182619552287, 1495.9182619552287, 1495.9182619552287, 1495.9182619552287);
      AxisSequence axisSequence0 = AxisSequence.YZX;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toRelativeAxisAngleSequence(axisSequence0);
      assertEquals(0.0, axisAngleSequence0.getAngle3(), 0.01);
      assertEquals(1.5707963267948966, axisAngleSequence0.getAngle2(), 0.01);
      assertEquals(1.5707963267948966, axisAngleSequence0.getAngle1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      Vector3D vector3D0 = quaternionRotation0.getAxis();
      assertNotNull(vector3D0);
      
      QuaternionRotation quaternionRotation1 = QuaternionRotation.createVectorRotation(vector3D0, vector3D0);
      boolean boolean0 = quaternionRotation0.equals(quaternionRotation1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      boolean boolean0 = quaternionRotation0.equals(quaternionRotation0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      boolean boolean0 = quaternionRotation0.equals("[1.0 0.0 0.0 0.0]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.ABSOLUTE;
      // Undeclared exception!
      try { 
        quaternionRotation0.toAxisAngleSequence(axisReferenceFrame0, (AxisSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Axis sequence cannot be null
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.rotation.QuaternionRotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      AxisSequence axisSequence0 = AxisSequence.XZX;
      // Undeclared exception!
      try { 
        quaternionRotation0.toAxisAngleSequence((AxisReferenceFrame) null, axisSequence0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Axis reference frame cannot be null
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.rotation.QuaternionRotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      quaternionRotation0.hashCode();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      // Undeclared exception!
      try { 
        QuaternionRotation.createBasisRotation(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException("org.apache.commons.geometry.euclidean.internal.Vectors", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      QuaternionRotation quaternionRotation1 = quaternionRotation0.premultiply(quaternionRotation0);
      assertNotSame(quaternionRotation0, quaternionRotation1);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      AxisSequence axisSequence0 = AxisSequence.YZY;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toRelativeAxisAngleSequence(axisSequence0);
      assertEquals(0.0, axisAngleSequence0.getAngle1(), 0.01);
      assertEquals(0.0, axisAngleSequence0.getAngle2(), 0.01);
      assertEquals(0.0, axisAngleSequence0.getAngle3(), 0.01);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      AxisSequence axisSequence0 = AxisSequence.YZY;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toAbsoluteAxisAngleSequence(axisSequence0);
      assertEquals(0.0, axisAngleSequence0.getAngle3(), 0.01);
      assertEquals(0.0, axisAngleSequence0.getAngle2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYZ;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 3038.2640057273097, 3038.2640057273097, 3038.2640057273097);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      quaternionRotation0.slerp(quaternionRotation0);
      assertEquals(0.5573881875942073, quaternionRotation0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      boolean boolean0 = quaternionRotation0.preservesOrientation();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      String string0 = quaternionRotation0.toString();
      assertEquals("[1.0 0.0 0.0 0.0]", string0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYZ;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 3038.2640057273097, 3038.2640057273097, 3038.2640057273097);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      AxisAngleSequence axisAngleSequence1 = quaternionRotation0.toAbsoluteAxisAngleSequence(axisSequence0);
      QuaternionRotation quaternionRotation1 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence1);
      assertEquals(0.23307288382865632, axisAngleSequence1.getAngle1(), 0.01);
      assertEquals(0.5573881875942065, quaternionRotation1.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      double double0 = quaternionRotation0.getAngle();
      assertEquals(0.0, double0, 0.01);
  }
}
