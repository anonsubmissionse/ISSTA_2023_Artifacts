/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 01:12:40 GMT 2022
 */

package org.apache.commons.geometry.euclidean.threed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.geometry.euclidean.threed.SphericalCoordinates;
import org.apache.commons.geometry.euclidean.threed.Vector3D;
import org.apache.commons.geometry.euclidean.threed.rotation.AxisSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SphericalCoordinates_ESTest extends SphericalCoordinates_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian((Vector3D) vector3D_Unit0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(1.0, 0.0, 0.0);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
      assertEquals(1.0, sphericalCoordinates1.getRadius(), 0.01);
      assertEquals(0.0, sphericalCoordinates0.getAzimuth(), 0.01);
      assertEquals(0.0, sphericalCoordinates1.getAzimuth(), 0.01);
      assertEquals(3.141592653589793, sphericalCoordinates0.getPolar(), 0.01);
      assertEquals(1.0, sphericalCoordinates0.getRadius(), 0.01);
      assertFalse(sphericalCoordinates1.equals((Object)sphericalCoordinates0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of((-499.781), (-499.781), (-499.781));
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(499.781, 2631.6246, (-615.36));
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
      assertEquals(499.781, sphericalCoordinates1.getRadius(), 0.01);
      assertEquals(0.3921601035993838, sphericalCoordinates1.getPolar(), 0.01);
      assertEquals(499.781, sphericalCoordinates0.getRadius(), 0.01);
      assertEquals(6.015417227956675, sphericalCoordinates0.getAzimuth(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.26776807922290047, sphericalCoordinates0.getPolar(), 0.01);
      assertEquals(5.253141598932871, sphericalCoordinates1.getAzimuth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(527.0, 3.141592653589793, 3.141592653589793);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.fromCartesian(3.141592653589793, 3.141592653589793, 3.141592653589793);
      boolean boolean0 = sphericalCoordinates1.equals(sphericalCoordinates0);
      assertEquals(5.441398092702653, sphericalCoordinates1.getRadius(), 0.01);
      assertEquals(0.00596120576910142, sphericalCoordinates0.getAzimuth(), 0.01);
      assertFalse(boolean0);
      assertEquals(1.5648352269415997, sphericalCoordinates0.getPolar(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of((-499.781), (-499.781), (-499.781));
      sphericalCoordinates0.hashCode();
      assertEquals(499.781, sphericalCoordinates0.getRadius(), 0.01);
      assertFalse(sphericalCoordinates0.isNaN());
      assertEquals(6.015417227956675, sphericalCoordinates0.getAzimuth(), 0.01);
      assertEquals(0.26776807922290047, sphericalCoordinates0.getPolar(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(1342.429689523293, Double.POSITIVE_INFINITY, 1.4916681462400413E-154);
      Vector3D vector3D0 = sphericalCoordinates0.toVector();
      assertEquals(1.5707963267948966, sphericalCoordinates0.getAzimuth(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getX(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(0.0, 1.0, 1.0);
      Vector3D vector3D0 = sphericalCoordinates0.toVector();
      assertEquals(1.0, sphericalCoordinates0.getPolar(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(1.0, sphericalCoordinates0.getAzimuth(), 0.01);
      assertEquals(0.0, vector3D0.getX(), 0.01);
      assertEquals(0.0, vector3D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(3.0, 3.0, 3.0);
      Vector3D vector3D0 = sphericalCoordinates0.toVector();
      assertEquals(0.05974457002445096, vector3D0.getY(), 0.01);
      assertEquals((-0.41912324729838873), vector3D0.getX(), 0.01);
      assertEquals((-2.9699774898013365), vector3D0.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(3.0, 3.0, 0.0);
      Vector3D vector3D0 = sphericalCoordinates0.toVector();
      assertEquals(-0.0, vector3D0.getX(), 0.01);
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(3.0, vector3D0.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian((-3.141592653589793), (-5386.954909765198), 0.0);
      Vector3D vector3D0 = sphericalCoordinates0.toVector();
      assertEquals(3.2985591046256755E-13, vector3D0.getZ(), 0.01);
      assertEquals((-3.141592653592771), vector3D0.getX(), 0.01);
      assertEquals((-5386.954909765199), vector3D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector3D vector3D0 = SphericalCoordinates.toCartesian(0.0, Double.NaN, 0.0);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector3D vector3D0 = SphericalCoordinates.toCartesian(Double.POSITIVE_INFINITY, 637.6303654150395, (-1.0));
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getX(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector3D vector3D0 = SphericalCoordinates.toCartesian(0.0, 3.0, 0.0);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(-0.0, vector3D0.getX(), 0.01);
      assertEquals(0.0, vector3D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector3D vector3D0 = SphericalCoordinates.toCartesian(6.696928794914171E299, 4645.812826677649, 3.141592653589793);
      assertEquals((-6.7563197016539465E283), vector3D0.getX(), 0.01);
      assertEquals((-6.696928794914171E299), vector3D0.getZ(), 0.01);
      assertEquals(4.649156218351184E283, vector3D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.parse("(NaN, NaN, 0.0)");
      assertEquals(0.0, sphericalCoordinates0.getPolar(), 0.01);
      assertEquals(Double.NaN, sphericalCoordinates0.getAzimuth(), 0.01);
      assertEquals(Double.NaN, sphericalCoordinates0.getRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.parse("(0.0, 0.0, 0.0)");
      assertEquals(0.0, sphericalCoordinates0.getAzimuth(), 0.01);
      assertEquals(0.0, sphericalCoordinates0.getRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.parse("(4.682878303135726, 0.7853981633974483, 1.5707963267948966)");
      assertEquals(1.5707963267948966, sphericalCoordinates0.getPolar(), 0.01);
      assertEquals(4.682878303135726, sphericalCoordinates0.getRadius(), 0.01);
      assertEquals(0.7853981633974483, sphericalCoordinates0.getAzimuth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.parse("(Infinity, -Infinity, -Infinity)");
      assertEquals(Double.NEGATIVE_INFINITY, sphericalCoordinates0.getAzimuth(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, sphericalCoordinates0.getRadius(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, sphericalCoordinates0.getPolar(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = SphericalCoordinates.normalizePolar(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double double0 = SphericalCoordinates.normalizeAzimuth(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double double0 = SphericalCoordinates.normalizeAzimuth(Double.NEGATIVE_INFINITY);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(527.0, 3.141592653589793, 3.141592653589793);
      double double0 = sphericalCoordinates0.getRadius();
      assertEquals(1.5648352269415997, sphericalCoordinates0.getPolar(), 0.01);
      assertEquals(0.00596120576910142, sphericalCoordinates0.getAzimuth(), 0.01);
      assertEquals(527.0187275693362, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(3.0, 3.0, 0.0);
      double double0 = sphericalCoordinates0.getPolar();
      assertEquals(3.0, sphericalCoordinates0.getAzimuth(), 0.01);
      assertEquals(3.0, sphericalCoordinates0.getRadius(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of((-1774.886281501992), 3.141592653589793, Double.NEGATIVE_INFINITY);
      double double0 = sphericalCoordinates0.getPolar();
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      assertEquals(1774.886281501992, sphericalCoordinates0.getRadius(), 0.01);
      assertEquals(0.0, sphericalCoordinates0.getAzimuth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of((-499.781), (-499.781), (-499.781));
      double double0 = sphericalCoordinates0.getAzimuth();
      assertEquals(0.26776807922290047, sphericalCoordinates0.getPolar(), 0.01);
      assertEquals(499.781, sphericalCoordinates0.getRadius(), 0.01);
      assertEquals(6.015417227956675, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 3.141592653589793);
      double double0 = sphericalCoordinates0.getAzimuth();
      assertEquals(Double.POSITIVE_INFINITY, sphericalCoordinates0.getRadius(), 0.01);
      assertEquals(0.0, sphericalCoordinates0.getPolar(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1731.0);
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = (-304.63048471266);
      Vector3D vector3D0 = Vector3D.of(doubleArray0);
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      assertEquals(1.5707963267948966, sphericalCoordinates0.getPolar(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, sphericalCoordinates0.getRadius(), 0.01);
      assertEquals(4.71238898038469, sphericalCoordinates0.getAzimuth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      double double0 = sphericalCoordinates0.getRadius();
      assertEquals(0.0, sphericalCoordinates0.getAzimuth(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, sphericalCoordinates0.getPolar(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(0.0, Double.NaN, 659.0);
      assertEquals(0.0, sphericalCoordinates0.getPolar(), 0.01);
      assertEquals(Double.NaN, sphericalCoordinates0.getAzimuth(), 0.01);
      assertEquals(Double.NaN, sphericalCoordinates0.getRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(527.0, 3.141592653589793, 3.141592653589793);
      double double0 = sphericalCoordinates0.getPolar();
      assertEquals(1.5648352269415997, double0, 0.01);
      assertEquals(0.00596120576910142, sphericalCoordinates0.getAzimuth(), 0.01);
      assertEquals(527.0187275693362, sphericalCoordinates0.getRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        SphericalCoordinates.parse("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse string \"\" at index 0: expected \"(\" but found \"\"
         //
         verifyException("org.apache.commons.geometry.core.internal.SimpleTupleFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        SphericalCoordinates.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.core.internal.SimpleTupleFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        SphericalCoordinates.fromCartesian((Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.SphericalCoordinates", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double double0 = SphericalCoordinates.normalizePolar(527.0);
      assertEquals(0.7875658030852826, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double double0 = SphericalCoordinates.normalizePolar(Double.NEGATIVE_INFINITY);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      boolean boolean0 = sphericalCoordinates0.isNaN();
      assertEquals(Double.POSITIVE_INFINITY, sphericalCoordinates0.getRadius(), 0.01);
      assertEquals(3.9269908169872414, sphericalCoordinates0.getAzimuth(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(3055.81696143, Double.NaN, 1.9005111028024437);
      boolean boolean0 = sphericalCoordinates0.isNaN();
      assertEquals(3055.81696143, sphericalCoordinates0.getRadius(), 0.01);
      assertEquals(1.9005111028024437, sphericalCoordinates0.getPolar(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(Double.NaN, 958.81, 1.0);
      boolean boolean0 = sphericalCoordinates0.isNaN();
      assertTrue(boolean0);
      assertEquals(1.0, sphericalCoordinates0.getPolar(), 0.01);
      assertEquals(3.765833308702895, sphericalCoordinates0.getAzimuth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      boolean boolean0 = sphericalCoordinates0.isNaN();
      assertEquals(0.0, sphericalCoordinates0.getAzimuth(), 0.01);
      assertEquals(0.0, sphericalCoordinates0.getPolar(), 0.01);
      assertEquals(1.0, sphericalCoordinates0.getRadius(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double double0 = SphericalCoordinates.normalizeAzimuth((-65.0));
      assertEquals(4.1150383789754414, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(1.0, 0.0, 0.0);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
      assertTrue(boolean0);
      assertEquals(0.0, sphericalCoordinates1.getAzimuth(), 0.01);
      assertEquals(0.0, sphericalCoordinates1.getPolar(), 0.01);
      assertEquals(1.0, sphericalCoordinates1.getRadius(), 0.01);
      assertFalse(sphericalCoordinates1.isNaN());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(1.0, 2631.6246, (-615.36));
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
      assertEquals(0.0, sphericalCoordinates0.getAzimuth(), 0.01);
      assertEquals(0.0, sphericalCoordinates0.getPolar(), 0.01);
      assertEquals(5.253141598932871, sphericalCoordinates1.getAzimuth(), 0.01);
      assertEquals(0.3921601035993838, sphericalCoordinates1.getPolar(), 0.01);
      assertFalse(boolean0);
      assertEquals(1.0, sphericalCoordinates0.getRadius(), 0.01);
      assertEquals(1.0, sphericalCoordinates1.getRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.fromCartesian(0.0, 0.0, 0.0);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
      assertEquals(0.0, sphericalCoordinates1.getPolar(), 0.01);
      assertEquals(0.0, sphericalCoordinates0.getAzimuth(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, sphericalCoordinates0.getPolar(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      Vector3D vector3D1 = Vector3D.POSITIVE_INFINITY;
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.fromCartesian(vector3D1);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
      assertEquals(1.0, sphericalCoordinates0.getRadius(), 0.01);
      assertFalse(sphericalCoordinates1.equals((Object)sphericalCoordinates0));
      assertEquals(0.7853981633974483, sphericalCoordinates1.getAzimuth(), 0.01);
      assertEquals(0.0, sphericalCoordinates0.getAzimuth(), 0.01);
      assertEquals(0.0, sphericalCoordinates0.getPolar(), 0.01);
      assertFalse(sphericalCoordinates1.isInfinite());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(1.4916681462400413E-154, (-1885.44957076), 1.4916681462400413E-154);
      Object object0 = new Object();
      boolean boolean0 = sphericalCoordinates0.equals(object0);
      assertEquals(1.4916681462400413E-154, sphericalCoordinates0.getRadius(), 0.01);
      assertFalse(boolean0);
      assertEquals(5.789206701055491, sphericalCoordinates0.getAzimuth(), 0.01);
      assertEquals(1.4916681462400413E-154, sphericalCoordinates0.getPolar(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates0);
      assertEquals(0.0, sphericalCoordinates0.getPolar(), 0.01);
      assertTrue(boolean0);
      assertEquals(0.0, sphericalCoordinates0.getAzimuth(), 0.01);
      assertEquals(1.0, sphericalCoordinates0.getRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(1.0, 0.0, (-615.36));
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
      assertEquals(1.0, sphericalCoordinates0.getRadius(), 0.01);
      assertEquals(0.0, sphericalCoordinates0.getPolar(), 0.01);
      assertEquals(0.0, sphericalCoordinates0.getAzimuth(), 0.01);
      assertEquals(0.0, sphericalCoordinates1.getAzimuth(), 0.01);
      assertFalse(sphericalCoordinates1.equals((Object)sphericalCoordinates0));
      assertEquals(0.3921601035993838, sphericalCoordinates1.getPolar(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(1.4916681462400413E-154, 1.4916681462400413E-154, Double.POSITIVE_INFINITY);
      boolean boolean0 = sphericalCoordinates0.isFinite();
      assertFalse(boolean0);
      assertEquals(Double.POSITIVE_INFINITY, sphericalCoordinates0.getPolar(), 0.01);
      assertEquals(1.4916681462400413E-154, sphericalCoordinates0.getRadius(), 0.01);
      assertEquals(1.4916681462400413E-154, sphericalCoordinates0.getAzimuth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(1.4916681462400413E-154, Double.POSITIVE_INFINITY, 1342.429689523293);
      boolean boolean0 = sphericalCoordinates0.isFinite();
      assertEquals(2.1719662131382726, sphericalCoordinates0.getPolar(), 0.01);
      assertFalse(boolean0);
      assertEquals(Double.POSITIVE_INFINITY, sphericalCoordinates0.getAzimuth(), 0.01);
      assertEquals(1.4916681462400413E-154, sphericalCoordinates0.getRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      boolean boolean0 = sphericalCoordinates0.isFinite();
      assertEquals(0.0, sphericalCoordinates0.getPolar(), 0.01);
      assertTrue(boolean0);
      assertEquals(0.0, sphericalCoordinates0.getAzimuth(), 0.01);
      assertEquals(1.0, sphericalCoordinates0.getRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(Double.NaN, 958.81, 1.0);
      boolean boolean0 = sphericalCoordinates0.isFinite();
      assertEquals(1.0, sphericalCoordinates0.getPolar(), 0.01);
      assertEquals(3.765833308702895, sphericalCoordinates0.getAzimuth(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(1.4916681462400413E-154, 1.4916681462400413E-154, Double.POSITIVE_INFINITY);
      boolean boolean0 = sphericalCoordinates0.isInfinite();
      assertEquals(Double.POSITIVE_INFINITY, sphericalCoordinates0.getPolar(), 0.01);
      assertEquals(1.4916681462400413E-154, sphericalCoordinates0.getAzimuth(), 0.01);
      assertEquals(1.4916681462400413E-154, sphericalCoordinates0.getRadius(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(1.4916681462400413E-154, Double.POSITIVE_INFINITY, 1342.429689523293);
      boolean boolean0 = sphericalCoordinates0.isInfinite();
      assertEquals(1.4916681462400413E-154, sphericalCoordinates0.getRadius(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, sphericalCoordinates0.getAzimuth(), 0.01);
      assertEquals(2.1719662131382726, sphericalCoordinates0.getPolar(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(Double.POSITIVE_INFINITY, (-1.245328525806152), (-1.245328525806152));
      boolean boolean0 = sphericalCoordinates0.isInfinite();
      assertEquals(-0.0, sphericalCoordinates0.getAzimuth(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, sphericalCoordinates0.getRadius(), 0.01);
      assertTrue(boolean0);
      assertEquals(1.5707963267948966, sphericalCoordinates0.getPolar(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(3.0, 3.0, 3.0);
      boolean boolean0 = sphericalCoordinates0.isInfinite();
      assertEquals(3.0, sphericalCoordinates0.getRadius(), 0.01);
      assertEquals(3.0, sphericalCoordinates0.getAzimuth(), 0.01);
      assertFalse(boolean0);
      assertFalse(sphericalCoordinates0.isNaN());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      sphericalCoordinates0.hashCode();
      assertEquals(3.9269908169872414, sphericalCoordinates0.getAzimuth(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, sphericalCoordinates0.getRadius(), 0.01);
      assertTrue(sphericalCoordinates0.isNaN());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(Double.NaN, Double.NaN, Double.NaN);
      boolean boolean0 = sphericalCoordinates0.isInfinite();
      assertTrue(sphericalCoordinates0.isNaN());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(Double.NaN, Double.NaN, Double.NaN);
      String string0 = sphericalCoordinates0.toString();
      assertEquals("(NaN, NaN, NaN)", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(Double.NaN, Double.NaN, Double.NaN);
      int int0 = sphericalCoordinates0.getDimension();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(Double.NaN, Double.NaN, Double.NaN);
      Vector3D vector3D0 = sphericalCoordinates0.toVector();
      assertFalse(vector3D0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      double double0 = sphericalCoordinates0.getAzimuth();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0, sphericalCoordinates0.getRadius(), 0.01);
      assertEquals(0.0, sphericalCoordinates0.getPolar(), 0.01);
  }
}
