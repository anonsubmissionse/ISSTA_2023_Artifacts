/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 01:29:59 GMT 2022
 */

package org.apache.commons.geometry.euclidean;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.geometry.euclidean.oned.Vector1D;
import org.apache.commons.geometry.euclidean.threed.Vector3D;
import org.apache.commons.geometry.euclidean.threed.rotation.QuaternionRotation;
import org.apache.commons.geometry.euclidean.twod.Vector2D;
import org.apache.commons.numbers.core.Precision;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EuclideanVector_ESTest extends EuclideanVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Vector3D vector3D0 = vector3D_Unit0.vectorTo(vector3D_Unit0);
      assertFalse(vector3D0.isNaN());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Vector1D vector1D1 = vector1D0.vectorTo(vector1D_Unit0);
      assertTrue(vector1D1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from(1819.85141);
      Vector1D vector1D0 = Vector1D.NaN;
      Vector1D vector1D1 = vector1D_Unit0.lerp(vector1D0, (-1.0));
      assertNotSame(vector1D0, vector1D1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of((-2056.7480733571315), 0.0, 0.0);
      Vector3D.Unit vector3D_Unit0 = vector3D0.normalizeOrNull();
      Vector3D vector3D1 = vector3D_Unit0.lerp(vector3D_Unit0, 0.0);
      assertEquals(3, vector3D1.getDimension());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of(4.149515568880993E180);
      Vector1D.Unit vector1D_Unit0 = vector1D0.normalizeOrNull();
      Vector1D vector1D1 = vector1D_Unit0.lerp(vector1D0, 4.149515568880993E180);
      assertEquals(Double.POSITIVE_INFINITY, vector1D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(2704.2842, (-6095.105), 0.0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      boolean boolean0 = vector3D_Unit0.isZero(precision_DoubleEquivalence0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from(1.0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      boolean boolean0 = vector1D_Unit0.eq(vector1D_Unit0, precision_DoubleEquivalence0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from(1.0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      boolean boolean0 = vector1D_Unit0.eq(vector1D_Unit0, precision_DoubleEquivalence0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(2704.2842, (-6095.105), 0.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngle(vector3D_Unit0, 0.0);
      Vector3D vector3D0 = quaternionRotation0.getAxis();
      Vector3D.Unit vector3D_Unit1 = (Vector3D.Unit)vector3D0.directionTo(vector3D_Unit0);
      assertEquals((-0.838318522364336), vector3D_Unit1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      // Undeclared exception!
      try { 
        vector3D0.vectorTo((Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from(1029.81);
      // Undeclared exception!
      try { 
        vector1D0.eq(vector1D_Unit0, (Precision.DoubleEquivalence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.Vector1D", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      // Undeclared exception!
      try { 
        vector1D_Unit0.directionTo((Vector1D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.Vector1D", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(3.141592653589793, 3.141592653589793, 3.141592653589793);
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.orthogonal();
      assertEquals((-0.7071067811865476), vector3D_Unit1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      // Undeclared exception!
      try { 
        vector2D_Unit0.isZero((Precision.DoubleEquivalence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NaN;
      // Undeclared exception!
      try { 
        vector1D0.directionTo(vector1D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: NaN
         //
         verifyException("org.apache.commons.geometry.euclidean.internal.Vectors", e);
      }
  }
}
