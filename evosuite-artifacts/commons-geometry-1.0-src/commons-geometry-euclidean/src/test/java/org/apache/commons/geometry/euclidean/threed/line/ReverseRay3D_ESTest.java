/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 01:28:45 GMT 2022
 */

package org.apache.commons.geometry.euclidean.threed.line;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.geometry.core.Transform;
import org.apache.commons.geometry.euclidean.threed.AffineTransformMatrix3D;
import org.apache.commons.geometry.euclidean.threed.Vector3D;
import org.apache.commons.geometry.euclidean.threed.line.Line3D;
import org.apache.commons.geometry.euclidean.threed.line.ReverseRay3D;
import org.apache.commons.geometry.euclidean.threed.rotation.AxisSequence;
import org.apache.commons.numbers.core.Precision;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ReverseRay3D_ESTest extends ReverseRay3D_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.identity();
      Line3D line3D1 = line3D0.transform(affineTransformMatrix3D0);
      ReverseRay3D reverseRay3D0 = line3D1.reverseRayTo(0.0);
      ReverseRay3D reverseRay3D1 = reverseRay3D0.transform(affineTransformMatrix3D0);
      assertEquals(0.0, reverseRay3D1.getSubspaceEnd(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, vector3D_Unit0);
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.fromColumnVectors((Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0);
      ReverseRay3D reverseRay3D1 = reverseRay3D0.transform(affineTransformMatrix3D0);
      assertEquals(2.0, reverseRay3D1.getSubspaceEnd(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = line3D0.reverseRayTo((-1177.99064690699));
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createScale((Vector3D) vector3D_Unit0);
      ReverseRay3D reverseRay3D1 = reverseRay3D0.transform(affineTransformMatrix3D0);
      assertEquals((-1176.99064690699), reverseRay3D1.getSubspaceEnd(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, 1284.3);
      double double0 = reverseRay3D0.getSubspaceEnd();
      assertEquals(1284.3, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = line3D0.reverseRayTo((-1177.99064690699));
      double double0 = reverseRay3D0.getSubspaceEnd();
      assertEquals((-1177.99064690699), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Vector3D vector3D0 = Vector3D.NaN;
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, (-989.8379163556424));
      reverseRay3D0.getEndPoint();
      assertEquals((-989.8379163556424), reverseRay3D0.getSubspaceEnd(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = line3D0.reverseRayTo((Vector3D) vector3D_Unit0);
      reverseRay3D0.getEndPoint();
      assertEquals(0.0, reverseRay3D0.getSubspaceEnd(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, 3.141592653589793);
      Vector3D vector3D1 = reverseRay3D0.getEndPoint();
      assertEquals(Double.POSITIVE_INFINITY, vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = line3D0.reverseRayTo((-1306.46117433));
      Vector3D vector3D0 = reverseRay3D0.getEndPoint();
      assertEquals((-1305.46117433), vector3D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(0.0, 0.0, (-1.0));
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      ReverseRay3D reverseRay3D0 = line3D0.reverseRayTo((Vector3D) vector3D_Unit0);
      reverseRay3D0.getEndPoint();
      assertEquals(0.0, reverseRay3D0.getSubspaceEnd(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = line3D0.reverseRayTo((-1306.46117433));
      reverseRay3D0.containsAbscissa(0.0);
      assertEquals((-1306.46117433), reverseRay3D0.getSubspaceEnd(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ReverseRay3D reverseRay3D0 = new ReverseRay3D((Line3D) null, 707.9068659123387);
      // Undeclared exception!
      try { 
        reverseRay3D0.transform((Transform<Vector3D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.line.ReverseRay3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ReverseRay3D reverseRay3D0 = new ReverseRay3D((Line3D) null, 371.61109061);
      // Undeclared exception!
      try { 
        reverseRay3D0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.line.ReverseRay3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ReverseRay3D reverseRay3D0 = new ReverseRay3D((Line3D) null, 0.0);
      // Undeclared exception!
      try { 
        reverseRay3D0.containsAbscissa(1.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.line.ReverseRay3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.YZX;
      Vector3D vector3D0 = axisSequence0.getAxis3();
      ReverseRay3D reverseRay3D0 = null;
      try {
        reverseRay3D0 = new ReverseRay3D((Line3D) null, vector3D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.line.ReverseRay3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ReverseRay3D reverseRay3D0 = new ReverseRay3D((Line3D) null, 0.5);
      // Undeclared exception!
      try { 
        reverseRay3D0.getEndPoint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.line.ReverseRay3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, vector3D_Unit0);
      reverseRay3D0.getCentroid();
      assertEquals(0.0, reverseRay3D0.getSubspaceEnd(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, vector3D_Unit0);
      reverseRay3D0.containsAbscissa(0.0);
      assertEquals(0.0, reverseRay3D0.getSubspaceEnd(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, vector3D_Unit0);
      reverseRay3D0.getStartPoint();
      assertEquals(0.0, reverseRay3D0.getSubspaceEnd(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, vector3D_Unit0);
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createScale(Double.NEGATIVE_INFINITY);
      // Undeclared exception!
      try { 
        reverseRay3D0.transform(affineTransformMatrix3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Line direction cannot be zero
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.line.Lines3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, vector3D_Unit0);
      double double0 = reverseRay3D0.getSubspaceEnd();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, vector3D_Unit0);
      double double0 = reverseRay3D0.getSubspaceStart();
      assertEquals(0.0, reverseRay3D0.getSubspaceEnd(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, vector3D_Unit0);
      boolean boolean0 = reverseRay3D0.isFinite();
      assertEquals(0.0, reverseRay3D0.getSubspaceEnd(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, vector3D_Unit0);
      reverseRay3D0.getBounds();
      assertEquals(0.0, reverseRay3D0.getSubspaceEnd(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, vector3D_Unit0);
      double double0 = reverseRay3D0.getSize();
      assertEquals(0.0, reverseRay3D0.getSubspaceEnd(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, vector3D_Unit0);
      String string0 = reverseRay3D0.toString();
      assertEquals(0.0, reverseRay3D0.getSubspaceEnd(), 0.01);
      assertEquals("ReverseRay3D[direction= (1.0, 0.0, 0.0), endPoint= (1.0, 0.0, 0.0)]", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, vector3D_Unit0);
      boolean boolean0 = reverseRay3D0.isInfinite();
      assertEquals(0.0, reverseRay3D0.getSubspaceEnd(), 0.01);
      assertTrue(boolean0);
  }
}
