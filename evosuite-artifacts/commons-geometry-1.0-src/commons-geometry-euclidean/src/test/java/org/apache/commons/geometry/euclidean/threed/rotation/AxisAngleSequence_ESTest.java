/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 01:24:22 GMT 2022
 */

package org.apache.commons.geometry.euclidean.threed.rotation;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.geometry.euclidean.threed.rotation.AxisAngleSequence;
import org.apache.commons.geometry.euclidean.threed.rotation.AxisReferenceFrame;
import org.apache.commons.geometry.euclidean.threed.rotation.AxisSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AxisAngleSequence_ESTest extends AxisAngleSequence_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 0.0, 0.0);
      AxisAngleSequence axisAngleSequence1 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 0.0, (-1.0));
      boolean boolean0 = axisAngleSequence0.equals(axisAngleSequence1);
      assertEquals(0.0, axisAngleSequence1.getAngle2(), 0.01);
      assertEquals((-1.0), axisAngleSequence1.getAngle3(), 0.01);
      assertFalse(axisAngleSequence1.equals((Object)axisAngleSequence0));
      assertFalse(boolean0);
      assertEquals(0.0, axisAngleSequence1.getAngle1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 0.0, 0.0);
      AxisAngleSequence axisAngleSequence1 = AxisAngleSequence.createRelative(axisSequence0, 0.0, (-3708.66069709), (-630.2527661090433));
      boolean boolean0 = axisAngleSequence0.equals(axisAngleSequence1);
      assertEquals((-3708.66069709), axisAngleSequence1.getAngle2(), 0.01);
      assertEquals(0.0, axisAngleSequence1.getAngle1(), 0.01);
      assertFalse(boolean0);
      assertEquals((-630.2527661090433), axisAngleSequence1.getAngle3(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.ZYX;
      AxisAngleSequence axisAngleSequence0 = new AxisAngleSequence(axisReferenceFrame0, axisSequence0, (-2370.35210049), (-2370.35210049), (-2370.35210049));
      AxisAngleSequence axisAngleSequence1 = AxisAngleSequence.createRelative(axisSequence0, (-3297.2438353207704), (-2370.35210049), 0.0);
      boolean boolean0 = axisAngleSequence0.equals(axisAngleSequence1);
      assertEquals((-2370.35210049), axisAngleSequence1.getAngle2(), 0.01);
      assertEquals((-3297.2438353207704), axisAngleSequence1.getAngle1(), 0.01);
      assertEquals(0.0, axisAngleSequence1.getAngle3(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZXZ;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, (-75.5455867857), (-75.5455867857), 873.562148);
      axisAngleSequence0.hashCode();
      assertEquals((-75.5455867857), axisAngleSequence0.getAngle2(), 0.01);
      assertEquals((-75.5455867857), axisAngleSequence0.getAngle1(), 0.01);
      assertEquals(873.562148, axisAngleSequence0.getAngle3(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.ABSOLUTE;
      AxisAngleSequence axisAngleSequence0 = new AxisAngleSequence(axisReferenceFrame0, (AxisSequence) null, 0.0, 0.0, (-1274.124715872));
      axisAngleSequence0.getAxisSequence();
      assertEquals((-1274.124715872), axisAngleSequence0.getAngle3(), 0.01);
      assertEquals(0.0, axisAngleSequence0.getAngle1(), 0.01);
      assertEquals(0.0, axisAngleSequence0.getAngle2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 0.0, 18.98403688685494);
      double double0 = axisAngleSequence0.getAngle3();
      assertEquals(0.0, axisAngleSequence0.getAngle2(), 0.01);
      assertEquals(0.0, axisAngleSequence0.getAngle1(), 0.01);
      assertEquals(18.98403688685494, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.ZYX;
      AxisAngleSequence axisAngleSequence0 = new AxisAngleSequence(axisReferenceFrame0, axisSequence0, (-2370.35210049), (-2370.35210049), (-2370.35210049));
      double double0 = axisAngleSequence0.getAngle3();
      assertEquals((-2370.35210049), double0, 0.01);
      assertEquals((-2370.35210049), axisAngleSequence0.getAngle1(), 0.01);
      assertEquals((-2370.35210049), axisAngleSequence0.getAngle2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 0.0, 0.0);
      double double0 = axisAngleSequence0.getAngle2();
      assertEquals(0.0, axisAngleSequence0.getAngle3(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, axisAngleSequence0.getAngle1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.ZYX;
      AxisAngleSequence axisAngleSequence0 = new AxisAngleSequence(axisReferenceFrame0, axisSequence0, (-2370.35210049), (-2370.35210049), (-2370.35210049));
      double double0 = axisAngleSequence0.getAngle2();
      assertEquals((-2370.35210049), axisAngleSequence0.getAngle3(), 0.01);
      assertEquals((-2370.35210049), axisAngleSequence0.getAngle1(), 0.01);
      assertEquals((-2370.35210049), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.YZX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 0.0, 0.0, (-355.69266459));
      double double0 = axisAngleSequence0.getAngle1();
      assertEquals(0.0, axisAngleSequence0.getAngle2(), 0.01);
      assertEquals((-355.69266459), axisAngleSequence0.getAngle3(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYZ;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, (-1.0), 0.0, 0.0);
      double double0 = axisAngleSequence0.getAngle1();
      assertEquals(0.0, axisAngleSequence0.getAngle3(), 0.01);
      assertEquals((-1.0), double0, 0.01);
      assertEquals(0.0, axisAngleSequence0.getAngle2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.YZX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 0.0, 0.0, (-355.69266459));
      double[] doubleArray0 = axisAngleSequence0.getAngles();
      assertArrayEquals(new double[] {0.0, 0.0, (-355.69266459)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.YXZ;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 0.669420296700669, 0.669420296700669, 0.669420296700669);
      AxisAngleSequence axisAngleSequence1 = AxisAngleSequence.createAbsolute(axisSequence0, 0.669420296700669, 0.669420296700669, 0.669420296700669);
      boolean boolean0 = axisAngleSequence0.equals(axisAngleSequence1);
      assertEquals(0.669420296700669, axisAngleSequence1.getAngle1(), 0.01);
      assertEquals(0.669420296700669, axisAngleSequence1.getAngle2(), 0.01);
      assertEquals(0.669420296700669, axisAngleSequence1.getAngle3(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZYZ;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 0.0, 0.0, 30.999569463535085);
      AxisAngleSequence axisAngleSequence1 = AxisAngleSequence.createAbsolute(axisSequence0, 0.0, 30.999569463535085, 0.0);
      boolean boolean0 = axisAngleSequence0.equals(axisAngleSequence1);
      assertEquals(30.999569463535085, axisAngleSequence0.getAngle3(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, axisAngleSequence0.getAngle1(), 0.01);
      assertEquals(30.999569463535085, axisAngleSequence1.getAngle2(), 0.01);
      assertEquals(0.0, axisAngleSequence1.getAngle1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.YXY;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 3724.8907308851994, 3724.8907308851994, 3724.8907308851994);
      AxisAngleSequence axisAngleSequence1 = AxisAngleSequence.createAbsolute(axisSequence0, 2047.03, 3724.8907308851994, 2047.03);
      boolean boolean0 = axisAngleSequence1.equals(axisAngleSequence0);
      assertEquals(3724.8907308851994, axisAngleSequence1.getAngle2(), 0.01);
      assertEquals(2047.03, axisAngleSequence1.getAngle1(), 0.01);
      assertEquals(2047.03, axisAngleSequence1.getAngle3(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZXZ;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 1868.8494268904872, 0.0);
      AxisSequence axisSequence1 = AxisSequence.XYX;
      AxisAngleSequence axisAngleSequence1 = AxisAngleSequence.createRelative(axisSequence1, (-1321.0687862), 0.0, 1868.8494268904872);
      boolean boolean0 = axisAngleSequence1.equals(axisAngleSequence0);
      assertEquals((-1321.0687862), axisAngleSequence1.getAngle1(), 0.01);
      assertEquals(0.0, axisAngleSequence1.getAngle2(), 0.01);
      assertEquals(1868.8494268904872, axisAngleSequence1.getAngle3(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZYX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, (-1.0), (-1.0), (-1.0));
      AxisAngleSequence axisAngleSequence1 = AxisAngleSequence.createRelative(axisSequence0, (-1.0), (-1.0), (-1.0));
      boolean boolean0 = axisAngleSequence0.equals(axisAngleSequence1);
      assertEquals((-1.0), axisAngleSequence1.getAngle1(), 0.01);
      assertFalse(boolean0);
      assertEquals((-1.0), axisAngleSequence1.getAngle3(), 0.01);
      assertEquals((-1.0), axisAngleSequence1.getAngle2(), 0.01);
      assertEquals((-1.0), axisAngleSequence0.getAngle3(), 0.01);
      assertEquals((-1.0), axisAngleSequence0.getAngle2(), 0.01);
      assertEquals((-1.0), axisAngleSequence0.getAngle1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 0.0, 0.0);
      boolean boolean0 = axisAngleSequence0.equals(axisSequence0);
      assertFalse(boolean0);
      assertEquals(0.0, axisAngleSequence0.getAngle1(), 0.01);
      assertEquals(0.0, axisAngleSequence0.getAngle2(), 0.01);
      assertEquals(0.0, axisAngleSequence0.getAngle3(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.XZX;
      AxisAngleSequence axisAngleSequence0 = new AxisAngleSequence(axisReferenceFrame0, axisSequence0, 3722.08254859086, 3722.08254859086, 3722.08254859086);
      boolean boolean0 = axisAngleSequence0.equals(axisAngleSequence0);
      assertTrue(boolean0);
      assertEquals(3722.08254859086, axisAngleSequence0.getAngle2(), 0.01);
      assertEquals(3722.08254859086, axisAngleSequence0.getAngle3(), 0.01);
      assertEquals(3722.08254859086, axisAngleSequence0.getAngle1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 0.0, 0.0);
      AxisAngleSequence axisAngleSequence1 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 0.0, 18.98403688685494);
      boolean boolean0 = axisAngleSequence0.equals(axisAngleSequence1);
      assertFalse(boolean0);
      assertFalse(axisAngleSequence1.equals((Object)axisAngleSequence0));
      assertEquals(0.0, axisAngleSequence1.getAngle2(), 0.01);
      assertEquals(0.0, axisAngleSequence0.getAngle3(), 0.01);
      assertEquals(0.0, axisAngleSequence1.getAngle1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.XZX;
      AxisAngleSequence axisAngleSequence0 = new AxisAngleSequence(axisReferenceFrame0, axisSequence0, 3722.08254859086, 3722.08254859086, 3722.08254859086);
      axisAngleSequence0.getAxisSequence();
      assertEquals(3722.08254859086, axisAngleSequence0.getAngle2(), 0.01);
      assertEquals(3722.08254859086, axisAngleSequence0.getAngle3(), 0.01);
      assertEquals(3722.08254859086, axisAngleSequence0.getAngle1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 0.0, 0.0);
      axisAngleSequence0.getReferenceFrame();
      assertEquals(0.0, axisAngleSequence0.getAngle1(), 0.01);
      assertEquals(0.0, axisAngleSequence0.getAngle2(), 0.01);
      assertEquals(0.0, axisAngleSequence0.getAngle3(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 0.0, 0.0);
      String string0 = axisAngleSequence0.toString();
      assertEquals("AxisAngleSequence[referenceFrame=RELATIVE, axisSequence=XYX, angles=[0.0, 0.0, 0.0]]", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 0.0, 0.0);
      double double0 = axisAngleSequence0.getAngle3();
      assertEquals(0.0, axisAngleSequence0.getAngle1(), 0.01);
      assertEquals(0.0, axisAngleSequence0.getAngle2(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.XZX;
      AxisAngleSequence axisAngleSequence0 = new AxisAngleSequence(axisReferenceFrame0, axisSequence0, 3722.08254859086, 3722.08254859086, 3722.08254859086);
      double double0 = axisAngleSequence0.getAngle2();
      assertEquals(3722.08254859086, axisAngleSequence0.getAngle3(), 0.01);
      assertEquals(3722.08254859086, double0, 0.01);
      assertEquals(3722.08254859086, axisAngleSequence0.getAngle1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.XZX;
      AxisAngleSequence axisAngleSequence0 = new AxisAngleSequence(axisReferenceFrame0, axisSequence0, 3722.08254859086, 3722.08254859086, 3722.08254859086);
      double double0 = axisAngleSequence0.getAngle1();
      assertEquals(3722.08254859086, axisAngleSequence0.getAngle2(), 0.01);
      assertEquals(3722.08254859086, axisAngleSequence0.getAngle3(), 0.01);
      assertEquals(3722.08254859086, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 4620.9324845592, 2047.03, (-390.06392423703));
      assertEquals((-390.06392423703), axisAngleSequence0.getAngle3(), 0.01);
      assertEquals(4620.9324845592, axisAngleSequence0.getAngle1(), 0.01);
      assertEquals(2047.03, axisAngleSequence0.getAngle2(), 0.01);
  }
}
