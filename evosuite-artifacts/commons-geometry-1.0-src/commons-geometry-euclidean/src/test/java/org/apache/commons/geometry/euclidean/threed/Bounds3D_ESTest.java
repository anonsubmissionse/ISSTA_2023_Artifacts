/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 01:02:22 GMT 2022
 */

package org.apache.commons.geometry.euclidean.threed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.Stack;
import org.apache.commons.geometry.euclidean.threed.Bounds3D;
import org.apache.commons.geometry.euclidean.threed.Vector3D;
import org.apache.commons.geometry.euclidean.threed.rotation.AxisSequence;
import org.apache.commons.geometry.euclidean.threed.rotation.QuaternionRotation;
import org.apache.commons.numbers.core.Precision;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Bounds3D_ESTest extends Bounds3D_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Vector3D[] vector3DArray0 = new Vector3D[7];
      vector3DArray0[0] = (Vector3D) vector3D_Unit0;
      vector3DArray0[1] = (Vector3D) vector3D_Unit0;
      vector3DArray0[2] = (Vector3D) vector3D_Unit0;
      vector3DArray0[3] = (Vector3D) vector3D_Unit0;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.PLUS_X;
      vector3DArray0[4] = (Vector3D) vector3D_Unit1;
      vector3DArray0[5] = (Vector3D) vector3D_Unit0;
      vector3DArray0[6] = (Vector3D) vector3D_Unit0;
      Bounds3D bounds3D0 = Bounds3D.from((Vector3D) vector3D_Unit0, vector3DArray0);
      Bounds3D bounds3D1 = bounds3D0.intersection(bounds3D0);
      assertNotNull(bounds3D1);
      assertTrue(bounds3D1.equals((Object)bounds3D0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis3();
      Vector3D[] vector3DArray0 = new Vector3D[3];
      vector3DArray0[0] = vector3D0;
      vector3DArray0[1] = vector3D0;
      vector3DArray0[2] = vector3D0;
      Bounds3D bounds3D0 = Bounds3D.from(vector3D0, vector3DArray0);
      Bounds3D bounds3D1 = Bounds3D.from(vector3DArray0[2], vector3DArray0);
      Bounds3D bounds3D2 = bounds3D0.intersection(bounds3D1);
      assertNotNull(bounds3D2);
      assertTrue(bounds3D2.equals((Object)bounds3D0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.YXZ;
      Vector3D vector3D0 = axisSequence0.getAxis3();
      Vector3D[] vector3DArray0 = new Vector3D[8];
      vector3DArray0[0] = vector3D0;
      vector3DArray0[1] = vector3D0;
      Vector3D vector3D1 = Vector3D.ZERO;
      vector3DArray0[2] = vector3D1;
      vector3DArray0[3] = vector3D0;
      vector3DArray0[4] = vector3D0;
      vector3DArray0[5] = vector3D0;
      vector3DArray0[6] = vector3D0;
      vector3DArray0[7] = vector3D0;
      Bounds3D bounds3D0 = Bounds3D.from(vector3D0, vector3DArray0);
      boolean boolean0 = bounds3D0.intersects(bounds3D0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Vector3D[] vector3DArray0 = new Vector3D[3];
      vector3DArray0[0] = (Vector3D) vector3D_Unit0;
      vector3DArray0[1] = (Vector3D) vector3D_Unit0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1927);
      Vector3D vector3D0 = Vector3D.of(doubleArray0);
      vector3DArray0[2] = vector3D0;
      Bounds3D bounds3D0 = Bounds3D.from((Vector3D) vector3D_Unit0, vector3DArray0);
      Bounds3D bounds3D1 = bounds3D0.intersection(bounds3D0);
      assertTrue(bounds3D1.equals((Object)bounds3D0));
      assertNotNull(bounds3D1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Vector3D[] vector3DArray0 = new Vector3D[5];
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.PLUS_Z;
      vector3DArray0[0] = (Vector3D) vector3D_Unit1;
      vector3DArray0[1] = (Vector3D) vector3D_Unit0;
      vector3DArray0[2] = (Vector3D) vector3D_Unit0;
      vector3DArray0[3] = (Vector3D) vector3D_Unit0;
      vector3DArray0[4] = (Vector3D) vector3D_Unit0;
      Bounds3D bounds3D0 = Bounds3D.from((Vector3D) vector3D_Unit0, vector3DArray0);
      boolean boolean0 = bounds3D0.contains(vector3DArray0[1]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Vector3D[] vector3DArray0 = new Vector3D[7];
      vector3DArray0[0] = (Vector3D) vector3D_Unit0;
      vector3DArray0[1] = (Vector3D) vector3D_Unit0;
      vector3DArray0[2] = (Vector3D) vector3D_Unit0;
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createVectorRotation(vector3DArray0[2], vector3DArray0[0]);
      Vector3D vector3D0 = quaternionRotation0.getAxis();
      vector3DArray0[3] = vector3D0;
      vector3DArray0[4] = (Vector3D) vector3D_Unit0;
      vector3DArray0[5] = (Vector3D) vector3D_Unit0;
      vector3DArray0[6] = (Vector3D) vector3D_Unit0;
      Bounds3D bounds3D0 = Bounds3D.from((Vector3D) vector3D_Unit0, vector3DArray0);
      boolean boolean0 = bounds3D0.contains(vector3D0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.negate();
      Vector3D[] vector3DArray0 = new Vector3D[7];
      vector3DArray0[0] = (Vector3D) vector3D_Unit1;
      vector3DArray0[1] = (Vector3D) vector3D_Unit0;
      vector3DArray0[2] = (Vector3D) vector3D_Unit0;
      vector3DArray0[3] = (Vector3D) vector3D_Unit1;
      vector3DArray0[4] = (Vector3D) vector3D_Unit0;
      vector3DArray0[5] = (Vector3D) vector3D_Unit0;
      vector3DArray0[6] = (Vector3D) vector3D_Unit1;
      Bounds3D bounds3D0 = Bounds3D.from((Vector3D) vector3D_Unit1, vector3DArray0);
      boolean boolean0 = bounds3D0.contains((Vector3D) vector3D_Unit0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Stack<Vector3D> stack0 = new Stack<Vector3D>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      stack0.add((Vector3D) vector3D_Unit0);
      Bounds3D bounds3D0 = Bounds3D.from((Iterable<Vector3D>) stack0);
      assertNotNull(bounds3D0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZYX;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      Vector3D[] vector3DArray0 = new Vector3D[0];
      Bounds3D bounds3D0 = Bounds3D.from(vector3D0, vector3DArray0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      // Undeclared exception!
      try { 
        bounds3D0.toRegion(precision_DoubleEquivalence0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException("org.apache.commons.geometry.euclidean.internal.Vectors", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Vector3D[] vector3DArray0 = new Vector3D[7];
      vector3DArray0[0] = (Vector3D) vector3D_Unit0;
      vector3DArray0[1] = (Vector3D) vector3D_Unit0;
      vector3DArray0[2] = (Vector3D) vector3D_Unit0;
      vector3DArray0[3] = (Vector3D) vector3D_Unit0;
      vector3DArray0[4] = (Vector3D) vector3D_Unit0;
      vector3DArray0[5] = (Vector3D) vector3D_Unit0;
      vector3DArray0[6] = (Vector3D) vector3D_Unit0;
      Bounds3D bounds3D0 = Bounds3D.from((Vector3D) vector3D_Unit0, vector3DArray0);
      // Undeclared exception!
      try { 
        bounds3D0.intersects((Bounds3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.Bounds3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D[] vector3DArray0 = new Vector3D[2];
      vector3DArray0[0] = (Vector3D) vector3D_Unit0;
      vector3DArray0[1] = (Vector3D) vector3D_Unit0;
      Bounds3D bounds3D0 = Bounds3D.from((Vector3D) vector3D_Unit0, vector3DArray0);
      // Undeclared exception!
      try { 
        bounds3D0.intersection((Bounds3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.Bounds3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      Vector3D vector3D0 = Vector3D.of(doubleArray0);
      Vector3D[] vector3DArray0 = new Vector3D[0];
      Bounds3D bounds3D0 = Bounds3D.from(vector3D0, vector3DArray0);
      // Undeclared exception!
      try { 
        bounds3D0.hasSize((Precision.DoubleEquivalence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.Bounds3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Vector3D[] vector3DArray0 = new Vector3D[5];
      // Undeclared exception!
      try { 
        Bounds3D.from(vector3D0, vector3DArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        Bounds3D.from((Iterable<Vector3D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.Bounds3D$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(0.0, (-0.999999999999998), 1084.0);
      Vector3D[] vector3DArray0 = new Vector3D[1];
      vector3DArray0[0] = (Vector3D) vector3D_Unit0;
      Bounds3D bounds3D0 = Bounds3D.from((Vector3D) vector3D_Unit0, vector3DArray0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        bounds3D0.contains((Vector3D) null, precision_DoubleEquivalence0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.Bounds3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.YXZ;
      Vector3D vector3D0 = axisSequence0.getAxis3();
      Vector3D[] vector3DArray0 = new Vector3D[8];
      vector3DArray0[0] = vector3D0;
      vector3DArray0[1] = vector3D0;
      vector3DArray0[2] = vector3DArray0[1];
      vector3DArray0[3] = vector3D0;
      vector3DArray0[4] = vector3D0;
      vector3DArray0[5] = vector3D0;
      vector3DArray0[6] = vector3D0;
      vector3DArray0[7] = vector3D0;
      Bounds3D bounds3D0 = Bounds3D.from(vector3D0, vector3DArray0);
      // Undeclared exception!
      try { 
        bounds3D0.contains((Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.Bounds3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Bounds3D.Builder bounds3D_Builder0 = Bounds3D.builder();
      // Undeclared exception!
      try { 
        bounds3D_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot construct bounds: no points given
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.Bounds3D$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Bounds3D.Builder bounds3D_Builder0 = Bounds3D.builder();
      Vector3D vector3D0 = Vector3D.NaN;
      bounds3D_Builder0.add(vector3D0);
      // Undeclared exception!
      try { 
        bounds3D_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Invalid bounds: min= (NaN, NaN, NaN), max= (NaN, NaN, NaN)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.Bounds3D$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Bounds3D.Builder bounds3D_Builder0 = Bounds3D.builder();
      LinkedHashSet<Vector3D> linkedHashSet0 = new LinkedHashSet<Vector3D>();
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      linkedHashSet0.add(vector3D0);
      ArrayList<Vector3D> arrayList0 = new ArrayList<Vector3D>(linkedHashSet0);
      bounds3D_Builder0.addAll(arrayList0);
      // Undeclared exception!
      try { 
        bounds3D_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Invalid bounds: min= (-Infinity, -Infinity, -Infinity), max= (-Infinity, -Infinity, -Infinity)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.Bounds3D$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Bounds3D.Builder bounds3D_Builder0 = Bounds3D.builder();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      bounds3D_Builder0.add((Vector3D) vector3D_Unit0);
      Bounds3D bounds3D0 = bounds3D_Builder0.build();
      assertNotNull(bounds3D0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of((double) 1, (double) 1, Double.NEGATIVE_INFINITY);
      Bounds3D.Builder bounds3D_Builder0 = Bounds3D.builder();
      Bounds3D.Builder bounds3D_Builder1 = bounds3D_Builder0.add(vector3D0);
      boolean boolean0 = bounds3D_Builder1.hasBounds();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Bounds3D.Builder bounds3D_Builder0 = Bounds3D.builder();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      bounds3D_Builder0.add((Vector3D) vector3D_Unit0);
      boolean boolean0 = bounds3D_Builder0.hasBounds();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Bounds3D.Builder bounds3D_Builder0 = Bounds3D.builder();
      boolean boolean0 = bounds3D_Builder0.hasBounds();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Bounds3D.Builder bounds3D_Builder0 = Bounds3D.builder();
      Bounds3D.Builder bounds3D_Builder1 = bounds3D_Builder0.add(vector3D0);
      // Undeclared exception!
      try { 
        bounds3D_Builder1.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Invalid bounds: min= (Infinity, Infinity, Infinity), max= (Infinity, Infinity, Infinity)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.Bounds3D$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ArrayList<Vector3D> arrayList0 = new ArrayList<Vector3D>();
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      arrayList0.add(vector3D0);
      // Undeclared exception!
      try { 
        Bounds3D.from((Iterable<Vector3D>) arrayList0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Invalid bounds: min= (-Infinity, -Infinity, -Infinity), max= (-Infinity, -Infinity, -Infinity)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.Bounds3D$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of(1.0, (-863.6), Double.POSITIVE_INFINITY);
      Vector3D[] vector3DArray0 = new Vector3D[3];
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      vector3DArray0[0] = (Vector3D) vector3D_Unit0;
      vector3DArray0[1] = (Vector3D) vector3D_Unit0;
      vector3DArray0[2] = vector3D0;
      // Undeclared exception!
      try { 
        Bounds3D.from(vector3DArray0[1], vector3DArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Invalid bounds: min= (0.0, -863.6, 1.0), max= (1.0, 0.0, Infinity)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.Bounds3D$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of(1.0, Double.POSITIVE_INFINITY, (-863.6));
      Vector3D[] vector3DArray0 = new Vector3D[3];
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      vector3DArray0[0] = (Vector3D) vector3D_Unit0;
      vector3DArray0[1] = vector3D0;
      vector3DArray0[2] = vector3D0;
      // Undeclared exception!
      try { 
        Bounds3D.from(vector3D0, vector3DArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Invalid bounds: min= (0.0, 0.0, -863.6), max= (1.0, Infinity, 1.0)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.Bounds3D$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Vector3D vector3D1 = Vector3D.ZERO;
      Vector3D[] vector3DArray0 = new Vector3D[1];
      vector3DArray0[0] = vector3D1;
      // Undeclared exception!
      try { 
        Bounds3D.from(vector3D0, vector3DArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Invalid bounds: min= (0.0, 0.0, 0.0), max= (Infinity, Infinity, Infinity)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.Bounds3D$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      Vector3D vector3D0 = Vector3D.of(doubleArray0);
      Bounds3D.Builder bounds3D_Builder0 = Bounds3D.builder();
      Bounds3D.Builder bounds3D_Builder1 = bounds3D_Builder0.add(vector3D0);
      boolean boolean0 = bounds3D_Builder1.hasBounds();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Vector3D vector3D0 = Vector3D.of(1539.2, (-1.0), 0.9999999999);
      Vector3D[] vector3DArray0 = new Vector3D[0];
      Bounds3D bounds3D0 = Bounds3D.from((Vector3D) vector3D_Unit0, vector3DArray0);
      Bounds3D bounds3D1 = Bounds3D.from(vector3D0, vector3DArray0);
      boolean boolean0 = bounds3D0.equals(bounds3D1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Vector3D[] vector3DArray0 = new Vector3D[0];
      Bounds3D bounds3D0 = Bounds3D.from((Vector3D) vector3D_Unit0, vector3DArray0);
      Bounds3D bounds3D1 = Bounds3D.from((Vector3D) vector3D_Unit0, vector3DArray0);
      boolean boolean0 = bounds3D0.equals(bounds3D1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Vector3D[] vector3DArray0 = new Vector3D[0];
      Bounds3D bounds3D0 = Bounds3D.from((Vector3D) vector3D_Unit0, vector3DArray0);
      boolean boolean0 = bounds3D0.equals(bounds3D0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis3();
      Vector3D[] vector3DArray0 = new Vector3D[3];
      vector3DArray0[0] = vector3D0;
      vector3DArray0[1] = vector3D0;
      vector3DArray0[2] = vector3D0;
      Bounds3D bounds3D0 = Bounds3D.from(vector3D0, vector3DArray0);
      boolean boolean0 = bounds3D0.equals(vector3DArray0[2]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Vector3D vector3D0 = Vector3D.of(1539.2, (-1.0), 0.9999999999);
      Vector3D[] vector3DArray0 = new Vector3D[0];
      Bounds3D bounds3D0 = Bounds3D.from((Vector3D) vector3D_Unit0, vector3DArray0);
      Bounds3D bounds3D1 = Bounds3D.from(vector3D0, vector3DArray0);
      Bounds3D bounds3D2 = bounds3D1.intersection(bounds3D0);
      assertNull(bounds3D2);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.PLUS_Z;
      Vector3D[] vector3DArray0 = new Vector3D[0];
      Bounds3D bounds3D0 = Bounds3D.from((Vector3D) vector3D_Unit1, vector3DArray0);
      Bounds3D bounds3D1 = Bounds3D.from((Vector3D) vector3D_Unit0, vector3DArray0);
      boolean boolean0 = bounds3D1.intersects(bounds3D0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Vector3D[] vector3DArray0 = new Vector3D[0];
      Bounds3D bounds3D0 = Bounds3D.from((Vector3D) vector3D_Unit0, vector3DArray0);
      Bounds3D bounds3D1 = Bounds3D.from(vector3D0, vector3DArray0);
      boolean boolean0 = bounds3D0.intersects(bounds3D1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.PLUS_Z;
      Vector3D[] vector3DArray0 = new Vector3D[0];
      Bounds3D bounds3D0 = Bounds3D.from((Vector3D) vector3D_Unit1, vector3DArray0);
      Bounds3D bounds3D1 = Bounds3D.from((Vector3D) vector3D_Unit0, vector3DArray0);
      boolean boolean0 = bounds3D0.intersects(bounds3D1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.PLUS_Z;
      Vector3D[] vector3DArray0 = new Vector3D[0];
      Bounds3D bounds3D0 = Bounds3D.from((Vector3D) vector3D_Unit1, vector3DArray0);
      Bounds3D bounds3D1 = Bounds3D.from((Vector3D) vector3D_Unit0, vector3DArray0);
      boolean boolean0 = bounds3D1.intersects(bounds3D0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Vector3D vector3D0 = Vector3D.of(1537.1447537044326, 1537.1447537044326, 1537.1447537044326);
      Vector3D[] vector3DArray0 = new Vector3D[0];
      Bounds3D bounds3D0 = Bounds3D.from((Vector3D) vector3D_Unit0, vector3DArray0);
      Bounds3D bounds3D1 = Bounds3D.from(vector3D0, vector3DArray0);
      boolean boolean0 = bounds3D0.intersects(bounds3D1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Vector3D vector3D0 = Vector3D.of(1539.2, (-1.0), 0.9999999999);
      Vector3D[] vector3DArray0 = new Vector3D[0];
      Bounds3D bounds3D0 = Bounds3D.from((Vector3D) vector3D_Unit0, vector3DArray0);
      Bounds3D bounds3D1 = Bounds3D.from(vector3D0, vector3DArray0);
      boolean boolean0 = bounds3D1.intersects(bounds3D0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis3();
      Vector3D[] vector3DArray0 = new Vector3D[3];
      vector3DArray0[0] = vector3D0;
      vector3DArray0[1] = vector3D0;
      vector3DArray0[2] = vector3D0;
      Bounds3D bounds3D0 = Bounds3D.from(vector3D0, vector3DArray0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true).when(precision_DoubleEquivalence0).gte(anyDouble() , anyDouble());
      doReturn(true, true, false).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      boolean boolean0 = bounds3D0.contains(vector3D0, precision_DoubleEquivalence0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZYZ;
      Vector3D vector3D0 = axisSequence0.getAxis1();
      Vector3D[] vector3DArray0 = new Vector3D[8];
      vector3DArray0[0] = vector3D0;
      vector3DArray0[1] = vector3D0;
      vector3DArray0[2] = vector3D0;
      vector3DArray0[3] = vector3D0;
      vector3DArray0[4] = vector3D0;
      vector3DArray0[5] = vector3D0;
      vector3DArray0[6] = vector3D0;
      vector3DArray0[7] = vector3D0;
      Bounds3D bounds3D0 = Bounds3D.from(vector3D0, vector3DArray0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true).when(precision_DoubleEquivalence0).gte(anyDouble() , anyDouble());
      doReturn(true, true, true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      boolean boolean0 = bounds3D0.contains(vector3DArray0[7], precision_DoubleEquivalence0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZYZ;
      Vector3D vector3D0 = axisSequence0.getAxis1();
      Vector3D[] vector3DArray0 = new Vector3D[8];
      vector3DArray0[0] = vector3D0;
      vector3DArray0[1] = vector3D0;
      vector3DArray0[2] = vector3D0;
      vector3DArray0[3] = vector3D0;
      vector3DArray0[4] = vector3D0;
      vector3DArray0[5] = vector3D0;
      vector3DArray0[6] = vector3D0;
      vector3DArray0[7] = vector3D0;
      Bounds3D bounds3D0 = Bounds3D.from(vector3D0, vector3DArray0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, false).when(precision_DoubleEquivalence0).gte(anyDouble() , anyDouble());
      doReturn(true, true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      boolean boolean0 = bounds3D0.contains(vector3DArray0[7], precision_DoubleEquivalence0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZXY;
      Vector3D vector3D0 = axisSequence0.getAxis3();
      Vector3D[] vector3DArray0 = new Vector3D[3];
      vector3DArray0[0] = vector3D0;
      vector3DArray0[1] = vector3D0;
      vector3DArray0[2] = vector3D0;
      Bounds3D bounds3D0 = Bounds3D.from(vector3D0, vector3DArray0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(precision_DoubleEquivalence0).gte(anyDouble() , anyDouble());
      doReturn(true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      boolean boolean0 = bounds3D0.contains(vector3D0, precision_DoubleEquivalence0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYZ;
      Vector3D vector3D0 = axisSequence0.getAxis3();
      Vector3D[] vector3DArray0 = new Vector3D[3];
      vector3DArray0[0] = vector3D0;
      vector3DArray0[1] = vector3D0;
      vector3DArray0[2] = vector3D0;
      Bounds3D bounds3D0 = Bounds3D.from(vector3D0, vector3DArray0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence0).gte(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      boolean boolean0 = bounds3D0.contains(vector3D0, precision_DoubleEquivalence0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis3();
      Vector3D[] vector3DArray0 = new Vector3D[3];
      vector3DArray0[0] = vector3D0;
      vector3DArray0[1] = vector3D0;
      vector3DArray0[2] = vector3D0;
      Bounds3D bounds3D0 = Bounds3D.from(vector3D0, vector3DArray0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, true).when(precision_DoubleEquivalence0).gte(anyDouble() , anyDouble());
      doReturn(true, false).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      boolean boolean0 = bounds3D0.contains(vector3D0, precision_DoubleEquivalence0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZYZ;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      Vector3D[] vector3DArray0 = new Vector3D[6];
      vector3DArray0[0] = vector3D0;
      vector3DArray0[1] = vector3D0;
      vector3DArray0[2] = vector3D0;
      vector3DArray0[3] = vector3D0;
      vector3DArray0[4] = vector3D0;
      vector3DArray0[5] = vector3D0;
      Bounds3D bounds3D0 = Bounds3D.from(vector3D0, vector3DArray0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).gte(anyDouble() , anyDouble());
      boolean boolean0 = bounds3D0.contains(vector3DArray0[0], precision_DoubleEquivalence0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.PLUS_Z;
      Vector3D[] vector3DArray0 = new Vector3D[0];
      Bounds3D bounds3D0 = Bounds3D.from((Vector3D) vector3D_Unit0, vector3DArray0);
      boolean boolean0 = bounds3D0.contains((Vector3D) vector3D_Unit1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Vector3D[] vector3DArray0 = new Vector3D[0];
      Bounds3D bounds3D0 = Bounds3D.from((Vector3D) vector3D_Unit0, vector3DArray0);
      boolean boolean0 = bounds3D0.contains(vector3D0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.MINUS_Z;
      Vector3D[] vector3DArray0 = new Vector3D[0];
      Bounds3D bounds3D0 = Bounds3D.from((Vector3D) vector3D_Unit1, vector3DArray0);
      boolean boolean0 = bounds3D0.contains((Vector3D) vector3D_Unit0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis3();
      Vector3D[] vector3DArray0 = new Vector3D[3];
      vector3DArray0[0] = vector3D0;
      vector3DArray0[1] = vector3D0;
      vector3DArray0[2] = vector3D0;
      Bounds3D bounds3D0 = Bounds3D.from(vector3D0, vector3DArray0);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      boolean boolean0 = bounds3D0.contains((Vector3D) vector3D_Unit0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Vector3D vector3D0 = Vector3D.of(1537.1447537044326, 1537.1447537044326, 1537.1447537044326);
      Vector3D[] vector3DArray0 = new Vector3D[0];
      Bounds3D bounds3D0 = Bounds3D.from((Vector3D) vector3D_Unit0, vector3DArray0);
      boolean boolean0 = bounds3D0.contains(vector3D0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.PLUS_Z;
      Vector3D[] vector3DArray0 = new Vector3D[0];
      Bounds3D bounds3D0 = Bounds3D.from((Vector3D) vector3D_Unit1, vector3DArray0);
      boolean boolean0 = bounds3D0.contains((Vector3D) vector3D_Unit0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis3();
      Vector3D[] vector3DArray0 = new Vector3D[3];
      vector3DArray0[0] = vector3D0;
      vector3DArray0[1] = vector3D0;
      vector3DArray0[2] = vector3D0;
      Bounds3D bounds3D0 = Bounds3D.from(vector3D0, vector3DArray0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      boolean boolean0 = bounds3D0.hasSize(precision_DoubleEquivalence0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis3();
      Vector3D[] vector3DArray0 = new Vector3D[3];
      vector3DArray0[0] = vector3D0;
      vector3DArray0[1] = vector3D0;
      vector3DArray0[2] = vector3D0;
      Bounds3D bounds3D0 = Bounds3D.from(vector3D0, vector3DArray0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      boolean boolean0 = bounds3D0.hasSize(precision_DoubleEquivalence0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Vector3D[] vector3DArray0 = new Vector3D[5];
      vector3DArray0[0] = (Vector3D) vector3D_Unit0;
      vector3DArray0[1] = (Vector3D) vector3D_Unit0;
      vector3DArray0[2] = (Vector3D) vector3D_Unit0;
      vector3DArray0[3] = (Vector3D) vector3D_Unit0;
      vector3DArray0[4] = (Vector3D) vector3D_Unit0;
      Bounds3D bounds3D0 = Bounds3D.from((Vector3D) vector3D_Unit0, vector3DArray0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      boolean boolean0 = bounds3D0.hasSize(precision_DoubleEquivalence0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis3();
      Vector3D[] vector3DArray0 = new Vector3D[3];
      vector3DArray0[0] = vector3D0;
      vector3DArray0[1] = vector3D0;
      vector3DArray0[2] = vector3D0;
      Bounds3D bounds3D0 = Bounds3D.from(vector3D0, vector3DArray0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      boolean boolean0 = bounds3D0.hasSize(precision_DoubleEquivalence0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Bounds3D.Builder bounds3D_Builder0 = Bounds3D.builder();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Vector3D[] vector3DArray0 = new Vector3D[5];
      vector3DArray0[0] = (Vector3D) vector3D_Unit0;
      vector3DArray0[1] = (Vector3D) vector3D_Unit0;
      vector3DArray0[2] = (Vector3D) vector3D_Unit0;
      vector3DArray0[3] = (Vector3D) vector3D_Unit0;
      vector3DArray0[4] = (Vector3D) vector3D_Unit0;
      Bounds3D bounds3D0 = Bounds3D.from((Vector3D) vector3D_Unit0, vector3DArray0);
      Bounds3D.Builder bounds3D_Builder1 = bounds3D_Builder0.add(bounds3D0);
      assertSame(bounds3D_Builder0, bounds3D_Builder1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis3();
      Vector3D[] vector3DArray0 = new Vector3D[3];
      vector3DArray0[0] = vector3D0;
      vector3DArray0[1] = vector3D0;
      vector3DArray0[2] = vector3D0;
      Bounds3D bounds3D0 = Bounds3D.from(vector3D0, vector3DArray0);
      bounds3D0.hashCode();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Vector3D[] vector3DArray0 = new Vector3D[5];
      vector3DArray0[0] = (Vector3D) vector3D_Unit0;
      vector3DArray0[1] = (Vector3D) vector3D_Unit0;
      vector3DArray0[2] = (Vector3D) vector3D_Unit0;
      vector3DArray0[3] = (Vector3D) vector3D_Unit0;
      vector3DArray0[4] = (Vector3D) vector3D_Unit0;
      Bounds3D bounds3D0 = Bounds3D.from((Vector3D) vector3D_Unit0, vector3DArray0);
      // Undeclared exception!
      try { 
        bounds3D0.toRegion((Precision.DoubleEquivalence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.shape.Parallelepiped", e);
      }
  }
}
