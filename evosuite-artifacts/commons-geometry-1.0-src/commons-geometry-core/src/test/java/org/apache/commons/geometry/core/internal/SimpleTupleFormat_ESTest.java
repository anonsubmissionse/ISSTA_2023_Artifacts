/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 00:48:41 GMT 2022
 */

package org.apache.commons.geometry.core.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.geometry.core.internal.DoubleFunction1N;
import org.apache.commons.geometry.core.internal.DoubleFunction2N;
import org.apache.commons.geometry.core.internal.DoubleFunction3N;
import org.apache.commons.geometry.core.internal.SimpleTupleFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleTupleFormat_ESTest extends SimpleTupleFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat("", "", "");
      DoubleFunction1N<String> doubleFunction1N0 = (DoubleFunction1N<String>) mock(DoubleFunction1N.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        simpleTupleFormat0.parse("expected \"%s\" but found \"%s\"", doubleFunction1N0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse string \"expected \"%s\" but found \"%s\"\" at index 0: unable to parse number from string \"\"
         //
         verifyException("org.apache.commons.geometry.core.internal.SimpleTupleFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = SimpleTupleFormat.getDefault();
      DoubleFunction2N<Object> doubleFunction2N0 = (DoubleFunction2N<Object>) mock(DoubleFunction2N.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(doubleFunction2N0).apply(anyDouble() , anyDouble());
      Object object0 = simpleTupleFormat0.parse("(0.0, -301.20671257106)", doubleFunction2N0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = SimpleTupleFormat.getDefault();
      DoubleFunction2N<Object> doubleFunction2N0 = (DoubleFunction2N<Object>) mock(DoubleFunction2N.class, new ViolatedAssumptionAnswer());
      doReturn("(2128.0, 2954.239, 2128.0)").when(doubleFunction2N0).apply(anyDouble() , anyDouble());
      Object object0 = simpleTupleFormat0.parse("(2128.0, 406.1)", doubleFunction2N0);
      assertEquals("(2128.0, 2954.239, 2128.0)", object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat("(", "(");
      DoubleFunction1N<Object> doubleFunction1N0 = (DoubleFunction1N<Object>) mock(DoubleFunction1N.class, new ViolatedAssumptionAnswer());
      doReturn("(0.0, 894.957484096391, 0.0(").when(doubleFunction1N0).apply(anyDouble());
      Object object0 = simpleTupleFormat0.parse("(894.957484096391(", doubleFunction1N0);
      assertEquals("(0.0, 894.957484096391, 0.0(", object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat((String) null, (String) null, (String) null);
      String string0 = simpleTupleFormat0.getSuffix();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat("|wL/", "");
      simpleTupleFormat0.getSuffix();
      assertEquals("|wL/", simpleTupleFormat0.getPrefix());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat((String) null, (String) null, (String) null);
      String string0 = simpleTupleFormat0.getSeparator();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat("", "", "x[{ryWd'x)$f`<DI0");
      simpleTupleFormat0.getSeparator();
      assertEquals("", simpleTupleFormat0.getPrefix());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat((String) null, (String) null, (String) null);
      String string0 = simpleTupleFormat0.getPrefix();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat("", "");
      String string0 = simpleTupleFormat0.getPrefix();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat((String) null, (String) null);
      DoubleFunction3N<Object> doubleFunction3N0 = (DoubleFunction3N<Object>) mock(DoubleFunction3N.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        simpleTupleFormat0.parse((String) null, doubleFunction3N0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.core.internal.SimpleTupleFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = SimpleTupleFormat.getDefault();
      DoubleFunction2N<Integer> doubleFunction2N0 = (DoubleFunction2N<Integer>) mock(DoubleFunction2N.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        simpleTupleFormat0.parse((String) null, doubleFunction2N0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.core.internal.SimpleTupleFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = SimpleTupleFormat.getDefault();
      DoubleFunction1N<Object> doubleFunction1N0 = (DoubleFunction1N<Object>) mock(DoubleFunction1N.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        simpleTupleFormat0.parse("(-14.050863609464496, -14.050863609464496, -14.050863609464496)", doubleFunction1N0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse string \"(-14.050863609464496, -14.050863609464496, -14.050863609464496)\" at index 22: expected \")\" but found \"-\"
         //
         verifyException("org.apache.commons.geometry.core.internal.SimpleTupleFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat((String) null, (String) null);
      DoubleFunction1N<String> doubleFunction1N0 = (DoubleFunction1N<String>) mock(DoubleFunction1N.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        simpleTupleFormat0.parse((String) null, doubleFunction1N0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.core.internal.SimpleTupleFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat("", "n=MLv");
      DoubleFunction3N<Object> doubleFunction3N0 = (DoubleFunction3N<Object>) mock(DoubleFunction3N.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        simpleTupleFormat0.parse("-3328.244444, -6489.5, -3328.244444, -3909.175324183775n=MLv", doubleFunction3N0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse string \"-3328.244444, -6489.5, -3328.244444, -3909.175324183775n=MLv\" at index 37: expected \"n=MLv\" but found \"-3909\"
         //
         verifyException("org.apache.commons.geometry.core.internal.SimpleTupleFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat("ZaztE`_", (String) null);
      DoubleFunction3N<Integer> doubleFunction3N0 = (DoubleFunction3N<Integer>) mock(DoubleFunction3N.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(doubleFunction3N0).apply(anyDouble() , anyDouble() , anyDouble());
      Integer integer0 = simpleTupleFormat0.parse("ZaztE`_0.0, -1539.389477, 94.24", doubleFunction3N0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat(",($YD", (String) null);
      DoubleFunction2N<Object> doubleFunction2N0 = (DoubleFunction2N<Object>) mock(DoubleFunction2N.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        simpleTupleFormat0.parse(",($YD1506.4933621949, 1506.4933621949, 1506.4933621949, 1506.4933621949", doubleFunction2N0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse string \",($YD1506.4933621949, 1506.4933621949, 1506.4933621949, 1506.4933621949\" at index 39: unexpected content
         //
         verifyException("org.apache.commons.geometry.core.internal.SimpleTupleFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = SimpleTupleFormat.getDefault();
      String string0 = simpleTupleFormat0.format(1.0, 0.0, 0.0, (-1.0));
      assertEquals("(1.0, 0.0, 0.0, -1.0)", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat("ZaztE`_", (String) null);
      String string0 = simpleTupleFormat0.format(0.0, 1130.4185, 1494.09, 0.0);
      assertEquals("ZaztE`_0.0, 1130.4185, 1494.09, 0.0", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat((String) null, (String) null, (String) null);
      String string0 = simpleTupleFormat0.format((-1434.5095470256647), (-1434.5095470256647), (-1434.5095470256647), (-1434.5095470256647));
      assertEquals("-1434.5095470256647null -1434.5095470256647null -1434.5095470256647null -1434.5095470256647", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat("(", "(");
      String string0 = simpleTupleFormat0.format(0.0, 894.957484096391, 0.0);
      assertEquals("(0.0, 894.957484096391, 0.0(", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat("ZaztE`_", (String) null);
      String string0 = simpleTupleFormat0.format(94.24, (-1865.743841184081), 1.0);
      assertEquals("ZaztE`_94.24, -1865.743841184081, 1.0", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat((String) null, (String) null, (String) null);
      String string0 = simpleTupleFormat0.format((-1434.5095470256647), (-1434.5095470256647), (-1434.5095470256647));
      assertEquals("-1434.5095470256647null -1434.5095470256647null -1434.5095470256647", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = SimpleTupleFormat.getDefault();
      String string0 = simpleTupleFormat0.format(0.0, (-301.20671257106));
      assertEquals("(0.0, -301.20671257106)", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat("ZaztE`_", (String) null);
      String string0 = simpleTupleFormat0.format((-1865.743841184081), (-5059.2937));
      assertEquals("ZaztE`_-1865.743841184081, -5059.2937", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat((String) null, (String) null);
      String string0 = simpleTupleFormat0.format(0.7865940810722631, 0.7865940810722631);
      assertEquals("0.7865940810722631, 0.7865940810722631", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat((String) null, (String) null);
      String string0 = simpleTupleFormat0.format((-1828.3));
      assertEquals("-1828.3", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat("(", "(");
      String string0 = simpleTupleFormat0.format(0.0);
      assertEquals("(0.0(", string0);
      assertEquals(",", simpleTupleFormat0.getSeparator());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = SimpleTupleFormat.getDefault();
      String string0 = simpleTupleFormat0.getSeparator();
      assertEquals(",", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat("(", "(");
      DoubleFunction2N<String> doubleFunction2N0 = (DoubleFunction2N<String>) mock(DoubleFunction2N.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        simpleTupleFormat0.parse("Kz2ZVqG h:%u", doubleFunction2N0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse string \"Kz2ZVqG h:%u\" at index 0: expected \"(\" but found \"K\"
         //
         verifyException("org.apache.commons.geometry.core.internal.SimpleTupleFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat((String) null, "");
      DoubleFunction3N<Object> doubleFunction3N0 = (DoubleFunction3N<Object>) mock(DoubleFunction3N.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        simpleTupleFormat0.parse("\"A{[D", doubleFunction3N0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse string \"\"A{[D\" at index 0: unable to parse number from string \"\"
         //
         verifyException("org.apache.commons.geometry.core.internal.SimpleTupleFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat("(", "(");
      DoubleFunction1N<Object> doubleFunction1N0 = (DoubleFunction1N<Object>) mock(DoubleFunction1N.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(doubleFunction1N0).apply(anyDouble());
      Object object0 = simpleTupleFormat0.parse("(894.957484096391(", doubleFunction1N0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = SimpleTupleFormat.getDefault();
      String string0 = simpleTupleFormat0.getSuffix();
      assertEquals(")", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = SimpleTupleFormat.getDefault();
      String string0 = simpleTupleFormat0.getPrefix();
      assertEquals("(", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = SimpleTupleFormat.getDefault();
      DoubleFunction2N<Object> doubleFunction2N0 = (DoubleFunction2N<Object>) mock(DoubleFunction2N.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        simpleTupleFormat0.parse("(", doubleFunction2N0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse string \"(\" at index 1: unable to parse number from string \"\"
         //
         verifyException("org.apache.commons.geometry.core.internal.SimpleTupleFormat", e);
      }
  }
}
