/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 01:57:04 GMT 2022
 */

package org.apache.commons.geometry.io.euclidean.threed.txt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.StringWriter;
import java.io.Writer;
import java.net.URI;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import org.apache.commons.geometry.euclidean.threed.BoundarySource3D;
import org.apache.commons.geometry.euclidean.threed.PlaneConvexSubset;
import org.apache.commons.geometry.euclidean.threed.RegionBSPTree3D;
import org.apache.commons.geometry.euclidean.threed.Vector3D;
import org.apache.commons.geometry.euclidean.threed.rotation.AxisSequence;
import org.apache.commons.geometry.io.euclidean.threed.FacetDefinition;
import org.apache.commons.geometry.io.euclidean.threed.SimpleFacetDefinition;
import org.apache.commons.geometry.io.euclidean.threed.txt.TextFacetDefinitionWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TextFacetDefinitionWriter_ESTest extends TextFacetDefinitionWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(4);
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = TextFacetDefinitionWriter.csvFormat(stringWriter0);
      LinkedList<Vector3D> linkedList0 = new LinkedList<Vector3D>();
      AxisSequence axisSequence0 = AxisSequence.ZYZ;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      linkedList0.add(vector3D0);
      linkedList0.add(vector3D0);
      linkedList0.add(vector3D0);
      linkedList0.add(vector3D0);
      // Undeclared exception!
      try { 
        textFacetDefinitionWriter0.write((List<Vector3D>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Writer requires 3 vertices per facet; found 4
         //
         verifyException("org.apache.commons.geometry.io.euclidean.threed.txt.TextFacetDefinitionWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = TextFacetDefinitionWriter.csvFormat(mockPrintWriter0);
      assertEquals(3, textFacetDefinitionWriter0.getFacetVertexCount());
      
      textFacetDefinitionWriter0.setFacetVertexCount((-3857));
      assertEquals((-1), textFacetDefinitionWriter0.getFacetVertexCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(4);
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = TextFacetDefinitionWriter.csvFormat(stringWriter0);
      LinkedList<Vector3D> linkedList0 = new LinkedList<Vector3D>();
      AxisSequence axisSequence0 = AxisSequence.ZYZ;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      linkedList0.add(vector3D0);
      linkedList0.add(vector3D0);
      linkedList0.add(vector3D0);
      SimpleFacetDefinition simpleFacetDefinition0 = new SimpleFacetDefinition(linkedList0, vector3D0);
      textFacetDefinitionWriter0.write((FacetDefinition) simpleFacetDefinition0);
      assertEquals("0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter((Writer) null);
      assertEquals("; ", textFacetDefinitionWriter0.getVertexSeparator());
      
      textFacetDefinitionWriter0.setVertexSeparator((String) null);
      String string0 = textFacetDefinitionWriter0.getVertexSeparator();
      assertEquals((-1), textFacetDefinitionWriter0.getFacetVertexCount());
      assertEquals("# ", textFacetDefinitionWriter0.getCommentToken());
      assertNull(string0);
      assertEquals(" ", textFacetDefinitionWriter0.getVertexComponentSeparator());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(3549);
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(stringWriter0);
      assertEquals("; ", textFacetDefinitionWriter0.getVertexSeparator());
      
      textFacetDefinitionWriter0.setVertexSeparator("");
      textFacetDefinitionWriter0.getVertexSeparator();
      assertEquals("", textFacetDefinitionWriter0.getVertexSeparator());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = TextFacetDefinitionWriter.csvFormat(stringWriter0);
      assertEquals(",", textFacetDefinitionWriter0.getVertexComponentSeparator());
      
      textFacetDefinitionWriter0.setVertexComponentSeparator((String) null);
      String string0 = textFacetDefinitionWriter0.getVertexComponentSeparator();
      assertEquals(",", textFacetDefinitionWriter0.getVertexSeparator());
      assertNull(string0);
      assertEquals(3, textFacetDefinitionWriter0.getFacetVertexCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(2128);
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = TextFacetDefinitionWriter.csvFormat(stringWriter0);
      assertEquals(",", textFacetDefinitionWriter0.getVertexComponentSeparator());
      
      textFacetDefinitionWriter0.setVertexComponentSeparator("");
      textFacetDefinitionWriter0.getVertexComponentSeparator();
      assertEquals("", textFacetDefinitionWriter0.getVertexComponentSeparator());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("My]Bb");
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(mockPrintWriter0);
      int int0 = textFacetDefinitionWriter0.getFacetVertexCount();
      assertEquals((-1), int0);
      assertEquals("# ", textFacetDefinitionWriter0.getCommentToken());
      assertEquals("; ", textFacetDefinitionWriter0.getVertexSeparator());
      assertEquals(" ", textFacetDefinitionWriter0.getVertexComponentSeparator());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFile mockFile0 = new MockFile("lA^<7Gz&^T8 ", "lA^<7Gz&^T8 ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = TextFacetDefinitionWriter.csvFormat(mockPrintWriter0);
      String string0 = textFacetDefinitionWriter0.getCommentToken();
      assertEquals(",", textFacetDefinitionWriter0.getVertexComponentSeparator());
      assertEquals(3, textFacetDefinitionWriter0.getFacetVertexCount());
      assertNull(string0);
      assertEquals(",", textFacetDefinitionWriter0.getVertexSeparator());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter((Writer) null);
      // Undeclared exception!
      try { 
        textFacetDefinitionWriter0.writeComment("WGp^3}-h2Ow@Q$k");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.io.core.utils.AbstractTextFormatWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = TextFacetDefinitionWriter.csvFormat((Writer) null);
      // Undeclared exception!
      try { 
        textFacetDefinitionWriter0.writeBlankLine();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.io.core.utils.AbstractTextFormatWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(4);
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = TextFacetDefinitionWriter.csvFormat(stringWriter0);
      LinkedList<Vector3D> linkedList0 = new LinkedList<Vector3D>();
      AxisSequence axisSequence0 = AxisSequence.XYZ;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      linkedList0.add(vector3D0);
      linkedList0.add(vector3D0);
      linkedList0.add(vector3D0);
      textFacetDefinitionWriter0.setFacetVertexCount(4);
      SimpleFacetDefinition simpleFacetDefinition0 = new SimpleFacetDefinition(linkedList0);
      // Undeclared exception!
      try { 
        textFacetDefinitionWriter0.write((FacetDefinition) simpleFacetDefinition0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Writer requires 4 vertices per facet; found 3
         //
         verifyException("org.apache.commons.geometry.io.euclidean.threed.txt.TextFacetDefinitionWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("'Uu|}`~");
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        textFacetDefinitionWriter0.write((PlaneConvexSubset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.io.euclidean.threed.txt.TextFacetDefinitionWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(stringWriter0);
      // Undeclared exception!
      try { 
        textFacetDefinitionWriter0.write((BoundarySource3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.io.euclidean.threed.txt.TextFacetDefinitionWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter((Writer) null);
      // Undeclared exception!
      try { 
        textFacetDefinitionWriter0.write((List<Vector3D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.io.euclidean.threed.txt.TextFacetDefinitionWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(mockPrintWriter0);
      assertEquals("# ", textFacetDefinitionWriter0.getCommentToken());
      
      textFacetDefinitionWriter0.setCommentToken((String) null);
      assertEquals(" ", textFacetDefinitionWriter0.getVertexComponentSeparator());
      assertEquals("; ", textFacetDefinitionWriter0.getVertexSeparator());
      assertEquals((-1), textFacetDefinitionWriter0.getFacetVertexCount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(stringWriter0);
      ArrayList<Vector3D> arrayList0 = new ArrayList<Vector3D>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      arrayList0.add((Vector3D) vector3D_Unit0);
      arrayList0.add((Vector3D) vector3D_Unit0);
      arrayList0.add((Vector3D) vector3D_Unit0);
      textFacetDefinitionWriter0.write((List<Vector3D>) arrayList0);
      assertEquals("-1.0 0.0 0.0; -1.0 0.0 0.0; -1.0 0.0 0.0\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(3549);
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(stringWriter0);
      ArrayList<Vector3D> arrayList0 = new ArrayList<Vector3D>();
      // Undeclared exception!
      try { 
        textFacetDefinitionWriter0.write((List<Vector3D>) arrayList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // At least 3 vertices are required per facet; found 0
         //
         verifyException("org.apache.commons.geometry.io.euclidean.threed.txt.TextFacetDefinitionWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("; ");
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = TextFacetDefinitionWriter.csvFormat(mockPrintWriter0);
      Stack<PlaneConvexSubset> stack0 = new Stack<PlaneConvexSubset>();
      stack0.add((PlaneConvexSubset) null);
      BoundarySource3D boundarySource3D0 = BoundarySource3D.of((Collection<PlaneConvexSubset>) stack0);
      // Undeclared exception!
      try { 
        textFacetDefinitionWriter0.write(boundarySource3D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.io.euclidean.threed.txt.TextFacetDefinitionWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(stringWriter0);
      RegionBSPTree3D regionBSPTree3D0 = RegionBSPTree3D.empty();
      textFacetDefinitionWriter0.write((BoundarySource3D) regionBSPTree3D0);
      assertEquals("# ", textFacetDefinitionWriter0.getCommentToken());
      assertEquals((-1), textFacetDefinitionWriter0.getFacetVertexCount());
      assertEquals(" ", textFacetDefinitionWriter0.getVertexComponentSeparator());
      assertEquals("; ", textFacetDefinitionWriter0.getVertexSeparator());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(stringWriter0);
      textFacetDefinitionWriter0.writeComment((String) null);
      assertEquals(" ", textFacetDefinitionWriter0.getVertexComponentSeparator());
      assertEquals("; ", textFacetDefinitionWriter0.getVertexSeparator());
      assertEquals("# ", textFacetDefinitionWriter0.getCommentToken());
      assertEquals((-1), textFacetDefinitionWriter0.getFacetVertexCount());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = TextFacetDefinitionWriter.csvFormat(stringWriter0);
      // Undeclared exception!
      try { 
        textFacetDefinitionWriter0.writeComment(",");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot write comment: no comment token configured
         //
         verifyException("org.apache.commons.geometry.io.euclidean.threed.txt.TextFacetDefinitionWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("T:3X[~ixi?}@baY}Wl");
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        textFacetDefinitionWriter0.setCommentToken(" ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comment token cannot begin with whitespace
         //
         verifyException("org.apache.commons.geometry.io.euclidean.threed.txt.TextFacetDefinitionWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(stringWriter0);
      // Undeclared exception!
      try { 
        textFacetDefinitionWriter0.setCommentToken("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comment token cannot be empty
         //
         verifyException("org.apache.commons.geometry.io.euclidean.threed.txt.TextFacetDefinitionWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = TextFacetDefinitionWriter.csvFormat(stringWriter0);
      textFacetDefinitionWriter0.setCommentToken("mAeTB4_Aa2q");
      textFacetDefinitionWriter0.writeComment("mAeTB4_Aa2q");
      assertEquals("mAeTB4_Aa2qmAeTB4_Aa2q\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = TextFacetDefinitionWriter.csvFormat(stringWriter0);
      // Undeclared exception!
      try { 
        textFacetDefinitionWriter0.setFacetVertexCount(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Facet vertex count must be less than 0 or greater than 2; was 1
         //
         verifyException("org.apache.commons.geometry.io.euclidean.threed.txt.TextFacetDefinitionWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(stringWriter0);
      textFacetDefinitionWriter0.setFacetVertexCount((-1));
      assertEquals("# ", textFacetDefinitionWriter0.getCommentToken());
      assertEquals((-1), textFacetDefinitionWriter0.getFacetVertexCount());
      assertEquals(" ", textFacetDefinitionWriter0.getVertexComponentSeparator());
      assertEquals("; ", textFacetDefinitionWriter0.getVertexSeparator());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(stringWriter0);
      String string0 = textFacetDefinitionWriter0.getVertexSeparator();
      assertEquals(" ", textFacetDefinitionWriter0.getVertexComponentSeparator());
      assertEquals("; ", string0);
      assertEquals((-1), textFacetDefinitionWriter0.getFacetVertexCount());
      assertEquals("# ", textFacetDefinitionWriter0.getCommentToken());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(stringWriter0);
      String string0 = textFacetDefinitionWriter0.getCommentToken();
      assertEquals("# ", string0);
      assertEquals("; ", textFacetDefinitionWriter0.getVertexSeparator());
      assertEquals((-1), textFacetDefinitionWriter0.getFacetVertexCount());
      assertEquals(" ", textFacetDefinitionWriter0.getVertexComponentSeparator());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("SFHQN#Bk[nCZ)");
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        textFacetDefinitionWriter0.write((FacetDefinition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.io.euclidean.threed.txt.TextFacetDefinitionWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(mockPrintWriter0);
      String string0 = textFacetDefinitionWriter0.getVertexComponentSeparator();
      assertEquals((-1), textFacetDefinitionWriter0.getFacetVertexCount());
      assertEquals("; ", textFacetDefinitionWriter0.getVertexSeparator());
      assertEquals(" ", string0);
      assertEquals("# ", textFacetDefinitionWriter0.getCommentToken());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(stringWriter0);
      textFacetDefinitionWriter0.writeBlankLine();
      assertEquals(" ", textFacetDefinitionWriter0.getVertexComponentSeparator());
      assertEquals("; ", textFacetDefinitionWriter0.getVertexSeparator());
      assertEquals("# ", textFacetDefinitionWriter0.getCommentToken());
      assertEquals((-1), textFacetDefinitionWriter0.getFacetVertexCount());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = TextFacetDefinitionWriter.csvFormat(stringWriter0);
      LinkedList<Vector3D> linkedList0 = new LinkedList<Vector3D>();
      AxisSequence axisSequence0 = AxisSequence.XZX;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      linkedList0.add(vector3D0);
      linkedList0.add(vector3D0);
      linkedList0.add(vector3D0);
      textFacetDefinitionWriter0.write((List<Vector3D>) linkedList0);
      assertEquals("0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0\n", stringWriter0.toString());
      assertEquals(3, textFacetDefinitionWriter0.getFacetVertexCount());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("; ");
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = TextFacetDefinitionWriter.csvFormat(mockPrintWriter0);
      int int0 = textFacetDefinitionWriter0.getFacetVertexCount();
      assertEquals(",", textFacetDefinitionWriter0.getVertexComponentSeparator());
      assertEquals(3, int0);
      assertEquals(",", textFacetDefinitionWriter0.getVertexSeparator());
  }
}
