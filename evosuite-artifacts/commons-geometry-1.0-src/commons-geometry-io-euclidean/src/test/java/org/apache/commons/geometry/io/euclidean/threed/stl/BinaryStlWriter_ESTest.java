/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 02:00:15 GMT 2022
 */

package org.apache.commons.geometry.io.euclidean.threed.stl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.FilterOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.UncheckedIOException;
import org.apache.commons.geometry.euclidean.threed.Vector3D;
import org.apache.commons.geometry.io.euclidean.threed.stl.BinaryStlWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BinaryStlWriter_ESTest extends BinaryStlWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      BinaryStlWriter binaryStlWriter0 = new BinaryStlWriter(filterOutputStream0);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D[] vector3DArray0 = new Vector3D[0];
      Vector3D vector3D0 = Vector3D.max((Vector3D) vector3D_Unit0, vector3DArray0);
      // Undeclared exception!
      try { 
        binaryStlWriter0.writeTriangle(vector3D0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, vector3D0, (-998));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 1);
      BinaryStlWriter binaryStlWriter0 = new BinaryStlWriter(bufferedOutputStream0);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D vector3D0 = Vector3D.ZERO;
      // Undeclared exception!
      try { 
        binaryStlWriter0.writeTriangle((Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, vector3D0, vector3D0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // IOException: Pipe not connected
         //
         verifyException("org.apache.commons.geometry.io.core.internal.GeometryIOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Axis reference frame cannot be null", true);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      BinaryStlWriter binaryStlWriter0 = new BinaryStlWriter(filterOutputStream0);
      binaryStlWriter0.writeHeader(byteArray0, 152);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("(b");
      BinaryStlWriter binaryStlWriter0 = new BinaryStlWriter(mockFileOutputStream0);
      binaryStlWriter0.close();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      // Undeclared exception!
      try { 
        binaryStlWriter0.writeTriangle((Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, 50);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // MockIOException: null
         //
         verifyException("org.apache.commons.geometry.io.core.internal.GeometryIOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BinaryStlWriter binaryStlWriter0 = new BinaryStlWriter((OutputStream) null);
      // Undeclared exception!
      try { 
        binaryStlWriter0.writeTriangle((Vector3D) null, (Vector3D) null, (Vector3D) null, (Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.io.euclidean.threed.stl.StlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        BinaryStlWriter.writeHeader(byteArray0, (int) (byte)0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.io.euclidean.threed.stl.BinaryStlWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        BinaryStlWriter.writeHeader(byteArray0, 1061, (OutputStream) pipedOutputStream0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // IOException: Pipe not connected
         //
         verifyException("org.apache.commons.geometry.io.core.internal.GeometryIOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      MockFile mockFile0 = new MockFile("(lx]", "&U</");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      BinaryStlWriter binaryStlWriter0 = new BinaryStlWriter(mockFileOutputStream0);
      binaryStlWriter0.close();
      // Undeclared exception!
      try { 
        binaryStlWriter0.writeHeader(byteArray0, (-1));
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // MockIOException: null
         //
         verifyException("org.apache.commons.geometry.io.core.internal.GeometryIOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BinaryStlWriter binaryStlWriter0 = new BinaryStlWriter((OutputStream) null);
      // Undeclared exception!
      try { 
        binaryStlWriter0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.io.core.internal.GeometryIOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Axis reference frame cannot be null", true);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      BinaryStlWriter.writeHeader(byteArray0, (int) (byte)1, (OutputStream) filterOutputStream0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BinaryStlWriter binaryStlWriter0 = new BinaryStlWriter(byteArrayOutputStream0);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      binaryStlWriter0.writeTriangle((Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, 2587);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\uFFFD?\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\uFFFD?\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\uFFFD?\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\uFFFD?\u001B\n", byteArrayOutputStream0.toString());
      assertEquals(50, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Axis reference frame cannot be null", true);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      BinaryStlWriter binaryStlWriter0 = new BinaryStlWriter(filterOutputStream0);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from((-5688.0), (double) (byte)0, 4102.5871591);
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.MINUS_Z;
      Vector3D.Unit vector3D_Unit2 = vector3D_Unit0.directionTo((Vector3D) vector3D_Unit1);
      Vector3D.Unit vector3D_Unit3 = vector3D_Unit0.orthogonal((Vector3D) vector3D_Unit2);
      Vector3D.Unit vector3D_Unit4 = vector3D_Unit3.orthogonal();
      binaryStlWriter0.writeTriangle((Vector3D) vector3D_Unit4, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit3, (Vector3D) vector3D_Unit2, 152);
      assertFalse(vector3D_Unit2.isNaN());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BinaryStlWriter.writeHeader((byte[]) null, (-80), (OutputStream) byteArrayOutputStream0);
      assertEquals(84, byteArrayOutputStream0.size());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Axis reference frame cannot be null", true);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      BinaryStlWriter binaryStlWriter0 = new BinaryStlWriter(filterOutputStream0);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from((-5688.0), (double) (byte)0, 4102.5871591);
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.MINUS_Z;
      Vector3D.Unit vector3D_Unit2 = vector3D_Unit1.orthogonal();
      binaryStlWriter0.writeTriangle((Vector3D) vector3D_Unit2, (Vector3D) vector3D_Unit1, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit1);
      assertEquals((-1.0), vector3D_Unit2.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BinaryStlWriter binaryStlWriter0 = new BinaryStlWriter((OutputStream) null);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        binaryStlWriter0.writeHeader(byteArray0, 2428);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.io.euclidean.threed.stl.BinaryStlWriter", e);
      }
  }
}
