/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 02:01:44 GMT 2022
 */

package org.apache.commons.geometry.io.euclidean.threed.stl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.apache.commons.geometry.euclidean.threed.Vector3D;
import org.apache.commons.geometry.io.euclidean.threed.stl.BinaryStlFacetDefinition;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BinaryStlFacetDefinition_ESTest extends BinaryStlFacetDefinition_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Vector<Vector3D> vector0 = new Vector<Vector3D>();
      Vector3D vector3D0 = Vector3D.of((double) 1036, (double) 1036, (double) 1036);
      vector0.setSize(1036);
      BinaryStlFacetDefinition binaryStlFacetDefinition0 = new BinaryStlFacetDefinition(vector0, vector3D0, 837);
      int int0 = binaryStlFacetDefinition0.getAttributeValue();
      assertEquals(837, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Vector<Vector3D> vector0 = new Vector<Vector3D>();
      Vector3D vector3D0 = Vector3D.of((double) 1036, (double) 1036, (double) 1036);
      vector0.setSize(1036);
      BinaryStlFacetDefinition binaryStlFacetDefinition0 = new BinaryStlFacetDefinition(vector0, vector3D0, (-1947));
      int int0 = binaryStlFacetDefinition0.getAttributeValue();
      assertEquals((-1947), int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of((-4025.0), (-4025.0), (-1.0));
      BinaryStlFacetDefinition binaryStlFacetDefinition0 = null;
      try {
        binaryStlFacetDefinition0 = new BinaryStlFacetDefinition((List<Vector3D>) null, vector3D0, (-3173));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Facet vertex list cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<Vector3D> linkedList0 = new LinkedList<Vector3D>();
      Vector3D vector3D0 = Vector3D.NaN;
      BinaryStlFacetDefinition binaryStlFacetDefinition0 = null;
      try {
        binaryStlFacetDefinition0 = new BinaryStlFacetDefinition(linkedList0, vector3D0, 2304);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Facet vertex list must contain at least 3 points; found 0
         //
         verifyException("org.apache.commons.geometry.io.euclidean.threed.SimpleFacetDefinition", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Vector<Vector3D> vector0 = new Vector<Vector3D>();
      Vector3D vector3D0 = Vector3D.of((double) 1036, (double) 1036, (double) 1036);
      vector0.setSize(1036);
      BinaryStlFacetDefinition binaryStlFacetDefinition0 = new BinaryStlFacetDefinition(vector0, vector3D0, 0);
      int int0 = binaryStlFacetDefinition0.getAttributeValue();
      assertEquals(0, int0);
  }
}
