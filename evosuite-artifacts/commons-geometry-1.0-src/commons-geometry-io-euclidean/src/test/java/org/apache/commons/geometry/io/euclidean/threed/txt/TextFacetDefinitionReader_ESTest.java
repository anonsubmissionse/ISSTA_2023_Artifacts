/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 01:55:16 GMT 2022
 */

package org.apache.commons.geometry.io.euclidean.threed.txt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StringReader;
import java.io.UncheckedIOException;
import org.apache.commons.geometry.io.euclidean.threed.FacetDefinition;
import org.apache.commons.geometry.io.euclidean.threed.txt.TextFacetDefinitionReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TextFacetDefinitionReader_ESTest extends TextFacetDefinitionReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("PTk}c");
      TextFacetDefinitionReader textFacetDefinitionReader0 = new TextFacetDefinitionReader(stringReader0, (String) null);
      String string0 = textFacetDefinitionReader0.getCommentToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.close();
      TextFacetDefinitionReader textFacetDefinitionReader0 = new TextFacetDefinitionReader(stringReader0, "f&PE{'GW|wf|f");
      // Undeclared exception!
      try { 
        textFacetDefinitionReader0.readFacet();
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // IOException: Stream closed
         //
         verifyException("org.apache.commons.geometry.io.core.internal.GeometryIOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TextFacetDefinitionReader textFacetDefinitionReader0 = null;
      try {
        textFacetDefinitionReader0 = new TextFacetDefinitionReader((Reader) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Reader cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Maximum string length cannot be less than zero; was ");
      TextFacetDefinitionReader textFacetDefinitionReader0 = null;
      try {
        textFacetDefinitionReader0 = new TextFacetDefinitionReader(stringReader0, "Maximum string length cannot be less than zero; was ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comment token cannot contain whitespace; was [Maximum string length cannot be less than zero; was ]
         //
         verifyException("org.apache.commons.geometry.io.euclidean.threed.txt.TextFacetDefinitionReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TextFacetDefinitionReader textFacetDefinitionReader0 = null;
      try {
        textFacetDefinitionReader0 = new TextFacetDefinitionReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Reader cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      TextFacetDefinitionReader textFacetDefinitionReader0 = new TextFacetDefinitionReader(stringReader0, "");
      String string0 = textFacetDefinitionReader0.getCommentToken();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" `^$HZ");
      TextFacetDefinitionReader textFacetDefinitionReader0 = new TextFacetDefinitionReader(stringReader0);
      // Undeclared exception!
      try { 
        textFacetDefinitionReader0.setCommentToken(" `^$HZ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comment token cannot contain whitespace; was [ `^$HZ]
         //
         verifyException("org.apache.commons.geometry.io.euclidean.threed.txt.TextFacetDefinitionReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Comment token cannot contain whitespace; was [");
      TextFacetDefinitionReader textFacetDefinitionReader0 = new TextFacetDefinitionReader(stringReader0);
      textFacetDefinitionReader0.setCommentToken((String) null);
      assertNull(textFacetDefinitionReader0.getCommentToken());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-2#G!B:");
      TextFacetDefinitionReader textFacetDefinitionReader0 = new TextFacetDefinitionReader(stringReader0);
      // Undeclared exception!
      try { 
        textFacetDefinitionReader0.readFacet();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Parsing failed at line 1, column 8: expected double but found end of content
         //
         verifyException("org.apache.commons.geometry.io.core.internal.GeometryIOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5&.2):2F");
      TextFacetDefinitionReader textFacetDefinitionReader0 = new TextFacetDefinitionReader(stringReader0);
      // Undeclared exception!
      try { 
        textFacetDefinitionReader0.readFacet();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Parsing failed at line 1, column 10: expected double but found end of content
         //
         verifyException("org.apache.commons.geometry.io.core.internal.GeometryIOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("O]");
      TextFacetDefinitionReader textFacetDefinitionReader0 = new TextFacetDefinitionReader(stringReader0, "O]");
      FacetDefinition facetDefinition0 = textFacetDefinitionReader0.readFacet();
      assertNull(facetDefinition0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" `^$HZ");
      TextFacetDefinitionReader textFacetDefinitionReader0 = new TextFacetDefinitionReader(stringReader0);
      textFacetDefinitionReader0.close();
      assertEquals("#", textFacetDefinitionReader0.getCommentToken());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#");
      TextFacetDefinitionReader textFacetDefinitionReader0 = new TextFacetDefinitionReader(stringReader0, "#");
      textFacetDefinitionReader0.setCommentToken("");
      // Undeclared exception!
      try { 
        textFacetDefinitionReader0.readFacet();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Parsing failed at line 1, column 1: expected double but found empty token followed by [#]
         //
         verifyException("org.apache.commons.geometry.io.core.internal.GeometryIOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("O]");
      TextFacetDefinitionReader textFacetDefinitionReader0 = new TextFacetDefinitionReader(stringReader0, "O]");
      String string0 = textFacetDefinitionReader0.getCommentToken();
      assertEquals("O]", string0);
  }
}
