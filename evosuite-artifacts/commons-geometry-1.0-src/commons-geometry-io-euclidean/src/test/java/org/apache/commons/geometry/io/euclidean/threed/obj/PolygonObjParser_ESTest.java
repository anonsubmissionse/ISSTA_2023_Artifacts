/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 02:00:14 GMT 2022
 */

package org.apache.commons.geometry.io.euclidean.threed.obj;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StringReader;
import java.io.UncheckedIOException;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import java.util.function.IntFunction;
import org.apache.commons.geometry.euclidean.threed.Vector3D;
import org.apache.commons.geometry.io.core.internal.CharReadBuffer;
import org.apache.commons.geometry.io.core.internal.SimpleTextParser;
import org.apache.commons.geometry.io.euclidean.threed.obj.PolygonObjParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PolygonObjParser_ESTest extends PolygonObjParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector<PolygonObjParser.VertexAttributes> vector0 = new Vector<PolygonObjParser.VertexAttributes>();
      PolygonObjParser.VertexAttributes polygonObjParser_VertexAttributes0 = new PolygonObjParser.VertexAttributes(1526, 1526, (-139));
      vector0.add(polygonObjParser_VertexAttributes0);
      vector0.add(polygonObjParser_VertexAttributes0);
      PolygonObjParser.Face polygonObjParser_Face0 = new PolygonObjParser.Face(vector0);
      vector0.add(polygonObjParser_VertexAttributes0);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.PLUS_Y;
      Vector3D.Unit vector3D_Unit2 = Vector3D.Unit.MINUS_X;
      Vector3D.Unit vector3D_Unit3 = vector3D_Unit1.orthogonal();
      IntFunction<Vector3D> intFunction0 = (IntFunction<Vector3D>) mock(IntFunction.class, new ViolatedAssumptionAnswer());
      doReturn(vector3D_Unit1, vector3D_Unit3, vector3D_Unit0, vector3D_Unit1, vector3D_Unit3).when(intFunction0).apply(anyInt());
      List<Vector3D> list0 = polygonObjParser_Face0.getVerticesCounterClockwise(vector3D_Unit2, intFunction0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<PolygonObjParser.VertexAttributes> linkedList0 = new LinkedList<PolygonObjParser.VertexAttributes>();
      PolygonObjParser.VertexAttributes polygonObjParser_VertexAttributes0 = new PolygonObjParser.VertexAttributes(47, (-1999410896), (-1));
      linkedList0.add(polygonObjParser_VertexAttributes0);
      PolygonObjParser.Face polygonObjParser_Face0 = new PolygonObjParser.Face(linkedList0);
      IntFunction<Vector3D> intFunction0 = (IntFunction<Vector3D>) mock(IntFunction.class, new ViolatedAssumptionAnswer());
      Vector3D vector3D0 = polygonObjParser_Face0.getDefinedCompositeNormal(intFunction0);
      assertNull(vector3D0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0Y'BRZ7w2On#N5!c");
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      // Undeclared exception!
      try { 
        polygonObjParser0.readFace();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Parsing failed at line 1, column 1: vertex index cannot be used because no values of that type have been defined
         //
         verifyException("org.apache.commons.geometry.io.core.internal.GeometryIOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PolygonObjParser.VertexAttributes polygonObjParser_VertexAttributes0 = new PolygonObjParser.VertexAttributes((-1084), (-958), (-1084));
      int int0 = polygonObjParser_VertexAttributes0.getVertexIndex();
      assertEquals((-1084), polygonObjParser_VertexAttributes0.getNormalIndex());
      assertEquals((-958), polygonObjParser_VertexAttributes0.getTextureIndex());
      assertEquals((-1084), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PolygonObjParser.VertexAttributes polygonObjParser_VertexAttributes0 = new PolygonObjParser.VertexAttributes(787, 787, 787);
      int int0 = polygonObjParser_VertexAttributes0.getNormalIndex();
      assertEquals(787, int0);
      assertEquals(787, polygonObjParser_VertexAttributes0.getTextureIndex());
      assertEquals(787, polygonObjParser_VertexAttributes0.getVertexIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<PolygonObjParser.VertexAttributes> linkedList0 = new LinkedList<PolygonObjParser.VertexAttributes>();
      PolygonObjParser.Face polygonObjParser_Face0 = new PolygonObjParser.Face(linkedList0);
      IntFunction<Vector3D> intFunction0 = (IntFunction<Vector3D>) mock(IntFunction.class, new ViolatedAssumptionAnswer());
      List<PolygonObjParser.VertexAttributes> list0 = polygonObjParser_Face0.getVertexAttributesCounterClockwise((Vector3D) null, intFunction0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Stack<PolygonObjParser.VertexAttributes> stack0 = new Stack<PolygonObjParser.VertexAttributes>();
      PolygonObjParser.Face polygonObjParser_Face0 = new PolygonObjParser.Face(stack0);
      // Undeclared exception!
      try { 
        polygonObjParser_Face0.computeNormalFromVertices((IntFunction<Vector3D>) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("F^vk<5*0V*-H*2t[GU");
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      polygonObjParser0.setFailOnNonPolygonKeywords(true);
      boolean boolean0 = polygonObjParser0.isFailOnNonPolygonKeywords();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("v");
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      polygonObjParser0.handleKeyword("v");
      int int0 = polygonObjParser0.getVertexCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("vt");
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      polygonObjParser0.nextKeyword();
      int int0 = polygonObjParser0.getTextureCoordinateCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PolygonObjParser polygonObjParser0 = new PolygonObjParser((SimpleTextParser) null);
      // Undeclared exception!
      try { 
        polygonObjParser0.readFace();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.io.euclidean.threed.obj.AbstractObjParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("@");
      stringReader0.close();
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      // Undeclared exception!
      try { 
        polygonObjParser0.readFace();
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // IOException: Stream closed
         //
         verifyException("org.apache.commons.geometry.io.core.internal.GeometryIOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5?G27R9DP");
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      // Undeclared exception!
      try { 
        polygonObjParser0.handleKeyword((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.io.euclidean.threed.obj.PolygonObjParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PolygonObjParser polygonObjParser0 = null;
      try {
        polygonObjParser0 = new PolygonObjParser((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Reader cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("iMi/*w+9n&nG6JDj");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(simpleTextParser0);
      polygonObjParser0.handleKeyword("vn");
      int int0 = polygonObjParser0.getVertexNormalCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector<PolygonObjParser.VertexAttributes> vector0 = new Vector<PolygonObjParser.VertexAttributes>();
      PolygonObjParser.VertexAttributes polygonObjParser_VertexAttributes0 = new PolygonObjParser.VertexAttributes(575, 575, 575);
      vector0.add(polygonObjParser_VertexAttributes0);
      vector0.add(polygonObjParser_VertexAttributes0);
      PolygonObjParser.Face polygonObjParser_Face0 = new PolygonObjParser.Face(vector0);
      vector0.add(polygonObjParser_VertexAttributes0);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.negate();
      Vector3D.Unit vector3D_Unit2 = vector3D_Unit1.orthogonal();
      IntFunction<Vector3D> intFunction0 = (IntFunction<Vector3D>) mock(IntFunction.class, new ViolatedAssumptionAnswer());
      doReturn(vector3D_Unit1, vector3D_Unit2, vector3D_Unit0, vector3D_Unit1, vector3D_Unit2).when(intFunction0).apply(anyInt());
      List<Vector3D> list0 = polygonObjParser_Face0.getVerticesCounterClockwise(vector3D_Unit1, intFunction0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector<PolygonObjParser.VertexAttributes> vector0 = new Vector<PolygonObjParser.VertexAttributes>();
      PolygonObjParser.VertexAttributes polygonObjParser_VertexAttributes0 = new PolygonObjParser.VertexAttributes(1514, 1514, 1514);
      vector0.add(polygonObjParser_VertexAttributes0);
      vector0.add(polygonObjParser_VertexAttributes0);
      PolygonObjParser.Face polygonObjParser_Face0 = new PolygonObjParser.Face(vector0);
      vector0.add(polygonObjParser_VertexAttributes0);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.PLUS_Y;
      Vector3D.Unit vector3D_Unit2 = vector3D_Unit1.orthogonal();
      IntFunction<Vector3D> intFunction0 = (IntFunction<Vector3D>) mock(IntFunction.class, new ViolatedAssumptionAnswer());
      doReturn(vector3D_Unit1, vector3D_Unit2, vector3D_Unit0, vector3D_Unit2, vector3D_Unit1).when(intFunction0).apply(anyInt());
      List<Vector3D> list0 = polygonObjParser_Face0.getVerticesCounterClockwise(vector3D_Unit0, intFunction0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector<PolygonObjParser.VertexAttributes> vector0 = new Vector<PolygonObjParser.VertexAttributes>();
      PolygonObjParser.VertexAttributes polygonObjParser_VertexAttributes0 = new PolygonObjParser.VertexAttributes(575, 575, 575);
      vector0.add(polygonObjParser_VertexAttributes0);
      vector0.add(polygonObjParser_VertexAttributes0);
      PolygonObjParser.Face polygonObjParser_Face0 = new PolygonObjParser.Face(vector0);
      vector0.add(polygonObjParser_VertexAttributes0);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      IntFunction<Vector3D> intFunction0 = (IntFunction<Vector3D>) mock(IntFunction.class, new ViolatedAssumptionAnswer());
      doReturn(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0).when(intFunction0).apply(anyInt());
      List<Vector3D> list0 = polygonObjParser_Face0.getVerticesCounterClockwise(vector3D_Unit0, intFunction0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector<PolygonObjParser.VertexAttributes> vector0 = new Vector<PolygonObjParser.VertexAttributes>();
      PolygonObjParser.VertexAttributes polygonObjParser_VertexAttributes0 = new PolygonObjParser.VertexAttributes(1486, 1486, (-133));
      vector0.add(polygonObjParser_VertexAttributes0);
      PolygonObjParser.Face polygonObjParser_Face0 = new PolygonObjParser.Face(vector0);
      IntFunction<Vector3D> intFunction0 = (IntFunction<Vector3D>) mock(IntFunction.class, new ViolatedAssumptionAnswer());
      Vector3D vector3D0 = polygonObjParser_Face0.getDefinedCompositeNormal(intFunction0);
      assertNull(vector3D0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8");
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      polygonObjParser0.handleKeyword("v");
      // Undeclared exception!
      try { 
        polygonObjParser0.readFace();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Parsing failed at line 1, column 1: vertex index must evaluate to be within the range [1, 1] but was 8
         //
         verifyException("org.apache.commons.geometry.io.core.internal.GeometryIOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-2x6A46}{1*n\"N8vF");
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      // Undeclared exception!
      try { 
        polygonObjParser0.readFace();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Parsing failed at line 1, column 1: vertex index cannot be used because no values of that type have been defined
         //
         verifyException("org.apache.commons.geometry.io.core.internal.GeometryIOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1o<9Av4");
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      polygonObjParser0.handleKeyword("v");
      // Undeclared exception!
      try { 
        polygonObjParser0.readFace();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Parsing failed at line 1, column 2: expected integer but found empty token followed by [o]
         //
         verifyException("org.apache.commons.geometry.io.core.internal.GeometryIOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1o<9Av4");
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      // Undeclared exception!
      try { 
        polygonObjParser0.readFace();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Parsing failed at line 1, column 1: vertex index cannot be used because no values of that type have been defined
         //
         verifyException("org.apache.commons.geometry.io.core.internal.GeometryIOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1o<9Av4");
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      polygonObjParser0.handleKeyword("1o<9Av4");
      assertEquals(0, polygonObjParser0.getVertexCount());
      assertEquals(0, polygonObjParser0.getVertexNormalCount());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("vt");
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      polygonObjParser0.setFailOnNonPolygonKeywords(true);
      polygonObjParser0.handleKeyword("vt");
      assertTrue(polygonObjParser0.isFailOnNonPolygonKeywords());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("vt");
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      polygonObjParser0.nextKeyword();
      // Undeclared exception!
      try { 
        polygonObjParser0.readFace();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Parsing failed at line 1, column 3: face must contain at least 3 vertices but found only 0
         //
         verifyException("org.apache.commons.geometry.io.core.internal.GeometryIOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PolygonObjParser.VertexAttributes polygonObjParser_VertexAttributes0 = new PolygonObjParser.VertexAttributes(1514, 1514, 1514);
      int int0 = polygonObjParser_VertexAttributes0.getTextureIndex();
      assertEquals(1514, int0);
      assertEquals(1514, polygonObjParser_VertexAttributes0.getVertexIndex());
      assertEquals(1514, polygonObjParser_VertexAttributes0.getNormalIndex());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector<PolygonObjParser.VertexAttributes> vector0 = new Vector<PolygonObjParser.VertexAttributes>();
      PolygonObjParser.VertexAttributes polygonObjParser_VertexAttributes0 = new PolygonObjParser.VertexAttributes(1514, 1514, 1514);
      vector0.add(polygonObjParser_VertexAttributes0);
      assertEquals(1514, polygonObjParser_VertexAttributes0.getTextureIndex());
      assertEquals(1514, polygonObjParser_VertexAttributes0.getNormalIndex());
      
      PolygonObjParser.Face polygonObjParser_Face0 = new PolygonObjParser.Face(vector0);
      int[] intArray0 = polygonObjParser_Face0.getVertexIndices();
      assertArrayEquals(new int[] {1514}, intArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<PolygonObjParser.VertexAttributes> linkedList0 = new LinkedList<PolygonObjParser.VertexAttributes>();
      PolygonObjParser.Face polygonObjParser_Face0 = new PolygonObjParser.Face(linkedList0);
      IntFunction<Vector3D> intFunction0 = (IntFunction<Vector3D>) mock(IntFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Vector3D) null).when(intFunction0).apply(anyInt());
      PolygonObjParser.VertexAttributes polygonObjParser_VertexAttributes0 = new PolygonObjParser.VertexAttributes(0, (-1999410896), 0);
      linkedList0.add(polygonObjParser_VertexAttributes0);
      // Undeclared exception!
      try { 
        polygonObjParser_Face0.getDefinedCompositeNormal(intFunction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<PolygonObjParser.VertexAttributes> linkedList0 = new LinkedList<PolygonObjParser.VertexAttributes>();
      PolygonObjParser.Face polygonObjParser_Face0 = new PolygonObjParser.Face(linkedList0);
      int[] intArray0 = polygonObjParser_Face0.getTextureIndices();
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vector<PolygonObjParser.VertexAttributes> vector0 = new Vector<PolygonObjParser.VertexAttributes>();
      PolygonObjParser.Face polygonObjParser_Face0 = new PolygonObjParser.Face(vector0);
      int[] intArray0 = polygonObjParser_Face0.getNormalIndices();
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector<PolygonObjParser.VertexAttributes> vector0 = new Vector<PolygonObjParser.VertexAttributes>();
      PolygonObjParser.Face polygonObjParser_Face0 = new PolygonObjParser.Face(vector0);
      List<PolygonObjParser.VertexAttributes> list0 = polygonObjParser_Face0.getVertexAttributes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Stack<PolygonObjParser.VertexAttributes> stack0 = new Stack<PolygonObjParser.VertexAttributes>();
      PolygonObjParser.Face polygonObjParser_Face0 = new PolygonObjParser.Face(stack0);
      IntFunction<Vector3D> intFunction0 = (IntFunction<Vector3D>) mock(IntFunction.class, new ViolatedAssumptionAnswer());
      List<Vector3D> list0 = polygonObjParser_Face0.getVertices(intFunction0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("n");
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      boolean boolean0 = polygonObjParser0.isFailOnNonPolygonKeywords();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e2 Prb%J:c");
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      polygonObjParser0.setFailOnNonPolygonKeywords(true);
      // Undeclared exception!
      try { 
        polygonObjParser0.handleKeyword("e2 Prb%J:c");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Parsing failed at line 1, column 1: expected keyword to be one of [f, g, mtllib, o, s, usemtl, v, vn, vt] but was [e2 Prb%J:c]
         //
         verifyException("org.apache.commons.geometry.io.core.internal.GeometryIOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("n");
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      int int0 = polygonObjParser0.getVertexCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("n");
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      int int0 = polygonObjParser0.getTextureCoordinateCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("n");
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      int int0 = polygonObjParser0.getVertexNormalCount();
      assertEquals(0, int0);
  }
}
