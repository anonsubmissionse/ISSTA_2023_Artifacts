/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 01:37:48 GMT 2022
 */

package org.apache.commons.geometry.spherical.twod;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.stream.Stream;
import org.apache.commons.geometry.core.partitioning.Hyperplane;
import org.apache.commons.geometry.core.partitioning.Split;
import org.apache.commons.geometry.core.partitioning.SplitLocation;
import org.apache.commons.geometry.euclidean.threed.Vector3D;
import org.apache.commons.geometry.spherical.twod.ConvexArea2S;
import org.apache.commons.geometry.spherical.twod.GreatArc;
import org.apache.commons.geometry.spherical.twod.GreatArcPath;
import org.apache.commons.geometry.spherical.twod.GreatCircle;
import org.apache.commons.geometry.spherical.twod.Point2S;
import org.apache.commons.geometry.spherical.twod.RegionBSPTree2S;
import org.apache.commons.numbers.core.Precision;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RegionBSPTree2S_ESTest extends RegionBSPTree2S_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConvexArea2S convexArea2S0 = ConvexArea2S.full();
      RegionBSPTree2S regionBSPTree2S0 = convexArea2S0.toTree();
      RegionBSPTree2S.RegionNode2S regionBSPTree2S_RegionNode2S0 = regionBSPTree2S0.createNode();
      RegionBSPTree2S.RegionNode2S regionBSPTree2S_RegionNode2S1 = regionBSPTree2S_RegionNode2S0.getSelf();
      assertFalse(regionBSPTree2S_RegionNode2S1.isOutside());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RegionBSPTree2S regionBSPTree2S0 = RegionBSPTree2S.empty();
      regionBSPTree2S0.invalidate();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RegionBSPTree2S regionBSPTree2S0 = RegionBSPTree2S.full();
      List<ConvexArea2S> list0 = regionBSPTree2S0.toConvex();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RegionBSPTree2S regionBSPTree2S0 = RegionBSPTree2S.full();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      Split<RegionBSPTree2S> split0 = regionBSPTree2S0.split(greatCircle0);
      assertEquals(SplitLocation.BOTH, split0.getLocation());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedHashSet<GreatArc> linkedHashSet0 = new LinkedHashSet<GreatArc>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatCircle0.span();
      linkedHashSet0.add(greatArc0);
      RegionBSPTree2S regionBSPTree2S0 = RegionBSPTree2S.from((Iterable<GreatArc>) linkedHashSet0, true);
      Point2S point2S0 = Point2S.PLUS_K;
      Point2S point2S1 = regionBSPTree2S0.project(point2S0);
      assertEquals(0.0, point2S1.getAzimuth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashSet<GreatArc> hashSet0 = new HashSet<GreatArc>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatCircle0.span();
      hashSet0.add(greatArc0);
      RegionBSPTree2S regionBSPTree2S0 = RegionBSPTree2S.from((Iterable<GreatArc>) hashSet0, true);
      Point2S point2S0 = greatCircle0.getPolePoint();
      Point2S point2S1 = regionBSPTree2S0.project(point2S0);
      assertEquals(1.5707963267948966, point2S1.getPolar(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashSet<GreatArc> hashSet0 = new HashSet<GreatArc>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.MINUS_Y;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit1, vector3D_Unit1, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatCircle0.span();
      hashSet0.add(greatArc0);
      RegionBSPTree2S regionBSPTree2S0 = RegionBSPTree2S.from((Iterable<GreatArc>) hashSet0, true);
      Point2S point2S0 = Point2S.PLUS_J;
      Point2S point2S1 = regionBSPTree2S0.project(point2S0);
      assertFalse(point2S1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashSet<GreatArc> hashSet0 = new HashSet<GreatArc>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatCircle0.span();
      hashSet0.add(greatArc0);
      RegionBSPTree2S regionBSPTree2S0 = RegionBSPTree2S.from((Iterable<GreatArc>) hashSet0, true);
      List<GreatArc> list0 = regionBSPTree2S0.getBoundaries();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashSet<GreatArc> hashSet0 = new HashSet<GreatArc>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatCircle0.span();
      hashSet0.add(greatArc0);
      RegionBSPTree2S regionBSPTree2S0 = RegionBSPTree2S.from((Iterable<GreatArc>) hashSet0, true);
      // Undeclared exception!
      try { 
        regionBSPTree2S0.project((Point2S) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.spherical.twod.GreatCircle", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashSet<GreatArc> hashSet0 = new HashSet<GreatArc>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatCircle0.span();
      hashSet0.add(greatArc0);
      RegionBSPTree2S regionBSPTree2S0 = RegionBSPTree2S.from((Iterable<GreatArc>) hashSet0, true);
      // Undeclared exception!
      try { 
        regionBSPTree2S0.getBoundaryPaths();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.spherical.twod.AbstractGreatArcConnector$ConnectableGreatArc", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        RegionBSPTree2S.from((Iterable<GreatArc>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.core.partitioning.bsp.AbstractRegionBSPTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        RegionBSPTree2S.from((Iterable<GreatArc>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.core.partitioning.bsp.AbstractRegionBSPTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashSet<GreatArc> hashSet0 = new HashSet<GreatArc>();
      RegionBSPTree2S regionBSPTree2S0 = RegionBSPTree2S.from((Iterable<GreatArc>) hashSet0, true);
      Iterable<GreatArc> iterable0 = regionBSPTree2S0.boundaries();
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RegionBSPTree2S regionBSPTree2S0 = new RegionBSPTree2S(false);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RegionBSPTree2S regionBSPTree2S0 = RegionBSPTree2S.full();
      RegionBSPTree2S.RegionNode2S regionBSPTree2S_RegionNode2S0 = regionBSPTree2S0.createNode();
      ConvexArea2S convexArea2S0 = regionBSPTree2S_RegionNode2S0.getNodeRegion();
      assertFalse(convexArea2S0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RegionBSPTree2S regionBSPTree2S0 = RegionBSPTree2S.empty();
      boolean boolean0 = regionBSPTree2S0.isInfinite();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RegionBSPTree2S regionBSPTree2S0 = RegionBSPTree2S.full();
      boolean boolean0 = regionBSPTree2S0.isFinite();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RegionBSPTree2S regionBSPTree2S0 = RegionBSPTree2S.empty();
      Stream<GreatArc> stream0 = regionBSPTree2S0.boundaryStream();
      assertNotNull(stream0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RegionBSPTree2S regionBSPTree2S0 = RegionBSPTree2S.empty();
      List<ConvexArea2S> list0 = regionBSPTree2S0.toConvex();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RegionBSPTree2S regionBSPTree2S0 = RegionBSPTree2S.full();
      List<GreatArc> list0 = regionBSPTree2S0.getBoundaries();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RegionBSPTree2S regionBSPTree2S0 = RegionBSPTree2S.empty();
      // Undeclared exception!
      try { 
        regionBSPTree2S0.split((Hyperplane<Point2S>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.core.partitioning.bsp.AbstractBSPTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RegionBSPTree2S regionBSPTree2S0 = new RegionBSPTree2S();
      regionBSPTree2S0.getBoundaryPaths();
      List<GreatArcPath> list0 = regionBSPTree2S0.getBoundaryPaths();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RegionBSPTree2S regionBSPTree2S0 = new RegionBSPTree2S();
      RegionBSPTree2S regionBSPTree2S1 = regionBSPTree2S0.copy();
      assertNotSame(regionBSPTree2S1, regionBSPTree2S0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RegionBSPTree2S regionBSPTree2S0 = new RegionBSPTree2S();
      RegionBSPTree2S regionBSPTree2S1 = regionBSPTree2S0.toTree();
      assertSame(regionBSPTree2S0, regionBSPTree2S1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashSet<GreatArc> hashSet0 = new HashSet<GreatArc>();
      RegionBSPTree2S regionBSPTree2S0 = RegionBSPTree2S.from((Iterable<GreatArc>) hashSet0);
      assertNotNull(regionBSPTree2S0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashSet<GreatArc> hashSet0 = new HashSet<GreatArc>();
      RegionBSPTree2S regionBSPTree2S0 = RegionBSPTree2S.from((Iterable<GreatArc>) hashSet0, true);
      Point2S point2S0 = regionBSPTree2S0.project((Point2S) null);
      assertNull(point2S0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashSet<GreatArc> hashSet0 = new HashSet<GreatArc>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatCircle0.span();
      boolean boolean0 = hashSet0.add(greatArc0);
      RegionBSPTree2S regionBSPTree2S0 = RegionBSPTree2S.from((Iterable<GreatArc>) hashSet0, true);
      boolean boolean1 = regionBSPTree2S0.isFinite();
      assertTrue(boolean1 == boolean0);
  }
}
