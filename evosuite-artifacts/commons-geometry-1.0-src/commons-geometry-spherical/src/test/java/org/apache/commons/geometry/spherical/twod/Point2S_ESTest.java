/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 01:35:23 GMT 2022
 */

package org.apache.commons.geometry.spherical.twod;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.geometry.euclidean.threed.Vector3D;
import org.apache.commons.geometry.spherical.twod.Point2S;
import org.apache.commons.numbers.core.Precision;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Point2S_ESTest extends Point2S_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_K;
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Point2S point2S1 = Point2S.from(vector3D_Unit0);
      boolean boolean0 = point2S0.equals(point2S1);
      assertFalse(point2S1.equals((Object)point2S0));
      assertFalse(boolean0);
      assertEquals(0.0, point2S1.getAzimuth(), 0.01);
      assertEquals(1.5707963267948966, point2S1.getPolar(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Point2S point2S0 = Point2S.PLUS_I;
      Point2S point2S1 = Point2S.PLUS_J;
      boolean boolean0 = point2S0.equals(point2S1);
      assertFalse(point2S1.equals((Object)point2S0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Point2S point2S0 = Point2S.PLUS_K;
      Point2S point2S1 = point2S0.PLUS_K.slerp(point2S0, 0.0);
      assertEquals(0.0, point2S1.getAzimuth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_K;
      Point2S point2S1 = point2S0.slerp(point2S0, 0.0);
      assertTrue(point2S1.equals((Object)point2S0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_I;
      Point2S point2S1 = point2S0.PLUS_K.slerp(point2S0, 2065.170361);
      assertEquals(1.8383987598236349, point2S1.getPolar(), 0.01);
      assertEquals(3.141592653589793, point2S1.getAzimuth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Point2S point2S0 = Point2S.parse("(0.0, 0.0)");
      assertEquals(0.0, point2S0.getAzimuth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Point2S point2S0 = Point2S.parse("(NaN, NaN)");
      assertFalse(point2S0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Point2S point2S0 = Point2S.of(1.5707963267948966, 0.0);
      assertEquals(1.5707963267948966, point2S0.getAzimuth(), 0.01);
      assertEquals(0.0, point2S0.getPolar(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Point2S point2S0 = Point2S.of(0.0, 1.5707963267948966);
      assertEquals(0.0, point2S0.getAzimuth(), 0.01);
      assertEquals(1.5707963267948966, point2S0.getPolar(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Point2S point2S0 = Point2S.of((-1.0), Double.NaN);
      Vector3D.Unit vector3D_Unit0 = point2S0.getVector();
      assertNull(vector3D_Unit0);
      assertEquals(Double.NaN, point2S0.getPolar(), 0.01);
      assertEquals(5.283185307179586, point2S0.getAzimuth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_K;
      Vector3D.Unit vector3D_Unit0 = point2S0.getVector();
      assertFalse(vector3D_Unit0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Point2S point2S0 = Point2S.of(484.757, 484.757);
      Vector3D.Unit vector3D_Unit0 = point2S0.getVector();
      assertEquals(0.951731347171858, point2S0.getAzimuth(), 0.01);
      assertEquals(0.6632821850583178, vector3D_Unit0.getY(), 0.01);
      assertEquals(0.9517313471718474, point2S0.getPolar(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_I;
      Vector3D.Unit vector3D_Unit0 = point2S0.getVector();
      assertEquals(3, vector3D_Unit0.getDimension());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Point2S point2S0 = Point2S.PLUS_K;
      double double0 = point2S0.getPolar();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Point2S point2S0 = Point2S.of(3997.1697075, Double.NEGATIVE_INFINITY);
      double double0 = point2S0.getPolar();
      assertEquals(1.0638521337832572, point2S0.getAzimuth(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Point2S point2S0 = Point2S.of(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      double double0 = point2S0.getAzimuth();
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, point2S0.getPolar(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Point2S point2S0 = Point2S.from(vector3D_Unit0);
      assertEquals(0.0, point2S0.getAzimuth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_I;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      boolean boolean0 = point2S0.PLUS_I.eq(point2S0, precision_DoubleEquivalence0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_I;
      Point2S point2S1 = Point2S.of(484.757, 484.757);
      double double0 = Point2S.distance(point2S1, point2S0);
      assertEquals(0.951731347171858, point2S1.getAzimuth(), 0.01);
      assertEquals(0.9517313471718474, point2S1.getPolar(), 0.01);
      assertEquals(2.0630208385044164, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_J;
      double double0 = point2S0.MINUS_I.distance(point2S0);
      assertEquals(1.5707963267948966, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_K;
      Point2S point2S1 = point2S0.antipodal();
      double double0 = point2S1.getAzimuth();
      assertEquals(0.0, point2S1.getPolar(), 0.01);
      assertEquals(3.141592653589793, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Point2S point2S0 = Point2S.PLUS_I;
      // Undeclared exception!
      try { 
        point2S0.MINUS_I.slerp(point2S0, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Illegal norm: NaN
         //
         verifyException("org.apache.commons.numbers.quaternion.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        Point2S.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.core.internal.SimpleTupleFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        Point2S.from((Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.SphericalCoordinates", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        Point2S.from(vector3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: Infinity
         //
         verifyException("org.apache.commons.geometry.euclidean.internal.Vectors", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_K;
      // Undeclared exception!
      try { 
        point2S0.PLUS_I.eq(point2S0, (Precision.DoubleEquivalence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.spherical.twod.Point2S", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Point2S point2S0 = Point2S.NaN;
      // Undeclared exception!
      try { 
        Point2S.distance(point2S0, point2S0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.spherical.twod.Point2S", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Point2S point2S0 = Point2S.PLUS_I;
      // Undeclared exception!
      try { 
        point2S0.distance((Point2S) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.spherical.twod.Point2S", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_J;
      boolean boolean0 = point2S0.isNaN();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Point2S point2S0 = Point2S.PLUS_I;
      double double0 = point2S0.getPolar();
      assertEquals(1.5707963267948966, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_I;
      double double0 = point2S0.distance(point2S0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Point2S point2S0 = Point2S.PLUS_I;
      double double0 = point2S0.getAzimuth();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Point2S point2S0 = Point2S.PLUS_I;
      double double0 = Point2S.distance(point2S0, point2S0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Point2S point2S0 = Point2S.PLUS_K;
      Point2S point2S1 = Point2S.PLUS_I;
      boolean boolean0 = point2S0.equals(point2S1);
      assertFalse(point2S1.equals((Object)point2S0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_K;
      Point2S point2S1 = Point2S.NaN;
      boolean boolean0 = point2S1.equals(point2S0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Point2S point2S0 = Point2S.NaN;
      Point2S point2S1 = Point2S.MINUS_J;
      boolean boolean0 = point2S1.equals(point2S0);
      assertFalse(point2S0.equals((Object)point2S1));
      assertTrue(point2S0.isNaN());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_I;
      Point2S point2S1 = point2S0.PLUS_I.antipodal();
      boolean boolean0 = point2S1.equals(point2S0);
      assertTrue(boolean0);
      assertFalse(point2S1.isNaN());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_I;
      boolean boolean0 = point2S0.equals(point2S0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_J;
      Object object0 = new Object();
      boolean boolean0 = point2S0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Point2S point2S0 = Point2S.NaN;
      point2S0.hashCode();
      assertTrue(point2S0.isNaN());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Point2S point2S0 = Point2S.of((-1.0), Double.NaN);
      boolean boolean0 = point2S0.isFinite();
      assertEquals(5.283185307179586, point2S0.getAzimuth(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_I;
      boolean boolean0 = point2S0.MINUS_K.isFinite();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Point2S point2S0 = Point2S.of((-1551.072971986405), (-1551.072971986405));
      boolean boolean0 = point2S0.NaN.isFinite();
      assertEquals(0.8737988869527271, point2S0.getAzimuth(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.8737988869528301, point2S0.getPolar(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Point2S point2S0 = Point2S.of((-1.4256995744312684), Double.NEGATIVE_INFINITY);
      boolean boolean0 = point2S0.isInfinite();
      assertEquals(Double.NEGATIVE_INFINITY, point2S0.getPolar(), 0.01);
      assertTrue(boolean0);
      assertEquals(4.857485732748318, point2S0.getAzimuth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_J;
      boolean boolean0 = point2S0.isInfinite();
      assertFalse(point2S0.isNaN());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Point2S point2S0 = Point2S.of(0.967072604488304, Double.NaN);
      boolean boolean0 = point2S0.isInfinite();
      assertEquals(0.967072604488304, point2S0.getAzimuth(), 0.01);
      assertFalse(boolean0);
      assertTrue(point2S0.isNaN());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Point2S point2S0 = Point2S.of(0.9999999999, Double.NaN);
      boolean boolean0 = point2S0.isNaN();
      assertEquals(0.9999999999, point2S0.getAzimuth(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_J;
      point2S0.MINUS_I.hashCode();
      assertFalse(point2S0.isNaN());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Point2S point2S0 = Point2S.NaN;
      boolean boolean0 = point2S0.isNaN();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_J;
      int int0 = point2S0.getDimension();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_J;
      Vector3D.Unit vector3D_Unit0 = point2S0.getVector();
      Point2S point2S1 = Point2S.from(vector3D_Unit0);
      assertEquals(4.71238898038469, point2S1.getAzimuth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        Point2S.parse("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse string \"\" at index 0: expected \"(\" but found \"\"
         //
         verifyException("org.apache.commons.geometry.core.internal.SimpleTupleFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_J;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      boolean boolean0 = point2S0.PLUS_K.eq(point2S0, precision_DoubleEquivalence0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Point2S point2S0 = Point2S.of((-1.4256995744312684), Double.NEGATIVE_INFINITY);
      // Undeclared exception!
      try { 
        point2S0.slerp(point2S0, Double.NEGATIVE_INFINITY);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.internal.Vectors", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Point2S point2S0 = Point2S.of(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      boolean boolean0 = point2S0.isInfinite();
      assertTrue(boolean0);
      assertEquals(Double.POSITIVE_INFINITY, point2S0.getAzimuth(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, point2S0.getPolar(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_J;
      String string0 = point2S0.PLUS_K.toString();
      assertEquals("(0.0, 0.0)", string0);
  }
}
