/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 01:37:32 GMT 2022
 */

package org.apache.commons.geometry.spherical.twod;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.geometry.core.Transform;
import org.apache.commons.geometry.core.partitioning.Split;
import org.apache.commons.geometry.core.partitioning.SplitLocation;
import org.apache.commons.geometry.euclidean.threed.Vector3D;
import org.apache.commons.geometry.euclidean.threed.rotation.AxisAngleSequence;
import org.apache.commons.geometry.euclidean.threed.rotation.AxisReferenceFrame;
import org.apache.commons.geometry.euclidean.threed.rotation.AxisSequence;
import org.apache.commons.geometry.euclidean.threed.rotation.QuaternionRotation;
import org.apache.commons.geometry.spherical.oned.AngularInterval;
import org.apache.commons.geometry.spherical.twod.GreatArc;
import org.apache.commons.geometry.spherical.twod.GreatCircle;
import org.apache.commons.geometry.spherical.twod.Point2S;
import org.apache.commons.geometry.spherical.twod.Transform2S;
import org.apache.commons.numbers.core.Precision;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GreatArc_ESTest extends GreatArc_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      GreatCircle greatCircle0 = mock(GreatCircle.class, new ViolatedAssumptionAnswer());
      doReturn((GreatCircle) null).when(greatCircle0).transform(nullable(org.apache.commons.geometry.core.Transform.class));
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.full();
      GreatArc greatArc0 = new GreatArc(greatCircle0, angularInterval_Convex0);
      Transform2S transform2S0 = Transform2S.createReflection((Vector3D) vector3D_Unit0);
      GreatArc greatArc1 = greatArc0.transform(transform2S0);
      assertFalse(greatArc1.equals((Object)greatArc0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatCircle0.arc((AngularInterval.Convex) null);
      AngularInterval.Convex angularInterval_Convex0 = greatArc0.getSubspaceRegion();
      assertNull(angularInterval_Convex0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.arc(4308.0, 0.0);
      AngularInterval.Convex angularInterval_Convex0 = greatArc0.getSubspaceRegion();
      assertFalse(angularInterval_Convex0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.arc((-32.68), (-32.68));
      AngularInterval.Convex angularInterval_Convex0 = greatArc0.getSubspaceRegion();
      assertFalse(angularInterval_Convex0.wrapsZero());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.arc((-32.68), (-32.68));
      Point2S point2S0 = greatArc0.getStartPoint();
      assertEquals(1.5707963267948966, point2S0.getPolar(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatCircle0.arc((AngularInterval.Convex) null);
      AngularInterval.Convex angularInterval_Convex0 = greatArc0.getInterval();
      assertNull(angularInterval_Convex0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(true, false).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      greatCircle0.vectorAt((-32.68));
      GreatArc greatArc0 = greatCircle0.arc((-32.68), (-32.68));
      greatArc0.getPrecision();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = greatArc0.getPrecision();
      // Undeclared exception!
      try { 
        AngularInterval.Convex.of(2882.58, (-4189.565223292961), precision_DoubleEquivalence1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Interval is not convex: [2,882.58, 2,885.301]
         //
         verifyException("org.apache.commons.geometry.spherical.oned.AngularInterval$Convex", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatCircle0.span();
      AngularInterval.Convex angularInterval_Convex0 = greatArc0.getInterval();
      assertFalse(angularInterval_Convex0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.arc((-32.68), (-32.68));
      Point2S point2S0 = greatArc0.getEndPoint();
      assertEquals(0.0, point2S0.getAzimuth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.PLUS_Y;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit1, precision_DoubleEquivalence0);
      Point2S point2S0 = Point2S.MINUS_K;
      Transform2S transform2S0 = Transform2S.createReflection(point2S0);
      GreatCircle greatCircle1 = greatCircle0.transform(transform2S0);
      GreatArc greatArc0 = greatCircle1.arc(point2S0, point2S0);
      Point2S point2S1 = greatArc0.getEndPoint();
      assertEquals(3.141592653589793, point2S1.getPolar(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.span();
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.ZXY;
      AxisAngleSequence axisAngleSequence0 = new AxisAngleSequence(axisReferenceFrame0, axisSequence0, 1069.016021, 1069.016021, 1069.016021);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      Transform2S transform2S0 = Transform2S.createRotation(quaternionRotation0);
      // Undeclared exception!
      try { 
        greatArc0.transform(transform2S0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException("org.apache.commons.geometry.euclidean.internal.Vectors", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatCircle0.arc((AngularInterval.Convex) null);
      // Undeclared exception!
      try { 
        greatArc0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.spherical.twod.GreatCircleSubset", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatCircle0.span();
      // Undeclared exception!
      try { 
        greatArc0.split(greatCircle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, true, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.PLUS_Y;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit1, precision_DoubleEquivalence0);
      Point2S point2S0 = Point2S.MINUS_K;
      Transform2S transform2S0 = Transform2S.createReflection(point2S0);
      GreatCircle greatCircle1 = greatCircle0.transform(transform2S0);
      GreatArc greatArc0 = greatCircle1.arc(point2S0, point2S0);
      // Undeclared exception!
      try { 
        greatArc0.split(greatCircle0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Interval is not convex: [1.571, 4.712]
         //
         verifyException("org.apache.commons.geometry.spherical.oned.AngularInterval$Convex", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GreatArc greatArc0 = new GreatArc((GreatCircle) null, (AngularInterval.Convex) null);
      // Undeclared exception!
      try { 
        greatArc0.getStartPoint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.spherical.twod.GreatArc", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatCircle0.arc((AngularInterval.Convex) null);
      // Undeclared exception!
      try { 
        greatArc0.getMidPoint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.spherical.twod.GreatArc", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GreatArc greatArc0 = new GreatArc((GreatCircle) null, (AngularInterval.Convex) null);
      // Undeclared exception!
      try { 
        greatArc0.getEndPoint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.spherical.twod.GreatArc", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.arc((-32.68), (-32.68));
      Point2S point2S0 = greatArc0.getStartPoint();
      assertFalse(point2S0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatCircle0.span();
      AngularInterval.Convex angularInterval_Convex0 = greatArc0.getSubspaceRegion();
      assertEquals(0.0, angularInterval_Convex0.getBoundarySize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      doReturn(false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.PLUS_Y;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit1, precision_DoubleEquivalence0);
      Point2S point2S0 = Point2S.MINUS_K;
      Transform2S transform2S0 = Transform2S.createReflection(point2S0);
      GreatCircle greatCircle1 = greatCircle0.transform(transform2S0);
      GreatArc greatArc0 = greatCircle1.arc(point2S0, point2S0);
      Split<GreatArc> split0 = greatArc0.split(greatCircle0);
      assertEquals(SplitLocation.PLUS, split0.getLocation());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, true, true, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.PLUS_Y;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit1, precision_DoubleEquivalence0);
      Point2S point2S0 = Point2S.MINUS_K;
      Transform2S transform2S0 = Transform2S.createReflection(point2S0);
      GreatCircle greatCircle1 = greatCircle0.transform(transform2S0);
      GreatArc greatArc0 = greatCircle1.arc(point2S0, point2S0);
      Split<GreatArc> split0 = greatArc0.split(greatCircle0);
      assertEquals(SplitLocation.BOTH, split0.getLocation());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.arc((-32.68), (-32.68));
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = greatArc0.getPrecision();
      GreatCircle greatCircle1 = new GreatCircle(vector3D_Unit1, vector3D_Unit1, vector3D_Unit0, precision_DoubleEquivalence1);
      Split<GreatArc> split0 = greatArc0.split(greatCircle1);
      assertEquals(SplitLocation.MINUS, split0.getLocation());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.span();
      Split<GreatArc> split0 = greatArc0.split(greatCircle0);
      assertEquals(SplitLocation.NEITHER, split0.getLocation());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.arc((-32.68), (-32.68));
      Point2S point2S0 = greatArc0.getMidPoint();
      assertFalse(point2S0.isNaN());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatCircle0.span();
      Point2S point2S0 = greatArc0.getMidPoint();
      assertNull(point2S0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatCircle0.span();
      Point2S point2S0 = greatArc0.getEndPoint();
      assertNull(point2S0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatCircle0.span();
      Point2S point2S0 = greatArc0.getStartPoint();
      assertNull(point2S0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatCircle0.span();
      GreatArc greatArc1 = greatArc0.reverse();
      assertFalse(greatArc1.equals((Object)greatArc0));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.arc((-32.68), (-32.68));
      // Undeclared exception!
      try { 
        greatArc0.transform((Transform<Point2S>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.spherical.twod.GreatCircle", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatCircle0.span();
      String string0 = greatArc0.toString();
      assertEquals("GreatArc[full= true, circle= GreatCircle[pole= (-1.0, 0.0, 0.0), u= (-1.0, 0.0, 0.0), v= (-1.0, 0.0, 0.0)]", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.full();
      GreatArc greatArc0 = new GreatArc((GreatCircle) null, angularInterval_Convex0);
      // Undeclared exception!
      try { 
        greatArc0.reverse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.spherical.twod.GreatArc", e);
      }
  }
}
