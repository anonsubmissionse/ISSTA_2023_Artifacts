/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 05 20:23:57 GMT 2022
 */

package org.joda.time.tz;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FixedDateTimeZone_ESTest extends FixedDateTimeZone_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("@", "@", 476, (-2770));
      FixedDateTimeZone fixedDateTimeZone1 = new FixedDateTimeZone("@", "org/joda/time/tz/data", (-2770), (-2770));
      boolean boolean0 = fixedDateTimeZone1.equals(fixedDateTimeZone0);
      assertFalse(fixedDateTimeZone0.equals((Object)fixedDateTimeZone1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("org.joda.time.field.AbstractPartialFieldProperty", "=h\"", 37, 1110);
      FixedDateTimeZone fixedDateTimeZone1 = new FixedDateTimeZone("org.joda.time.field.AbstractPartialFieldProperty", "3", 37, 2225);
      boolean boolean0 = fixedDateTimeZone0.equals(fixedDateTimeZone1);
      assertFalse(boolean0);
      assertFalse(fixedDateTimeZone1.equals((Object)fixedDateTimeZone0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("org.joda.time.field.AbstractPartialFieldProperty", "", 0, (-523));
      TimeZone timeZone0 = fixedDateTimeZone0.toTimeZone();
      assertEquals(0, timeZone0.getRawOffset());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("", "", 0, (-523));
      TimeZone timeZone0 = fixedDateTimeZone0.toTimeZone();
      assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("#y]+;@", "#y]+;@", (-19), 0);
      TimeZone timeZone0 = fixedDateTimeZone0.toTimeZone();
      assertEquals((-19), timeZone0.getRawOffset());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("org.joda.time.base.BasePeriod", "org.joda.time.tz.FixedDateTimeZone", 0, 0);
      long long0 = fixedDateTimeZone0.previousTransition(0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("oq(=F{c:/:Uss!kk", "oq(=F{c:/:Uss!kk", 1, 0);
      long long0 = fixedDateTimeZone0.previousTransition(1141L);
      assertEquals(1141L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("org.joda.time.tz.FixedDateTimeZone", "org.joda.time.tz.FixedDateTimeZone", (-3188), (-3188));
      long long0 = fixedDateTimeZone0.nextTransition(0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("", "", 0, (-523));
      long long0 = fixedDateTimeZone0.nextTransition(3600000L);
      assertEquals(3600000L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("#y]+;@", "#y]+;@", (-19), 0);
      int int0 = fixedDateTimeZone0.getStandardOffset(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("", "", 0, (-523));
      int int0 = fixedDateTimeZone0.getStandardOffset(0L);
      assertEquals((-523), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("F%v1l@SQ#", "F%v1l@SQ#", 0, 1);
      int int0 = fixedDateTimeZone0.getOffsetFromLocal((-2488L));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("org.joda.time.tz.FixedDateTimeZone", "org.joda.time.tz.FixedDateTimeZone", (-3188), (-3188));
      int int0 = fixedDateTimeZone0.getOffsetFromLocal(2145L);
      assertEquals((-3188), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("", "", 0, (-523));
      int int0 = fixedDateTimeZone0.getOffset((-287L));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("oq(=F{c:/:Uss!kk", "oq(=F{c:/:Uss!kk", 1, 0);
      int int0 = fixedDateTimeZone0.getOffset((long) 0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("#y]+;@", "#y]+;@", (-19), 0);
      int int0 = fixedDateTimeZone0.getOffset(0L);
      assertEquals((-19), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("", (String) null, 6, 6);
      String string0 = fixedDateTimeZone0.getNameKey((-2588L));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("", "", 476, (-2770));
      String string0 = fixedDateTimeZone0.getNameKey((-2493L));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = null;
      try {
        fixedDateTimeZone0 = new FixedDateTimeZone((String) null, "", (-3323), (-3323));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Id must not be null
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("P$MDChaQh(M$eeG", "P$MDChaQh(M$eeG", 3345, 3345);
      FixedDateTimeZone fixedDateTimeZone1 = new FixedDateTimeZone("P$MDChaQh(M$eeG", "#t. 5-Po5:UAQzp", 3345, 3345);
      boolean boolean0 = fixedDateTimeZone0.equals(fixedDateTimeZone1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("", "", 476, (-2770));
      boolean boolean0 = fixedDateTimeZone0.equals(fixedDateTimeZone0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("!", "org.joda.time.tz.FixedDateTimeZone", 1513, 1513);
      int int0 = fixedDateTimeZone0.getStandardOffset((-3721L));
      assertEquals(1513, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("+", "+![}/l6Y'onjkl", 292278993, (-1373));
      fixedDateTimeZone0.hashCode();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("5", "5", 476, (-4142));
      String string0 = fixedDateTimeZone0.getNameKey((-4142));
      assertEquals("5", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("5", "5", 476, (-4142));
      FixedDateTimeZone fixedDateTimeZone1 = new FixedDateTimeZone("5", "org/joda/time/tz/data", (-4142), (-4142));
      boolean boolean0 = fixedDateTimeZone0.equals(fixedDateTimeZone1);
      assertFalse(boolean0);
      assertFalse(fixedDateTimeZone1.equals((Object)fixedDateTimeZone0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("NeGiy>|}kD3]Iw$;oC", "NeGiy>|}kD3]Iw$;oC", 142, 1135);
      FixedDateTimeZone fixedDateTimeZone1 = new FixedDateTimeZone("NeGiy>|}kD3]Iw$;oC", "org/joda/time/tz/data", 142, 142);
      boolean boolean0 = fixedDateTimeZone0.equals(fixedDateTimeZone1);
      assertFalse(fixedDateTimeZone1.equals((Object)fixedDateTimeZone0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("5", "5", 476, (-4142));
      FixedDateTimeZone fixedDateTimeZone1 = new FixedDateTimeZone("6", "org/joda/time/tz/data", 476, (-4142));
      boolean boolean0 = fixedDateTimeZone0.equals(fixedDateTimeZone1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("+11:00", "+11:00", 3003, 1489);
      Object object0 = new Object();
      boolean boolean0 = fixedDateTimeZone0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("-17:00", "-17:00", (-3), (-3));
      TimeZone timeZone0 = fixedDateTimeZone0.toTimeZone();
      assertEquals("GMT-17:00", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("0I5-@@", "0I5-@@", 2157, 2157);
      TimeZone timeZone0 = fixedDateTimeZone0.toTimeZone();
      assertEquals("java.util.SimpleTimeZone[id=0I5-@@,offset=2157,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("+11:00", "+11:00", 3003, 1489);
      TimeZone timeZone0 = fixedDateTimeZone0.toTimeZone();
      assertEquals("GMT+11:00", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("DhZDuWR0m8hopr", "DhZDuWR0m8hopr", (-37), (-37));
      long long0 = fixedDateTimeZone0.previousTransition((-37));
      assertEquals((-37L), long0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("0I5-@@", "0I5-@@", 2157, 2157);
      boolean boolean0 = fixedDateTimeZone0.isFixed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("5", "5", 476, (-4142));
      int int0 = fixedDateTimeZone0.getOffsetFromLocal((-4142));
      assertEquals(476, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("5", "5", 476, (-4142));
      long long0 = fixedDateTimeZone0.nextTransition((-4142));
      assertEquals((-4142L), long0);
  }
}
