/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 05 20:29:47 GMT 2022
 */

package org.joda.time.field;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DurationFieldType;
import org.joda.time.field.PreciseDurationField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PreciseDurationField_ESTest extends PreciseDurationField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, (-409L));
      preciseDurationField0.hashCode();
      assertEquals((-409L), preciseDurationField0.getUnitMillis());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 4089L);
      PreciseDurationField preciseDurationField1 = new PreciseDurationField(durationFieldType0, 2091L);
      boolean boolean0 = preciseDurationField0.equals(preciseDurationField1);
      assertFalse(boolean0);
      assertEquals(2091L, preciseDurationField1.getUnitMillis());
      assertFalse(preciseDurationField1.equals((Object)preciseDurationField0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 4089L);
      long long0 = preciseDurationField0.getValueAsLong(0L, 35L);
      assertEquals(4089L, preciseDurationField0.getUnitMillis());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 60L);
      long long0 = preciseDurationField0.getValueAsLong((-2394L), 60L);
      assertEquals((-39L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 0L);
      long long0 = preciseDurationField0.getUnitMillis();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, (-493L));
      long long0 = preciseDurationField0.getUnitMillis();
      assertEquals((-493L), long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 945L);
      preciseDurationField0.getMillis(0L, 0L);
      assertEquals(945L, preciseDurationField0.getUnitMillis());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, (-409L));
      long long0 = preciseDurationField0.getMillis((-409L), (-409L));
      assertEquals(167281L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 0L);
      long long0 = preciseDurationField0.getMillis((-490), 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 632L);
      long long0 = preciseDurationField0.getMillis((-191), 376L);
      assertEquals((-120712L), long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 632L);
      long long0 = preciseDurationField0.getDifferenceAsLong(15778800000L, 0L);
      assertEquals(24966455L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 1821L);
      long long0 = preciseDurationField0.getDifferenceAsLong((-2860L), (-1));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 945L);
      preciseDurationField0.add(0L, 0L);
      assertEquals(945L, preciseDurationField0.getUnitMillis());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 4089L);
      long long0 = preciseDurationField0.add((-1L), (-2720L));
      assertEquals((-11122081L), long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 0L);
      long long0 = preciseDurationField0.add(0L, 1);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 1821L);
      long long0 = preciseDurationField0.add(0L, (-1));
      assertEquals((-1821L), long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 0L);
      // Undeclared exception!
      try { 
        preciseDurationField0.getValueAsLong(0L, 1L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.field.PreciseDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 30617280288L);
      // Undeclared exception!
      try { 
        preciseDurationField0.getMillis(30617280288L, 30617280288L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 30617280288 * 30617280288
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 0L);
      // Undeclared exception!
      try { 
        preciseDurationField0.getDifferenceAsLong(2310L, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.field.PreciseDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 15778800000L);
      // Undeclared exception!
      try { 
        preciseDurationField0.add(15778800000L, 15778800000L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 15778800000 * 15778800000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 4063L);
      // Undeclared exception!
      try { 
        preciseDurationField0.add(9223372036854775807L, 2541);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 9223372036854775807 + 10324083
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PreciseDurationField preciseDurationField0 = null;
      try {
        preciseDurationField0 = new PreciseDurationField((DurationFieldType) null, (-4031L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The type must not be null
         //
         verifyException("org.joda.time.field.BaseDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 1821L);
      PreciseDurationField preciseDurationField1 = new PreciseDurationField(durationFieldType0, 1821L);
      boolean boolean0 = preciseDurationField1.equals(preciseDurationField0);
      assertTrue(boolean0);
      assertEquals(1821L, preciseDurationField1.getUnitMillis());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, (-1631L));
      DurationFieldType durationFieldType1 = DurationFieldType.days();
      PreciseDurationField preciseDurationField1 = new PreciseDurationField(durationFieldType1, 2658530L);
      boolean boolean0 = preciseDurationField0.equals(preciseDurationField1);
      assertEquals(2658530L, preciseDurationField1.getUnitMillis());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 380L);
      boolean boolean0 = preciseDurationField0.equals(durationFieldType0);
      assertFalse(boolean0);
      assertEquals(380L, preciseDurationField0.getUnitMillis());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 4089L);
      boolean boolean0 = preciseDurationField0.equals(preciseDurationField0);
      assertEquals(4089L, preciseDurationField0.getUnitMillis());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, (-409L));
      PreciseDurationField preciseDurationField1 = new PreciseDurationField(durationFieldType0, 167281L);
      boolean boolean0 = preciseDurationField0.equals(preciseDurationField1);
      assertFalse(preciseDurationField1.equals((Object)preciseDurationField0));
      assertEquals(167281L, preciseDurationField1.getUnitMillis());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 1821L);
      long long0 = preciseDurationField0.getUnitMillis();
      assertEquals(1821L, long0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 4089L);
      long long0 = preciseDurationField0.add((-494L), 2205);
      assertEquals(9015751L, long0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 4089L);
      long long0 = preciseDurationField0.add(4089L, 4089L);
      assertEquals(16724010L, long0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 1821L);
      long long0 = preciseDurationField0.getMillis(1, (long) 0);
      assertEquals(1821L, long0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 4089L);
      long long0 = preciseDurationField0.getDifferenceAsLong((-279L), (-279L));
      assertEquals(4089L, preciseDurationField0.getUnitMillis());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 4089L);
      long long0 = preciseDurationField0.getMillis((-967L), (-967L));
      assertEquals((-3954063L), long0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 1821L);
      boolean boolean0 = preciseDurationField0.isPrecise();
      assertEquals(1821L, preciseDurationField0.getUnitMillis());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 4093L);
      long long0 = preciseDurationField0.getValueAsLong(16756742L, 16756742L);
      assertEquals(4094L, long0);
  }
}
