/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 05 19:38:31 GMT 2022
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.DataOutputStream;
import java.io.File;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.MutableDateTime;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.ReadablePartial;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeFormatterBuilder;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimeParserBucket;
import org.joda.time.format.DateTimeParserInternalParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.format.InternalParser;
import org.joda.time.format.InternalParserDateTimeParser;
import org.joda.time.format.InternalPrinter;
import org.joda.time.format.InternalPrinterDateTimePrinter;
import org.joda.time.tz.UTCProvider;
import org.joda.time.tz.ZoneInfoProvider;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateTimeFormatterBuilder_ESTest extends DateTimeFormatterBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('H');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      
      Appendable appendable0 = null;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_TextField0);
      assertNotNull(dateTimePrinter0);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(20, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_TextField0);
      assertNotNull(dateTimeParser0);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(20, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(20, dateTimePrinter0.estimatePrintedLength());
      assertEquals(20, dateTimeParser0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      // Undeclared exception!
      try { 
        YearMonth.parse("org.joda.time.convert.DateConverter", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org.joda.time.convert.DateConverter\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("n", "Pacific/J", true, 100, 100);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      
      int int0 = 23118750;
      StringWriter stringWriter0 = new StringWriter(23118750);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "Pacific/J");
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringWriter1);
      assertEquals("Pacific/J", stringWriter0.toString());
      assertEquals("Pacific/J", stringWriter1.toString());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Appendable) stringWriter1, 1L, (Chronology) ethiopicChronology0, 23118750, dateTimeZone0, locale0);
      assertEquals(1, EthiopicChronology.EE);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals("Pacific/J+06:25:18.750", stringWriter0.toString());
      assertEquals("Pacific/J+06:25:18.750", stringWriter1.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendCenturyOfEra(13421772, 889);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendText(dateTimeFieldType0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder2.appendFixedSignedDecimal((DateTimeFieldType) null, 13421772);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType0, 0, 3113);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeParser0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.append(dateTimeParser0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendShortText(dateTimeFieldType0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeParser0.estimateParsedLength());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder2.appendMinuteOfHour(22);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder3.appendLiteral("must not be larger than ");
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder5);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder5.appendClockhourOfDay(3113);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder6);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder6.appendYear(3113, 6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder6);
      assertNotNull(dateTimeFormatterBuilder7);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder2.append(dateTimeParser0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder7);
      assertNotNull(dateTimeFormatterBuilder8);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeParser0.estimateParsedLength());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendWeekOfWeekyear((-3777));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendLiteral("W");
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendFractionOfSecond(50, 15);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendMinuteOfHour(50);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder3);
      
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimePrinter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeParser0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimePrinter0.estimatePrintedLength());
      assertEquals(32, dateTimeParser0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      Integer integer0 = new Integer(2326);
      assertNotNull(integer0);
      assertEquals(2326, (int)integer0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimePrinter0.estimatePrintedLength());
      assertEquals(32, dateTimeParser0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(2326, (int)dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(15);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.015", dateTimeZone0.toString());
      assertEquals("+00:00:00.015", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter2);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimePrinter0.estimatePrintedLength());
      assertEquals(32, dateTimeParser0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(2326, (int)dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals("+00:00:00.015", dateTimeZone0.toString());
      assertEquals("+00:00:00.015", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2326, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder2.appendMillisOfDay(2326);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder4);
      
      Integer integer1 = Integer.getInteger("Pacific/M", (-290));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-290), (int)integer1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendDayOfMonth(57);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder5);
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatterBuilder5.toFormatter();
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter3);
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder3.appendFractionOfDay(50, 57);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertNotNull(dateTimeFormatterBuilder6);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder4.appendTwoDigitWeekyear(57);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertNotNull(dateTimeFormatterBuilder7);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder6.appendCenturyOfEra(1000, 4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder8);
      assertNotNull(dateTimeFormatterBuilder8);
      
      boolean boolean0 = dateTimeFormatterBuilder8.canBuildFormatter();
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder8);
      assertTrue(boolean0);
      
      System.setCurrentTimeMillis(50);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains(57));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertFalse(linkedList0.contains(57));
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-290));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertNotNull(dateTimeFieldType0);
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      
      boolean boolean0 = dateTimeFormatterBuilder0.canBuildFormatter();
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendFixedDecimal(dateTimeFieldType0, (-2047));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal number of digits: -2047
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFixedSignedDecimal(dateTimeFieldType0, 1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendFixedDecimal(dateTimeFieldType0, 1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendSecondOfDay(1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendMonthOfYearText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimePrinter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder2.append(dateTimePrinter0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertNotNull(dateTimeFormatterBuilder5);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendEraText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder6);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder6.appendTimeZoneId();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder7);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("Pacific/N", "Parsing is not supported", false, 1250, 1250);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("UHx$<$Fm+eR1IH4*_9-");
      assertNotNull(mockPrintStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      assertNotNull(dataOutputStream0);
      
      MockPrintStream mockPrintStream1 = new MockPrintStream(dataOutputStream0);
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertNotNull(mockPrintStream1);
      
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream1, true);
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertFalse(mockPrintStream2.equals((Object)mockPrintStream0));
      assertFalse(mockPrintStream2.equals((Object)mockPrintStream1));
      assertNotNull(mockPrintStream2);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) dateTimeFormatterBuilder5;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "UHx$<$Fm+eR1IH4*_9-";
      objectArray0[3] = (Object) dateTimeFormatterBuilder4;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[4] = object1;
      PrintStream printStream0 = mockPrintStream2.format("35+Az[", objectArray0);
      assertEquals(5, objectArray0.length);
      assertFalse(printStream0.equals((Object)mockPrintStream0));
      assertFalse(printStream0.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream2));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream2));
      assertFalse(mockPrintStream2.equals((Object)mockPrintStream0));
      assertFalse(mockPrintStream2.equals((Object)mockPrintStream1));
      assertSame(printStream0, mockPrintStream2);
      assertNotSame(printStream0, mockPrintStream0);
      assertNotSame(printStream0, mockPrintStream1);
      assertNotSame(mockPrintStream0, mockPrintStream1);
      assertNotSame(mockPrintStream0, mockPrintStream2);
      assertNotSame(mockPrintStream0, printStream0);
      assertNotSame(mockPrintStream1, printStream0);
      assertNotSame(mockPrintStream1, mockPrintStream0);
      assertNotSame(mockPrintStream1, mockPrintStream2);
      assertSame(mockPrintStream2, printStream0);
      assertNotSame(mockPrintStream2, mockPrintStream0);
      assertNotSame(mockPrintStream2, mockPrintStream1);
      assertNotNull(printStream0);
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode0);
      assertTrue(list1.equals((Object)list0));
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertNotNull(list1);
      assertEquals(0, linkedList0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      Locale locale0 = Locale.lookup(linkedList0, list1);
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertNull(locale0);
      assertEquals(0, linkedList0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Appendable) printStream0, (long) 1, (Chronology) null, 1250, dateTimeZone0, (Locale) null);
      assertEquals(5, objectArray0.length);
      assertFalse(printStream0.equals((Object)mockPrintStream0));
      assertFalse(printStream0.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream2));
      assertFalse(mockPrintStream0.equals((Object)printStream0));
      assertFalse(mockPrintStream1.equals((Object)printStream0));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream2));
      assertFalse(mockPrintStream2.equals((Object)mockPrintStream0));
      assertFalse(mockPrintStream2.equals((Object)mockPrintStream1));
      assertSame(printStream0, mockPrintStream2);
      assertNotSame(printStream0, mockPrintStream0);
      assertNotSame(printStream0, mockPrintStream1);
      assertNotSame(mockPrintStream0, mockPrintStream1);
      assertNotSame(mockPrintStream0, mockPrintStream2);
      assertNotSame(mockPrintStream0, printStream0);
      assertNotSame(mockPrintStream1, printStream0);
      assertNotSame(mockPrintStream1, mockPrintStream0);
      assertNotSame(mockPrintStream1, mockPrintStream2);
      assertSame(mockPrintStream2, printStream0);
      assertNotSame(mockPrintStream2, mockPrintStream0);
      assertNotSame(mockPrintStream2, mockPrintStream1);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId[] dateTimeFormatterBuilder_TimeZoneIdArray0 = DateTimeFormatterBuilder.TimeZoneId.values();
      assertEquals(1, dateTimeFormatterBuilder_TimeZoneIdArray0.length);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneIdArray0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendCenturyOfEra(1456, 1456);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendDayOfWeekText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendTwoDigitWeekyear(90, false);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder3);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 65, true);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      Chronology chronology0 = gJChronology0.withUTC();
      assertSame(gJChronology0, chronology0);
      assertSame(chronology0, gJChronology0);
      assertNotNull(chronology0);
      
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(chronology0);
      assertSame(gJChronology0, chronology0);
      assertSame(chronology0, gJChronology0);
      assertNotNull(dateTimeField0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimePrinter0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(65, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimeParser0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(65, dateTimeParser0.estimateParsedLength());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append('=');
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringWriter1);
      assertEquals("=", stringWriter0.toString());
      assertEquals("=", stringWriter1.toString());
      
      StringBuffer stringBuffer0 = new StringBuffer(45);
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) stringBuffer0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringWriter2, stringWriter0);
      assertNotNull(stringWriter2);
      assertEquals("=", stringWriter0.toString());
      assertEquals("=", stringWriter1.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("=", stringWriter2.toString());
      
      StringBuffer stringBuffer1 = stringWriter2.getBuffer();
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertNotSame(stringBuffer1, stringBuffer0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertNotSame(stringBuffer0, stringBuffer1);
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringWriter2, stringWriter0);
      assertNotNull(stringBuffer1);
      assertEquals(1, stringBuffer1.length());
      assertEquals("=", stringBuffer1.toString());
      assertEquals("=", stringWriter0.toString());
      assertEquals("=", stringWriter1.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("=", stringWriter2.toString());
      
      LocalDateTime localDateTime0 = new LocalDateTime(264L, (Chronology) gJChronology0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      
      dateTimePrinter0.printTo(stringBuffer1, (ReadablePartial) localDateTime0, locale0);
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertFalse(stringBuffer0.equals((Object)stringBuffer1));
      assertNotSame(stringBuffer1, stringBuffer0);
      assertSame(gJChronology0, chronology0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertNotSame(stringBuffer0, stringBuffer1);
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringWriter2, stringWriter0);
      assertEquals(2, stringBuffer1.length());
      assertEquals("=1", stringBuffer1.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(65, dateTimePrinter0.estimatePrintedLength());
      assertEquals("=1", stringWriter0.toString());
      assertEquals("=1", stringWriter1.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("=1", stringWriter2.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.append(dateTimePrinter0, dateTimeParser0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(65, dateTimePrinter0.estimatePrintedLength());
      assertEquals(65, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder2.appendHalfdayOfDayText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertNotNull(dateTimeFormatterBuilder5);
      
      DateTimeParser dateTimeParser1 = dateTimeFormatterBuilder2.toParser();
      assertFalse(dateTimeParser1.equals((Object)dateTimeParser0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotSame(dateTimeParser1, dateTimeParser0);
      assertNotNull(dateTimeParser1);
      assertEquals(1563, dateTimeParser1.estimateParsedLength());
      
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1456, gJChronology0, locale0, (Integer) null, 64);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertNull(dateTimeParserBucket0.getPivotYear());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket0, stringBuffer0, (-1726));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1726
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      InternalParser[] internalParserArray0 = new InternalParser[7];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-1981), (-1981));
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals((-1981), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-1981), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      
      internalParserArray0[0] = (InternalParser) dateTimeFormatterBuilder_Fraction0;
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, (-1981), true);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals((-1981), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals((-1981), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      
      internalParserArray0[1] = (InternalParser) dateTimeFormatterBuilder_UnpaddedNumber0;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction1 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-1981), (-1981));
      assertFalse(dateTimeFormatterBuilder_Fraction1.equals((Object)dateTimeFormatterBuilder_Fraction0));
      assertNotNull(dateTimeFormatterBuilder_Fraction1);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals((-1981), dateTimeFormatterBuilder_Fraction1.estimatePrintedLength());
      assertEquals((-1981), dateTimeFormatterBuilder_Fraction1.estimateParsedLength());
      
      internalParserArray0[2] = (InternalParser) dateTimeFormatterBuilder_Fraction1;
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 1278, true, (-1981));
      assertNotNull(dateTimeFormatterBuilder_PaddedNumber0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals(1278, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals(1278, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      
      internalParserArray0[3] = (InternalParser) dateTimeFormatterBuilder_PaddedNumber0;
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      
      internalParserArray0[4] = (InternalParser) dateTimeFormatterBuilder_TextField0;
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber1 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 341, true, 1278);
      assertFalse(dateTimeFormatterBuilder_PaddedNumber1.equals((Object)dateTimeFormatterBuilder_PaddedNumber0));
      assertNotNull(dateTimeFormatterBuilder_PaddedNumber1);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals(341, dateTimeFormatterBuilder_PaddedNumber1.estimateParsedLength());
      assertEquals(341, dateTimeFormatterBuilder_PaddedNumber1.estimatePrintedLength());
      
      internalParserArray0[5] = (InternalParser) dateTimeFormatterBuilder_PaddedNumber1;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("America/Indiana/Indianapolis", "America/Indiana/Indianapolis", true, 442, 442);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertEquals(28, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(28, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      
      internalParserArray0[6] = (InternalParser) dateTimeFormatterBuilder_TimeZoneOffset0;
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(internalParserArray0);
      assertEquals(7, internalParserArray0.length);
      assertNotNull(dateTimeFormatterBuilder_MatchingParser0);
      assertEquals(1278, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) null);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      EthiopicChronology ethiopicChronology1 = (EthiopicChronology)ethiopicChronology0.withZone((DateTimeZone) null);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      assertNotNull(ethiopicChronology1);
      
      Locale locale0 = new Locale("America/Indiana/Indianapolis", "Europe/U", "America/Indiana/Indianapolis");
      assertNotNull(locale0);
      assertEquals("america/indiana/indianapolis", locale0.getLanguage());
      assertEquals("america/indiana/indianapolis_EUROPE/U_America/Indiana/Indianapolis", locale0.toString());
      assertEquals("America/Indiana/Indianapolis", locale0.getVariant());
      assertEquals("EUROPE/U", locale0.getCountry());
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0L, ethiopicChronology1, locale0, (Integer) 1, 1);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("america/indiana/indianapolis", locale0.getLanguage());
      assertEquals("america/indiana/indianapolis_EUROPE/U_America/Indiana/Indianapolis", locale0.toString());
      assertEquals("America/Indiana/Indianapolis", locale0.getVariant());
      assertEquals("EUROPE/U", locale0.getCountry());
      assertEquals(1, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      
      int int0 = dateTimeFormatterBuilder_MatchingParser0.parseInto(dateTimeParserBucket0, "America/Indiana/Indianapolis", 1);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(7, internalParserArray0.length);
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      assertEquals((-2), int0);
      assertEquals(1278, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      assertEquals("america/indiana/indianapolis", locale0.getLanguage());
      assertEquals("america/indiana/indianapolis_EUROPE/U_America/Indiana/Indianapolis", locale0.toString());
      assertEquals("America/Indiana/Indianapolis", locale0.getVariant());
      assertEquals("EUROPE/U", locale0.getCountry());
      assertEquals(1, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      InternalParserDateTimeParser internalParserDateTimeParser0 = (InternalParserDateTimeParser)InternalParserDateTimeParser.of(dateTimeFormatterBuilder_Fraction0);
      assertFalse(dateTimeFormatterBuilder_Fraction0.equals((Object)dateTimeFormatterBuilder_Fraction1));
      assertNotSame(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction1);
      assertNotNull(internalParserDateTimeParser0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals((-1981), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-1981), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-1981), internalParserDateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendSecondOfMinute(341);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTwoDigitWeekyear(91, false);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendFractionOfDay(1278, 1278);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder3);
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendTimeZoneName((Map<String, DateTimeZone>) hashMap0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder4.appendTimeZoneOffset("America/Indiana/Indianapolis", (String) null, false, 119, 83);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      System.setCurrentTimeMillis(2042L);
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekShortText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendDayOfWeekText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendSignedDecimal(dateTimeFieldType0, 4537, 4537);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendSecondOfMinute(57);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Collection<DateTimeZone> collection0 = hashMap0.values();
      assertNotNull(collection0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendTimeZoneName((Map<String, DateTimeZone>) hashMap0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertNotNull(dateTimeFormatterBuilder5);
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-1049), (Map<String, DateTimeZone>) null);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      Locale locale0 = new Locale("@0", "@0");
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("@0", locale0.getLanguage());
      assertEquals("@0", locale0.getCountry());
      
      Integer integer0 = new Integer((-1049));
      assertNotNull(integer0);
      assertEquals((-1049), (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(2629746000L, gregorianChronology0, locale0, integer0, (-4395));
      assertNotNull(dateTimeParserBucket0);
      assertEquals("", locale0.getVariant());
      assertEquals("@0", locale0.getLanguage());
      assertEquals("@0", locale0.getCountry());
      assertEquals((-1049), (int)dateTimeParserBucket0.getPivotYear());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      int int0 = dateTimeFormatterBuilder_TimeZoneName0.parseInto(dateTimeParserBucket0, "@0", 4537);
      assertEquals((-4538), int0);
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals("", locale0.getVariant());
      assertEquals("@0", locale0.getLanguage());
      assertEquals("@0", locale0.getCountry());
      assertEquals((-1049), (int)dateTimeParserBucket0.getPivotYear());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(0, dateTimeParserBucket0.getOffset());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "US/H");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.toPrinter();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing is not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      InternalParser[] internalParserArray0 = new InternalParser[7];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 337, 337);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      
      internalParserArray0[0] = (InternalParser) dateTimeFormatterBuilder_Fraction0;
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 337, true);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(337, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(337, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      
      internalParserArray0[1] = (InternalParser) dateTimeFormatterBuilder_UnpaddedNumber0;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction1 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 337, 337);
      assertFalse(dateTimeFormatterBuilder_Fraction1.equals((Object)dateTimeFormatterBuilder_Fraction0));
      assertNotNull(dateTimeFormatterBuilder_Fraction1);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction1.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction1.estimatePrintedLength());
      
      internalParserArray0[2] = (InternalParser) dateTimeFormatterBuilder_Fraction1;
      int int0 = 1278;
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 1278, true, 337);
      assertNotNull(dateTimeFormatterBuilder_PaddedNumber0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(1278, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals(1278, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      
      internalParserArray0[3] = (InternalParser) dateTimeFormatterBuilder_PaddedNumber0;
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      
      internalParserArray0[4] = (InternalParser) dateTimeFormatterBuilder_TextField0;
      int int1 = 341;
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber1 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 341, true, 1278);
      assertFalse(dateTimeFormatterBuilder_PaddedNumber1.equals((Object)dateTimeFormatterBuilder_PaddedNumber0));
      assertNotNull(dateTimeFormatterBuilder_PaddedNumber1);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(341, dateTimeFormatterBuilder_PaddedNumber1.estimatePrintedLength());
      assertEquals(341, dateTimeFormatterBuilder_PaddedNumber1.estimateParsedLength());
      
      internalParserArray0[5] = (InternalParser) dateTimeFormatterBuilder_PaddedNumber1;
      String string0 = "America/Indiana/Indianapolis";
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("America/Indiana/Indianapolis", "America/Indiana/Indianapolis", true, 452, 452);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertEquals(28, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(28, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      
      internalParserArray0[6] = (InternalParser) dateTimeFormatterBuilder_TimeZoneOffset0;
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(internalParserArray0);
      assertEquals(7, internalParserArray0.length);
      assertNotNull(dateTimeFormatterBuilder_MatchingParser0);
      assertEquals(1278, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) null);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      EthiopicChronology ethiopicChronology1 = (EthiopicChronology)ethiopicChronology0.withZone((DateTimeZone) null);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      assertNotNull(ethiopicChronology1);
      
      Locale locale0 = new Locale("America/Indiana/Indianapolis", "Europe/U", "America/Indiana/Indianapolis");
      assertNotNull(locale0);
      assertEquals("america/indiana/indianapolis_EUROPE/U_America/Indiana/Indianapolis", locale0.toString());
      assertEquals("EUROPE/U", locale0.getCountry());
      assertEquals("America/Indiana/Indianapolis", locale0.getVariant());
      assertEquals("america/indiana/indianapolis", locale0.getLanguage());
      
      int int2 = (-854);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0L, ethiopicChronology1, locale0, (Integer) 1, (-854));
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("america/indiana/indianapolis_EUROPE/U_America/Indiana/Indianapolis", locale0.toString());
      assertEquals("EUROPE/U", locale0.getCountry());
      assertEquals("America/Indiana/Indianapolis", locale0.getVariant());
      assertEquals("america/indiana/indianapolis", locale0.getLanguage());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(1, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_MatchingParser0.parseInto(dateTimeParserBucket0, "America/Indiana/Indianapolis", (-854));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      
      Integer integer0 = new Integer((-912));
      assertNotNull(integer0);
      assertEquals((-912), (int)integer0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-1942), true);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      
      int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto((DateTimeParserBucket) null, "L?Y70u`;a,Hl", 8);
      assertEquals((-9), int0);
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('H');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      
      Appendable appendable0 = null;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance(gregorianChronology0);
      assertNotNull(strictChronology0);
      
      Chronology chronology0 = strictChronology0.withUTC();
      assertSame(strictChronology0, chronology0);
      assertSame(chronology0, strictChronology0);
      assertNotNull(chronology0);
      
      LocalTime localTime0 = LocalTime.fromMillisOfDay(1000000L, chronology0);
      assertSame(strictChronology0, chronology0);
      assertSame(chronology0, strictChronology0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_TextField0.printTo((Appendable) null, (ReadablePartial) localTime0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TextField", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('H');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      
      Appendable appendable0 = null;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, buddhistChronology0, locale0, (Integer) null, 1);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertNull(dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      
      StringBuilder stringBuilder0 = new StringBuilder(25);
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      int int0 = dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket0, stringBuilder0, 48);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals((-49), int0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertNull(dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals("", stringBuilder0.toString());
      
      YearMonth yearMonth0 = null;
      try {
        yearMonth0 = new YearMonth(dateTimeFormatterBuilder_TextField0, buddhistChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.joda.time.format.DateTimeFormatterBuilder$TextField
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 16;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendYearOfEra(16, 16);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 3, 11);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals(11, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(11, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      
      StringBuilder stringBuilder0 = new StringBuilder("US/H");
      assertNotNull(stringBuilder0);
      assertEquals("US/H", stringBuilder0.toString());
      
      StringBuffer stringBuffer0 = new StringBuffer(stringBuilder0);
      assertNotNull(stringBuffer0);
      assertEquals("US/H", stringBuilder0.toString());
      assertEquals(4, stringBuffer0.length());
      assertEquals("US/H", stringBuffer0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.append(stringBuffer0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      assertEquals("US/HUS/H", stringBuilder0.toString());
      assertEquals(4, stringBuffer0.length());
      assertEquals("US/H", stringBuffer0.toString());
      assertEquals("US/HUS/H", stringBuilder1.toString());
      
      dateTimeFormatterBuilder_Fraction0.printTo((Appendable) stringBuilder1, (long) 3, (Chronology) null);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals(11, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(11, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals("US/HUS/H00000083333", stringBuilder0.toString());
      assertEquals(4, stringBuffer0.length());
      assertEquals("US/H", stringBuffer0.toString());
      assertEquals("US/HUS/H00000083333", stringBuilder1.toString());
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneName((Map<String, DateTimeZone>) hashMap0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendSecondOfMinute(16);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder3);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.millisOfDay();
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotNull(dateTimeFieldType1);
      assertEquals("millisOfDay", dateTimeFieldType1.getName());
      assertEquals("millisOfDay", dateTimeFieldType1.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendDecimal(dateTimeFieldType1, 16, 16);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder4);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("millisOfDay", dateTimeFieldType1.getName());
      assertEquals("millisOfDay", dateTimeFieldType1.toString());
      
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.centuryOfEra();
      assertFalse(dateTimeFieldType2.equals((Object)dateTimeFieldType1));
      assertFalse(dateTimeFieldType2.equals((Object)dateTimeFieldType0));
      assertNotSame(dateTimeFieldType2, dateTimeFieldType1);
      assertNotSame(dateTimeFieldType2, dateTimeFieldType0);
      assertNotNull(dateTimeFieldType2);
      assertEquals("centuryOfEra", dateTimeFieldType2.getName());
      assertEquals("centuryOfEra", dateTimeFieldType2.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendSecondOfDay(16);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder5);
      
      int int1 = (-59);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder4.appendFixedDecimal(dateTimeFieldType2, (-59));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal number of digits: -59
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('H');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Europe/T");
      assertFalse(boolean0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      
      int int0 = dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength();
      assertEquals(1, int0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      Integer integer0 = Integer.getInteger("rEda)#tU+p9.BLB");
      assertNull(integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, ethiopicChronology0, (Locale) null, (Integer) null, 44);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTimeParserBucket0);
      assertNull(dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      
      int int1 = dateTimeFormatterBuilder_CharacterLiteral0.parseInto(dateTimeParserBucket0, "rEda)#tU+p9.BLB", 3);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(int1 == int0);
      assertEquals((-4), int1);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertNull(dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendText(dateTimeFieldType0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 57;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTwoDigitYear(57, true);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 57, false);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals(57, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(57, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimeParser0);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals(57, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(57, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(57, dateTimeParser0.estimateParsedLength());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.append(dateTimeParser0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals(57, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(57, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(57, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendMonthOfYear(57);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals(57, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(57, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(57, dateTimeParser0.estimateParsedLength());
      
      boolean boolean0 = dateTimeFormatterBuilder3.canBuildFormatter();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertTrue(boolean0);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals(57, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(57, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(57, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendTimeZoneOffset("Europe/W", true, 57, 57);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder4);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder3.appendMonthOfYear(57);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder5);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals(57, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(57, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(57, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder0.appendFraction(dateTimeFieldType0, 57, 57);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertNotNull(dateTimeFormatterBuilder6);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals(57, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(57, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      
      int int1 = 6;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(6, "Europe/W");
      assertNotNull(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=Europe/W,offset=6,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("Europe/W", simpleTimeZone0.getID());
      assertEquals(6, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      // Undeclared exception!
      try { 
        DateTimeZone.forTimeZone(simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'Europe/W' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMonthOfYearText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendEraText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder1.appendMinuteOfDay(292);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder3);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendText(dateTimeFieldType0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      
      MockFile mockFile0 = new MockFile("`V)h(hO#AW'!&V", "`V)h(hO#AW'!&V");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "`V)h(hO#AW'!&V");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockPrintStream0);
      
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "`V)h(hO#AW'!&V");
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertNotNull(printStream0);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/joda-time/`V)h(hO#AW'!&V/`V)h(hO#AW'!&V", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/joda-time/`V)h(hO#AW'!&V", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("`V)h(hO#AW'!&V", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.canWrite());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.isAbsolute());
      assertEquals("`V)h(hO#AW'!&V", mockFile1.getName());
      assertEquals("/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/joda-time/`V)h(hO#AW'!&V/`V)h(hO#AW'!&V", mockFile1.getParent());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals(14L, mockFile1.length());
      assertEquals("/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/joda-time/`V)h(hO#AW'!&V/`V)h(hO#AW'!&V/`V)h(hO#AW'!&V", mockFile1.toString());
      assertFalse(mockFile1.isDirectory());
      assertTrue(mockFile1.exists());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.canExecute());
      
      dateTimeFormatterBuilder_TimeZoneId0.printTo((Appendable) printStream0, (ReadablePartial) null, (Locale) null);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/joda-time/`V)h(hO#AW'!&V/`V)h(hO#AW'!&V", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/joda-time/`V)h(hO#AW'!&V", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("`V)h(hO#AW'!&V", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.canWrite());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.isAbsolute());
      assertEquals("`V)h(hO#AW'!&V", mockFile1.getName());
      assertEquals("/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/joda-time/`V)h(hO#AW'!&V/`V)h(hO#AW'!&V", mockFile1.getParent());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals(14L, mockFile1.length());
      assertEquals("/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/joda-time/`V)h(hO#AW'!&V/`V)h(hO#AW'!&V/`V)h(hO#AW'!&V", mockFile1.toString());
      assertFalse(mockFile1.isDirectory());
      assertTrue(mockFile1.exists());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.canExecute());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder1.appendFractionOfSecond(2, 2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder5);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId[] dateTimeFormatterBuilder_TimeZoneIdArray0 = DateTimeFormatterBuilder.TimeZoneId.values();
      assertEquals(1, dateTimeFormatterBuilder_TimeZoneIdArray0.length);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneIdArray0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 1456, true);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(1456, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(1456, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      Chronology chronology0 = gJChronology0.withUTC();
      assertSame(gJChronology0, chronology0);
      assertSame(chronology0, gJChronology0);
      assertNotNull(chronology0);
      
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(chronology0);
      assertSame(gJChronology0, chronology0);
      assertSame(chronology0, gJChronology0);
      assertNotNull(dateTimeField0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimePrinter0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(1456, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(1456, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(1456, dateTimePrinter0.estimatePrintedLength());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append('=');
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringWriter1);
      assertEquals("=", stringWriter0.toString());
      assertEquals("=", stringWriter1.toString());
      
      StringBuffer stringBuffer0 = new StringBuffer(45);
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) stringBuffer0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter2, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertNotNull(stringWriter2);
      assertEquals("=", stringWriter0.toString());
      assertEquals("=", stringWriter1.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals("=", stringWriter2.toString());
      
      StringBuffer stringBuffer1 = stringWriter2.getBuffer();
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertNotSame(stringBuffer0, stringBuffer1);
      assertSame(stringWriter2, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertNotSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals("=", stringWriter0.toString());
      assertEquals("=", stringWriter1.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals("=", stringWriter2.toString());
      assertEquals(1, stringBuffer1.length());
      assertEquals("=", stringBuffer1.toString());
      
      LocalDateTime localDateTime0 = new LocalDateTime(264L, (Chronology) gJChronology0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      
      dateTimePrinter0.printTo(stringBuffer1, (ReadablePartial) localDateTime0, locale0);
      assertFalse(stringBuffer0.equals((Object)stringBuffer1));
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertSame(gJChronology0, chronology0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertNotSame(stringBuffer0, stringBuffer1);
      assertSame(stringWriter2, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertNotSame(stringBuffer1, stringBuffer0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(1456, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(1456, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(1456, dateTimePrinter0.estimatePrintedLength());
      assertEquals("=0", stringWriter0.toString());
      assertEquals("=0", stringWriter1.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals("=0", stringWriter2.toString());
      assertEquals(2, stringBuffer1.length());
      assertEquals("=0", stringBuffer1.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      
      DateTimeParser dateTimeParser0 = dateTimeFormatterBuilder1.toParser();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeParser0);
      assertEquals(20, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeFormatterBuilder_TimeZoneIdArray0);
      assertEquals(1, dateTimeFormatterBuilder_TimeZoneIdArray0.length);
      assertNotNull(dateTimeFormatterBuilder_MatchingParser0);
      assertEquals(32, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      
      Integer integer0 = new Integer(64);
      assertNotNull(integer0);
      assertEquals(64, (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(2176L, gJChronology0, locale0, integer0, 10080);
      assertNotNull(dateTimeParserBucket0);
      assertEquals(64, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DurationField durationField0 = buddhistChronology0.weeks();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(durationField0);
      
      int int0 = DateTimeParserBucket.compareReverse(durationField0, durationField0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0, int0);
      
      int int1 = dateTimeFormatterBuilder_MatchingParser0.parseInto(dateTimeParserBucket0, stringBuffer0, 90);
      assertEquals(1, dateTimeFormatterBuilder_TimeZoneIdArray0.length);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(int1 == int0);
      assertFalse(stringBuffer0.equals((Object)stringBuffer1));
      assertSame(gJChronology0, chronology0);
      assertNotSame(stringBuffer0, stringBuffer1);
      assertEquals((-91), int1);
      assertEquals(32, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      assertEquals(64, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains('='));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertFalse(linkedList0.contains('='));
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone("Europe/Z");
      assertNull(dateTimeZone0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_Composite0.printTo((Appendable) stringWriter1, 10L, (Chronology) gJChronology0, 90, (DateTimeZone) null, locale0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = 3552;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("Europe/H", "Europe/H", true, 3552, 3552);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      
      Appendable appendable0 = null;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(lenientChronology0);
      
      Chronology chronology0 = lenientChronology0.withUTC();
      assertEquals(1, IslamicChronology.AH);
      assertSame(lenientChronology0, chronology0);
      assertSame(chronology0, lenientChronology0);
      assertNotNull(chronology0);
      
      LocalDate localDate0 = new LocalDate((long) 3552, chronology0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      Locale locale0 = Locale.forLanguageTag("Europe/H");
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      Locale locale1 = Locale.FRENCH;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr", locale1.toString());
      assertEquals("", locale1.getCountry());
      
      String string0 = locale0.getDisplayVariant(locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr", locale1.toString());
      assertEquals("", locale1.getCountry());
      
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Appendable) null, (ReadablePartial) localDate0, locale0);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(locale0.equals((Object)locale1));
      assertSame(lenientChronology0, chronology0);
      assertSame(chronology0, lenientChronology0);
      assertNotSame(locale0, locale1);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(3, localDate0.size());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendPattern("");
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendFractionOfMinute(3552, Integer.MAX_VALUE);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertNotNull(dateTimePrinter0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.append(dateTimePrinter0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertNotNull(dateTimeParser0);
      assertEquals(13, dateTimeParser0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.append(dateTimeParser0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals(13, dateTimeParser0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendMinuteOfDay(Integer.MAX_VALUE);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertNotNull(dateTimeFormatterBuilder5);
      assertEquals(13, dateTimeParser0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimePrinter0.estimatePrintedLength());
      
      String string1 = null;
      DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder3.appendOptional(dateTimeParser0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertNotNull(dateTimeFormatterBuilder6);
      assertEquals(13, dateTimeParser0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, Integer.MAX_VALUE, true);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals(Integer.MAX_VALUE, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(Integer.MAX_VALUE, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Appendable) null, (ReadablePartial) localDate0, locale1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '7';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'7'}, charArray0);
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("7", charBuffer0.toString());
      
      LocalTime localTime0 = new LocalTime((-801L));
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      String string0 = localTime0.toString();
      assertNotNull(string0);
      assertEquals("23:59:59.199", string0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.plusMinutes((-840));
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotNull(localTime1);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneName();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendYearOfEra('7', '7');
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder1.appendTwoDigitWeekyear(7593724);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder3);
      
      System.setCurrentTimeMillis((-840));
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 7593724, false);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals(7593724, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(7593724, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      
      dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Appendable) charBuffer0, (ReadablePartial) localTime0, locale0);
      assertEquals(1, charArray0.length);
      assertFalse(localTime0.equals((Object)localTime1));
      assertNotSame(localTime0, localTime1);
      assertArrayEquals(new char[] {'\uFFFD'}, charArray0);
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(4, localTime0.size());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals(7593724, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(7593724, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("Europe/H", "Europe/H", true, 3552, 3552);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(lenientChronology0);
      
      Chronology chronology0 = lenientChronology0.withUTC();
      assertEquals(1, IslamicChronology.AH);
      assertSame(lenientChronology0, chronology0);
      assertSame(chronology0, lenientChronology0);
      assertNotNull(chronology0);
      
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      Locale locale0 = Locale.forLanguageTag("Europe/H");
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      
      Locale locale1 = Locale.FRENCH;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fr", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      
      String string0 = locale0.getDisplayVariant(locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fr", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Appendable) null, (ReadablePartial) localDate0, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertNotSame(locale0, locale1);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(3, localDate0.size());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendPattern("");
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone((String) null);
      assertNull(dateTimeZone0);
      
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Appendable) null, 2514L, (Chronology) lenientChronology0, 3552, (DateTimeZone) null, locale0);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(locale0.equals((Object)locale1));
      assertSame(lenientChronology0, chronology0);
      assertNotSame(locale0, locale1);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendFractionOfMinute(3552, Integer.MAX_VALUE);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertNotNull(dateTimePrinter0);
      assertEquals(13, dateTimePrinter0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.append(dateTimePrinter0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals(13, dateTimePrinter0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertNotNull(dateTimeParser0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(13, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.append(dateTimeParser0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals(13, dateTimePrinter0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(13, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendMinuteOfDay(Integer.MAX_VALUE);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertNotNull(dateTimeFormatterBuilder5);
      assertEquals(13, dateTimePrinter0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(13, dateTimeParser0.estimateParsedLength());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder5.appendLiteral((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Literal must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId[] dateTimeFormatterBuilder_TimeZoneIdArray0 = DateTimeFormatterBuilder.TimeZoneId.values();
      assertEquals(1, dateTimeFormatterBuilder_TimeZoneIdArray0.length);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneIdArray0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(1456, 1456);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendDayOfWeekText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendTwoDigitWeekyear(90, false);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder3);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 65, true);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      Chronology chronology0 = gJChronology0.withUTC();
      assertSame(gJChronology0, chronology0);
      assertSame(chronology0, gJChronology0);
      assertNotNull(chronology0);
      
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(chronology0);
      assertSame(gJChronology0, chronology0);
      assertSame(chronology0, gJChronology0);
      assertNotNull(dateTimeField0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimePrinter0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(65, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimeParser0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(65, dateTimeParser0.estimateParsedLength());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append('=');
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringWriter1);
      assertEquals("=", stringWriter0.toString());
      assertEquals("=", stringWriter1.toString());
      
      StringBuffer stringBuffer0 = new StringBuffer(45);
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) stringBuffer0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringWriter2, stringWriter0);
      assertNotNull(stringWriter2);
      assertEquals("=", stringWriter0.toString());
      assertEquals("=", stringWriter1.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals("=", stringWriter2.toString());
      
      StringBuffer stringBuffer1 = stringWriter2.getBuffer();
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertNotSame(stringBuffer1, stringBuffer0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertNotSame(stringBuffer0, stringBuffer1);
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringWriter2, stringWriter0);
      assertNotNull(stringBuffer1);
      assertEquals(1, stringBuffer1.length());
      assertEquals("=", stringBuffer1.toString());
      assertEquals("=", stringWriter0.toString());
      assertEquals("=", stringWriter1.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals("=", stringWriter2.toString());
      
      LocalDateTime localDateTime0 = new LocalDateTime(264L, (Chronology) gJChronology0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      dateTimePrinter0.printTo(stringBuffer1, (ReadablePartial) localDateTime0, locale0);
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertFalse(stringBuffer0.equals((Object)stringBuffer1));
      assertNotSame(stringBuffer1, stringBuffer0);
      assertSame(gJChronology0, chronology0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertNotSame(stringBuffer0, stringBuffer1);
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringWriter2, stringWriter0);
      assertEquals(2, stringBuffer1.length());
      assertEquals("=0", stringBuffer1.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(65, dateTimePrinter0.estimatePrintedLength());
      assertEquals("=0", stringWriter0.toString());
      assertEquals("=0", stringWriter1.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals("=0", stringWriter2.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.append(dateTimePrinter0, dateTimeParser0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(65, dateTimePrinter0.estimatePrintedLength());
      assertEquals(65, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendMinuteOfHour(64);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder5);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(65, dateTimePrinter0.estimatePrintedLength());
      assertEquals(65, dateTimeParser0.estimateParsedLength());
      
      DateTimeParser dateTimeParser1 = dateTimeFormatterBuilder2.toParser();
      assertFalse(dateTimeParser1.equals((Object)dateTimeParser0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertNotSame(dateTimeParser1, dateTimeParser0);
      assertNotNull(dateTimeParser1);
      assertEquals(169, dateTimeParser1.estimateParsedLength());
      
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeFormatterBuilder_TimeZoneIdArray0);
      assertEquals(1, dateTimeFormatterBuilder_TimeZoneIdArray0.length);
      assertNotNull(dateTimeFormatterBuilder_MatchingParser0);
      assertEquals(32, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      
      Integer integer0 = new Integer(64);
      assertNotNull(integer0);
      assertEquals(64, (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(2176L, gJChronology0, locale0, integer0, 10080);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(64, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      
      int int0 = dateTimeFormatterBuilder_MatchingParser0.parseInto(dateTimeParserBucket0, stringBuffer0, 90);
      assertEquals(1, dateTimeFormatterBuilder_TimeZoneIdArray0.length);
      assertFalse(stringBuffer0.equals((Object)stringBuffer1));
      assertSame(gJChronology0, chronology0);
      assertNotSame(stringBuffer0, stringBuffer1);
      assertEquals((-91), int0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(32, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      assertEquals(64, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      
      ZoneInfoProvider zoneInfoProvider0 = new ZoneInfoProvider();
      assertNotNull(zoneInfoProvider0);
      
      DateTimeZone dateTimeZone0 = zoneInfoProvider0.getZone("5#$=8SP*,uC?o`v%!:g");
      assertNull(dateTimeZone0);
      
      dateTimeFormatterBuilder_TimeZoneId0.printTo((Appendable) stringWriter0, 264L, chronology0, (-1125), (DateTimeZone) null, locale0);
      assertSame(gJChronology0, chronology0);
      assertSame(chronology0, gJChronology0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals("=0", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      
      int int0 = (-769);
      int int1 = 83;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("The unit milliseconds must be at least 1", "l9<x%C?", false, 83, 83);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertNotNull(dateTimePrinter0);
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(40, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertNotNull(dateTimeParser0);
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(40, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(40, dateTimePrinter0.estimatePrintedLength());
      assertEquals(40, dateTimeParser0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(40, dateTimePrinter0.estimatePrintedLength());
      assertEquals(40, dateTimeParser0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter1.parseMutableDateTime(",2Vdhpo[V9SK%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \",2Vdhpo[V9SK%\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("The unit milliseconds must be at least 1", "l9<x%C?", false, 83, 83);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertNotNull(dateTimePrinter0);
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(40, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertNotNull(dateTimeParser0);
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(40, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(40, dateTimePrinter0.estimatePrintedLength());
      assertEquals(40, dateTimeParser0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(40, dateTimePrinter0.estimatePrintedLength());
      assertEquals(40, dateTimeParser0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      
      Integer integer0 = new Integer(292278993);
      assertNotNull(integer0);
      assertEquals(292278993, (int)integer0);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter2);
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(40, dateTimePrinter0.estimatePrintedLength());
      assertEquals(40, dateTimeParser0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(292278993, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear((-769));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter3);
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(40, dateTimePrinter0.estimatePrintedLength());
      assertEquals(40, dateTimeParser0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(292278993, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals((-769), (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      
      LocalDateTime localDateTime0 = dateTimeFormatter3.parseLocalDateTime("l9<x%C?");
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotNull(localDateTime0);
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(40, dateTimePrinter0.estimatePrintedLength());
      assertEquals(40, dateTimeParser0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(292278993, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals((-769), (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertEquals(4, localDateTime0.size());
      
      boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertFalse(boolean0);
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(40, dateTimePrinter0.estimatePrintedLength());
      assertEquals(40, dateTimeParser0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(292278993, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals((-769), (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertEquals(4, localDateTime0.size());
      
      // Undeclared exception!
      try { 
        JulianChronology.getInstance(dateTimeZone0, 108);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 108
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      
      int int0 = (-143);
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-143), false);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals((-143), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals((-143), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      
      Integer integer0 = new Integer((-143));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-143), (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(4459L, ethiopicChronology0, locale0, integer0, 1);
      assertEquals(1, EthiopicChronology.EE);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(dateTimeParserBucket0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals((-143), (int)dateTimeParserBucket0.getPivotYear());
      
      int int1 = (-3540);
      int int2 = dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, "org/joda/time/tz/data", (-3540));
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(3681, int2);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals((-143), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals((-143), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals((-143), (int)dateTimeParserBucket0.getPivotYear());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendDayOfYear((-3540));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("The unit milliseconds must be at least 1", "l9<x%C?", false, 83, 83);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertNotNull(dateTimePrinter0);
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(40, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertNotNull(dateTimeParser0);
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(40, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(40, dateTimePrinter0.estimatePrintedLength());
      assertEquals(40, dateTimeParser0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(40, dateTimePrinter0.estimatePrintedLength());
      assertEquals(40, dateTimeParser0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      Integer integer0 = new Integer(292278993);
      assertNotNull(integer0);
      assertEquals(292278993, (int)integer0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "The unit milliseconds must be at least 1");
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertNotNull(charArrayWriter1);
      assertEquals("The unit milliseconds must be at least 1", charArrayWriter0.toString());
      assertEquals(40, charArrayWriter0.size());
      assertEquals(40, charArrayWriter1.size());
      assertEquals("The unit milliseconds must be at least 1", charArrayWriter1.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter1);
      assertNotNull(mockPrintWriter0);
      
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "The unit milliseconds must be at least 1");
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      assertEquals(80, charArrayWriter0.size());
      assertEquals("The unit milliseconds must be at least 1The unit milliseconds must be at least 1", charArrayWriter0.toString());
      assertEquals("The unit milliseconds must be at least 1The unit milliseconds must be at least 1", charArrayWriter1.toString());
      assertEquals(80, charArrayWriter1.size());
      
      dateTimeFormatter1.printTo((Writer) printWriter0, 1056L);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(40, dateTimePrinter0.estimatePrintedLength());
      assertEquals(40, dateTimeParser0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(120, charArrayWriter0.size());
      assertEquals("The unit milliseconds must be at least 1The unit milliseconds must be at least 1The unit milliseconds must be at least 1", charArrayWriter0.toString());
      assertEquals("The unit milliseconds must be at least 1The unit milliseconds must be at least 1The unit milliseconds must be at least 1", charArrayWriter1.toString());
      assertEquals(120, charArrayWriter1.size());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter2);
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(40, dateTimePrinter0.estimatePrintedLength());
      assertEquals(40, dateTimeParser0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(292278993, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear((-769));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter3);
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(40, dateTimePrinter0.estimatePrintedLength());
      assertEquals(40, dateTimeParser0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(292278993, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals((-769), (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      assertNotNull(localDateTime0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      
      boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertFalse(boolean0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      
      // Undeclared exception!
      try { 
        JulianChronology.getInstance(dateTimeZone0, 108);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 108
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 2086, 2086);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(">MX*");
      assertNotNull(mockPrintWriter0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("Mexico/G");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      assertNotNull(julianChronology0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      Chronology chronology0 = julianChronology0.withUTC();
      assertSame(julianChronology0, chronology0);
      assertSame(chronology0, julianChronology0);
      assertNotNull(chronology0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      dateTimeFormatterBuilder_Fraction0.printTo((Appendable) mockPrintWriter0, 1996L, chronology0);
      assertSame(julianChronology0, chronology0);
      assertSame(chronology0, julianChronology0);
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      int int0 = dateTimeFormatterBuilder_Fraction0.estimateParsedLength();
      assertEquals(18, int0);
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-1472), false);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      
      MonthDay monthDay0 = new MonthDay(dateTimeZone0);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      boolean boolean0 = linkedHashSet0.add((Locale) null);
      assertTrue(boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Locale locale0 = Locale.lookup(linkedList0, list0);
      assertNull(locale0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      dateTimeFormatterBuilder_TwoDigitYear0.printTo((Appendable) mockPrintWriter0, (ReadablePartial) monthDay0, (Locale) null);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendLiteral('v');
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder1.appendTimeZoneOffset((String) null, ">MX*", true, (-1472), 15271875);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName", "+b~{](3]qHh0WY>[iqM", false, 18, 18);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertEquals(58, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(58, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      CopticChronology copticChronology1 = (CopticChronology)copticChronology0.withUTC();
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertSame(copticChronology0, copticChronology1);
      assertSame(copticChronology1, copticChronology0);
      assertNotNull(copticChronology1);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(18, copticChronology1, (Locale) null, (Integer) 1, 6);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(dateTimeParserBucket0);
      assertEquals(1, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      
      int int0 = dateTimeFormatterBuilder_TimeZoneOffset0.parseInto(dateTimeParserBucket0, "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName", 18);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertSame(copticChronology0, copticChronology1);
      assertSame(copticChronology1, copticChronology0);
      assertEquals((-19), int0);
      assertEquals(58, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(58, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(1, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      
      int int0 = (-143);
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-143), true);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals((-143), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals((-143), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      
      Integer integer0 = new Integer((-143));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-143), (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(4505L, ethiopicChronology0, locale0, integer0, 1);
      assertEquals(1, EthiopicChronology.EE);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(dateTimeParserBucket0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals((-143), (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      int int1 = (-3540);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, "org/joda/time/tz/data", (-3540));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('o');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2425L), copticChronology0, locale0, (Integer) 1, 1);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals(1, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte) (-71);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)6, (byte)9, (byte)1, (byte)29, (byte)50, (byte) (-71)}, byteArray0);
      assertFalse(boolean0);
      
      StringBuilder stringBuilder0 = new StringBuilder("No formatter supplied");
      assertNotNull(stringBuilder0);
      assertEquals("No formatter supplied", stringBuilder0.toString());
      
      int int0 = dateTimeFormatterBuilder_CharacterLiteral0.parseInto(dateTimeParserBucket0, stringBuilder0, 1);
      assertEquals(1, CopticChronology.AM);
      assertEquals(2, int0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals(1, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals("No formatter supplied", stringBuilder0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendWeekOfWeekyear(37);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimePrinter0);
      assertEquals(1, dateTimePrinter0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeParser0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.append(dateTimePrinter0, dateTimeParser0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder2);
      assertEquals(1, dateTimePrinter0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeParser0.estimateParsedLength());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendText(dateTimeFieldType0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals(1, dateTimePrinter0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeParser0.estimateParsedLength());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.append(dateTimeParser0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals(1, dateTimePrinter0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeParser0.estimateParsedLength());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendTimeZoneShortName();
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertNotNull(dateTimeFormatterBuilder5);
      assertEquals(1, dateTimePrinter0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeParser0.estimateParsedLength());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder5.appendTimeZoneName((Map<String, DateTimeZone>) hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertNotNull(dateTimeFormatterBuilder6);
      assertEquals(1, dateTimePrinter0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeParser0.estimateParsedLength());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('H');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      
      Appendable appendable0 = null;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      
      File file0 = MockFile.createTempFile("Pacific/M", "Km$'8-;QsX`G7");
      assertNotNull(file0);
      assertEquals("/tmp/Pacific", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("M0Km$'8-;QsX`G7", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/Pacific/M0Km$'8-;QsX`G7", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      assertNotNull(mockPrintWriter0);
      
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "Km$'8-;QsX`G7");
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      assertEquals("/tmp/Pacific", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("M0Km$'8-;QsX`G7", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/Pacific/M0Km$'8-;QsX`G7", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      
      LocalDateTime localDateTime0 = new LocalDateTime(100000000L);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      
      dateTimeFormatterBuilder_CharacterLiteral0.printTo((Appendable) printWriter0, (ReadablePartial) localDateTime0, locale0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals("/tmp/Pacific", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("M0Km$'8-;QsX`G7", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/Pacific/M0Km$'8-;QsX`G7", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals(4, localDateTime0.size());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      YearMonth yearMonth0 = null;
      try {
        yearMonth0 = new YearMonth(dateTimeFormatterBuilder_TextField0, buddhistChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.joda.time.format.DateTimeFormatterBuilder$TextField
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      Chronology chronology0 = gregorianChronology0.withUTC();
      assertSame(gregorianChronology0, chronology0);
      assertSame(chronology0, gregorianChronology0);
      assertNotNull(chronology0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      
      Integer integer0 = new Integer(1937);
      assertNotNull(integer0);
      assertEquals(1937, (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(433L, chronology0, locale0, integer0, 1937);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(1937, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      int int0 = 57;
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket0, (CharSequence) null, 57);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TextField", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 363, false);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(363);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.363", dateTimeZone0.toString());
      assertEquals("+00:00:00.363", dateTimeZone0.getID());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.363", dateTimeZone0.toString());
      assertEquals("+00:00:00.363", dateTimeZone0.getID());
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(lenientChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.363", dateTimeZone0.toString());
      assertEquals("+00:00:00.363", dateTimeZone0.getID());
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      
      Integer integer0 = new Integer(16);
      assertNotNull(integer0);
      assertEquals(16, (int)integer0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(363, lenientChronology0, locale0, integer0, 16);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(dateTimeParserBucket0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.363", dateTimeZone0.toString());
      assertEquals("+00:00:00.363", dateTimeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals(16, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      
      int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "org/joda/time/tz/data", 363);
      assertEquals(1, CopticChronology.AM);
      assertEquals((-364), int0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.363", dateTimeZone0.toString());
      assertEquals("+00:00:00.363", dateTimeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals(16, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendHourOfHalfday(1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendSecondOfMinute(363);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_TwoDigitYear0);
      assertNotNull(dateTimePrinter0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(2, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[0];
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder2.append(dateTimePrinter0, dateTimeParserArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId[] dateTimeFormatterBuilder_TimeZoneIdArray0 = DateTimeFormatterBuilder.TimeZoneId.values();
      assertEquals(1, dateTimeFormatterBuilder_TimeZoneIdArray0.length);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneIdArray0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(1456, 1456);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendDayOfWeekText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendTwoDigitWeekyear(90, false);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder3);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 65, true);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      Chronology chronology0 = gJChronology0.withUTC();
      assertSame(gJChronology0, chronology0);
      assertSame(chronology0, gJChronology0);
      assertNotNull(chronology0);
      
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(chronology0);
      assertSame(gJChronology0, chronology0);
      assertSame(chronology0, gJChronology0);
      assertNotNull(dateTimeField0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimePrinter0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(65, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimeParser0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(65, dateTimeParser0.estimateParsedLength());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StringWriter stringWriter1 = stringWriter0.append('=');
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringWriter1);
      assertEquals("=", stringWriter0.toString());
      assertEquals("=", stringWriter1.toString());
      
      StringBuffer stringBuffer0 = new StringBuffer(45);
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) stringBuffer0);
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringWriter2, stringWriter0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter1, stringWriter2);
      assertNotNull(stringWriter2);
      assertEquals("=", stringWriter2.toString());
      assertEquals("=", stringWriter0.toString());
      assertEquals("=", stringWriter1.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      StringBuffer stringBuffer1 = stringWriter2.getBuffer();
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringWriter2, stringWriter0);
      assertNotSame(stringBuffer1, stringBuffer0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter1, stringWriter2);
      assertNotSame(stringBuffer0, stringBuffer1);
      assertNotNull(stringBuffer1);
      assertEquals("=", stringWriter2.toString());
      assertEquals(1, stringBuffer1.length());
      assertEquals("=", stringBuffer1.toString());
      assertEquals("=", stringWriter0.toString());
      assertEquals("=", stringWriter1.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      LocalDateTime localDateTime0 = new LocalDateTime(264L, (Chronology) gJChronology0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      
      dateTimePrinter0.printTo(stringBuffer1, (ReadablePartial) localDateTime0, locale0);
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertFalse(stringBuffer0.equals((Object)stringBuffer1));
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringWriter2, stringWriter0);
      assertNotSame(stringBuffer1, stringBuffer0);
      assertSame(gJChronology0, chronology0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter1, stringWriter2);
      assertNotSame(stringBuffer0, stringBuffer1);
      assertEquals("=0", stringWriter2.toString());
      assertEquals("=0", stringBuffer1.toString());
      assertEquals(2, stringBuffer1.length());
      assertEquals(4, localDateTime0.size());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(65, dateTimePrinter0.estimatePrintedLength());
      assertEquals("=0", stringWriter0.toString());
      assertEquals("=0", stringWriter1.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.append(dateTimePrinter0, dateTimeParser0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(65, dateTimePrinter0.estimatePrintedLength());
      assertEquals(65, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendMinuteOfHour(64);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertNotNull(dateTimeFormatterBuilder5);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(65, dateTimePrinter0.estimatePrintedLength());
      assertEquals(65, dateTimeParser0.estimateParsedLength());
      
      DateTimeParser dateTimeParser1 = dateTimeFormatterBuilder2.toParser();
      assertFalse(dateTimeParser1.equals((Object)dateTimeParser0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotSame(dateTimeParser1, dateTimeParser0);
      assertNotNull(dateTimeParser1);
      assertEquals(169, dateTimeParser1.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = dateTimeFormatterBuilder1.toFormatter();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertNotNull(dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 141;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMinuteOfHour(141);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneName((Map<String, DateTimeZone>) hashMap0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendSecondOfMinute(141);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder3);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendDecimal(dateTimeFieldType0, 141, 141);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder4);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.centuryOfEra();
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotNull(dateTimeFieldType1);
      assertEquals("centuryOfEra", dateTimeFieldType1.toString());
      assertEquals("centuryOfEra", dateTimeFieldType1.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendSecondOfDay(141);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder5);
      
      int int1 = (-59);
      DateTimeFormatter dateTimeFormatter0 = dateTimeFormatterBuilder4.toFormatter();
      assertFalse(dateTimeFieldType0.equals((Object)dateTimeFieldType1));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertNotSame(dateTimeFieldType0, dateTimeFieldType1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatter0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder4.appendFixedDecimal(dateTimeFieldType1, (-59));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal number of digits: -59
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = (-5371);
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTwoDigitYear((-5371), false);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeParser dateTimeParser0 = dateTimeFormatterBuilder0.toParser();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeParser0);
      assertEquals(2, dateTimeParser0.estimateParsedLength());
      
      DateTimePrinter dateTimePrinter0 = dateTimeFormatterBuilder1.toPrinter();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimePrinter0);
      assertEquals(2, dateTimePrinter0.estimatePrintedLength());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains(false));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertFalse(linkedList0.contains(false));
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.joda.time.format.DateTimeFormatterBuilder$TextField", false);
      assertNotNull(mockFileOutputStream0);
      
      // Undeclared exception!
      try { 
        Charset.forName("org.joda.time.format.DateTimeFormatterBuilder$TextField");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // org.joda.time.format.DateTimeFormatterBuilder$TextField
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = "N(3d`dmQy?p~&-xwj-";
      StringBuilder stringBuilder0 = new StringBuilder("N(3d`dmQy?p~&-xwj-");
      assertNotNull(stringBuilder0);
      assertEquals("N(3d`dmQy?p~&-xwj-", stringBuilder0.toString());
      
      int int0 = (-2390);
      // Undeclared exception!
      try { 
        DateTimeFormatterBuilder.csStartsWith(stringBuilder0, (-2390), "N(3d`dmQy?p~&-xwj-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2390
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfYear(44);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      HashMap<String, DateTimeZone> hashMap1 = new HashMap<String, DateTimeZone>(hashMap0);
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotNull(hashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneShortName((Map<String, DateTimeZone>) hashMap1);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendTimeZoneShortName();
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendFractionOfDay(44, 44);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendShortText(dateTimeFieldType0);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder5);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("US/H");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimePrinter0);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(4, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeParser0);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(4, dateTimeParser0.estimateParsedLength());
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance(gJChronology0);
      assertNotNull(strictChronology0);
      
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(strictChronology0, dateTimeZone0);
      assertNotNull(zonedChronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      Chronology chronology0 = zonedChronology0.withUTC();
      assertSame(chronology0, strictChronology0);
      assertSame(strictChronology0, chronology0);
      assertNotNull(chronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(chronology0);
      assertSame(chronology0, strictChronology0);
      assertSame(strictChronology0, chronology0);
      assertNotNull(dateTimeField0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      dateTimeParserArray0[0] = dateTimeParser0;
      DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder5.append(dateTimePrinter0, dateTimeParserArray0);
      assertEquals(1, dateTimeParserArray0.length);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder6);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(4, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = dateTimeFormatterBuilder4.toFormatter();
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isParser());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneName((Map<String, DateTimeZone>) hashMap0);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder7);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      boolean boolean0 = dateTimeFormatterBuilder5.canBuildParser();
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertFalse(boolean0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder3.appendDayOfYear(5);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder5);
      assertNotNull(dateTimeFormatterBuilder8);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder1.appendMonthOfYear(5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder8);
      assertNotNull(dateTimeFormatterBuilder9);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder5.appendTimeZoneOffset("", "US/H", false, 25, 48);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder4);
      assertNotNull(dateTimeFormatterBuilder10);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      DateTimePrinter dateTimePrinter1 = dateTimeFormatterBuilder3.toPrinter();
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertFalse(dateTimePrinter1.equals((Object)dateTimePrinter0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder8);
      assertNotSame(dateTimePrinter1, dateTimePrinter0);
      assertNotNull(dateTimePrinter1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals(120, dateTimePrinter1.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder2.appendMillisOfDay(5);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder8);
      assertNotNull(dateTimeFormatterBuilder11);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      Integer integer0 = Integer.getInteger("org.joda.time.chrono.BasicMonthOfYearDateTimeField", 0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(5, chronology0, locale0, integer0, 50);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(0, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      int int0 = dateTimeFormatterBuilder_StringLiteral0.parseInto(dateTimeParserBucket0, "", 65533);
      assertSame(chronology0, strictChronology0);
      assertSame(strictChronology0, chronology0);
      assertEquals((-65534), int0);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(0, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfYear(44);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      HashMap<String, DateTimeZone> hashMap1 = new HashMap<String, DateTimeZone>(hashMap0);
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotNull(hashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneShortName((Map<String, DateTimeZone>) hashMap1);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendTimeZoneShortName();
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendFractionOfDay(44, 44);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendShortText(dateTimeFieldType0);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertNotNull(dateTimeFormatterBuilder5);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("US/H");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimePrinter0);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(4, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeParser0);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(4, dateTimeParser0.estimateParsedLength());
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance(gJChronology0);
      assertNotNull(strictChronology0);
      
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(strictChronology0, dateTimeZone0);
      assertNotNull(zonedChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      Chronology chronology0 = zonedChronology0.withUTC();
      assertSame(chronology0, strictChronology0);
      assertSame(strictChronology0, chronology0);
      assertNotNull(chronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(chronology0);
      assertSame(chronology0, strictChronology0);
      assertSame(strictChronology0, chronology0);
      assertNotNull(dateTimeField0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      dateTimeParserArray0[0] = dateTimeParser0;
      DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder5.append(dateTimePrinter0, dateTimeParserArray0);
      assertEquals(1, dateTimeParserArray0.length);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertNotNull(dateTimeFormatterBuilder6);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(4, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneName((Map<String, DateTimeZone>) hashMap0);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder7);
      assertNotNull(dateTimeFormatterBuilder7);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      boolean boolean0 = dateTimeFormatterBuilder5.canBuildParser();
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder7);
      assertFalse(boolean0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder3.appendMillisOfDay(44);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder7);
      assertNotNull(dateTimeFormatterBuilder8);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder3.appendDayOfYear(5);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder9);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder1.appendMonthOfYear(5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder9);
      assertNotNull(dateTimeFormatterBuilder10);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder5.appendTimeZoneOffset("", "US/H", false, 25, 48);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder11);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      DateTimePrinter dateTimePrinter1 = dateTimeFormatterBuilder8.toPrinter();
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertFalse(dateTimePrinter1.equals((Object)dateTimePrinter0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder7);
      assertNotSame(dateTimePrinter1, dateTimePrinter0);
      assertNotNull(dateTimePrinter1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(164, dateTimePrinter1.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder2.appendMillisOfDay(5);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder12);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder12);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder12);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder12, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder12, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder12, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder12, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder12, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder12, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder12, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder12, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder12, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder12, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder12, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder12, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder12);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      boolean boolean1 = DateTimeFormatterBuilder.csStartsWithIgnoreCase("", 5, "US/H");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId[] dateTimeFormatterBuilder_TimeZoneIdArray0 = DateTimeFormatterBuilder.TimeZoneId.values();
      assertEquals(1, dateTimeFormatterBuilder_TimeZoneIdArray0.length);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneIdArray0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 65, true);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      Chronology chronology0 = gJChronology0.withUTC();
      assertSame(gJChronology0, chronology0);
      assertSame(chronology0, gJChronology0);
      assertNotNull(chronology0);
      
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(chronology0);
      assertSame(gJChronology0, chronology0);
      assertSame(chronology0, gJChronology0);
      assertNotNull(dateTimeField0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimePrinter0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(65, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimeParser0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(65, dateTimeParser0.estimateParsedLength());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append('=');
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringWriter1);
      assertEquals("=", stringWriter0.toString());
      assertEquals("=", stringWriter1.toString());
      
      StringBuffer stringBuffer0 = new StringBuffer(45);
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      StringBuffer stringBuffer1 = stringWriter1.getBuffer();
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals("=", stringWriter0.toString());
      assertEquals("=", stringWriter1.toString());
      assertEquals("=", stringBuffer1.toString());
      assertEquals(1, stringBuffer1.length());
      
      LocalDateTime localDateTime0 = new LocalDateTime(264L, (Chronology) gJChronology0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      
      dateTimePrinter0.printTo(stringBuffer1, (ReadablePartial) localDateTime0, locale0);
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertSame(gJChronology0, chronology0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotSame(stringBuffer1, stringBuffer0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(65, dateTimePrinter0.estimatePrintedLength());
      assertEquals("=0", stringWriter0.toString());
      assertEquals("=0", stringWriter1.toString());
      assertEquals(2, stringBuffer1.length());
      assertEquals("=0", stringBuffer1.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      
      dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Appendable) stringBuffer1, 1042L, chronology0, 65, (DateTimeZone) null, locale0);
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertSame(gJChronology0, chronology0);
      assertSame(chronology0, gJChronology0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotSame(stringBuffer1, stringBuffer0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals("=01", stringWriter0.toString());
      assertEquals("=01", stringWriter1.toString());
      assertEquals(3, stringBuffer1.length());
      assertEquals("=01", stringBuffer1.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("e/", "e/", false, 8, 8);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(strictChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(strictChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(lenientChronology0);
      
      Chronology chronology0 = lenientChronology0.withUTC();
      assertEquals(1, IslamicChronology.AH);
      assertSame(lenientChronology0, chronology0);
      assertSame(chronology0, lenientChronology0);
      assertNotNull(chronology0);
      
      Integer integer0 = new Integer(6141);
      assertNotNull(integer0);
      assertEquals(6141, (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(8, chronology0, (Locale) null, integer0, 6141);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(dateTimeParserBucket0);
      assertEquals(6141, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      
      int int0 = dateTimeFormatterBuilder_TimeZoneOffset0.parseInto(dateTimeParserBucket0, "e/", 6141);
      assertEquals(1, IslamicChronology.AH);
      assertSame(lenientChronology0, chronology0);
      assertSame(chronology0, lenientChronology0);
      assertEquals((-6142), int0);
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(6141, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendLiteral('z');
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder1.appendSecondOfDay((-733));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("The unit milliseconds must be at least 1", "l9<x%C?", false, 83, 83);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertNotNull(dateTimePrinter0);
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(40, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertNotNull(dateTimeParser0);
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(40, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(40, dateTimePrinter0.estimatePrintedLength());
      assertEquals(40, dateTimeParser0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(40, dateTimePrinter0.estimatePrintedLength());
      assertEquals(40, dateTimeParser0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      Integer integer0 = new Integer(292278993);
      assertNotNull(integer0);
      assertEquals(292278993, (int)integer0);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter2);
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(40, dateTimePrinter0.estimatePrintedLength());
      assertEquals(40, dateTimeParser0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(292278993, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear((-769));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter3);
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(40, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(40, dateTimePrinter0.estimatePrintedLength());
      assertEquals(40, dateTimeParser0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(292278993, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals((-769), (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter3.parseLocalDateTime("V~R!Nb");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"V~R!Nb\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 363, true);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(lenientChronology0);
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      
      Integer integer0 = new Integer(16);
      assertNotNull(integer0);
      assertEquals(16, (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(363, lenientChronology0, locale0, integer0, 16);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals(16, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "org/joda/time/tz/data", (-1580));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfYear(44);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      HashMap<String, DateTimeZone> hashMap1 = new HashMap<String, DateTimeZone>(hashMap0);
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotNull(hashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneShortName((Map<String, DateTimeZone>) hashMap1);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendTimeZoneShortName();
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendTwoDigitYear(44);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendShortText(dateTimeFieldType0);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertNotNull(dateTimeFormatterBuilder5);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("US/H");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimePrinter0);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(4, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeParser0);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(4, dateTimeParser0.estimateParsedLength());
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance(gJChronology0);
      assertNotNull(strictChronology0);
      
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(strictChronology0, dateTimeZone0);
      assertNotNull(zonedChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      Chronology chronology0 = zonedChronology0.withUTC();
      assertSame(chronology0, strictChronology0);
      assertSame(strictChronology0, chronology0);
      assertNotNull(chronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(chronology0);
      assertSame(chronology0, strictChronology0);
      assertSame(strictChronology0, chronology0);
      assertNotNull(dateTimeField0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      dateTimeParserArray0[0] = dateTimeParser0;
      DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder5.append(dateTimePrinter0, dateTimeParserArray0);
      assertEquals(1, dateTimeParserArray0.length);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder6);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(4, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneName((Map<String, DateTimeZone>) hashMap0);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertNotNull(dateTimeFormatterBuilder7);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      boolean boolean0 = dateTimeFormatterBuilder5.canBuildParser();
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertFalse(boolean0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder3.appendMillisOfDay(44);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder8);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder3.appendDayOfYear(5);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder9);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder1.appendMonthOfYear(5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder5);
      assertNotNull(dateTimeFormatterBuilder10);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder5.appendTimeZoneOffset("", "US/H", false, 25, 48);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder6);
      assertNotNull(dateTimeFormatterBuilder11);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      DateTimePrinter dateTimePrinter1 = dateTimeFormatterBuilder8.toPrinter();
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertFalse(dateTimePrinter1.equals((Object)dateTimePrinter0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder9);
      assertNotSame(dateTimePrinter1, dateTimePrinter0);
      assertNotNull(dateTimePrinter1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals(148, dateTimePrinter1.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder2.appendMillisOfDay(5);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder12);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder12);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder12);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder12, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder12, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder12, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder12, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder12, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder12, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder12, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder12, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder12, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder12, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder12, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder12, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder12);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('~');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      
      Integer integer0 = new Integer(85);
      assertNotNull(integer0);
      assertEquals(85, (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(25, zonedChronology0, locale0, integer0, (-282));
      assertNotNull(dateTimeParserBucket0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(85, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      int int0 = dateTimeFormatterBuilder_CharacterLiteral0.parseInto(dateTimeParserBucket0, "org/joda/time/tz/data", 44);
      assertSame(strictChronology0, chronology0);
      assertEquals((-45), int0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(85, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId[] dateTimeFormatterBuilder_TimeZoneIdArray0 = DateTimeFormatterBuilder.TimeZoneId.values();
      assertEquals(1, dateTimeFormatterBuilder_TimeZoneIdArray0.length);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneIdArray0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(1456, 1456);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendDayOfWeekText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendTwoDigitWeekyear(90, false);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder3);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 65, true);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      Chronology chronology0 = gJChronology0.withUTC();
      assertSame(gJChronology0, chronology0);
      assertSame(chronology0, gJChronology0);
      assertNotNull(chronology0);
      
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(chronology0);
      assertSame(gJChronology0, chronology0);
      assertSame(chronology0, gJChronology0);
      assertNotNull(dateTimeField0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimePrinter0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(65, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimeParser0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(65, dateTimeParser0.estimateParsedLength());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append('=');
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringWriter1);
      assertEquals("=", stringWriter0.toString());
      assertEquals("=", stringWriter1.toString());
      
      StringBuffer stringBuffer0 = new StringBuffer(45);
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) stringBuffer0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter2, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertNotNull(stringWriter2);
      assertEquals("=", stringWriter0.toString());
      assertEquals("=", stringWriter1.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("=", stringWriter2.toString());
      
      StringBuffer stringBuffer1 = stringWriter2.getBuffer();
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertNotSame(stringBuffer1, stringBuffer0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter1, stringWriter2);
      assertNotSame(stringBuffer0, stringBuffer1);
      assertSame(stringWriter2, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertNotNull(stringBuffer1);
      assertEquals("=", stringBuffer1.toString());
      assertEquals(1, stringBuffer1.length());
      assertEquals("=", stringWriter0.toString());
      assertEquals("=", stringWriter1.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("=", stringWriter2.toString());
      
      LocalDateTime localDateTime0 = new LocalDateTime(264L, (Chronology) gJChronology0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      
      dateTimePrinter0.printTo(stringBuffer1, (ReadablePartial) localDateTime0, locale0);
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertFalse(stringBuffer0.equals((Object)stringBuffer1));
      assertNotSame(stringBuffer1, stringBuffer0);
      assertSame(gJChronology0, chronology0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter1, stringWriter2);
      assertNotSame(stringBuffer0, stringBuffer1);
      assertSame(stringWriter2, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertEquals("=0", stringBuffer1.toString());
      assertEquals(2, stringBuffer1.length());
      assertEquals(4, localDateTime0.size());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(65, dateTimePrinter0.estimatePrintedLength());
      assertEquals("=0", stringWriter0.toString());
      assertEquals("=0", stringWriter1.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("=0", stringWriter2.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.append(dateTimePrinter0, dateTimeParser0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(65, dateTimePrinter0.estimatePrintedLength());
      assertEquals(65, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendMinuteOfHour(64);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder5);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(65, dateTimePrinter0.estimatePrintedLength());
      assertEquals(65, dateTimeParser0.estimateParsedLength());
      
      DateTimeParser dateTimeParser1 = dateTimeFormatterBuilder2.toParser();
      assertFalse(dateTimeParser1.equals((Object)dateTimeParser0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertNotSame(dateTimeParser1, dateTimeParser0);
      assertNotNull(dateTimeParser1);
      assertEquals(169, dateTimeParser1.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder5.appendText(dateTimeFieldType0);
      assertFalse(dateTimeParser0.equals((Object)dateTimeParser1));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertNotSame(dateTimeParser0, dateTimeParser1);
      assertNotNull(dateTimeFormatterBuilder6);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(65, dateTimePrinter0.estimatePrintedLength());
      assertEquals(65, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 4978125, false);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(4978125, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals(4978125, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      
      Locale locale1 = Locale.KOREAN;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("ko", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      
      Integer integer0 = new Integer(90);
      assertNotNull(integer0);
      assertEquals(90, (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1456, gJChronology0, locale1, integer0, 1456);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(dateTimeParserBucket0);
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("ko", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(90, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      int int0 = dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, stringBuffer0, 4978125);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(stringBuffer0.equals((Object)stringBuffer1));
      assertSame(gJChronology0, chronology0);
      assertNotSame(locale1, locale0);
      assertNotSame(stringBuffer0, stringBuffer1);
      assertEquals((-4978126), int0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(4978125, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals(4978125, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("ko", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(90, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 2086, 2086);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      
      String string0 = ">MX*";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(">MX*");
      assertNotNull(mockPrintWriter0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("Mexico/G");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      assertNotNull(julianChronology0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      dateTimeFormatterBuilder_Fraction0.printTo((Appendable) mockPrintWriter0, 1996L, (Chronology) julianChronology0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      int int0 = dateTimeFormatterBuilder_Fraction0.estimateParsedLength();
      assertEquals(18, int0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      
      int int1 = (-1472);
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-1472), false);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      
      // Undeclared exception!
      try { 
        MonthDay.parse("org/joda/time/tz/data");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org/joda/time/tz/data\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfYear(44);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      HashMap<String, DateTimeZone> hashMap1 = new HashMap<String, DateTimeZone>(hashMap0);
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotNull(hashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneShortName((Map<String, DateTimeZone>) hashMap1);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendClockhourOfHalfday(44);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendFractionOfDay(44, 44);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendShortText(dateTimeFieldType0);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder5);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("US/H");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimePrinter0);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(4, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeParser0);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(4, dateTimeParser0.estimateParsedLength());
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance(gJChronology0);
      assertNotNull(strictChronology0);
      
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(strictChronology0, dateTimeZone0);
      assertNotNull(zonedChronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      Chronology chronology0 = zonedChronology0.withUTC();
      assertSame(chronology0, strictChronology0);
      assertSame(strictChronology0, chronology0);
      assertNotNull(chronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(chronology0);
      assertSame(chronology0, strictChronology0);
      assertSame(strictChronology0, chronology0);
      assertNotNull(dateTimeField0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      dateTimeParserArray0[0] = dateTimeParser0;
      DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder5.append(dateTimePrinter0, dateTimeParserArray0);
      assertEquals(1, dateTimeParserArray0.length);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder6);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(4, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneName((Map<String, DateTimeZone>) hashMap0);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder7);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      boolean boolean0 = dateTimeFormatterBuilder5.canBuildParser();
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertTrue(boolean0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder3.appendMillisOfDay(44);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder8);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder3.appendDayOfYear(5);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder9);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder1.appendMonthOfYear(5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder10);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder5.appendTimeZoneOffset("", "US/H", true, 25, 48);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder7);
      assertNotNull(dateTimeFormatterBuilder11);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      DateTimePrinter dateTimePrinter1 = dateTimeFormatterBuilder8.toPrinter();
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertFalse(dateTimePrinter1.equals((Object)dateTimePrinter0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder0);
      assertNotSame(dateTimePrinter1, dateTimePrinter0);
      assertNotNull(dateTimePrinter1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(207, dateTimePrinter1.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder2.appendMillisOfDay(5);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder12);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder12);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder12);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder12, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder12, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder12, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder12, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder12, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder12, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder12, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder12, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder12, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder12, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder12, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder12, dateTimeFormatterBuilder6);
      assertNotNull(dateTimeFormatterBuilder12);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 77, true);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals(77, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(77, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      
      Integer integer0 = new Integer(48);
      assertNotNull(integer0);
      assertEquals(48, (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(5, gJChronology0, locale0, integer0, 236548278);
      assertNotNull(dateTimeParserBucket0);
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(48, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      
      int int0 = dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, "US/H", 335);
      assertEquals((-336), int0);
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(48, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals(77, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(77, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-59), (-59));
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals((-59), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-59), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2036));
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:02.036", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.036", dateTimeZone0.toString());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      assertNotNull(iSOChronology0);
      assertEquals("-00:00:02.036", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.036", dateTimeZone0.toString());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      Integer integer0 = new Integer((-2036));
      assertNotNull(integer0);
      assertEquals((-2036), (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(965L, iSOChronology0, locale0, integer0, 3172);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("-00:00:02.036", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.036", dateTimeZone0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals((-2036), (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      
      int int0 = dateTimeFormatterBuilder_Fraction0.parseInto(dateTimeParserBucket0, "org/joda/time/tz/data", (-1258));
      assertEquals(1257, int0);
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals((-59), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-59), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals("-00:00:02.036", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.036", dateTimeZone0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals((-2036), (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-686), false);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals((-686), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals((-686), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      
      dateTimeFormatterBuilder_FixedNumber0.printTo((Appendable) charBuffer0, (long) (-2036), (Chronology) iSOChronology0, (-690), dateTimeZone0, locale0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("-00:00:02.036", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.036", dateTimeZone0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals((-686), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals((-686), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      InternalParser[] internalParserArray0 = new InternalParser[8];
      internalParserArray0[0] = (InternalParser) dateTimeFormatterBuilder_FixedNumber0;
      internalParserArray0[1] = (InternalParser) dateTimeFormatterBuilder_Fraction0;
      internalParserArray0[2] = (InternalParser) dateTimeFormatterBuilder_Fraction0;
      internalParserArray0[3] = (InternalParser) dateTimeFormatterBuilder_Fraction0;
      internalParserArray0[4] = (InternalParser) dateTimeFormatterBuilder_Fraction0;
      internalParserArray0[5] = (InternalParser) dateTimeFormatterBuilder_Fraction0;
      internalParserArray0[6] = (InternalParser) dateTimeFormatterBuilder_Fraction0;
      internalParserArray0[7] = (InternalParser) dateTimeFormatterBuilder_FixedNumber0;
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(internalParserArray0);
      assertEquals(8, internalParserArray0.length);
      assertNotNull(dateTimeFormatterBuilder_MatchingParser0);
      assertEquals(0, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_MatchingParser0);
      assertEquals(8, internalParserArray0.length);
      assertNotNull(dateTimeParser0);
      assertEquals(0, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      assertEquals(0, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendOptional(dateTimeParser0);
      assertEquals(8, internalParserArray0.length);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder1);
      assertEquals(0, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      assertEquals(0, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendDayOfWeek(83);
      assertEquals(8, internalParserArray0.length);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder2);
      assertEquals(0, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      assertEquals(0, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendCenturyOfEra(116, (-390));
      assertEquals(8, internalParserArray0.length);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals(0, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      assertEquals(0, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendMillisOfSecond(116);
      assertEquals(8, internalParserArray0.length);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals(0, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      assertEquals(0, dateTimeParser0.estimateParsedLength());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder4.appendSecondOfMinute((-686));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 363, true);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(lenientChronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      
      Integer integer0 = new Integer(16);
      assertNotNull(integer0);
      assertEquals(16, (int)integer0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(363, lenientChronology0, locale0, integer0, 16);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals(16, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      
      int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "org/joda/time/tz/data", 363);
      assertEquals(1, CopticChronology.AM);
      assertEquals((-364), int0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals(16, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendHourOfHalfday(1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendYear((-4188), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      HashMap<String, DateTimeZone> hashMap1 = new HashMap<String, DateTimeZone>(hashMap0);
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotNull(hashMap1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("US/H");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimePrinter0);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(4, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeParser0);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(4, dateTimeParser0.estimateParsedLength());
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance(gJChronology0);
      assertNotNull(strictChronology0);
      
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(strictChronology0, dateTimeZone0);
      assertNotNull(zonedChronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      Chronology chronology0 = zonedChronology0.withUTC();
      assertSame(strictChronology0, chronology0);
      assertSame(chronology0, strictChronology0);
      assertNotNull(chronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(chronology0);
      assertSame(strictChronology0, chronology0);
      assertSame(chronology0, strictChronology0);
      assertNotNull(dateTimeField0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      dateTimeParserArray0[0] = dateTimeParser0;
      boolean boolean0 = DateTimeFormatterBuilder.csStartsWith("org/joda/time/tz/data", 2311, "");
      assertFalse(boolean0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfMonth(2243);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendFixedSignedDecimal(dateTimeFieldType0, 2311);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendHalfdayOfDayText();
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendLiteral('3');
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendYearOfEra(2086, (-2014));
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertNotNull(dateTimeFormatterBuilder5);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder5.appendFraction(dateTimeFieldType0, (-2014), 1933);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfYear(44);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      HashMap<String, DateTimeZone> hashMap1 = new HashMap<String, DateTimeZone>(hashMap0);
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotNull(hashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneShortName((Map<String, DateTimeZone>) hashMap1);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder1.appendFractionOfDay(44, 44);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder3);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendShortText(dateTimeFieldType0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      String string0 = "US/H";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("US/H");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimePrinter0);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(4, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeParser0);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(4, dateTimeParser0.estimateParsedLength());
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance(gJChronology0);
      assertNotNull(strictChronology0);
      
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(strictChronology0, dateTimeZone0);
      assertNotNull(zonedChronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      Chronology chronology0 = zonedChronology0.withUTC();
      assertSame(chronology0, strictChronology0);
      assertSame(strictChronology0, chronology0);
      assertNotNull(chronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(chronology0);
      assertSame(chronology0, strictChronology0);
      assertSame(strictChronology0, chronology0);
      assertNotNull(dateTimeField0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      dateTimeParserArray0[0] = dateTimeParser0;
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendTimeZoneName((Map<String, DateTimeZone>) hashMap0);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertNotSame(hashMap0, hashMap1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertNotNull(dateTimeFormatterBuilder5);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder5.appendClockhourOfDay(44);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertNotSame(hashMap0, hashMap1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertNotNull(dateTimeFormatterBuilder6);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      boolean boolean0 = dateTimeFormatterBuilder4.canBuildParser();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertTrue(boolean0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.append((DateTimeFormatter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No formatter supplied
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 2086, 2086);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(">MX*");
      assertNotNull(mockPrintWriter0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("Mexico/G");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      assertNotNull(julianChronology0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      Chronology chronology0 = julianChronology0.withUTC();
      assertSame(julianChronology0, chronology0);
      assertSame(chronology0, julianChronology0);
      assertNotNull(chronology0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      dateTimeFormatterBuilder_Fraction0.printTo((Appendable) mockPrintWriter0, 1996L, chronology0);
      assertSame(julianChronology0, chronology0);
      assertSame(chronology0, julianChronology0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      int int0 = dateTimeFormatterBuilder_Fraction0.estimateParsedLength();
      assertEquals(18, int0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-1472), false);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      
      MonthDay monthDay0 = MonthDay.now(chronology0);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertSame(julianChronology0, chronology0);
      assertSame(chronology0, julianChronology0);
      assertNotNull(monthDay0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean0 = linkedHashSet0.add((Locale) null);
      assertTrue(boolean0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Locale locale0 = Locale.lookup(linkedList0, list0);
      assertNull(locale0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      dateTimeFormatterBuilder_TwoDigitYear0.printTo((Appendable) mockPrintWriter0, (ReadablePartial) monthDay0, (Locale) null);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertSame(julianChronology0, chronology0);
      assertSame(chronology0, julianChronology0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendLiteral('v');
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      dateTimeFormatterBuilder_Fraction0.printTo((Appendable) mockPrintWriter0, (-1236L), chronology0, 2, dateTimeZone0, (Locale) null);
      assertSame(julianChronology0, chronology0);
      assertSame(chronology0, julianChronology0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder1.appendTimeZoneOffset((String) null, ">MX*", true, (-1472), 15271875);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 90;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTwoDigitWeekyear(90);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder1.appendText((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 363, false);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(lenientChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      
      Integer integer0 = new Integer(16);
      assertNotNull(integer0);
      assertEquals(16, (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(363, lenientChronology0, locale0, integer0, 16);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals(16, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      
      int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "org/joda/time/tz/data", 16);
      assertEquals(1, CopticChronology.AM);
      assertEquals((-17), int0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals(16, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendYear((-4206), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-1984), (-1984));
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals((-1984), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-1984), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      
      File file0 = MockFile.createTempFile("%.{LjJ7m", "%.{LjJ7m");
      assertNotNull(file0);
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("%.{LjJ7m0%.{LjJ7m", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/%.{LjJ7m0%.{LjJ7m", file0.toString());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format("Range duration field must be precise", objectArray0);
      assertEquals(0, objectArray0.length);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("%.{LjJ7m0%.{LjJ7m", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/%.{LjJ7m0%.{LjJ7m", file0.toString());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      Integer integer0 = new Integer((-2147483646));
      assertNotNull(integer0);
      assertEquals((-2147483646), (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-3888L), gregorianChronology0, (Locale) null, integer0, 814);
      assertNotNull(dateTimeParserBucket0);
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals((-2147483646), (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
      assertNotNull(dateTimeZone0);
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals((-2147483646), (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals((-2147483646), (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      IslamicChronology islamicChronology1 = (IslamicChronology)islamicChronology0.withUTC();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertNotNull(islamicChronology1);
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals((-2147483646), (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      dateTimeFormatterBuilder_Fraction0.printTo((Appendable) printWriter0, 2299L, (Chronology) islamicChronology1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(0, objectArray0.length);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals((-1984), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-1984), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("%.{LjJ7m0%.{LjJ7m", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/%.{LjJ7m0%.{LjJ7m", file0.toString());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals((-2147483646), (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfDay(18, 18);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendHalfdayOfDayText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendYear(18, 18);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder3);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendTwoDigitWeekyear(18, true);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder4);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendMillisOfDay(18);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder5);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder5.appendCenturyOfEra(18, 18);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertNotNull(dateTimeFormatterBuilder6);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains(18));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertFalse(linkedList0.contains(18));
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      
      StringBuilder stringBuilder0 = new StringBuilder(18);
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append('E');
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      assertEquals("E", stringBuilder0.toString());
      assertEquals("E", stringBuilder1.toString());
      
      StringBuffer stringBuffer0 = null;
      StringBuilder stringBuilder2 = stringBuilder1.append((StringBuffer) null);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertNotNull(stringBuilder2);
      assertEquals("Enull", stringBuilder0.toString());
      assertEquals("Enull", stringBuilder1.toString());
      assertEquals("Enull", stringBuilder2.toString());
      
      StringBuilder stringBuilder3 = stringBuilder2.append((CharSequence) null);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      assertNotNull(stringBuilder3);
      assertEquals("Enullnull", stringBuilder0.toString());
      assertEquals("Enullnull", stringBuilder1.toString());
      assertEquals("Enullnull", stringBuilder2.toString());
      assertEquals("Enullnull", stringBuilder3.toString());
      
      StringBuilder stringBuilder4 = stringBuilder3.append((long) 18);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder2);
      assertNotNull(stringBuilder4);
      assertEquals("Enullnull18", stringBuilder0.toString());
      assertEquals("Enullnull18", stringBuilder1.toString());
      assertEquals("Enullnull18", stringBuilder2.toString());
      assertEquals("Enullnull18", stringBuilder3.toString());
      assertEquals("Enullnull18", stringBuilder4.toString());
      
      long long0 = 100000L;
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      int int0 = (-90);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-90));
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:00.090", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.090", dateTimeZone0.getID());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(julianChronology0, dateTimeZone0);
      assertNotNull(zonedChronology0);
      assertEquals("-00:00:00.090", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.090", dateTimeZone0.getID());
      
      DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(dateTimeZone1);
      assertEquals("-00:00:00.090", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.090", dateTimeZone0.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("-00:00:00.090", dateTimeZone1.toString());
      assertEquals("-00:00:00.090", dateTimeZone1.getID());
      
      int int1 = 12;
      // Undeclared exception!
      try { 
        GregorianChronology.getInstance(dateTimeZone1, 12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 12
         //
         verifyException("org.joda.time.chrono.GregorianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField((DateTimeFieldType) null, true);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      
      char[] charArray0 = new char[1];
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      charArray0[0] = '7';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'7'}, charArray0);
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.remaining());
      assertEquals("7", charBuffer0.toString());
      
      LocalTime localTime0 = new LocalTime((-801L));
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.plusMinutes((-840));
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotNull(localTime1);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      dateTimeFormatterBuilder_TextField0.printTo((Appendable) charBuffer0, (ReadablePartial) localTime1, locale0);
      assertEquals(1, charArray0.length);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertArrayEquals(new char[] {'\uFFFD'}, charArray0);
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      int int0 = dateTimeFormatterBuilder_TextField0.estimateParsedLength();
      assertEquals(6, int0);
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, (-840), true);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals((-840), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals((-840), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      
      Instant instant0 = Instant.ofEpochMilli(10000L);
      assertNotNull(instant0);
      assertEquals(10000L, instant0.getMillis());
      
      Instant instant1 = instant0.toInstant();
      assertSame(instant0, instant1);
      assertSame(instant1, instant0);
      assertNotNull(instant1);
      assertEquals(10000L, instant0.getMillis());
      assertEquals(10000L, instant1.getMillis());
      
      Chronology chronology0 = instant1.getChronology();
      assertSame(instant0, instant1);
      assertSame(instant1, instant0);
      assertNotNull(chronology0);
      assertEquals(10000L, instant0.getMillis());
      assertEquals(10000L, instant1.getMillis());
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Appendable) charBuffer0, (-801L), chronology0, (-439), dateTimeZone0, locale0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField((DateTimeFieldType) null, true);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      
      char[] charArray0 = new char[1];
      charArray0[0] = '7';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'7'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals("7", charBuffer0.toString());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.remaining());
      
      LocalTime localTime0 = new LocalTime((-801L));
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      String string0 = localTime0.toString();
      assertNotNull(string0);
      assertEquals("23:59:59.199", string0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.plusMinutes((-840));
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotNull(localTime1);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      dateTimeFormatterBuilder_TextField0.printTo((Appendable) charBuffer0, (ReadablePartial) localTime1, locale0);
      assertEquals(1, charArray0.length);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertArrayEquals(new char[] {'\uFFFD'}, charArray0);
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      int int0 = dateTimeFormatterBuilder_TextField0.estimateParsedLength();
      assertEquals(6, int0);
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneName();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_TextField0);
      assertNotNull(dateTimePrinter0);
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(6, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_TextField0);
      assertNotNull(dateTimeParser0);
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(6, dateTimeParser0.estimateParsedLength());
      
      dateTimeParserArray0[0] = dateTimeParser0;
      DateTimeParser dateTimeParser1 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_TextField0);
      assertTrue(dateTimeParser1.equals((Object)dateTimeParser0));
      assertNotSame(dateTimeParser1, dateTimeParser0);
      assertNotNull(dateTimeParser1);
      assertEquals(6, dateTimeParser1.estimateParsedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      
      dateTimeParserArray0[1] = dateTimeParser1;
      DateTimeParser dateTimeParser2 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_TextField0);
      assertTrue(dateTimeParser2.equals((Object)dateTimeParser0));
      assertTrue(dateTimeParser2.equals((Object)dateTimeParser1));
      assertNotSame(dateTimeParser2, dateTimeParser0);
      assertNotSame(dateTimeParser2, dateTimeParser1);
      assertNotNull(dateTimeParser2);
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(6, dateTimeParser2.estimateParsedLength());
      
      dateTimeParserArray0[2] = dateTimeParser2;
      DateTimeParser dateTimeParser3 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_TextField0);
      assertTrue(dateTimeParser3.equals((Object)dateTimeParser2));
      assertTrue(dateTimeParser3.equals((Object)dateTimeParser1));
      assertTrue(dateTimeParser3.equals((Object)dateTimeParser0));
      assertNotSame(dateTimeParser3, dateTimeParser0);
      assertNotSame(dateTimeParser3, dateTimeParser1);
      assertNotSame(dateTimeParser3, dateTimeParser2);
      assertNotNull(dateTimeParser3);
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(6, dateTimeParser3.estimateParsedLength());
      
      dateTimeParserArray0[3] = dateTimeParser3;
      DateTimeParser dateTimeParser4 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_TextField0);
      assertTrue(dateTimeParser4.equals((Object)dateTimeParser2));
      assertTrue(dateTimeParser4.equals((Object)dateTimeParser0));
      assertTrue(dateTimeParser4.equals((Object)dateTimeParser1));
      assertTrue(dateTimeParser4.equals((Object)dateTimeParser3));
      assertNotSame(dateTimeParser4, dateTimeParser0);
      assertNotSame(dateTimeParser4, dateTimeParser3);
      assertNotSame(dateTimeParser4, dateTimeParser1);
      assertNotSame(dateTimeParser4, dateTimeParser2);
      assertNotNull(dateTimeParser4);
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(6, dateTimeParser4.estimateParsedLength());
      
      dateTimeParserArray0[4] = dateTimeParser4;
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.append(dateTimePrinter0, dateTimeParserArray0);
      assertEquals(5, dateTimeParserArray0.length);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder2);
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(6, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.append(dateTimePrinter0, dateTimeParserArray0[1]);
      assertEquals(5, dateTimeParserArray0.length);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(6, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendEraText();
      assertEquals(5, dateTimeParserArray0.length);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(6, dateTimePrinter0.estimatePrintedLength());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder4.appendCenturyOfEra((-3345), (-733));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction((DateTimeFieldType) null, 17, 5);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals(5, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(5, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      Chronology chronology0 = julianChronology0.withUTC();
      assertSame(julianChronology0, chronology0);
      assertSame(chronology0, julianChronology0);
      assertNotNull(chronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(chronology0);
      assertSame(julianChronology0, chronology0);
      assertSame(chronology0, julianChronology0);
      assertNotNull(lenientChronology0);
      
      Chronology chronology1 = lenientChronology0.withUTC();
      assertSame(julianChronology0, chronology0);
      assertSame(chronology0, julianChronology0);
      assertSame(lenientChronology0, chronology1);
      assertSame(chronology1, lenientChronology0);
      assertNotNull(chronology1);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_Fraction0.printTo((Appendable) null, 1980L, chronology1, 8, dateTimeZone0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField((DateTimeFieldType) null, true);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      
      char[] charArray0 = new char[1];
      charArray0[0] = '7';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'7'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.remaining());
      assertEquals("7", charBuffer0.toString());
      
      LocalTime localTime0 = new LocalTime((-801L));
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.plusMinutes((-840));
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotNull(localTime1);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      
      dateTimeFormatterBuilder_TextField0.printTo((Appendable) charBuffer0, (ReadablePartial) localTime1, locale0);
      assertEquals(1, charArray0.length);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertArrayEquals(new char[] {'\uFFFD'}, charArray0);
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      
      int int0 = dateTimeFormatterBuilder_TextField0.estimateParsedLength();
      assertEquals(6, int0);
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 6, true);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(579);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.579", dateTimeZone0.toString());
      assertEquals("+00:00:00.579", dateTimeZone0.getID());
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.579", dateTimeZone0.toString());
      assertEquals("+00:00:00.579", dateTimeZone0.getID());
      
      IslamicChronology islamicChronology1 = (IslamicChronology)islamicChronology0.withUTC();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
      assertNotNull(islamicChronology1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.579", dateTimeZone0.toString());
      assertEquals("+00:00:00.579", dateTimeZone0.getID());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_TwoDigitYear0.printTo((Appendable) charBuffer0, (-2319L), (Chronology) islamicChronology1, 579, dateTimeZone0, locale0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-59), (-59));
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals((-59), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-59), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2036));
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.036", dateTimeZone0.getID());
      assertEquals("-00:00:02.036", dateTimeZone0.toString());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      assertNotNull(iSOChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.036", dateTimeZone0.getID());
      assertEquals("-00:00:02.036", dateTimeZone0.toString());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      Integer integer0 = new Integer((-2036));
      assertNotNull(integer0);
      assertEquals((-2036), (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1000L, iSOChronology0, locale0, integer0, 3172);
      assertNotNull(dateTimeParserBucket0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.036", dateTimeZone0.getID());
      assertEquals("-00:00:02.036", dateTimeZone0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals((-2036), (int)dateTimeParserBucket0.getPivotYear());
      
      int int0 = dateTimeFormatterBuilder_Fraction0.parseInto(dateTimeParserBucket0, "org/joda/time/tz/data", (-1258));
      assertEquals(1257, int0);
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals((-59), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-59), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.036", dateTimeZone0.getID());
      assertEquals("-00:00:02.036", dateTimeZone0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals((-2036), (int)dateTimeParserBucket0.getPivotYear());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfYear(44);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      HashMap<String, DateTimeZone> hashMap1 = new HashMap<String, DateTimeZone>(hashMap0);
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotNull(hashMap1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneShortName((Map<String, DateTimeZone>) hashMap1);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendTimeZoneShortName();
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder3);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendFractionOfDay(44, 44);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertNotNull(dateTimeFormatterBuilder4);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendShortText(dateTimeFieldType0);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertNotNull(dateTimeFormatterBuilder5);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      String string0 = "US/H";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("US/H");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimePrinter0);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(4, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeParser0);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(4, dateTimeParser0.estimateParsedLength());
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance(gJChronology0);
      assertNotNull(strictChronology0);
      
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder5.append(dateTimePrinter0, dateTimeParserArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No parser supplied
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField((DateTimeFieldType) null, true);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      
      char[] charArray0 = new char[1];
      charArray0[0] = '7';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'7'}, charArray0);
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("7", charBuffer0.toString());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.length());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      assertNotNull(dateTimeZone0);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0, 1);
      assertNotNull(julianChronology0);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      Chronology chronology0 = julianChronology0.withUTC();
      assertFalse(chronology0.equals((Object)julianChronology0));
      assertNotSame(julianChronology0, chronology0);
      assertNotSame(chronology0, julianChronology0);
      assertNotNull(chronology0);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      Locale locale0 = new Locale("org/joda/time/tz/data");
      assertNotNull(locale0);
      assertEquals("org/joda/time/tz/data", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("org/joda/time/tz/data", locale0.toString());
      
      dateTimeFormatterBuilder_TextField0.printTo((Appendable) charBuffer0, 1420L, chronology0, (-2671), dateTimeZone0, locale0);
      assertEquals(1, charArray0.length);
      assertFalse(julianChronology0.equals((Object)chronology0));
      assertFalse(chronology0.equals((Object)julianChronology0));
      assertNotSame(julianChronology0, chronology0);
      assertNotSame(chronology0, julianChronology0);
      assertArrayEquals(new char[] {'\uFFFD'}, charArray0);
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertEquals(1, charBuffer0.capacity());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("org/joda/time/tz/data", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("org/joda/time/tz/data", locale0.toString());
      
      LocalTime localTime0 = new LocalTime((-801L));
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.plusMinutes((-840));
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotNull(localTime1);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      
      Locale locale1 = Locale.CHINA;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_TextField0.printTo((Appendable) charBuffer0, (ReadablePartial) localTime1, locale1);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 66;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMinuteOfDay(66);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of((InternalParser) null);
      assertNull(dateTimeParser0);
      
      boolean boolean0 = dateTimeFormatterBuilder1.canBuildParser();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertTrue(boolean0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendDayOfWeek(66);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      
      InternalParser[] internalParserArray0 = new InternalParser[9];
      internalParserArray0[0] = null;
      internalParserArray0[1] = null;
      internalParserArray0[2] = null;
      internalParserArray0[3] = null;
      internalParserArray0[4] = null;
      internalParserArray0[5] = null;
      internalParserArray0[6] = null;
      internalParserArray0[7] = null;
      internalParserArray0[8] = null;
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(internalParserArray0);
      assertEquals(9, internalParserArray0.length);
      assertNotNull(dateTimeFormatterBuilder_MatchingParser0);
      assertEquals(0, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(66, ethiopicChronology0, locale0, (Integer) 1, 115);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(1, (int)dateTimeParserBucket0.getPivotYear());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.append('y');
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      assertEquals("y", stringBuilder0.toString());
      assertEquals("y", stringBuilder1.toString());
      
      StringBuilder stringBuilder2 = stringBuilder1.append(true);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertNotNull(stringBuilder2);
      assertEquals("ytrue", stringBuilder0.toString());
      assertEquals("ytrue", stringBuilder1.toString());
      assertEquals("ytrue", stringBuilder2.toString());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 1, true);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(1, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      
      StringBuilder stringBuilder3 = stringBuilder2.append((Object) dateTimeFormatterBuilder_FixedNumber0);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertNotNull(stringBuilder3);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(1, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      
      int int1 = dateTimeFormatterBuilder_MatchingParser0.parseInto(dateTimeParserBucket0, stringBuilder3, 66);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(9, internalParserArray0.length);
      assertTrue(int1 == int0);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertEquals(66, int1);
      assertEquals(0, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(1, (int)dateTimeParserBucket0.getPivotYear());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(1, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.year();
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotNull(dateTimeFieldType1);
      assertEquals("year", dateTimeFieldType1.toString());
      assertEquals("year", dateTimeFieldType1.getName());
      
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType1, 66, false, 1352);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertNotNull(dateTimeFormatterBuilder_PaddedNumber0);
      assertEquals("year", dateTimeFieldType1.toString());
      assertEquals("year", dateTimeFieldType1.getName());
      assertEquals(66, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals(66, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendEraText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder3);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendMillisOfDay(66);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder4);
      
      boolean boolean1 = dateTimeFormatterBuilder4.canBuildPrinter();
      assertTrue(boolean1 == boolean0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertTrue(boolean1);
      
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.dayOfWeek();
      assertFalse(dateTimeFieldType2.equals((Object)dateTimeFieldType0));
      assertFalse(dateTimeFieldType2.equals((Object)dateTimeFieldType1));
      assertNotSame(dateTimeFieldType2, dateTimeFieldType0);
      assertNotSame(dateTimeFieldType2, dateTimeFieldType1);
      assertNotNull(dateTimeFieldType2);
      assertEquals("dayOfWeek", dateTimeFieldType2.getName());
      assertEquals("dayOfWeek", dateTimeFieldType2.toString());
      
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber1 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType2, 66, true, 0);
      assertFalse(dateTimeFieldType2.equals((Object)dateTimeFieldType0));
      assertFalse(dateTimeFieldType2.equals((Object)dateTimeFieldType1));
      assertFalse(dateTimeFormatterBuilder_PaddedNumber1.equals((Object)dateTimeFormatterBuilder_PaddedNumber0));
      assertNotNull(dateTimeFormatterBuilder_PaddedNumber1);
      assertEquals("dayOfWeek", dateTimeFieldType2.getName());
      assertEquals("dayOfWeek", dateTimeFieldType2.toString());
      assertEquals(66, dateTimeFormatterBuilder_PaddedNumber1.estimateParsedLength());
      assertEquals(66, dateTimeFormatterBuilder_PaddedNumber1.estimatePrintedLength());
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_PaddedNumber1);
      assertFalse(dateTimeFieldType2.equals((Object)dateTimeFieldType0));
      assertFalse(dateTimeFieldType2.equals((Object)dateTimeFieldType1));
      assertFalse(dateTimeFormatterBuilder_PaddedNumber1.equals((Object)dateTimeFormatterBuilder_PaddedNumber0));
      assertNotSame(dateTimeFieldType2, dateTimeFieldType0);
      assertNotSame(dateTimeFieldType2, dateTimeFieldType1);
      assertNotSame(dateTimeFormatterBuilder_PaddedNumber1, dateTimeFormatterBuilder_PaddedNumber0);
      assertNotNull(dateTimePrinter0);
      assertEquals("dayOfWeek", dateTimeFieldType2.getName());
      assertEquals("dayOfWeek", dateTimeFieldType2.toString());
      assertEquals(66, dateTimeFormatterBuilder_PaddedNumber1.estimateParsedLength());
      assertEquals(66, dateTimeFormatterBuilder_PaddedNumber1.estimatePrintedLength());
      assertEquals(66, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder1.append(dateTimePrinter0);
      assertFalse(dateTimeFieldType2.equals((Object)dateTimeFieldType0));
      assertFalse(dateTimeFieldType2.equals((Object)dateTimeFieldType1));
      assertFalse(dateTimeFormatterBuilder_PaddedNumber1.equals((Object)dateTimeFormatterBuilder_PaddedNumber0));
      assertNotSame(dateTimeFieldType2, dateTimeFieldType0);
      assertNotSame(dateTimeFieldType2, dateTimeFieldType1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertNotSame(dateTimeFormatterBuilder_PaddedNumber1, dateTimeFormatterBuilder_PaddedNumber0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertNotNull(dateTimeFormatterBuilder5);
      assertEquals("dayOfWeek", dateTimeFieldType2.getName());
      assertEquals("dayOfWeek", dateTimeFieldType2.toString());
      assertEquals(66, dateTimeFormatterBuilder_PaddedNumber1.estimateParsedLength());
      assertEquals(66, dateTimeFormatterBuilder_PaddedNumber1.estimatePrintedLength());
      assertEquals(66, dateTimePrinter0.estimatePrintedLength());
      
      String string0 = "5@4Z5";
      int int2 = (-3284);
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[8];
      DateTimeParser dateTimeParser1 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_PaddedNumber1);
      assertFalse(dateTimeFieldType2.equals((Object)dateTimeFieldType0));
      assertFalse(dateTimeFieldType2.equals((Object)dateTimeFieldType1));
      assertFalse(dateTimeFormatterBuilder_PaddedNumber1.equals((Object)dateTimeFormatterBuilder_PaddedNumber0));
      assertNotSame(dateTimeFieldType2, dateTimeFieldType0);
      assertNotSame(dateTimeFieldType2, dateTimeFieldType1);
      assertNotSame(dateTimeFormatterBuilder_PaddedNumber1, dateTimeFormatterBuilder_PaddedNumber0);
      assertNotNull(dateTimeParser1);
      assertEquals("dayOfWeek", dateTimeFieldType2.getName());
      assertEquals("dayOfWeek", dateTimeFieldType2.toString());
      assertEquals(66, dateTimeFormatterBuilder_PaddedNumber1.estimateParsedLength());
      assertEquals(66, dateTimeFormatterBuilder_PaddedNumber1.estimatePrintedLength());
      assertEquals(66, dateTimeParser1.estimateParsedLength());
      
      dateTimeParserArray0[0] = dateTimeParser1;
      DateTimeParser dateTimeParser2 = InternalParserDateTimeParser.of((InternalParser) null);
      assertNull(dateTimeParser2);
      
      dateTimeParserArray0[1] = null;
      dateTimeParserArray0[2] = null;
      dateTimeParserArray0[3] = null;
      dateTimeParserArray0[4] = null;
      dateTimeParserArray0[5] = null;
      dateTimeParserArray0[6] = null;
      DateTimeParser dateTimeParser3 = InternalParserDateTimeParser.of((InternalParser) null);
      assertNull(dateTimeParser3);
      
      dateTimeParserArray0[7] = null;
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.append(dateTimePrinter0, dateTimeParserArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Incomplete parser array
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2, true);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals(2, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("gdr[kU`AGdX<BnM{!", true);
      assertNotNull(mockFileWriter0);
      
      LocalTime localTime0 = new LocalTime();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      dateTimeFormatterBuilder_FixedNumber0.printTo((Appendable) mockFileWriter0, (ReadablePartial) localTime0, (Locale) null);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals(2, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendHalfdayOfDayText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(1230, 1230, 1230);
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormat_StyleFormatter0);
      assertNotNull(dateTimePrinter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.append(dateTimePrinter0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimePrinter0.estimatePrintedLength());
      
      int int0 = (-3152);
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder1.appendTimeZoneShortName();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder3);
      
      InternalParser[] internalParserArray0 = new InternalParser[8];
      internalParserArray0[0] = (InternalParser) dateTimeFormat_StyleFormatter0;
      internalParserArray0[1] = (InternalParser) dateTimeFormat_StyleFormatter0;
      internalParserArray0[2] = (InternalParser) dateTimeFormat_StyleFormatter0;
      internalParserArray0[3] = (InternalParser) dateTimeFormat_StyleFormatter0;
      internalParserArray0[4] = (InternalParser) dateTimeFormat_StyleFormatter0;
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      internalParserArray0[5] = (InternalParser) dateTimeFormatterBuilder_TimeZoneId0;
      internalParserArray0[6] = (InternalParser) dateTimeFormat_StyleFormatter0;
      internalParserArray0[7] = (InternalParser) dateTimeFormat_StyleFormatter0;
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(internalParserArray0);
      assertEquals(8, internalParserArray0.length);
      assertNotNull(dateTimeFormatterBuilder_MatchingParser0);
      assertEquals(40, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      Chronology chronology0 = julianChronology0.withUTC();
      assertSame(julianChronology0, chronology0);
      assertSame(chronology0, julianChronology0);
      assertNotNull(chronology0);
      
      Locale locale0 = Locale.forLanguageTag("Pacific/N");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      
      Integer integer0 = new Integer((-3152));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-3152), (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2426L), chronology0, locale0, integer0, 3057);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(dateTimeParserBucket0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals((-3152), (int)dateTimeParserBucket0.getPivotYear());
      
      StringBuffer stringBuffer0 = new StringBuffer(10);
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_MatchingParser0.parseInto(dateTimeParserBucket0, stringBuffer0, (-763));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No datetime pattern for locale: 
         //
         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 0;
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneName((Map<String, DateTimeZone>) hashMap0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendSecondOfMinute(0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder2.appendDecimal(dateTimeFieldType0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId[] dateTimeFormatterBuilder_TimeZoneIdArray0 = DateTimeFormatterBuilder.TimeZoneId.values();
      assertEquals(1, dateTimeFormatterBuilder_TimeZoneIdArray0.length);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneIdArray0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(1456, 1456);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendDayOfWeekText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendTwoDigitWeekyear(90, true);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder3);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      assertNotNull(dateTimeFieldType0);
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 65, true);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      BuddhistChronology buddhistChronology1 = (BuddhistChronology)buddhistChronology0.withUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology1, buddhistChronology0);
      assertNotNull(buddhistChronology1);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1094L, buddhistChronology1, (Locale) null, (Integer) 1, 1456);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeParserBucket0);
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(1, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      StringBuilder stringBuilder0 = new StringBuilder(90);
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      int int0 = dateTimeFormatterBuilder_UnpaddedNumber0.parseInto(dateTimeParserBucket0, stringBuilder0, 90);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology1, buddhistChronology0);
      assertEquals((-91), int0);
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(1, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", stringBuilder0.toString());
      
      InternalPrinterDateTimePrinter internalPrinterDateTimePrinter0 = (InternalPrinterDateTimePrinter)InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(internalPrinterDateTimePrinter0);
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(65, internalPrinterDateTimePrinter0.estimatePrintedLength());
      
      InternalParserDateTimeParser internalParserDateTimeParser0 = (InternalParserDateTimeParser)InternalParserDateTimeParser.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(internalParserDateTimeParser0);
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(65, internalParserDateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendHourOfDay(1456);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder4);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendMinuteOfHour(64);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder5);
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 65, 64);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      
      Appendable appendable0 = null;
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(zoneInfo0);
      assertNotNull(dateTimeZone0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      LocalDate localDate0 = new LocalDate((Chronology) ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(localDate0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(3, localDate0.size());
      
      Period period0 = Period.hours(64);
      assertNotNull(period0);
      
      Period period1 = period0.minusYears(1230);
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_Fraction0.printTo((Appendable) null, (long) 1, (Chronology) ethiopicChronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 363, false);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(lenientChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      
      Integer integer0 = new Integer(16);
      assertNotNull(integer0);
      assertEquals(16, (int)integer0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(363, lenientChronology0, locale0, integer0, 16);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(16, (int)dateTimeParserBucket0.getPivotYear());
      
      int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "org/joda/time/tz/data", 363);
      assertEquals(1, CopticChronology.AM);
      assertEquals((-364), int0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(16, (int)dateTimeParserBucket0.getPivotYear());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendHourOfHalfday(1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendYear((-4206), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField((DateTimeFieldType) null, true);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      
      char[] charArray0 = new char[1];
      charArray0[0] = '7';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'7'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals("7", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.length());
      
      LocalTime localTime0 = new LocalTime((-801L));
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.plusMinutes((-840));
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotNull(localTime1);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      
      dateTimeFormatterBuilder_TextField0.printTo((Appendable) charBuffer0, (ReadablePartial) localTime1, locale0);
      assertEquals(1, charArray0.length);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertArrayEquals(new char[] {'\uFFFD'}, charArray0);
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.position());
      assertEquals(1, charBuffer0.limit());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      
      int int0 = dateTimeFormatterBuilder_TextField0.estimateParsedLength();
      assertEquals(6, int0);
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendEraText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendHalfdayOfDayText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      
      int int1 = 1373;
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendFractionOfDay(6, 1373);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder3);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder3.appendSignedDecimal((DateTimeFieldType) null, (-1128), 12740625);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfMinute(1151, 1151);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendWeekyear(1151, 1151);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendFractionOfSecond(10, 4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder3);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendDecimal(dateTimeFieldType0, 1151, 4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder2.appendMinuteOfDay(2912);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder5);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder3.appendTwoDigitYear(4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertNotNull(dateTimeFormatterBuilder6);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder6.appendTimeZoneShortName();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder7);
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.dayOfYear();
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotNull(dateTimeFieldType1);
      assertEquals("dayOfYear", dateTimeFieldType1.toString());
      assertEquals("dayOfYear", dateTimeFieldType1.getName());
      
      DurationFieldType durationFieldType0 = dateTimeFieldType1.getDurationType();
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotNull(durationFieldType0);
      assertEquals("dayOfYear", dateTimeFieldType1.toString());
      assertEquals("dayOfYear", dateTimeFieldType1.getName());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder7.appendText(dateTimeFieldType1);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder2);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder8);
      assertEquals("dayOfYear", dateTimeFieldType1.toString());
      assertEquals("dayOfYear", dateTimeFieldType1.getName());
      
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType1, (-329), false);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("dayOfYear", dateTimeFieldType1.toString());
      assertEquals("dayOfYear", dateTimeFieldType1.getName());
      assertEquals((-329), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals((-329), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotNull(dateTimePrinter0);
      assertEquals("dayOfYear", dateTimeFieldType1.toString());
      assertEquals("dayOfYear", dateTimeFieldType1.getName());
      assertEquals((-329), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals((-329), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals((-329), dateTimePrinter0.estimatePrintedLength());
      
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[7];
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotNull(dateTimeParser0);
      assertEquals("dayOfYear", dateTimeFieldType1.toString());
      assertEquals("dayOfYear", dateTimeFieldType1.getName());
      assertEquals((-329), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals((-329), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals((-329), dateTimeParser0.estimateParsedLength());
      
      dateTimeParserArray0[0] = dateTimeParser0;
      DateTimeParser dateTimeParser1 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertTrue(dateTimeParser1.equals((Object)dateTimeParser0));
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertNotSame(dateTimeParser1, dateTimeParser0);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotNull(dateTimeParser1);
      assertEquals((-329), dateTimeParser1.estimateParsedLength());
      assertEquals("dayOfYear", dateTimeFieldType1.toString());
      assertEquals("dayOfYear", dateTimeFieldType1.getName());
      assertEquals((-329), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals((-329), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      
      dateTimeParserArray0[1] = dateTimeParser1;
      DateTimeParser dateTimeParser2 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertTrue(dateTimeParser2.equals((Object)dateTimeParser1));
      assertTrue(dateTimeParser2.equals((Object)dateTimeParser0));
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertNotSame(dateTimeParser2, dateTimeParser0);
      assertNotSame(dateTimeParser2, dateTimeParser1);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotNull(dateTimeParser2);
      assertEquals((-329), dateTimeParser2.estimateParsedLength());
      assertEquals("dayOfYear", dateTimeFieldType1.toString());
      assertEquals("dayOfYear", dateTimeFieldType1.getName());
      assertEquals((-329), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals((-329), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      
      dateTimeParserArray0[2] = dateTimeParser2;
      DateTimeParser dateTimeParser3 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertTrue(dateTimeParser3.equals((Object)dateTimeParser2));
      assertTrue(dateTimeParser3.equals((Object)dateTimeParser0));
      assertTrue(dateTimeParser3.equals((Object)dateTimeParser1));
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertNotSame(dateTimeParser3, dateTimeParser1);
      assertNotSame(dateTimeParser3, dateTimeParser2);
      assertNotSame(dateTimeParser3, dateTimeParser0);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotNull(dateTimeParser3);
      assertEquals((-329), dateTimeParser3.estimateParsedLength());
      assertEquals("dayOfYear", dateTimeFieldType1.toString());
      assertEquals("dayOfYear", dateTimeFieldType1.getName());
      assertEquals((-329), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals((-329), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      
      dateTimeParserArray0[3] = dateTimeParser3;
      DateTimeParser dateTimeParser4 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertTrue(dateTimeParser4.equals((Object)dateTimeParser0));
      assertTrue(dateTimeParser4.equals((Object)dateTimeParser1));
      assertTrue(dateTimeParser4.equals((Object)dateTimeParser3));
      assertTrue(dateTimeParser4.equals((Object)dateTimeParser2));
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertNotSame(dateTimeParser4, dateTimeParser2);
      assertNotSame(dateTimeParser4, dateTimeParser1);
      assertNotSame(dateTimeParser4, dateTimeParser0);
      assertNotSame(dateTimeParser4, dateTimeParser3);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotNull(dateTimeParser4);
      assertEquals((-329), dateTimeParser4.estimateParsedLength());
      assertEquals("dayOfYear", dateTimeFieldType1.toString());
      assertEquals("dayOfYear", dateTimeFieldType1.getName());
      assertEquals((-329), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals((-329), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      
      dateTimeParserArray0[4] = dateTimeParser4;
      DateTimeParser dateTimeParser5 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertTrue(dateTimeParser5.equals((Object)dateTimeParser0));
      assertTrue(dateTimeParser5.equals((Object)dateTimeParser1));
      assertTrue(dateTimeParser5.equals((Object)dateTimeParser3));
      assertTrue(dateTimeParser5.equals((Object)dateTimeParser4));
      assertTrue(dateTimeParser5.equals((Object)dateTimeParser2));
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertNotSame(dateTimeParser5, dateTimeParser4);
      assertNotSame(dateTimeParser5, dateTimeParser2);
      assertNotSame(dateTimeParser5, dateTimeParser0);
      assertNotSame(dateTimeParser5, dateTimeParser1);
      assertNotSame(dateTimeParser5, dateTimeParser3);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotNull(dateTimeParser5);
      assertEquals((-329), dateTimeParser5.estimateParsedLength());
      assertEquals("dayOfYear", dateTimeFieldType1.toString());
      assertEquals("dayOfYear", dateTimeFieldType1.getName());
      assertEquals((-329), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals((-329), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      
      dateTimeParserArray0[5] = dateTimeParser5;
      DateTimeParser dateTimeParser6 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertTrue(dateTimeParser6.equals((Object)dateTimeParser4));
      assertTrue(dateTimeParser6.equals((Object)dateTimeParser1));
      assertTrue(dateTimeParser6.equals((Object)dateTimeParser3));
      assertTrue(dateTimeParser6.equals((Object)dateTimeParser0));
      assertTrue(dateTimeParser6.equals((Object)dateTimeParser5));
      assertTrue(dateTimeParser6.equals((Object)dateTimeParser2));
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotSame(dateTimeParser6, dateTimeParser0);
      assertNotSame(dateTimeParser6, dateTimeParser5);
      assertNotSame(dateTimeParser6, dateTimeParser2);
      assertNotSame(dateTimeParser6, dateTimeParser4);
      assertNotSame(dateTimeParser6, dateTimeParser1);
      assertNotSame(dateTimeParser6, dateTimeParser3);
      assertNotNull(dateTimeParser6);
      assertEquals("dayOfYear", dateTimeFieldType1.toString());
      assertEquals("dayOfYear", dateTimeFieldType1.getName());
      assertEquals((-329), dateTimeParser6.estimateParsedLength());
      assertEquals((-329), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals((-329), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      
      dateTimeParserArray0[6] = dateTimeParser6;
      DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder2.append(dateTimePrinter0, dateTimeParserArray0);
      assertEquals(7, dateTimeParserArray0.length);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder8);
      assertNotNull(dateTimeFormatterBuilder9);
      assertEquals("dayOfYear", dateTimeFieldType1.toString());
      assertEquals("dayOfYear", dateTimeFieldType1.getName());
      assertEquals((-329), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals((-329), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals((-329), dateTimePrinter0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = 623;
      int int1 = (-1648);
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      
      DateTimeFieldType dateTimeFieldType0 = null;
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField((DateTimeFieldType) null, false);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMillisOfDay(623);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder1.appendShortText((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId[] dateTimeFormatterBuilder_TimeZoneIdArray0 = DateTimeFormatterBuilder.TimeZoneId.values();
      assertEquals(1, dateTimeFormatterBuilder_TimeZoneIdArray0.length);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneIdArray0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(1456, 1456);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendDayOfWeekText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendTwoDigitWeekyear(90, true);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder3);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 65, true);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimePrinter0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(65, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimeParser0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(65, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendHourOfDay(1456);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder4);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendMinuteOfHour(64);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertNotNull(dateTimeFormatterBuilder5);
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 65, 64);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      LocalDate localDate0 = new LocalDate((Chronology) ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(localDate0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(3, localDate0.size());
      
      Period period0 = Period.hours(64);
      assertNotNull(period0);
      
      Period period1 = period0.minusYears(1230);
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      
      LocalDate localDate1 = localDate0.plus(period1);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate0, localDate1);
      assertNotNull(localDate1);
      assertEquals(3, localDate1.size());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(3, localDate0.size());
      
      LocalDate localDate2 = localDate1.minusYears(60);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate2.equals((Object)localDate1));
      assertFalse(localDate2.equals((Object)localDate0));
      assertFalse(localDate0.equals((Object)localDate1));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate1, localDate2);
      assertNotSame(localDate2, localDate1);
      assertNotSame(localDate2, localDate0);
      assertNotSame(localDate0, localDate2);
      assertNotSame(localDate0, localDate1);
      assertNotNull(localDate2);
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate2.size());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(3, localDate0.size());
      
      Locale locale0 = new Locale("org/joda/time/tz/data", "E", "E");
      assertNotNull(locale0);
      assertEquals("E", locale0.getVariant());
      assertEquals("E", locale0.getCountry());
      assertEquals("org/joda/time/tz/data", locale0.getLanguage());
      assertEquals("org/joda/time/tz/data_E_E", locale0.toString());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_Fraction0.printTo((Appendable) null, (ReadablePartial) localDate2, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.toFormatter();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Both printing and parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendHourOfHalfday(70);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendMonthOfYear(19);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendHalfdayOfDayText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder3);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendSignedDecimal(dateTimeFieldType0, 70, (-1155));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendLiteral("KA-3I2");
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertNotNull(dateTimeFormatterBuilder5);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder5.appendDayOfWeek(70);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertNotNull(dateTimeFormatterBuilder6);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfYear(44);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      HashMap<String, DateTimeZone> hashMap1 = new HashMap<String, DateTimeZone>(hashMap0);
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotNull(hashMap1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneShortName((Map<String, DateTimeZone>) hashMap1);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendTimeZoneShortName();
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder3);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendFractionOfDay(44, 44);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertNotNull(dateTimeFormatterBuilder4);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendShortText(dateTimeFieldType0);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder5);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("US/H");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimePrinter0);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeParser0);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimeParser0.estimateParsedLength());
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance(gJChronology0);
      assertNotNull(strictChronology0);
      
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(strictChronology0, dateTimeZone0);
      assertNotNull(zonedChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      Chronology chronology0 = zonedChronology0.withUTC();
      assertSame(chronology0, strictChronology0);
      assertSame(strictChronology0, chronology0);
      assertNotNull(chronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(chronology0);
      assertSame(chronology0, strictChronology0);
      assertSame(strictChronology0, chronology0);
      assertNotNull(dateTimeField0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      dateTimeParserArray0[0] = dateTimeParser0;
      DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder5.append(dateTimePrinter0, dateTimeParserArray0);
      assertEquals(1, dateTimeParserArray0.length);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder6);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneName((Map<String, DateTimeZone>) hashMap0);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder7);
      assertNotNull(dateTimeFormatterBuilder7);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      
      boolean boolean0 = dateTimeFormatterBuilder5.canBuildParser();
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder7);
      assertFalse(boolean0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder3.appendDayOfYear(5);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder8);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder1.appendMonthOfYear(5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder8);
      assertNotNull(dateTimeFormatterBuilder9);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder5.appendTimeZoneOffset("", "US/H", false, 25, 48);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder10);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      
      DateTimePrinter dateTimePrinter1 = dateTimeFormatterBuilder1.toPrinter();
      assertFalse(dateTimePrinter1.equals((Object)dateTimePrinter0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertNotSame(dateTimePrinter1, dateTimePrinter0);
      assertNotNull(dateTimePrinter1);
      assertEquals(120, dateTimePrinter1.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder2.appendMillisOfDay(5);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder11);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 15;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendYearOfEra(15, 15);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneName((Map<String, DateTimeZone>) hashMap0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendSecondOfMinute(15);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendDecimal(dateTimeFieldType0, 15, 15);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.centuryOfEra();
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotNull(dateTimeFieldType1);
      assertEquals("centuryOfEra", dateTimeFieldType1.getName());
      assertEquals("centuryOfEra", dateTimeFieldType1.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendSecondOfDay(15);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder5);
      
      int int1 = (-59);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder4.appendFixedDecimal(dateTimeFieldType1, (-59));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal number of digits: -59
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFixedSignedDecimal(dateTimeFieldType0, 3915);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTwoDigitWeekyear(3915);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendTwoDigitYear(1995, true);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendClockhourOfHalfday(18);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendYearOfCentury(1995, 3915);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertNotNull(dateTimeFormatterBuilder5);
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder5.appendTimeZoneName((Map<String, DateTimeZone>) hashMap0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertNotNull(dateTimeFormatterBuilder6);
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset((String) null, (String) null, true, 3915, 3915);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      
      int int0 = dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength();
      assertEquals(13, int0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder1.appendHourOfHalfday(1249);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder5);
      assertNotNull(dateTimeFormatterBuilder7);
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendShortText(dateTimeFieldType0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      
      int int0 = 1751;
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendMillisOfSecond(1751);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendTimeZoneShortName((Map<String, DateTimeZone>) hashMap0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder3.appendSecondOfMinute((-1101));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      InternalParser[] internalParserArray0 = new InternalParser[7];
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of((InternalParser) null);
      assertNull(dateTimeParser0);
      
      InternalParser internalParser0 = DateTimeParserInternalParser.of((DateTimeParser) null);
      assertNull(internalParser0);
      
      internalParserArray0[0] = null;
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      
      internalParserArray0[1] = (InternalParser) dateTimeFormatterBuilder_TimeZoneId0;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      
      internalParserArray0[2] = (InternalParser) dateTimeFormatterBuilder_TextField0;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 4668, (-628));
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals((-628), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-628), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      
      internalParserArray0[3] = (InternalParser) dateTimeFormatterBuilder_Fraction0;
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, (-628), true, 2723);
      assertNotNull(dateTimeFormatterBuilder_PaddedNumber0);
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals((-628), dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals((-628), dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      
      internalParserArray0[4] = (InternalParser) dateTimeFormatterBuilder_PaddedNumber0;
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, (-628), 2723);
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      
      internalParserArray0[5] = (InternalParser) dateTimeFormat_StyleFormatter0;
      internalParserArray0[6] = (InternalParser) dateTimeFormatterBuilder_TimeZoneId0;
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(internalParserArray0);
      assertEquals(7, internalParserArray0.length);
      assertNotNull(dateTimeFormatterBuilder_MatchingParser0);
      assertEquals(40, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      
      int int0 = dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength();
      assertEquals(7, internalParserArray0.length);
      assertEquals(40, int0);
      assertEquals(40, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTwoDigitWeekyear(65533, false);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder1.appendMinuteOfDay((-3195));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 6;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendYearOfCentury(6, 6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      int int1 = (-2855);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder1.appendClockhourOfDay((-2855));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendCenturyOfEra(10209375, 0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendEraText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendDayOfWeek(0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder3);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendTimeZoneName();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder4);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder3.appendMonthOfYearText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertNotNull(dateTimeFormatterBuilder5);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder5.appendHourOfHalfday(0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertNotNull(dateTimeFormatterBuilder6);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendHourOfDay(0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder6);
      assertNotNull(dateTimeFormatterBuilder7);
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(1462, hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      
      int int0 = dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength();
      assertEquals(20, int0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder5.appendFixedSignedDecimal((DateTimeFieldType) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedHashSet<DateTimeFormatterBuilder.TextField> linkedHashSet0 = new LinkedHashSet<DateTimeFormatterBuilder.TextField>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean0 = linkedList0.removeAll(linkedHashSet0);
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      
      int int0 = dateTimeFormatterBuilder_Composite0.estimateParsedLength();
      assertEquals(0, int0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('C');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      
      boolean boolean1 = linkedHashSet0.add(dateTimeFormatterBuilder_TextField0);
      assertFalse(boolean1 == boolean0);
      assertTrue(linkedHashSet0.contains(dateTimeFormatterBuilder_TextField0));
      assertTrue(boolean1);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      
      int int1 = dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength();
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.minuteOfDay();
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotNull(dateTimeFieldType1);
      assertEquals("minuteOfDay", dateTimeFieldType1.getName());
      assertEquals("minuteOfDay", dateTimeFieldType1.toString());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType1, 4, false);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("minuteOfDay", dateTimeFieldType1.getName());
      assertEquals("minuteOfDay", dateTimeFieldType1.toString());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      
      Locale locale1 = Locale.KOREAN;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("ko", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(2186);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      Locale locale0 = new Locale("m", "m");
      assertNotNull(locale0);
      assertEquals("m", locale0.getLanguage());
      assertEquals("M", locale0.getCountry());
      assertEquals("m_M", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      Integer integer0 = Integer.valueOf(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-1L), gregorianChronology0, locale0, integer0, 2462);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("m", locale0.getLanguage());
      assertEquals("M", locale0.getCountry());
      assertEquals("m_M", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(0, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      int int0 = dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket0, "m", 2462);
      assertEquals((-2463), int0);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals("m", locale0.getLanguage());
      assertEquals("M", locale0.getCountry());
      assertEquals("m_M", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(0, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 2086, 2086);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(">MX*");
      assertNotNull(mockPrintWriter0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("Mexico/G");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      assertNotNull(julianChronology0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      Chronology chronology0 = julianChronology0.withUTC();
      assertSame(julianChronology0, chronology0);
      assertSame(chronology0, julianChronology0);
      assertNotNull(chronology0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      dateTimeFormatterBuilder_Fraction0.printTo((Appendable) mockPrintWriter0, 1996L, chronology0);
      assertSame(julianChronology0, chronology0);
      assertSame(chronology0, julianChronology0);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      int int0 = dateTimeFormatterBuilder_Fraction0.estimateParsedLength();
      assertEquals(18, int0);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-1472), false);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      
      MonthDay monthDay0 = MonthDay.now(chronology0);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertSame(julianChronology0, chronology0);
      assertSame(chronology0, julianChronology0);
      assertNotNull(monthDay0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getDayOfMonth());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean0 = linkedHashSet0.add((Locale) null);
      assertTrue(boolean0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Locale locale0 = Locale.lookup(linkedList0, list0);
      assertNull(locale0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      dateTimeFormatterBuilder_TwoDigitYear0.printTo((Appendable) mockPrintWriter0, (ReadablePartial) monthDay0, (Locale) null);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertSame(julianChronology0, chronology0);
      assertSame(chronology0, julianChronology0);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getDayOfMonth());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendLiteral('v');
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder1.appendTimeZoneOffset((String) null, ">MX*", true, (-1472), 15271875);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("Pacific/Y");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(9, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(9, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.append("Fex92h'^&yJ~rDdVE]Z");
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      assertEquals("Fex92h'^&yJ~rDdVE]Z", stringBuilder0.toString());
      assertEquals("Fex92h'^&yJ~rDdVE]Z", stringBuilder1.toString());
      
      StringBuilder stringBuilder2 = stringBuilder1.reverse();
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertNotNull(stringBuilder2);
      assertEquals("Z]EVdDr~Jy&^'h29xeF", stringBuilder0.toString());
      assertEquals("Z]EVdDr~Jy&^'h29xeF", stringBuilder1.toString());
      assertEquals("Z]EVdDr~Jy&^'h29xeF", stringBuilder2.toString());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      StringBuilder stringBuilder3 = stringBuilder1.append(stringBuffer0);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      assertNotNull(stringBuilder3);
      assertEquals("Z]EVdDr~Jy&^'h29xeF", stringBuilder0.toString());
      assertEquals("Z]EVdDr~Jy&^'h29xeF", stringBuilder1.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals("Z]EVdDr~Jy&^'h29xeF", stringBuilder3.toString());
      
      StringBuilder stringBuilder4 = stringBuilder2.insert(0, false);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder0);
      assertNotNull(stringBuilder4);
      assertEquals("falseZ]EVdDr~Jy&^'h29xeF", stringBuilder0.toString());
      assertEquals("falseZ]EVdDr~Jy&^'h29xeF", stringBuilder1.toString());
      assertEquals("falseZ]EVdDr~Jy&^'h29xeF", stringBuilder2.toString());
      assertEquals("falseZ]EVdDr~Jy&^'h29xeF", stringBuilder4.toString());
      
      StringBuilder stringBuilder5 = stringBuilder4.append('@');
      assertSame(stringBuilder0, stringBuilder5);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder5);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder5);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder5);
      assertSame(stringBuilder5, stringBuilder2);
      assertSame(stringBuilder5, stringBuilder4);
      assertSame(stringBuilder5, stringBuilder0);
      assertSame(stringBuilder5, stringBuilder3);
      assertSame(stringBuilder5, stringBuilder1);
      assertNotNull(stringBuilder5);
      assertEquals("falseZ]EVdDr~Jy&^'h29xeF@", stringBuilder0.toString());
      assertEquals("falseZ]EVdDr~Jy&^'h29xeF@", stringBuilder1.toString());
      assertEquals("falseZ]EVdDr~Jy&^'h29xeF@", stringBuilder2.toString());
      assertEquals("falseZ]EVdDr~Jy&^'h29xeF@", stringBuilder4.toString());
      assertEquals("falseZ]EVdDr~Jy&^'h29xeF@", stringBuilder5.toString());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      
      dateTimeFormatterBuilder_StringLiteral0.printTo((Appendable) stringBuilder5, (long) 0, (Chronology) copticChronology0, 1, dateTimeZone0, locale0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(stringBuilder0, stringBuilder5);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder5);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder5);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder5);
      assertSame(stringBuilder5, stringBuilder2);
      assertSame(stringBuilder5, stringBuilder4);
      assertSame(stringBuilder5, stringBuilder0);
      assertSame(stringBuilder5, stringBuilder3);
      assertSame(stringBuilder5, stringBuilder1);
      assertEquals(9, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(9, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals("falseZ]EVdDr~Jy&^'h29xeF@Pacific/Y", stringBuilder0.toString());
      assertEquals("falseZ]EVdDr~Jy&^'h29xeF@Pacific/Y", stringBuilder1.toString());
      assertEquals("falseZ]EVdDr~Jy&^'h29xeF@Pacific/Y", stringBuilder2.toString());
      assertEquals("falseZ]EVdDr~Jy&^'h29xeF@Pacific/Y", stringBuilder4.toString());
      assertEquals("falseZ]EVdDr~Jy&^'h29xeF@Pacific/Y", stringBuilder5.toString());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(1, 0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneShortName();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder2.appendFraction((DateTimeFieldType) null, (-3444), 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneShortName();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimePrinter dateTimePrinter0 = dateTimeFormatterBuilder0.toPrinter();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertNotNull(dateTimePrinter0);
      assertEquals(4, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendDayOfMonth(0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendDayOfYear(0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder3);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendHourOfHalfday(0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder4);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendTwoDigitWeekyear(0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertNotNull(dateTimeFormatterBuilder5);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder5.appendDayOfYear(0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder6);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder1.appendTwoDigitYear(1710);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder7);
      
      String string0 = "M[El^=";
      String string1 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("M[El^=", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField((DateTimeFieldType) null, true);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      
      char[] charArray0 = new char[1];
      charArray0[0] = '7';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'7'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.remaining());
      assertEquals("7", charBuffer0.toString());
      
      LocalTime localTime0 = new LocalTime((-801L));
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      int int0 = (-840);
      String string0 = localTime0.toString();
      assertNotNull(string0);
      assertEquals("23:59:59.199", string0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.plusMinutes((-840));
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotNull(localTime1);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      dateTimeFormatterBuilder_TextField0.printTo((Appendable) charBuffer0, (ReadablePartial) localTime1, locale0);
      assertEquals(1, charArray0.length);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertArrayEquals(new char[] {'\uFFFD'}, charArray0);
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(1, charBuffer0.position());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      int int1 = dateTimeFormatterBuilder_TextField0.estimateParsedLength();
      assertFalse(int1 == int0);
      assertEquals(6, int1);
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneName();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_TextField0);
      assertNotNull(dateTimeParser0);
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(6, dateTimeParser0.estimateParsedLength());
      
      DateTimeParser dateTimeParser1 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_TextField0);
      assertTrue(dateTimeParser1.equals((Object)dateTimeParser0));
      assertNotSame(dateTimeParser1, dateTimeParser0);
      assertNotNull(dateTimeParser1);
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(6, dateTimeParser1.estimateParsedLength());
      
      dateTimeParserArray0[1] = dateTimeParser1;
      DateTimeParser dateTimeParser2 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_TextField0);
      assertTrue(dateTimeParser2.equals((Object)dateTimeParser0));
      assertTrue(dateTimeParser2.equals((Object)dateTimeParser1));
      assertNotSame(dateTimeParser2, dateTimeParser0);
      assertNotSame(dateTimeParser2, dateTimeParser1);
      assertNotNull(dateTimeParser2);
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(6, dateTimeParser2.estimateParsedLength());
      
      dateTimeParserArray0[2] = dateTimeParser2;
      DateTimeParser dateTimeParser3 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_TextField0);
      assertTrue(dateTimeParser3.equals((Object)dateTimeParser0));
      assertTrue(dateTimeParser3.equals((Object)dateTimeParser1));
      assertTrue(dateTimeParser3.equals((Object)dateTimeParser2));
      assertNotSame(dateTimeParser3, dateTimeParser0);
      assertNotSame(dateTimeParser3, dateTimeParser1);
      assertNotSame(dateTimeParser3, dateTimeParser2);
      assertNotNull(dateTimeParser3);
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(6, dateTimeParser3.estimateParsedLength());
      
      dateTimeParserArray0[3] = dateTimeParser3;
      DateTimeParser dateTimeParser4 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_TextField0);
      assertTrue(dateTimeParser4.equals((Object)dateTimeParser1));
      assertTrue(dateTimeParser4.equals((Object)dateTimeParser0));
      assertTrue(dateTimeParser4.equals((Object)dateTimeParser3));
      assertTrue(dateTimeParser4.equals((Object)dateTimeParser2));
      assertNotSame(dateTimeParser4, dateTimeParser2);
      assertNotSame(dateTimeParser4, dateTimeParser0);
      assertNotSame(dateTimeParser4, dateTimeParser1);
      assertNotSame(dateTimeParser4, dateTimeParser3);
      assertNotNull(dateTimeParser4);
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(6, dateTimeParser4.estimateParsedLength());
      
      dateTimeParserArray0[2] = dateTimeParser4;
      boolean boolean0 = dateTimeFormatterBuilder0.canBuildFormatter();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder1.appendFixedSignedDecimal((DateTimeFieldType) null, 1941);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("#5");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-464);
      intArray0[2] = (-464);
      intArray0[3] = (-633);
      intArray0[4] = (-633);
      intArray0[5] = (-464);
      intArray0[6] = 20587500;
      intArray0[7] = (-633);
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 546, 99);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      assertNotNull(durationFieldType0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals("centuries", durationFieldType0.toString());
      assertEquals("centuries", durationFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendHourOfDay(0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimePrinter dateTimePrinter0 = dateTimeFormatterBuilder1.toPrinter();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimePrinter0);
      assertEquals(2, dateTimePrinter0.estimatePrintedLength());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder1.appendWeekOfWeekyear((-464));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Object[] objectArray0 = linkedList0.toArray();
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      assertEquals(0, linkedList0.size());
      
      Object object0 = linkedList0.pollFirst();
      assertNull(object0);
      assertEquals(0, linkedList0.size());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      
      Integer integer0 = new Integer(236548278);
      assertNotNull(integer0);
      assertEquals(236548278, (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0L, (Chronology) null, locale0, integer0, 236548278);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals(236548278, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      
      char[] charArray0 = new char[6];
      charArray0[0] = '_';
      charArray0[1] = '8';
      charArray0[2] = 'q';
      charArray0[3] = 'H';
      charArray0[4] = 'w';
      charArray0[5] = '/';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'_', '8', 'q', 'H', 'w', '/'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(6, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(6, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(6, charBuffer0.limit());
      assertEquals(6, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals("_8qHw/", charBuffer0.toString());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_Composite0.parseInto(dateTimeParserBucket0, charBuffer0, 236548278);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfDay(24, 24);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[6];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 24, false);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals(24, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(24, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimeParser0);
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals(24, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(24, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(24, dateTimeParser0.estimateParsedLength());
      
      dateTimeParserArray0[0] = dateTimeParser0;
      DateTimeParser dateTimeParser1 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertTrue(dateTimeParser1.equals((Object)dateTimeParser0));
      assertNotSame(dateTimeParser1, dateTimeParser0);
      assertNotNull(dateTimeParser1);
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals(24, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(24, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(24, dateTimeParser1.estimateParsedLength());
      
      dateTimeParserArray0[1] = dateTimeParser1;
      DateTimeParser dateTimeParser2 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertTrue(dateTimeParser2.equals((Object)dateTimeParser1));
      assertTrue(dateTimeParser2.equals((Object)dateTimeParser0));
      assertNotSame(dateTimeParser2, dateTimeParser0);
      assertNotSame(dateTimeParser2, dateTimeParser1);
      assertNotNull(dateTimeParser2);
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals(24, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(24, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(24, dateTimeParser2.estimateParsedLength());
      
      dateTimeParserArray0[2] = dateTimeParser2;
      DateTimeParser dateTimeParser3 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertTrue(dateTimeParser3.equals((Object)dateTimeParser0));
      assertTrue(dateTimeParser3.equals((Object)dateTimeParser2));
      assertTrue(dateTimeParser3.equals((Object)dateTimeParser1));
      assertNotSame(dateTimeParser3, dateTimeParser1);
      assertNotSame(dateTimeParser3, dateTimeParser2);
      assertNotSame(dateTimeParser3, dateTimeParser0);
      assertNotNull(dateTimeParser3);
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals(24, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(24, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(24, dateTimeParser3.estimateParsedLength());
      
      dateTimeParserArray0[3] = dateTimeParser3;
      DateTimeParser dateTimeParser4 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertTrue(dateTimeParser4.equals((Object)dateTimeParser3));
      assertTrue(dateTimeParser4.equals((Object)dateTimeParser1));
      assertTrue(dateTimeParser4.equals((Object)dateTimeParser2));
      assertTrue(dateTimeParser4.equals((Object)dateTimeParser0));
      assertNotSame(dateTimeParser4, dateTimeParser0);
      assertNotSame(dateTimeParser4, dateTimeParser2);
      assertNotSame(dateTimeParser4, dateTimeParser3);
      assertNotSame(dateTimeParser4, dateTimeParser1);
      assertNotNull(dateTimeParser4);
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals(24, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(24, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(24, dateTimeParser4.estimateParsedLength());
      
      dateTimeParserArray0[4] = dateTimeParser4;
      DateTimeParser dateTimeParser5 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertTrue(dateTimeParser5.equals((Object)dateTimeParser3));
      assertTrue(dateTimeParser5.equals((Object)dateTimeParser1));
      assertTrue(dateTimeParser5.equals((Object)dateTimeParser4));
      assertTrue(dateTimeParser5.equals((Object)dateTimeParser0));
      assertTrue(dateTimeParser5.equals((Object)dateTimeParser2));
      assertNotSame(dateTimeParser5, dateTimeParser0);
      assertNotSame(dateTimeParser5, dateTimeParser2);
      assertNotSame(dateTimeParser5, dateTimeParser4);
      assertNotSame(dateTimeParser5, dateTimeParser3);
      assertNotSame(dateTimeParser5, dateTimeParser1);
      assertNotNull(dateTimeParser5);
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals(24, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(24, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(24, dateTimeParser5.estimateParsedLength());
      
      dateTimeParserArray0[5] = dateTimeParser5;
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.append((DateTimePrinter) null, dateTimeParserArray0);
      assertEquals(6, dateTimeParserArray0.length);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendTimeZoneShortName();
      assertEquals(6, dateTimeParserArray0.length);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder3);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendDecimal(dateTimeFieldType0, 0, 24);
      assertEquals(6, dateTimeParserArray0.length);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendTimeZoneId();
      assertEquals(6, dateTimeParserArray0.length);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertNotNull(dateTimeFormatterBuilder5);
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder5.appendTwoDigitWeekyear(0);
      assertEquals(6, dateTimeParserArray0.length);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder6);
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      InternalParser[] internalParserArray0 = new InternalParser[6];
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(internalParserArray0);
      assertEquals(6, internalParserArray0.length);
      assertNotNull(dateTimeFormatterBuilder_MatchingParser0);
      assertEquals(0, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      
      internalParserArray0[0] = (InternalParser) dateTimeFormatterBuilder_MatchingParser0;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList linkedList1 = (LinkedList)linkedList0.clone();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      
      internalParserArray0[1] = (InternalParser) dateTimeFormatterBuilder_Composite0;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      
      internalParserArray0[2] = (InternalParser) dateTimeFormatterBuilder_TextField0;
      int int0 = (-738);
      int int1 = 374;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-738), 374);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      
      internalParserArray0[3] = (InternalParser) dateTimeFormatterBuilder_Fraction0;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 86400, true);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      
      internalParserArray0[4] = (InternalParser) dateTimeFormatterBuilder_TwoDigitYear0;
      // Undeclared exception!
      try { 
        DateTimeFormatterBuilder.TimeZoneId.valueOf("AM");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.joda.time.format.DateTimeFormatterBuilder.TimeZoneId.AM
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      Map<String, DateTimeZone> map0 = null;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneShortName((Map<String, DateTimeZone>) null);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendEraText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendSecondOfMinute(50);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder3);
      
      String string0 = "Wwk11M";
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendLiteral("Wwk11M");
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder4);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder3.appendShortText(dateTimeFieldType0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertNotNull(dateTimeFormatterBuilder5);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder3.appendTimeZoneName((Map<String, DateTimeZone>) null);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertNotNull(dateTimeFormatterBuilder6);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder6.appendLiteral("Wwk11M");
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder5);
      assertNotNull(dateTimeFormatterBuilder7);
      
      int int0 = (-92);
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      assertNotNull(durationFieldType0);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minutes", durationFieldType0.getName());
      assertEquals("minutes", durationFieldType0.toString());
      
      int int1 = (-2938);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder5.appendSignedDecimal(dateTimeFieldType0, (-92), (-2938));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      
      int int0 = dateTimeFormatterBuilder_Composite0.estimatePrintedLength();
      assertEquals(0, int0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 0;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendSecondOfMinute(0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTwoDigitWeekyear(0, true);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendWeekOfWeekyear(0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder3);
      
      int int1 = (-765);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder3.appendDayOfWeek((-765));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFieldType dateTimeFieldType0 = null;
      int int0 = (-3074);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendDecimal((DateTimeFieldType) null, (-5645), (-3074));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      
      int int0 = 0;
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      boolean boolean0 = dateTimeFieldType0.isSupported(julianChronology0);
      assertTrue(boolean0);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      assertNotNull(durationFieldType0);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 0, false);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      
      int int1 = dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength();
      assertFalse(int1 == int0);
      assertEquals(2, int1);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      
      int int2 = 17887500;
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 17887500, true);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(17887500, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(17887500, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      int int3 = 0;
      int int4 = 59;
      // Undeclared exception!
      try { 
        DateTimeZone.forID("6u')AF[O1+>f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id '6u')AF[O1+>f' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = "Parsing is not supported";
      boolean boolean0 = true;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("Parsing is not supported", "Pacific/Y", true, 46, 46);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertEquals(24, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(24, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      
      int int0 = dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength();
      assertEquals(24, int0);
      assertEquals(24, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(24, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('j');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      
      long long0 = 2629800000L;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      Locale locale0 = null;
      Integer integer0 = new Integer((-995));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-995), (int)integer0);
      
      int int1 = (-1661);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "Pacific/Y");
      assertNotNull(stringBuilder0);
      assertEquals("Pacific/Y", stringBuilder0.toString());
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'j';
      // Undeclared exception!
      try { 
        stringBuilder0.insert(15, charArray0, 24, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 15
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = "Europe/H";
      int int0 = 3552;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("Europe/H", "Europe/H", true, 3552, 3552);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      
      Appendable appendable0 = null;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(lenientChronology0);
      
      Chronology chronology0 = lenientChronology0.withUTC();
      assertEquals(1, IslamicChronology.AH);
      assertSame(lenientChronology0, chronology0);
      assertSame(chronology0, lenientChronology0);
      assertNotNull(chronology0);
      
      LocalDate localDate0 = new LocalDate((long) 3552, chronology0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      Locale locale0 = Locale.forLanguageTag("Europe/H");
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      
      Locale locale1 = Locale.FRENCH;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("fr", locale1.toString());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      
      String string1 = locale0.getDisplayVariant(locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("fr", locale1.toString());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Appendable) null, (ReadablePartial) localDate0, locale0);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(locale0.equals((Object)locale1));
      assertSame(lenientChronology0, chronology0);
      assertSame(chronology0, lenientChronology0);
      assertNotSame(locale0, locale1);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(3, localDate0.size());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendPattern("");
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendFractionOfMinute(3552, Integer.MAX_VALUE);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertNotNull(dateTimePrinter0);
      assertEquals(13, dateTimePrinter0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.append(dateTimePrinter0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals(13, dateTimePrinter0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertNotNull(dateTimeParser0);
      assertEquals(13, dateTimeParser0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.append(dateTimeParser0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals(13, dateTimePrinter0.estimatePrintedLength());
      assertEquals(13, dateTimeParser0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendMinuteOfDay(Integer.MAX_VALUE);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder5);
      assertEquals(13, dateTimePrinter0.estimatePrintedLength());
      assertEquals(13, dateTimeParser0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder5.appendLiteral((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Literal must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("EE");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("EE");
      assertNotNull(mockPrintWriter0);
      
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      Locale locale0 = new Locale("org.joda.time.field.RemainderDateTimeField", "EE");
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("org.joda.time.field.remainderdatetimefield", locale0.getLanguage());
      assertEquals("org.joda.time.field.remainderdatetimefield_EE", locale0.toString());
      assertEquals("EE", locale0.getCountry());
      assertEquals("EST", locale0.getISO3Country());
      
      dateTimeFormatterBuilder_StringLiteral0.printTo((Appendable) mockPrintWriter0, (ReadablePartial) localDate0, locale0);
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(3, localDate0.size());
      assertEquals("", locale0.getVariant());
      assertEquals("org.joda.time.field.remainderdatetimefield", locale0.getLanguage());
      assertEquals("org.joda.time.field.remainderdatetimefield_EE", locale0.toString());
      assertEquals("EE", locale0.getCountry());
      assertEquals("EST", locale0.getISO3Country());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      assertFalse(linkedList1.contains(locale0));
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
      assertFalse(linkedList1.contains(locale0));
      assertFalse(list0.contains(locale0));
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      int int0 = 20;
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 20, false);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals(20, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      int int1 = (-338);
      // Undeclared exception!
      try { 
        JulianChronology.getInstance(dateTimeZone0, (-338));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -338
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      
      int int0 = 0;
      boolean boolean0 = false;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 0, false);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      
      String string0 = "P";
      MockPrintStream mockPrintStream0 = new MockPrintStream("P");
      assertNotNull(mockPrintStream0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      mockPrintStream0.close();
      long long0 = gregorianChronology0.add((long) 0, 0L, 0);
      assertEquals(0L, long0);
      
      Chronology chronology0 = gregorianChronology0.withZone((DateTimeZone) null);
      assertSame(gregorianChronology0, chronology0);
      assertSame(chronology0, gregorianChronology0);
      assertNotNull(chronology0);
      
      LocalDate localDate0 = new LocalDate(31622400000L, (DateTimeZone) null);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      long long1 = gregorianChronology0.set(localDate0, 0L);
      assertFalse(long1 == long0);
      assertSame(gregorianChronology0, chronology0);
      assertEquals(31622400000L, long1);
      assertEquals(3, localDate0.size());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      
      dateTimeFormatterBuilder_TwoDigitYear0.printTo((Appendable) mockPrintStream0, 0L, chronology0, 57, (DateTimeZone) null, locale0);
      assertSame(gregorianChronology0, chronology0);
      assertSame(chronology0, gregorianChronology0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 57, 0);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      
      int int1 = dateTimeFormatterBuilder_Fraction0.estimatePrintedLength();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int2 = 3594;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(3594, 3594);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder1.appendFixedSignedDecimal(dateTimeFieldType0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal number of digits: 0
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      
      int int0 = dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength();
      assertEquals(32, int0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendCenturyOfEra(32, 0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendText(dateTimeFieldType0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendTimeZoneShortName((Map<String, DateTimeZone>) null);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      
      int int1 = 1134;
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendMillisOfDay(1134);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      
      String string0 = "Pacific/G";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DateTimeZone.forID("0*\"?B\u0001N80xw61");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id '0*\"?B\u0001N80xw61' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("G%nR{A``l1\"*&d", "G%nR{A``l1\"*&d", true, 8, 355);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertEquals(14, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(14, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertNotNull(dateTimePrinter0);
      assertEquals(14, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(14, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(14, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append(dateTimePrinter0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertEquals(14, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(14, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(14, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneId();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      assertEquals(14, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(14, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(14, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertNotNull(dateTimeParser0);
      assertEquals(14, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(14, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(14, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.append(dateTimeParser0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals(14, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(14, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(14, dateTimePrinter0.estimatePrintedLength());
      assertEquals(14, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendTwoDigitYear(8, false);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals(14, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(14, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(14, dateTimePrinter0.estimatePrintedLength());
      assertEquals(14, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendDayOfYear(8);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder5);
      assertEquals(14, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(14, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(14, dateTimePrinter0.estimatePrintedLength());
      assertEquals(14, dateTimeParser0.estimateParsedLength());
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder5.appendTimeZoneName((Map<String, DateTimeZone>) hashMap0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder6);
      assertEquals(14, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(14, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(14, dateTimePrinter0.estimatePrintedLength());
      assertEquals(14, dateTimeParser0.estimateParsedLength());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMonthOfYearShortText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder1.appendSignedDecimal(dateTimeFieldType0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      assertNotNull(durationFieldType0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      
      DurationFieldType durationFieldType1 = dateTimeFieldType0.getRangeDurationType();
      assertNull(durationFieldType1);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      Integer integer0 = Integer.getInteger("Ch{T(D", (Integer) null);
      assertNull(integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1000000L, iSOChronology0, locale0, (Integer) null, 45);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNull(dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      
      int int0 = dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket0, "Ch{T(D", 45);
      assertEquals((-46), int0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNull(dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      
      int int1 = dateTimeFormatterBuilder_TextField0.estimatePrintedLength();
      assertFalse(int1 == int0);
      assertEquals(20, int1);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      
      String string0 = "PeriodFormat.month";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("PeriodFormat.month");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(18, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(18, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.append(2571);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      assertEquals("2571", stringBuilder0.toString());
      assertEquals("2571", stringBuilder1.toString());
      
      int int2 = 0;
      // Undeclared exception!
      try { 
        stringBuilder1.insert(2571, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2571
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = (-269);
      int int1 = (-2783);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendYearOfCentury((-269), (-2783));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      
      int int0 = 985;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFraction(dateTimeFieldType0, 0, 985);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder1.appendFixedSignedDecimal(dateTimeFieldType0, (-3766));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal number of digits: -3766
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      Locale locale0 = new Locale("m", "m");
      assertNotNull(locale0);
      assertEquals("M", locale0.getCountry());
      assertEquals("m_M", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("m", locale0.getLanguage());
      
      Integer integer0 = Integer.valueOf(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-1L), gregorianChronology0, locale0, integer0, 2442);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("M", locale0.getCountry());
      assertEquals("m_M", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("m", locale0.getLanguage());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(0, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      int int0 = dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket0, "m", 2442);
      assertEquals((-2443), int0);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals("M", locale0.getCountry());
      assertEquals("m_M", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("m", locale0.getLanguage());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(0, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 0, false);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-963));
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.963", dateTimeZone0.getID());
      assertEquals("-00:00:00.963", dateTimeZone0.toString());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.963", dateTimeZone0.getID());
      assertEquals("-00:00:00.963", dateTimeZone0.toString());
      
      BuddhistChronology buddhistChronology1 = (BuddhistChronology)buddhistChronology0.withZone(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology1, buddhistChronology0);
      assertNotNull(buddhistChronology1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.963", dateTimeZone0.getID());
      assertEquals("-00:00:00.963", dateTimeZone0.toString());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, buddhistChronology1, locale0, (Integer) 1, 0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeParserBucket0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.963", dateTimeZone0.getID());
      assertEquals("-00:00:00.963", dateTimeZone0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(1, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "org/joda/time/tz/data", 1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology1, buddhistChronology0);
      assertEquals((-2), int0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.963", dateTimeZone0.getID());
      assertEquals("-00:00:00.963", dateTimeZone0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(1, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 2038, (-2658));
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals((-2658), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-2658), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org/joda/time/tz/data");
      assertNotNull(mockPrintWriter0);
      
      dateTimeFormatterBuilder_TextField0.printTo((Appendable) mockPrintWriter0, (long) 0, (Chronology) buddhistChronology0, 1071, dateTimeZone0, locale0);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.963", dateTimeZone0.getID());
      assertEquals("-00:00:00.963", dateTimeZone0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      assertNotNull(durationFieldType0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("eras", durationFieldType0.getName());
      assertEquals("eras", durationFieldType0.toString());
      
      int int0 = 0;
      boolean boolean0 = true;
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 0, true);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals(0, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      
      StringWriter stringWriter0 = new StringWriter(0);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      
      dateTimeFormatterBuilder_FixedNumber0.printTo((Appendable) stringWriter0, (-2869L), (Chronology) copticChronology0, 1, dateTimeZone0, locale0);
      assertEquals(1, CopticChronology.AM);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals(0, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals("1", stringWriter0.toString());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      
      int int1 = dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals(0, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int2 = 0;
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendFraction(dateTimeFieldType0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfYear(44);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      HashMap<String, DateTimeZone> hashMap1 = new HashMap<String, DateTimeZone>(hashMap0);
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotNull(hashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneShortName((Map<String, DateTimeZone>) hashMap1);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendTimeZoneShortName();
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendFractionOfDay(44, 44);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendShortText(dateTimeFieldType0);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder5);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      String string0 = "US/H";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("US/H");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimePrinter0);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeParser0);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimeParser0.estimateParsedLength());
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance(gJChronology0);
      assertNotNull(strictChronology0);
      
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(strictChronology0, dateTimeZone0);
      assertNotNull(zonedChronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      Chronology chronology0 = zonedChronology0.withUTC();
      assertSame(chronology0, strictChronology0);
      assertSame(strictChronology0, chronology0);
      assertNotNull(chronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(chronology0);
      assertSame(chronology0, strictChronology0);
      assertSame(strictChronology0, chronology0);
      assertNotNull(dateTimeField0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      dateTimeParserArray0[0] = dateTimeParser0;
      DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder5.append(dateTimePrinter0, dateTimeParserArray0);
      assertEquals(1, dateTimeParserArray0.length);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder6);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneName((Map<String, DateTimeZone>) hashMap0);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertNotNull(dateTimeFormatterBuilder7);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      boolean boolean0 = dateTimeFormatterBuilder5.canBuildParser();
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertFalse(boolean0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder3.append((DateTimeFormatter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No formatter supplied
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      
      int int0 = (-1336);
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-1336), true);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals((-1336), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals((-1336), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      
      linkedList0.addFirst(dateTimeFormatterBuilder_FixedNumber0);
      assertFalse(linkedList0.contains(true));
      assertEquals(1, linkedList0.size());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals((-1336), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals((-1336), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber1 = (DateTimeFormatterBuilder.FixedNumber)linkedList0.removeLast();
      assertSame(dateTimeFormatterBuilder_FixedNumber1, dateTimeFormatterBuilder_FixedNumber0);
      assertFalse(linkedList0.contains(true));
      assertNotNull(dateTimeFormatterBuilder_FixedNumber1);
      assertEquals(0, linkedList0.size());
      assertEquals((-1336), dateTimeFormatterBuilder_FixedNumber1.estimateParsedLength());
      assertEquals((-1336), dateTimeFormatterBuilder_FixedNumber1.estimatePrintedLength());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertFalse(linkedList0.contains(true));
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      
      boolean boolean0 = dateTimeFormatterBuilder_Composite0.isParser();
      assertFalse(linkedList0.contains(true));
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('G');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.append((long) (-1336));
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      assertEquals("-1336", stringBuilder0.toString());
      assertEquals("-1336", stringBuilder1.toString());
      
      int int1 = (-706);
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-706), (double) (-1336));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -706
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('a');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      
      Integer integer0 = Integer.getInteger("org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral", 5093);
      assertNotNull(integer0);
      assertEquals(5093, (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1000000L, iSOChronology0, locale0, integer0, 2615625);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(5093, (int)dateTimeParserBucket0.getPivotYear());
      
      int int0 = 0;
      int int1 = dateTimeFormatterBuilder_TimeZoneId0.parseInto(dateTimeParserBucket0, "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral", 0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(5093, (int)dateTimeParserBucket0.getPivotYear());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimePrinter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeParser0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append(dateTimePrinter0, dateTimeParser0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimePrinter0.estimatePrintedLength());
      assertEquals(32, dateTimeParser0.estimateParsedLength());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder1.appendTimeZoneOffset("org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral", true, (-455), 1226);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFixedDecimal(dateTimeFieldType0, 2270);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneOffset("nqs&1:K=|&((`j", true, 2270, 2270);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_TextField0);
      assertNotNull(dateTimePrinter0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[6];
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_TextField0);
      assertNotNull(dateTimeParser0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeParser0.estimateParsedLength());
      
      dateTimeParserArray0[0] = dateTimeParser0;
      DateTimeParser dateTimeParser1 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_TextField0);
      assertTrue(dateTimeParser1.equals((Object)dateTimeParser0));
      assertNotSame(dateTimeParser1, dateTimeParser0);
      assertNotNull(dateTimeParser1);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeParser1.estimateParsedLength());
      
      dateTimeParserArray0[1] = dateTimeParser1;
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      DateTimeParser dateTimeParser2 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_TimeZoneId0);
      assertFalse(dateTimeParser2.equals((Object)dateTimeParser0));
      assertFalse(dateTimeParser2.equals((Object)dateTimeParser1));
      assertNotSame(dateTimeParser2, dateTimeParser0);
      assertNotSame(dateTimeParser2, dateTimeParser1);
      assertNotNull(dateTimeParser2);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeParser2.estimateParsedLength());
      
      dateTimeParserArray0[2] = dateTimeParser2;
      DateTimeParser dateTimeParser3 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_TimeZoneId0);
      assertFalse(dateTimeParser3.equals((Object)dateTimeParser1));
      assertFalse(dateTimeParser3.equals((Object)dateTimeParser0));
      assertTrue(dateTimeParser3.equals((Object)dateTimeParser2));
      assertNotSame(dateTimeParser3, dateTimeParser1);
      assertNotSame(dateTimeParser3, dateTimeParser2);
      assertNotSame(dateTimeParser3, dateTimeParser0);
      assertNotNull(dateTimeParser3);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeParser3.estimateParsedLength());
      
      dateTimeParserArray0[3] = dateTimeParser3;
      DateTimeParser dateTimeParser4 = InternalParserDateTimeParser.of((InternalParser) null);
      assertNull(dateTimeParser4);
      
      dateTimeParserArray0[4] = null;
      DateTimeParser dateTimeParser5 = InternalParserDateTimeParser.of((InternalParser) null);
      assertNull(dateTimeParser5);
      
      dateTimeParserArray0[5] = null;
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder2.append(dateTimePrinter0, dateTimeParserArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Incomplete parser array
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("Pacific/K");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(9, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(9, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      int int0 = dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength();
      assertEquals(9, int0);
      assertEquals(9, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(9, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendFixedSignedDecimal((DateTimeFieldType) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = (-755);
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-755), hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      
      int int1 = 59;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(59);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.059", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.059", dateTimeZone0.getID());
      
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      assertNotNull(julianChronology0);
      assertEquals("+00:00:00.059", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.059", dateTimeZone0.getID());
      
      Chronology chronology0 = julianChronology0.withZone(dateTimeZone0);
      assertSame(julianChronology0, chronology0);
      assertSame(chronology0, julianChronology0);
      assertNotNull(chronology0);
      assertEquals("+00:00:00.059", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.059", dateTimeZone0.getID());
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      
      int int2 = dateTimeZone0.getOffsetFromLocal(0L);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(59, int2);
      assertEquals("+00:00:00.059", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.059", dateTimeZone0.getID());
      
      Integer integer0 = new Integer((-86399999));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      assertEquals((-86399999), (int)integer0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(59);
      assertTrue(dateTimeZone1.equals((Object)dateTimeZone0));
      assertNotSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(dateTimeZone1);
      assertEquals("+00:00:00.059", dateTimeZone1.getID());
      assertEquals("+00:00:00.059", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      
      dateTimeFormatterBuilder_TimeZoneName0.printTo((Appendable) stringBuffer0, (-2814L), (Chronology) julianChronology0, 59, dateTimeZone1, locale0);
      assertTrue(dateTimeZone0.equals((Object)dateTimeZone1));
      assertTrue(dateTimeZone1.equals((Object)dateTimeZone0));
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertSame(julianChronology0, chronology0);
      assertNotSame(dateTimeZone1, dateTimeZone0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals("+00:00:00.059", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.059", dateTimeZone0.getID());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals("+00:00:00.059", dateTimeZone1.getID());
      assertEquals("+00:00:00.059", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      
      int int3 = 20;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1000000L, chronology0, locale0, integer0, 20);
      assertTrue(dateTimeZone0.equals((Object)dateTimeZone1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int3));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(dateTimeParserBucket0);
      assertEquals("+00:00:00.059", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.059", dateTimeZone0.getID());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals((-86399999), (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      
      int int4 = dateTimeFormatterBuilder_TimeZoneName0.parseInto(dateTimeParserBucket0, "org/joda/time/tz/data", (-27));
      assertTrue(dateTimeZone0.equals((Object)dateTimeZone1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int3));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertSame(julianChronology0, chronology0);
      assertSame(chronology0, julianChronology0);
      assertEquals(26, int4);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals("+00:00:00.059", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.059", dateTimeZone0.getID());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals((-86399999), (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      
      boolean boolean0 = false;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = null;
      try {
        dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("org/joda/time/tz/data", "org/joda/time/tz/data", false, (-27), 59);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>(0);
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(0, hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3589);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:03.589", dateTimeZone0.toString());
      assertEquals("+00:00:03.589", dateTimeZone0.getID());
      
      CopticChronology copticChronology1 = (CopticChronology)copticChronology0.withZone(dateTimeZone0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertFalse(copticChronology1.equals((Object)copticChronology0));
      assertNotSame(copticChronology0, copticChronology1);
      assertNotSame(copticChronology1, copticChronology0);
      assertNotNull(copticChronology1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:03.589", dateTimeZone0.toString());
      assertEquals("+00:00:03.589", dateTimeZone0.getID());
      
      int int0 = 0;
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      assertNotNull(dateTimeZone1);
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      
      dateTimeFormatterBuilder_TimeZoneName0.printTo((Appendable) charArrayWriter0, (long) 0, (Chronology) copticChronology1, 0, dateTimeZone1, locale0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertFalse(copticChronology0.equals((Object)copticChronology1));
      assertFalse(copticChronology1.equals((Object)copticChronology0));
      assertNotSame(copticChronology0, copticChronology1);
      assertNotSame(copticChronology1, copticChronology0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals("\u534F\u8C03\u4E16\u754C\u65F6\u95F4", charArrayWriter0.toString());
      assertEquals(6, charArrayWriter0.size());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:03.589", dateTimeZone0.toString());
      assertEquals("+00:00:03.589", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      
      boolean boolean0 = DateTimeFormatterBuilder.csStartsWithIgnoreCase("org/joda/time/tz/data", 0, "org/joda/time/tz/data");
      assertTrue(boolean0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMillisOfDay(3589);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendWeekOfWeekyear(0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendMonthOfYearText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder3);
      
      int int1 = (-1709);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder3.appendCenturyOfEra((-1709), 3589);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.toParser();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing is not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction((DateTimeFieldType) null, 750, (-1881));
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals((-1881), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-1881), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      
      int int0 = dateTimeFormatterBuilder_Fraction0.estimateParsedLength();
      assertEquals((-1881), int0);
      assertEquals((-1881), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-1881), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedHashSet<DateTimeFormatterBuilder.TextField> linkedHashSet0 = new LinkedHashSet<DateTimeFormatterBuilder.TextField>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean0 = linkedList0.removeAll(linkedHashSet0);
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      
      int int0 = dateTimeFormatterBuilder_Composite0.estimateParsedLength();
      assertEquals(0, int0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('C');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      
      Appendable appendable0 = null;
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      
      boolean boolean1 = linkedHashSet0.add(dateTimeFormatterBuilder_TextField0);
      assertFalse(boolean1 == boolean0);
      assertTrue(linkedHashSet0.contains(dateTimeFormatterBuilder_TextField0));
      assertTrue(boolean1);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone("");
      assertNull(dateTimeZone0);
      
      YearMonth yearMonth0 = new YearMonth((DateTimeZone) null);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertNotNull(yearMonth0);
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(2014, yearMonth0.getYear());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_CharacterLiteral0.printTo((Appendable) null, (ReadablePartial) yearMonth0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(0);
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      StringBuffer stringBuffer1 = stringBuffer0.append((float) 0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals("0.0", stringBuffer0.toString());
      assertEquals(3, stringBuffer0.length());
      assertEquals("0.0", stringBuffer1.toString());
      assertEquals(3, stringBuffer1.length());
      
      String string0 = null;
      // Undeclared exception!
      try { 
        DateTimeFormatterBuilder.csStartsWith(stringBuffer0, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = (-464);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendFractionOfHour((-464), (-464));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = (-606);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 2917, (-3614));
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals((-3614), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-3614), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_Fraction0);
      assertNotNull(dateTimePrinter0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals((-3614), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-3614), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-3614), dateTimePrinter0.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append(dateTimePrinter0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals((-3614), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-3614), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-3614), dateTimePrinter0.estimatePrintedLength());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendMillisOfSecond((-606));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      
      StringBuilder stringBuilder0 = new StringBuilder(charBuffer0);
      assertNotNull(stringBuilder0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) charBuffer0, 0, 0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("", stringBuilder0.toString());
      assertEquals("", stringBuilder1.toString());
      
      StringBuilder stringBuilder2 = stringBuilder1.insert(0, (-1.0));
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertNotNull(stringBuilder2);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("-1.0", stringBuilder0.toString());
      assertEquals("-1.0", stringBuilder1.toString());
      assertEquals("-1.0", stringBuilder2.toString());
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'd';
      charArray0[1] = 'b';
      charArray0[2] = '';
      charArray0[3] = '(';
      charArray0[4] = '1';
      charArray0[5] = 'q';
      charArray0[6] = ')';
      charArray0[7] = '7';
      StringBuilder stringBuilder3 = stringBuilder2.append(charArray0, 0, 0);
      assertEquals(8, charArray0.length);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      assertArrayEquals(new char[] {'d', 'b', '', '(', '1', 'q', ')', '7'}, charArray0);
      assertNotNull(stringBuilder3);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("-1.0", stringBuilder0.toString());
      assertEquals("-1.0", stringBuilder1.toString());
      assertEquals("-1.0", stringBuilder2.toString());
      assertEquals("-1.0", stringBuilder3.toString());
      
      StringBuilder stringBuilder4 = stringBuilder3.append((float) 0);
      assertEquals(8, charArray0.length);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder2);
      assertArrayEquals(new char[] {'d', 'b', '', '(', '1', 'q', ')', '7'}, charArray0);
      assertNotNull(stringBuilder4);
      assertEquals("-1.00.0", stringBuilder4.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("-1.00.0", stringBuilder0.toString());
      assertEquals("-1.00.0", stringBuilder1.toString());
      assertEquals("-1.00.0", stringBuilder2.toString());
      assertEquals("-1.00.0", stringBuilder3.toString());
      
      YearMonth yearMonth0 = new YearMonth((Chronology) null);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertNotNull(yearMonth0);
      assertEquals(2, yearMonth0.size());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2014, yearMonth0.getYear());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_Composite0.printTo((Appendable) stringBuilder4, (ReadablePartial) yearMonth0, locale0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-2423), false);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals((-2423), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals((-2423), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(60000);
      assertNotNull(byteBuffer0);
      assertEquals(60000, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(60000, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=60000 cap=60000]", byteBuffer0.toString());
      assertEquals(60000, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasRemaining());
      
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      assertNotNull(charBuffer0);
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(60000, byteBuffer0.limit());
      assertEquals(60000, byteBuffer0.position());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=60000 lim=60000 cap=60000]", byteBuffer0.toString());
      assertEquals(60000, byteBuffer0.capacity());
      assertFalse(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(60000, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(60000, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(60000, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(60000, charBuffer0.capacity());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_FixedNumber0.printTo((Appendable) charBuffer0, (ReadablePartial) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(60000, hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      
      boolean boolean0 = false;
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      
      int int0 = dateTimeFormatterBuilder_TextField0.estimateParsedLength();
      assertEquals(20, int0);
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneId();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendDayOfWeekShortText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_TextField0);
      assertNotNull(dateTimeParser0);
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(20, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendOptional(dateTimeParser0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(20, dateTimeParser0.estimateParsedLength());
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_TextField0);
      assertNotNull(dateTimePrinter0);
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(20, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.append(dateTimePrinter0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(20, dateTimeParser0.estimateParsedLength());
      assertEquals(20, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTimeZoneShortName();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder5);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendWeekOfWeekyear(0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertNotNull(dateTimeFormatterBuilder6);
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(20, dateTimeParser0.estimateParsedLength());
      assertEquals(20, dateTimePrinter0.estimatePrintedLength());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder6.appendFixedDecimal(dateTimeFieldType0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal number of digits: 0
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendWeekOfWeekyear(0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendMillisOfSecond(0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder2.appendFractionOfDay(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of((InternalPrinter) null);
      assertNull(dateTimePrinter0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.append((DateTimePrinter) null, (DateTimeParser[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No parsers supplied
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = (-980);
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-980), hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-980), buddhistChronology0, locale0, (Integer) 1, 0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals(1, (int)dateTimeParserBucket0.getPivotYear());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      int int1 = dateTimeFormatterBuilder_TimeZoneName0.parseInto(dateTimeParserBucket0, (CharSequence) null, (-980));
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(int1 == int0);
      assertEquals(979, int1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals(1, (int)dateTimeParserBucket0.getPivotYear());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('\"');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      
      String string0 = "US/M";
      // Undeclared exception!
      try { 
        Charset.forName("US/M");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // US/M
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      stringWriter0.flush();
      assertEquals("", stringWriter0.toString());
      
      DateTimeFormatterBuilder.appendUnknownString(stringWriter0, 3915);
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMillisOfSecond(3915);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendFractionOfDay(0, 204);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendLiteral('5');
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder3);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendSecondOfMinute(3479);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder4);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendDayOfYear(0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder5);
      
      dateTimeFormatterBuilder5.clear();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('t');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.plusMinutes(204);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      
      LocalDateTime localDateTime2 = localDateTime1.plusWeeks(3600000);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotNull(localDateTime2);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      
      int int0 = (-597);
      // Undeclared exception!
      try { 
        localDateTime2.withDayOfMonth((-597));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -597 for dayOfMonth must be in the range [1,31]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 0, false);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendWeekOfWeekyear(0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendHalfdayOfDayText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendMillisOfDay(2977);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder3);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendMillisOfSecond(2977);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder4);
      
      dateTimeFormatterBuilder4.clear();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendSecondOfMinute(0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder5);
      
      boolean boolean0 = dateTimeFormatterBuilder5.canBuildPrinter();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertTrue(boolean0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendYearOfCentury(719527, 2977);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder6);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      String string0 = "BASE_GROUPED_IDS";
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendLiteral("BASE_GROUPED_IDS");
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendHalfdayOfDayText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendFractionOfMinute(1441, 1441);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder3);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder3.appendFixedDecimal(dateTimeFieldType0, (-3284));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal number of digits: -3284
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-1351), (-1351));
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals((-1351), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-1351), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMonthOfYearShortText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendLiteral('$');
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder2.appendFraction(dateTimeFieldType0, (-70), (-70));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendFractionOfHour((-8), (-8));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendHalfdayOfDayText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      int int0 = 3001;
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendWeekOfWeekyear(3001);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendMonthOfYearShortText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder3);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendTimeZoneShortName();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder4);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      
      int int1 = (-525);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder4.appendDecimal(dateTimeFieldType0, (-525), 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneName();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder1.append((DateTimeFormatter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No formatter supplied
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendEraText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneName();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertNull(dateTimeFormatter0);
      assertEquals(0, partial0.size());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder2.append((DateTimeFormatter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No formatter supplied
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral(',');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      
      Integer integer0 = new Integer(2576);
      assertNotNull(integer0);
      assertEquals(2576, (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0L, (Chronology) null, locale0, integer0, 2576);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(2576, (int)dateTimeParserBucket0.getPivotYear());
      
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_CharacterLiteral0.parseInto(dateTimeParserBucket0, charBuffer0, (-59));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(6, hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      assertNotNull(durationFieldType0);
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      
      boolean boolean0 = true;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-357), true);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      
      int int0 = dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength();
      assertEquals(4, int0);
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      
      String string0 = "EDdHayocYVT/A\\`";
      Appendable appendable0 = null;
      long long0 = (-4348L);
      int int1 = 0;
      try { 
        DateTimeZone.forOffsetHoursMinutes(0, (-357));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -357
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfDay(0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendShortText(dateTimeFieldType0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendTwoDigitWeekyear(10);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendCenturyOfEra((-2951), 1123);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendLiteral('B');
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      int int0 = (-168);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder1.appendClockhourOfHalfday((-168));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = (-1078);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendHourOfHalfday((-1078));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType0, 1002, 1002);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendDayOfWeekText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendTwoDigitYear(20, true);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendTwoDigitWeekyear(20587500, true);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendFractionOfDay(20587500, 4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder5);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      
      DateTimePrinter dateTimePrinter0 = dateTimeFormatterBuilder5.toPrinter();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertNotNull(dateTimePrinter0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals(1044, dateTimePrinter0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMonthOfYear(0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTwoDigitYear(892, false);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendYearOfCentury(2131, 0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder3);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendWeekyear(0, 892);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder4);
      
      int int0 = 50;
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendWeekOfWeekyear(50);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder5);
      
      DateTimeParser dateTimeParser0 = dateTimeFormatterBuilder5.toParser();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeParser0);
      assertEquals(3077, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 493, false);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals(493, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(493, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      
      long long0 = 1642L;
      try { 
        DateTimeZone.forOffsetHoursMinutes(153692453, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: 153692453
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      boolean boolean0 = true;
      int int0 = (-4100);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendTimeZoneOffset("(l", "(l", true, 3254, (-4100));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendTimeZoneOffset("Bh'}t=!N2x7mIdUuZx", "Bh'}t=!N2x7mIdUuZx", true, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendHourOfDay((-1808));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(58, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(58, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      int int0 = dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength();
      assertEquals(58, int0);
      assertEquals(58, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(58, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral(':');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      
      dateTimeFormatterBuilder_CharacterLiteral0.printTo((Appendable) pipedWriter0, 0L, (Chronology) gregorianChronology0, 58, dateTimeZone0, locale0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 1105, false);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(1105, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals(1105, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = "Pacific/T";
      String string1 = "bce";
      int int0 = 24;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = null;
      try {
        dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("Pacific/T", "bce", true, (-837), 24);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 707;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMinuteOfHour(707);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      int int1 = (-3791);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder1.appendYearOfEra((-3791), 707);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMonthOfYear(0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendShortText(dateTimeFieldType0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendSecondOfDay(0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      
      int int0 = (-1538);
      boolean boolean0 = dateTimeFormatterBuilder2.canBuildFormatter();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertTrue(boolean0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder3.appendYearOfEra((-1538), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = null;
      int int0 = 9;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = null;
      try {
        dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("org.joda.time.format.DateTimeFormatterBuilder$Fraction", (String) null, true, 9, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFixedSignedDecimal(dateTimeFieldType0, 60);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      
      int int0 = 13;
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendClockhourOfDay(13);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendHourOfDay(13);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder3);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder2.appendPattern("~~HHAjZwg5%=H1h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: A
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = (-226);
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendYearOfEra(25, (-226));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTwoDigitYear(25);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder2.appendMinuteOfHour((-1529));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = (-1349);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendMonthOfYear((-1349));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      boolean boolean0 = true;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("S^Sth", "6b9", true, 43, 43);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_TimeZoneOffset0.parseInto((DateTimeParserBucket) null, "S^Sth", (-429));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("*IQIY*'K3", "nJ77$]gs.", false, 18, 18);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      
      int int0 = dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength();
      assertEquals(10, int0);
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int int0 = 564;
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(564, hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      
      Appendable appendable0 = null;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      boolean boolean0 = dateTimeZone0.isStandardOffset(1);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(boolean0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(localDate0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = localDate0.minusMonths(1);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      assertNotNull(localDate1);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      
      LocalDate.Property localDate_Property0 = localDate1.era();
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      assertNotNull(localDate_Property0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      dateTimeFormatterBuilder_TimeZoneName0.printTo((Appendable) null, (ReadablePartial) localDate1, locale0);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('l');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      
      Partial partial0 = new Partial(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      assertNotNull(dateTimeFieldType0);
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      assertNotNull(durationFieldType0);
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuries", durationFieldType0.toString());
      assertEquals("centuries", durationFieldType0.getName());
      
      // Undeclared exception!
      try { 
        partial0.withFieldAddWrapped(durationFieldType0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'centuries' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('[');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      
      int int0 = dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength();
      assertEquals(1, int0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = (-2020);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendWeekOfWeekyear((-2020));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      HashMap<String, DateTimeZone> hashMap1 = new HashMap<String, DateTimeZone>(hashMap0);
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotNull(hashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneName((Map<String, DateTimeZone>) hashMap1);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendFractionOfHour(2747, 2747);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendFractionOfDay(2747, 2028);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder1.appendShortText(dateTimeFieldType0);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.millisOfSecond();
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotNull(dateTimeFieldType1);
      assertEquals("millisOfSecond", dateTimeFieldType1.getName());
      assertEquals("millisOfSecond", dateTimeFieldType1.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder3.appendFraction(dateTimeFieldType1, 867, 48);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertNotNull(dateTimeFormatterBuilder5);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals("millisOfSecond", dateTimeFieldType1.getName());
      assertEquals("millisOfSecond", dateTimeFieldType1.toString());
      
      int int0 = 83;
      int int1 = 11;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      DateTimeField dateTimeField0 = dateTimeFieldType1.getField(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotNull(dateTimeField0);
      assertEquals("millisOfSecond", dateTimeFieldType1.getName());
      assertEquals("millisOfSecond", dateTimeFieldType1.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder5.appendCenturyOfEra(83, 11);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertNotNull(dateTimeFormatterBuilder6);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals("millisOfSecond", dateTimeFieldType1.getName());
      assertEquals("millisOfSecond", dateTimeFieldType1.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder6.appendLiteral('J');
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder6);
      assertNotNull(dateTimeFormatterBuilder7);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals("millisOfSecond", dateTimeFieldType1.getName());
      assertEquals("millisOfSecond", dateTimeFieldType1.toString());
      
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2028, false);
      assertFalse(dateTimeFieldType0.equals((Object)dateTimeFieldType1));
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      Integer integer0 = new Integer(1);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(11, islamicChronology0, locale0, integer0, 2747);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(dateTimeParserBucket0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(1, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      
      String string0 = "US/H";
      StringBuilder stringBuilder0 = new StringBuilder("US/H");
      assertNotNull(stringBuilder0);
      assertEquals("US/H", stringBuilder0.toString());
      
      // Undeclared exception!
      try { 
        stringBuilder0.insert(2028, (Object) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2028
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      assertNotNull(gJChronology0);
      
      Chronology chronology0 = gJChronology0.withZone((DateTimeZone) null);
      assertSame(gJChronology0, chronology0);
      assertSame(chronology0, gJChronology0);
      assertNotNull(chronology0);
      
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(chronology0);
      assertSame(gJChronology0, chronology0);
      assertSame(chronology0, gJChronology0);
      assertNotNull(dateTimeField0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 4129, true, 4129);
      assertNotNull(dateTimeFormatterBuilder_PaddedNumber0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals(4129, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals(4129, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      
      int int0 = dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength();
      assertEquals(4129, int0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals(4129, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals(4129, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMillisOfSecond(0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendFractionOfHour(10, 10);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder2.appendSecondOfDay((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = (-3875);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendDayOfMonth((-3875));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of((InternalParser) null);
      assertNull(dateTimeParser0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.append((DateTimeParser) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No parser supplied
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfDay(93, 93);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendSecondOfDay(93);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendWeekOfWeekyear(93);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder3);
      
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('8');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimePrinter0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[3];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 0, true, (-292269337));
      assertNotNull(dateTimeFormatterBuilder_PaddedNumber0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals(0, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_PaddedNumber0);
      assertNotNull(dateTimeParser0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals(0, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals(0, dateTimeParser0.estimateParsedLength());
      
      dateTimeParserArray0[0] = dateTimeParser0;
      DateTimeParser dateTimeParser1 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_PaddedNumber0);
      assertTrue(dateTimeParser1.equals((Object)dateTimeParser0));
      assertNotSame(dateTimeParser1, dateTimeParser0);
      assertNotNull(dateTimeParser1);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals(0, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals(0, dateTimeParser1.estimateParsedLength());
      
      dateTimeParserArray0[1] = dateTimeParser1;
      DateTimeParser dateTimeParser2 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_CharacterLiteral0);
      assertFalse(dateTimeParser2.equals((Object)dateTimeParser1));
      assertFalse(dateTimeParser2.equals((Object)dateTimeParser0));
      assertNotSame(dateTimeParser2, dateTimeParser1);
      assertNotSame(dateTimeParser2, dateTimeParser0);
      assertNotNull(dateTimeParser2);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeParser2.estimateParsedLength());
      
      dateTimeParserArray0[2] = dateTimeParser2;
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.append(dateTimePrinter0, dateTimeParserArray0);
      assertEquals(3, dateTimeParserArray0.length);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimePrinter0.estimatePrintedLength());
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendTimeZoneName((Map<String, DateTimeZone>) hashMap0);
      assertEquals(3, dateTimeParserArray0.length);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertNotNull(dateTimeFormatterBuilder5);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimePrinter0.estimatePrintedLength());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder5.appendWeekyear(0, (-5240));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendWeekyear(1634, 0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneName((Map<String, DateTimeZone>) hashMap0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      int int0 = (-3396);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder2.appendMillisOfDay((-3396));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      String string0 = "/S4I0Mk.WwG6>";
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendLiteral("/S4I0Mk.WwG6>");
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendEraText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      
      int int0 = 65533;
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendFractionOfDay(65533, 65533);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder3);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder2.appendTimeZoneName();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder4);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder3.appendMillisOfDay(65533);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder5);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder5.appendHourOfHalfday(0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertNotNull(dateTimeFormatterBuilder6);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      int int1 = (-3332);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder2.appendSignedDecimal(dateTimeFieldType0, (-3332), 65533);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = "Format invalid: ";
      // Undeclared exception!
      try { 
        DateTimeFormatterBuilder.csStartsWithIgnoreCase((CharSequence) null, Integer.MIN_VALUE, "Format invalid: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 61;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMinuteOfDay(61);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      InternalParser internalParser0 = null;
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of((InternalParser) null);
      assertNull(dateTimeParser0);
      
      boolean boolean0 = dateTimeFormatterBuilder1.canBuildParser();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder1.appendOptional((DateTimeParser) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No parser supplied
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      
      int int0 = dateTimeFormatterBuilder_TextField0.estimateParsedLength();
      assertEquals(6, int0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneName((Map<String, DateTimeZone>) hashMap0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendEraText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendMonthOfYearText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendDayOfWeekText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendCenturyOfEra(99, 99);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder5);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder5.appendFraction(dateTimeFieldType0, 99, 20503125);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder6);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendHourOfHalfday(500);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendSecondOfMinute(500);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendTwoDigitWeekyear(500);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder3);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendFixedSignedDecimal(dateTimeFieldType0, 500);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendClockhourOfHalfday(45);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder5);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMinuteOfDay(2615625);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneId();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendFractionOfDay(2588, 100);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder3);
      
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('o');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeParser0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendOptional(dateTimeParser0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendSecondOfMinute(4240);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder5);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeParser0.estimateParsedLength());
      
      boolean boolean0 = dateTimeFormatterBuilder5.canBuildPrinter();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertFalse(boolean0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeParser0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.append((DateTimeParser) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No parser supplied
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertNotNull(dateTimeFieldType0);
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, (-767), true);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals((-767), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals((-767), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      
      int int0 = dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength();
      assertEquals((-767), int0);
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals((-767), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals((-767), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber((DateTimeFieldType) null, (-36), false, 0);
      assertNotNull(dateTimeFormatterBuilder_PaddedNumber0);
      assertEquals((-36), dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals((-36), dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("Mexico/G");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(8, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(8, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-36));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneShortName((Map<String, DateTimeZone>) hashMap0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendSecondOfMinute(1900);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendFractionOfSecond(1900, 4812);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder3);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendText(dateTimeFieldType0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder4);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendTimeZoneName();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertNotNull(dateTimeFormatterBuilder5);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_TextField0);
      assertNotNull(dateTimePrinter0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_TextField0);
      assertNotNull(dateTimeParser0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimePrinter0.estimatePrintedLength());
      assertEquals(6, dateTimeParser0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimePrinter0.estimatePrintedLength());
      assertEquals(6, dateTimeParser0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(4812);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter2);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimePrinter0.estimatePrintedLength());
      assertEquals(6, dateTimeParser0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(4812, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder5.append(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertNotNull(dateTimeFormatterBuilder6);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimePrinter0.estimatePrintedLength());
      assertEquals(6, dateTimeParser0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(4812, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfMonth(45);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendShortText(dateTimeFieldType0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendText(dateTimeFieldType0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendFractionOfMinute(45, 45);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendYearOfEra(45, 45);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertNotNull(dateTimeFormatterBuilder5);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      
      boolean boolean0 = dateTimeFormatterBuilder5.canBuildParser();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertTrue(boolean0);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 2186;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(0, 2186);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder1.appendFraction((DateTimeFieldType) null, 60000, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendPattern((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneName();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendLiteral('u');
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendFractionOfMinute(83, 83);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder3);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder1.appendFractionOfSecond(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      String string0 = "en";
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendPattern("en");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFieldType dateTimeFieldType0 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendFixedDecimal((DateTimeFieldType) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.append(",3DIu");
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      assertEquals(",3DIu", stringBuilder0.toString());
      assertEquals(",3DIu", stringBuilder1.toString());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      
      StringBuilder stringBuilder2 = stringBuilder1.append((Object) dateTimeFormatterBuilder_TextField0);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertNotNull(stringBuilder2);
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      
      StringBuilder stringBuilder3 = stringBuilder2.append(0);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertNotNull(stringBuilder3);
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      
      StringBuilder stringBuilder4 = stringBuilder3.append('}');
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder1);
      assertNotNull(stringBuilder4);
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      
      // Undeclared exception!
      try { 
        DateTimeFormatterBuilder.csStartsWithIgnoreCase(stringBuilder4, (-1512), "f<xR*=[W}u");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1512
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTwoDigitYear(1000, false);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("{0I3JM");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(6, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(6, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      
      Integer integer0 = new Integer(1894);
      assertNotNull(integer0);
      assertEquals(1894, (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1000, islamicChronology0, locale0, integer0, 1);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(1894, (int)dateTimeParserBucket0.getPivotYear());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      
      int int0 = dateTimeFormatterBuilder_StringLiteral0.parseInto(dateTimeParserBucket0, "{0I3JM", 180);
      assertEquals(1, IslamicChronology.AH);
      assertEquals((-181), int0);
      assertEquals(6, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(6, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(1894, (int)dateTimeParserBucket0.getPivotYear());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneName();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTwoDigitYear(0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendSecondOfMinute(0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder3);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendMonthOfYearText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder4);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder4.appendHourOfDay((-225));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      
      boolean boolean0 = dateTimeFormatterBuilder_Composite0.isPrinter();
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 1742, false);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = (-1);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendDayOfYear((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 2221;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMinuteOfHour(2221);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendDayOfWeekShortText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder2.appendFractionOfMinute(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 0;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfDay(415, 0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendDayOfWeekShortText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      
      int int1 = (-3637);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder2.appendYear((-3637), (-1820));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.append((DateTimePrinter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No printer supplied
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('M');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeParser0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendOptional(dateTimeParser0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeParser0.estimateParsedLength());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendFixedDecimal(dateTimeFieldType0, 25);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeParser0.estimateParsedLength());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.minuteOfHour();
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotNull(dateTimeFieldType1);
      assertEquals("minuteOfHour", dateTimeFieldType1.toString());
      assertEquals("minuteOfHour", dateTimeFieldType1.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendShortText(dateTimeFieldType1);
      assertFalse(dateTimeFieldType0.equals((Object)dateTimeFieldType1));
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertNotSame(dateTimeFieldType0, dateTimeFieldType1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeParser0.estimateParsedLength());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType1.toString());
      assertEquals("minuteOfHour", dateTimeFieldType1.getName());
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendTimeZoneName((Map<String, DateTimeZone>) hashMap0);
      assertFalse(dateTimeFieldType0.equals((Object)dateTimeFieldType1));
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertNotSame(dateTimeFieldType0, dateTimeFieldType1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeParser0.estimateParsedLength());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType1.toString());
      assertEquals("minuteOfHour", dateTimeFieldType1.getName());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder4.appendMillisOfDay((-1577));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_Fraction0);
      assertNotNull(dateTimePrinter0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(0, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_Fraction0);
      assertNotNull(dateTimeParser0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(0, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append(dateTimePrinter0, dateTimeParser0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(0, dateTimePrinter0.estimatePrintedLength());
      assertEquals(0, dateTimeParser0.estimateParsedLength());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder1.appendFraction(dateTimeFieldType0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendWeekyear(2197, 2197);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneShortName((Map<String, DateTimeZone>) hashMap0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendFractionOfDay(2197, (-723));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder3);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendTwoDigitYear(2197);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertNotNull(dateTimeFormatterBuilder4);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendTimeZoneShortName();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertNotNull(dateTimeFormatterBuilder5);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder5.appendMonthOfYear(0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertNotNull(dateTimeFormatterBuilder6);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfDay(11);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendCenturyOfEra((-2951), 1123);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(47, hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      
      int int0 = dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength();
      assertEquals(20, int0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int1 = 291;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(291);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendMillisOfDay(47);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendFixedSignedDecimal(dateTimeFieldType0, 20);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendLiteral("899 w#e17F+bL@VR");
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_TimeZoneName0);
      assertNotNull(dateTimeParser0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeParser0.estimateParsedLength());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder4.append((DateTimePrinter) null, dateTimeParser0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No printer supplied
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(406, 406, 310);
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormat_StyleFormatter0);
      assertNotNull(dateTimePrinter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append(dateTimePrinter0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTwoDigitWeekyear(83, false);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendShortText(dateTimeFieldType0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimePrinter0.estimatePrintedLength());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendYear(406, 1746);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimePrinter0.estimatePrintedLength());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendHourOfDay(83);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertNotNull(dateTimeFormatterBuilder5);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimePrinter0.estimatePrintedLength());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder5.appendLiteral("org.joda.time.format.DateTimeFormatterBuilder$MatchingParser");
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder6);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimePrinter0.estimatePrintedLength());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneShortName();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendTimeZoneName((Map<String, DateTimeZone>) hashMap0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder3);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      int int0 = (-860);
      int int1 = (-1108);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder3.appendYearOfEra((-860), (-1108));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendSecondOfDay(3959);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendDayOfWeek(3600000);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendDayOfMonth(3600000);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder3);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendWeekOfWeekyear(9);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder4);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendMillisOfDay(3959);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder5);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertNotNull(dateTimeFieldType0);
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder5.appendFixedSignedDecimal(dateTimeFieldType0, 9);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertNotNull(dateTimeFormatterBuilder6);
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekShortText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendFraction(dateTimeFieldType0, 4169, 4169);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder1.appendTimeZoneShortName((Map<String, DateTimeZone>) hashMap0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendTwoDigitYear(4169);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder4);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId[] dateTimeFormatterBuilder_TimeZoneIdArray0 = DateTimeFormatterBuilder.TimeZoneId.values();
      assertEquals(1, dateTimeFormatterBuilder_TimeZoneIdArray0.length);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneIdArray0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(1456, 1456);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendDayOfWeekText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendTwoDigitWeekyear(90, false);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder3);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 65, true);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      Chronology chronology0 = gJChronology0.withUTC();
      assertSame(gJChronology0, chronology0);
      assertSame(chronology0, gJChronology0);
      assertNotNull(chronology0);
      
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(chronology0);
      assertSame(gJChronology0, chronology0);
      assertSame(chronology0, gJChronology0);
      assertNotNull(dateTimeField0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimePrinter0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(65, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimeParser0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(65, dateTimeParser0.estimateParsedLength());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append('=');
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringWriter1);
      assertEquals("=", stringWriter0.toString());
      assertEquals("=", stringWriter1.toString());
      
      StringBuffer stringBuffer0 = new StringBuffer(45);
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) stringBuffer0);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringWriter2, stringWriter0);
      assertNotNull(stringWriter2);
      assertEquals("=", stringWriter0.toString());
      assertEquals("=", stringWriter1.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals("=", stringWriter2.toString());
      
      StringBuffer stringBuffer1 = stringWriter2.getBuffer();
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertNotSame(stringBuffer1, stringBuffer0);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertNotSame(stringBuffer0, stringBuffer1);
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringWriter2, stringWriter0);
      assertNotNull(stringBuffer1);
      assertEquals(1, stringBuffer1.length());
      assertEquals("=", stringBuffer1.toString());
      assertEquals("=", stringWriter0.toString());
      assertEquals("=", stringWriter1.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals("=", stringWriter2.toString());
      
      LocalDateTime localDateTime0 = new LocalDateTime(264L, (Chronology) gJChronology0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      
      dateTimePrinter0.printTo(stringBuffer1, (ReadablePartial) localDateTime0, locale0);
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertFalse(stringBuffer0.equals((Object)stringBuffer1));
      assertNotSame(stringBuffer1, stringBuffer0);
      assertSame(gJChronology0, chronology0);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertNotSame(stringBuffer0, stringBuffer1);
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringWriter2, stringWriter0);
      assertEquals(2, stringBuffer1.length());
      assertEquals("=0", stringBuffer1.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(65, dateTimePrinter0.estimatePrintedLength());
      assertEquals("=0", stringWriter0.toString());
      assertEquals("=0", stringWriter1.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals("=0", stringWriter2.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.append(dateTimePrinter0, dateTimeParser0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(65, dateTimePrinter0.estimatePrintedLength());
      assertEquals(65, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendMinuteOfHour(64);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder5);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(65, dateTimePrinter0.estimatePrintedLength());
      assertEquals(65, dateTimeParser0.estimateParsedLength());
      
      DateTimeParser dateTimeParser1 = dateTimeFormatterBuilder2.toParser();
      assertFalse(dateTimeParser1.equals((Object)dateTimeParser0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertNotSame(dateTimeParser1, dateTimeParser0);
      assertNotNull(dateTimeParser1);
      assertEquals(169, dateTimeParser1.estimateParsedLength());
      
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeFormatterBuilder_TimeZoneIdArray0);
      assertEquals(1, dateTimeFormatterBuilder_TimeZoneIdArray0.length);
      assertNotNull(dateTimeFormatterBuilder_MatchingParser0);
      assertEquals(32, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      
      Integer integer0 = new Integer(64);
      assertNotNull(integer0);
      assertEquals(64, (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(2176L, gJChronology0, locale0, integer0, 10080);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals(64, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      
      int int0 = dateTimeFormatterBuilder_MatchingParser0.parseInto(dateTimeParserBucket0, stringBuffer0, 90);
      assertEquals(1, dateTimeFormatterBuilder_TimeZoneIdArray0.length);
      assertFalse(stringBuffer0.equals((Object)stringBuffer1));
      assertSame(gJChronology0, chronology0);
      assertNotSame(stringBuffer0, stringBuffer1);
      assertEquals((-91), int0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals(32, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      assertEquals(64, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-2737), false);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      
      dateTimeFormatterBuilder_TwoDigitYear0.printTo((Appendable) stringWriter0, (ReadablePartial) localDateTime0, locale0);
      assertSame(gJChronology0, chronology0);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter0, stringWriter1);
      assertEquals(4, localDateTime0.size());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals("=000", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMonthOfYearText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneName();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendHourOfHalfday(171);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder3);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      
      boolean boolean1 = dateTimeFormatterBuilder2.canBuildPrinter();
      assertFalse(boolean1 == boolean0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertTrue(boolean1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendText(dateTimeFieldType0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder1.appendLiteral("1Z1DyYZ!aEz=Z#p*#0");
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertNotNull(dateTimeFormatterBuilder5);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneId();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder6);
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      assertNotNull(gregorianChronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      boolean boolean3 = dateTimeFieldType0.isSupported(gregorianChronology0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder6.appendTwoDigitYear(1039);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder5);
      assertNotNull(dateTimeFormatterBuilder7);
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "org/joda/time/tz/data");
      assertNotNull(stringBuilder0);
      assertEquals("org/joda/time/tz/data", stringBuilder0.toString());
      
      boolean boolean4 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4);
      
      dateTimeFormatterBuilder_TimeZoneId0.printTo((Appendable) stringBuilder0, (long) 171, (Chronology) gregorianChronology0, 171, dateTimeZone0, (Locale) null);
      assertEquals("org/joda/time/tz/dataUTC", stringBuilder0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder0.appendWeekyear(171, 1039);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder8);
      
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 1493, false);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      
      dateTimeFormatterBuilder_TwoDigitYear0.printTo((Appendable) stringBuilder0, 68L, (Chronology) gregorianChronology0, 76, dateTimeZone0, (Locale) null);
      assertEquals("org/joda/time/tz/dataUTC00", stringBuilder0.toString());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder7.appendSignedDecimal(dateTimeFieldType0, 171, 76);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder5);
      assertNotNull(dateTimeFormatterBuilder9);
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder6.appendYear(1493, 76);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder10);
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder9.appendCenturyOfEra(1039, (-2294));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder5);
      assertNotNull(dateTimeFormatterBuilder11);
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFixedSignedDecimal(dateTimeFieldType0, 1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendFixedDecimal(dateTimeFieldType0, 1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendSecondOfDay(1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendMonthOfYearText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimePrinter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder2.append(dateTimePrinter0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder5);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendEraText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder6);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder6.appendTimeZoneId();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder7);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("Pacific/N", "Parsing is not supported", false, 1250, 1250);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("UHx$<$Fm+eR1IH4*_9-");
      assertNotNull(mockPrintStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      assertNotNull(dataOutputStream0);
      
      MockPrintStream mockPrintStream1 = new MockPrintStream(dataOutputStream0);
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertNotNull(mockPrintStream1);
      
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream1, true);
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertFalse(mockPrintStream2.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream2.equals((Object)mockPrintStream0));
      assertNotNull(mockPrintStream2);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) dateTimeFormatterBuilder5;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "UHx$<$Fm+eR1IH4*_9-";
      objectArray0[3] = (Object) dateTimeFormatterBuilder4;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[4] = object1;
      PrintStream printStream0 = mockPrintStream2.format("35+Az[", objectArray0);
      assertEquals(5, objectArray0.length);
      assertFalse(printStream0.equals((Object)mockPrintStream1));
      assertFalse(printStream0.equals((Object)mockPrintStream0));
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream2));
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream2));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertFalse(mockPrintStream2.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream2.equals((Object)mockPrintStream0));
      assertNotSame(printStream0, mockPrintStream1);
      assertSame(printStream0, mockPrintStream2);
      assertNotSame(printStream0, mockPrintStream0);
      assertNotSame(mockPrintStream0, mockPrintStream2);
      assertNotSame(mockPrintStream0, mockPrintStream1);
      assertNotSame(mockPrintStream0, printStream0);
      assertNotSame(mockPrintStream1, mockPrintStream2);
      assertNotSame(mockPrintStream1, printStream0);
      assertNotSame(mockPrintStream1, mockPrintStream0);
      assertNotSame(mockPrintStream2, mockPrintStream1);
      assertNotSame(mockPrintStream2, mockPrintStream0);
      assertSame(mockPrintStream2, printStream0);
      assertNotNull(printStream0);
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode0);
      assertTrue(list1.equals((Object)list0));
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertNotNull(list1);
      assertEquals(0, linkedList0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      Locale locale0 = Locale.lookup(linkedList0, list1);
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertNull(locale0);
      assertEquals(0, linkedList0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Appendable) printStream0, (long) 1, (Chronology) null, 1250, dateTimeZone0, (Locale) null);
      assertEquals(5, objectArray0.length);
      assertFalse(printStream0.equals((Object)mockPrintStream1));
      assertFalse(printStream0.equals((Object)mockPrintStream0));
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream2));
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream0.equals((Object)printStream0));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream2));
      assertFalse(mockPrintStream1.equals((Object)printStream0));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertFalse(mockPrintStream2.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream2.equals((Object)mockPrintStream0));
      assertNotSame(printStream0, mockPrintStream1);
      assertSame(printStream0, mockPrintStream2);
      assertNotSame(printStream0, mockPrintStream0);
      assertNotSame(mockPrintStream0, mockPrintStream2);
      assertNotSame(mockPrintStream0, mockPrintStream1);
      assertNotSame(mockPrintStream0, printStream0);
      assertNotSame(mockPrintStream1, mockPrintStream2);
      assertNotSame(mockPrintStream1, printStream0);
      assertNotSame(mockPrintStream1, mockPrintStream0);
      assertNotSame(mockPrintStream2, mockPrintStream1);
      assertNotSame(mockPrintStream2, mockPrintStream0);
      assertSame(mockPrintStream2, printStream0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      System.setCurrentTimeMillis(2042L);
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekShortText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendDayOfWeekText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendSignedDecimal(dateTimeFieldType0, 4537, 4537);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendSecondOfMinute(57);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendTimeZoneName((Map<String, DateTimeZone>) hashMap0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertNotNull(dateTimeFormatterBuilder5);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder5.appendLiteral((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Literal must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear((DateTimeFieldType) null, 1351, true);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(">H<0\"nU*GQURTN#", true);
      assertNotNull(mockFileWriter0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      dateTimeFormatterBuilder_TwoDigitYear0.printTo((Appendable) mockFileWriter0, (long) 1351, (Chronology) buddhistChronology0, 399, dateTimeZone0, locale0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneName((Map<String, DateTimeZone>) hashMap0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendSecondOfMinute(1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendLiteral("org/joda/time/tz/data");
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendTwoDigitYear(2086, false);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendMillisOfDay(399);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder5);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder5.appendTimeZoneShortName((Map<String, DateTimeZone>) hashMap0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertNotNull(dateTimeFormatterBuilder6);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneId();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendYearOfCentury(18, 18);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendMinuteOfDay(18);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder3);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendMillisOfDay(115);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertNotNull(dateTimeFormatterBuilder4);
      
      int int0 = 2998;
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendFractionOfMinute(2998, 115);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder5);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder3.appendFractionOfSecond(2998, (-292275054));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertNotNull(dateTimeFormatterBuilder6);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 18, true);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals(18, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals(18, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder3.appendTimeZoneId();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder6);
      assertNotNull(dateTimeFormatterBuilder7);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(18);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.018", dateTimeZone0.toString());
      assertEquals("+00:00:00.018", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      // Undeclared exception!
      try { 
        CopticChronology.getInstance(dateTimeZone0, 348);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 348
         //
         verifyException("org.joda.time.chrono.CopticChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfYear(44);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      HashMap<String, DateTimeZone> hashMap1 = new HashMap<String, DateTimeZone>(hashMap0);
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotNull(hashMap1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneShortName((Map<String, DateTimeZone>) hashMap1);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendTimeZoneShortName();
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder3);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendFractionOfDay(44, 44);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder4);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendShortText(dateTimeFieldType0);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder5);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("@ajD#nrVuM");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(10, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(10, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimePrinter0);
      assertEquals(10, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(10, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(10, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeParser0);
      assertEquals(10, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(10, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(10, dateTimeParser0.estimateParsedLength());
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance(gJChronology0);
      assertNotNull(strictChronology0);
      
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(strictChronology0, dateTimeZone0);
      assertNotNull(zonedChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      Chronology chronology0 = zonedChronology0.withUTC();
      assertSame(chronology0, strictChronology0);
      assertSame(strictChronology0, chronology0);
      assertNotNull(chronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(chronology0);
      assertSame(chronology0, strictChronology0);
      assertSame(strictChronology0, chronology0);
      assertNotNull(dateTimeField0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      dateTimeParserArray0[0] = dateTimeParser0;
      DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder5.append(dateTimePrinter0, dateTimeParserArray0);
      assertEquals(1, dateTimeParserArray0.length);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder6);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals(10, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(10, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(10, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = dateTimeFormatterBuilder4.toFormatter();
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatter0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertFalse(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneName((Map<String, DateTimeZone>) hashMap0);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder7);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      boolean boolean0 = dateTimeFormatterBuilder5.canBuildParser();
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertFalse(boolean0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder3.appendDayOfYear(5);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder8);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder1.appendMonthOfYear(5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder6);
      assertNotNull(dateTimeFormatterBuilder9);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder5.appendTimeZoneOffset("", "@ajD#nrVuM", false, 45, 48);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder3);
      assertNotNull(dateTimeFormatterBuilder10);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      DateTimePrinter dateTimePrinter1 = dateTimeFormatterBuilder3.toPrinter();
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertFalse(dateTimePrinter1.equals((Object)dateTimePrinter0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertNotSame(dateTimePrinter1, dateTimePrinter0);
      assertNotNull(dateTimePrinter1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(126, dateTimePrinter1.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder2.appendMillisOfDay(5);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder11);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder11, dateTimeFormatterBuilder10);
      assertNotNull(dateTimeFormatterBuilder11);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      Integer integer0 = Integer.getInteger("org.joda.time.chrono.BasicMonthOfYearDateTimeField", 0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(5, chronology0, locale0, integer0, 50);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(0, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      int int0 = dateTimeFormatterBuilder_StringLiteral0.parseInto(dateTimeParserBucket0, "", 65533);
      assertSame(chronology0, strictChronology0);
      assertSame(strictChronology0, chronology0);
      assertEquals((-65534), int0);
      assertEquals(10, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(10, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(0, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('H');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      
      Appendable appendable0 = null;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance(gregorianChronology0);
      assertNotNull(strictChronology0);
      
      Chronology chronology0 = strictChronology0.withUTC();
      assertSame(strictChronology0, chronology0);
      assertSame(chronology0, strictChronology0);
      assertNotNull(chronology0);
      
      LocalTime localTime0 = LocalTime.fromMillisOfDay(1000000L, chronology0);
      assertSame(strictChronology0, chronology0);
      assertSame(chronology0, strictChronology0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_TextField0.printTo((Appendable) null, (ReadablePartial) localTime0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TextField", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      
      boolean boolean0 = true;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 3600000, true);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(498);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.498", dateTimeZone0.toString());
      assertEquals("+00:00:00.498", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      assertEquals("+00:00:00.498", dateTimeZone0.toString());
      assertEquals("+00:00:00.498", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      CopticChronology copticChronology1 = (CopticChronology)copticChronology0.withUTC();
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertFalse(copticChronology1.equals((Object)copticChronology0));
      assertNotSame(copticChronology0, copticChronology1);
      assertNotSame(copticChronology1, copticChronology0);
      assertNotNull(copticChronology1);
      assertEquals("+00:00:00.498", dateTimeZone0.toString());
      assertEquals("+00:00:00.498", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10000000L, copticChronology1, locale0, (Integer) 1, 392);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertFalse(copticChronology0.equals((Object)copticChronology1));
      assertFalse(copticChronology1.equals((Object)copticChronology0));
      assertNotNull(dateTimeParserBucket0);
      assertEquals("+00:00:00.498", dateTimeZone0.toString());
      assertEquals("+00:00:00.498", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(1, (int)dateTimeParserBucket0.getPivotYear());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      
      int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "org/joda/time/tz/data", 498);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertFalse(copticChronology0.equals((Object)copticChronology1));
      assertFalse(copticChronology1.equals((Object)copticChronology0));
      assertNotSame(copticChronology0, copticChronology1);
      assertNotSame(copticChronology1, copticChronology0);
      assertEquals((-499), int0);
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals("+00:00:00.498", dateTimeZone0.toString());
      assertEquals("+00:00:00.498", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(1, (int)dateTimeParserBucket0.getPivotYear());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      
      int int1 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "org/joda/time/tz/data", 1);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertFalse(copticChronology0.equals((Object)copticChronology1));
      assertFalse(copticChronology1.equals((Object)copticChronology0));
      assertFalse(int1 == int0);
      assertNotSame(copticChronology0, copticChronology1);
      assertNotSame(copticChronology1, copticChronology0);
      assertEquals((-2), int1);
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals("+00:00:00.498", dateTimeZone0.toString());
      assertEquals("+00:00:00.498", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(1, (int)dateTimeParserBucket0.getPivotYear());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendHourOfDay((-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendLiteral("!-yQ_{2Q5N]o");
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      int int0 = 50;
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendFractionOfSecond(50, 15);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendMinuteOfHour(50);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder3);
      
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimePrinter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeParser0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimePrinter0.estimatePrintedLength());
      assertEquals(32, dateTimeParser0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      
      Integer integer0 = new Integer(2326);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(2326, (int)integer0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimePrinter0.estimatePrintedLength());
      assertEquals(32, dateTimeParser0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2326, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(15);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.015", dateTimeZone0.toString());
      assertEquals("+00:00:00.015", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter2);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimePrinter0.estimatePrintedLength());
      assertEquals(32, dateTimeParser0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2326, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals("+00:00:00.015", dateTimeZone0.toString());
      assertEquals("+00:00:00.015", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2326, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org/joda/time/tz/data");
      assertFalse(boolean0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.append(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimePrinter0.estimatePrintedLength());
      assertEquals(32, dateTimeParser0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2326, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals("+00:00:00.015", dateTimeZone0.toString());
      assertEquals("+00:00:00.015", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2326, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      
      int int1 = (-290);
      Integer integer1 = Integer.getInteger("Pacific/M", (-290));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      assertNotNull(integer1);
      assertEquals((-290), (int)integer1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendDayOfMonth(57);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder5);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimePrinter0.estimatePrintedLength());
      assertEquals(32, dateTimeParser0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2326, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals("+00:00:00.015", dateTimeZone0.toString());
      assertEquals("+00:00:00.015", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2326, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatterBuilder5.toFormatter();
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotNull(dateTimeFormatter3);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimePrinter0.estimatePrintedLength());
      assertEquals(32, dateTimeParser0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2326, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals("+00:00:00.015", dateTimeZone0.toString());
      assertEquals("+00:00:00.015", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2326, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder5.append(dateTimePrinter0, dateTimeParser0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder6);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimePrinter0.estimatePrintedLength());
      assertEquals(32, dateTimeParser0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2326, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals("+00:00:00.015", dateTimeZone0.toString());
      assertEquals("+00:00:00.015", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2326, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder4.appendTwoDigitWeekyear(57);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder7);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimePrinter0.estimatePrintedLength());
      assertEquals(32, dateTimeParser0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2326, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals("+00:00:00.015", dateTimeZone0.toString());
      assertEquals("+00:00:00.015", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2326, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      
      int int2 = 1000;
      // Undeclared exception!
      try { 
        DateTimeFormatterBuilder.appendUnknownString((Appendable) null, 50);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      InternalParser[] internalParserArray0 = new InternalParser[7];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-1981), (-1981));
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals((-1981), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-1981), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      
      internalParserArray0[0] = (InternalParser) dateTimeFormatterBuilder_Fraction0;
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, (-1981), true);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals((-1981), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals((-1981), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      
      internalParserArray0[1] = (InternalParser) dateTimeFormatterBuilder_UnpaddedNumber0;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction1 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-1981), (-1981));
      assertFalse(dateTimeFormatterBuilder_Fraction1.equals((Object)dateTimeFormatterBuilder_Fraction0));
      assertNotNull(dateTimeFormatterBuilder_Fraction1);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals((-1981), dateTimeFormatterBuilder_Fraction1.estimateParsedLength());
      assertEquals((-1981), dateTimeFormatterBuilder_Fraction1.estimatePrintedLength());
      
      internalParserArray0[2] = (InternalParser) dateTimeFormatterBuilder_Fraction1;
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 1278, true, (-1981));
      assertNotNull(dateTimeFormatterBuilder_PaddedNumber0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals(1278, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(1278, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      
      internalParserArray0[3] = (InternalParser) dateTimeFormatterBuilder_PaddedNumber0;
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      
      internalParserArray0[4] = (InternalParser) dateTimeFormatterBuilder_TextField0;
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber1 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 341, true, 1278);
      assertFalse(dateTimeFormatterBuilder_PaddedNumber1.equals((Object)dateTimeFormatterBuilder_PaddedNumber0));
      assertNotNull(dateTimeFormatterBuilder_PaddedNumber1);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals(341, dateTimeFormatterBuilder_PaddedNumber1.estimatePrintedLength());
      assertEquals(341, dateTimeFormatterBuilder_PaddedNumber1.estimateParsedLength());
      
      internalParserArray0[5] = (InternalParser) dateTimeFormatterBuilder_PaddedNumber1;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("America/Indiana/Indianapolis", "America/Indiana/Indianapolis", true, 442, 442);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertEquals(28, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(28, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      
      internalParserArray0[6] = (InternalParser) dateTimeFormatterBuilder_TimeZoneOffset0;
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(internalParserArray0);
      assertEquals(7, internalParserArray0.length);
      assertNotNull(dateTimeFormatterBuilder_MatchingParser0);
      assertEquals(1278, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) null);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      EthiopicChronology ethiopicChronology1 = (EthiopicChronology)ethiopicChronology0.withZone((DateTimeZone) null);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      assertNotNull(ethiopicChronology1);
      
      Locale locale0 = new Locale("America/Indiana/Indianapolis", "Europe/U", "America/Indiana/Indianapolis");
      assertNotNull(locale0);
      assertEquals("america/indiana/indianapolis", locale0.getLanguage());
      assertEquals("America/Indiana/Indianapolis", locale0.getVariant());
      assertEquals("america/indiana/indianapolis_EUROPE/U_America/Indiana/Indianapolis", locale0.toString());
      assertEquals("EUROPE/U", locale0.getCountry());
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0L, ethiopicChronology1, locale0, (Integer) 1, (-854));
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("america/indiana/indianapolis", locale0.getLanguage());
      assertEquals("America/Indiana/Indianapolis", locale0.getVariant());
      assertEquals("america/indiana/indianapolis_EUROPE/U_America/Indiana/Indianapolis", locale0.toString());
      assertEquals("EUROPE/U", locale0.getCountry());
      assertEquals(1, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      
      int int0 = dateTimeFormatterBuilder_MatchingParser0.parseInto(dateTimeParserBucket0, "America/Indiana/Indianapolis", (-854));
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(7, internalParserArray0.length);
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      assertEquals(853, int0);
      assertEquals(1278, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      assertEquals("america/indiana/indianapolis", locale0.getLanguage());
      assertEquals("America/Indiana/Indianapolis", locale0.getVariant());
      assertEquals("america/indiana/indianapolis_EUROPE/U_America/Indiana/Indianapolis", locale0.toString());
      assertEquals("EUROPE/U", locale0.getCountry());
      assertEquals(1, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      InternalParserDateTimeParser internalParserDateTimeParser0 = (InternalParserDateTimeParser)InternalParserDateTimeParser.of(dateTimeFormatterBuilder_Fraction0);
      assertFalse(dateTimeFormatterBuilder_Fraction0.equals((Object)dateTimeFormatterBuilder_Fraction1));
      assertNotSame(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction1);
      assertNotNull(internalParserDateTimeParser0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals((-1981), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-1981), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-1981), internalParserDateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendOptional(internalParserDateTimeParser0);
      assertFalse(dateTimeFormatterBuilder_Fraction0.equals((Object)dateTimeFormatterBuilder_Fraction1));
      assertNotSame(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals((-1981), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-1981), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-1981), internalParserDateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendSecondOfMinute(341);
      assertFalse(dateTimeFormatterBuilder_Fraction0.equals((Object)dateTimeFormatterBuilder_Fraction1));
      assertNotSame(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals((-1981), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-1981), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-1981), internalParserDateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendTwoDigitWeekyear(91, false);
      assertFalse(dateTimeFormatterBuilder_Fraction0.equals((Object)dateTimeFormatterBuilder_Fraction1));
      assertNotSame(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals((-1981), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-1981), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-1981), internalParserDateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendFractionOfDay(1278, (-854));
      assertFalse(dateTimeFormatterBuilder_Fraction0.equals((Object)dateTimeFormatterBuilder_Fraction1));
      assertNotSame(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals((-1981), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-1981), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-1981), internalParserDateTimeParser0.estimateParsedLength());
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendTimeZoneName((Map<String, DateTimeZone>) hashMap0);
      assertFalse(dateTimeFormatterBuilder_Fraction0.equals((Object)dateTimeFormatterBuilder_Fraction1));
      assertNotSame(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder5);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals((-1981), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-1981), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-1981), internalParserDateTimeParser0.estimateParsedLength());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder5.appendTimeZoneOffset("America/Indiana/Indianapolis", (String) null, false, 119, 83);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      
      int int0 = (-143);
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-143), true);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals((-143), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals((-143), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      Integer integer0 = new Integer((-143));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-143), (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(4505L, ethiopicChronology0, locale0, integer0, 1);
      assertEquals(1, EthiopicChronology.EE);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(dateTimeParserBucket0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals((-143), (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      
      int int1 = (-3540);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, "org/joda/time/tz/data", (-3540));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMonthOfYearText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendFractionOfSecond(292, 292);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendTwoDigitYear(292);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder3);
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(292, hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gregorianChronology0);
      assertNotNull(lenientChronology0);
      
      Integer integer0 = new Integer(538);
      assertNotNull(integer0);
      assertEquals(538, (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1000L, lenientChronology0, (Locale) null, integer0, 4420);
      assertNotNull(dateTimeParserBucket0);
      assertEquals(538, (int)dateTimeParserBucket0.getPivotYear());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      int int0 = dateTimeFormatterBuilder_TimeZoneName0.parseInto(dateTimeParserBucket0, (CharSequence) null, 1508);
      assertEquals((-1509), int0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(538, (int)dateTimeParserBucket0.getPivotYear());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendDayOfWeekText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder4);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-59), (-59));
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals((-59), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-59), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2036));
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.036", dateTimeZone0.getID());
      assertEquals("-00:00:02.036", dateTimeZone0.toString());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      assertNotNull(iSOChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.036", dateTimeZone0.getID());
      assertEquals("-00:00:02.036", dateTimeZone0.toString());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      Integer integer0 = new Integer((-2036));
      assertNotNull(integer0);
      assertEquals((-2036), (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(965L, iSOChronology0, locale0, integer0, 3172);
      assertNotNull(dateTimeParserBucket0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.036", dateTimeZone0.getID());
      assertEquals("-00:00:02.036", dateTimeZone0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals((-2036), (int)dateTimeParserBucket0.getPivotYear());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      
      int int0 = dateTimeFormatterBuilder_Fraction0.parseInto(dateTimeParserBucket0, "org/joda/time/tz/data", (-1258));
      assertEquals(1257, int0);
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals((-59), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-59), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.036", dateTimeZone0.getID());
      assertEquals("-00:00:02.036", dateTimeZone0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals((-2036), (int)dateTimeParserBucket0.getPivotYear());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-686), false);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals((-686), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals((-686), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000", charBuffer0.toString());
      assertEquals(1, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      
      dateTimeFormatterBuilder_FixedNumber0.printTo((Appendable) charBuffer0, (long) (-2036), (Chronology) iSOChronology0, (-690), dateTimeZone0, locale0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'1'}, charArray0);
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.036", dateTimeZone0.getID());
      assertEquals("-00:00:02.036", dateTimeZone0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals((-686), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals((-686), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(1, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      InternalParser[] internalParserArray0 = new InternalParser[8];
      internalParserArray0[0] = (InternalParser) dateTimeFormatterBuilder_FixedNumber0;
      internalParserArray0[1] = (InternalParser) dateTimeFormatterBuilder_Fraction0;
      internalParserArray0[2] = (InternalParser) dateTimeFormatterBuilder_Fraction0;
      internalParserArray0[3] = (InternalParser) dateTimeFormatterBuilder_Fraction0;
      internalParserArray0[4] = (InternalParser) dateTimeFormatterBuilder_Fraction0;
      internalParserArray0[5] = (InternalParser) dateTimeFormatterBuilder_Fraction0;
      internalParserArray0[6] = (InternalParser) dateTimeFormatterBuilder_Fraction0;
      internalParserArray0[7] = (InternalParser) dateTimeFormatterBuilder_FixedNumber0;
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(internalParserArray0);
      assertEquals(8, internalParserArray0.length);
      assertNotNull(dateTimeFormatterBuilder_MatchingParser0);
      assertEquals(0, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_MatchingParser0);
      assertEquals(8, internalParserArray0.length);
      assertNotNull(dateTimeParser0);
      assertEquals(0, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      assertEquals(0, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendOptional(dateTimeParser0);
      assertEquals(8, internalParserArray0.length);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder1);
      assertEquals(0, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      assertEquals(0, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendDayOfWeek(83);
      assertEquals(8, internalParserArray0.length);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder2);
      assertEquals(0, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      assertEquals(0, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendCenturyOfEra(116, (-390));
      assertEquals(8, internalParserArray0.length);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals(0, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      assertEquals(0, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendMillisOfSecond(116);
      assertEquals(8, internalParserArray0.length);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals(0, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      assertEquals(0, dateTimeParser0.estimateParsedLength());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder4.appendSecondOfMinute((-686));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      String string0 = "L?Y70u`;a,Hl";
      int int0 = 23;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneOffset("L?Y70u`;a,Hl", false, 23, 23);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      assertNotNull(dateTimeFieldType0);
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      
      long long0 = 1L;
      DateTimeZone dateTimeZone0 = null;
      // Undeclared exception!
      try { 
        MutableDateTime.parse("L?Y70u`;a,Hl");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"L?Y70u`;a,Hl\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId[] dateTimeFormatterBuilder_TimeZoneIdArray0 = DateTimeFormatterBuilder.TimeZoneId.values();
      assertEquals(1, dateTimeFormatterBuilder_TimeZoneIdArray0.length);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneIdArray0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(1456, 1456);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendDayOfWeekText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendTwoDigitWeekyear(90, false);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder3);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 65, true);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      Chronology chronology0 = gJChronology0.withUTC();
      assertSame(gJChronology0, chronology0);
      assertSame(chronology0, gJChronology0);
      assertNotNull(chronology0);
      
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(chronology0);
      assertSame(gJChronology0, chronology0);
      assertSame(chronology0, gJChronology0);
      assertNotNull(dateTimeField0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimePrinter0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(65, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimeParser0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(65, dateTimeParser0.estimateParsedLength());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append('=');
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringWriter1);
      assertEquals("=", stringWriter0.toString());
      assertEquals("=", stringWriter1.toString());
      
      StringBuffer stringBuffer0 = new StringBuffer(45);
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) stringBuffer0);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringWriter2, stringWriter0);
      assertNotNull(stringWriter2);
      assertEquals("=", stringWriter0.toString());
      assertEquals("=", stringWriter1.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("=", stringWriter2.toString());
      
      StringBuffer stringBuffer1 = stringWriter2.getBuffer();
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertNotSame(stringBuffer1, stringBuffer0);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertNotSame(stringBuffer0, stringBuffer1);
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringWriter2, stringWriter0);
      assertNotNull(stringBuffer1);
      assertEquals("=", stringBuffer1.toString());
      assertEquals(1, stringBuffer1.length());
      assertEquals("=", stringWriter0.toString());
      assertEquals("=", stringWriter1.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("=", stringWriter2.toString());
      
      LocalDateTime localDateTime0 = new LocalDateTime(264L, (Chronology) gJChronology0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      
      dateTimePrinter0.printTo(stringBuffer1, (ReadablePartial) localDateTime0, locale0);
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertFalse(stringBuffer0.equals((Object)stringBuffer1));
      assertNotSame(stringBuffer1, stringBuffer0);
      assertSame(gJChronology0, chronology0);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertNotSame(stringBuffer0, stringBuffer1);
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringWriter2, stringWriter0);
      assertEquals(2, stringBuffer1.length());
      assertEquals("=0", stringBuffer1.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(65, dateTimePrinter0.estimatePrintedLength());
      assertEquals("=0", stringWriter0.toString());
      assertEquals("=0", stringWriter1.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("=0", stringWriter2.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.append(dateTimePrinter0, dateTimeParser0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(65, dateTimePrinter0.estimatePrintedLength());
      assertEquals(65, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendFraction(dateTimeFieldType0, 64, 45);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder5);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(65, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(65, dateTimePrinter0.estimatePrintedLength());
      assertEquals(65, dateTimeParser0.estimateParsedLength());
      
      DateTimeParser dateTimeParser1 = dateTimeFormatterBuilder2.toParser();
      assertFalse(dateTimeParser1.equals((Object)dateTimeParser0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertNotSame(dateTimeParser1, dateTimeParser0);
      assertNotNull(dateTimeParser1);
      assertEquals(123, dateTimeParser1.estimateParsedLength());
      
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeFormatterBuilder_TimeZoneIdArray0);
      assertEquals(1, dateTimeFormatterBuilder_TimeZoneIdArray0.length);
      assertNotNull(dateTimeFormatterBuilder_MatchingParser0);
      assertEquals(32, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      
      Integer integer0 = new Integer(64);
      assertNotNull(integer0);
      assertEquals(64, (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(2176L, gJChronology0, locale0, integer0, 10080);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(64, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      
      int int0 = dateTimeFormatterBuilder_MatchingParser0.parseInto(dateTimeParserBucket0, stringBuffer0, 90);
      assertEquals(1, dateTimeFormatterBuilder_TimeZoneIdArray0.length);
      assertFalse(stringBuffer0.equals((Object)stringBuffer1));
      assertSame(gJChronology0, chronology0);
      assertNotSame(stringBuffer0, stringBuffer1);
      assertEquals((-91), int0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(32, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      assertEquals(64, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      int int1 = dateTimeFormatterBuilder_MatchingParser0.parseInto(dateTimeParserBucket0, stringBuffer0, 50);
      assertEquals(1, dateTimeFormatterBuilder_TimeZoneIdArray0.length);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(int1 == int0);
      assertFalse(stringBuffer0.equals((Object)stringBuffer1));
      assertSame(gJChronology0, chronology0);
      assertNotSame(stringBuffer0, stringBuffer1);
      assertEquals((-51), int1);
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(32, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      assertEquals(64, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId.values();
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(1456, 1456);
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendDayOfWeekText();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 65, true);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Chronology chronology0 = gJChronology0.withUTC();
      dateTimeFieldType0.getField(chronology0);
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      InternalParserDateTimeParser.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('=');
      StringBuffer stringBuffer0 = new StringBuffer(90);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) stringBuffer0);
      StringBuffer stringBuffer1 = stringWriter2.getBuffer();
      LocalDateTime localDateTime0 = new LocalDateTime(264L, (Chronology) gJChronology0);
      Locale locale0 = Locale.TAIWAN;
      dateTimePrinter0.printTo(stringBuffer1, (ReadablePartial) localDateTime0, locale0);
      assertEquals("=0", stringBuffer1.toString());
      
      dateTimeFormatterBuilder2.appendHalfdayOfDayText();
      dateTimeFormatterBuilder2.toParser();
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1456, gJChronology0, locale0, (Integer) null, 64);
      int int0 = dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket0, stringBuffer0, (-1726));
      assertEquals(1725, int0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 2086, 2086);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(">MX*");
      TimeZone timeZone0 = TimeZone.getTimeZone("Mexico/G");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      Chronology chronology0 = julianChronology0.withUTC();
      dateTimeFormatterBuilder_Fraction0.printTo((Appendable) mockPrintWriter0, 1996L, chronology0);
      dateTimeFormatterBuilder_Fraction0.estimateParsedLength();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-1472), false);
      Locale locale0 = new Locale("(kfP-HIvi_u'", "(kfP-HIvi_u'");
      dateTimeFormatterBuilder_TwoDigitYear0.printTo((Appendable) mockPrintWriter0, (long) 18, (Chronology) julianChronology0, 6, dateTimeZone0, locale0);
      MonthDay monthDay0 = MonthDay.now(chronology0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      linkedHashSet0.add((Locale) null);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
      Locale locale1 = Locale.PRC;
      dateTimeFormatterBuilder_TwoDigitYear0.printTo((Appendable) mockPrintWriter0, (ReadablePartial) monthDay0, locale1);
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendLiteral('v');
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder1.appendTimeZoneOffset((String) null, ">MX*", true, (-1472), 15271875);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId.values();
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(1456, 1456);
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendDayOfWeekText();
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendTwoDigitWeekyear(90, false);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 65, true);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Chronology chronology0 = gJChronology0.withUTC();
      dateTimeFieldType0.getField(chronology0);
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('=');
      StringBuffer stringBuffer0 = new StringBuffer(45);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) stringBuffer0);
      StringBuffer stringBuffer1 = stringWriter2.getBuffer();
      LocalDateTime localDateTime0 = new LocalDateTime(264L, (Chronology) gJChronology0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      dateTimePrinter0.printTo(stringBuffer1, (ReadablePartial) localDateTime0, locale0);
      dateTimeFormatterBuilder3.append(dateTimePrinter0, dateTimeParser0);
      dateTimeFormatterBuilder2.appendHalfdayOfDayText();
      dateTimeFormatterBuilder2.toParser();
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1456, gJChronology0, locale0, (Integer) null, 64);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket0, stringBuffer0, (-1726));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1726
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId.values();
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(1456, 1456);
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendDayOfWeekText();
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendTwoDigitWeekyear(90, false);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 65, true);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Chronology chronology0 = gJChronology0.withUTC();
      dateTimeFieldType0.getField(chronology0);
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('=');
      StringBuffer stringBuffer0 = new StringBuffer(45);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) stringBuffer0);
      StringBuffer stringBuffer1 = stringWriter2.getBuffer();
      LocalDateTime localDateTime0 = new LocalDateTime(264L, (Chronology) gJChronology0);
      Locale locale0 = Locale.TAIWAN;
      dateTimePrinter0.printTo(stringBuffer1, (ReadablePartial) localDateTime0, locale0);
      dateTimeFormatterBuilder3.append(dateTimePrinter0, dateTimeParser0);
      dateTimeFormatterBuilder2.appendHalfdayOfDayText();
      dateTimeFormatterBuilder2.toParser();
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1456, gJChronology0, locale0, (Integer) null, 64);
      dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket0, stringBuffer0, (-1726));
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_Composite0.printTo((Appendable) stringWriter0, (long) 90, chronology0, 64, dateTimeZone0, locale0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 2086, 2086);
      String string0 = ">MX*";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(">MX*");
      TimeZone timeZone0 = TimeZone.getTimeZone("Mexico/G");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      Chronology chronology0 = julianChronology0.withUTC();
      dateTimeFormatterBuilder_Fraction0.printTo((Appendable) mockPrintWriter0, 1996L, chronology0);
      dateTimeFormatterBuilder_Fraction0.estimateParsedLength();
      int int0 = (-1472);
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-1472), true);
      Locale locale0 = new Locale("(kfP-HIvi_u'", "(kfP-HIvi_u'");
      dateTimeFormatterBuilder_TwoDigitYear0.printTo((Appendable) mockPrintWriter0, (long) 18, (Chronology) julianChronology0, 6, dateTimeZone0, locale0);
      MonthDay monthDay0 = MonthDay.now(chronology0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      linkedHashSet0.add(locale0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
      Locale locale1 = Locale.PRC;
      dateTimeFormatterBuilder_TwoDigitYear0.printTo((Appendable) mockPrintWriter0, (ReadablePartial) monthDay0, locale1);
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.appendLiteral('v');
      String string1 = null;
      boolean boolean0 = true;
      int int1 = 15271875;
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendPattern("Mexico/B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: i
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('H');
      Appendable appendable0 = null;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      YearMonth yearMonth0 = null;
      try {
        yearMonth0 = new YearMonth(dateTimeFormatterBuilder_TextField0, buddhistChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.joda.time.format.DateTimeFormatterBuilder$TextField
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendHalfdayOfDayText();
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(1230, 1230, 1230);
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormat_StyleFormatter0);
      dateTimeFormatterBuilder1.append(dateTimePrinter0);
      int int0 = (-3152);
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneName((Map<String, DateTimeZone>) hashMap0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder2.appendFixedSignedDecimal(dateTimeFieldType0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal number of digits: -1
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      int int0 = 0;
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendYearOfEra(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 141;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMinuteOfHour(141);
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneName((Map<String, DateTimeZone>) hashMap0);
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendSecondOfMinute(141);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendDecimal(dateTimeFieldType0, 141, 141);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Europe/I");
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.centuryOfEra();
      dateTimeFormatterBuilder0.appendSecondOfDay(141);
      int int1 = (-59);
      dateTimeFormatterBuilder2.canBuildFormatter();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder4.appendFixedDecimal(dateTimeFieldType1, (-59));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal number of digits: -59
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMinuteOfHour(141);
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneName((Map<String, DateTimeZone>) hashMap0);
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendLiteral("Europe/I");
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      dateTimeFormatterBuilder3.appendDecimal(dateTimeFieldType0, 141, 141);
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.centuryOfEra();
      dateTimeFormatterBuilder0.appendSecondOfDay(141);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      dateTimeFormatterBuilder3.appendFractionOfDay(141, (-59));
      dateTimeFieldType1.getDurationType();
      dateTimeFormatterBuilder0.appendClockhourOfDay(141);
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      dateTimeFormatterBuilder_TextField0.estimatePrintedLength();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-59), hashMap0);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      LocalDate localDate0 = LocalDate.now((Chronology) islamicChronology0);
      LocalTime localTime0 = LocalTime.fromMillisOfDay((long) 1);
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.year();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType2, (-2079), false);
      Locale locale0 = Locale.CANADA_FRENCH;
      Integer integer0 = new Integer((byte) (-126));
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-59), islamicChronology0, locale0, integer0, (-5304));
      dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, "Europe/I", 329);
      // Undeclared exception!
      try { 
        localDate0.toLocalDateTime(localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chronology of the time does not match
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField((DateTimeFieldType) null, true);
      char[] charArray0 = new char[1];
      charArray0[0] = '7';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      LocalTime localTime0 = new LocalTime((-801L));
      localTime0.toString();
      LocalTime localTime1 = localTime0.plusMinutes((-840));
      Locale locale0 = Locale.CHINA;
      dateTimeFormatterBuilder_TextField0.printTo((Appendable) charBuffer0, (ReadablePartial) localTime1, locale0);
      dateTimeFormatterBuilder_TextField0.estimateParsedLength();
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneName();
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_TextField0);
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];
      InternalParserDateTimeParser.of(dateTimeFormatterBuilder_TextField0);
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_TextField0);
      dateTimeParserArray0[1] = dateTimeParser0;
      DateTimeParser dateTimeParser1 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_TextField0);
      dateTimeParserArray0[2] = dateTimeParser1;
      DateTimeParser dateTimeParser2 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_TextField0);
      dateTimeParserArray0[3] = dateTimeParser2;
      DateTimeParser dateTimeParser3 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_TextField0);
      dateTimeParserArray0[2] = dateTimeParser3;
      dateTimeFormatterBuilder0.append(dateTimePrinter0, dateTimeParserArray0[1]);
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendYearOfEra('\uFFFD', '\uFFFD');
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendCenturyOfEra('\uFFFD', (-727));
      dateTimeFormatterBuilder3.appendTwoDigitWeekyear(7593724);
      System.setCurrentTimeMillis((-840));
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 7593724, false);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Appendable) charBuffer0, (ReadablePartial) localTime0, locale0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      int int0 = 363;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 363, false);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(363);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(copticChronology0);
      Locale locale0 = Locale.KOREA;
      int int1 = 16;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Integer integer0 = new Integer(16);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(363, lenientChronology0, locale0, integer0, 16);
      dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "org/joda/time/tz/data", 363);
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendHourOfHalfday(1);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder1.appendClockhourOfHalfday((-364));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      DateTimeFieldType.minuteOfHour();
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("The unit milliseconds must be at least 1", "l9<x%C?", false, 83, 83);
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_TimeZoneOffset0);
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_TimeZoneOffset0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_TimeZoneOffset0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      Integer integer0 = new Integer(292278993);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      dateTimeFormatter0.parseLocalDate("l9<x%C?");
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear((-769));
      dateTimeFormatter2.print(2629800000L);
      Integer.remainderUnsigned(83, (-769));
      GregorianChronology.getInstanceUTC();
      // Undeclared exception!
      try { 
        dateTimeFormatter3.parseMutableDateTime("org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org.joda.time.format.DateTimeFor...\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfYear(44);
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      HashMap<String, DateTimeZone> hashMap1 = new HashMap<String, DateTimeZone>(hashMap0);
      dateTimeFormatterBuilder1.appendTimeZoneShortName((Map<String, DateTimeZone>) hashMap1);
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTwoDigitYear(44);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendShortText(dateTimeFieldType0);
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("US/H");
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_StringLiteral0);
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_StringLiteral0);
      GJChronology gJChronology0 = GJChronology.getInstance();
      StrictChronology strictChronology0 = StrictChronology.getInstance(gJChronology0);
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(strictChronology0, dateTimeZone0);
      Chronology chronology0 = zonedChronology0.withUTC();
      dateTimeFieldType0.getField(chronology0);
      dateTimeParserArray0[0] = dateTimeParser0;
      dateTimeFormatterBuilder3.append(dateTimePrinter0, dateTimeParserArray0);
      dateTimeFormatterBuilder3.appendTimeZoneName((Map<String, DateTimeZone>) hashMap0);
      boolean boolean0 = dateTimeFormatterBuilder3.canBuildParser();
      assertTrue(boolean0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendMillisOfDay(44);
      dateTimeFormatterBuilder1.appendDayOfYear(5);
      dateTimeFormatterBuilder1.appendMonthOfYear(5);
      dateTimeFormatterBuilder3.appendTimeZoneOffset("", "US/H", true, 25, 48);
      DateTimePrinter dateTimePrinter1 = dateTimeFormatterBuilder4.toPrinter();
      assertEquals(147, dateTimePrinter1.estimatePrintedLength());
      
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('~');
      Locale locale0 = Locale.ITALY;
      Integer integer0 = new Integer(85);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(25, zonedChronology0, locale0, integer0, (-282));
      int int0 = dateTimeFormatterBuilder_CharacterLiteral0.parseInto(dateTimeParserBucket0, "org/joda/time/tz/data", 44);
      assertEquals((-45), int0);
  }
}
