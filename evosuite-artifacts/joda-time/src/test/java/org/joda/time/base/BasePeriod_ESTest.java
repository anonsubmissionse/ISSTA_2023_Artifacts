/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 05 20:08:29 GMT 2022
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDateTime;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Weeks;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BasePeriod_ESTest extends BasePeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 2574, 0, 0);
      mutablePeriod0.add((ReadablePeriod) mutablePeriod0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Period period0 = Period.ZERO;
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      // Undeclared exception!
      try { 
        period0.withFieldAdded(durationFieldType0, (-373));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'halfdays'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, (ReadableInstant) null, periodType0);
      // Undeclared exception!
      try { 
        mutablePeriod0.setWeeks(3267);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'weeks'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      Period period0 = null;
      try {
        period0 = new Period((-1848), 0, 0, (-1848), (-1848), (-1848), 1090, 8, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'years'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, 0, 0, 661, (-563), 661, 0);
      mutablePeriod0.setValue(0, (-1));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(30962844000000L);
      Duration duration0 = mutablePeriod0.toDurationTo((ReadableInstant) null);
      assertEquals(8600790L, duration0.getStandardHours());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateTime dateTime0 = new DateTime(282L);
      MutablePeriod mutablePeriod0 = new MutablePeriod(dateTime0, dateTime0);
      Duration duration0 = mutablePeriod0.toDurationTo(dateTime0);
      assertEquals(0L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime((Chronology) buddhistChronology0);
      Period period0 = Period.hours(1);
      Duration duration0 = period0.toDurationTo(dateTime0);
      assertEquals(1L, duration0.getStandardHours());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      MutablePeriod mutablePeriod0 = new MutablePeriod(mutableDateTime0, mutableDateTime0);
      Duration duration0 = mutablePeriod0.toDurationFrom(mutableDateTime0);
      assertEquals(0L, duration0.getStandardMinutes());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(91);
      DateTime dateTime0 = new DateTime(1L, dateTimeZone0);
      Duration duration0 = Duration.standardDays(1L);
      Period period0 = duration0.toPeriod();
      Period period1 = period0.multipliedBy((-2164));
      Duration duration1 = period1.toDurationFrom(dateTime0);
      assertEquals((-186969600000L), duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Period period0 = Period.hours(0);
      int int0 = period0.getValue(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Period period0 = Period.ZERO;
      PeriodType periodType0 = period0.getPeriodType();
      assertEquals(8, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Duration duration0 = Duration.millis(86399999);
      DateTime dateTime0 = DateTime.now();
      Period period0 = duration0.toPeriodTo((ReadableInstant) dateTime0);
      int int0 = period0.getValue(5);
      assertEquals(59, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Weeks weeks0 = Weeks.weeks((-2163));
      PeriodType periodType0 = weeks0.getPeriodType();
      MutablePeriod mutablePeriod0 = new MutablePeriod((-2163), (-2163), periodType0);
      Months months0 = Months.MIN_VALUE;
      // Undeclared exception!
      try { 
        mutablePeriod0.add((ReadablePeriod) months0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'months'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      MutablePeriod mutablePeriod0 = new MutablePeriod(2660L, (Chronology) gJChronology0);
      mutablePeriod0.add((ReadablePeriod) null);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      Period period0 = new Period(63071999967L, (Chronology) ethiopicChronology0);
      Days days0 = Days.SEVEN;
      MutablePeriod mutablePeriod0 = period0.toMutablePeriod();
      mutablePeriod0.mergePeriod(days0);
      assertEquals(7, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Hours hours0 = Hours.hours(8);
      PeriodType periodType0 = hours0.getPeriodType();
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
      mutablePeriod0.addMillis(0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Period period0 = Period.ZERO;
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      // Undeclared exception!
      try { 
        period0.withFieldAdded(durationFieldType0, 280);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'halfdays'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Instant instant0 = Instant.ofEpochSecond(2204L);
      Duration duration0 = Duration.standardHours(2204L);
      PeriodType periodType0 = PeriodType.days();
      MutablePeriod mutablePeriod0 = new MutablePeriod(instant0, duration0, periodType0);
      // Undeclared exception!
      try { 
        mutablePeriod0.set((DurationFieldType) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'null'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      mutablePeriod0.setMonths((-4860));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((Object) null);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Period period0 = Period.millis(77);
      PeriodType periodType0 = PeriodType.hours();
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod(period0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'millis'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Partial partial0 = new Partial(gJChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      Partial partial1 = partial0.with(dateTimeFieldType0, 1);
      Period period0 = new Period(partial1, partial1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Partial partial0 = new Partial(gJChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      Partial partial1 = partial0.with(dateTimeFieldType0, 1);
      Partial partial2 = partial1.without(dateTimeFieldType0);
      Period period0 = null;
      try {
        period0 = new Period(partial2, partial1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      PeriodType periodType0 = PeriodType.days();
      Period period0 = null;
      try {
        period0 = new Period(localDateTime0, (ReadablePartial) null, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      PeriodType periodType0 = PeriodType.days();
      Period period0 = new Period(localDateTime0, localDateTime0, periodType0);
      MutablePeriod mutablePeriod0 = period0.toMutablePeriod();
      // Undeclared exception!
      try { 
        mutablePeriod0.setHours((-2600));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'hours'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      Period period0 = null;
      try {
        period0 = new Period((ReadablePartial) null, (ReadablePartial) null, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      MutablePeriod mutablePeriod0 = MutablePeriod.parse("hxw", periodFormatter0);
      mutablePeriod0.setPeriod((-17), (-17), (-17), (-17), (-17), (-17), 8, (-17));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      Period period0 = new Period(63071999967L, (Chronology) ethiopicChronology0);
      MutablePeriod mutablePeriod0 = period0.toMutablePeriod();
      mutablePeriod0.addWeeks(1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      Period period0 = new Period(63071999967L, (Chronology) ethiopicChronology0);
      DateTime dateTime0 = DateTime.now();
      Duration duration0 = period0.toDurationFrom(dateTime0);
      assertEquals(63071999L, duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(2421L);
      mutablePeriod0.mergePeriod((ReadablePeriod) null);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Instant instant0 = Instant.ofEpochSecond(2204L);
      Duration duration0 = Duration.standardHours(2204L);
      PeriodType periodType0 = PeriodType.days();
      MutablePeriod mutablePeriod0 = new MutablePeriod(instant0, duration0, periodType0);
      mutablePeriod0.setMillis(0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Period period0 = Period.weeks((-1561));
      Duration duration0 = period0.toDurationTo((ReadableInstant) null);
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, duration0, (PeriodType) null);
      mutablePeriod0.add((ReadablePeriod) period0);
      assertEquals((-10927L), duration0.getStandardDays());
      assertEquals((-944092800000L), duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, 1, 4, 1, 4, 0, 3);
      // Undeclared exception!
      try { 
        mutablePeriod0.add((DurationFieldType) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'null'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Instant instant0 = new Instant();
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, instant0);
      // Undeclared exception!
      try { 
        mutablePeriod0.setValue(298, 298);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 298
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Instant instant0 = Instant.ofEpochSecond((-794L));
      Days days0 = Days.TWO;
      Duration duration0 = days0.toStandardDuration();
      Period period0 = new Period(instant0, duration0, (PeriodType) null);
      // Undeclared exception!
      try { 
        period0.getValue(2625);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
