/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 05 20:32:27 GMT 2022
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.Minutes;
import org.joda.time.MutableDateTime;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.ZonedChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BaseDuration_ESTest extends BaseDuration_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Duration duration0 = Duration.parse((String) null);
      assertEquals(0L, duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(0L);
      PeriodType periodType0 = PeriodType.dayTime();
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(julianChronology0, dateTimeZone0);
      Period period0 = duration0.toPeriod(periodType0, (Chronology) zonedChronology0);
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      Hours hours0 = seconds0.toStandardHours();
      Duration duration0 = hours0.toStandardDuration();
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      YearMonth yearMonth0 = new YearMonth((-3989L), (Chronology) copticChronology0);
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      Interval interval0 = yearMonth0.toInterval(dateTimeZone0);
      Interval interval1 = interval0.withStartMillis(0L);
      Interval interval2 = interval1.withPeriodAfterStart(hours0);
      DateTime dateTime0 = interval2.getEnd();
      Interval interval3 = duration0.toIntervalTo(dateTime0);
      assertEquals(0L, interval3.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Duration duration0 = Duration.standardHours(3633L);
      Instant instant0 = Instant.ofEpochSecond(0L);
      Interval interval0 = duration0.toIntervalTo(instant0);
      assertEquals((-13078800000L), interval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Minutes minutes0 = Minutes.ZERO;
      Weeks weeks0 = minutes0.toStandardWeeks();
      Duration duration0 = weeks0.toStandardDuration();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      DateTime dateTime0 = DateTime.now(dateTimeZone0);
      Interval interval0 = duration0.toIntervalTo(dateTime0);
      assertEquals(1392409281320L, interval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Instant instant0 = Instant.EPOCH;
      Interval interval0 = duration0.toIntervalFrom(instant0);
      assertEquals(0L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(2118L);
      DateTime dateTime0 = new DateTime(343L);
      DateTime dateTime1 = dateTime0.withYearOfCentury(0);
      Interval interval0 = duration0.toIntervalFrom(dateTime1);
      assertEquals((-2208861719657L), interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Period period0 = new Period();
      Weeks weeks0 = period0.toStandardWeeks();
      Duration duration0 = weeks0.toStandardDuration();
      long long0 = duration0.getMillis();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Duration duration0 = new Duration((-2750L), 1L);
      long long0 = duration0.getMillis();
      assertEquals(2751L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PeriodType periodType0 = PeriodType.seconds();
      Duration duration0 = Duration.millis((-12219292800000L));
      DateTime dateTime0 = new DateTime((long) 0);
      // Undeclared exception!
      try { 
        duration0.toPeriodFrom((ReadableInstant) dateTime0, periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -12219292800
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Weeks weeks0 = Weeks.MIN_VALUE;
      Duration duration0 = weeks0.toStandardDuration();
      PeriodType periodType0 = weeks0.getPeriodType();
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      // Undeclared exception!
      try { 
        duration0.toPeriod(periodType0, (Chronology) copticChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The minuend instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Hours hours0 = Hours.TWO;
      Duration duration0 = hours0.toStandardDuration();
      Seconds seconds0 = Seconds.MIN_VALUE;
      Duration duration1 = seconds0.toStandardDuration();
      Duration duration2 = duration0.withDurationAdded((ReadableDuration) duration1, 22);
      PeriodType periodType0 = PeriodType.seconds();
      // Undeclared exception!
      try { 
        duration2.toPeriod(periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -47244633056
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Duration duration0 = new Duration(9223372036854775807L);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      // Undeclared exception!
      try { 
        duration0.toPeriod((Chronology) gregorianChronology0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 15250284452
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      Duration duration0 = seconds0.toStandardDuration();
      DateTime dateTime0 = new DateTime((long) 0);
      // Undeclared exception!
      try { 
        duration0.toIntervalTo(dateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Days days0 = Days.THREE;
      Duration duration0 = days0.toStandardDuration();
      Duration duration1 = duration0.minus(604800000L);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 352831696);
      // Undeclared exception!
      try { 
        duration1.toIntervalFrom(mutableDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-1L));
      long long0 = duration0.getMillis();
      assertEquals((-86400000L), long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Duration duration0 = new Duration((ReadableInstant) null, (ReadableInstant) null);
      assertEquals(0L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) (-1));
      Period period0 = duration0.toPeriodTo((ReadableInstant) mutableDateTime0);
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Duration duration0 = new Duration(1L);
      DateTime dateTime0 = DateTime.now();
      Interval interval0 = duration0.toIntervalFrom(dateTime0);
      assertEquals(1392409281321L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Weeks weeks0 = Weeks.MIN_VALUE;
      Duration duration0 = weeks0.toStandardDuration();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      Seconds seconds0 = Seconds.MAX_VALUE;
      Minutes minutes0 = seconds0.toStandardMinutes();
      PeriodType periodType0 = minutes0.getPeriodType();
      // Undeclared exception!
      try { 
        duration0.toPeriod(periodType0, (Chronology) julianChronology0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -21646635171840
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Days days0 = Days.THREE;
      Duration duration0 = days0.toStandardDuration();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      duration0.toPeriod((Chronology) gregorianChronology0);
      assertEquals(259200000L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateTime dateTime0 = new DateTime(470L);
      Duration duration0 = new Duration((ReadableInstant) null, dateTime0);
      duration0.toPeriod((PeriodType) null);
      assertEquals((-1392409280850L), duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      Duration duration0 = new Duration((ReadableInstant) null, dateTime0);
      duration0.toPeriodTo((ReadableInstant) dateTime0, (PeriodType) null);
      assertEquals(0L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) (-1));
      Interval interval0 = duration0.toIntervalTo(mutableDateTime0);
      assertEquals((-1L), interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Duration duration0 = new Duration(1L);
      DateTime dateTime0 = DateTime.now();
      PeriodType periodType0 = PeriodType.yearDay();
      duration0.toPeriodFrom((ReadableInstant) dateTime0, periodType0);
      assertEquals(1L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Duration duration0 = new Duration(1L);
      DateTime dateTime0 = DateTime.now();
      duration0.toPeriodFrom((ReadableInstant) dateTime0);
      assertEquals(1L, duration0.getMillis());
  }
}
