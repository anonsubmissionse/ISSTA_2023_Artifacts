/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 05 19:50:37 GMT 2022
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.regex.PatternSyntaxException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.joda.time.Days;
import org.joda.time.Hours;
import org.joda.time.Minutes;
import org.joda.time.Months;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadWritablePeriod;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.Years;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.format.PeriodFormat;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodFormatterBuilder;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PeriodFormatterBuilder_ESTest extends PeriodFormatterBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "halfdayOfDay";
      stringArray0[1] = "lder";
      stringArray0[2] = "lder";
      stringArray0[3] = "lder";
      stringArray0[4] = "lder";
      stringArray0[5] = "lder";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("lder");
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, periodFormatterBuilder_Literal0);
      assertFalse(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatter0);
      
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter0);
      assertFalse(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormat_DynamicWordBased0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("lder", "lder", stringArray0, periodFormat_DynamicWordBased0, periodFormatterBuilder_Literal0, true, true);
      assertFalse(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertEquals(6, stringArray0.length);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      Seconds seconds0 = Seconds.seconds((-6));
      assertEquals((-6), seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
      
      Hours hours0 = seconds0.toStandardHours();
      assertEquals((-6), seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertNotNull(hours0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      int int0 = periodFormatterBuilder_Separator0.countFieldsToPrint(hours0, (-6), locale0);
      assertFalse(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertEquals((-6), seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0, int0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("org.joda.time.format.PeriodFormatterBuilder$PluralAffix");
      assertNotNull(periodFormatterBuilder_Literal0);
      
      int int0 = periodFormatterBuilder_Literal0.parseInto((ReadWritablePeriod) null, "org.joda.time.format.PeriodFormatterBuilder$PluralAffix", 0, (Locale) null);
      assertEquals(55, int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("org.joda.time.base.AbstractDateTime");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(2144, 2144, 0, true, 387, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      Weeks weeks0 = Weeks.THREE;
      assertEquals(3, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
      
      Minutes minutes0 = weeks0.toStandardMinutes();
      assertEquals(3, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertEquals(1, minutes0.size());
      assertEquals(30240, minutes0.getMinutes());
      assertNotNull(minutes0);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      int int0 = periodFormatterBuilder_FieldFormatter0.countFieldsToPrint(minutes0, 13, locale0);
      assertEquals(3, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertEquals(1, minutes0.size());
      assertEquals(30240, minutes0.getMinutes());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("", "^\"9");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      int int0 = periodFormatterBuilder_CompositeAffix0.scan("org.joda.time.format.DateTimeFormat$StyleFormatter", (-110));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "E@*,mxE-V\"K5v!Xoj}";
      stringArray0[1] = "E@*,mxE-V\"K5v!Xoj}";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      int int0 = periodFormatterBuilder_RegExAffix0.scan("", 58);
      assertEquals((-59), int0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("|Sb");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("|Sb", 1145);
      assertEquals((-1146), int0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String[] stringArray0 = new String[2];
      String[] stringArray1 = new String[8];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix(stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String[] stringArray0 = new String[2];
      String[] stringArray1 = new String[7];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendPrefix(stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("v;KUE4r&5");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Unit duration field must be precise";
      stringArray0[1] = "Unit duration field must be precise";
      stringArray0[2] = "Unit duration field must be precise";
      stringArray0[3] = "Unit duration field must be precise";
      stringArray0[4] = "Unit duration field must be precise";
      stringArray0[5] = "Unit duration field must be precise";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal((String) null);
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("Unit duration field must be precise", "Unit duration field must be precise", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, false);
      assertEquals(6, stringArray0.length);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      assertEquals(6, stringArray0.length);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertNotNull(periodFormatterBuilder_Separator1);
      
      Period period0 = Period.years((-1450));
      assertNotNull(period0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "Unit duration field must be precise");
      assertEquals(35, stringBuffer0.length());
      assertEquals("Unit duration field must be precise", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      periodFormatterBuilder_Separator1.printTo(stringBuffer0, (ReadablePeriod) period0, locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals(43, stringBuffer0.length());
      assertEquals("Unit duration field must be precisenullnull", stringBuffer0.toString());
      assertEquals(6, stringArray0.length);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "org\u0000joda\u0000time\u0000format\u0000PeriodFormatterBuilder$Composite";
      stringArray0[1] = "org\u0000joda\u0000time\u0000format\u0000PeriodFormatterBuilder$Composite";
      stringArray0[2] = "org\u0000joda\u0000time\u0000format\u0000PeriodFormatterBuilder$Composite";
      stringArray0[3] = "org\u0000joda\u0000time\u0000format\u0000PeriodFormatterBuilder$Composite";
      stringArray0[4] = "org\u0000joda\u0000time\u0000format\u0000PeriodFormatterBuilder$Composite";
      stringArray0[5] = "org\u0000joda\u0000time\u0000format\u0000PeriodFormatterBuilder$Composite";
      stringArray0[6] = "org\u0000joda\u0000time\u0000format\u0000PeriodFormatterBuilder$Composite";
      stringArray0[7] = "org\u0000joda\u0000time\u0000format\u0000PeriodFormatterBuilder$Composite";
      stringArray0[8] = "org\u0000joda\u0000time\u0000format\u0000PeriodFormatterBuilder$Composite";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      PeriodType periodType0 = PeriodType.days();
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, locale0, periodType0);
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatter0);
      
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter0);
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormat_DynamicWordBased0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("org\u0000joda\u0000time\u0000format\u0000PeriodFormatterBuilder$Composite", "org\u0000joda\u0000time\u0000format\u0000PeriodFormatterBuilder$Composite", stringArray0, periodFormat_DynamicWordBased0, periodFormat_DynamicWordBased0, true, false);
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertEquals(9, stringArray0.length);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertEquals(9, stringArray0.length);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertNotNull(periodFormatterBuilder_Separator1);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(7);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      Period period0 = Period.seconds(44);
      assertNotNull(period0);
      
      periodFormatterBuilder_Separator1.printTo((Writer) charArrayWriter0, (ReadablePeriod) period0, locale0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertEquals(9, stringArray0.length);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("\"ofB}7hRu@l");
      assertNotNull(periodFormatterBuilder_Literal0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertNotNull(locale0);
      
      StringWriter stringWriter0 = new StringWriter(0);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      Seconds seconds0 = Seconds.MAX_VALUE;
      assertEquals(Integer.MAX_VALUE, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
      
      periodFormatterBuilder_Literal0.printTo((Writer) stringWriter0, (ReadablePeriod) seconds0, locale0);
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("\"ofB}7hRu@l", stringWriter0.toString());
      assertEquals(Integer.MAX_VALUE, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("c;viM]-#VnH?tG\"u~");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_SimpleAffix0.scan("c;viM]-#VnH?tG\"u~", (-1574));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("v;KUE4r&5");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      StringBuffer stringBuffer0 = new StringBuffer("7|jf$}!EV");
      assertEquals(10, stringBuffer0.length());
      assertEquals("7|jf$}!EV", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      periodFormatterBuilder_SimpleAffix0.printTo(stringBuffer0, 3600000);
      assertEquals(19, stringBuffer0.length());
      assertEquals("7|jf$}!EVv;KUE4r&5", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(73);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      periodFormatterBuilder_SimpleAffix0.printTo((Writer) charArrayWriter0, 0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("mlo0P3^d,F-\"L*]");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      String[] stringArray0 = periodFormatterBuilder_SimpleAffix0.getAffixes();
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("@GZ;$3(F:");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      int int0 = periodFormatterBuilder_SimpleAffix0.calculatePrintedLength(0);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Composite0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "o#oD";
      stringArray0[1] = "org.joda.time.format.PeriodFormatterBuilder$Composite";
      stringArray0[2] = "org.joda.time.format.PeriodFormatterBuilder$Composite";
      stringArray0[3] = "Literal must not be null";
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("Literal must not be null", "o#oD", stringArray0, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, true, true);
      assertFalse(linkedList0.contains("o#oD"));
      assertEquals(0, linkedList0.size());
      assertEquals(4, stringArray0.length);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.calculatePrintedLength((ReadablePeriod) null, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "pt&^4=#cAQ2$~|`bv:";
      stringArray0[1] = "Literal must not be null";
      stringArray0[2] = "cco?bL5+n6I3";
      stringArray0[3] = "";
      stringArray0[4] = "org.joda.time.format.PeriodFormatterBuilder$Composite";
      stringArray0[5] = "";
      stringArray0[6] = "GMT-";
      stringArray0[7] = "VK|;Sf/&im%#GgS*i";
      stringArray0[8] = "org.joda.time.format.PeriodFormatterBuilder$CompositeAffix";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertEquals(9, stringArray0.length);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      periodFormatterBuilder_RegExAffix0.printTo(stringBuffer0, 57);
      assertEquals(58, stringBuffer0.length());
      assertEquals("org.joda.time.format.PeriodFormatterBuilder$CompositeAffix", stringBuffer0.toString());
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("Literal must not be null", "No formatter supplied");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      int int0 = periodFormatterBuilder_PluralAffix0.scan("No formatter supplied", (-782));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("", "");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      int int0 = periodFormatterBuilder_PluralAffix0.parse("`Q}LxH", 7593750);
      assertEquals((-7593751), int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("No printer or parser supplied", "");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      int int0 = periodFormatterBuilder_PluralAffix0.calculatePrintedLength((-639));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "er$s";
      stringArray0[1] = "er$s";
      stringArray0[2] = "er$s";
      stringArray0[3] = "er$s";
      stringArray0[4] = "er$s";
      stringArray0[5] = "er$s";
      stringArray0[6] = "er$s";
      stringArray0[7] = "er$s";
      stringArray0[8] = "er$s";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "Bxfu");
      assertEquals("Bxfu", stringBuffer0.toString());
      assertEquals(4, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertEquals(9, stringArray0.length);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      periodFormatterBuilder_RegExAffix0.printTo(stringBuffer0, 2569);
      assertEquals(8, stringBuffer0.length());
      assertEquals("Bxfuer$s", stringBuffer0.toString());
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("-CA)NI'\"i");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("zlc>Wng/fN<C", false);
      assertNotNull(mockFileWriter0);
      
      periodFormatterBuilder_SimpleAffix0.printTo((Writer) mockFileWriter0, 0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("No printer or parser supplied");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      String[] stringArray0 = periodFormatterBuilder_SimpleAffix0.getAffixes();
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("", "");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      periodFormatterBuilder_PluralAffix0.finish(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.tz.DefaultNameProvider", "org.joda.time.tz.DefaultNameProvider");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      int int0 = periodFormatterBuilder_PluralAffix0.calculatePrintedLength(48);
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("U@WtYQb");
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodType periodType0 = PeriodType.hours();
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType0.getName());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(1L, 482L, periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType0.getName());
      assertNotNull(mutablePeriod0);
      
      Locale locale0 = new Locale("U@WtYQb");
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("u@wtyqb", locale0.toString());
      assertEquals("u@wtyqb", locale0.getLanguage());
      assertNotNull(locale0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "U@WtYQb");
      assertEquals(7, stringBuffer0.length());
      assertEquals("U@WtYQb", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      periodFormatterBuilder_Literal0.printTo(stringBuffer0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType0.getName());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("u@wtyqb", locale0.toString());
      assertEquals("u@wtyqb", locale0.getLanguage());
      assertEquals(14, stringBuffer0.length());
      assertEquals("U@WtYQbU@WtYQb", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      Period period0 = new Period(1773L, 1773L);
      assertNotNull(period0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      int int0 = periodFormatterBuilder_Literal0.countFieldsToPrint(period0, 2676, locale0);
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      Months months0 = Months.ZERO;
      assertEquals(1, months0.size());
      assertEquals(0, months0.getMonths());
      assertNotNull(months0);
      
      int int0 = periodFormatterBuilder_Literal0.calculatePrintedLength(months0, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(1, months0.size());
      assertEquals(0, months0.getMonths());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[1];
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix((String) null, (String) null);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(0, 0, (-6), true, (-2887), periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertEquals(1, periodFormatterBuilder_FieldFormatterArray0.length);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      Period period0 = new Period((-5), (-5), 0, (-2887), (-1420), (-6), (-1420), (-465));
      assertNotNull(period0);
      
      boolean boolean0 = periodFormatterBuilder_FieldFormatter0.isZero(period0);
      assertFalse(boolean0);
      assertEquals(1, periodFormatterBuilder_FieldFormatterArray0.length);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("^", ":;f(g[ox_a ");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(8, (-4946), (-1420), false, 8, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      PeriodType periodType0 = PeriodType.weeks();
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertNotNull(periodType0);
      
      boolean boolean0 = periodFormatterBuilder_FieldFormatter0.isSupported(periodType0, (-8));
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.format.PeriodFormatterBuilder$CompositeAffix", "=H]mJFM$DHP_Wb");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-1), (-1), 900, true, (-1), periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertEquals(0, periodFormatterBuilder_FieldFormatterArray0.length);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      Days days0 = Days.FIVE;
      assertEquals(1, days0.size());
      assertEquals(5, days0.getDays());
      assertNotNull(days0);
      
      Hours hours0 = days0.toStandardHours();
      assertEquals(1, days0.size());
      assertEquals(5, days0.getDays());
      assertEquals(1, hours0.size());
      assertEquals(120, hours0.getHours());
      assertNotNull(hours0);
      
      long long0 = periodFormatterBuilder_FieldFormatter0.getFieldValue(hours0);
      assertEquals(1, days0.size());
      assertEquals(5, days0.getDays());
      assertEquals(1, hours0.size());
      assertEquals(120, hours0.getHours());
      assertEquals(9223372036854775807L, long0);
      assertEquals(0, periodFormatterBuilder_FieldFormatterArray0.length);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("v;KUE4r&5");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      String[] stringArray0 = periodFormatterBuilder_CompositeAffix0.getAffixes();
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Composite0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      
      Years years0 = Years.yearsIn((ReadableInterval) null);
      assertEquals(1, years0.size());
      assertEquals(0, years0.getYears());
      assertNotNull(years0);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Composite0.printTo((Writer) pipedWriter0, (ReadablePeriod) years0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Composite0);
      
      PeriodType periodType0 = PeriodType.months();
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertNotNull(periodType0);
      
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, (-934L), periodType0, julianChronology0);
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertNotNull(mutablePeriod0);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Composite0.parseInto(mutablePeriod0, "]{", 8, locale0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Composite0);
      
      Minutes minutes0 = Minutes.minutes(1850);
      assertEquals(1850, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertNotNull(minutes0);
      
      Days days0 = minutes0.toStandardDays();
      assertEquals(1850, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(1, days0.getDays());
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Composite0.countFieldsToPrint(days0, 0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Composite0);
      
      Weeks weeks0 = Weeks.MIN_VALUE;
      assertEquals(1, weeks0.size());
      assertEquals(Integer.MIN_VALUE, weeks0.getWeeks());
      assertNotNull(weeks0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Composite0.calculatePrintedLength(weeks0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMinutes();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSuffix("No printer supplied", "");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix";
      stringArray0[1] = "org\u0000joda\u0000time\u0000format\u0000PeriodFormatterBuilder$PluralAffix";
      stringArray0[2] = "s";
      stringArray0[3] = "TSsK7f<S~7C-";
      stringArray0[4] = "|wh%?d0<vflN&~qB";
      stringArray0[5] = "=eJcEy?{*Z=F";
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix(stringArray0, stringArray0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 6
         // =eJcEy?{*Z=F
         //       ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "weekyear";
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix(stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.format.PeriodFormatterBuilder$CompositeAffix", "=H]mJFM$DHP_Wb");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-1), (-1), 900, true, (-1), periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertEquals(0, periodFormatterBuilder_FieldFormatterArray0.length);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_FieldFormatter0, (PeriodParser) periodFormatterBuilder_FieldFormatter0);
      assertEquals(0, periodFormatterBuilder_FieldFormatterArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix("rato", "Builder has created neither a printer nor a parser");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSeparatorIfFieldsBefore((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("/<\"k_XHU,S.Xbl");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSeparatorIfFieldsAfter("/<\"k_XHU,S.Xbl");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Prefix not followed by field
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSeparator((String) null, "No field to apply suffix to", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("w@", "w@");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSeparator("w@", "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Prefix not followed by field
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSeparator((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "}K o3m#Aa[ZZH[1.N;";
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendPrefix(stringArray0, stringArray0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 17
         // }K o3m#Aa[ZZH[1.N;
         //                  ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("No printer or parser supplied", "No printer or parser supplied");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      String[] stringArray0 = periodFormatterBuilder_PluralAffix0.getAffixes();
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix(stringArray0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendLiteral("No printer or parser supplied");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Prefix not followed by field
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix(stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("INSTANCE", "", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, false);
      assertEquals(1, stringArray0.length);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      Hours hours0 = Hours.SIX;
      assertEquals(1, hours0.size());
      assertEquals(6, hours0.getHours());
      assertNotNull(hours0);
      
      PeriodType periodType0 = hours0.getPeriodType();
      assertEquals(1, hours0.size());
      assertEquals(6, hours0.getHours());
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Separator0, periodFormatterBuilder_Literal0, locale0, periodType0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(1, hours0.size());
      assertEquals(6, hours0.getHours());
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType0.getName());
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertEquals(1, stringArray0.length);
      assertNotNull(periodFormatter0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.append(periodFormatter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Prefix not followed by field
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "halfdayOfDay";
      stringArray0[1] = "lder";
      stringArray0[2] = "lder";
      stringArray0[3] = "lder";
      stringArray0[4] = "lder";
      stringArray0[5] = "lder";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("lder");
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, periodFormatterBuilder_Literal0);
      assertTrue(periodFormatter0.isParser());
      assertFalse(periodFormatter0.isPrinter());
      assertNotNull(periodFormatter0);
      
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter0);
      assertTrue(periodFormatter0.isParser());
      assertFalse(periodFormatter0.isPrinter());
      assertNotNull(periodFormat_DynamicWordBased0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("lder", "lder", stringArray0, periodFormat_DynamicWordBased0, periodFormatterBuilder_Literal0, true, true);
      assertTrue(periodFormatter0.isParser());
      assertFalse(periodFormatter0.isPrinter());
      assertEquals(6, stringArray0.length);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      Seconds seconds0 = Seconds.seconds(7);
      assertEquals(1, seconds0.size());
      assertEquals(7, seconds0.getSeconds());
      assertNotNull(seconds0);
      
      Hours hours0 = seconds0.toStandardHours();
      assertEquals(1, seconds0.size());
      assertEquals(7, seconds0.getSeconds());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.countFieldsToPrint(hours0, 7, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.DateTimeZone.Timezone", "org.joda.time.DateTimeZone.Timezone");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(100, 2147483645, (-3941), false, (-623191205), periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertEquals(0, periodFormatterBuilder_FieldFormatterArray0.length);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      periodFormatterBuilder_FieldFormatter0.finish(periodFormatterBuilder_FieldFormatterArray0);
      assertEquals(0, periodFormatterBuilder_FieldFormatterArray0.length);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(0, 0, 0, false, (-878), periodFormatterBuilder_FieldFormatterArray0, (PeriodFormatterBuilder.PeriodFieldAffix) null, (PeriodFormatterBuilder.PeriodFieldAffix) null);
      assertEquals(0, periodFormatterBuilder_FieldFormatterArray0.length);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      periodFormatterBuilder_FieldFormatter0.finish(periodFormatterBuilder_FieldFormatterArray0);
      assertEquals(0, periodFormatterBuilder_FieldFormatterArray0.length);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendWeeks();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Composite0);
      
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertNotNull(periodFormatter0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append(periodFormatter0);
      assertEquals(0, linkedList0.size());
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator("=eJcEy?{*Z=F", "org\u0000joda\u0000time\u0000format\u0000PeriodFormatterBuilder$PluralAffix");
      assertFalse(linkedList0.contains("=eJcEy?{*Z=F"));
      assertEquals(0, linkedList0.size());
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMinutes();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertNotNull(periodFormatter0);
      
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("E@*,mxE-V\"K5v!Xoj}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"E@*,mxE-V\"K5v!Xoj}\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Composite0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "4`kpF=;;eZ";
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("4`kpF=;;eZ", "", stringArray0, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, true, true);
      assertFalse(linkedList0.contains("4`kpF=;;eZ"));
      assertEquals(0, linkedList0.size());
      assertEquals(1, stringArray0.length);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      Days days0 = Days.MAX_VALUE;
      assertEquals(Integer.MAX_VALUE, days0.getDays());
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      MutablePeriod mutablePeriod0 = days0.toMutablePeriod();
      assertEquals(Integer.MAX_VALUE, days0.getDays());
      assertEquals(1, days0.size());
      assertNotNull(mutablePeriod0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "4`kpF=;;eZ", (-312), locale0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.joda.time.format.PeriodFormatterBuilder";
      stringArray0[1] = "org.joda.time.format.PeriodFormatterBuilder";
      stringArray0[2] = "org.joda.time.format.PeriodFormatterBuilder";
      stringArray0[3] = "org.joda.time.format.PeriodFormatterBuilder";
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_RegExAffix0, periodFormatterBuilder_RegExAffix0);
      assertEquals(4, stringArray0.length);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(2884, 2884, 798, true, 2884, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_RegExAffix0);
      assertEquals(4, stringArray0.length);
      assertEquals(0, periodFormatterBuilder_FieldFormatterArray0.length);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("org.joda.time.format.PeriodFormatterBuilder", "org.joda.time.format.PeriodFormatterBuilder", stringArray0, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, false, false);
      assertEquals(4, stringArray0.length);
      assertEquals(0, periodFormatterBuilder_FieldFormatterArray0.length);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertNotNull(mutablePeriod0);
      
      Locale locale0 = Locale.UK;
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "39D4H&cA4/S", 2884, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.joda.time.format.PeriodFormatterBuilder";
      stringArray0[1] = "org.joda.time.format.PeriodFormatterBuilder";
      stringArray0[2] = "org.joda.time.format.PeriodFormatterBuilder";
      stringArray0[3] = "org.joda.time.format.PeriodFormatterBuilder";
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_RegExAffix0, periodFormatterBuilder_RegExAffix0);
      assertEquals(4, stringArray0.length);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(2884, (-1213), 798, true, 2884, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_RegExAffix0);
      assertEquals(4, stringArray0.length);
      assertEquals(0, periodFormatterBuilder_FieldFormatterArray0.length);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("org.joda.time.format.PeriodFormatterBuilder", "org.joda.time.format.PeriodFormatterBuilder", stringArray0, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, false, false);
      assertEquals(4, stringArray0.length);
      assertEquals(0, periodFormatterBuilder_FieldFormatterArray0.length);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertNotNull(mutablePeriod0);
      
      Locale locale0 = Locale.UK;
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "39D4H&cA4/S", (-1213), locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "'1\u0000N";
      stringArray0[1] = "'1\u0000N";
      stringArray0[2] = "'1\u0000N";
      stringArray0[3] = "'1\u0000N";
      stringArray0[4] = "'1\u0000N";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertNotNull(periodFormatter0);
      
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertNotNull(periodFormat_DynamicWordBased0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("'1\u0000N", "'1\u0000N", stringArray0, periodFormat_DynamicWordBased0, periodFormatterBuilder_Literal0, false, false);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertEquals(5, stringArray0.length);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      Period period0 = new Period(1, 9, 1, 46, 9, 4, 9, 46);
      assertNotNull(period0);
      
      Locale locale0 = Locale.UK;
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo((Writer) charArrayWriter0, (ReadablePeriod) period0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.format.PeriodFormatterBuilder$Separator", "7h#T");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.joda.time.format.PeriodFormatterBuilder$Separator";
      stringArray0[1] = "7h#T";
      stringArray0[2] = "7h#T";
      stringArray0[3] = "7h#T";
      stringArray0[4] = "org.joda.time.format.PeriodFormatterBuilder$Separator";
      stringArray0[5] = "";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("7h#T");
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-6), 11, (-6), true, (-3942), periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_PluralAffix0);
      assertEquals(0, periodFormatterBuilder_FieldFormatterArray0.length);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      Weeks weeks0 = Weeks.ONE;
      assertEquals(1, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("7h#T", "E@*,mxE-V\"K5v!Xoj}", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_FieldFormatter0, false, false);
      assertEquals(6, stringArray0.length);
      assertEquals(0, periodFormatterBuilder_FieldFormatterArray0.length);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) weeks0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Period period0 = Period.weeks(3066);
      assertNotNull(period0);
      
      String string0 = period0.toString();
      assertEquals("P3066W", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("\"");
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("\"", "U([jJg", (String[]) null, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, true);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertNotNull(mutablePeriod0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      int int0 = periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "U([jJg", 2, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals((-3), int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String[] stringArray0 = new String[5];
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal(stringArray0[3]);
      assertEquals(5, stringArray0.length);
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = null;
      try {
        periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator((String) null, (String) null, stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(0, 0, 0, false, (-878), periodFormatterBuilder_FieldFormatterArray0, (PeriodFormatterBuilder.PeriodFieldAffix) null, (PeriodFormatterBuilder.PeriodFieldAffix) null);
      assertEquals(0, periodFormatterBuilder_FieldFormatterArray0.length);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      PeriodType periodType0 = PeriodType.time();
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType0.size());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType0.size());
      assertNotNull(mutablePeriod0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_FieldFormatter0.setFieldValue(mutablePeriod0, 0, 2845);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'years'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(0, 0, 0, false, (-878), periodFormatterBuilder_FieldFormatterArray0, (PeriodFormatterBuilder.PeriodFieldAffix) null, (PeriodFormatterBuilder.PeriodFieldAffix) null);
      assertEquals(0, periodFormatterBuilder_FieldFormatterArray0.length);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertNotNull(locale0);
      
      PeriodType periodType0 = PeriodType.time();
      assertEquals(4, periodType0.size());
      assertEquals("Time", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, locale0, periodType0);
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals(4, periodType0.size());
      assertEquals("Time", periodType0.getName());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertEquals(0, periodFormatterBuilder_FieldFormatterArray0.length);
      assertNotNull(periodFormatter0);
      
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("o#oD");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"o#oD\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder1.toFormatter();
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatter0);
      
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("E@*,mxE-V\"K5v!Xoj}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"E@*,mxE-V\"K5v!Xoj}\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Sy";
      stringArray0[1] = "Sy";
      stringArray0[2] = "ambisb7^M:yo`_rWdf";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertEquals(3, stringArray0.length);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_RegExAffix0, periodFormatterBuilder_RegExAffix0);
      assertEquals(3, stringArray0.length);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(10000, 10000, 0, true, 2059, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_RegExAffix0);
      assertEquals(3, stringArray0.length);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertNotNull(mutablePeriod0);
      
      Locale locale0 = Locale.US;
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(locale0);
      
      int int0 = periodFormatterBuilder_FieldFormatter0.parseInto(mutablePeriod0, "ambisb7^M:yo`_rWdf", (-10), locale0);
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals(9, int0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "'1\u0000N";
      stringArray0[1] = "'1\u0000N";
      stringArray0[2] = "'1\u0000N";
      stringArray0[3] = "'1\u0000N";
      stringArray0[4] = "'1\u0000N";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatter0);
      
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter0);
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormat_DynamicWordBased0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("'1\u0000N", "'1\u0000N", stringArray0, periodFormat_DynamicWordBased0, periodFormatterBuilder_Literal0, false, true);
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertEquals(5, stringArray0.length);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      Period period0 = new Period(1, 9, 1, 46, 9, 4, 9, 46);
      assertNotNull(period0);
      
      Locale locale0 = Locale.UK;
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo((Writer) charArrayWriter0, (ReadablePeriod) period0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroAlways();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSecondsWithMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder2.toParser();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder_Composite0);
      
      Days days0 = Days.daysIn((ReadableInterval) null);
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "Bxfu");
      assertEquals(4, stringBuffer0.length());
      assertEquals("Bxfu", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      periodFormatterBuilder_Composite0.printTo(stringBuffer0, (ReadablePeriod) days0, locale0);
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(9, stringBuffer0.length());
      assertEquals("Bxfu0.000", stringBuffer0.toString());
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix((String) null, "[wJs};}t^As};BFwr`{");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(0, 366, 0, false, 0, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertEquals(0, periodFormatterBuilder_FieldFormatterArray0.length);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      StringBuffer stringBuffer0 = new StringBuffer(0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(locale0);
      
      PeriodType periodType0 = PeriodType.yearWeekDay();
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, locale0, periodType0);
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertEquals(0, periodFormatterBuilder_FieldFormatterArray0.length);
      assertNotNull(periodFormatter0);
      
      MutablePeriod mutablePeriod0 = MutablePeriod.parse("", periodFormatter0);
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertEquals(0, periodFormatterBuilder_FieldFormatterArray0.length);
      assertNotNull(mutablePeriod0);
      
      periodFormatterBuilder_FieldFormatter0.printTo(stringBuffer0, (ReadablePeriod) mutablePeriod0, (Locale) null);
      assertEquals("[wJs};}t^As};BFwr`{0[wJs};}t^As};BFwr`{", stringBuffer0.toString());
      assertEquals(39, stringBuffer0.length());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertEquals(0, periodFormatterBuilder_FieldFormatterArray0.length);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Period period0 = Period.seconds(3066);
      assertNotNull(period0);
      
      String string0 = period0.toString();
      assertEquals("PT3066S", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Period period0 = Period.millis(3066);
      assertNotNull(period0);
      
      Period period1 = period0.minusSeconds(3066);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      String string0 = period1.toString();
      assertEquals("PT-3062.934S", string0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(string0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType0.getName());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(1L, 482L, periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType0.getName());
      assertNotNull(mutablePeriod0);
      
      Locale locale0 = new Locale("U@WtYQb");
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("u@wtyqb", locale0.toString());
      assertEquals("u@wtyqb", locale0.getLanguage());
      assertNotNull(locale0);
      
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("U@WtYQb", "U@WtYQb");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-19), 2914, (-14), true, (-601), periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertEquals(0, periodFormatterBuilder_FieldFormatterArray0.length);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      int int0 = periodFormatterBuilder_FieldFormatter0.countFieldsToPrint(mutablePeriod0, (-2283), locale0);
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType0.getName());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("u@wtyqb", locale0.toString());
      assertEquals("u@wtyqb", locale0.getLanguage());
      assertEquals(0, int0);
      assertEquals(0, periodFormatterBuilder_FieldFormatterArray0.length);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("H", "H");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendMonths();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatter0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Values array must be the same length as the types array";
      stringArray0[1] = "Values array must be the same length as the types array";
      stringArray0[2] = "Values array must be the same length as the types array";
      stringArray0[3] = "Fields invalid for add";
      stringArray0[4] = "ZoneInfoMap";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertEquals(5, stringArray0.length);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_RegExAffix0, periodFormatterBuilder_RegExAffix0);
      assertEquals(5, stringArray0.length);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      int int0 = periodFormatterBuilder_CompositeAffix0.scan("5s", (-481));
      assertEquals(480, int0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("VX", ",6A^SnnpJ#vk/p&i/H");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      int int0 = periodFormatterBuilder_CompositeAffix0.scan("7_#T", 1573);
      assertEquals((-1574), int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("Literal must not be null", "org.joda.time.format.periodformatter7h#tder$separator");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      int int0 = periodFormatterBuilder_CompositeAffix0.parse("-oFvO]2F@Q", (-321));
      assertEquals((-321), int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "BE";
      stringArray0[1] = "org.joda.time.DateTime$Property";
      stringArray0[2] = "org.joda.time.format.periodormatterbuilder$7h#trator";
      stringArray0[3] = "ambisb7^M:yo`_rWdf";
      stringArray0[4] = "org.joda.time.DateTime$Property";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertEquals(5, stringArray0.length);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      int int0 = periodFormatterBuilder_RegExAffix0.scan("org.joda.time.DateTime$Property", (-886));
      assertEquals(0, int0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "BE";
      stringArray0[1] = "org.joda.time.DateTime$Property";
      stringArray0[2] = "org.joda.time.format.periodormatterbuilder$7h#trator";
      stringArray0[3] = "ambisb7^M:yo`_rWdf";
      stringArray0[4] = "org.joda.time.DateTime$Property";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertEquals(5, stringArray0.length);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      int int0 = periodFormatterBuilder_RegExAffix0.parse("org.joda.time.DateTime$Property", 0);
      assertEquals(31, int0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "E@*,mxE-V\"K5v!Xoj}";
      stringArray0[1] = "E@*,mxE-V\"K5v!Xoj}";
      String[] stringArray1 = new String[3];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "E@*,mxE-V\"K5v!Xoj}";
      stringArray1[1] = "^\"9";
      stringArray1[2] = "^\"9";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray1);
      assertEquals(2, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int0 = periodFormatterBuilder_RegExAffix0.parse("E@*,mxE-V\"K5v!Xoj}", (-59));
      assertEquals(58, int0);
      assertEquals(2, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "7y$@r";
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix(stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("Literal must not be null", "No formatter supplied");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      int int0 = periodFormatterBuilder_CompositeAffix0.scan("No formatter supplied", (-4052));
      assertEquals((-22), int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.format.PeriodFormatterBuilder$Separator", "7h#T");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      int int0 = periodFormatterBuilder_CompositeAffix0.parse("org.joda.time.format.PeriodFormatterBuilder$Separator", (-1));
      assertEquals(53, int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.format.PeriodFormatterBuilder$Separator", "7h#T");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      periodFormatterBuilder_PluralAffix0.printTo((Writer) mockPrintWriter0, 19);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("", "");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "E@*,mxE-V\"K5v!Xoj}");
      periodFormatterBuilder_PluralAffix0.printTo(stringBuffer0, 58);
      assertEquals("E@*,mxE-V\"K5v!Xoj}", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSuffix("wE7NXn29nF%");
      PeriodFormatter periodFormatter0 = periodFormatterBuilder1.toFormatter();
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("E@*,mxE-V\"K5v!Xoj}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"E@*,mxE-V\"K5v!Xoj}\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(";_EnbJ\"z60f;s'1");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      int int0 = periodFormatterBuilder_CompositeAffix0.scan(";_EnbJ\"z60f;s'1", 0);
      assertEquals((-16), int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("fCs");
      int int0 = periodFormatterBuilder_SimpleAffix0.parse("fCs", (-451));
      assertEquals(450, int0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.DateTimeZone.Timezone", "org.joda.time.DateTimeZone.Timezone");
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      periodFormatterBuilder_PluralAffix0.finish(linkedHashSet0);
      boolean boolean0 = periodFormatterBuilder_PluralAffix0.matchesOtherAffix((-7081), "!i<uwI4Rj;g", (-7081));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("H", "H");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      int int0 = periodFormatterBuilder_CompositeAffix0.scan("H", 0);
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("fCs");
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      linkedHashSet0.add(periodFormatterBuilder_SimpleAffix0);
      periodFormatterBuilder_SimpleAffix0.finish(linkedHashSet0);
      assertFalse(linkedHashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSuffix("wE7NXn29nF%");
      periodFormatterBuilder1.appendMinutes();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "E@*,mxE-V\"K5v!Xoj}";
      stringArray0[1] = "E@*,mxE-V\"K5v!Xoj}";
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSuffix(stringArray0, stringArray0);
      PeriodFormatter periodFormatter0 = periodFormatterBuilder3.toFormatter();
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendDays();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "H";
      stringArray0[2] = "";
      stringArray0[3] = "H";
      stringArray0[4] = "H";
      stringArray0[5] = "";
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSuffix(stringArray0, stringArray0);
      periodFormatterBuilder2.appendSecondsWithMillis();
      PeriodFormatter periodFormatter0 = periodFormatterBuilder1.toFormatter();
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendDays();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "E@*,mxE-V\"K5v!Xoj}";
      stringArray0[1] = "E@*,mxE-V\"K5v!Xoj}";
      periodFormatterBuilder1.appendSeparator("E@*,mxE-V\"K5v!Xoj}", "E@*,mxE-V\"K5v!Xoj}", stringArray0);
      PeriodPrinter periodPrinter0 = periodFormatterBuilder1.toPrinter();
      assertNotNull(periodPrinter0);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = (PeriodFormatterBuilder.Literal)periodFormatterBuilder0.toPrinter();
      periodFormatterBuilder0.appendPrefix("'(CLy]],KEZQN@wD|", "+");
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Literal0, (PeriodParser) periodFormatterBuilder_Literal0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Prefix not followed by field
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("");
      periodFormatterBuilder1.appendHours();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsBefore("org.joda.time.format.PeriodFormatterBuilder$Composite");
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendDays();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator("No formatter supplied");
      PeriodFormatter periodFormatter0 = periodFormatterBuilder2.toFormatter();
      assertTrue(periodFormatter0.isPrinter());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSeparator("org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSeparatorIfFieldsAfter((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendLiteral("^:5Td'}Us,=r");
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix("^:5Td'}Us,=r");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.joda.time.format.PeriodFormatterBuilder$Separator";
      stringArray0[1] = "7h#T";
      stringArray0[2] = "7h#T";
      stringArray0[3] = "7h#T";
      stringArray0[4] = "org.joda.time.format.PeriodFormatterBuilder$Separator";
      stringArray0[5] = "";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("7h#T");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("", "7h#T", stringArray0, (PeriodPrinter) null, periodFormatterBuilder_Literal0, false, false);
      periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Separator0, (PeriodParser) periodFormatterBuilder_Literal0);
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      String[] stringArray0 = new String[3];
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix(stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix(stringArray0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      String[] stringArray0 = new String[6];
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix(stringArray0, (String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix((String[]) null, (String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix("1V|1?[}i", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix("J1HEyUAVa:JEM7sL.`", "+");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix((String) null, ",g,>l>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      String[] stringArray0 = new String[7];
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendPrefix(stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String[] stringArray0 = new String[0];
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      String[] stringArray1 = periodFormatterBuilder_RegExAffix0.getAffixes();
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendPrefix(stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendPrefix(stringArray0, (String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      String[] stringArray0 = new String[9];
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendPrefix(stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      String[] stringArray0 = new String[9];
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendPrefix((String[]) null, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendPrefix("P", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendPrefix("'(CLy]],KEZQN@wD|", "+");
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("*\"f|+tx#$*zeP+YKL", "vL");
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendPrefix((String) null, "L| FCWeZFb");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendPrefix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendPrefix("kx*I.G4");
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSeparator("", "9tTJAC{Y}sq!l=c/;`3", stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Prefix not followed by field
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendLiteral((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Literal must not be null
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.append((PeriodPrinter) null, (PeriodParser) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No printer or parser supplied
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      periodFormatterBuilder0.append((PeriodPrinter) null, (PeriodParser) periodFormatterBuilder_Composite0);
      PeriodParser periodParser0 = periodFormatterBuilder0.toParser();
      assertNotSame(periodParser0, periodFormatterBuilder_Composite0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.append((PeriodFormatter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No formatter supplied
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null);
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append(periodFormatter0);
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("1VRhT0BB2");
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.clear();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Positive hours must not have negative minutes: ";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      StringWriter stringWriter0 = new StringWriter();
      periodFormatterBuilder_RegExAffix0.printTo((Writer) stringWriter0, 2215);
      assertEquals("Positive hours must not have negative minutes: ", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Sy";
      stringArray0[1] = "Sy";
      stringArray0[2] = "ambisb7^M:yo`_rWdf";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      int int0 = periodFormatterBuilder_RegExAffix0.calculatePrintedLength(567);
      assertEquals(19, int0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("lder");
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, periodFormatterBuilder_Literal0);
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter0);
      Weeks weeks0 = Weeks.MIN_VALUE;
      Locale locale0 = Locale.GERMANY;
      int int0 = periodFormat_DynamicWordBased0.calculatePrintedLength(weeks0, locale0);
      assertEquals(18, int0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Period period0 = Period.millis(3066);
      String string0 = period0.toString();
      assertEquals("PT3.066S", string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis3Digit();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("w/c9");
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.minimumPrintedDigits(0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSeparatorIfFieldsAfter("");
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSeparatorIfFieldsBefore("org.joda.time.format.PeriodFormatterBuilder$Composite");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot have two adjacent separators
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis();
      String[] stringArray0 = new String[0];
      periodFormatterBuilder0.appendSeparator("g>5%ye9t", "g>5%ye9t", stringArray0);
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSeparator("w/c9");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot have two adjacent separators
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsBefore("6Ra");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroNever();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.maximumParsedDigits((-1));
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyFirst();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendYears();
      String[] stringArray0 = new String[7];
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSeparator("", "", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroIfSupported();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeconds();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.rejectSignedValues(true);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyLast();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.format.PeriodFormatterBuilder$Separator", "7h#T");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(53, 11, 53, true, (-3976), periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_PluralAffix0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_CompositeAffix0);
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      periodFormatterBuilder_CompositeAffix0.printTo((Writer) charArrayWriter0, 9);
      assertEquals("", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Sy";
      stringArray0[1] = "Sy";
      stringArray0[2] = "ambisb7^M:yo`_rWdf";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_RegExAffix0, periodFormatterBuilder_RegExAffix0);
      StringBuffer stringBuffer0 = new StringBuffer();
      periodFormatterBuilder_CompositeAffix0.printTo(stringBuffer0, 2003);
      assertEquals(38, stringBuffer0.length());
      assertEquals("ambisb7^M:yo`_rWdfambisb7^M:yo`_rWdf", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("", "^\"9");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      int int0 = periodFormatterBuilder_CompositeAffix0.calculatePrintedLength(58);
      assertEquals(6, int0);
  }
}
