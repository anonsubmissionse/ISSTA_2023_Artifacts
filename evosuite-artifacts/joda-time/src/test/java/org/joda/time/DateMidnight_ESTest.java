/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 05 20:11:04 GMT 2022
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.Months;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.UTCDateTimeZone;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateMidnight_ESTest extends DateMidnight_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight dateMidnight1 = dateMidnight0.minusWeeks((-1024));
      assertEquals(2011651200000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      DateMidnight dateMidnight0 = new DateMidnight(3581, 3581, 3581, lenientChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.plusWeeks(1);
      assertEquals(60562512000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-604800000L));
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.weekOfWeekyear();
      DateMidnight dateMidnight1 = dateMidnight_Property0.setCopy("52");
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-455L));
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.property(dateTimeFieldType0);
      Locale locale0 = Locale.GERMANY;
      // Undeclared exception!
      try { 
        dateMidnight_Property0.setCopy("org.joda.time.DateMidnight$Property", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"org.joda.time.DateMidnight$Property\" for secondOfMinute is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-2276L));
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.property(dateTimeFieldType0);
      DateMidnight dateMidnight1 = dateMidnight_Property0.setCopy(1);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.dayOfMonth();
      long long0 = dateMidnight_Property0.getMillis();
      assertEquals(1392336000000L, long0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-1L));
      DateMidnight.Property dateMidnight_Property0 = new DateMidnight.Property(dateMidnight0, (DateTimeField) null);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      Integer integer0 = new Integer(3);
      DateMidnight dateMidnight1 = dateMidnight0.withYearOfEra((int) integer0);
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      DateMidnight dateMidnight2 = dateMidnight1.withZoneRetainFields(uTCDateTimeZone0);
      assertEquals((-62068723200000L), dateMidnight2.getMillis());
      assertSame(dateMidnight2, dateMidnight1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) buddhistChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.withYearOfEra(3263);
      assertEquals(23671440000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      DateMidnight dateMidnight1 = dateMidnight0.withYearOfCentury(1);
      assertEquals((-2177452800000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(11);
      DateMidnight dateMidnight0 = new DateMidnight(dateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.withYear(3165);
      assertEquals(37714424400000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.withWeekyear(2675);
      assertEquals(22251888000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      DateMidnight dateMidnight0 = new DateMidnight((long) 1, (DateTimeZone) uTCDateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.withWeekOfWeekyear(1);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      DateMidnight dateMidnight0 = new DateMidnight((-2682L), (DateTimeZone) uTCDateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.minusDays(40);
      DateMidnight dateMidnight2 = dateMidnight1.withWeekOfWeekyear(40);
      assertEquals((-7776000000L), dateMidnight2.getMillis());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      DateMidnight dateMidnight0 = new DateMidnight(0L, dateTimeZone0);
      Years years0 = Years.ZERO;
      DateMidnight dateMidnight1 = dateMidnight0.withPeriodAdded(years0, 3150);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateMidnight dateMidnight0 = DateMidnight.parse("", dateTimeFormatter0);
      DateMidnight dateMidnight1 = dateMidnight0.withMonthOfYear(1);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      DateMidnight dateMidnight0 = DateMidnight.now(dateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.withMonthOfYear(1);
      assertEquals(1389657600000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = new DateMidnight(517L, (Chronology) islamicChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.withMonthOfYear(1);
      assertEquals((-22982400000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      DateMidnight dateMidnight0 = new DateMidnight((-412L), dateTimeZone0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      DateMidnight dateMidnight1 = dateMidnight0.withFields(localDateTime0);
      assertEquals(1392336000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      DateMidnight dateMidnight0 = new DateMidnight(0L, (DateTimeZone) uTCDateTimeZone0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.withChronology(buddhistChronology0);
      DateMidnight dateMidnight2 = dateMidnight1.withMillis(0L);
      Locale locale0 = Locale.ENGLISH;
      Calendar calendar0 = dateMidnight1.toCalendar(locale0);
      LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
      DateMidnight dateMidnight3 = dateMidnight2.withFields(localDate0);
      assertEquals((-17134675200000L), dateMidnight3.getMillis());
      assertSame(dateMidnight2, dateMidnight1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = new DateMidnight(1959L, (Chronology) iSOChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      DateMidnight dateMidnight1 = dateMidnight0.withFieldAdded(durationFieldType0, 0);
      assertEquals(0L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-2276L));
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      DateMidnight dateMidnight1 = dateMidnight0.withFieldAdded(durationFieldType0, (-2129));
      assertEquals((-1287705600000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DateMidnight dateMidnight1 = dateMidnight0.withMillis(1915L);
      DateMidnight dateMidnight2 = dateMidnight1.withField(dateTimeFieldType0, 0);
      assertEquals(0L, dateMidnight2.getMillis());
      assertSame(dateMidnight2, dateMidnight1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = new DateMidnight(0L, (Chronology) buddhistChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      DateMidnight dateMidnight1 = dateMidnight0.withField(dateTimeFieldType0, 1);
      assertEquals((-78892876800000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      DateMidnight dateMidnight0 = new DateMidnight(113L, dateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.withEra(1);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 1);
      DateMidnight dateMidnight0 = DateMidnight.now(dateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.withEra(1);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1143L, (Chronology) null);
      Duration duration0 = Duration.ZERO;
      DateMidnight dateMidnight1 = dateMidnight0.withDurationAdded((ReadableDuration) duration0, 3834);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      DateMidnight dateMidnight1 = dateMidnight0.withDurationAdded(0L, (-722));
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = new DateMidnight(4142528L, (Chronology) buddhistChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.withDayOfYear(1);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      DateMidnight dateMidnight1 = dateMidnight0.withMillis((-72316800000L));
      DateMidnight dateMidnight2 = dateMidnight1.withDayOfYear(97);
      assertEquals((-86400000000L), dateMidnight2.getMillis());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      DateMidnight dateMidnight0 = DateMidnight.now(dateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.withDayOfWeek(1);
      assertEquals(1391990400000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      DateMidnight dateMidnight0 = new DateMidnight(1, 1, 1, dateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.withDayOfWeek(1);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1143L, (Chronology) null);
      DateMidnight dateMidnight1 = dateMidnight0.withDayOfMonth(1);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = new DateMidnight(517L, (Chronology) islamicChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.withDayOfMonth(1);
      assertEquals((-1814400000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateMidnight dateMidnight0 = new DateMidnight(0L, (Chronology) gJChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.withChronology(gJChronology0);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-604800000L));
      DateMidnight dateMidnight1 = dateMidnight0.withCenturyOfEra(0);
      assertEquals((-59958748800000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      DateMidnight dateMidnight1 = dateMidnight0.minusMonths((-1590));
      Interval interval0 = dateMidnight1.toInterval();
      assertEquals(4181241600000L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-455L));
      Interval interval0 = dateMidnight0.toInterval();
      assertEquals(0L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      DateMidnight dateMidnight1 = dateMidnight0.withMillis((-72316800000L));
      Interval interval0 = dateMidnight1.toInterval();
      assertEquals((-72230400000L), interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) buddhistChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.plusYears(1);
      assertEquals(1423872000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = new DateMidnight(8L, (Chronology) iSOChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.plusWeeks(0);
      assertEquals(0L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      DateMidnight dateMidnight0 = new DateMidnight((long) 1, (DateTimeZone) uTCDateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.plusMonths(0);
      assertEquals(0L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((Object) null, (DateTimeZone) null);
      DateMidnight dateMidnight1 = dateMidnight0.withWeekyear(0);
      DateMidnight dateMidnight2 = dateMidnight1.plusMonths(0);
      assertEquals((-62163072000000L), dateMidnight2.getMillis());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      DateMidnight dateMidnight0 = new DateMidnight((-412L), dateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.plusDays(1);
      assertEquals(0L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((Object) null);
      DateMidnight dateMidnight1 = dateMidnight0.plusDays((-292269337));
      DateMidnight dateMidnight2 = dateMidnight1.withDurationAdded(1L, (-292269337));
      assertEquals((-25250678726400000L), dateMidnight2.getMillis());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      DateMidnight dateMidnight1 = dateMidnight0.withMillis((-72316800000L));
      Duration duration0 = Duration.standardDays(0L);
      Duration duration1 = duration0.minus((-72316800000L));
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateMidnight1);
      Period period0 = duration1.toPeriod((Chronology) gJChronology0);
      DateMidnight dateMidnight2 = dateMidnight1.plus((ReadablePeriod) period0);
      assertEquals(0L, dateMidnight2.getMillis());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      Duration duration0 = Duration.standardDays((-837L));
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateMidnight0);
      Period period0 = duration0.toPeriod((Chronology) gJChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.plus((ReadablePeriod) period0);
      assertEquals((-72316800000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(476L);
      Duration duration0 = new Duration(dateMidnight0, dateMidnight0);
      DateMidnight dateMidnight1 = dateMidnight0.plus((ReadableDuration) duration0);
      assertEquals(0L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.plusYears((-1600));
      DateMidnight dateMidnight2 = dateMidnight1.plus((ReadableDuration) null);
      assertEquals((-49098787200000L), dateMidnight2.getMillis());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateMidnight dateMidnight0 = new DateMidnight(0L, (Chronology) gJChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.plus(0L);
      assertSame(dateMidnight0, dateMidnight1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      DateMidnight dateMidnight0 = new DateMidnight(1, 1, 1, dateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.plus((long) 1);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateMidnight dateMidnight0 = DateMidnight.parse("", dateTimeFormatter0);
      DateMidnight dateMidnight1 = dateMidnight0.withCenturyOfEra(2000);
      assertEquals(6251432256000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.parse("6");
      assertEquals((-61977830400000L), dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      System.setCurrentTimeMillis(436);
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) iSOChronology0);
      assertEquals(0L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      System.setCurrentTimeMillis(366);
      DateMidnight dateMidnight0 = DateMidnight.now();
      assertEquals(0L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1L);
      DateMidnight dateMidnight1 = dateMidnight0.minusYears(0);
      assertEquals(0L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1143L, (Chronology) null);
      DateMidnight dateMidnight1 = dateMidnight0.minusWeeks(0);
      assertEquals(0L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = new DateMidnight(517L, (Chronology) islamicChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.minusMonths(0);
      assertEquals(0L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      DateMidnight dateMidnight1 = dateMidnight0.minusDays(0);
      assertEquals(0L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(249L, (Chronology) null);
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.monthOfYear();
      DateMidnight dateMidnight1 = dateMidnight_Property0.addToCopy((-31));
      DateMidnight dateMidnight2 = dateMidnight1.minusDays((-31));
      assertEquals((-78969600000L), dateMidnight2.getMillis());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      DateMidnight dateMidnight0 = new DateMidnight(0L, dateTimeZone0);
      Years years0 = Years.ZERO;
      DateMidnight dateMidnight1 = dateMidnight0.minus((ReadablePeriod) years0);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      Period period0 = new Period(dateMidnight0, dateMidnight0, (PeriodType) null);
      Period period1 = period0.plusYears(366);
      DateMidnight dateMidnight1 = dateMidnight0.minus((ReadablePeriod) period1);
      assertEquals((-10157529600000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      DateMidnight dateMidnight1 = dateMidnight0.withMillis((-72316800000L));
      Duration duration0 = Duration.standardDays((-837L));
      DateMidnight dateMidnight2 = dateMidnight1.minus((ReadableDuration) duration0);
      assertEquals(0L, dateMidnight2.getMillis());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.minus((ReadableDuration) null);
      assertSame(dateMidnight0, dateMidnight1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-54864000000L));
      DateMidnight dateMidnight1 = dateMidnight0.minus((-54864000000L));
      assertEquals(0L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.minus(4483L);
      assertEquals(1392249600000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateMidnight dateMidnight0 = new DateMidnight(0L, (Chronology) gJChronology0);
      long long0 = dateMidnight0.checkInstant(0L, gJChronology0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      long long0 = dateMidnight0.checkInstant(26607895200000L, gJChronology0);
      assertEquals(26607830400000L, long0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) buddhistChronology0);
      long long0 = dateMidnight0.checkInstant((-1877L), buddhistChronology0);
      assertEquals((-86400000L), long0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) islamicChronology0);
      // Undeclared exception!
      try { 
        dateMidnight0.withYearOfEra((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1 for yearOfEra must be in the range [1,292271022]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      DateMidnight dateMidnight0 = DateMidnight.now((DateTimeZone) uTCDateTimeZone0);
      // Undeclared exception!
      try { 
        dateMidnight0.withYear((-2124638076));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2124638076 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-54864000000L));
      // Undeclared exception!
      try { 
        dateMidnight0.withWeekOfWeekyear((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = new DateMidnight(517L, (Chronology) islamicChronology0);
      Seconds seconds0 = Seconds.MIN_VALUE;
      // Undeclared exception!
      try { 
        dateMidnight0.withPeriodAdded(seconds0, 168);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (IslamicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-1));
      DateMidnight dateMidnight0 = DateMidnight.now(dateTimeZone0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(28181250, 0, 28181250, (-1));
      // Undeclared exception!
      try { 
        dateMidnight0.withPeriodAdded(mutablePeriod0, 28181250);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 794182851562500 * 3600000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) copticChronology0);
      // Undeclared exception!
      try { 
        dateMidnight0.withMillis((-77693299200000L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) ethiopicChronology0);
      MockDate mockDate0 = new MockDate(1, (-1305), 0);
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      // Undeclared exception!
      try { 
        dateMidnight0.withFields(localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 31 for dayOfMonth must be in the range [1,30]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DurationFieldType durationFieldType0 = DurationFieldType.ERAS_TYPE;
      // Undeclared exception!
      try { 
        dateMidnight0.withFieldAdded(durationFieldType0, (-292269054));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 1);
      DateMidnight dateMidnight0 = DateMidnight.now(dateTimeZone0);
      DurationFieldType durationFieldType0 = DurationFieldType.CENTURIES_TYPE;
      // Undeclared exception!
      try { 
        dateMidnight0.withFieldAdded(durationFieldType0, 28181250);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 2818125000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      // Undeclared exception!
      try { 
        dateMidnight0.withField(dateTimeFieldType0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfMonth must be in the range [1,28]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((Object) null);
      // Undeclared exception!
      try { 
        dateMidnight0.withEra((-559));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -559 for era must be in the range [0,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
      DateMidnight dateMidnight0 = new DateMidnight(100000000L, (Chronology) lenientChronology0);
      // Undeclared exception!
      try { 
        dateMidnight0.withEra(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      // Undeclared exception!
      try { 
        dateMidnight0.withDurationAdded(9223372036854775807L, (-1754));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 9223372036854775807 * -1754
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      // Undeclared exception!
      try { 
        dateMidnight0.withDayOfYear(533);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 533 for dayOfYear must be in the range [1,365]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      // Undeclared exception!
      try { 
        dateMidnight0.withDayOfMonth(1140);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1140 for dayOfMonth must be in the range [1,28]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(100000L);
      DateMidnight dateMidnight1 = dateMidnight0.minusYears(2843);
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      // Undeclared exception!
      try { 
        dateMidnight1.withChronology(copticChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) copticChronology0);
      // Undeclared exception!
      try { 
        dateMidnight0.plusYears((-2146688282));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2146686552 for year must be in the range [-292269337,292272708]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = new DateMidnight((-25L), (Chronology) iSOChronology0);
      // Undeclared exception!
      try { 
        dateMidnight0.plusYears(Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 1969 + 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) ethiopicChronology0);
      // Undeclared exception!
      try { 
        dateMidnight0.plusWeeks((-2147483644));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (EthiopicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) ethiopicChronology0);
      // Undeclared exception!
      try { 
        dateMidnight0.plusMonths((-2147483634));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (EthiopicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) buddhistChronology0);
      // Undeclared exception!
      try { 
        dateMidnight0.plusDays((-2145388541));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.weekyear();
      Days days0 = Days.MIN_VALUE;
      DateMidnight dateMidnight1 = dateMidnight_Property0.withMinimumValue();
      // Undeclared exception!
      try { 
        dateMidnight1.plus((ReadablePeriod) days0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -9223372012896000000 + -185542587187200000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) null);
      // Undeclared exception!
      try { 
        DateMidnight.parse("cC9|sj9vKq.", dateTimeFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn((-2147483626)).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      // Undeclared exception!
      try { 
        DateMidnight.parse("", dateTimeFormatter0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      // Undeclared exception!
      try { 
        DateMidnight.parse("dayOfMonth", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"dayOfMonth\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateMidnight.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = new DateMidnight(517L, (Chronology) islamicChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.withWeekyear(1);
      // Undeclared exception!
      try { 
        dateMidnight1.minusYears(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for year must be in the range [1,292271022]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) buddhistChronology0);
      // Undeclared exception!
      try { 
        dateMidnight0.minusWeeks(7593750);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.weekyear();
      DateMidnight dateMidnight1 = dateMidnight_Property0.withMinimumValue();
      // Undeclared exception!
      try { 
        dateMidnight1.minusWeeks(3232);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -9223372012896000000 + -1954713600000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) copticChronology0);
      // Undeclared exception!
      try { 
        dateMidnight0.minusMonths(Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) ethiopicChronology0);
      // Undeclared exception!
      try { 
        dateMidnight0.minusDays(23034375);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (EthiopicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      DateMidnight dateMidnight0 = DateMidnight.now((DateTimeZone) uTCDateTimeZone0);
      Years years0 = Years.MAX_VALUE;
      // Undeclared exception!
      try { 
        dateMidnight0.minus((ReadablePeriod) years0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2147481633 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      DateMidnight dateMidnight0 = DateMidnight.now((DateTimeZone) uTCDateTimeZone0);
      Years years0 = Years.MIN_VALUE;
      // Undeclared exception!
      try { 
        dateMidnight0.minus((ReadablePeriod) years0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
      DateMidnight dateMidnight0 = new DateMidnight(1686, (-576), (-576), lenientChronology0);
      // Undeclared exception!
      try { 
        dateMidnight0.minus(1298205733334400000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant is below the supported minimum of 0001-01-01T00:00:00.000Z (IslamicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      // Undeclared exception!
      try { 
        dateMidnight0.checkInstant(0L, (Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.DateMidnight", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      DateMidnight dateMidnight0 = null;
      try {
        dateMidnight0 = new DateMidnight(ethiopicChronology0, uTCDateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: org.joda.time.chrono.EthiopicChronology
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = null;
      try {
        dateMidnight0 = new DateMidnight((-62068723200000L), (Chronology) islamicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant is below the supported minimum of 0001-01-01T00:00:00.000Z (IslamicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      DateMidnight dateMidnight0 = null;
      try {
        dateMidnight0 = new DateMidnight((-1), (-677), (-677), uTCDateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -677 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      DateMidnight dateMidnight0 = new DateMidnight((Object) null, uTCDateTimeZone0);
      Months months0 = Months.EIGHT;
      // Undeclared exception!
      try { 
        dateMidnight0.withPeriodAdded(months0, (-2146348613));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Magnitude of add amount is too large: -17170788904
         //
         verifyException("org.joda.time.chrono.BasicMonthOfYearDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      DateMidnight dateMidnight0 = DateMidnight.now((DateTimeZone) uTCDateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.withDurationAdded((ReadableDuration) null, 0);
      assertSame(dateMidnight0, dateMidnight1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      Duration duration0 = Duration.standardMinutes((-62163417600000L));
      // Undeclared exception!
      try { 
        dateMidnight0.withDurationAdded((ReadableDuration) duration0, 1929);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -3729805056000000000 * 1929
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight dateMidnight1 = dateMidnight0.withDurationAdded((long) 0, 0);
      assertSame(dateMidnight0, dateMidnight1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3075);
      DateMidnight dateMidnight1 = dateMidnight0.withZoneRetainFields(dateTimeZone0);
      assertEquals(1392335996925L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.withMillis(1392336060000L);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((Object) null, (Chronology) null);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-1), 1, 1);
      assertEquals((-62198755200000L), dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      DateMidnight dateMidnight0 = new DateMidnight(3581, 3581, 3581, lenientChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.withYearOfCentury(2);
      assertEquals(57816374400000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      // Undeclared exception!
      try { 
        DateMidnight.parse((String) null, dateTimeFormatter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeParserInternalParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) ethiopicChronology0);
      // Undeclared exception!
      try { 
        dateMidnight0.property((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.DateMidnight", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight dateMidnight1 = dateMidnight0.minusDays(0);
      assertEquals(1392336000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight dateMidnight1 = dateMidnight0.minusWeeks(3232);
      assertEquals((-562377600000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      DateMidnight dateMidnight1 = dateMidnight0.minusMonths(97);
      assertEquals((-255139200000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight dateMidnight1 = dateMidnight0.minusYears(0);
      assertEquals(1392336000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      // Undeclared exception!
      try { 
        dateMidnight0.minusYears((-2147483643));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2014 + 2147483643
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight dateMidnight1 = dateMidnight0.plusDays(0);
      assertEquals(1392336000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = new DateMidnight((-25L), (Chronology) iSOChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.plusWeeks(0);
      assertEquals((-86400000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) ethiopicChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.plusMonths(0);
      assertEquals(1392336000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = new DateMidnight(517L, (Chronology) islamicChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.plusMonths(1);
      assertEquals(2505600000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1143L, (Chronology) null);
      DateMidnight dateMidnight1 = dateMidnight0.plusYears(0);
      assertEquals(0L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) ethiopicChronology0);
      MutableInterval mutableInterval0 = new MutableInterval();
      Seconds seconds0 = Seconds.secondsIn(mutableInterval0);
      DateMidnight dateMidnight1 = dateMidnight0.withPeriodAdded(seconds0, 0);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-2276L));
      DateMidnight dateMidnight1 = dateMidnight0.withPeriodAdded((ReadablePeriod) null, (-2129));
      assertEquals((-86400000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = new DateMidnight((-25L), (Chronology) iSOChronology0);
      Duration duration0 = new Duration(dateMidnight0, dateMidnight0);
      DateMidnight dateMidnight1 = dateMidnight0.withDurationAdded((ReadableDuration) duration0, 0);
      assertSame(dateMidnight0, dateMidnight1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) ethiopicChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.withDurationAdded((-1L), 0);
      assertEquals(1392336000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) copticChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      // Undeclared exception!
      try { 
        dateMidnight0.withFieldAdded(durationFieldType0, (-3321));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      // Undeclared exception!
      try { 
        dateMidnight0.withFieldAdded((DurationFieldType) null, (-1024));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.DateMidnight", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      DateMidnight dateMidnight1 = dateMidnight0.withFieldAdded(durationFieldType0, 0);
      assertEquals(1392336000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) buddhistChronology0);
      // Undeclared exception!
      try { 
        dateMidnight0.withField((DateTimeFieldType) null, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.DateMidnight", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DateMidnight dateMidnight1 = dateMidnight0.withField(dateTimeFieldType0, 0);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      DateMidnight dateMidnight1 = dateMidnight0.withFields((ReadablePartial) null);
      assertSame(dateMidnight0, dateMidnight1);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = new DateMidnight(517L, (Chronology) islamicChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.withZoneRetainFields((DateTimeZone) null);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      DateMidnight dateMidnight0 = new DateMidnight((-2682L), (DateTimeZone) uTCDateTimeZone0);
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      DateMidnight dateMidnight1 = dateMidnight0.withChronology(iSOChronology0);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      DateMidnight dateMidnight0 = DateMidnight.now((DateTimeZone) uTCDateTimeZone0);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.withChronology(islamicChronology0);
      // Undeclared exception!
      try { 
        dateMidnight1.withWeekyear((-4416));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (IslamicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateMidnight.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.DateMidnight", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateMidnight.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.DateMidnight", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      DateMidnight dateMidnight0 = new DateMidnight((-412L), (DateTimeZone) uTCDateTimeZone0);
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.dayOfWeek();
      DateMidnight dateMidnight1 = dateMidnight_Property0.getDateMidnight();
      assertSame(dateMidnight0, dateMidnight1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.weekyear();
      DateMidnight dateMidnight1 = dateMidnight_Property0.withMinimumValue();
      // Undeclared exception!
      try { 
        dateMidnight1.minusDays(1949);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -9223372012896000000 + -168393600000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1143L, (Chronology) null);
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.era();
      DateMidnight dateMidnight1 = dateMidnight_Property0.roundHalfFloorCopy();
      assertEquals((-62135596800000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-604800000L));
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.weekOfWeekyear();
      DateMidnight dateMidnight1 = dateMidnight_Property0.roundHalfCeilingCopy();
      assertEquals((-864000000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.dayOfYear();
      DateMidnight dateMidnight1 = dateMidnight_Property0.addWrapFieldToCopy((byte)0);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.weekyear();
      DateMidnight dateMidnight1 = dateMidnight_Property0.roundFloorCopy();
      assertEquals(1388361600000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-2276L));
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.property(dateTimeFieldType0);
      DateMidnight dateMidnight1 = dateMidnight_Property0.addToCopy((-2276L));
      assertEquals((-8294400000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-604800000L));
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.weekOfWeekyear();
      DateMidnight dateMidnight1 = dateMidnight_Property0.roundHalfEvenCopy();
      assertEquals((-864000000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.weekyear();
      Chronology chronology0 = dateMidnight_Property0.getChronology();
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.plus((ReadableDuration) null);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = new DateMidnight((-25L), (Chronology) iSOChronology0);
      // Undeclared exception!
      try { 
        dateMidnight0.withYearOfCentury(4978125);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 4978125 for yearOfCentury must be in the range [0,99]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.dayOfYear();
      DateMidnight dateMidnight1 = dateMidnight_Property0.roundCeilingCopy();
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.yearOfCentury();
      assertNotNull(dateMidnight_Property0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = null;
      try {
        dateMidnight0 = new DateMidnight((Object) islamicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: org.joda.time.chrono.IslamicChronology
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = new DateMidnight(517L, (Chronology) islamicChronology0);
      Seconds seconds0 = Seconds.MIN_VALUE;
      DateMidnight dateMidnight1 = dateMidnight0.minus((ReadablePeriod) seconds0);
      assertEquals(2147472000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      Period period0 = Period.millis(0);
      DateMidnight dateMidnight1 = dateMidnight0.plus((ReadablePeriod) period0);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1143L, (Chronology) null);
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.era();
      DateMidnight dateMidnight1 = dateMidnight_Property0.withMaximumValue();
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      DateMidnight dateMidnight0 = null;
      try {
        dateMidnight0 = new DateMidnight(0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = new DateMidnight(517L, (Chronology) islamicChronology0);
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.year();
      assertNotNull(dateMidnight_Property0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1143L, (Chronology) null);
      DateMidnight dateMidnight1 = dateMidnight0.minus(1143L);
      assertEquals((-86400000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1143L, (Chronology) null);
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.centuryOfEra();
      assertNotNull(dateMidnight_Property0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      DateMidnight dateMidnight0 = new DateMidnight((-2682L), (DateTimeZone) uTCDateTimeZone0);
      LocalDate localDate0 = dateMidnight0.toLocalDate();
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = new DateMidnight(517L, (Chronology) islamicChronology0);
      assertEquals(0L, dateMidnight0.getMillis());
      
      DateMidnight dateMidnight1 = dateMidnight0.plus(2436252336000000L);
      assertEquals(2436252336000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      dateMidnight0.yearOfEra();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      DateMidnight dateMidnight1 = dateMidnight0.withDayOfYear(97);
      assertEquals(8294400000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      DateMidnight dateMidnight1 = dateMidnight0.withYear((byte)53);
      assertEquals((-60494601600000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      Interval interval0 = dateMidnight0.toInterval();
      assertEquals(86400000L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-604800000L));
      DateMidnight dateMidnight1 = dateMidnight0.withEra(0);
      assertEquals((-124271884800000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.withWeekOfWeekyear(3);
      assertEquals(1389916800000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-2276L));
      Days days0 = Days.daysBetween((ReadableInstant) dateMidnight0, (ReadableInstant) dateMidnight0);
      Duration duration0 = days0.toStandardDuration();
      DateMidnight dateMidnight1 = dateMidnight0.minus((ReadableDuration) duration0);
      assertEquals((-86400000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      // Undeclared exception!
      try { 
        dateMidnight0.withDayOfWeek((-262));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -262 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = null;
      try {
        dateMidnight0 = new DateMidnight(20587500, 292272992, (-1), julianChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 292272992 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.withDayOfMonth(3);
      assertEquals(1391385600000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateMidnight.parse("y_w~2}gcYv");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"y_w~2}gcYv\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      // Undeclared exception!
      try { 
        dateMidnight0.withCenturyOfEra((-2323));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2323 for centuryOfEra must be in the range [0,2922789]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = null;
      try {
        dateMidnight0 = new DateMidnight(copticChronology0, copticChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: org.joda.time.chrono.CopticChronology
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      DateMidnight dateMidnight0 = new DateMidnight((Object) null, uTCDateTimeZone0);
      // Undeclared exception!
      try { 
        dateMidnight0.withMonthOfYear(1929);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1929 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
}
