/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 05 20:12:56 GMT 2022
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.UTCDateTimeZone;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.ZonedChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Interval_ESTest extends Interval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(16);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      Instant instant0 = gJChronology0.getGregorianCutover();
      Years years0 = Years.THREE;
      Interval interval0 = new Interval(instant0, years0);
      DateTime dateTime0 = new DateTime();
      MutableDateTime mutableDateTime0 = dateTime0.toMutableDateTime();
      Interval interval1 = new Interval(mutableDateTime0, years0);
      boolean boolean0 = interval0.abuts(interval1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(16);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      MutableInterval mutableInterval0 = new MutableInterval();
      Interval interval0 = new Interval(16, 3049L, gJChronology0);
      boolean boolean0 = interval0.abuts(mutableInterval0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Interval interval0 = new Interval(0L, 1L);
      DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
      doReturn(988L, (-1868L)).when(dateTimeUtils_MillisProvider0).getMillis();
      DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTime dateTime0 = new DateTime((Chronology) buddhistChronology0);
      boolean boolean0 = interval0.abuts((ReadableInterval) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Period period0 = Period.days(1);
      Interval interval0 = new Interval(dateTime0, period0);
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, (ReadableDuration) null);
      Interval interval1 = interval0.gap(mutableInterval0);
      assertNull(interval1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-1L), (-1L));
      Interval interval0 = mutableInterval0.toInterval();
      Interval interval1 = interval0.withStartMillis((-1L));
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(16);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      Instant instant0 = gJChronology0.getGregorianCutover();
      Interval interval0 = new Interval(996L, 996L);
      Duration duration0 = interval0.toDuration();
      Interval interval1 = duration0.toIntervalFrom(instant0);
      Interval interval2 = interval1.withStart(instant0);
      assertSame(interval2, interval1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Interval interval0 = new Interval(0L, 1L);
      Interval interval1 = interval0.withDurationAfterStart((ReadableDuration) null);
      Interval interval2 = interval1.withPeriodBeforeEnd((ReadablePeriod) null);
      assertSame(interval2, interval1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Interval interval0 = new Interval(0L, 0L, (Chronology) null);
      Days days0 = Days.THREE;
      Duration duration0 = days0.toStandardDuration();
      Hours hours0 = duration0.toStandardHours();
      Seconds seconds0 = Seconds.standardSecondsIn(hours0);
      Interval interval1 = interval0.withPeriodBeforeEnd(seconds0);
      assertEquals((-259200000L), interval1.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Interval interval0 = new Interval((-1013L), (-1013L));
      Seconds seconds0 = Seconds.seconds(0);
      Interval interval1 = interval0.withPeriodBeforeEnd(seconds0);
      assertEquals((-1013L), interval1.getEndMillis());
      assertNotSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Period period0 = Period.minutes(37);
      Instant instant0 = Instant.now();
      Instant instant1 = instant0.withMillis((-1L));
      Interval interval0 = new Interval(period0, instant1);
      Interval interval1 = interval0.withPeriodAfterStart(period0);
      assertEquals((-1L), interval1.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      Interval interval0 = new Interval(1209600000L, 1209600000L, uTCDateTimeZone0);
      Interval interval1 = interval0.withEndMillis(1209600000L);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      Interval interval0 = new Interval(0L, 0L, dateTimeZone0);
      Interval interval1 = interval0.withEndMillis(0L);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Duration duration0 = new Duration((-528L), (-1L));
      LocalDate localDate0 = new LocalDate((-528L));
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime();
      PeriodType periodType0 = PeriodType.minutes();
      Period period0 = duration0.toPeriodFrom((ReadableInstant) dateTime0, periodType0);
      Interval interval0 = new Interval(dateTime0, period0);
      Interval interval1 = interval0.withEndMillis((-1L));
      assertEquals((-1L), interval1.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      Interval interval0 = mutableInterval0.toInterval();
      Instant instant0 = Instant.ofEpochMilli(0L);
      Interval interval1 = interval0.withEnd(instant0);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((-1332L));
      Interval interval0 = new Interval((ReadableDuration) null, mutableDateTime0);
      Interval interval1 = interval0.withEnd(mutableDateTime0);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Duration duration0 = new Duration((-528L), (-1L));
      LocalDate localDate0 = new LocalDate((-528L));
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime();
      PeriodType periodType0 = PeriodType.minutes();
      Period period0 = duration0.toPeriodFrom((ReadableInstant) dateTime0, periodType0);
      Interval interval0 = new Interval(dateTime0, period0);
      Interval interval1 = interval0.withDurationBeforeEnd(duration0);
      assertEquals((-13119207L), interval1.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Interval interval0 = new Interval((-3672L), (-3672L));
      Duration duration0 = new Duration(589L);
      Interval interval1 = interval0.withDurationAfterStart(duration0);
      assertEquals((-3083L), interval1.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Interval interval0 = new Interval(0L, 0L, (Chronology) null);
      Interval interval1 = interval0.withChronology((Chronology) null);
      assertNotSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(16);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      Instant instant0 = gJChronology0.getGregorianCutover();
      Years years0 = Years.THREE;
      Interval interval0 = new Interval(instant0, years0);
      Interval interval1 = interval0.withChronology(gJChronology0);
      assertNotSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Interval interval0 = new Interval(0L, 0L, (Chronology) null);
      Interval interval1 = interval0.toInterval();
      assertEquals(0L, interval1.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(16);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      Instant instant0 = gJChronology0.getGregorianCutover();
      Years years0 = Years.THREE;
      Interval interval0 = new Interval(instant0, years0);
      Interval interval1 = interval0.toInterval();
      assertEquals((-12124598400000L), interval1.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Interval interval0 = Interval.parseWithOffset("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
      assertEquals(0L, interval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Interval interval0 = Interval.parseWithOffset("1969-12-31T23:59:57.481Z/1969-12-31T23:59:57.481Z");
      assertEquals((-2519L), interval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
      doReturn(1392409281320L, 0L).when(dateTimeUtils_MillisProvider0).getMillis();
      DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTime dateTime0 = new DateTime((Chronology) buddhistChronology0);
      Interval interval0 = Interval.parse((String) null);
      assertEquals(0L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      System.setCurrentTimeMillis((-31449600012L));
      Interval interval0 = Interval.parse((String) null);
      assertEquals((-31449600012L), interval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      Interval interval0 = new Interval(0L, 0L, dateTimeZone0);
      Months months0 = Months.SEVEN;
      Interval interval1 = interval0.withPeriodAfterStart(months0);
      Interval interval2 = interval1.overlap(interval1);
      assertNotNull(interval2);
      assertNotSame(interval0, interval1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(16);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      Instant instant0 = gJChronology0.getGregorianCutover();
      Years years0 = Years.THREE;
      Interval interval0 = new Interval(instant0, years0);
      Interval interval1 = interval0.overlap(interval0);
      assertEquals((-12124598400000L), interval1.getEndMillis());
      assertNotNull(interval1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      Duration duration0 = Duration.standardMinutes(753000L);
      Instant instant0 = Instant.ofEpochSecond((-2429L));
      Interval interval0 = duration0.toIntervalTo(instant0);
      Interval interval1 = interval0.gap(mutableInterval0);
      assertNotSame(interval0, interval1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(16);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      Instant instant0 = gJChronology0.getGregorianCutover();
      Years years0 = Years.THREE;
      Interval interval0 = new Interval(instant0, years0);
      // Undeclared exception!
      try { 
        interval0.withStartMillis(996L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Interval interval0 = new Interval(0L, 1L);
      DateTime dateTime0 = new DateTime(1L);
      Interval interval1 = interval0.withDurationAfterStart((ReadableDuration) null);
      // Undeclared exception!
      try { 
        interval1.withStart(dateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      MutableInterval mutableInterval0 = new MutableInterval((-2635L), (-1968L), copticChronology0);
      Interval interval0 = mutableInterval0.toInterval();
      Period period0 = Period.years((-2145746200));
      // Undeclared exception!
      try { 
        interval0.withPeriodBeforeEnd(period0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2145747886 for year must be in the range [-292269337,292272708]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Interval interval0 = new Interval((ReadableInstant) null, (ReadableInstant) null);
      Years years0 = Years.MIN_VALUE;
      // Undeclared exception!
      try { 
        interval0.withPeriodBeforeEnd(years0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Interval interval0 = Interval.parse((String) null);
      Years years0 = Years.MAX_VALUE;
      // Undeclared exception!
      try { 
        interval0.withPeriodAfterStart(years0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2014 + 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      Interval interval0 = mutableInterval0.toInterval();
      // Undeclared exception!
      try { 
        interval0.withEndMillis((-2519L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Duration duration0 = new Duration((Object) null);
      Interval interval0 = new Interval((ReadableInstant) null, duration0);
      DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(dateTimeUtils_MillisProvider0).getMillis();
      DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
      // Undeclared exception!
      try { 
        interval0.withEnd((ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        Interval.parseWithOffset((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        Interval.parse("((ay}h$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format requires a '/' separator: ((ay}h$
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Years years0 = Years.MAX_VALUE;
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      DateTime dateTime0 = new DateTime((DateTimeZone) uTCDateTimeZone0);
      Interval interval0 = null;
      try {
        interval0 = new Interval(years0, dateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2147481633 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PeriodType periodType0 = PeriodType.seconds();
      MutablePeriod mutablePeriod0 = new MutablePeriod((-2345L), periodType0, (Chronology) null);
      Interval interval0 = null;
      try {
        interval0 = new Interval(mutablePeriod0, (ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(16);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      Instant instant0 = gJChronology0.getGregorianCutover();
      Years years0 = Years.MIN_VALUE;
      Interval interval0 = null;
      try {
        interval0 = new Interval(instant0, years0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2147482066 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Instant instant0 = Instant.ofEpochSecond(2093L);
      Instant instant1 = instant0.minus(2093L);
      Duration duration0 = new Duration(1850L, 1850L);
      Duration duration1 = new Duration(instant1, instant0);
      Duration duration2 = duration0.minus((ReadableDuration) duration1);
      Period period0 = duration2.toPeriodFrom((ReadableInstant) instant1);
      Interval interval0 = null;
      try {
        interval0 = new Interval(instant0, period0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(16);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      Instant instant0 = gJChronology0.getGregorianCutover();
      Years years0 = Years.MAX_VALUE;
      Interval interval0 = null;
      try {
        interval0 = new Interval(instant0, years0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 1582 + 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      DateTime dateTime0 = DateTime.now((DateTimeZone) uTCDateTimeZone0);
      Instant instant0 = Instant.EPOCH;
      Interval interval0 = null;
      try {
        interval0 = new Interval(dateTime0, instant0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Instant instant0 = Instant.ofEpochSecond((-2635L));
      Duration duration0 = Duration.standardDays((-2635L));
      Interval interval0 = null;
      try {
        interval0 = new Interval(instant0, duration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      Interval interval0 = null;
      try {
        interval0 = new Interval("0/]h'ni", islamicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot parse \"0\": Value 0 for year must be in the range [1,292271022]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Object object0 = new Object();
      Interval interval0 = null;
      try {
        interval0 = new Interval(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No interval converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      Interval interval0 = null;
      try {
        interval0 = new Interval(2246L, 0L, dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      Interval interval0 = null;
      try {
        interval0 = new Interval(1964L, 0L, copticChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Interval interval0 = null;
      try {
        interval0 = new Interval(753L, (-32));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Instant instant0 = new Instant(0L);
      Interval interval0 = new Interval(instant0, instant0);
      Interval interval1 = interval0.withStartMillis(0L);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Duration duration0 = new Duration(0L);
      Instant instant0 = Instant.ofEpochMilli(31449600000L);
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      DateTime dateTime0 = instant0.toDateTime((DateTimeZone) uTCDateTimeZone0);
      Interval interval0 = duration0.toIntervalTo(dateTime0);
      Interval interval1 = interval0.withStartMillis(1L);
      assertEquals(1L, interval1.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(copticChronology0);
      Interval interval0 = new Interval((-604800000L), (-604800000L), lenientChronology0);
      Months months0 = Months.MIN_VALUE;
      // Undeclared exception!
      try { 
        interval0.withPeriodAfterStart(months0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(iSOChronology0, dateTimeZone0);
      Interval interval0 = new Interval((Object) null, zonedChronology0);
      assertEquals(1392409281320L, interval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(1680L);
      Instant instant0 = Instant.EPOCH;
      Interval interval0 = new Interval(duration0, instant0);
      Interval interval1 = interval0.withStart(instant0);
      assertEquals(0L, interval1.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Interval interval0 = new Interval((Object) null);
      Duration duration0 = Duration.millis((-1616L));
      // Undeclared exception!
      try { 
        interval0.withDurationAfterStart(duration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Interval interval0 = new Interval(0L, 1L);
      Interval interval1 = interval0.withPeriodBeforeEnd((ReadablePeriod) null);
      assertEquals(1L, interval1.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Interval interval0 = new Interval(0L, 1L);
      Interval interval1 = interval0.withPeriodAfterStart((ReadablePeriod) null);
      assertEquals(0L, interval1.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(1000000000000000L, 1000000000000000L);
      Interval interval0 = mutableInterval0.toInterval();
      Months months0 = Months.SEVEN;
      Interval interval1 = interval0.withPeriodAfterStart(months0);
      assertEquals(1000018316800000L, interval1.getEndMillis());
      assertEquals(1000000000000000L, interval1.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      Interval interval0 = mutableInterval0.toInterval();
      Duration duration0 = interval0.toDuration();
      Interval interval1 = interval0.withDurationBeforeEnd(duration0);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(1000000000000000L, 1000000000000000L);
      Interval interval0 = mutableInterval0.toInterval();
      Duration duration0 = new Duration(1856L);
      Interval interval1 = interval0.withDurationBeforeEnd(duration0);
      assertEquals(999999999998144L, interval1.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      Interval interval0 = mutableInterval0.toInterval();
      Duration duration0 = interval0.toDuration();
      Interval interval1 = interval0.withDurationAfterStart(duration0);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Interval interval0 = new Interval(0L, 1L);
      DateTime dateTime0 = new DateTime(1L);
      Interval interval1 = interval0.withStart(dateTime0);
      assertEquals(1L, interval1.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      DateTime dateTime0 = DateTime.now((DateTimeZone) uTCDateTimeZone0);
      PeriodType periodType0 = PeriodType.weeks();
      MutablePeriod mutablePeriod0 = new MutablePeriod(dateTime0, dateTime0, periodType0);
      Duration duration0 = mutablePeriod0.toDurationTo(dateTime0);
      Interval interval0 = duration0.toIntervalFrom(dateTime0);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      Interval interval1 = interval0.withChronology(gJChronology0);
      Interval interval2 = interval1.withChronology(gJChronology0);
      assertNotSame(interval2, interval0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Interval interval0 = new Interval(1856L, 1856L);
      Duration duration0 = Duration.standardSeconds(1856L);
      Interval interval1 = interval0.withDurationAfterStart(duration0);
      boolean boolean0 = interval0.abuts(interval1);
      assertTrue(boolean0);
      assertEquals(1857856L, interval1.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Interval interval0 = new Interval(0L, 1L);
      DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 1L).when(dateTimeUtils_MillisProvider0).getMillis();
      DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
      interval0.isAfterNow();
      boolean boolean0 = interval0.abuts((ReadableInterval) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Interval interval0 = new Interval(0L, 1L);
      DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
      doReturn(1392409281320L, 0L).when(dateTimeUtils_MillisProvider0).getMillis();
      DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTime dateTime0 = new DateTime((Chronology) buddhistChronology0);
      boolean boolean0 = interval0.abuts((ReadableInterval) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Interval interval0 = new Interval(0L, 1L);
      boolean boolean0 = interval0.abuts((ReadableInterval) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-2519L), (-2519L));
      Interval interval0 = mutableInterval0.toInterval();
      boolean boolean0 = interval0.abuts(mutableInterval0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Instant instant0 = Instant.now();
      Duration duration0 = new Duration(0L);
      Interval interval0 = new Interval(instant0, duration0);
      Interval interval1 = interval0.gap(interval0);
      assertNull(interval1);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-2519L), (-2519L));
      Interval interval0 = mutableInterval0.toInterval();
      Period period0 = Period.seconds(1);
      Duration duration0 = period0.toStandardDuration();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(ethiopicChronology0);
      DateTime dateTime0 = new DateTime((Chronology) lenientChronology0);
      DateTime dateTime1 = dateTime0.withYearOfEra(1);
      MutableInterval mutableInterval1 = new MutableInterval(duration0, dateTime1);
      Interval interval1 = interval0.gap(mutableInterval1);
      assertNotSame(interval0, interval1);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      Interval interval0 = mutableInterval0.toInterval();
      Interval interval1 = interval0.overlap(interval0);
      assertNull(interval1);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Interval interval0 = new Interval((-3496L), 1L);
      MutableInterval mutableInterval0 = new MutableInterval();
      Interval interval1 = interval0.overlap(mutableInterval0);
      assertNotSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Interval interval0 = Interval.parseWithOffset("33658-09-27T01:46:40.000Z/33658-09-27T01:46:40.000Z");
      assertEquals(1000000000000000L, interval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      // Undeclared exception!
      try { 
        Interval.parseWithOffset("Pacific/Guadalcanal");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Pacific\" is malformed at \"acific\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      // Undeclared exception!
      try { 
        Interval.parseWithOffset("A<nn.(j{/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format invalid: A<nn.(j{/
         //
         verifyException("org.joda.time.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      // Undeclared exception!
      try { 
        Interval.parseWithOffset("/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format invalid: /
         //
         verifyException("org.joda.time.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      // Undeclared exception!
      try { 
        Interval.parseWithOffset(",");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format requires a '/' separator: ,
         //
         verifyException("org.joda.time.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Object object0 = new Object();
      Interval interval0 = null;
      try {
        interval0 = new Interval(object0, gJChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No interval converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Interval interval0 = new Interval(0L, 1L);
      Interval interval1 = interval0.gap((ReadableInterval) null);
      assertNotNull(interval1);
      
      Interval interval2 = interval0.withPeriodAfterStart((ReadablePeriod) null);
      Interval interval3 = interval1.gap(interval2);
      assertNotNull(interval3);
      assertNotSame(interval0, interval2);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Instant instant0 = Instant.now();
      Duration duration0 = Duration.standardHours((-2429L));
      Interval interval0 = null;
      try {
        interval0 = new Interval(duration0, instant0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      Interval interval0 = null;
      try {
        interval0 = new Interval(years0, (ReadableInstant) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Interval interval0 = Interval.parse((String) null);
      Interval interval1 = interval0.toInterval();
      assertEquals(1392409281320L, interval1.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Duration duration0 = new Duration((Object) null);
      Interval interval0 = new Interval((ReadableInstant) null, duration0);
      Interval interval1 = interval0.withEnd((ReadableInstant) null);
      assertSame(interval1, interval0);
  }
}
