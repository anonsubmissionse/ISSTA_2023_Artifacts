/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 05 19:52:59 GMT 2022
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.format.FormatUtils;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FormatUtils_ESTest extends FormatUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[6] = (byte) (-96);
      StringWriter stringWriter0 = new StringWriter();
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, (-21L));
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, 7L);
      int int0 = 25;
      FormatUtils.writePaddedInteger((Writer) stringWriter0, 147L, 25);
      FormatUtils.appendPaddedInteger((Appendable) stringWriter0, (long) (byte)0, (int) (byte)0);
      StringWriter stringWriter1 = new StringWriter();
      FormatUtils.writePaddedInteger((Writer) stringWriter0, Integer.MIN_VALUE, (int) (byte)0);
      String string0 = "";
      MockFile mockFile0 = new MockFile((File) null, "");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringBuffer stringBuffer0 = new StringBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      // Undeclared exception!
      try { 
        FormatUtils.appendPaddedInteger((Appendable) charBuffer0, (-1265), (-1265));
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)10;
      byteArray0[6] = (byte)10;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, (-21L));
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter1, 7L);
      FormatUtils.writePaddedInteger((Writer) stringWriter0, 147L, 25);
      FormatUtils.appendPaddedInteger((Appendable) stringWriter1, (long) (byte)10, (int) (byte)10);
      StringBuffer stringBuffer0 = new StringBuffer();
      FormatUtils.appendUnpaddedInteger(stringBuffer0, Integer.MIN_VALUE);
      FormatUtils.appendPaddedInteger((Appendable) stringWriter1, (long) Integer.MIN_VALUE, 0);
      FormatUtils.calculateDigitCount(25);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FormatUtils.createErrorMessage("", 22);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Invalid format: \"\" is too short");
      // Undeclared exception!
      try { 
        FormatUtils.appendPaddedInteger((Appendable) charBuffer0, 1L, (-1));
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FormatUtils.calculateDigitCount(9223372036854775800L);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'<L73LNs) },");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FormatUtils.createErrorMessage("'<L73LNs) },", 22);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0);
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintStream0, 19);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "'<L73LNs) },");
      FormatUtils.appendPaddedInteger(stringBuffer0, (-2265), 3597);
      FormatUtils.appendPaddedInteger(stringBuffer0, (-2115431679), 2758);
      // Undeclared exception!
      try { 
        FormatUtils.writePaddedInteger((Writer) null, 9223372036854775800L, 19);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FormatUtils.calculateDigitCount((-9223372036854775808L));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'<L73LNs) },");
      FormatUtils.createErrorMessage("'<L73LNs) },", 22);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0);
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintStream0, 20);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "'<L73LNs) },");
      stringBuffer0.chars();
      FormatUtils.appendPaddedInteger(stringBuffer0, 22, 3597);
      objectOutputStream0.writeShort(3597);
      FormatUtils.appendPaddedInteger((Appendable) mockPrintStream0, (-9223372036854775808L), 10000);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, 20, 20);
      objectOutputStream0.flush();
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintStream0, (-9223372036854775798L));
      FormatUtils.appendPaddedInteger(stringBuffer0, (-9223372036854775808L), 20);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        FormatUtils.appendPaddedInteger((Appendable) pipedWriter0, (-96L), 3597);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FormatUtils.calculateDigitCount((-6045L));
      FormatUtils.calculateDigitCount((-9223372036854775791L));
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      FormatUtils.writeUnpaddedInteger((Writer) charArrayWriter0, Integer.MIN_VALUE);
      charArrayWriter0.append('C');
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('Y');
      FormatUtils.writeUnpaddedInteger((Writer) charArrayWriter1, (-9223372036854775791L));
      FormatUtils.writePaddedInteger((Writer) charArrayWriter1, 25L, (-1));
      FormatUtils.writePaddedInteger((Writer) charArrayWriter1, (long) Integer.MIN_VALUE, 51);
      FormatUtils.writePaddedInteger((Writer) charArrayWriter0, (long) 20, 51);
      FormatUtils.appendPaddedInteger((Appendable) charArrayWriter1, Integer.MIN_VALUE, 1101);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(filterOutputStream0);
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(bufferedOutputStream0, charset0);
      FormatUtils.appendUnpaddedInteger((Appendable) outputStreamWriter0, 1764L);
      FormatUtils.writePaddedInteger((Writer) outputStreamWriter0, 41, 41);
      FormatUtils.appendPaddedInteger((Appendable) outputStreamWriter0, 1764L, 10000);
      FormatUtils.appendUnpaddedInteger((Appendable) outputStreamWriter0, (-125));
      StringBuffer stringBuffer0 = new StringBuffer("9X]|*r O~xNs##9cm");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)0;
      byteArray0[0] = (byte)25;
      byteArray0[4] = (byte)4;
      bufferedOutputStream0.write(byteArray0);
      stringBuffer0.append((float) 10000);
      FormatUtils.appendPaddedInteger(stringBuffer0, (-1054L), 4);
      FormatUtils.appendUnpaddedInteger((Appendable) outputStreamWriter0, 4);
      FormatUtils.writeUnpaddedInteger((Writer) outputStreamWriter0, (long) 41);
      FormatUtils.writePaddedInteger((Writer) outputStreamWriter0, (long) 4, 34);
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, (long) 41, 26);
      FormatUtils.calculateDigitCount(34);
      FormatUtils.createErrorMessage("9X]|*r O~xNs##9cm", (-18));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        FormatUtils.writeUnpaddedInteger((Writer) pipedWriter0, 35);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        FormatUtils.appendPaddedInteger((Appendable) pipedWriter0, (-1336), (-1336));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FormatUtils.calculateDigitCount((-6045L));
      FormatUtils.calculateDigitCount(1L);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      FormatUtils.writeUnpaddedInteger((Writer) charArrayWriter0, Integer.MIN_VALUE);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('Y');
      FormatUtils.writeUnpaddedInteger((Writer) charArrayWriter1, (-9223372036854775808L));
      FormatUtils.writePaddedInteger((Writer) charArrayWriter0, (long) Integer.MIN_VALUE, (-1));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FormatUtils.calculateDigitCount((-9223372036854775808L));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'<L73LNs) },");
      FormatUtils.createErrorMessage("'<L73LNs) },", 22);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0);
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintStream0, 20);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "'<L73LNs) },");
      stringBuffer0.chars();
      FormatUtils.appendPaddedInteger(stringBuffer0, 22, 3597);
      FormatUtils.appendPaddedInteger((Appendable) mockPrintStream0, (-9223372036854775808L), 10000);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, 20, 20);
      objectOutputStream0.flush();
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintStream0, (-9223372036854775798L));
      FormatUtils.appendPaddedInteger(stringBuffer0, (-9223372036854775808L), 20);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append('P');
      StringBuffer stringBuffer1 = stringWriter1.getBuffer();
      // Undeclared exception!
      FormatUtils.appendPaddedInteger(stringBuffer1, 5, 10000);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      long long0 = 9223372036854775802L;
      FormatUtils.calculateDigitCount(9223372036854775802L);
      String string0 = "'<L73LNs) },";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'<L73LNs) },");
      FormatUtils.createErrorMessage("'<L73LNs) },", 22);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0);
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintStream0, 19);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "'<L73LNs) },");
      stringBuffer0.chars();
      FormatUtils.appendPaddedInteger(stringBuffer0, 22, 3597);
      FormatUtils.appendPaddedInteger((Appendable) mockPrintStream0, 9223372036854775802L, 10000);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("'<L73LNs) },", "Invalid format: \"'<L73LNs) },\" is too short");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // Invalid format: \"'<L73LNs) },\" is too short
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(",k/(Ozh3qPO9UeLw&hL");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) ",k/(Ozh3qPO9UeLw&hL");
      printWriter0.print((Object) ",k/(Ozh3qPO9UeLw&hL");
      printWriter0.checkError();
      FormatUtils.writePaddedInteger((Writer) printWriter0, 2126221443, (-575));
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, 394);
      FormatUtils.createErrorMessage(",k/(Ozh3qPO9UeLw&hL", 1267);
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, 75L, (-575));
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, (-575));
      FormatUtils.appendUnpaddedInteger((Appendable) printWriter0, Integer.MIN_VALUE);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        FormatUtils.appendPaddedInteger((StringBuffer) null, 9223372036854775803L, 19);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = 3105;
      CharBuffer charBuffer0 = CharBuffer.allocate(3105);
      charBuffer0.flip();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      FormatUtils.appendPaddedInteger(stringBuffer0, (long) 3105, 3105);
      // Undeclared exception!
      try { 
        FormatUtils.appendPaddedInteger((Appendable) charBuffer0, (-441L), 3105);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FormatUtils.calculateDigitCount((-6045L));
      FormatUtils.calculateDigitCount(1L);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      FormatUtils.writeUnpaddedInteger((Writer) charArrayWriter0, Integer.MIN_VALUE);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('Y');
      FormatUtils.writeUnpaddedInteger((Writer) charArrayWriter1, (-9223372036854775808L));
      FormatUtils.writePaddedInteger((Writer) charArrayWriter1, 25L, (-1));
      FormatUtils.writePaddedInteger((Writer) charArrayWriter1, (long) Integer.MIN_VALUE, 51);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        FormatUtils.appendPaddedInteger((Appendable) null, 9223372036854775803L, 939);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char char0 = 'Z';
      StringWriter stringWriter1 = stringWriter0.append('Z');
      int int0 = 1;
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) charBuffer1);
      StringWriter stringWriter3 = stringWriter2.append((CharSequence) charBuffer0, 1, 1);
      StringBuffer stringBuffer0 = stringWriter3.getBuffer();
      stringBuffer0.appendCodePoint(1);
      stringBuffer0.reverse();
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (long) 1);
      int int1 = 2720;
      FormatUtils.writePaddedInteger((Writer) stringWriter2, 3337L, 2720);
      String string0 = "~e.,-~5jY\\9";
      stringWriter1.write("~e.,-~5jY9");
      MockFileWriter mockFileWriter0 = new MockFileWriter("~e.,-~5jY9", true);
      int int2 = 4197;
      FormatUtils.writePaddedInteger((Writer) mockFileWriter0, 40, 4197);
      // Undeclared exception!
      try { 
        FormatUtils.appendPaddedInteger((Appendable) charBuffer0, 2720, 4197);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      long long0 = 9223372036854775804L;
      // Undeclared exception!
      try { 
        FormatUtils.appendUnpaddedInteger((StringBuffer) null, 9223372036854775804L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FormatUtils.calculateDigitCount(100L);
      MockFile mockFile0 = new MockFile("VJ", ".xOx@zNmA<T]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('Z');
      PrintWriter printWriter1 = mockPrintWriter0.append('Z');
      mockFile0.getCanonicalPath();
      mockFile0.delete();
      FormatUtils.writeUnpaddedInteger((Writer) printWriter0, (-3793L));
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintWriter0, (-3793L));
      FormatUtils.writeUnpaddedInteger((Writer) printWriter1, (long) 4);
      mockFile0.mkdirs();
      FormatUtils.createErrorMessage(".xOx@zNmA<T]", 43);
      FormatUtils.calculateDigitCount((-3470L));
      FormatUtils.appendPaddedInteger((Appendable) printWriter0, 1748L, 22);
      StringBuffer stringBuffer0 = new StringBuffer();
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 1727L);
      FormatUtils.appendPaddedInteger(stringBuffer0, (long) 43, 1197);
      FormatUtils.createErrorMessage("/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/joda-time/VJ/.xOx@zNmA<T]", 43);
      FormatUtils.createErrorMessage("Invalid format: \".xOx@zNmA<T]\" is too short", 5);
      FormatUtils.writePaddedInteger((Writer) printWriter0, 1000L, 4);
      FormatUtils.createErrorMessage("Invalid format: \"/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/joda-tim...\" is malformed at \"023/toga-eval/artifacts/joda-tim...\"", 1);
      FormatUtils.writePaddedInteger((Writer) printWriter0, (-9223372036854775808L), 1197);
      FormatUtils.appendUnpaddedInteger((Appendable) stringBuffer0, 3);
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, 9223372036854775800L);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FormatUtils.calculateDigitCount(100L);
      MockFile mockFile0 = new MockFile("VJ", ".xOx@zNmA<T]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('Z');
      PrintWriter printWriter1 = mockPrintWriter0.append('Z');
      mockFile0.getCanonicalPath();
      mockFile0.delete();
      FormatUtils.writeUnpaddedInteger((Writer) printWriter0, (-3793L));
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintWriter0, (-3793L));
      FormatUtils.writeUnpaddedInteger((Writer) printWriter1, (long) 4);
      mockFile0.mkdirs();
      FormatUtils.createErrorMessage(".xOx@zNmA<T]", 43);
      FormatUtils.calculateDigitCount((-3446L));
      FormatUtils.appendPaddedInteger((Appendable) printWriter0, 1748L, 22);
      FormatUtils.createErrorMessage("/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/joda-time/VJ/.xOx@zNmA<T]", 43);
      FormatUtils.createErrorMessage("Invalid format: \".xOx@zNmA<T]\" is too short", 5);
      FormatUtils.writePaddedInteger((Writer) printWriter0, 1000L, 4);
      FormatUtils.createErrorMessage("Invalid format: \"/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/joda-tim...\" is malformed at \"023/toga-eval/artifacts/joda-tim...\"", 1);
      FormatUtils.writePaddedInteger((Writer) printWriter0, (-9223372036854775808L), 1197);
      FormatUtils.calculateDigitCount(1724L);
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, (-9223372036854775808L), (-1089));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FormatUtils.calculateDigitCount((-6045L));
      FormatUtils.calculateDigitCount(1L);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      FormatUtils.writeUnpaddedInteger((Writer) charArrayWriter0, Integer.MIN_VALUE);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('Y');
      FormatUtils.writeUnpaddedInteger((Writer) charArrayWriter1, (-9223372036854775808L));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FormatUtils.calculateDigitCount(100L);
      MockFile mockFile0 = new MockFile("VJ", ".xOx@zNmA<T]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('Z');
      PrintWriter printWriter1 = mockPrintWriter0.append('Z');
      mockFile0.getCanonicalPath();
      mockFile0.delete();
      FormatUtils.writeUnpaddedInteger((Writer) printWriter0, (-3793L));
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintWriter0, (-3793L));
      FormatUtils.writeUnpaddedInteger((Writer) printWriter1, (long) 4);
      mockFile0.mkdirs();
      FormatUtils.createErrorMessage(".xOx@zNmA<T]", 43);
      FormatUtils.calculateDigitCount((-3446L));
      FormatUtils.appendPaddedInteger((Appendable) printWriter0, 1748L, 22);
      FormatUtils.createErrorMessage("/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/joda-time/VJ/.xOx@zNmA<T]", 43);
      FormatUtils.createErrorMessage("Invalid format: \".xOx@zNmA<T]\" is too short", 5);
      FormatUtils.writePaddedInteger((Writer) printWriter0, 1000L, 4);
      FormatUtils.createErrorMessage("Invalid format: \"/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/joda-tim...\" is malformed at \"023/toga-eval/artifacts/joda-tim...\"", 1);
      FormatUtils.writePaddedInteger((Writer) printWriter0, 9223372036854775757L, 1197);
      FormatUtils.writePaddedInteger((Writer) printWriter0, 1000L, 5);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FormatUtils.calculateDigitCount((-9223372036854775808L));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'<L73LNs) },");
      FormatUtils.createErrorMessage("'<L73LNs) },", 22);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0);
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintStream0, 20);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "'<L73LNs) },");
      FormatUtils.appendPaddedInteger(stringBuffer0, 22, 3597);
      FormatUtils.appendPaddedInteger((Appendable) mockPrintStream0, (-9223372036854775808L), 10000);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, 20, 20);
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintStream0, (-9223372036854775798L));
      FormatUtils.appendPaddedInteger(stringBuffer0, (-96L), 20);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(",k/(Ozh3qPO9UeLw&hL");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) ",k/(Ozh3qPO9UeLw&hL");
      FormatUtils.writePaddedInteger((Writer) printWriter0, 2126221446, (-575));
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, 373);
      mockPrintStream0.println(",k/(Ozh3qPO9UeLw&hL");
      FormatUtils.createErrorMessage(",k/(Ozh3qPO9UeLw&hL", 1267);
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, 75L, (-575));
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, (-575));
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(373);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) ",k/(Ozh3qPO9UeLw&hL");
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append('%');
      // Undeclared exception!
      FormatUtils.appendPaddedInteger((Appendable) charArrayWriter2, 2126221446, 2126221446);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        FormatUtils.appendPaddedInteger((StringBuffer) null, 9223372036854775803L, 36);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FormatUtils.calculateDigitCount(100L);
      MockFile mockFile0 = new MockFile("VJ", ".xOx@zNmA<T]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('Z');
      PrintWriter printWriter1 = mockPrintWriter0.append('Z');
      mockFile0.getCanonicalPath();
      mockPrintWriter0.println();
      mockFile0.delete();
      FormatUtils.writeUnpaddedInteger((Writer) printWriter0, (-3793L));
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintWriter0, (-3793L));
      FormatUtils.writeUnpaddedInteger((Writer) printWriter1, (long) 4);
      mockFile0.mkdirs();
      FormatUtils.createErrorMessage(".xOx@zNmA<T]", 43);
      FormatUtils.calculateDigitCount((-3470L));
      FormatUtils.appendPaddedInteger((Appendable) printWriter0, 1748L, 22);
      StringBuffer stringBuffer0 = new StringBuffer();
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 1727L);
      FormatUtils.appendPaddedInteger(stringBuffer0, (long) 43, 1197);
      FormatUtils.createErrorMessage("/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/joda-time/VJ/.xOx@zNmA<T]", 43);
      FormatUtils.createErrorMessage("KBD5&Bfp[)-:7 ", 5);
      FormatUtils.writePaddedInteger((Writer) printWriter0, 1000L, 4);
      FormatUtils.createErrorMessage("Invalid format: \"/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/joda-tim...\" is malformed at \"023/toga-eval/artifacts/joda-tim...\"", 1);
      FormatUtils.writePaddedInteger((Writer) printWriter0, (-9223372036854775808L), 1197);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FormatUtils.calculateDigitCount((-9223372036854775808L));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'<L73LNs) },");
      FormatUtils.createErrorMessage("'<L73LNs) },", 22);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0);
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintStream0, 20);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "'<L73LNs) },");
      FormatUtils.appendPaddedInteger(stringBuffer0, (-2267), 3597);
      FormatUtils.appendPaddedInteger((Appendable) mockPrintStream0, (-9223372036854775808L), 10000);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringBuffer stringBuffer0 = new StringBuffer();
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (-9223372036854775808L));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)0;
      byteArray0[1] = (byte) (-96);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      FormatUtils.writePaddedInteger((Writer) stringWriter0, (long) (byte)0, 1870);
      stringWriter0.write("");
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, (-8L));
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter1, 7L);
      FormatUtils.writePaddedInteger((Writer) stringWriter0, 114L, 25);
      FormatUtils.appendPaddedInteger((Appendable) stringWriter1, 10000, (-916));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(926);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      byteArrayOutputStream0.reset();
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, (long) 926, 926);
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, 3022);
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintWriter0, 3533);
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, 100, 3022);
      char[] charArray0 = new char[6];
      charArray0[0] = '@';
      charArray0[1] = '\"';
      charArray0[2] = 'J';
      charArray0[3] = '@';
      charArray0[4] = 'c';
      charArray0[5] = 'L';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 3022);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, 0, 0);
      stringWriter0.append('L');
      FormatUtils.writePaddedInteger((Writer) stringWriter0, 2491L, 0);
      FormatUtils.createErrorMessage("", 0);
      FormatUtils.parseTwoDigits("Invalid format: \"\"", 0);
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, 0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      stringBuffer0.insert(0, "");
      charArrayWriter0.write(">rL'`h?7");
      int int0 = 676;
      FormatUtils.writePaddedInteger((Writer) charArrayWriter0, 0, 676);
      int int1 = (-11);
      FormatUtils.appendPaddedInteger(stringBuffer0, (-11), (-882));
      int int2 = 10000;
      // Undeclared exception!
      FormatUtils.writePaddedInteger((Writer) stringWriter0, (-2), 10000);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FormatUtils.createErrorMessage("WG#", 3);
      FormatUtils.parseTwoDigits("Invalid format: \"WG#\" is too short", 3);
      FormatUtils.createErrorMessage("Invalid format: \"WG#\" is too short", 3);
      StringBuffer stringBuffer0 = new StringBuffer("Invalid format: \"WG#\" is too short");
      StringBuffer stringBuffer1 = stringBuffer0.append((CharSequence) "WG#");
      FormatUtils.appendPaddedInteger(stringBuffer0, (-1), (-1));
      int int0 = 4;
      FormatUtils.appendPaddedInteger(stringBuffer1, (long) (-1), 4);
      FormatUtils.appendPaddedInteger(stringBuffer0, (long) 550, 4);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-2524));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          FormatUtils.calculateDigitCount(9223372036854775795L);
          FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'<L73LNs) },");
          FormatUtils.createErrorMessage("'<L73LNs) },", (-8));
          ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
          ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
          objectOutputStream0.writeShort((-8));
          MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0);
          FormatUtils.appendUnpaddedInteger((Appendable) mockPrintStream0, 19);
          StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "'<L73LNs) },");
          int int0 = (-2267);
          FormatUtils.appendPaddedInteger(stringBuffer0, (-2267), 3597);
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileWriter mockFileWriter0 = null;
          try {
            mockFileWriter0 = new MockFileWriter(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // java.io.FileWriter.<init>(FileWriter.java:116)
             // org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:233)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FormatUtils.calculateDigitCount(100L);
      MockFile mockFile0 = new MockFile("VJ", ".xOx@zNmA<T]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('Z');
      PrintWriter printWriter1 = mockPrintWriter0.append('Z');
      mockFile0.getCanonicalPath();
      mockPrintWriter0.println();
      FormatUtils.appendPaddedInteger((Appendable) printWriter0, 3, 4);
      mockFile0.delete();
      mockFile0.toURI();
      FormatUtils.writeUnpaddedInteger((Writer) printWriter0, (-3793L));
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintWriter0, (-3793L));
      FormatUtils.writeUnpaddedInteger((Writer) printWriter1, (long) 4);
      mockFile0.mkdirs();
      FormatUtils.createErrorMessage(".xOx@zNmA<T]", 43);
      FormatUtils.calculateDigitCount((-3470L));
      FormatUtils.appendPaddedInteger((Appendable) printWriter0, 1748L, 22);
      StringBuffer stringBuffer0 = new StringBuffer();
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 1727L);
      FormatUtils.appendPaddedInteger(stringBuffer0, (long) 43, 1197);
      FormatUtils.createErrorMessage("/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/joda-time/VJ/.xOx@zNmA<T]", 43);
      FormatUtils.createErrorMessage("KBD5&Bfp[)-:7 ", 5);
      FormatUtils.writePaddedInteger((Writer) printWriter0, 1000L, 4);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FormatUtils.calculateDigitCount(100L);
      MockFile mockFile0 = new MockFile("", ".xOx@zNmA<T]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('Z');
      PrintWriter printWriter1 = mockPrintWriter0.append('Z');
      mockFile0.getCanonicalPath();
      mockPrintWriter0.println();
      FormatUtils.appendPaddedInteger((Appendable) printWriter0, 3, 4);
      mockFile0.delete();
      mockFile0.toURI();
      FormatUtils.writeUnpaddedInteger((Writer) printWriter0, (-3793L));
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintWriter0, (-3793L));
      FormatUtils.writeUnpaddedInteger((Writer) printWriter1, (long) 4);
      mockFile0.mkdirs();
      FormatUtils.createErrorMessage(".xOx@zNmA<T]", 43);
      FormatUtils.calculateDigitCount((-3470L));
      FormatUtils.appendPaddedInteger((Appendable) printWriter0, 1748L, 22);
      StringBuffer stringBuffer0 = new StringBuffer();
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (long) 4);
      FormatUtils.createErrorMessage("/.xOx@zNmA<T]", 43);
      FormatUtils.createErrorMessage("KBD5&Bfp[)-:7 ", 5);
      FormatUtils.writePaddedInteger((Writer) printWriter0, 1000L, 4);
      FormatUtils.appendPaddedInteger((Appendable) printWriter1, 22, 1197);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringBuffer stringBuffer0 = null;
      long long0 = 9223372036854775804L;
      int int0 = 1;
      // Undeclared exception!
      try { 
        FormatUtils.appendPaddedInteger((StringBuffer) null, 9223372036854775804L, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)45;
      byteArray0[6] = (byte) (-96);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "");
      FormatUtils.writePaddedInteger((Writer) stringWriter0, (long) (byte) (-96), 1870);
      StringBuffer stringBuffer0 = null;
      int int0 = 10000;
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, (long) (byte)10);
      // Undeclared exception!
      try { 
        FormatUtils.appendUnpaddedInteger((StringBuffer) null, 10000);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      StringBuffer stringBuffer0 = null;
      int int0 = 2177;
      // Undeclared exception!
      try { 
        FormatUtils.appendPaddedInteger((StringBuffer) null, (-9223372036854775808L), 2177);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FormatUtils.calculateDigitCount((-9223372036854775808L));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FormatUtils.createErrorMessage("'<L73LNs) },", 22);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0);
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintStream0, 20);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = "2147483648";
      MockFileWriter mockFileWriter0 = new MockFileWriter("2147483648", true);
      char[] charArray0 = new char[3];
      charArray0[0] = 'g';
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      charArray0[1] = '1';
      charArray0[2] = 's';
      mockFileWriter0.write(charArray0);
      FormatUtils.writeUnpaddedInteger((Writer) mockFileWriter0, 1409L);
      int int0 = 3;
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      charBuffer0.clear();
      FormatUtils.appendUnpaddedInteger((Appendable) charBuffer0, 0L);
      FormatUtils.writeUnpaddedInteger((Writer) mockFileWriter0, 3);
      // Undeclared exception!
      try { 
        FormatUtils.appendUnpaddedInteger((Appendable) charBuffer0, 2721);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, 427);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, (long) 427, (-297));
      FormatUtils.appendPaddedInteger((Appendable) mockPrintWriter0, (-9223372036854775808L), (-1556));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        FormatUtils.appendUnpaddedInteger((Appendable) pipedWriter0, 676L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FormatUtils.calculateDigitCount(100L);
      MockFile mockFile0 = new MockFile("", ".xOx@zNmA<T]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('Z');
      PrintWriter printWriter1 = mockPrintWriter0.append('Z');
      mockFile0.getCanonicalPath();
      mockPrintWriter0.println();
      FormatUtils.appendPaddedInteger((Appendable) printWriter0, 3, 4);
      mockFile0.delete();
      mockFile0.toURI();
      FormatUtils.writeUnpaddedInteger((Writer) printWriter0, (-3793L));
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintWriter0, (-3793L));
      FormatUtils.writeUnpaddedInteger((Writer) printWriter1, (long) 4);
      FormatUtils.createErrorMessage(".xOx@zNmA<T]", 43);
      FormatUtils.calculateDigitCount((-3470L));
      FormatUtils.appendPaddedInteger((Appendable) printWriter0, 1764L, 22);
      StringBuffer stringBuffer0 = new StringBuffer();
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 1727L);
      FormatUtils.appendPaddedInteger(stringBuffer0, (long) 43, 1197);
      FormatUtils.createErrorMessage("/.xOx@zNmA<T]", 43);
      StringBuffer stringBuffer1 = new StringBuffer("");
      FormatUtils.appendUnpaddedInteger(stringBuffer1, 100L);
      FormatUtils.writeUnpaddedInteger((Writer) printWriter1, 43);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FormatUtils.calculateDigitCount(100L);
      MockFile mockFile0 = new MockFile("", ".xOx@zNmA<T]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('Z');
      PrintWriter printWriter1 = mockPrintWriter0.append('Z');
      mockFile0.getCanonicalPath();
      mockPrintWriter0.println();
      FormatUtils.appendPaddedInteger((Appendable) printWriter0, 3, (int) 'Z');
      mockFile0.delete();
      mockFile0.toURI();
      FormatUtils.writeUnpaddedInteger((Writer) printWriter0, (-3793L));
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintWriter0, (-3793L));
      FormatUtils.writeUnpaddedInteger((Writer) printWriter1, (long) 'Z');
      FormatUtils.createErrorMessage(".xOx@zNmA<T]", 43);
      FormatUtils.calculateDigitCount((-3470L));
      FormatUtils.appendPaddedInteger((Appendable) printWriter0, 100L, 22);
      StringBuffer stringBuffer0 = new StringBuffer();
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 1727L);
      FormatUtils.appendPaddedInteger(stringBuffer0, (long) 43, 1197);
      FormatUtils.createErrorMessage("/.xOx@zNmA<T]", 43);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(filterOutputStream0);
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(bufferedOutputStream0, charset0);
      FormatUtils.appendUnpaddedInteger((Appendable) outputStreamWriter0, 1764L);
      int int0 = 52;
      FormatUtils.writePaddedInteger((Writer) outputStreamWriter0, 41, 52);
      int int1 = 10015;
      // Undeclared exception!
      FormatUtils.appendPaddedInteger((Appendable) outputStreamWriter0, 1764L, 10015);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      stringWriter0.write((int) (byte)0);
      stringWriter0.write("");
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, (-1L));
      // Undeclared exception!
      FormatUtils.writePaddedInteger((Writer) stringWriter0, 114L, 2146915229);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\" is too short");
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, 2820L, 3248);
      FormatUtils.parseTwoDigits("\" is too short", 1);
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintWriter0, 3421L);
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, (long) 3248, (-103));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "~;7%HPu|");
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-9);
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringWriter stringWriter0 = new StringWriter();
      FormatUtils.writePaddedInteger((Writer) stringWriter0, (long) (byte)10, 1870);
      stringWriter0.write(1);
      FormatUtils.appendUnpaddedInteger((Appendable) stringWriter0, 15);
      FormatUtils.writePaddedInteger((Writer) stringWriter0, 114L, 25);
      FormatUtils.createErrorMessage("", 0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CharSequence charSequence0 = null;
      // Undeclared exception!
      try { 
        FormatUtils.parseTwoDigits((CharSequence) null, 41);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = FormatUtils.createErrorMessage("", 0);
      assertNotNull(string0);
      assertEquals("Invalid format: \"\"", string0);
      
      FormatUtils.parseTwoDigits("Invalid format: \"\"", 0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      charArrayWriter0.write("");
      FormatUtils.writePaddedInteger((Writer) charArrayWriter0, 0, 676);
      FormatUtils.calculateDigitCount((-1L));
      FormatUtils.calculateDigitCount(676);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      stringBuffer0.append(2491L);
      // Undeclared exception!
      FormatUtils.appendPaddedInteger(stringBuffer0, 0L, 2144264032);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Writer writer0 = null;
      // Undeclared exception!
      try { 
        FormatUtils.writePaddedInteger((Writer) null, 13421772, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "~;7%pP$|");
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-96);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringWriter stringWriter0 = new StringWriter((byte)16);
      FormatUtils.writePaddedInteger((Writer) stringWriter0, (long) (byte) (-96), 1870);
      StringBuffer stringBuffer0 = new StringBuffer("t\"#f0<~804");
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (int) (byte)0);
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, (int) (byte)16);
      FormatUtils.appendUnpaddedInteger((Appendable) stringWriter0, 908L);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = (-1071);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        FormatUtils.appendUnpaddedInteger((Appendable) null, (-1071));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      FormatUtils.writePaddedInteger((Writer) stringWriter0, 2491L, 0);
      FormatUtils.createErrorMessage("", 0);
      FormatUtils.parseTwoDigits("Invalid format: \"\"", 0);
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, 0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('P');
      stringWriter0.getBuffer();
      charArrayWriter0.write("");
      FormatUtils.writePaddedInteger((Writer) charArrayWriter0, 0, 676);
      FormatUtils.appendPaddedInteger(stringBuffer0, (-1), (-882));
      FormatUtils.writePaddedInteger((Writer) stringWriter0, (-2), (-1783));
      FormatUtils.appendPaddedInteger(stringBuffer0, 1000L, 2);
      FormatUtils.calculateDigitCount((-1L));
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, (long) 0, 312);
      FormatUtils.calculateDigitCount(676);
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 10L);
      FormatUtils.writePaddedInteger((Writer) charArrayWriter1, (-16L), 26);
      FormatUtils.calculateDigitCount(10L);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, 0, 0);
      StringWriter stringWriter1 = stringWriter0.append('6');
      FormatUtils.writePaddedInteger((Writer) stringWriter0, 2491L, 0);
      FormatUtils.createErrorMessage("", 0);
      FormatUtils.parseTwoDigits("Invalid format: \"\"", 0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      stringBuffer0.insert(0, "");
      charArrayWriter0.write("");
      FormatUtils.writePaddedInteger((Writer) charArrayWriter0, (-29), 639);
      FormatUtils.appendPaddedInteger(stringBuffer0, 312, (-882));
      FormatUtils.writePaddedInteger((Writer) stringWriter0, (-2), (-1783));
      FormatUtils.appendPaddedInteger(stringBuffer0, 1000L, 2);
      FormatUtils.calculateDigitCount((-1L));
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, 1510L, 312);
      FormatUtils.calculateDigitCount(639);
      FormatUtils.appendUnpaddedInteger((Appendable) stringWriter1, 0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, 0, 0);
      stringWriter0.append('6');
      FormatUtils.writePaddedInteger((Writer) stringWriter0, 2491L, 0);
      FormatUtils.createErrorMessage("", 0);
      FormatUtils.parseTwoDigits("Invalid format: \"\"", 0);
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, 0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      StringBuffer stringBuffer1 = stringBuffer0.insert(0, "");
      charArrayWriter0.write("");
      FormatUtils.writePaddedInteger((Writer) charArrayWriter0, 0, 671);
      FormatUtils.appendPaddedInteger(stringBuffer0, 0, (-882));
      FormatUtils.writePaddedInteger((Writer) stringWriter0, (-2), (-1783));
      charArrayWriter0.close();
      FormatUtils.appendPaddedInteger(stringBuffer0, 1000L, 2);
      FormatUtils.calculateDigitCount((-1L));
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, 1510L, 312);
      FormatUtils.calculateDigitCount(671);
      FormatUtils.writeUnpaddedInteger((Writer) charArrayWriter0, 27);
      FormatUtils.appendUnpaddedInteger(stringBuffer1, 0);
      FormatUtils.writeUnpaddedInteger((Writer) charArrayWriter0, 68L);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Writer writer0 = null;
      int int0 = (-1944);
      // Undeclared exception!
      try { 
        FormatUtils.writePaddedInteger((Writer) null, (-1944), (-1944));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = stringBuffer0.append((Object) "\" is malformed at \"");
      stringBuffer0.append(true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "c-8MN^(z#Y");
      stringBuffer0.append(2);
      FormatUtils.appendPaddedInteger(stringBuffer0, 995L, 19);
      FormatUtils.appendUnpaddedInteger(stringBuffer1, (long) 19);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, 0, 0);
      stringWriter0.append('6');
      FormatUtils.writePaddedInteger((Writer) stringWriter0, 2491L, 0);
      FormatUtils.createErrorMessage("", 0);
      FormatUtils.parseTwoDigits("Invalid format: \"\"", 0);
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, 0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      StringBuffer stringBuffer1 = stringBuffer0.insert(0, "");
      charArrayWriter0.write("");
      FormatUtils.writePaddedInteger((Writer) charArrayWriter0, 0, 676);
      FormatUtils.appendPaddedInteger(stringBuffer0, (-1), (-882));
      FormatUtils.writePaddedInteger((Writer) stringWriter0, (-2), (-1783));
      FormatUtils.appendPaddedInteger(stringBuffer0, 1000L, 2);
      FormatUtils.calculateDigitCount((-1L));
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, 1510L, 312);
      FormatUtils.calculateDigitCount(676);
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer1, 27, 0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, 0, 0);
      FormatUtils.writePaddedInteger((Writer) stringWriter0, 2491L, 0);
      FormatUtils.createErrorMessage("", 0);
      FormatUtils.parseTwoDigits("Invalid format: \"\"", 0);
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, 0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      stringWriter0.append((CharSequence) "Invalid format: \"\"");
      stringBuffer0.insert(0, "");
      charArrayWriter0.write("");
      FormatUtils.writePaddedInteger((Writer) charArrayWriter0, 0, 676);
      FormatUtils.appendPaddedInteger(stringBuffer0, 2143761839, (-882));
      FormatUtils.writePaddedInteger((Writer) stringWriter0, (-2), (-1783));
      FormatUtils.appendPaddedInteger(stringBuffer0, 1000L, 2);
      FormatUtils.calculateDigitCount((-1L));
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, 1510L, 312);
      FormatUtils.calculateDigitCount(676);
      FormatUtils.appendUnpaddedInteger((Appendable) stringBuffer0, 2);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, 10L, 3);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, 0, 0);
      StringWriter stringWriter1 = stringWriter0.append('6');
      FormatUtils.writePaddedInteger((Writer) stringWriter0, 2491L, 0);
      FormatUtils.createErrorMessage("", 0);
      FormatUtils.parseTwoDigits("Invalid format: \"\"", 0);
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, 0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      stringBuffer0.insert(0, "");
      charArrayWriter0.write("");
      FormatUtils.writePaddedInteger((Writer) charArrayWriter0, 0, 676);
      FormatUtils.appendPaddedInteger(stringBuffer0, (-1), (-882));
      FormatUtils.writePaddedInteger((Writer) stringWriter0, (-2), (-1783));
      FormatUtils.appendPaddedInteger(stringBuffer0, 1000L, 2);
      FormatUtils.calculateDigitCount((-1L));
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, 1510L, 312);
      FormatUtils.calculateDigitCount(676);
      FormatUtils.appendUnpaddedInteger((Appendable) stringWriter1, 28);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter();
      FormatUtils.createErrorMessage("", 34);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "Invalid format: \"\" is too short");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      StringBuffer stringBuffer1 = stringWriter1.getBuffer();
      FormatUtils.appendUnpaddedInteger(stringBuffer1, 39);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]#o6C<:3x");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "]#o6C<:3x";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "]#o6C<:3x";
      objectArray0[4] = (Object) "";
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) "]#o6C<:3x";
      Object object2 = new Object();
      objectArray0[8] = object2;
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      mockPrintWriter0.println('k');
      int int0 = (-2965);
      FormatUtils.writePaddedInteger((Writer) printWriter0, (-16L), (-2965));
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, (-16L), (-5510));
      StringBuffer stringBuffer0 = new StringBuffer("");
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (-5510));
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, (-3238L));
      // Undeclared exception!
      try { 
        FormatUtils.parseTwoDigits("]#o6C<:3x", (-2965));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      FormatUtils.calculateDigitCount(10000L);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("_ $EI3yCc0\"", false);
      FormatUtils.appendUnpaddedInteger((Appendable) mockFileWriter0, (-2119L));
      char[] charArray0 = new char[5];
      charArray0[0] = '}';
      charArray0[1] = '<';
      charArray0[2] = '}';
      charArray0[3] = '}';
      charArray0[4] = 'g';
      FormatUtils.appendPaddedInteger((Appendable) mockFileWriter0, 0L, 0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, 0);
      FormatUtils.writePaddedInteger((Writer) mockFileWriter0, (-2121), 20);
      FormatUtils.writeUnpaddedInteger((Writer) mockFileWriter0, 20);
      StringBuffer stringBuffer0 = new StringBuffer(416);
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (long) 0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      long long0 = 31L;
      try { 
        FormatUtils.writeUnpaddedInteger((Writer) pipedWriter0, 31L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = "";
      FormatUtils.createErrorMessage("", 3);
      FormatUtils.parseTwoDigits("Invalid format: \"\" is too short", 3);
      FormatUtils.createErrorMessage("Invalid format: \"\" is too short", 3);
      int int0 = (-1);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 0;
      StringBuffer stringBuffer1 = stringBuffer0.append(false);
      int int1 = 637;
      FormatUtils.appendPaddedInteger(stringBuffer0, 0, 637);
      stringBuffer1.append(stringBuffer0);
      StringWriter stringWriter0 = new StringWriter(637);
      stringWriter0.append('e');
      stringWriter0.close();
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, (long) 0);
      stringBuffer0.append(stringBuffer1);
      FormatUtils.parseTwoDigits(stringBuffer0, 637);
      stringBuffer0.append(false);
      int int2 = (-1);
      // Undeclared exception!
      try { 
        FormatUtils.parseTwoDigits(stringBuffer0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      long long0 = (-1L);
      try { 
        FormatUtils.writeUnpaddedInteger((Writer) pipedWriter0, (-1L));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Appendable appendable0 = null;
      long long0 = 1854L;
      int int0 = 0;
      // Undeclared exception!
      try { 
        FormatUtils.appendPaddedInteger((Appendable) null, 1854L, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      char char0 = '.';
      PrintWriter printWriter0 = mockPrintWriter0.append('.');
      FormatUtils.writePaddedInteger((Writer) printWriter0, 796, 796);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)82;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)127;
      try { 
        dataOutputStream0.write(byteArray0, (int) (byte)45, (int) (byte)101);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = (-641);
      // Undeclared exception!
      try { 
        FormatUtils.createErrorMessage("", (-641));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      long long0 = 3702L;
      FormatUtils.calculateDigitCount(3702L);
      int int0 = (-374);
      // Undeclared exception!
      try { 
        FormatUtils.createErrorMessage("", (-374));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Writer writer0 = null;
      // Undeclared exception!
      try { 
        FormatUtils.writeUnpaddedInteger((Writer) null, 100L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = 246;
      // Undeclared exception!
      try { 
        FormatUtils.createErrorMessage((String) null, 246);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1);
      String string0 = "<fSUg8bF'P_=dU>y83";
      FormatUtils.createErrorMessage("<fSUg8bF'P_=dU>y83", 1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "Invalid format: \"<fSUg8bF'P_=dU>y83\" is malformed at \"fSUg8bF'P_=dU>y83\"", 1, 1);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
      FormatUtils.appendUnpaddedInteger(stringBuffer1, 10000L);
      FormatUtils.appendUnpaddedInteger(stringBuffer1, (-1747L));
      int int0 = (-2415);
      // Undeclared exception!
      try { 
        FormatUtils.parseTwoDigits(stringBuffer1, (-2415));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = "u6JY2NT";
      int int0 = 0;
      FormatUtils.createErrorMessage("u6JY2NT", 0);
      StringBuffer stringBuffer0 = null;
      // Undeclared exception!
      try { 
        FormatUtils.appendUnpaddedInteger((StringBuffer) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Writer writer0 = null;
      int int0 = (-1684);
      // Undeclared exception!
      try { 
        FormatUtils.writeUnpaddedInteger((Writer) null, (-1684));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      File file0 = MockFile.createTempFile("Invalid format: \"", "Invalid format: \"");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0, charsetEncoder0);
      FormatUtils.writeUnpaddedInteger((Writer) outputStreamWriter0, (-414));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringBuffer stringBuffer0 = null;
      // Undeclared exception!
      try { 
        FormatUtils.appendUnpaddedInteger((StringBuffer) null, 1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer(0);
      stringBuffer0.codePoints();
      Object object0 = new Object();
      stringBuffer0.insert(0, ')');
      stringBuffer0.append(object0);
      stringBuffer0.append((float) 0);
      StringBuffer stringBuffer1 = stringBuffer0.appendCodePoint(0);
      String string0 = "";
      stringBuffer1.insert(0, "");
      stringBuffer1.append((long) 0);
      stringBuffer0.insert(0, false);
      stringBuffer0.insert(0, false);
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 0);
      stringBuffer1.deleteCharAt(0);
      Writer writer0 = null;
      // Undeclared exception!
      try { 
        FormatUtils.writePaddedInteger((Writer) null, (long) 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FormatUtils.createErrorMessage("", (-1));
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.flush();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('p');
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append((CharSequence) "");
      // Undeclared exception!
      try { 
        charArrayWriter2.append((CharSequence) "", (-1), 258);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("q");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "q";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      Object object0 = new Object();
      objectArray0[4] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      FormatUtils.writePaddedInteger((Writer) printWriter0, 32, (-1508));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("{HK|2c)ey%z]b-=n");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "{HK|2c)ey%z]b-=n";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "Invalid format: \"");
      objectArray0[4] = (Object) "{HK|2c)ey%z]b-=n";
      PrintWriter printWriter1 = mockPrintWriter0.format("Invalid format: \"", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter1);
      mockPrintWriter1.println(1L);
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter1, 1241);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Invalid format: \"");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      mockPrintStream0.checkError();
      dataOutputStream0.writeBoolean(false);
      PrintStream printStream0 = mockPrintStream0.append('|');
      FormatUtils.appendUnpaddedInteger((Appendable) printStream0, 1241);
      FormatUtils.appendPaddedInteger((Appendable) mockPrintStream0, 0, (-1));
      FormatUtils.calculateDigitCount(68L);
      FormatUtils.appendPaddedInteger((Appendable) printWriter0, (-484), (-1));
      FormatUtils.appendPaddedInteger((Appendable) mockPrintWriter1, 386L, (-736));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'u';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.charAt(0);
      FormatUtils.appendPaddedInteger((Appendable) charBuffer0, 0, (-1));
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      FormatUtils.writeUnpaddedInteger((Writer) charArrayWriter0, 0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FormatUtils.calculateDigitCount(39L);
      FormatUtils.calculateDigitCount(39L);
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(pipedWriter0);
      String string0 = "E]GE`6-^";
      bufferedWriter0.write("E]GE`6-^");
      String string1 = "";
      bufferedWriter0.write("");
      int int0 = (-1674);
      FormatUtils.appendPaddedInteger((Appendable) bufferedWriter0, 39L, (-1674));
      FormatUtils.calculateDigitCount(0L);
      try { 
        FormatUtils.appendUnpaddedInteger((Appendable) pipedWriter0, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("bY6zw?}<TpFUv>A/Ga");
      int int0 = 0;
      mockFileWriter0.append((CharSequence) "bY6zw?}<TpFUv>A/Ga", 0, 0);
      mockFileWriter0.append((CharSequence) "bY6zw?}<TpFUv>A/Ga");
      mockFileWriter0.flush();
      FormatUtils.appendUnpaddedInteger((Appendable) mockFileWriter0, (-812));
      MockFile mockFile0 = new MockFile("bY6zw?}<TpFUv>A/Ga");
      mockFile0.toURI();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.print(4711);
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintStream0, (-812));
      StringBuffer stringBuffer0 = null;
      // Undeclared exception!
      try { 
        FormatUtils.appendPaddedInteger((StringBuffer) null, (long) (-812), (-812));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = FormatUtils.createErrorMessage("2Zw#i.U Ejl*v#", 881);
      assertNotNull(string0);
      assertEquals("Invalid format: \"2Zw#i.U Ejl*v#\" is too short", string0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ev\"+8s;mPf]1hA{YV7");
      assertNotNull(mockPrintWriter0);
      
      mockPrintWriter0.println((long) 881);
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, (long) 881);
      StringBuffer stringBuffer0 = new StringBuffer("`%l");
      assertNotNull(stringBuffer0);
      assertEquals("`%l", stringBuffer0.toString());
      assertEquals(3, stringBuffer0.length());
      
      FormatUtils.appendPaddedInteger(stringBuffer0, 881, 881);
      assertEquals(884, stringBuffer0.length());
      assertEquals("`%lstringBuffer0.toString());
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'D';
      charArray0[1] = ':';
      charArray0[2] = 'S';
      charArray0[3] = 'v';
      charArray0[4] = 'q';
      charArray0[5] = ' ';
      charArray0[6] = 'N';
      charArray0[7] = 'S';
      mockPrintWriter0.print(charArray0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'D', ':', 'S', 'v', 'q', ' ', 'N', 'S'}, charArray0);
      
      String string1 = null;
      // Undeclared exception!
      try { 
        mockPrintWriter0.write("ev\"+8s;mPf]1hA{YV7", 0, 881);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = 10;
      StringBuffer stringBuffer0 = new StringBuffer(10);
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      StringBuffer stringBuffer1 = stringBuffer0.append("");
      assertNotNull(stringBuffer1);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer1.toString());
      assertEquals(0, stringBuffer1.length());
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'O';
      charArray0[1] = '5';
      charArray0[2] = 'k';
      StringBuffer stringBuffer2 = stringBuffer0.append(charArray0);
      assertEquals(3, charArray0.length);
      assertNotNull(stringBuffer2);
      assertArrayEquals(new char[] {'O', '5', 'k'}, charArray0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer0, stringBuffer2);
      assertSame(stringBuffer2, stringBuffer0);
      assertSame(stringBuffer2, stringBuffer1);
      assertEquals(3, stringBuffer0.length());
      assertEquals("O5k", stringBuffer0.toString());
      assertEquals("O5k", stringBuffer2.toString());
      assertEquals(3, stringBuffer2.length());
      
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (long) 10);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer0, stringBuffer2);
      assertEquals("O5k10", stringBuffer0.toString());
      assertEquals(5, stringBuffer0.length());
      
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, 0L, 10);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer0, stringBuffer2);
      assertEquals(15, stringBuffer0.length());
      assertEquals("O5k100000000000", stringBuffer0.toString());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      try { 
        FormatUtils.writePaddedInteger((Writer) pipedWriter0, 2985L, 10);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = 13421772;
      String string0 = FormatUtils.createErrorMessage("=x)x*|8[I8cz!&v", 13421772);
      assertNotNull(string0);
      assertEquals("Invalid format: \"=x)x*|8[I8cz!&v\" is too short", string0);
      
      int int1 = 0;
      int int2 = FormatUtils.parseTwoDigits("Invalid format: \"=x)x*|8[I8cz!&v\" is too short", 0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(312, int2);
      
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = FormatUtils.calculateDigitCount(781L);
      assertEquals(3, int0);
      
      MockFileWriter mockFileWriter0 = null;
      try {
        mockFileWriter0 = new MockFileWriter((FileDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = FormatUtils.calculateDigitCount((-773L));
      assertEquals(4, int0);
      
      StringBuffer stringBuffer0 = new StringBuffer("*");
      assertNotNull(stringBuffer0);
      assertEquals(1, stringBuffer0.length());
      assertEquals("*", stringBuffer0.toString());
      
      StringBuffer stringBuffer1 = stringBuffer0.insert(0, (CharSequence) "*");
      assertNotNull(stringBuffer1);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertEquals("**", stringBuffer0.toString());
      assertEquals(2, stringBuffer0.length());
      assertEquals(2, stringBuffer1.length());
      assertEquals("**", stringBuffer1.toString());
      
      // Undeclared exception!
      try { 
        stringBuffer0.insert(0, (CharSequence) "*", 1, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 1, end 0, s.length() 1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(3, charArray0.length);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'$', 'N', 'I'}, charArray0);
      assertEquals(0, charBuffer0.position());
      assertEquals(3, charBuffer0.limit());
      assertEquals(3, charBuffer0.length());
      assertEquals(3, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("$NI", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(3, charBuffer0.remaining());
      
      stringWriter0.write("");
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      assertEquals(3, charArray0.length);
      assertNotNull(stringWriter1);
      assertArrayEquals(new char[] {'$', 'N', 'I'}, charArray0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("", stringWriter0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(3, charBuffer0.limit());
      assertEquals(3, charBuffer0.length());
      assertEquals(3, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("$NI", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(3, charBuffer0.remaining());
      assertEquals("", stringWriter1.toString());
      
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      assertEquals(3, charArray0.length);
      assertNotNull(stringBuffer0);
      assertArrayEquals(new char[] {'$', 'N', 'I'}, charArray0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("", stringWriter0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(3, charBuffer0.limit());
      assertEquals(3, charBuffer0.length());
      assertEquals(3, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("$NI", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(3, charBuffer0.remaining());
      assertEquals("", stringWriter1.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      FormatUtils.appendPaddedInteger(stringBuffer0, 0L, 0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'$', 'N', 'I'}, charArray0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("0", stringWriter0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(3, charBuffer0.limit());
      assertEquals(3, charBuffer0.length());
      assertEquals(3, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("$NI", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(3, charBuffer0.remaining());
      assertEquals("0", stringWriter1.toString());
      assertEquals("0", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.length());
      
      CharBuffer charBuffer1 = CharBuffer.allocate(13421772);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(13421772, charBuffer1.limit());
      assertTrue(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(13421772, charBuffer1.remaining());
      assertEquals(13421772, charBuffer1.length());
      assertEquals(13421772, charBuffer1.capacity());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isDirect());
      
      // Undeclared exception!
      try { 
        FormatUtils.parseTwoDigits(charBuffer1, 13421772);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      FormatUtils.appendPaddedInteger(stringBuffer0, (-1L), (-1));
      assertEquals(2, stringBuffer0.length());
      assertEquals("-1", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append('3');
      assertNotNull(stringWriter1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("3", stringWriter0.toString());
      assertEquals("3", stringWriter1.toString());
      
      stringWriter1.write("i3(NQ1lNu(+sew,", 0, 0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("3", stringWriter0.toString());
      assertEquals("3", stringWriter1.toString());
      
      stringWriter1.write("i3(NQ1lNu(+sew,", 0, 0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("3", stringWriter0.toString());
      assertEquals("3", stringWriter1.toString());
      
      FormatUtils.writePaddedInteger((Writer) stringWriter1, 0, 34);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("30000000000000000000000000000000000", stringWriter0.toString());
      assertEquals("30000000000000000000000000000000000", stringWriter1.toString());
      
      FormatUtils.appendUnpaddedInteger((Appendable) stringWriter0, (-1980L));
      assertSame(stringWriter0, stringWriter1);
      assertEquals("30000000000000000000000000000000000-1980", stringWriter0.toString());
      
      // Undeclared exception!
      try { 
        FormatUtils.parseTwoDigits("i3(NQ1lNu(+sew,", 2216);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      FormatUtils.appendPaddedInteger((Appendable) charArrayWriter0, 0L, 0);
      assertEquals("0", charArrayWriter0.toString());
      assertEquals(1, charArrayWriter0.size());
      
      FormatUtils.appendUnpaddedInteger((Appendable) charArrayWriter0, 777);
      assertEquals(4, charArrayWriter0.size());
      assertEquals("0777", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Appendable appendable0 = null;
      int int0 = 2698;
      // Undeclared exception!
      try { 
        FormatUtils.appendPaddedInteger((Appendable) null, 2698, 2698);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = FormatUtils.calculateDigitCount((-3470L));
      assertEquals(5, int0);
      
      Appendable appendable0 = null;
      // Undeclared exception!
      try { 
        FormatUtils.appendUnpaddedInteger((Appendable) null, (-3470L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      int int0 = 0;
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      assertEquals(1, charArray0.length);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {' '}, charArray0);
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("", charBuffer0.toString());
      
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      assertEquals(1, charArray0.length);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      assertArrayEquals(new char[] {' '}, charArray0);
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(0, charBuffer1.position());
      assertTrue(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.capacity());
      assertEquals("", charBuffer1.toString());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.limit());
      
      // Undeclared exception!
      try { 
        FormatUtils.appendUnpaddedInteger((Appendable) charBuffer1, 0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringBuffer stringBuffer0 = null;
      int int0 = 2167;
      // Undeclared exception!
      try { 
        FormatUtils.appendPaddedInteger((StringBuffer) null, 2167, 2167);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.appendPaddedInteger((StringBuffer) null, 1879L, (-1265));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("QfT9B;H[JX");
      assertNotNull(stringBuffer0);
      assertEquals(10, stringBuffer0.length());
      assertEquals("QfT9B;H[JX", stringBuffer0.toString());
      
      FormatUtils.appendPaddedInteger(stringBuffer0, 4, 4);
      assertEquals("QfT9B;H[JX0004", stringBuffer0.toString());
      assertEquals(14, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("\" is malformed at \"");
      assertNotNull(stringBuffer0);
      assertEquals("\" is malformed at \"", stringBuffer0.toString());
      assertEquals(19, stringBuffer0.length());
      
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 0L);
      assertEquals("\" is malformed at \"0", stringBuffer0.toString());
      assertEquals(20, stringBuffer0.length());
      
      FormatUtils.appendUnpaddedInteger((Appendable) stringBuffer0, 0L);
      assertEquals("\" is malformed at \"00", stringBuffer0.toString());
      assertEquals(21, stringBuffer0.length());
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("\" is malformed at \"", "\" is malformed at \"");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // \" is malformed at \"
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = FormatUtils.calculateDigitCount((-3690L));
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = FormatUtils.calculateDigitCount(1000L);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = 1339;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1339);
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintWriter0, (long) 1339);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintWriter0, (-997L));
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, (long) 1339, 1339);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, 1339);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("wdoA|Q%oB;Y;-S<^)r");
      assertNotNull(stringBuffer0);
      assertEquals(18, stringBuffer0.length());
      assertEquals("wdoA|Q%oB;Y;-S<^)r", stringBuffer0.toString());
      
      StringBuffer stringBuffer1 = stringBuffer0.append(1994.72);
      assertNotNull(stringBuffer1);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertEquals(25, stringBuffer0.length());
      assertEquals("wdoA|Q%oB;Y;-S<^)r1994.72", stringBuffer0.toString());
      assertEquals(25, stringBuffer1.length());
      assertEquals("wdoA|Q%oB;Y;-S<^)r1994.72", stringBuffer1.toString());
      
      FormatUtils.appendUnpaddedInteger((Appendable) stringBuffer0, 642L);
      assertSame(stringBuffer0, stringBuffer1);
      assertEquals("wdoA|Q%oB;Y;-S<^)r1994.72642", stringBuffer0.toString());
      assertEquals(28, stringBuffer0.length());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      int int0 = (-1791);
      FormatUtils.writePaddedInteger((Writer) charArrayWriter0, (-1791), (-1791));
      assertEquals(5, charArrayWriter0.size());
      assertEquals("-1791", charArrayWriter0.toString());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) stringBuffer0, (-1791), 10000);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1791
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = (-2510);
      // Undeclared exception!
      try { 
        FormatUtils.writePaddedInteger((Writer) null, (-12L), (-2510));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      try { 
        FormatUtils.writePaddedInteger((Writer) pipedWriter0, 4, (-1635));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      FormatUtils.appendUnpaddedInteger((Appendable) stringBuffer0, 0L);
      assertEquals("0", stringWriter0.toString());
      assertEquals(1, stringBuffer0.length());
      assertEquals("0", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (-2244));
      assertEquals(5, stringBuffer0.length());
      assertEquals("-2244", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertNotNull(stringBuffer1);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer1.length());
      assertEquals("", stringBuffer1.toString());
      
      // Undeclared exception!
      try { 
        FormatUtils.parseTwoDigits(stringBuffer1, 2019);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("");
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      // Undeclared exception!
      try { 
        FormatUtils.parseTwoDigits(stringBuffer0, 1233);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("wjtq&I('PI+;(");
      assertNotNull(mockPrintWriter0);
      
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, 9223372036854775803L, (-3));
      StringBuffer stringBuffer0 = new StringBuffer("wjtq&I('PI+;(");
      assertNotNull(stringBuffer0);
      assertEquals("wjtq&I('PI+;(", stringBuffer0.toString());
      assertEquals(14, stringBuffer0.length());
      
      FormatUtils.appendPaddedInteger(stringBuffer0, 44, 1336);
      assertEquals(1350, stringBuffer0.length());
      
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, 9223372036854775803L, 44);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(485);
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (long) 485);
      FormatUtils.appendPaddedInteger(stringBuffer0, 9223372036854775784L, 485);
      assertEquals(488, stringBuffer0.length());
      assertEquals("48500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009223372036854775784", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(",k/(Ozh3qPO9UeLw&hL");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(",k/(Ozh3qPO9UeLw&hL");
      mockPrintWriter0.checkError();
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, 2126221443, (-575));
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, (-575));
      FormatUtils.createErrorMessage(",k/(Ozh3qPO9UeLw&hL", 1267);
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, (-575));
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintWriter0, Integer.MIN_VALUE);
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintStream0, 2126221443);
      FormatUtils.appendPaddedInteger((Appendable) mockPrintWriter0, 10L, (-1));
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, (-474));
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FormatUtils.calculateDigitCount((-9223372036854775808L));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FormatUtils.createErrorMessage("", 15);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      stringBuffer0.chars();
      FormatUtils.appendPaddedInteger(stringBuffer0, 15, 3597);
      FormatUtils.appendPaddedInteger((Appendable) mockPrintStream0, (-9223372036854775808L), 10000);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, 20, 20);
      objectOutputStream0.flush();
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintStream0, (-9223372036854775798L));
      FormatUtils.appendPaddedInteger(stringBuffer0, (-9223372036854775808L), 20);
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, (-9223372036854775808L), 20);
      assertEquals(10055, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FormatUtils.calculateDigitCount(9223372036854775800L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      FormatUtils.writeUnpaddedInteger((Writer) charArrayWriter0, 10);
      assertEquals(2, charArrayWriter0.size());
      assertEquals("10", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MockFile mockFile0 = new MockFile("VJ", ".xOx@zNmA<T]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('Z');
      PrintWriter printWriter1 = mockPrintWriter0.append('Z');
      mockFile0.getCanonicalPath();
      mockFile0.delete();
      FormatUtils.writeUnpaddedInteger((Writer) printWriter0, (-3793L));
      FormatUtils.writeUnpaddedInteger((Writer) printWriter1, (long) 4);
      mockFile0.mkdirs();
      FormatUtils.calculateDigitCount((-3473L));
      FormatUtils.createErrorMessage("/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/joda-time/VJ/.xOx@zNmA<T]", 4);
      FormatUtils.writePaddedInteger((Writer) printWriter0, 1000L, 4);
      FormatUtils.createErrorMessage("Invalid format: \"/media/ISSTA_USER/extradrive1/toga-eval-...\" is malformed at \"ia/ISSTA_USER/extradrive1/toga-eval-...\"", 1);
      FormatUtils.writePaddedInteger((Writer) printWriter0, (-9223372036854775764L), 1197);
      assertSame(mockPrintWriter0, printWriter0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StringBuffer stringBuffer0 = null;
      int int0 = 18;
      // Undeclared exception!
      try { 
        FormatUtils.appendPaddedInteger((StringBuffer) null, (-9223372036854775808L), 18);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FormatUtils.calculateDigitCount((-9223372036854775791L));
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      FormatUtils.writeUnpaddedInteger((Writer) charArrayWriter0, Integer.MIN_VALUE);
      charArrayWriter0.append('C');
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('Y');
      charArrayWriter1.append('C');
      FormatUtils.writeUnpaddedInteger((Writer) charArrayWriter1, (-9223372036854775791L));
      FormatUtils.writePaddedInteger((Writer) charArrayWriter1, 25L, (-1));
      FormatUtils.writePaddedInteger((Writer) charArrayWriter1, (long) Integer.MIN_VALUE, 51);
      FormatUtils.writePaddedInteger((Writer) charArrayWriter0, (long) 20, 51);
      FormatUtils.appendPaddedInteger((Appendable) charArrayWriter1, Integer.MIN_VALUE, 1101);
      assertEquals(1241, charArrayWriter1.size());
      assertEquals(1241, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FormatUtils.calculateDigitCount(100L);
      MockFile mockFile0 = new MockFile("", ".xOx@zNmA<T]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('Z');
      mockPrintWriter0.println();
      FormatUtils.appendPaddedInteger((Appendable) printWriter0, 3, 3);
      mockFile0.toURI();
      FormatUtils.writeUnpaddedInteger((Writer) printWriter0, (long) 3);
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, (long) 'Z');
      FormatUtils.createErrorMessage(".xOx@zNmA<T]", 43);
      FormatUtils.calculateDigitCount((-3473L));
      FormatUtils.appendPaddedInteger((Appendable) printWriter0, 1764L, 22);
      StringBuffer stringBuffer0 = new StringBuffer();
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (long) 22);
      FormatUtils.appendPaddedInteger((Appendable) printWriter0, (-150), (-150));
      assertSame(mockPrintWriter0, printWriter0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(10000);
      stringBuffer0.append((float) 10000);
      FormatUtils.appendPaddedInteger(stringBuffer0, (long) 10000, 4);
      assertEquals(12, stringBuffer0.length());
      assertEquals("10000.010000", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)10;
      byteArray0[3] = (byte)10;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)10;
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "CG");
      FormatUtils.writePaddedInteger((Writer) stringWriter0, (long) (byte)10, (int) (byte)10);
      stringWriter0.write("CG");
      // Undeclared exception!
      try { 
        FormatUtils.appendUnpaddedInteger((StringBuffer) null, (int) (byte)10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[6] = (byte) (-96);
      StringWriter stringWriter0 = new StringWriter();
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, 7L);
      FormatUtils.writePaddedInteger((Writer) stringWriter0, 147L, 25);
      FormatUtils.appendPaddedInteger((Appendable) stringWriter0, (long) (byte)0, (int) (byte)0);
      StringWriter stringWriter1 = new StringWriter();
      FormatUtils.writePaddedInteger((Writer) stringWriter0, Integer.MIN_VALUE, (int) (byte)0);
      assertEquals("700000000000000000000001470-2147483648", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('7');
      FormatUtils.writePaddedInteger((Writer) stringWriter0, 2491L, 0);
      FormatUtils.createErrorMessage("&<;&u`z?h/A8", 0);
      FormatUtils.parseTwoDigits("Invalid format: \"&<;&u`z?h/A8\"", 0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      charArrayWriter0.write("&<;&u`z?h/A8");
      FormatUtils.writePaddedInteger((Writer) charArrayWriter0, 0, (int) '7');
      FormatUtils.writePaddedInteger((Writer) stringWriter0, (-2), (-1783));
      FormatUtils.calculateDigitCount((-1L));
      FormatUtils.appendUnpaddedInteger((Appendable) stringWriter1, (-11));
      assertEquals("72491-2-11", stringWriter1.toString());
      
      FormatUtils.appendUnpaddedInteger((Appendable) charArrayWriter0, 0);
      int int0 = FormatUtils.calculateDigitCount((-11));
      assertEquals(3, int0);
  }
}
