/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 05 19:49:57 GMT 2022
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTimeFieldType;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Years;
import org.joda.time.chrono.JulianChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PeriodType_ESTest extends PeriodType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      PeriodType periodType1 = PeriodType.standard();
      DurationFieldType durationFieldType0 = periodType0.getFieldType(0);
      boolean boolean0 = periodType1.isSupported(durationFieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      PeriodType periodType1 = periodType0.withYearsRemoved();
      assertEquals(0, periodType1.size());
      assertEquals("YearsNoYears", periodType1.getName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      PeriodType periodType1 = periodType0.withWeeksRemoved();
      assertEquals("Months", periodType1.getName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      PeriodType periodType1 = periodType0.withHoursRemoved();
      PeriodType periodType2 = periodType1.withSecondsRemoved();
      assertEquals("Hours", periodType0.getName());
      assertEquals(0, periodType2.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Months months0 = Months.ONE;
      PeriodType periodType0 = months0.getPeriodType();
      PeriodType periodType1 = periodType0.withSecondsRemoved();
      assertEquals("Months", periodType1.getName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      PeriodType periodType1 = periodType0.withMonthsRemoved();
      assertEquals(0, periodType1.size());
      assertEquals("MonthsNoMonths", periodType1.getName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      PeriodType periodType1 = periodType0.withMillisRemoved();
      PeriodType periodType2 = periodType1.withWeeksRemoved();
      PeriodType periodType3 = periodType2.withMinutesRemoved();
      assertEquals(0, periodType3.size());
      assertEquals("MillisNoMillis", periodType3.getName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      PeriodType periodType1 = periodType0.withHoursRemoved();
      assertEquals("Millis", periodType1.getName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      PeriodType periodType1 = periodType0.withDaysRemoved();
      assertEquals("DaysNoDays", periodType1.getName());
      assertEquals(0, periodType1.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      PeriodType periodType1 = periodType0.withHoursRemoved();
      int int0 = periodType1.size();
      assertEquals("HoursNoHours", periodType1.getName());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      periodType0.size();
      assertEquals("Millis", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      Period period0 = Period.millis(0);
      int[] intArray0 = new int[5];
      periodType0.setIndexedField(period0, 0, intArray0, 0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDay();
      assertNotNull(periodType0);
      
      Months months0 = Months.FOUR;
      DurationFieldType durationFieldType0 = months0.getFieldType();
      int int0 = periodType0.indexOf(durationFieldType0);
      assertEquals(1, int0);
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(3, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      int[] intArray0 = new int[5];
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, intArray0);
      String string0 = periodType0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      Period period0 = Period.seconds(3);
      int int0 = periodType0.getIndexedField(period0, 3);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Years years0 = Years.years((-1));
      PeriodType periodType0 = years0.getPeriodType();
      int int0 = periodType0.getIndexedField(years0, 0);
      assertEquals("Years", periodType0.getName());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      assertNotNull(periodType0);
      
      periodType0.getFieldType(0);
      assertEquals("Minutes", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[6];
      PeriodType periodType0 = new PeriodType("h$8", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        periodType0.withYearsRemoved();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      int[] intArray0 = new int[1];
      PeriodType periodType0 = new PeriodType("H87g/lz~IhpO?d<", durationFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        periodType0.withYearsRemoved();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      int[] intArray0 = new int[9];
      intArray0[0] = (-1428);
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        periodType0.withYearsRemoved();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      PeriodType periodType0 = new PeriodType("9^Q)DnX}^d2.w[8U", durationFieldTypeArray0, (int[]) null);
      // Undeclared exception!
      try { 
        periodType0.withWeeksRemoved();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      int[] intArray0 = new int[2];
      PeriodType periodType0 = new PeriodType("NoMillis", durationFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        periodType0.withWeeksRemoved();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[2];
      PeriodType periodType0 = new PeriodType("org.joda.time.field.PreciseDurationDateTimeField", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        periodType0.withMonthsRemoved();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      int[] intArray0 = new int[6];
      PeriodType periodType0 = new PeriodType("The offset cannot be zero", durationFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        periodType0.withMonthsRemoved();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      int[] intArray0 = new int[4];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        periodType0.withMonthsRemoved();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int[] intArray0 = new int[8];
      PeriodType periodType0 = new PeriodType("", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        periodType0.withMinutesRemoved();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      int[] intArray0 = new int[9];
      PeriodType periodType0 = new PeriodType("NoWeeks", durationFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        periodType0.withMinutesRemoved();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int[] intArray0 = new int[4];
      PeriodType periodType0 = new PeriodType("DateTimeZone.setDefault", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        periodType0.withMinutesRemoved();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      // Undeclared exception!
      try { 
        periodType0.withMillisRemoved();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      int[] intArray0 = new int[1];
      PeriodType periodType0 = new PeriodType("YY", durationFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        periodType0.withMillisRemoved();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int[] intArray0 = new int[8];
      PeriodType periodType0 = new PeriodType("G(o{", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        periodType0.withHoursRemoved();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      int[] intArray0 = new int[9];
      PeriodType periodType0 = new PeriodType("Minutes", durationFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        periodType0.withHoursRemoved();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      int[] intArray0 = new int[6];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        periodType0.withHoursRemoved();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      PeriodType periodType0 = new PeriodType("NoHours", durationFieldTypeArray0, (int[]) null);
      // Undeclared exception!
      try { 
        periodType0.withDaysRemoved();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      int[] intArray0 = new int[5];
      PeriodType periodType0 = new PeriodType("Time", durationFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        periodType0.withDaysRemoved();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[7];
      int[] intArray0 = new int[3];
      PeriodType periodType0 = new PeriodType("ALo+wG6'", durationFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        periodType0.withDaysRemoved();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      MonthDay monthDay0 = MonthDay.now();
      Days days0 = Days.daysBetween((ReadablePartial) monthDay0, (ReadablePartial) monthDay0);
      // Undeclared exception!
      try { 
        periodType0.setIndexedField(days0, 0, (int[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      Days days0 = Days.ONE;
      MutablePeriod mutablePeriod0 = days0.toMutablePeriod();
      Period period0 = mutablePeriod0.toPeriod();
      // Undeclared exception!
      try { 
        periodType0.setIndexedField(period0, 286, (int[]) null, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 286
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int[] intArray0 = new int[3];
      PeriodType periodType0 = new PeriodType("Field is not supported", (DurationFieldType[]) null, intArray0);
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKYEARS_TYPE;
      // Undeclared exception!
      try { 
        periodType0.indexOf(durationFieldType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int[] intArray0 = new int[2];
      PeriodType periodType0 = new PeriodType("VkY57.0\"p *`I~HY", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        periodType0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDay();
      // Undeclared exception!
      try { 
        periodType0.getIndexedField((ReadablePeriod) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      Minutes minutes0 = Minutes.MAX_VALUE;
      int[] intArray0 = new int[9];
      intArray0[7] = (-1177);
      PeriodType periodType0 = new PeriodType("li8M+P", durationFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        periodType0.getIndexedField(minutes0, 7);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -1177
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      LocalTime localTime0 = new LocalTime(4585L);
      Months months0 = Months.monthsBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      // Undeclared exception!
      try { 
        periodType0.getIndexedField(months0, 3731);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3731
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int[] intArray0 = new int[3];
      PeriodType periodType0 = new PeriodType("", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        periodType0.getFieldType((-2316));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PeriodType periodType0 = PeriodType.time();
      MutablePeriod mutablePeriod0 = new MutablePeriod((-243L), periodType0);
      // Undeclared exception!
      try { 
        periodType0.addIndexedField(mutablePeriod0, 6, (int[]) null, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Days days0 = Days.FOUR;
      PeriodType periodType0 = days0.getPeriodType();
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        periodType0.addIndexedField(days0, (-107), intArray0, (-2001));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -107
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      assertNotNull(periodType0);
      
      periodType0.hashCode();
      assertEquals("Millis", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.weeks();
      assertNotNull(periodType1);
      
      periodType1.equals(periodType0);
      assertEquals("Weeks", periodType1.getName());
      assertEquals("Minutes", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      assertNotNull(periodType0);
      
      boolean boolean0 = periodType0.equals(periodType0);
      assertEquals("Days", periodType0.getName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      Minutes minutes0 = Minutes.MAX_VALUE;
      int[] intArray0 = new int[9];
      PeriodType periodType0 = new PeriodType("li8M+P", durationFieldTypeArray0, intArray0);
      int int0 = periodType0.getIndexedField(minutes0, 7);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      assertNotNull(periodType0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      int int0 = periodType0.indexOf(durationFieldType0);
      assertEquals(2, periodType0.size());
      assertEquals(0, int0);
      assertEquals("YearDay", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      int int0 = periodType0.indexOf(durationFieldType0);
      assertEquals("Hours", periodType0.getName());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PeriodType.millis();
      PeriodType periodType0 = PeriodType.millis();
      assertNotNull(periodType0);
      assertEquals("Millis", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PeriodType.seconds();
      PeriodType periodType0 = PeriodType.seconds();
      assertNotNull(periodType0);
      assertEquals("Seconds", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PeriodType.minutes();
      PeriodType periodType0 = PeriodType.minutes();
      assertEquals("Minutes", periodType0.getName());
      assertNotNull(periodType0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Days days0 = Days.THREE;
      Hours hours0 = days0.toStandardHours();
      hours0.getPeriodType();
      PeriodType periodType0 = PeriodType.hours();
      assertEquals("Hours", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PeriodType.days();
      PeriodType periodType0 = PeriodType.days();
      assertNotNull(periodType0);
      assertEquals("Days", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PeriodType.weeks();
      PeriodType periodType0 = PeriodType.weeks();
      assertNotNull(periodType0);
      assertEquals("Weeks", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Months months0 = Months.ONE;
      months0.getPeriodType();
      PeriodType periodType0 = PeriodType.months();
      assertEquals("Months", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PeriodType.years();
      PeriodType periodType0 = PeriodType.years();
      assertEquals("Years", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PeriodType.time();
      PeriodType periodType0 = PeriodType.time();
      assertEquals(4, periodType0.size());
      assertEquals("Time", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PeriodType.dayTime();
      PeriodType periodType0 = PeriodType.dayTime();
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      PeriodType.yearDay();
      PeriodType periodType0 = PeriodType.yearDay();
      assertEquals(2, periodType0.size());
      assertEquals("YearDay", periodType0.getName());
      assertNotNull(periodType0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PeriodType.yearDayTime();
      PeriodType periodType0 = PeriodType.yearDayTime();
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertNotNull(periodType0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      PeriodType.yearWeekDay();
      PeriodType periodType0 = PeriodType.yearWeekDay();
      assertEquals("YearWeekDay", periodType0.getName());
      assertEquals(3, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      PeriodType.yearWeekDayTime();
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      PeriodType.yearMonthDay();
      PeriodType periodType0 = PeriodType.yearMonthDay();
      assertNotNull(periodType0);
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(3, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      PeriodType.yearMonthDayTime();
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertEquals(7, periodType0.size());
      assertNotNull(periodType0);
      assertEquals("YearMonthDayTime", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      PeriodType.standard();
      PeriodType periodType0 = PeriodType.standard();
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertNotNull(periodType0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int[] intArray0 = new int[0];
      PeriodType periodType0 = new PeriodType("d{Va?", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        periodType0.withSecondsRemoved();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      int[] intArray0 = new int[4];
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        periodType0.withWeeksRemoved();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      // Undeclared exception!
      try { 
        periodType0.getFieldType(1061);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1061
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      int[] intArray0 = new int[6];
      PeriodType periodType0 = new PeriodType("l*&xHc:=SI7Ta:S@^A", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        periodType0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      PeriodType periodType0 = PeriodType.dayTime();
      assertNotNull(periodType0);
      
      String string0 = periodType0.getName();
      assertEquals(5, periodType0.size());
      assertEquals("DayTime", string0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      PeriodType periodType1 = periodType0.withDaysRemoved();
      assertEquals("YearWeekDayTimeNoDays", periodType1.getName());
      assertEquals(6, periodType1.size());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withMinutesRemoved();
      assertEquals("Hours", periodType1.getName());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      Integer integer0 = new Integer((-1068));
      boolean boolean0 = periodType0.equals(integer0);
      assertEquals(3, periodType0.size());
      assertFalse(boolean0);
      assertEquals("YearWeekDay", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      PeriodType periodType1 = periodType0.withYearsRemoved();
      assertEquals(2, periodType1.size());
      assertEquals("YearWeekDayNoYears", periodType1.getName());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      PeriodType periodType1 = periodType0.withMonthsRemoved();
      assertEquals("YearWeekDay", periodType1.getName());
      assertEquals(3, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
      int[] intArray0 = new int[8];
      // Undeclared exception!
      try { 
        periodType0.addIndexedField(mutablePeriod0, 6, intArray0, 6);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      PeriodType periodType0 = PeriodType.time();
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((-286L));
      int[] intArray0 = new int[8];
      boolean boolean0 = periodType0.addIndexedField(mutablePeriod0, 4, intArray0, 8);
      assertArrayEquals(new int[] {8, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      Hours hours0 = Hours.TWO;
      int[] intArray0 = new int[6];
      // Undeclared exception!
      try { 
        periodType0.setIndexedField(hours0, 0, intArray0, (-1540));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      assertNotNull(periodType0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.YEARS_TYPE;
      boolean boolean0 = periodType0.isSupported(durationFieldType0);
      assertEquals(3, periodType0.size());
      assertTrue(boolean0);
      assertEquals("YearWeekDay", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      assertNotNull(periodType0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      boolean boolean0 = periodType0.isSupported(durationFieldType0);
      assertEquals("Months", periodType0.getName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      DurationFieldType durationFieldType0 = DurationFieldType.CENTURIES_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      DurationFieldType durationFieldType1 = DurationFieldType.HOURS_TYPE;
      durationFieldTypeArray0[1] = durationFieldType1;
      durationFieldTypeArray0[2] = durationFieldTypeArray0[1];
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PeriodType does not support fields: [centuries, hours]
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      durationFieldTypeArray0[0] = durationFieldType0;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
      durationFieldTypeArray0[1] = durationFieldType0;
      durationFieldTypeArray0[2] = durationFieldType1;
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PeriodType does not support fields: [days]
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      DurationFieldType durationFieldType0 = DurationFieldType.MINUTES_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      durationFieldTypeArray0[2] = durationFieldType0;
      DurationFieldType durationFieldType1 = DurationFieldType.months();
      durationFieldTypeArray0[3] = durationFieldType1;
      durationFieldTypeArray0[4] = durationFieldType0;
      durationFieldTypeArray0[5] = durationFieldType0;
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PeriodType does not support fields: [minutes, minutes, minutes, minutes]
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      DurationFieldType durationFieldType0 = DurationFieldType.YEARS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      PeriodType periodType0 = PeriodType.forFields(durationFieldTypeArray0);
      assertEquals(1, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      durationFieldTypeArray0[0] = durationFieldType0;
      MutablePeriod mutablePeriod0 = new MutablePeriod(1251L, 0);
      DurationFieldType durationFieldType1 = mutablePeriod0.getFieldType(0);
      durationFieldTypeArray0[1] = durationFieldType1;
      PeriodType.forFields(durationFieldTypeArray0);
      PeriodType periodType0 = PeriodType.forFields(durationFieldTypeArray0);
      assertEquals(2, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain null
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not be null or empty
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      // Undeclared exception!
      try { 
        PeriodType.forFields((DurationFieldType[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not be null or empty
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      assertNotNull(periodType0);
      
      Duration duration0 = Duration.standardSeconds(1251L);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      Period period0 = duration0.toPeriod(periodType0, (Chronology) julianChronology0);
      Days days0 = period0.toStandardDays();
      int[] intArray0 = new int[11];
      boolean boolean0 = periodType0.addIndexedField(days0, 5, intArray0, 0);
      assertEquals("Years", periodType0.getName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      PeriodType periodType1 = periodType0.withMillisRemoved();
      assertEquals("YearWeekDayTimeNoMillis", periodType1.getName());
      assertEquals(6, periodType1.size());
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertNotNull(periodType0);
      
      String string0 = periodType0.toString();
      assertEquals(7, periodType0.size());
      assertEquals("PeriodType[YearWeekDayTime]", string0);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.MILLIS_TYPE;
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[7];
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      durationFieldTypeArray0[2] = durationFieldType0;
      durationFieldTypeArray0[3] = durationFieldType0;
      durationFieldTypeArray0[4] = durationFieldType0;
      durationFieldTypeArray0[5] = durationFieldType0;
      durationFieldTypeArray0[6] = durationFieldType0;
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PeriodType does not support fields: [millis, millis, millis, millis, millis, millis]
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
}
