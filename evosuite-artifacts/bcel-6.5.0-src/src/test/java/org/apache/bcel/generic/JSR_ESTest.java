/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 22:35:44 GMT 2022
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import org.apache.bcel.generic.BranchHandle;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.DNEG;
import org.apache.bcel.generic.DUP2;
import org.apache.bcel.generic.I2D;
import org.apache.bcel.generic.I2L;
import org.apache.bcel.generic.IF_ICMPGT;
import org.apache.bcel.generic.IF_ICMPLT;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.JSR;
import org.apache.bcel.verifier.structurals.ExecutionVisitor;
import org.apache.bcel.verifier.structurals.InstConstraintVisitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSR_ESTest extends JSR_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      DUP2 dUP2_0 = (DUP2)InstructionConstants.DUP2;
      InstructionHandle instructionHandle0 = new InstructionHandle(dUP2_0);
      IF_ICMPGT iF_ICMPGT0 = new IF_ICMPGT(instructionHandle0);
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) iF_ICMPGT0);
      JSR jSR0 = new JSR(branchHandle0);
      int int0 = jSR0.updatePosition(168, 32767);
      assertEquals((short)201, jSR0.getOpcode());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("6Z:3%58_7bfOe");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      InstructionList instructionList0 = new InstructionList();
      IF_ICMPLT iF_ICMPLT0 = new IF_ICMPLT();
      BranchHandle branchHandle0 = instructionList0.append((BranchInstruction) iF_ICMPLT0);
      JSR jSR0 = new JSR(branchHandle0);
      jSR0.setOpcode((short)58);
      jSR0.dump(dataOutputStream0);
      assertEquals(5L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSR jSR0 = new JSR();
      ExecutionVisitor executionVisitor0 = new ExecutionVisitor();
      // Undeclared exception!
      try { 
        jSR0.accept(executionVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.ExecutionVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      IF_ICMPLT iF_ICMPLT0 = new IF_ICMPLT();
      BranchHandle branchHandle0 = instructionList0.append((BranchInstruction) iF_ICMPLT0);
      JSR jSR0 = new JSR(branchHandle0);
      jSR0.updatePosition(2095, (-2629));
      jSR0.setLength(32767);
      int int0 = jSR0.updatePosition(66, 32527);
      assertEquals((short)201, jSR0.getOpcode());
      assertEquals((-32762), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      I2L i2L0 = new I2L();
      InstructionList instructionList0 = new InstructionList(i2L0);
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) i2L0);
      JSR jSR0 = new JSR(instructionHandle0);
      // Undeclared exception!
      try { 
        jSR0.updatePosition((-1517), 5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid branch target position offset for jsr[168](3):-1:  -1: i2l[133](1)
         //
         verifyException("org.apache.bcel.generic.BranchInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DNEG dNEG0 = (DNEG)InstructionConstants.DNEG;
      InstructionList instructionList0 = new InstructionList(dNEG0);
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      instructionHandle0.dispose();
      JSR jSR0 = new JSR(instructionHandle0);
      // Undeclared exception!
      try { 
        jSR0.updatePosition(32763, 32767);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSR jSR0 = new JSR();
      // Undeclared exception!
      try { 
        jSR0.updatePosition(117, 117);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      I2D i2D0 = new I2D();
      InstructionHandle instructionHandle0 = InstructionHandle.getInstructionHandle(i2D0);
      JSR jSR0 = new JSR(instructionHandle0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        jSR0.dump(dataOutputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid branch target position offset for jsr[168](3):-1:  -1: i2d[135](1)
         //
         verifyException("org.apache.bcel.generic.BranchInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      byte[] byteArray0 = new byte[1];
      InstructionList instructionList1 = new InstructionList(byteArray0);
      InstructionHandle instructionHandle0 = instructionList0.append(instructionList1);
      JSR jSR0 = new JSR(instructionHandle0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        jSR0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSR jSR0 = new JSR();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(filterOutputStream0, 1847);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      // Undeclared exception!
      try { 
        jSR0.dump(dataOutputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      IF_ICMPLT iF_ICMPLT0 = new IF_ICMPLT();
      BranchHandle branchHandle0 = instructionList0.append((BranchInstruction) iF_ICMPLT0);
      JSR jSR0 = new JSR(branchHandle0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(filterOutputStream0);
      try { 
        jSR0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      File file0 = MockFile.createTempFile("6Z:3%58.7@f$e", "6Z:3%58.7@f$e");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      InstructionList instructionList0 = new InstructionList();
      IF_ICMPLT iF_ICMPLT0 = new IF_ICMPLT();
      BranchHandle branchHandle0 = instructionList0.append((BranchInstruction) iF_ICMPLT0);
      JSR jSR0 = new JSR(branchHandle0);
      jSR0.updatePosition(2095, (-2629));
      jSR0.updatePosition(66, 32527);
      jSR0.dump(dataOutputStream0);
      assertEquals(5, jSR0.getLength());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSR jSR0 = new JSR();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      // Undeclared exception!
      try { 
        jSR0.accept(instConstraintVisitor0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }
}
