/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 22:14:10 GMT 2022
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.bcel.generic.BasicType;
import org.apache.bcel.generic.Type;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BasicType_ESTest extends BasicType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BasicType basicType0 = Type.INT;
      BasicType basicType1 = Type.SHORT;
      boolean boolean0 = basicType1.equals(basicType0);
      assertFalse(boolean0);
      assertFalse(basicType0.equals((Object)basicType1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BasicType basicType0 = null;
      try {
        basicType0 = new BasicType((byte) (-10));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -10
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BasicType basicType0 = BasicType.getType((byte)10);
      assertEquals("I", basicType0.getSignature());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BasicType basicType0 = BasicType.getType((byte)12);
      assertEquals("V", basicType0.getSignature());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BasicType basicType0 = Type.CHAR;
      boolean boolean0 = basicType0.equals(basicType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        BasicType.getType((byte)87);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: 87
         //
         verifyException("org.apache.bcel.generic.BasicType", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BasicType basicType0 = BasicType.getType((byte)11);
      BasicType basicType1 = Type.BOOLEAN;
      boolean boolean0 = basicType0.equals(basicType1);
      assertEquals("J", basicType0.getSignature());
      assertFalse(boolean0);
      assertFalse(basicType1.equals((Object)basicType0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BasicType basicType0 = BasicType.getType((byte)9);
      assertEquals((byte)9, basicType0.getType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BasicType basicType0 = BasicType.getType((byte)8);
      assertEquals("B", basicType0.getSignature());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BasicType basicType0 = BasicType.getType((byte)7);
      assertEquals("D", basicType0.getSignature());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BasicType basicType0 = BasicType.getType((byte)6);
      assertEquals("F", basicType0.getSignature());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BasicType basicType0 = BasicType.getType((byte)5);
      Object object0 = new Object();
      boolean boolean0 = basicType0.equals(object0);
      assertEquals((byte)5, basicType0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BasicType basicType0 = BasicType.getType((byte)4);
      String string0 = basicType0.toString();
      assertEquals("boolean", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BasicType basicType0 = null;
      try {
        basicType0 = new BasicType((byte)15);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: 15
         //
         verifyException("org.apache.bcel.generic.BasicType", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BasicType basicType0 = new BasicType((byte)5);
      assertEquals((byte)5, basicType0.getType());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BasicType basicType0 = null;
      try {
        basicType0 = new BasicType((byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: 0
         //
         verifyException("org.apache.bcel.generic.BasicType", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BasicType basicType0 = Type.CHAR;
      basicType0.hashCode();
  }
}
