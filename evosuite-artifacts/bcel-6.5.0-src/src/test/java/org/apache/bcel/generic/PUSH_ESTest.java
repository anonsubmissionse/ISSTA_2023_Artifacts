/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 22:04:58 GMT 2022
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.Type;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PUSH_ESTest extends PUSH_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PUSH pUSH0 = null;
      try {
        pUSH0 = new PUSH((ConstantPoolGen) null, "org.apache.bcel.verifier.exc.CodeConstraintException");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.PUSH", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      PUSH pUSH0 = null;
      try {
        pUSH0 = new PUSH((ConstantPoolGen) null, (Number) float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.PUSH", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = null;
      try {
        pUSH0 = new PUSH(constantPoolGen0, (Character) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.PUSH", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PUSH pUSH0 = null;
      try {
        pUSH0 = new PUSH((ConstantPoolGen) null, (Boolean) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.PUSH", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PUSH pUSH0 = null;
      try {
        pUSH0 = new PUSH((ConstantPoolGen) null, (-1113.0F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.PUSH", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PUSH pUSH0 = null;
      try {
        pUSH0 = new PUSH((ConstantPoolGen) null, (-3095.2563546572837));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.PUSH", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, (-3061.577859741));
      assertEquals(3, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, 0L);
      assertEquals(1, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, 1477.0F);
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PUSH pUSH0 = new PUSH((ConstantPoolGen) null, true);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 214);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 117);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 3);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PUSH pUSH0 = null;
      try {
        pUSH0 = new PUSH((ConstantPoolGen) null, (-2146782446));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.PUSH", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = null;
      try {
        pUSH0 = new PUSH(constantPoolGen0, (Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // What's this: null
         //
         verifyException("org.apache.bcel.generic.PUSH", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, (ObjectType) null);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ObjectType objectType0 = Type.CLASS;
      PUSH pUSH0 = null;
      try {
        pUSH0 = new PUSH((ConstantPoolGen) null, objectType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.PUSH", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, (String) null);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 1.0);
      assertEquals(1, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PUSH pUSH0 = new PUSH((ConstantPoolGen) null, 0.0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Double double0 = new Double((-956.2276087));
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) double0);
      assertEquals(3, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PUSH pUSH0 = null;
      try {
        pUSH0 = new PUSH((ConstantPoolGen) null, (-1L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.PUSH", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Long long0 = new Long(0L);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) long0);
      assertEquals(1, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 1L);
      assertEquals(1, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 2.0F);
      assertEquals(1, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 1.0F);
      assertEquals(1, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 0.0F);
      assertEquals(1, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Float float0 = new Float(238.593F);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) float0);
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, false);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Integer integer0 = new Integer(2147030180);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) integer0);
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Byte byte0 = new Byte((byte)1);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) byte0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Short short0 = new Short((short) (-30748));
      PUSH pUSH0 = new PUSH((ConstantPoolGen) null, (Number) short0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Boolean boolean0 = Boolean.TRUE;
      PUSH pUSH0 = new PUSH(constantPoolGen0, boolean0);
      Instruction instruction0 = pUSH0.getInstruction();
      assertEquals((short)4, instruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Boolean boolean0 = Boolean.TRUE;
      PUSH pUSH0 = new PUSH(constantPoolGen0, boolean0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      assertEquals(1, instructionList0.getLength());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Boolean boolean0 = Boolean.TRUE;
      PUSH pUSH0 = new PUSH(constantPoolGen0, boolean0);
      String string0 = pUSH0.toString();
      assertEquals("iconst_1[4](1) (PUSH)", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Character character0 = Character.valueOf('F');
      PUSH pUSH0 = new PUSH(constantPoolGen0, character0);
  }
}
