/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 22:00:30 GMT 2022
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.RuntimeInvisibleAnnotations;
import org.apache.bcel.classfile.Signature;
import org.apache.bcel.util.ClassLoaderRepository;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.LruCacheClassPathRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Signature_ESTest extends Signature_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Signature signature0 = new Signature(2080, (-2660), 2080, (ConstantPool) null);
      assertNotNull(signature0);
      assertEquals(2080, signature0.getSignatureIndex());
      assertEquals(2080, signature0.getNameIndex());
      assertEquals((-2660), signature0.getLength());
      assertEquals((byte)10, signature0.getTag());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("<ZmKpEYeE{");
      assertNotNull(mockFileOutputStream0);
      
      Signature signature1 = (Signature)signature0.copy((ConstantPool) null);
      assertNotNull(signature1);
      assertFalse(signature1.equals((Object)signature0));
      assertEquals(2080, signature0.getSignatureIndex());
      assertEquals(2080, signature0.getNameIndex());
      assertEquals((-2660), signature0.getLength());
      assertEquals((byte)10, signature0.getTag());
      assertEquals(2080, signature1.getSignatureIndex());
      assertEquals(2080, signature1.getNameIndex());
      assertEquals((-2660), signature1.getLength());
      assertEquals((byte)10, signature1.getTag());
      assertNotSame(signature0, signature1);
      assertNotSame(signature1, signature0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      assertNotNull(dataOutputStream0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)76;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/bcel-6.5.0-src");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean0);
      
      byteArray0[1] = (byte)0;
      mockFileOutputStream0.write(2080);
      byteArray0[2] = (byte)0;
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      try { 
        signature0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = Signature.isFormalParameterList("<Illegal signature: ");
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Signature.translate("l");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal signature: l read l
         //
         verifyException("org.apache.bcel.classfile.Signature", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "8a9]E>";
      boolean boolean0 = Signature.isFormalParameterList("8a9]E>");
      assertFalse(boolean0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Signature signature0 = null;
      try {
        signature0 = new Signature(6, (-3735), dataInputStream0, (ConstantPool) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = Signature.isActualParameterList(">)L'^[&S>");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)62;
      byteArray0[1] = (byte)47;
      byteArray0[6] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)47, (byte)0, (byte)0, (byte)62, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      
      boolean boolean1 = byteArrayInputStream0.markSupported();
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {(byte)0, (byte)47, (byte)0, (byte)0, (byte)62, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertEquals(7, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)47, (byte)0, (byte)0, (byte)62, (byte)0, (byte)0}, byteArray0);
      assertNotNull(dataInputStream0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      assertEquals(0, constantPool0.getLength());
      
      Signature signature0 = new Signature((byte)0, (byte)0, (byte)0, constantPool0);
      assertNotNull(signature0);
      assertEquals(0, constantArray0.length);
      assertEquals(0, constantPool0.getLength());
      assertEquals((byte)10, signature0.getTag());
      assertEquals(0, signature0.getNameIndex());
      assertEquals(0, signature0.getSignatureIndex());
      assertEquals(0, signature0.getLength());
      
      Signature signature1 = new Signature(signature0);
      assertNotNull(signature1);
      assertEquals(0, constantArray0.length);
      assertFalse(signature1.equals((Object)signature0));
      assertEquals(0, constantPool0.getLength());
      assertEquals((byte)10, signature0.getTag());
      assertEquals(0, signature0.getNameIndex());
      assertEquals(0, signature0.getSignatureIndex());
      assertEquals(0, signature0.getLength());
      assertEquals(0, signature1.getLength());
      assertEquals(0, signature1.getSignatureIndex());
      assertEquals(0, signature1.getNameIndex());
      assertEquals((byte)10, signature1.getTag());
      
      Signature signature2 = (Signature)signature0.copy(constantPool0);
      assertNotNull(signature2);
      assertEquals(0, constantArray0.length);
      assertFalse(signature2.equals((Object)signature1));
      assertFalse(signature2.equals((Object)signature0));
      assertFalse(signature0.equals((Object)signature1));
      assertEquals(0, signature2.getSignatureIndex());
      assertEquals((byte)10, signature2.getTag());
      assertEquals(0, signature2.getNameIndex());
      assertEquals(0, signature2.getLength());
      assertEquals(0, constantPool0.getLength());
      assertEquals((byte)10, signature0.getTag());
      assertEquals(0, signature0.getNameIndex());
      assertEquals(0, signature0.getSignatureIndex());
      assertEquals(0, signature0.getLength());
      assertNotSame(signature2, signature1);
      assertNotSame(signature2, signature0);
      assertNotSame(signature0, signature2);
      assertNotSame(signature0, signature1);
      
      // Undeclared exception!
      try { 
        signature1.toString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 0. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("<ZmKpEYeE{");
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "]MDC[CM`G(|4|dSl");
      assertTrue(boolean0);
      
      int int0 = (-2660);
      ConstantPool constantPool0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("<ZmKpEYeE{");
      assertNotNull(mockFileOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      assertNotNull(dataOutputStream0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)0;
      mockFileOutputStream0.write(byteArray0);
      assertArrayEquals(new byte[] {(byte)76, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      mockFileOutputStream0.release();
      byteArray0[2] = (byte)0;
      dataOutputStream0.write(byteArray0);
      assertArrayEquals(new byte[] {(byte)76, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      Signature signature0 = new Signature((byte)0, 99, (byte)0, (ConstantPool) null);
      assertNotNull(signature0);
      assertEquals(99, signature0.getLength());
      assertEquals(0, signature0.getSignatureIndex());
      assertEquals(0, signature0.getNameIndex());
      assertEquals((byte)10, signature0.getTag());
      
      int int1 = signature0.getSignatureIndex();
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(99, signature0.getLength());
      assertEquals(0, signature0.getSignatureIndex());
      assertEquals(0, signature0.getNameIndex());
      assertEquals((byte)10, signature0.getTag());
      
      // Undeclared exception!
      try { 
        Signature.translate("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal signature:  no ident, reaching EOF
         //
         verifyException("org.apache.bcel.classfile.Signature", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "Ljava/lang/Object";
      // Undeclared exception!
      try { 
        Signature.translate("Ljava/lang/Object");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal signature: Ljava/lang/Object read t
         //
         verifyException("org.apache.bcel.classfile.Signature", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong((-3137L));
      assertNotNull(constantLong0);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals((-3137L), constantLong0.getBytes());
      
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      assertNotNull(constantLong1);
      assertTrue(constantLong1.equals((Object)constantLong0));
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals((-3137L), constantLong0.getBytes());
      assertEquals((byte)5, constantLong1.getTag());
      assertEquals((-3137L), constantLong1.getBytes());
      
      constantArray0[0] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantArray0.length);
      assertEquals(1, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertEquals(1, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      Signature signature0 = new Signature(0, (-4777), 503, constantPool1);
      assertNotNull(signature0);
      assertEquals(1, constantArray0.length);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertEquals(0, signature0.getNameIndex());
      assertEquals((byte)10, signature0.getTag());
      assertEquals(503, signature0.getSignatureIndex());
      assertEquals((-4777), signature0.getLength());
      
      Signature signature1 = (Signature)signature0.copy(constantPool0);
      assertNotNull(signature1);
      assertEquals(1, constantArray0.length);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(signature1.equals((Object)signature0));
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertEquals(0, signature0.getNameIndex());
      assertEquals((byte)10, signature0.getTag());
      assertEquals(503, signature0.getSignatureIndex());
      assertEquals((-4777), signature0.getLength());
      assertEquals(0, signature1.getNameIndex());
      assertEquals((byte)10, signature1.getTag());
      assertEquals((-4777), signature1.getLength());
      assertEquals(503, signature1.getSignatureIndex());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(signature0, signature1);
      assertNotSame(signature1, signature0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 0;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)95;
      byteArray0[4] = (byte)0;
      byte byte0 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)47;
      byte byte1 = (byte)0;
      byteArray0[6] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)95, (byte)0, (byte)0, (byte)0, (byte)47, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)95, (byte)0, (byte)0, (byte)0, (byte)47, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(dataInputStream0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      Constant[] constantArray0 = new Constant[0];
      dataInputStream0.readFully(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)95, (byte)0, (byte)0, (byte)0, (byte)47, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      assertEquals(0, constantPool0.getLength());
      
      Signature signature0 = null;
      try {
        signature0 = new Signature(0, 0, dataInputStream0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "T0PXAzjYPO(g+\\i\\";
      // Undeclared exception!
      try { 
        Signature.translate("T0PXAzjYPO(g+i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal signature: T0PXAzjYPO(g+i read g
         //
         verifyException("org.apache.bcel.classfile.Signature", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = Signature.isActualParameterList("monitorenter");
      assertFalse(boolean0);
      
      String string0 = ")M@AV6DipZ+u";
      String string1 = Signature.translate(")M@AV6DipZ+u");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = Signature.isActualParameterList("monitorenter");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = Signature.isFormalParameterList("monitorenter");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = 46;
      int int1 = (-57557325);
      // Undeclared exception!
      try { 
        MockFile.createTempFile("0", ")M@AV6DipZ+u");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Signature signature0 = new Signature(2080, (-2660), 2080, (ConstantPool) null);
      assertNotNull(signature0);
      assertEquals(2080, signature0.getSignatureIndex());
      assertEquals((byte)10, signature0.getTag());
      assertEquals((-2660), signature0.getLength());
      assertEquals(2080, signature0.getNameIndex());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("<ZmKpEYeE{");
      assertNotNull(mockFileOutputStream0);
      
      Signature signature1 = (Signature)signature0.copy((ConstantPool) null);
      assertNotNull(signature1);
      assertFalse(signature1.equals((Object)signature0));
      assertEquals(2080, signature0.getSignatureIndex());
      assertEquals((byte)10, signature0.getTag());
      assertEquals((-2660), signature0.getLength());
      assertEquals(2080, signature0.getNameIndex());
      assertEquals(2080, signature1.getSignatureIndex());
      assertEquals(2080, signature1.getNameIndex());
      assertEquals((byte)10, signature1.getTag());
      assertEquals((-2660), signature1.getLength());
      assertNotSame(signature0, signature1);
      assertNotSame(signature1, signature0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      assertNotNull(dataOutputStream0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)76;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/bcel-6.5.0-src");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean0);
      
      byteArray0[1] = (byte)0;
      mockFileOutputStream0.write(2080);
      byteArray0[2] = (byte)0;
      dataOutputStream0.write(byteArray0);
      assertArrayEquals(new byte[] {(byte)76, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      signature0.dump(dataOutputStream0);
      assertFalse(signature0.equals((Object)signature1));
      assertEquals(2080, signature0.getSignatureIndex());
      assertEquals((byte)10, signature0.getTag());
      assertEquals((-2660), signature0.getLength());
      assertEquals(2080, signature0.getNameIndex());
      assertNotSame(signature0, signature1);
      
      String string0 = "A";
      // Undeclared exception!
      try { 
        Signature.translate("A");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal signature: A read A
         //
         verifyException("org.apache.bcel.classfile.Signature", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Signature signature0 = new Signature((-2628), 1707, 1707, (ConstantPool) null);
      assertNotNull(signature0);
      assertEquals((-2628), signature0.getNameIndex());
      assertEquals((byte)10, signature0.getTag());
      assertEquals(1707, signature0.getSignatureIndex());
      assertEquals(1707, signature0.getLength());
      
      Signature signature1 = new Signature(signature0);
      assertNotNull(signature1);
      assertFalse(signature1.equals((Object)signature0));
      assertEquals((-2628), signature0.getNameIndex());
      assertEquals((byte)10, signature0.getTag());
      assertEquals(1707, signature0.getSignatureIndex());
      assertEquals(1707, signature0.getLength());
      assertEquals((byte)10, signature1.getTag());
      assertEquals((-2628), signature1.getNameIndex());
      assertEquals(1707, signature1.getLength());
      assertEquals(1707, signature1.getSignatureIndex());
      
      Signature signature2 = new Signature(signature1);
      assertNotNull(signature2);
      assertFalse(signature0.equals((Object)signature1));
      assertFalse(signature1.equals((Object)signature0));
      assertFalse(signature2.equals((Object)signature0));
      assertFalse(signature2.equals((Object)signature1));
      assertEquals((-2628), signature0.getNameIndex());
      assertEquals((byte)10, signature0.getTag());
      assertEquals(1707, signature0.getSignatureIndex());
      assertEquals(1707, signature0.getLength());
      assertEquals((byte)10, signature1.getTag());
      assertEquals((-2628), signature1.getNameIndex());
      assertEquals(1707, signature1.getLength());
      assertEquals(1707, signature1.getSignatureIndex());
      assertEquals((-2628), signature2.getNameIndex());
      assertEquals((byte)10, signature2.getTag());
      assertEquals(1707, signature2.getSignatureIndex());
      assertEquals(1707, signature2.getLength());
      
      boolean boolean0 = Signature.isActualParameterList("Lldc");
      assertFalse(boolean0);
      
      boolean boolean1 = Signature.isFormalParameterList("Illegal signature: ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Signature signature3 = (Signature)signature0.copy((ConstantPool) null);
      assertNotNull(signature3);
      assertFalse(signature0.equals((Object)signature1));
      assertFalse(signature0.equals((Object)signature2));
      assertFalse(signature3.equals((Object)signature0));
      assertFalse(signature3.equals((Object)signature1));
      assertFalse(signature3.equals((Object)signature2));
      assertEquals((-2628), signature0.getNameIndex());
      assertEquals((byte)10, signature0.getTag());
      assertEquals(1707, signature0.getSignatureIndex());
      assertEquals(1707, signature0.getLength());
      assertEquals(1707, signature3.getLength());
      assertEquals((-2628), signature3.getNameIndex());
      assertEquals((byte)10, signature3.getTag());
      assertEquals(1707, signature3.getSignatureIndex());
      assertNotSame(signature0, signature1);
      assertNotSame(signature0, signature3);
      assertNotSame(signature0, signature2);
      assertNotSame(signature3, signature0);
      assertNotSame(signature3, signature1);
      assertNotSame(signature3, signature2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Signature signature0 = new Signature((-3145), (-3145), 0, (ConstantPool) null);
      assertNotNull(signature0);
      assertEquals((-3145), signature0.getNameIndex());
      assertEquals(0, signature0.getSignatureIndex());
      assertEquals((-3145), signature0.getLength());
      assertEquals((byte)10, signature0.getTag());
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(862);
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      assertNotNull(dataOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      signature0.dump(dataOutputStream0);
      assertEquals((-3145), signature0.getNameIndex());
      assertEquals(0, signature0.getSignatureIndex());
      assertEquals((-3145), signature0.getLength());
      assertEquals((byte)10, signature0.getTag());
      assertEquals(8, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000", byteArrayOutputStream0.toString());
      
      // Undeclared exception!
      try { 
        signature0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Signature", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "<Lorg.apache.bcel.classfile.AccessFlags";
      // Undeclared exception!
      try { 
        Signature.translate("<Lorg.apache.bcel.classfile.AccessFlags");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal signature: <Lorg.apache.bcel.classfile.AccessFlags read .
         //
         verifyException("org.apache.bcel.classfile.Signature", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        Signature.translate("J:3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal signature: J:3 read 3
         //
         verifyException("org.apache.bcel.classfile.Signature", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "Ljava/lang/Object";
      boolean boolean1 = Signature.isActualParameterList("Ljava/lang/Object");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = 2368;
      DataInput dataInput0 = null;
      Constant[] constantArray0 = new Constant[4];
      ConstantFieldref constantFieldref0 = null;
      try {
        constantFieldref0 = new ConstantFieldref((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantCP", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      assertEquals(0, constantPool0.getLength());
      
      Signature signature0 = new Signature(67, 0, 0, constantPool0);
      assertNotNull(signature0);
      assertEquals(0, constantArray0.length);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, signature0.getSignatureIndex());
      assertEquals((byte)10, signature0.getTag());
      assertEquals(67, signature0.getNameIndex());
      assertEquals(0, signature0.getLength());
      
      Signature signature1 = new Signature(signature0);
      assertNotNull(signature1);
      assertEquals(0, constantArray0.length);
      assertFalse(signature1.equals((Object)signature0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, signature0.getSignatureIndex());
      assertEquals((byte)10, signature0.getTag());
      assertEquals(67, signature0.getNameIndex());
      assertEquals(0, signature0.getLength());
      assertEquals(0, signature1.getSignatureIndex());
      assertEquals(0, signature1.getLength());
      assertEquals(67, signature1.getNameIndex());
      assertEquals((byte)10, signature1.getTag());
      
      // Undeclared exception!
      try { 
        signature1.getSignature();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 0. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Signature.isFormalParameterList((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "<[F{";
      boolean boolean0 = Signature.isFormalParameterList("<[F{");
      assertFalse(boolean0);
      
      int int0 = 236;
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("kTCo");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Signature signature0 = new Signature(344, (-2138), (-2138), (ConstantPool) null);
      assertNotNull(signature0);
      assertEquals((byte)10, signature0.getTag());
      assertEquals(344, signature0.getNameIndex());
      assertEquals((-2138), signature0.getLength());
      assertEquals((-2138), signature0.getSignatureIndex());
      
      int int0 = signature0.getSignatureIndex();
      assertEquals((-2138), int0);
      assertEquals((byte)10, signature0.getTag());
      assertEquals(344, signature0.getNameIndex());
      assertEquals((-2138), signature0.getLength());
      assertEquals((-2138), signature0.getSignatureIndex());
      
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      assertNotNull(classPath0);
      
      LruCacheClassPathRepository lruCacheClassPathRepository0 = new LruCacheClassPathRepository(classPath0, 59);
      assertNotNull(lruCacheClassPathRepository0);
      
      JavaClass javaClass0 = lruCacheClassPathRepository0.findClass("");
      assertNull(javaClass0);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      assertNotNull(descendingVisitor0);
      
      signature0.accept(descendingVisitor0);
      assertEquals((byte)10, signature0.getTag());
      assertEquals(344, signature0.getNameIndex());
      assertEquals((-2138), signature0.getLength());
      assertEquals((-2138), signature0.getSignatureIndex());
      
      // Undeclared exception!
      try { 
        signature0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Signature", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Signature.isActualParameterList((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Signature signature0 = new Signature(2044, (-2660), 2044, (ConstantPool) null);
      assertNotNull(signature0);
      assertEquals((byte)10, signature0.getTag());
      assertEquals(2044, signature0.getNameIndex());
      assertEquals(2044, signature0.getSignatureIndex());
      assertEquals((-2660), signature0.getLength());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("<ZmKpEYeE{");
      assertNotNull(mockFileOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      assertNotNull(dataOutputStream0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)0;
      mockFileOutputStream0.write(2044);
      byteArray0[2] = (byte)0;
      dataOutputStream0.write(byteArray0);
      assertArrayEquals(new byte[] {(byte)76, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      signature0.dump(dataOutputStream0);
      assertEquals((byte)10, signature0.getTag());
      assertEquals(2044, signature0.getNameIndex());
      assertEquals(2044, signature0.getSignatureIndex());
      assertEquals((-2660), signature0.getLength());
      
      signature0.setNameIndex(767);
      assertEquals((byte)10, signature0.getTag());
      assertEquals(767, signature0.getNameIndex());
      assertEquals(2044, signature0.getSignatureIndex());
      assertEquals((-2660), signature0.getLength());
      
      // Undeclared exception!
      try { 
        Signature.translate("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal signature:  no ident, reaching EOF
         //
         verifyException("org.apache.bcel.classfile.Signature", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = Signature.isFormalParameterList("ldc_w");
      assertFalse(boolean0);
      
      boolean boolean1 = Signature.isActualParameterList("ldc_w");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      assertEquals(0, constantPool0.getLength());
      
      Signature signature0 = new Signature(244, 92, 85, constantPool0);
      assertNotNull(signature0);
      assertEquals(0, constantArray0.length);
      assertEquals(0, constantPool0.getLength());
      assertEquals(244, signature0.getNameIndex());
      assertEquals(92, signature0.getLength());
      assertEquals(85, signature0.getSignatureIndex());
      assertEquals((byte)10, signature0.getTag());
      
      int int0 = signature0.getSignatureIndex();
      assertEquals(85, int0);
      assertEquals(0, constantArray0.length);
      assertEquals(0, constantPool0.getLength());
      assertEquals(244, signature0.getNameIndex());
      assertEquals(92, signature0.getLength());
      assertEquals(85, signature0.getSignatureIndex());
      assertEquals((byte)10, signature0.getTag());
      
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      assertNotNull(dataOutputStream0);
      
      // Undeclared exception!
      try { 
        signature0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        Signature.translate(" fiels:\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal signature:  fiels:
         //  read  
         //
         verifyException("org.apache.bcel.classfile.Signature", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      boolean boolean0 = Signature.isActualParameterList("");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Signature.translate((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Signature$MyByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        Signature.translate("T0=XAzPYPO(g+i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal signature: T0=XAzPYPO(g+i read =
         //
         verifyException("org.apache.bcel.classfile.Signature", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "kFeay";
      // Undeclared exception!
      try { 
        Signature.translate("kFeay");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal signature: kFeay read k
         //
         verifyException("org.apache.bcel.classfile.Signature", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      boolean boolean0 = Signature.isActualParameterList(">)L'^[&S>");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)95, (byte)0, (byte)0, (byte)62, (byte)47, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)95, (byte)0, (byte)0, (byte)62, (byte)47, (byte)0}, byteArray0);
      assertNotNull(dataInputStream0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      assertEquals(0, constantPool0.getLength());
      
      Signature signature0 = new Signature(0, 0, dataInputStream0, constantPool0);
      assertArrayEquals(new byte[] {(byte)0, (byte)95, (byte)0, (byte)0, (byte)62, (byte)47, (byte)0}, byteArray0);
      assertNotNull(signature0);
      assertEquals(7, byteArray0.length);
      assertEquals(0, constantArray0.length);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, signature0.getLength());
      assertEquals((byte)10, signature0.getTag());
      assertEquals(0, signature0.getNameIndex());
      assertEquals(95, signature0.getSignatureIndex());
      
      Signature signature1 = new Signature(signature0);
      assertArrayEquals(new byte[] {(byte)0, (byte)95, (byte)0, (byte)0, (byte)62, (byte)47, (byte)0}, byteArray0);
      assertNotNull(signature1);
      assertEquals(7, byteArray0.length);
      assertEquals(0, constantArray0.length);
      assertFalse(signature1.equals((Object)signature0));
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, signature0.getLength());
      assertEquals((byte)10, signature0.getTag());
      assertEquals(0, signature0.getNameIndex());
      assertEquals(95, signature0.getSignatureIndex());
      assertEquals(0, signature1.getNameIndex());
      assertEquals(0, signature1.getLength());
      assertEquals(95, signature1.getSignatureIndex());
      assertEquals((byte)10, signature1.getTag());
      
      // Undeclared exception!
      try { 
        signature1.toString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 95. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertNotNull(javaClass0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isPrivate());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isVolatile());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals(33, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isEnum());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertFalse(javaClass0.isProtected());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isFinal());
      assertEquals(33, javaClass0.getModifiers());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertTrue(javaClass0.isSuper());
      
      Class<RuntimeInvisibleAnnotations> class1 = RuntimeInvisibleAnnotations.class;
      JavaClass javaClass1 = classLoaderRepository0.loadClass(class1);
      assertNotNull(javaClass1);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertFalse(javaClass1.equals((Object)javaClass0));
      assertFalse(javaClass1.isNative());
      assertEquals(52, javaClass1.getMajor());
      assertFalse(javaClass1.isPrivate());
      assertTrue(javaClass1.isClass());
      assertFalse(javaClass1.isSynthetic());
      assertFalse(javaClass1.isAnnotation());
      assertFalse(javaClass1.isInterface());
      assertFalse(javaClass1.isStatic());
      assertEquals(7, javaClass1.getClassNameIndex());
      assertEquals("org.apache.bcel.classfile", javaClass1.getPackageName());
      assertFalse(javaClass1.isFinal());
      assertEquals(33, javaClass1.getModifiers());
      assertEquals((byte)2, javaClass1.getSource());
      assertFalse(javaClass1.isProtected());
      assertEquals("RuntimeInvisibleAnnotations.java", javaClass1.getSourceFileName());
      assertEquals(8, javaClass1.getSuperclassNameIndex());
      assertFalse(javaClass1.isEnum());
      assertTrue(javaClass1.isSuper());
      assertFalse(javaClass1.isVarArgs());
      assertFalse(javaClass1.isStrictfp());
      assertFalse(javaClass1.isAbstract());
      assertFalse(javaClass1.isTransient());
      assertEquals("org.apache.bcel.classfile.Annotations", javaClass1.getSuperclassName());
      assertTrue(javaClass1.isPublic());
      assertTrue(javaClass1.isSynchronized());
      assertEquals(0, javaClass1.getMinor());
      assertEquals(33, javaClass1.getAccessFlags());
      assertFalse(javaClass1.isVolatile());
      assertEquals("org.apache.bcel.classfile.RuntimeInvisibleAnnotations", javaClass1.getFileName());
      assertEquals("org.apache.bcel.classfile.RuntimeInvisibleAnnotations", javaClass1.getClassName());
      assertNotSame(javaClass1, javaClass0);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass1, emptyVisitor0);
      assertNotNull(descendingVisitor0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertFalse(javaClass1.equals((Object)javaClass0));
      assertFalse(javaClass1.isNative());
      assertEquals(52, javaClass1.getMajor());
      assertFalse(javaClass1.isPrivate());
      assertTrue(javaClass1.isClass());
      assertFalse(javaClass1.isSynthetic());
      assertFalse(javaClass1.isAnnotation());
      assertFalse(javaClass1.isInterface());
      assertFalse(javaClass1.isStatic());
      assertEquals(7, javaClass1.getClassNameIndex());
      assertEquals("org.apache.bcel.classfile", javaClass1.getPackageName());
      assertFalse(javaClass1.isFinal());
      assertEquals(33, javaClass1.getModifiers());
      assertEquals((byte)2, javaClass1.getSource());
      assertFalse(javaClass1.isProtected());
      assertEquals("RuntimeInvisibleAnnotations.java", javaClass1.getSourceFileName());
      assertEquals(8, javaClass1.getSuperclassNameIndex());
      assertFalse(javaClass1.isEnum());
      assertTrue(javaClass1.isSuper());
      assertFalse(javaClass1.isVarArgs());
      assertFalse(javaClass1.isStrictfp());
      assertFalse(javaClass1.isAbstract());
      assertFalse(javaClass1.isTransient());
      assertEquals("org.apache.bcel.classfile.Annotations", javaClass1.getSuperclassName());
      assertTrue(javaClass1.isPublic());
      assertTrue(javaClass1.isSynchronized());
      assertEquals(0, javaClass1.getMinor());
      assertEquals(33, javaClass1.getAccessFlags());
      assertFalse(javaClass1.isVolatile());
      assertEquals("org.apache.bcel.classfile.RuntimeInvisibleAnnotations", javaClass1.getFileName());
      assertEquals("org.apache.bcel.classfile.RuntimeInvisibleAnnotations", javaClass1.getClassName());
      
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(4, constantArray0.length);
      assertEquals(4, constantPool0.getLength());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Signature signature0 = null;
      try {
        signature0 = new Signature((Signature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Signature", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        Signature.translate(",Mic%nfl+ D4hhHfd#Y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal signature: ,Mic%nfl+ D4hhHfd#Y read ,
         //
         verifyException("org.apache.bcel.classfile.Signature", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "java.lang.Byte";
      boolean boolean0 = Signature.isFormalParameterList("java.lang.Byte");
      assertFalse(boolean0);
      
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      assertNotNull(classPath0);
      
      InputStream inputStream0 = classPath0.getResourceAsStream("java.lang.Byte");
      assertNull(inputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      assertEquals(0, constantPool0.getLength());
      
      Signature signature0 = null;
      try {
        signature0 = new Signature(549, (-3703), dataInputStream0, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        Signature.translate("Illegal signature: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal signature: Illegal signature:  read I
         //
         verifyException("org.apache.bcel.classfile.Signature", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = Signature.isActualParameterList("sP#N96j9~QH);n/-^");
      assertFalse(boolean0);
      
      boolean boolean1 = Signature.isFormalParameterList("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      Signature signature0 = new Signature(235, 235, 235, constantPool0);
      assertNotNull(signature0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(235, signature0.getLength());
      assertEquals(235, signature0.getSignatureIndex());
      assertEquals((byte)10, signature0.getTag());
      assertEquals(235, signature0.getNameIndex());
      
      signature0.setSignatureIndex(235);
      assertEquals(0, constantPool0.getLength());
      assertEquals(235, signature0.getLength());
      assertEquals(235, signature0.getSignatureIndex());
      assertEquals((byte)10, signature0.getTag());
      assertEquals(235, signature0.getNameIndex());
      
      Signature signature1 = (Signature)signature0.copy(constantPool0);
      assertNotNull(signature1);
      assertFalse(signature1.equals((Object)signature0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(235, signature0.getLength());
      assertEquals(235, signature0.getSignatureIndex());
      assertEquals((byte)10, signature0.getTag());
      assertEquals(235, signature0.getNameIndex());
      assertEquals(235, signature1.getNameIndex());
      assertEquals(235, signature1.getLength());
      assertEquals(235, signature1.getSignatureIndex());
      assertEquals((byte)10, signature1.getTag());
      assertNotSame(signature0, signature1);
      assertNotSame(signature1, signature0);
      
      Signature signature2 = new Signature(signature0);
      assertNotNull(signature2);
      assertFalse(signature0.equals((Object)signature1));
      assertFalse(signature2.equals((Object)signature0));
      assertFalse(signature2.equals((Object)signature1));
      assertEquals(0, constantPool0.getLength());
      assertEquals(235, signature0.getLength());
      assertEquals(235, signature0.getSignatureIndex());
      assertEquals((byte)10, signature0.getTag());
      assertEquals(235, signature0.getNameIndex());
      assertEquals(235, signature2.getLength());
      assertEquals(235, signature2.getNameIndex());
      assertEquals((byte)10, signature2.getTag());
      assertEquals(235, signature2.getSignatureIndex());
      
      signature2.setLength(22);
      assertFalse(signature0.equals((Object)signature1));
      assertFalse(signature0.equals((Object)signature2));
      assertFalse(signature2.equals((Object)signature0));
      assertFalse(signature2.equals((Object)signature1));
      assertEquals(0, constantPool0.getLength());
      assertEquals(235, signature0.getLength());
      assertEquals(235, signature0.getSignatureIndex());
      assertEquals((byte)10, signature0.getTag());
      assertEquals(235, signature0.getNameIndex());
      assertEquals(235, signature2.getNameIndex());
      assertEquals(22, signature2.getLength());
      assertEquals((byte)10, signature2.getTag());
      assertEquals(235, signature2.getSignatureIndex());
      assertNotSame(signature0, signature1);
      assertNotSame(signature0, signature2);
      assertNotSame(signature2, signature0);
      assertNotSame(signature2, signature1);
      
      // Undeclared exception!
      try { 
        signature2.getSignature();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Signature signature0 = new Signature(28, 62, 2162, (ConstantPool) null);
      assertNotNull(signature0);
      assertEquals(62, signature0.getLength());
      assertEquals(2162, signature0.getSignatureIndex());
      assertEquals(28, signature0.getNameIndex());
      assertEquals((byte)10, signature0.getTag());
      
      Signature signature1 = new Signature(signature0);
      assertNotNull(signature1);
      assertFalse(signature1.equals((Object)signature0));
      assertEquals(62, signature0.getLength());
      assertEquals(2162, signature0.getSignatureIndex());
      assertEquals(28, signature0.getNameIndex());
      assertEquals((byte)10, signature0.getTag());
      assertEquals((byte)10, signature1.getTag());
      assertEquals(28, signature1.getNameIndex());
      assertEquals(62, signature1.getLength());
      assertEquals(2162, signature1.getSignatureIndex());
      
      Signature signature2 = (Signature)signature1.copy((ConstantPool) null);
      assertNotNull(signature2);
      assertFalse(signature0.equals((Object)signature1));
      assertFalse(signature1.equals((Object)signature0));
      assertFalse(signature2.equals((Object)signature1));
      assertFalse(signature2.equals((Object)signature0));
      assertEquals(62, signature0.getLength());
      assertEquals(2162, signature0.getSignatureIndex());
      assertEquals(28, signature0.getNameIndex());
      assertEquals((byte)10, signature0.getTag());
      assertEquals((byte)10, signature1.getTag());
      assertEquals(28, signature1.getNameIndex());
      assertEquals(62, signature1.getLength());
      assertEquals(2162, signature1.getSignatureIndex());
      assertEquals(28, signature2.getNameIndex());
      assertEquals(2162, signature2.getSignatureIndex());
      assertEquals(62, signature2.getLength());
      assertEquals((byte)10, signature2.getTag());
      assertNotSame(signature0, signature2);
      assertNotSame(signature0, signature1);
      assertNotSame(signature1, signature0);
      assertNotSame(signature1, signature2);
      assertNotSame(signature2, signature1);
      assertNotSame(signature2, signature0);
      
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-960));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Signature signature0 = new Signature((-3145), (-3145), 0, (ConstantPool) null);
      assertNotNull(signature0);
      assertEquals((-3145), signature0.getLength());
      assertEquals((byte)10, signature0.getTag());
      assertEquals((-3145), signature0.getNameIndex());
      assertEquals(0, signature0.getSignatureIndex());
      
      // Undeclared exception!
      try { 
        signature0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Signature", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(349);
      assertNotNull(constantMethodType0);
      assertEquals(349, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-345), (-724));
      assertNotNull(constantInterfaceMethodref0);
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals((-724), constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals((-345), constantInterfaceMethodref0.getClassIndex());
      
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(2, constantArray0.length);
      assertEquals(2, constantPool0.getLength());
      
      Signature signature0 = new Signature((-345), (-724), 349, constantPool0);
      assertNotNull(signature0);
      assertEquals(2, constantArray0.length);
      assertEquals(2, constantPool0.getLength());
      assertEquals((-724), signature0.getLength());
      assertEquals(349, signature0.getSignatureIndex());
      assertEquals((-345), signature0.getNameIndex());
      assertEquals((byte)10, signature0.getTag());
      
      signature0.setSignatureIndex(349);
      assertEquals(2, constantArray0.length);
      assertEquals(2, constantPool0.getLength());
      assertEquals((-724), signature0.getLength());
      assertEquals(349, signature0.getSignatureIndex());
      assertEquals((-345), signature0.getNameIndex());
      assertEquals((byte)10, signature0.getTag());
      
      boolean boolean0 = Signature.isFormalParameterList("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = Signature.isActualParameterList("");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Signature.translate("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal signature:  no ident, reaching EOF
         //
         verifyException("org.apache.bcel.classfile.Signature", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Signature signature0 = new Signature((-2628), 1707, 1707, (ConstantPool) null);
      assertNotNull(signature0);
      assertEquals(1707, signature0.getLength());
      assertEquals((-2628), signature0.getNameIndex());
      assertEquals(1707, signature0.getSignatureIndex());
      assertEquals((byte)10, signature0.getTag());
      
      Signature signature1 = new Signature(signature0);
      assertNotNull(signature1);
      assertFalse(signature1.equals((Object)signature0));
      assertEquals(1707, signature0.getLength());
      assertEquals((-2628), signature0.getNameIndex());
      assertEquals(1707, signature0.getSignatureIndex());
      assertEquals((byte)10, signature0.getTag());
      assertEquals((byte)10, signature1.getTag());
      assertEquals(1707, signature1.getSignatureIndex());
      assertEquals((-2628), signature1.getNameIndex());
      assertEquals(1707, signature1.getLength());
      
      Signature signature2 = new Signature(signature1);
      assertNotNull(signature2);
      assertFalse(signature0.equals((Object)signature1));
      assertFalse(signature1.equals((Object)signature0));
      assertFalse(signature2.equals((Object)signature0));
      assertFalse(signature2.equals((Object)signature1));
      assertEquals(1707, signature0.getLength());
      assertEquals((-2628), signature0.getNameIndex());
      assertEquals(1707, signature0.getSignatureIndex());
      assertEquals((byte)10, signature0.getTag());
      assertEquals((byte)10, signature1.getTag());
      assertEquals(1707, signature1.getSignatureIndex());
      assertEquals((-2628), signature1.getNameIndex());
      assertEquals(1707, signature1.getLength());
      assertEquals((-2628), signature2.getNameIndex());
      assertEquals((byte)10, signature2.getTag());
      assertEquals(1707, signature2.getSignatureIndex());
      assertEquals(1707, signature2.getLength());
      
      boolean boolean0 = Signature.isActualParameterList("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        Signature.translate("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal signature:  no ident, reaching EOF
         //
         verifyException("org.apache.bcel.classfile.Signature", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        Signature.translate("^fY@c0v/U7Fd{,DiR");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal signature: ^fY@c0v/U7Fd{,DiR read ^
         //
         verifyException("org.apache.bcel.classfile.Signature", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = Signature.translate(")s");
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Signature.translate("org.apache.bcel.classfile.Signature");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal signature: org.apache.bcel.classfile.Signature read o
         //
         verifyException("org.apache.bcel.classfile.Signature", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Constant[] constantArray0 = new Constant[11];
      boolean boolean0 = Signature.isFormalParameterList("<Jd");
      assertFalse(boolean0);
      
      boolean boolean1 = Signature.isActualParameterList("I)#++");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      boolean boolean0 = Signature.isFormalParameterList(">)L'^[&S>");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)95, (byte)0, (byte)0, (byte)62, (byte)47, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)95, (byte)0, (byte)0, (byte)62, (byte)47, (byte)0}, byteArray0);
      assertNotNull(dataInputStream0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      assertEquals(0, constantPool0.getLength());
      
      Signature signature0 = new Signature(0, 0, dataInputStream0, constantPool0);
      assertArrayEquals(new byte[] {(byte)0, (byte)95, (byte)0, (byte)0, (byte)62, (byte)47, (byte)0}, byteArray0);
      assertNotNull(signature0);
      assertEquals(7, byteArray0.length);
      assertEquals(0, constantArray0.length);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, constantPool0.getLength());
      assertEquals(95, signature0.getSignatureIndex());
      assertEquals(0, signature0.getLength());
      assertEquals(0, signature0.getNameIndex());
      assertEquals((byte)10, signature0.getTag());
      
      Signature signature1 = new Signature(signature0);
      assertArrayEquals(new byte[] {(byte)0, (byte)95, (byte)0, (byte)0, (byte)62, (byte)47, (byte)0}, byteArray0);
      assertNotNull(signature1);
      assertEquals(7, byteArray0.length);
      assertEquals(0, constantArray0.length);
      assertFalse(signature1.equals((Object)signature0));
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, constantPool0.getLength());
      assertEquals(95, signature0.getSignatureIndex());
      assertEquals(0, signature0.getLength());
      assertEquals(0, signature0.getNameIndex());
      assertEquals((byte)10, signature0.getTag());
      assertEquals((byte)10, signature1.getTag());
      assertEquals(0, signature1.getNameIndex());
      assertEquals(95, signature1.getSignatureIndex());
      assertEquals(0, signature1.getLength());
      
      // Undeclared exception!
      try { 
        signature1.toString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 95. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Signature signature0 = new Signature(2080, (-2660), 2080, (ConstantPool) null);
      assertNotNull(signature0);
      assertEquals(2080, signature0.getSignatureIndex());
      assertEquals(2080, signature0.getNameIndex());
      assertEquals((byte)10, signature0.getTag());
      assertEquals((-2660), signature0.getLength());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("<ZmKpEYeE{");
      assertNotNull(mockFileOutputStream0);
      
      Signature signature1 = (Signature)signature0.copy((ConstantPool) null);
      assertNotNull(signature1);
      assertFalse(signature1.equals((Object)signature0));
      assertEquals(2080, signature0.getSignatureIndex());
      assertEquals(2080, signature0.getNameIndex());
      assertEquals((byte)10, signature0.getTag());
      assertEquals((-2660), signature0.getLength());
      assertEquals((-2660), signature1.getLength());
      assertEquals(2080, signature1.getSignatureIndex());
      assertEquals((byte)10, signature1.getTag());
      assertEquals(2080, signature1.getNameIndex());
      assertNotSame(signature0, signature1);
      assertNotSame(signature1, signature0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      assertNotNull(dataOutputStream0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)76;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/bcel-6.5.0-src");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean0);
      
      byteArray0[1] = (byte)0;
      mockFileOutputStream0.write(2080);
      byteArray0[2] = (byte)0;
      signature0.dump(dataOutputStream0);
      assertFalse(signature0.equals((Object)signature1));
      assertEquals(2080, signature0.getSignatureIndex());
      assertEquals(2080, signature0.getNameIndex());
      assertEquals((byte)10, signature0.getTag());
      assertEquals((-2660), signature0.getLength());
      assertNotSame(signature0, signature1);
      
      String string0 = "A";
      // Undeclared exception!
      try { 
        Signature.translate("A");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal signature: A read A
         //
         verifyException("org.apache.bcel.classfile.Signature", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = "T0PXAzjYP7O(g+\\i\\";
      // Undeclared exception!
      try { 
        Signature.translate("T0PXAzjYP7O(g+i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal signature: T0PXAzjYP7O(g+i read g
         //
         verifyException("org.apache.bcel.classfile.Signature", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = Signature.translate("L>;");
      assertEquals(">", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string1 = Signature.translate("L>;");
      assertEquals(">", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean1 = Signature.isActualParameterList("L>;");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = Signature.isActualParameterList(">");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      int int0 = 72;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("L", "P0\"!I%%\"98pa^*IF}z ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"P0\"!I%%\"98pa^*IF}z \" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        Signature.translate("Ljava/lang/Object");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal signature: Ljava/lang/Object read t
         //
         verifyException("org.apache.bcel.classfile.Signature", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Signature signature0 = new Signature((-3150), (-3150), 0, (ConstantPool) null);
      signature0.setSignatureIndex(78);
      // Undeclared exception!
      try { 
        signature0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Signature", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Signature signature0 = new Signature((-2628), 1707, 1707, (ConstantPool) null);
      Signature signature1 = new Signature(signature0);
      Signature signature2 = new Signature(signature1);
      Signature.isActualParameterList("");
      signature2.getSignatureIndex();
      String string0 = "MN:F0a'ktZV dCq+";
      // Undeclared exception!
      try { 
        Signature.translate("MN:F0a'ktZV dCq+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal signature: MN:F0a'ktZV dCq+ read +
         //
         verifyException("org.apache.bcel.classfile.Signature", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        Signature.translate("<Lorg.apache.bcel.classfile.AccessFlags");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal signature: <Lorg.apache.bcel.classfile.AccessFlags read .
         //
         verifyException("org.apache.bcel.classfile.Signature", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Signature.isFormalParameterList("<f*2>~q=!],0`-hKa");
      Signature.isActualParameterList("<f*2>~q=!],0`-hKa");
      Signature.isActualParameterList("LY");
      Signature signature0 = null;
      try {
        signature0 = new Signature((Signature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Signature", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)0;
      // Undeclared exception!
      try { 
        Signature.translate("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal signature:  no ident, reaching EOF
         //
         verifyException("org.apache.bcel.classfile.Signature", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Signature.isFormalParameterList("org.apache.bcel.classfile.AccessFlags");
      String string0 = ".n";
      Signature.isFormalParameterList(".n");
      Signature.isActualParameterList(".n");
      String string1 = "6pJFxO";
      Signature.isFormalParameterList("6pJFxO");
      // Undeclared exception!
      try { 
        Signature.translate("*UX831){");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal signature: *UX831){ read *
         //
         verifyException("org.apache.bcel.classfile.Signature", e);
      }
  }
}
