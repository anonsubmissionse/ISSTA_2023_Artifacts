/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 21:06:32 GMT 2022
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.PipedOutputStream;
import org.apache.bcel.generic.ALOAD;
import org.apache.bcel.generic.ASTORE;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.DLOAD;
import org.apache.bcel.generic.DSTORE;
import org.apache.bcel.generic.FLOAD;
import org.apache.bcel.generic.FSTORE;
import org.apache.bcel.generic.IINC;
import org.apache.bcel.generic.ILOAD;
import org.apache.bcel.generic.ISTORE;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.LLOAD;
import org.apache.bcel.generic.LSTORE;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LocalVariableInstruction_ESTest extends LocalVariableInstruction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ISTORE iSTORE0 = new ISTORE();
      iSTORE0.setIndex(126);
      assertEquals(2, iSTORE0.getLength());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LSTORE lSTORE0 = new LSTORE(65535);
      assertEquals((short)55, lSTORE0.getOpcode());
      assertEquals(4, lSTORE0.getLength());
      assertEquals(65535, lSTORE0.getIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ILOAD iLOAD0 = (ILOAD)InstructionConstants.ILOAD_1;
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      iLOAD0.initFromFile(byteSequence0, false);
      //  // Unstable assertion: assertEquals(1, byteSequence0.getIndex());
      //  // Unstable assertion: assertEquals(0, iLOAD0.getIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)45;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertEquals(7, instructionList0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ASTORE aSTORE0 = new ASTORE(1372);
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      aSTORE0.initFromFile(byteSequence0, false);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(2, aSTORE0.getLength());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(2, instruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ALOAD aLOAD0 = new ALOAD(3105);
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      aLOAD0.initFromFile(byteSequence0, false);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, aLOAD0.getIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ILOAD iLOAD0 = (ILOAD)InstructionConstants.ILOAD_1;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\"_R.JuKa");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      iLOAD0.getType(constantPoolGen0);
      iLOAD0.dump(dataOutputStream0);
      iLOAD0.toString();
      iLOAD0.getCanonicalTag();
      IINC iINC0 = new IINC();
      iINC0.getIncrement();
      FLOAD fLOAD0 = new FLOAD();
      fLOAD0.getType(constantPoolGen0);
      iINC0.getType(constantPoolGen0);
      ALOAD aLOAD0 = null;
      try {
        aLOAD0 = new ALOAD((-647));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal value: -647
         //
         verifyException("org.apache.bcel.generic.LocalVariableInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ILOAD iLOAD0 = new ILOAD(255);
      assertEquals((short)21, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getLength());
      assertEquals(255, iLOAD0.getIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DLOAD dLOAD0 = new DLOAD(0);
      dLOAD0.setIndexOnly(0);
      assertEquals((short)38, dLOAD0.getOpcode());
      assertEquals(0, dLOAD0.getIndex());
      assertEquals(1, dLOAD0.getLength());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ILOAD iLOAD0 = (ILOAD)InstructionConstants.ILOAD_2;
      int int0 = iLOAD0.getIndex();
      //  // Unstable assertion: assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DSTORE dSTORE0 = new DSTORE(25);
      int int0 = dSTORE0.getIndex();
      assertEquals(25, int0);
      assertEquals((short)57, dSTORE0.getOpcode());
      assertEquals(2, dSTORE0.getLength());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ISTORE iSTORE0 = new ISTORE();
      // Undeclared exception!
      try { 
        iSTORE0.toString(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ASTORE aSTORE0 = (ASTORE)InstructionConstants.ASTORE_0;
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        aSTORE0.initFromFile(byteSequence0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ILOAD iLOAD0 = (ILOAD)InstructionConstants.ILOAD_1;
      // Undeclared exception!
      try { 
        iLOAD0.dump((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.LocalVariableInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ALOAD aLOAD0 = (ALOAD)InstructionConstants.ALOAD_2;
      assertEquals((short)44, aLOAD0.getOpcode());
      
      aLOAD0.setIndex(790);
      assertEquals(4, aLOAD0.getLength());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ALOAD aLOAD0 = new ALOAD();
      // Undeclared exception!
      try { 
        aLOAD0.setIndex((-125));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal value: -125
         //
         verifyException("org.apache.bcel.generic.LocalVariableInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ILOAD iLOAD0 = (ILOAD)InstructionConstants.ILOAD_2;
      String string0 = iLOAD0.toString(false);
      assertEquals("iload_2", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FSTORE fSTORE0 = new FSTORE(74);
      String string0 = fSTORE0.toString(false);
      assertEquals(2, fSTORE0.getLength());
      assertEquals("fstore 74", string0);
      assertEquals((short)56, fSTORE0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DSTORE dSTORE0 = new DSTORE();
      dSTORE0.setIndex((byte)0);
      dSTORE0.toString(false);
      assertEquals((short)71, dSTORE0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FSTORE fSTORE0 = new FSTORE(74);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("/);=$U\"z", false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      fSTORE0.dump(dataOutputStream0);
      assertEquals(2, fSTORE0.getLength());
      assertEquals(74, fSTORE0.getIndex());
      assertEquals((short)56, fSTORE0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DSTORE dSTORE0 = new DSTORE(913);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(";Zi{P/&5?:", true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      dSTORE0.dump(dataOutputStream0);
      assertEquals(4, dSTORE0.getLength());
      assertEquals(913, dSTORE0.getIndex());
      assertEquals((short)57, dSTORE0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LLOAD lLOAD0 = new LLOAD();
      int int0 = lLOAD0.getIndex();
      assertEquals((-1), int0);
      assertEquals((short)22, lLOAD0.getCanonicalTag());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ASTORE aSTORE0 = new ASTORE(1169);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      aSTORE0.getType(constantPoolGen0);
      assertEquals(4, aSTORE0.getLength());
      assertEquals(1169, aSTORE0.getIndex());
      assertEquals((short)58, aSTORE0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FSTORE fSTORE0 = new FSTORE();
      Type type0 = fSTORE0.getType((ConstantPoolGen) null);
      assertEquals((-1), fSTORE0.getIndex());
      assertEquals("F", type0.getSignature());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LSTORE lSTORE0 = new LSTORE(25);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      lSTORE0.getType(constantPoolGen0);
      assertEquals((short)55, lSTORE0.getOpcode());
      assertEquals(2, lSTORE0.getLength());
      assertEquals(25, lSTORE0.getIndex());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ISTORE iSTORE0 = new ISTORE(743);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      iSTORE0.getType(constantPoolGen0);
      assertEquals(4, iSTORE0.getLength());
      assertEquals(743, iSTORE0.getIndex());
      assertEquals((short)54, iSTORE0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ALOAD aLOAD0 = new ALOAD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      aLOAD0.getType(constantPoolGen0);
      assertEquals((short)25, aLOAD0.getCanonicalTag());
      assertEquals((-1), aLOAD0.getIndex());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DLOAD dLOAD0 = new DLOAD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      dLOAD0.getType(constantPoolGen0);
      assertEquals((-1), dLOAD0.getIndex());
      assertEquals((short)24, dLOAD0.getCanonicalTag());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LLOAD lLOAD0 = new LLOAD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lLOAD0.getType(constantPoolGen0);
      assertEquals((-1), lLOAD0.getIndex());
      assertEquals("J", type0.getSignature());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DSTORE dSTORE0 = new DSTORE();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      dSTORE0.getType(constantPoolGen0);
      assertEquals((-1), dSTORE0.getIndex());
      assertEquals((short)57, dSTORE0.getCanonicalTag());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ILOAD iLOAD0 = (ILOAD)InstructionConstants.ILOAD_1;
      // Undeclared exception!
      try { 
        iLOAD0.setIndex(65606);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal value: 65606
         //
         verifyException("org.apache.bcel.generic.LocalVariableInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ILOAD iLOAD0 = (ILOAD)InstructionConstants.ILOAD_2;
      byte[] byteArray0 = new byte[7];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      iLOAD0.initFromFile(byteSequence0, false);
      assertEquals(2, iLOAD0.getIndex());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DSTORE dSTORE0 = new DSTORE(3366);
      assertEquals(3366, dSTORE0.getIndex());
      
      byte[] byteArray0 = new byte[15];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      dSTORE0.initFromFile(byteSequence0, true);
      assertEquals(4, dSTORE0.getLength());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DSTORE dSTORE0 = new DSTORE();
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      dSTORE0.initFromFile(byteSequence0, false);
      assertEquals((-3), dSTORE0.getIndex());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FLOAD fLOAD0 = new FLOAD(0);
      String string0 = fLOAD0.toString(true);
      assertEquals("fload_0[34](1)", string0);
      assertEquals((short)34, fLOAD0.getOpcode());
      assertEquals((short)23, fLOAD0.getCanonicalTag());
      assertEquals(0, fLOAD0.getIndex());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ILOAD iLOAD0 = (ILOAD)InstructionConstants.ILOAD_1;
      iLOAD0.toString();
      short short0 = iLOAD0.getCanonicalTag();
      assertEquals((short)21, short0);
      
      IINC iINC0 = new IINC();
      iINC0.getIncrement();
      assertEquals((short) (-1), iINC0.getCanonicalTag());
      assertEquals((-1), iINC0.getIndex());
      
      String string0 = iLOAD0.toString(true);
      assertEquals("iload_1[27](1)", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IINC iINC0 = new IINC(276, 276);
      // Undeclared exception!
      try { 
        iINC0.initFromFile((ByteSequence) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.IINC", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      IINC iINC0 = new IINC();
      short short0 = iINC0.getCanonicalTag();
      assertEquals((short) (-1), short0);
      assertEquals((-1), iINC0.getIndex());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ALOAD aLOAD0 = new ALOAD(210);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        aLOAD0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }
}
