/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 20:19:25 GMT 2022
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Consumer;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.generic.ALOAD;
import org.apache.bcel.generic.ANEWARRAY;
import org.apache.bcel.generic.ARRAYLENGTH;
import org.apache.bcel.generic.BranchHandle;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.CASTORE;
import org.apache.bcel.generic.CodeExceptionGen;
import org.apache.bcel.generic.CompoundInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.D2F;
import org.apache.bcel.generic.D2L;
import org.apache.bcel.generic.DALOAD;
import org.apache.bcel.generic.DREM;
import org.apache.bcel.generic.DSUB;
import org.apache.bcel.generic.DUP2;
import org.apache.bcel.generic.DUP_X2;
import org.apache.bcel.generic.F2D;
import org.apache.bcel.generic.F2L;
import org.apache.bcel.generic.FALOAD;
import org.apache.bcel.generic.FCMPG;
import org.apache.bcel.generic.FCMPL;
import org.apache.bcel.generic.FCONST;
import org.apache.bcel.generic.FREM;
import org.apache.bcel.generic.GOTO;
import org.apache.bcel.generic.GOTO_W;
import org.apache.bcel.generic.I2D;
import org.apache.bcel.generic.I2F;
import org.apache.bcel.generic.I2L;
import org.apache.bcel.generic.ICONST;
import org.apache.bcel.generic.IFEQ;
import org.apache.bcel.generic.IFGT;
import org.apache.bcel.generic.IFLE;
import org.apache.bcel.generic.IFLT;
import org.apache.bcel.generic.IFNE;
import org.apache.bcel.generic.IFNULL;
import org.apache.bcel.generic.IF_ACMPEQ;
import org.apache.bcel.generic.IF_ACMPNE;
import org.apache.bcel.generic.IF_ICMPEQ;
import org.apache.bcel.generic.IF_ICMPGT;
import org.apache.bcel.generic.IF_ICMPLE;
import org.apache.bcel.generic.IF_ICMPLT;
import org.apache.bcel.generic.IF_ICMPNE;
import org.apache.bcel.generic.ILOAD;
import org.apache.bcel.generic.IMUL;
import org.apache.bcel.generic.INSTANCEOF;
import org.apache.bcel.generic.IREM;
import org.apache.bcel.generic.IfInstruction;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.InstructionListObserver;
import org.apache.bcel.generic.JSR;
import org.apache.bcel.generic.JSR_W;
import org.apache.bcel.generic.L2F;
import org.apache.bcel.generic.LAND;
import org.apache.bcel.generic.LDC;
import org.apache.bcel.generic.LDC_W;
import org.apache.bcel.generic.LOOKUPSWITCH;
import org.apache.bcel.generic.LOR;
import org.apache.bcel.generic.LRETURN;
import org.apache.bcel.generic.LSUB;
import org.apache.bcel.generic.LocalVariableGen;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.SALOAD;
import org.apache.bcel.generic.SWITCH;
import org.apache.bcel.generic.TABLESWITCH;
import org.apache.bcel.generic.Type;
import org.apache.bcel.verifier.structurals.UninitializedObjectType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InstructionList_ESTest extends InstructionList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (double) (byte)0);
      InstructionHandle instructionHandle0 = instructionList0.append((CompoundInstruction) pUSH0);
      LocalVariableGen[] localVariableGenArray0 = new LocalVariableGen[1];
      ObjectType objectType0 = Type.CLASS;
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariableGen localVariableGen0 = new LocalVariableGen((byte)0, "org.apache.bcel.generic.InstructionList$1", uninitializedObjectType0, instructionHandle0, instructionHandle0);
      localVariableGenArray0[0] = localVariableGen0;
      IF_ACMPNE iF_ACMPNE0 = new IF_ACMPNE();
      InstructionList instructionList1 = new InstructionList((BranchInstruction) iF_ACMPNE0);
      InstructionHandle instructionHandle1 = instructionList1.getEnd();
      instructionList0.redirectLocalVariables(localVariableGenArray0, instructionHandle0, instructionHandle1);
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "8t");
      Instruction instruction0 = pUSH0.getInstruction();
      InstructionList instructionList0 = new InstructionList(instruction0);
      int[] intArray0 = new int[6];
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[6];
      InstructionHandle instructionHandle0 = instructionList0.append(instruction0);
      instructionHandleArray0[0] = instructionHandle0;
      InstructionHandle instructionHandle1 = new InstructionHandle(instruction0);
      SWITCH sWITCH0 = new SWITCH(intArray0, instructionHandleArray0, instructionHandle1);
      InstructionList instructionList1 = sWITCH0.getInstructionList();
      instructionList0.insert(instruction0, instructionList1);
      instructionList0.redirectBranches(instructionHandle0, instructionHandle0);
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(3, instructionList0.getLength());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "8t");
      Instruction instruction0 = pUSH0.getInstruction();
      InstructionList instructionList0 = new InstructionList(instruction0);
      int[] intArray0 = new int[6];
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[6];
      InstructionHandle instructionHandle0 = instructionList0.append(instruction0);
      instructionHandleArray0[0] = instructionHandle0;
      SWITCH sWITCH0 = new SWITCH(intArray0, instructionHandleArray0, instructionHandleArray0[1]);
      InstructionList instructionList1 = sWITCH0.getInstructionList();
      instructionList0.insert(instruction0, instructionList1);
      instructionList0.redirectBranches(instructionHandle0, (InstructionHandle) null);
      assertEquals(3, instructionList0.size());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      InstructionHandle instructionHandle0 = instructionList0.findHandle((int) (byte)0);
      IFGT iFGT0 = new IFGT();
      instructionList0.insert((BranchInstruction) iFGT0);
      instructionList0.redirectBranches((InstructionHandle) null, instructionHandle0);
      assertEquals(9, instructionList0.size());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Float float0 = new Float(794.03204F);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) float0);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      Constant[] constantArray0 = new Constant[4];
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      instructionList0.replaceConstantPool(constantPoolGen0, constantPoolGen1);
      assertEquals(5, constantPoolGen1.getSize());
      assertEquals(1, instructionList0.size());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 0);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      I2F i2F0 = new I2F();
      ALOAD aLOAD0 = (ALOAD)InstructionConstants.ALOAD_1;
      // Undeclared exception!
      try { 
        instructionList0.delete((Instruction) i2F0, (Instruction) aLOAD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction i2f[134](1) is not contained in this list.
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "8t");
      Instruction instruction0 = pUSH0.getInstruction();
      InstructionList instructionList0 = new InstructionList(instruction0);
      // Undeclared exception!
      try { 
        instructionList0.delete(instruction0, (Instruction) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction null is not contained in this list.
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE();
      IfInstruction ifInstruction0 = iF_ICMPLE0.negate();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) ifInstruction0);
      InstructionHandle instructionHandle0 = instructionList0.insert(instructionList0);
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) ifInstruction0);
      // Undeclared exception!
      try { 
        instructionList0.move((InstructionHandle) branchHandle0, instructionHandle0, instructionHandle0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid range: From   -1: if_icmpgt[163](3) -> null to   -1: if_icmpgt[163](3) -> null contains target   -1: if_icmpgt[163](3) -> null
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE();
      IfInstruction ifInstruction0 = iF_ICMPLE0.negate();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) ifInstruction0);
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) ifInstruction0);
      FCMPL fCMPL0 = (FCMPL)InstructionConstants.FCMPL;
      InstructionHandle instructionHandle0 = instructionList0.insert((InstructionHandle) branchHandle0, (Instruction) fCMPL0);
      // Undeclared exception!
      try { 
        instructionList0.move(instructionHandle0, (InstructionHandle) branchHandle0, instructionHandle0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid range: From   -1: fcmpl[149](1) to   -1: if_icmpgt[163](3) -> null contains target   -1: fcmpl[149](1)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DREM dREM0 = new DREM();
      InstructionList instructionList0 = new InstructionList(dREM0);
      InstructionHandle instructionHandle0 = instructionList0.insert(instructionList0);
      // Undeclared exception!
      try { 
        instructionList0.move(instructionHandle0, (InstructionHandle) null, (InstructionHandle) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid null handle: From   -1: drem[115](1) to null
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FALOAD fALOAD0 = new FALOAD();
      IFGT iFGT0 = new IFGT((InstructionHandle) null);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFGT0);
      D2F d2F0 = new D2F();
      // Undeclared exception!
      try { 
        instructionList0.append((Instruction) d2F0, (Instruction) fALOAD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction d2f[144](1) is not contained in this list.
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte) (-58);
      byteArray0[1] = (byte) (-87);
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertEquals(5, instructionList0.size());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DUP_X2 dUP_X2_0 = new DUP_X2();
      InstructionList instructionList0 = new InstructionList(dUP_X2_0);
      InstructionListObserver instructionListObserver0 = mock(InstructionListObserver.class, new ViolatedAssumptionAnswer());
      instructionList0.addObserver(instructionListObserver0);
      instructionList0.update();
      assertEquals(1, instructionList0.getLength());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      F2L f2L0 = new F2L();
      InstructionList instructionList0 = new InstructionList(f2L0);
      f2L0.setOpcode((short)2504);
      // Undeclared exception!
      try { 
        instructionList0.getInstructions();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.EOFException
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DUP_X2 dUP_X2_0 = new DUP_X2();
      InstructionList instructionList0 = new InstructionList(dUP_X2_0);
      instructionList0.delete((Instruction) dUP_X2_0, (Instruction) dUP_X2_0);
      instructionList0.toString(false);
      assertEquals(0, instructionList0.getLength());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Float float0 = new Float(794.03204F);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) float0);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      String string0 = instructionList0.toString();
      assertEquals(1, instructionList0.size());
      assertEquals("  -1: ldc[18](2) 1\n", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "8t");
      Instruction instruction0 = pUSH0.getInstruction();
      InstructionList instructionList0 = new InstructionList(instruction0);
      instructionList0.insert(instruction0, instructionList0);
      int int0 = instructionList0.size();
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      IMUL iMUL0 = (IMUL)InstructionConstants.IMUL;
      int[] intArray0 = new int[0];
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[0];
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) iMUL0);
      SWITCH sWITCH0 = new SWITCH(intArray0, instructionHandleArray0, instructionHandle0, 1030);
      instructionList0.insert(instructionList0);
      assertEquals(0, instructionList0.getLength());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE();
      IfInstruction ifInstruction0 = iF_ICMPLE0.negate();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) ifInstruction0);
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) ifInstruction0);
      branchHandle0.updatePosition(1, 1);
      instructionList0.insert(instructionList0);
      assertEquals(0, instructionList0.getLength());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "8t");
      Instruction instruction0 = pUSH0.getInstruction();
      InstructionList instructionList0 = new InstructionList(instruction0);
      instructionList0.insert(instructionList0);
      instructionList0.insert((InstructionHandle) null, instructionList0);
      assertEquals(0, instructionList0.size());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "8t");
      Instruction instruction0 = pUSH0.getInstruction();
      InstructionList instructionList0 = new InstructionList(instruction0);
      InstructionHandle instructionHandle0 = instructionList0.append(instruction0, instruction0);
      instructionList0.setPositions(false);
      instructionList0.insert(instructionHandle0, instructionList0);
      assertEquals(2, instructionHandle0.getPosition());
      assertEquals(0, instructionList0.getLength());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE();
      IfInstruction ifInstruction0 = iF_ICMPLE0.negate();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) ifInstruction0);
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) ifInstruction0);
      branchHandle0.updatePosition(1, 1);
      instructionList0.insert((InstructionHandle) branchHandle0, instructionList0);
      assertEquals(0, instructionList0.size());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int[] intArray0 = new int[2];
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[7];
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (long) 695);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      IFEQ iFEQ0 = new IFEQ((InstructionHandle) null);
      BranchHandle branchHandle0 = BranchHandle.getBranchHandle(iFEQ0);
      SWITCH sWITCH0 = new SWITCH(intArray0, instructionHandleArray0, branchHandle0);
      instructionList0.insert((InstructionHandle) branchHandle0, (CompoundInstruction) sWITCH0);
      assertEquals(2, instructionList0.getLength());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE();
      IfInstruction ifInstruction0 = iF_ICMPLE0.negate();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) ifInstruction0);
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) ifInstruction0);
      branchHandle0.updatePosition(1, 1);
      instructionList0.insert((InstructionHandle) branchHandle0, (BranchInstruction) ifInstruction0);
      assertEquals(3, instructionList0.size());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "8t");
      Instruction instruction0 = pUSH0.getInstruction();
      InstructionList instructionList0 = new InstructionList(instruction0);
      int[] intArray0 = new int[6];
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[6];
      InstructionHandle instructionHandle0 = instructionList0.append(instruction0);
      instructionHandleArray0[0] = instructionHandle0;
      InstructionList instructionList1 = new InstructionList(instruction0);
      InstructionHandle instructionHandle1 = instructionList0.append(instructionHandle0, instructionList1);
      instructionHandleArray0[1] = instructionHandle1;
      instructionHandleArray0[2] = instructionHandle0;
      instructionHandleArray0[3] = instructionHandleArray0[0];
      instructionHandleArray0[4] = instructionHandleArray0[3];
      instructionHandleArray0[5] = instructionHandleArray0[3];
      SWITCH sWITCH0 = new SWITCH(intArray0, instructionHandleArray0, instructionHandleArray0[1]);
      InstructionList instructionList2 = sWITCH0.getInstructionList();
      instructionList0.insert(instruction0, instructionList2);
      instructionList0.setPositions(true);
      InstructionHandle instructionHandle2 = instructionList0.insert(instruction0, instructionList1);
      assertEquals(0, instructionList1.getLength());
      assertEquals(40, instructionHandle2.getPosition());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "8t");
      Instruction instruction0 = pUSH0.getInstruction();
      InstructionList instructionList0 = new InstructionList(instruction0);
      int[] intArray0 = new int[6];
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[6];
      SWITCH sWITCH0 = new SWITCH(intArray0, instructionHandleArray0, instructionHandleArray0[3]);
      instructionList0.insert(instruction0, (CompoundInstruction) sWITCH0);
      assertEquals(2, instructionList0.getLength());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Float float0 = new Float(794.03204F);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) float0);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      GOTO_W gOTO_W0 = new GOTO_W(instructionHandle0);
      gOTO_W0.setPosition(201);
      instructionList0.insert((BranchInstruction) gOTO_W0);
      assertEquals(2, instructionList0.getLength());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FCONST fCONST0 = (FCONST)InstructionConstants.FCONST_0;
      InstructionList instructionList0 = new InstructionList(fCONST0);
      PUSH pUSH0 = new PUSH((ConstantPoolGen) null, (String) null);
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) fCONST0, (CompoundInstruction) pUSH0);
      IF_ICMPLT iF_ICMPLT0 = new IF_ICMPLT(instructionHandle0);
      iF_ICMPLT0.dispose();
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) iF_ICMPLT0);
      instructionList0.insert((InstructionHandle) branchHandle0, (BranchInstruction) iF_ICMPLT0);
      assertEquals(4, instructionList0.getLength());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "8t");
      Instruction instruction0 = pUSH0.getInstruction();
      InstructionList instructionList0 = new InstructionList(instruction0);
      instructionList0.insert(instruction0, instructionList0);
      instructionList0.getStart();
      assertTrue(instructionList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE();
      IfInstruction ifInstruction0 = iF_ICMPLE0.negate();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) ifInstruction0);
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) ifInstruction0);
      branchHandle0.updatePosition(1, 1);
      instructionList0.getStart();
      assertEquals(2, instructionList0.size());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "8t");
      Instruction instruction0 = pUSH0.getInstruction();
      InstructionList instructionList0 = new InstructionList(instruction0);
      instructionList0.insert(instructionList0);
      int int0 = instructionList0.getLength();
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FCMPG fCMPG0 = (FCMPG)InstructionConstants.FCMPG;
      InstructionHandle instructionHandle0 = new InstructionHandle(fCMPG0);
      IFLE iFLE0 = new IFLE(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFLE0);
      instructionList0.delete(instructionHandle0, instructionHandle0);
      assertEquals(0, instructionList0.getLength());
      
      InstructionHandle[] instructionHandleArray0 = instructionList0.getInstructionHandles();
      assertEquals(0, instructionHandleArray0.length);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      instructionList0.getEnd();
      assertEquals(0, instructionList0.size());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (-90.2001F));
      InstructionList instructionList0 = pUSH0.getInstructionList();
      ObjectType objectType0 = Type.THROWABLE;
      MethodGen methodGen0 = new MethodGen(194, objectType0, objectType0.NO_ARGS, (String[]) null, "}T", "}T", instructionList0, constantPoolGen0);
      instructionList0.getEnd();
      assertEquals(1, instructionList0.getLength());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "8t");
      Instruction instruction0 = pUSH0.getInstruction();
      InstructionList instructionList0 = new InstructionList(instruction0);
      instructionList0.append(instruction0, instruction0);
      instructionList0.setPositions(false);
      instructionList0.getEnd();
      assertEquals(2, instructionList0.size());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE();
      IfInstruction ifInstruction0 = iF_ICMPLE0.negate();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) ifInstruction0);
      instructionList0.delete((Instruction) ifInstruction0, (Instruction) ifInstruction0);
      instructionList0.getByteCode();
      assertEquals(0, instructionList0.getLength());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[4];
      LRETURN lRETURN0 = (LRETURN)InstructionConstants.LRETURN;
      InstructionHandle instructionHandle0 = InstructionHandle.getInstructionHandle(lRETURN0);
      instructionHandleArray0[0] = instructionHandle0;
      JSR_W jSR_W0 = new JSR_W(instructionHandle0);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      InstructionHandle instructionHandle1 = InstructionList.findHandle(instructionHandleArray0, intArray0, 1, 1);
      assertEquals((-1), instructionHandle1.getPosition());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 0.0F);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionHandle instructionHandle0 = instructionList0.append((CompoundInstruction) pUSH0);
      IF_ICMPLT iF_ICMPLT0 = new IF_ICMPLT(instructionHandle0);
      BranchHandle branchHandle0 = instructionList0.append((BranchInstruction) iF_ICMPLT0);
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[1];
      instructionHandleArray0[0] = (InstructionHandle) branchHandle0;
      int[] intArray0 = new int[7];
      intArray0[0] = (-1002);
      InstructionHandle instructionHandle1 = InstructionList.findHandle(instructionHandleArray0, intArray0, 5, (-1002));
      assertEquals(0, instructionHandle1.getPosition());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte) (-58);
      InstructionList instructionList0 = new InstructionList(byteArray0);
      InstructionHandle instructionHandle0 = instructionList0.findHandle((int) (byte)3);
      assertTrue(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DREM dREM0 = new DREM();
      InstructionList instructionList0 = new InstructionList(dREM0);
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      Character character0 = Character.valueOf('2');
      PUSH pUSH0 = new PUSH(constantPoolGen0, character0);
      instructionList0.append((Instruction) dREM0, (CompoundInstruction) pUSH0);
      instructionList0.setPositions(true);
      instructionList0.findHandle(1);
      assertEquals(2, instructionList0.size());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      ANEWARRAY aNEWARRAY0 = new ANEWARRAY();
      instructionList0.insert((Instruction) aNEWARRAY0);
      instructionList0.findHandle((int) (byte)0);
      assertEquals(9, instructionList0.getLength());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE();
      IfInstruction ifInstruction0 = iF_ICMPLE0.negate();
      InstructionList instructionList0 = new InstructionList();
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) ifInstruction0);
      IFLT iFLT0 = new IFLT(branchHandle0);
      assertEquals(1, instructionList0.size());
      
      instructionList0.append(instructionList0);
      assertEquals(0, instructionList0.getLength());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE();
      IfInstruction ifInstruction0 = iF_ICMPLE0.negate();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) ifInstruction0);
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) ifInstruction0);
      branchHandle0.updatePosition(1, 1);
      instructionList0.append(instructionList0);
      assertEquals(0, instructionList0.size());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      instructionList0.append((InstructionHandle) null, instructionList0);
      assertEquals(0, instructionList0.size());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (-90.2001F));
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      IF_ICMPEQ iF_ICMPEQ0 = new IF_ICMPEQ(instructionHandle0);
      BranchHandle branchHandle0 = BranchHandle.getBranchHandle(iF_ICMPEQ0);
      instructionList0.append((InstructionHandle) branchHandle0, instructionList0);
      assertEquals(0, instructionList0.getLength());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "8t");
      Instruction instruction0 = pUSH0.getInstruction();
      InstructionList instructionList0 = new InstructionList(instruction0);
      InstructionHandle instructionHandle0 = instructionList0.append(instruction0, instruction0);
      instructionList0.setPositions(false);
      instructionList0.insert(instruction0, instructionList0);
      instructionList0.append(instructionHandle0, instructionList0);
      assertEquals(0, instructionList0.size());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, true);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      int[] intArray0 = new int[1];
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[1];
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      SWITCH sWITCH0 = new SWITCH(intArray0, instructionHandleArray0, instructionHandle0, 4);
      InstructionHandle instructionHandle1 = instructionList0.insert((CompoundInstruction) sWITCH0);
      instructionList0.append(instructionHandle1, (CompoundInstruction) sWITCH0);
      assertEquals(3, instructionList0.getLength());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE();
      IfInstruction ifInstruction0 = iF_ICMPLE0.negate();
      InstructionList instructionList0 = new InstructionList();
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) ifInstruction0);
      branchHandle0.updatePosition(1, 1);
      instructionList0.append((InstructionHandle) branchHandle0, (BranchInstruction) ifInstruction0);
      assertFalse(instructionList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, true);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      InstructionHandle instructionHandle0 = instructionList0.insert((CompoundInstruction) pUSH0);
      IFGT iFGT0 = new IFGT(instructionHandle0);
      iFGT0.dispose();
      instructionList0.append(instructionHandle0, (BranchInstruction) iFGT0);
      assertEquals(3, instructionList0.getLength());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      I2L i2L0 = new I2L();
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) i2L0);
      IF_ICMPLT iF_ICMPLT0 = new IF_ICMPLT(instructionHandle0);
      InstructionList instructionList1 = new InstructionList((BranchInstruction) iF_ICMPLT0);
      assertEquals(1, instructionList0.size());
      
      instructionList1.append((Instruction) iF_ICMPLT0, instructionList0);
      assertEquals(0, instructionList0.getLength());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "8t");
      Instruction instruction0 = pUSH0.getInstruction();
      InstructionList instructionList0 = new InstructionList(instruction0);
      int[] intArray0 = new int[6];
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[6];
      SWITCH sWITCH0 = new SWITCH(intArray0, instructionHandleArray0, instructionHandleArray0[1]);
      InstructionList instructionList1 = sWITCH0.getInstructionList();
      instructionList0.insert(instruction0, instructionList1);
      instructionList0.append(instruction0, instructionList0);
      assertEquals(0, instructionList0.size());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "8t");
      Instruction instruction0 = pUSH0.getInstruction();
      InstructionList instructionList0 = new InstructionList(instruction0);
      instructionList0.append(instruction0, instruction0);
      instructionList0.setPositions(false);
      InstructionList instructionList1 = instructionList0.copy();
      instructionList0.insert(instruction0, instructionList1);
      instructionList0.append(instruction0, instructionList1);
      assertEquals(4, instructionList0.getLength());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      LAND lAND0 = new LAND();
      int[] intArray0 = new int[0];
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[0];
      InstructionHandle instructionHandle0 = new InstructionHandle(lAND0);
      InstructionHandle instructionHandle1 = instructionList0.append(instructionHandle0, (Instruction) lAND0);
      SWITCH sWITCH0 = new SWITCH(intArray0, instructionHandleArray0, instructionHandle1, 1);
      instructionList0.append((Instruction) lAND0, (CompoundInstruction) sWITCH0);
      assertEquals(10, instructionList0.getLength());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      D2L d2L0 = (D2L)InstructionConstants.D2L;
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) d2L0);
      int[] intArray0 = new int[2];
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[7];
      SWITCH sWITCH0 = new SWITCH(intArray0, instructionHandleArray0, instructionHandle0, (byte)87);
      instructionList0.append((CompoundInstruction) sWITCH0);
      assertEquals(5, instructionList0.getLength());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE();
      IfInstruction ifInstruction0 = iF_ICMPLE0.negate();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) ifInstruction0);
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) ifInstruction0);
      branchHandle0.updatePosition(1, 1);
      instructionList0.append((BranchInstruction) ifInstruction0);
      assertEquals(3, instructionList0.size());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DUP_X2 dUP_X2_0 = new DUP_X2();
      InstructionList instructionList0 = new InstructionList(dUP_X2_0);
      InstructionList instructionList1 = new InstructionList();
      InstructionHandle instructionHandle0 = instructionList0.insert(instructionList1);
      instructionHandle0.dispose();
      // Undeclared exception!
      try { 
        instructionList0.toString(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DUP_X2 dUP_X2_0 = new DUP_X2();
      InstructionList instructionList0 = new InstructionList(dUP_X2_0);
      InstructionList instructionList1 = instructionList0.copy();
      IF_ACMPNE iF_ACMPNE0 = new IF_ACMPNE();
      instructionList0.insert((BranchInstruction) iF_ACMPNE0);
      instructionList1.append(instructionList0);
      // Undeclared exception!
      try { 
        instructionList1.toString(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FREM fREM0 = (FREM)InstructionConstants.FREM;
      InstructionList instructionList0 = new InstructionList(fREM0);
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) fREM0, (Instruction) fREM0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      instructionList0.insert(instructionHandle0, instructionList0);
      Boolean boolean0 = new Boolean("");
      PUSH pUSH0 = new PUSH(constantPoolGen0, boolean0);
      instructionList0.insert(instructionHandle0, (CompoundInstruction) pUSH0);
      // Undeclared exception!
      instructionList0.toString();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "8t");
      Instruction instruction0 = pUSH0.getInstruction();
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionList instructionList1 = new InstructionList();
      InstructionHandle instructionHandle0 = instructionList0.append(instruction0, instructionList1);
      instructionHandle0.dispose();
      // Undeclared exception!
      try { 
        instructionList0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      IF_ICMPGT iF_ICMPGT0 = new IF_ICMPGT();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iF_ICMPGT0);
      // Undeclared exception!
      try { 
        instructionList0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "8t");
      Instruction instruction0 = pUSH0.getInstruction();
      InstructionList instructionList0 = new InstructionList(instruction0);
      InstructionHandle instructionHandle0 = instructionList0.append(instruction0);
      instructionHandle0.setNext(instructionHandle0);
      // Undeclared exception!
      instructionList0.setPositions(true);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSR jSR0 = new JSR((InstructionHandle) null);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) jSR0);
      // Undeclared exception!
      try { 
        instructionList0.setPositions();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Target of jsr[168](3) is invalid null handle
         //
         verifyException("org.apache.bcel.generic.BranchInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSR jSR0 = new JSR();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) jSR0);
      // Undeclared exception!
      try { 
        instructionList0.setPositions();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (-90.2001F));
      InstructionList instructionList0 = pUSH0.getInstructionList();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        instructionList0.replaceConstantPool(constantPoolGen1, constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (long) 695);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      IFEQ iFEQ0 = new IFEQ((InstructionHandle) null);
      BranchHandle branchHandle0 = BranchHandle.getBranchHandle(iFEQ0);
      LocalVariableGen[] localVariableGenArray0 = new LocalVariableGen[1];
      // Undeclared exception!
      try { 
        instructionList0.redirectLocalVariables(localVariableGenArray0, branchHandle0, branchHandle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "8t");
      Instruction instruction0 = pUSH0.getInstruction();
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionList instructionList1 = instructionList0.copy();
      InstructionHandle instructionHandle0 = InstructionHandle.getInstructionHandle(instruction0);
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionHandle0, (CompoundInstruction) pUSH0);
      InstructionHandle instructionHandle2 = instructionList1.getStart();
      instructionList1.insert(instructionHandle2, instructionList1);
      instructionList1.move(instructionHandle1, instructionHandle0, instructionHandle2);
      // Undeclared exception!
      instructionList0.redirectBranches(instructionHandle0, instructionHandle0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.STRING;
      PUSH pUSH0 = new PUSH(constantPoolGen0, objectType0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      LOOKUPSWITCH lOOKUPSWITCH0 = new LOOKUPSWITCH();
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) lOOKUPSWITCH0);
      // Undeclared exception!
      try { 
        instructionList0.redirectBranches(branchHandle0, branchHandle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "8t");
      Instruction instruction0 = pUSH0.getInstruction();
      InstructionList instructionList0 = new InstructionList(instruction0);
      InstructionHandle instructionHandle0 = instructionList0.append(instruction0, instruction0);
      InstructionList instructionList1 = instructionList0.copy();
      InstructionHandle instructionHandle1 = instructionList1.insert(instructionList1);
      // Undeclared exception!
      instructionList1.move(instructionHandle1, instructionHandle0, (InstructionHandle) null);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, (-701.12754));
      InstructionList instructionList0 = new InstructionList(pUSH0);
      InstructionHandle instructionHandle0 = instructionList0.insert(instructionList0);
      instructionHandle0.dispose();
      // Undeclared exception!
      try { 
        instructionList0.move(instructionHandle0, instructionHandle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, true);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      JSR jSR0 = new JSR();
      BranchHandle branchHandle0 = instructionList0.append((BranchInstruction) jSR0);
      // Undeclared exception!
      try { 
        instructionList0.move((InstructionHandle) branchHandle0, (InstructionHandle) branchHandle0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      // Undeclared exception!
      try { 
        instructionList0.insert((InstructionList) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Appending null InstructionList
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      IFNE iFNE0 = new IFNE();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNE0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, false);
      InstructionHandle instructionHandle0 = instructionList0.insert(instructionList0);
      instructionList0.insert(instructionHandle0, (CompoundInstruction) pUSH0);
      // Undeclared exception!
      try { 
        instructionList0.insert(instructionList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DUP_X2 dUP_X2_0 = new DUP_X2();
      InstructionList instructionList0 = new InstructionList(dUP_X2_0);
      // Undeclared exception!
      try { 
        instructionList0.insert((InstructionHandle) null, instructionList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      IFEQ iFEQ0 = new IFEQ((InstructionHandle) null);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFEQ0);
      // Undeclared exception!
      try { 
        instructionList0.insert((InstructionHandle) null, (Instruction) iFEQ0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Assigning branch instruction ifeq[153](3) -> null to plain handle
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      DUP2 dUP2_0 = new DUP2();
      // Undeclared exception!
      try { 
        instructionList0.insert((InstructionHandle) null, (Instruction) dUP2_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "-Ku9&0Tr%d7}_");
      InstructionList instructionList0 = new InstructionList(pUSH0);
      GOTO gOTO0 = new GOTO();
      BranchHandle branchHandle0 = BranchHandle.getBranchHandle(gOTO0);
      // Undeclared exception!
      try { 
        instructionList0.insert((InstructionHandle) branchHandle0, (Instruction) gOTO0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSR jSR0 = new JSR((InstructionHandle) null);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) jSR0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Character character0 = Character.valueOf('{');
      PUSH pUSH0 = new PUSH(constantPoolGen0, character0);
      // Undeclared exception!
      try { 
        instructionList0.insert((InstructionHandle) null, (CompoundInstruction) pUSH0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, (double) 216);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      // Undeclared exception!
      try { 
        instructionList0.insert((InstructionHandle) null, (BranchInstruction) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Assigning null to handle
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      IF_ICMPEQ iF_ICMPEQ0 = new IF_ICMPEQ((InstructionHandle) null);
      IfInstruction ifInstruction0 = iF_ICMPEQ0.negate();
      // Undeclared exception!
      try { 
        instructionList0.insert((InstructionHandle) null, (BranchInstruction) ifInstruction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      D2F d2F0 = new D2F();
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) d2F0);
      IFLT iFLT0 = new IFLT(instructionHandle0);
      InstructionList instructionList1 = new InstructionList((BranchInstruction) iFLT0);
      instructionList1.insert(instructionHandle0, instructionList0);
      // Undeclared exception!
      instructionList1.insert((Instruction) iFLT0, instructionList0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "8t");
      Instruction instruction0 = pUSH0.getInstruction();
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionHandle instructionHandle0 = InstructionHandle.getInstructionHandle(instruction0);
      instructionList0.move(instructionHandle0, instructionHandle0, (InstructionHandle) null);
      // Undeclared exception!
      try { 
        instructionList0.insert(instruction0, instructionList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, 2166);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      IFEQ iFEQ0 = new IFEQ();
      // Undeclared exception!
      try { 
        instructionList0.insert((Instruction) iFEQ0, instructionList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CASTORE cASTORE0 = (CASTORE)InstructionConstants.CASTORE;
      GOTO_W gOTO_W0 = new GOTO_W();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) gOTO_W0);
      // Undeclared exception!
      try { 
        instructionList0.insert((Instruction) cASTORE0, (Instruction) gOTO_W0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE();
      IfInstruction ifInstruction0 = iF_ICMPLE0.negate();
      FCMPL fCMPL0 = (FCMPL)InstructionConstants.FCMPL;
      InstructionList instructionList0 = new InstructionList((BranchInstruction) ifInstruction0);
      // Undeclared exception!
      try { 
        instructionList0.insert((Instruction) fCMPL0, (CompoundInstruction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, (-25492));
      // Undeclared exception!
      try { 
        instructionList0.insert((Instruction) iNSTANCEOF0, (CompoundInstruction) pUSH0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "8t");
      Instruction instruction0 = pUSH0.getInstruction();
      InstructionList instructionList0 = new InstructionList(instruction0);
      // Undeclared exception!
      try { 
        instructionList0.insert((Instruction) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Assigning null to handle
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      IFLT iFLT0 = new IFLT();
      // Undeclared exception!
      try { 
        instructionList0.insert((Instruction) iFLT0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      // Undeclared exception!
      try { 
        instructionList0.insert((CompoundInstruction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DREM dREM0 = new DREM();
      InstructionList instructionList0 = new InstructionList(dREM0);
      // Undeclared exception!
      try { 
        instructionList0.insert((BranchInstruction) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Assigning null to handle
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FCONST fCONST0 = (FCONST)InstructionConstants.FCONST_0;
      InstructionList instructionList0 = new InstructionList(fCONST0);
      PUSH pUSH0 = new PUSH((ConstantPoolGen) null, (String) null);
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) fCONST0, (CompoundInstruction) pUSH0);
      instructionHandle0.dispose();
      // Undeclared exception!
      try { 
        instructionList0.getInstructions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DUP_X2 dUP_X2_0 = new DUP_X2();
      InstructionList instructionList0 = new InstructionList(dUP_X2_0);
      IF_ACMPNE iF_ACMPNE0 = new IF_ACMPNE();
      instructionList0.append((BranchInstruction) iF_ACMPNE0);
      // Undeclared exception!
      try { 
        instructionList0.getInstructions();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE();
      IfInstruction ifInstruction0 = iF_ICMPLE0.negate();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) ifInstruction0);
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) ifInstruction0);
      FCMPL fCMPL0 = (FCMPL)InstructionConstants.FCMPL;
      InstructionHandle instructionHandle0 = instructionList0.insert((InstructionHandle) branchHandle0, (Instruction) fCMPL0);
      instructionList0.delete((Instruction) ifInstruction0, (Instruction) ifInstruction0);
      instructionList0.move((InstructionHandle) branchHandle0, instructionHandle0);
      // Undeclared exception!
      try { 
        instructionList0.getInstructionHandles();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      IFNULL iFNULL0 = new IFNULL();
      IfInstruction ifInstruction0 = iFNULL0.negate();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) ifInstruction0);
      byte[] byteArray0 = new byte[2];
      InstructionList instructionList1 = new InstructionList(byteArray0);
      InstructionHandle instructionHandle0 = instructionList0.append(instructionList1);
      instructionList1.delete(instructionHandle0);
      // Undeclared exception!
      try { 
        instructionList1.getInstructionHandles();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DUP_X2 dUP_X2_0 = new DUP_X2();
      InstructionList instructionList0 = new InstructionList(dUP_X2_0);
      InstructionList instructionList1 = instructionList0.copy();
      IF_ACMPNE iF_ACMPNE0 = new IF_ACMPNE();
      IfInstruction ifInstruction0 = iF_ACMPNE0.negate();
      instructionList0.append((BranchInstruction) ifInstruction0);
      instructionList1.append(instructionList0);
      // Undeclared exception!
      try { 
        instructionList1.getByteCode();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Target of if_acmpeq[165](3) is invalid null handle
         //
         verifyException("org.apache.bcel.generic.BranchInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      I2D i2D0 = (I2D)InstructionConstants.I2D;
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) i2D0);
      instructionList0.dispose();
      IFLE iFLE0 = new IFLE(instructionHandle0);
      InstructionList instructionList1 = new InstructionList((BranchInstruction) iFLE0);
      // Undeclared exception!
      try { 
        instructionList1.getByteCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSR jSR0 = new JSR();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) jSR0);
      // Undeclared exception!
      try { 
        instructionList0.getByteCode();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[6] = 27841;
      // Undeclared exception!
      try { 
        InstructionList.findHandle((InstructionHandle[]) null, intArray0, 7, 27841);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[1];
      int[] intArray0 = new int[3];
      // Undeclared exception!
      try { 
        InstructionList.findHandle(instructionHandleArray0, intArray0, 0, (-338));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "pQ'qMzngVl`j");
      InstructionList instructionList0 = pUSH0.getInstructionList();
      // Undeclared exception!
      try { 
        instructionList0.findHandle(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DALOAD dALOAD0 = new DALOAD();
      InstructionList instructionList0 = new InstructionList(dALOAD0);
      instructionList0.setPositions(false);
      instructionList0.insert((Instruction) dALOAD0);
      // Undeclared exception!
      try { 
        instructionList0.findHandle(49);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      LOR lOR0 = new LOR();
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) lOR0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 113.5317462623);
      InstructionHandle instructionHandle1 = instructionList0.insert((CompoundInstruction) pUSH0);
      instructionList0.delete(instructionHandle0, instructionHandle1);
      // Undeclared exception!
      try { 
        instructionList0.dispose();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      I2L i2L0 = new I2L();
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) i2L0);
      IF_ICMPLT iF_ICMPLT0 = new IF_ICMPLT(instructionHandle0);
      try { 
        instructionList0.delete(instructionHandle0, instructionHandle0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // {   -1: i2l[133](1) }
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE((InstructionHandle) null);
      IfInstruction ifInstruction0 = iF_ICMPLE0.negate();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) ifInstruction0);
      // Undeclared exception!
      try { 
        instructionList0.delete((InstructionHandle) null, (InstructionHandle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LDC lDC0 = new LDC();
      InstructionList instructionList0 = new InstructionList(lDC0);
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[6];
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) lDC0);
      instructionHandleArray0[0] = instructionHandle0;
      IF_ICMPGT iF_ICMPGT0 = new IF_ICMPGT(instructionHandle0);
      // Undeclared exception!
      try { 
        instructionList0.delete(instructionHandle0, instructionHandleArray0[0]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      IREM iREM0 = new IREM();
      InstructionHandle instructionHandle0 = InstructionHandle.getInstructionHandle(iREM0);
      // Undeclared exception!
      try { 
        instructionList0.delete(instructionHandle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE();
      IfInstruction ifInstruction0 = iF_ICMPLE0.negate();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) ifInstruction0);
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) ifInstruction0);
      IFLT iFLT0 = new IFLT(branchHandle0);
      try { 
        instructionList0.delete((Instruction) ifInstruction0, (Instruction) ifInstruction0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // {   -1: if_icmpgt[163](3) -> null }
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      IF_ICMPGT iF_ICMPGT0 = new IF_ICMPGT();
      InstructionList instructionList0 = new InstructionList();
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) iF_ICMPGT0);
      FCMPL fCMPL0 = new FCMPL();
      InstructionHandle instructionHandle0 = instructionList0.insert((InstructionHandle) branchHandle0, (Instruction) fCMPL0);
      InstructionList instructionList1 = new InstructionList((BranchInstruction) iF_ICMPGT0);
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionList1);
      instructionHandle0.setNext(instructionHandle1);
      // Undeclared exception!
      instructionList0.delete((Instruction) iF_ICMPGT0, (Instruction) iF_ICMPGT0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE();
      IfInstruction ifInstruction0 = iF_ICMPLE0.negate();
      InstructionList instructionList0 = new InstructionList();
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) ifInstruction0);
      branchHandle0.setNext(branchHandle0);
      // Undeclared exception!
      try { 
        instructionList0.delete((Instruction) ifInstruction0, (Instruction) ifInstruction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      TABLESWITCH tABLESWITCH0 = new TABLESWITCH();
      // Undeclared exception!
      try { 
        instructionList0.delete((Instruction) tABLESWITCH0, (Instruction) tABLESWITCH0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      F2D f2D0 = new F2D();
      // Undeclared exception!
      try { 
        instructionList0.delete((Instruction) f2D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction f2d[141](1) is not contained in this list.
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      F2D f2D0 = new F2D();
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) f2D0);
      IF_ACMPEQ iF_ACMPEQ0 = new IF_ACMPEQ(instructionHandle0);
      try { 
        instructionList0.delete((Instruction) f2D0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // {   -1: f2d[141](1) }
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "8t");
      Instruction instruction0 = pUSH0.getInstruction();
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionList instructionList1 = instructionList0.copy();
      InstructionHandle instructionHandle0 = InstructionHandle.getInstructionHandle(instruction0);
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionHandle0, (CompoundInstruction) pUSH0);
      instructionList1.insert(instructionHandle1, instructionList1);
      instructionList0.delete(instructionHandle1);
      // Undeclared exception!
      try { 
        instructionList0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSR_W jSR_W0 = new JSR_W();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) jSR_W0);
      // Undeclared exception!
      try { 
        instructionList0.copy();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "");
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionHandle instructionHandle0 = instructionList0.insert(instructionList0);
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE();
      BranchHandle branchHandle0 = instructionList0.append((BranchInstruction) iF_ICMPNE0);
      IFNULL iFNULL0 = new IFNULL(instructionHandle0);
      IfInstruction ifInstruction0 = iFNULL0.negate();
      instructionList0.insert(instructionHandle0, (BranchInstruction) ifInstruction0);
      // Undeclared exception!
      instructionList0.contains((InstructionHandle) branchHandle0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "8t");
      Instruction instruction0 = pUSH0.getInstruction();
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionHandle instructionHandle0 = InstructionHandle.getInstructionHandle(instruction0);
      instructionList0.move(instructionHandle0, instructionHandle0, (InstructionHandle) null);
      // Undeclared exception!
      try { 
        instructionList0.append(instructionList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (long) 695);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      // Undeclared exception!
      try { 
        instructionList0.append((InstructionHandle) null, instructionList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 131);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      // Undeclared exception!
      try { 
        instructionList0.append(instructionHandleArray0[0], (Instruction) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Assigning null to handle
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      FALOAD fALOAD0 = new FALOAD();
      // Undeclared exception!
      try { 
        instructionList0.append((InstructionHandle) null, (Instruction) fALOAD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "8t");
      Instruction instruction0 = pUSH0.getInstruction();
      InstructionList instructionList0 = new InstructionList(instruction0);
      // Undeclared exception!
      try { 
        instructionList0.append((InstructionHandle) null, (CompoundInstruction) pUSH0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instructionList0.append((InstructionHandle) null, (BranchInstruction) iF_ICMPLE0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      DSUB dSUB0 = (DSUB)InstructionConstants.DSUB;
      // Undeclared exception!
      try { 
        instructionList0.append((Instruction) dSUB0, instructionList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction dsub[103](1) is not contained in this list.
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "8t");
      Instruction instruction0 = pUSH0.getInstruction();
      InstructionList instructionList0 = new InstructionList(instruction0);
      int[] intArray0 = new int[6];
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[6];
      InstructionHandle instructionHandle0 = instructionList0.append(instruction0);
      SWITCH sWITCH0 = new SWITCH(intArray0, instructionHandleArray0, instructionHandle0);
      InstructionList instructionList1 = sWITCH0.getInstructionList();
      instructionList1.append(instructionHandle0, instructionList0);
      IFNULL iFNULL0 = new IFNULL();
      // Undeclared exception!
      instructionList1.append((Instruction) iFNULL0, instructionList0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "8t");
      Instruction instruction0 = pUSH0.getInstruction();
      InstructionList instructionList0 = new InstructionList(instruction0);
      InstructionList instructionList1 = instructionList0.copy();
      InstructionHandle instructionHandle0 = instructionList1.insert(instructionList1);
      instructionList1.insert(instructionHandle0, (CompoundInstruction) pUSH0);
      // Undeclared exception!
      try { 
        instructionList0.append(instruction0, instructionList1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      IFNE iFNE0 = new IFNE();
      // Undeclared exception!
      try { 
        instructionList0.append((Instruction) iFNE0, (Instruction) iFNE0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "pQ'qMzngVl`j");
      InstructionList instructionList0 = pUSH0.getInstructionList();
      LSUB lSUB0 = new LSUB();
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      instructionHandle0.setPrev(instructionHandle0);
      // Undeclared exception!
      instructionList0.append((Instruction) lSUB0, (CompoundInstruction) pUSH0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE((InstructionHandle) null);
      IfInstruction ifInstruction0 = iF_ICMPLE0.negate();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) ifInstruction0);
      // Undeclared exception!
      try { 
        instructionList0.append((Instruction) iF_ICMPLE0, (CompoundInstruction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 0.75F);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      LDC_W lDC_W0 = new LDC_W();
      // Undeclared exception!
      try { 
        instructionList0.append((Instruction) lDC_W0, (CompoundInstruction) pUSH0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      IFGT iFGT0 = new IFGT((InstructionHandle) null);
      IfInstruction ifInstruction0 = iFGT0.negate();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) ifInstruction0);
      // Undeclared exception!
      try { 
        instructionList0.append((Instruction) iFGT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Assigning branch instruction ifgt[157](3) -> null to plain handle
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE();
      IfInstruction ifInstruction0 = iF_ICMPLE0.negate();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) ifInstruction0);
      // Undeclared exception!
      try { 
        instructionList0.append((Instruction) iF_ICMPLE0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      IFNE iFNE0 = new IFNE();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNE0);
      // Undeclared exception!
      try { 
        instructionList0.append((CompoundInstruction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF(87);
      InstructionList instructionList0 = new InstructionList(iNSTANCEOF0);
      // Undeclared exception!
      try { 
        instructionList0.append((BranchInstruction) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Assigning null to handle
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ILOAD iLOAD0 = (ILOAD)InstructionConstants.ILOAD_2;
      InstructionList instructionList0 = new InstructionList(iLOAD0);
      InstructionHandle instructionHandle0 = instructionList0.insert(instructionList0);
      GOTO_W gOTO_W0 = new GOTO_W(instructionHandle0);
      instructionList0.insert(instructionHandle0, (BranchInstruction) gOTO_W0);
      // Undeclared exception!
      try { 
        instructionList0.append((BranchInstruction) gOTO_W0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      InstructionList instructionList0 = null;
      try {
        instructionList0 = new InstructionList((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      InstructionList instructionList0 = null;
      try {
        instructionList0 = new InstructionList((Instruction) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Assigning null to handle
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      IF_ACMPNE iF_ACMPNE0 = new IF_ACMPNE();
      InstructionList instructionList0 = null;
      try {
        instructionList0 = new InstructionList((Instruction) iF_ACMPNE0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      InstructionList instructionList0 = null;
      try {
        instructionList0 = new InstructionList((CompoundInstruction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      InstructionList instructionList0 = null;
      try {
        instructionList0 = new InstructionList((BranchInstruction) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Assigning null to handle
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSR jSR0 = new JSR((InstructionHandle) null);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) jSR0);
      // Undeclared exception!
      try { 
        instructionList0.setPositions(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Target of jsr[168](3) is invalid null handle
         //
         verifyException("org.apache.bcel.generic.BranchInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "8t");
      Instruction instruction0 = pUSH0.getInstruction();
      InstructionList instructionList0 = new InstructionList(instruction0);
      instructionList0.setPositions(false);
      instructionList0.getInstructionPositions();
      assertEquals(1, instructionList0.size());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "8t");
      Instruction instruction0 = pUSH0.getInstruction();
      InstructionList instructionList0 = new InstructionList(instruction0);
      instructionList0.contains(instruction0);
      assertEquals(1, instructionList0.getLength());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "8t");
      Instruction instruction0 = pUSH0.getInstruction();
      InstructionList instructionList0 = new InstructionList(instruction0);
      InstructionList instructionList1 = instructionList0.copy();
      boolean boolean0 = instructionList1.contains(instruction0);
      assertFalse(boolean0);
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList0.getLength());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SALOAD sALOAD0 = (SALOAD)InstructionConstants.SALOAD;
      InstructionList instructionList0 = new InstructionList(sALOAD0);
      IFEQ iFEQ0 = new IFEQ();
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) iFEQ0);
      InstructionHandle instructionHandle0 = new InstructionHandle(sALOAD0);
      L2F l2F0 = (L2F)InstructionConstants.L2F;
      InstructionHandle instructionHandle1 = InstructionHandle.getInstructionHandle(l2F0);
      // Undeclared exception!
      try { 
        instructionList0.move(instructionHandle0, (InstructionHandle) branchHandle0, instructionHandle1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "8t");
      Instruction instruction0 = pUSH0.getInstruction();
      InstructionList instructionList0 = new InstructionList(instruction0);
      InstructionList instructionList1 = instructionList0.copy();
      // Undeclared exception!
      try { 
        instructionList1.insert(instruction0, instructionList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ldc[18](2) 2 is not contained in this list.
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      instructionList0.insert(instructionList0);
      assertEquals(0, instructionList0.size());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "8t");
      Instruction instruction0 = pUSH0.getInstruction();
      InstructionList instructionList0 = new InstructionList(instruction0);
      InstructionHandle instructionHandle0 = instructionList0.append(instruction0, instruction0);
      instructionList0.insert(instructionHandle0, instructionList0);
      // Undeclared exception!
      try { 
        instructionList0.insert(instruction0, instruction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ldc[18](2) 2 is not contained in this list.
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "8t");
      Instruction instruction0 = pUSH0.getInstruction();
      InstructionList instructionList0 = new InstructionList(instruction0);
      InstructionList instructionList1 = instructionList0.copy();
      instructionList1.insert(instructionList1);
      instructionList1.append(instructionList0);
      assertTrue(instructionList0.isEmpty());
      assertEquals(1, instructionList1.getLength());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 1.0F);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      IFNE iFNE0 = new IFNE();
      // Undeclared exception!
      try { 
        instructionList0.append((Instruction) iFNE0, instructionList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (long) 695);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      IFEQ iFEQ0 = new IFEQ((InstructionHandle) null);
      BranchHandle branchHandle0 = BranchHandle.getBranchHandle(iFEQ0);
      instructionList0.append((InstructionHandle) branchHandle0, (CompoundInstruction) pUSH0);
      instructionList0.append((InstructionHandle) branchHandle0, instructionList0);
      assertEquals(0, instructionList0.getLength());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "8t");
      Instruction instruction0 = pUSH0.getInstruction();
      InstructionList instructionList0 = new InstructionList(instruction0);
      InstructionHandle instructionHandle0 = instructionList0.append(instruction0);
      instructionList0.append(instructionHandle0, instructionList0);
      instructionList0.copy();
      assertEquals(0, instructionList0.size());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[1] = (-1449);
      InstructionHandle instructionHandle0 = InstructionList.findHandle((InstructionHandle[]) null, intArray0, 7, (-1029));
      assertNull(instructionHandle0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      instructionList0.isEmpty();
      assertEquals(0, instructionList0.getLength());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, "o#(|dlCb");
      InstructionList instructionList0 = new InstructionList(pUSH0);
      boolean boolean0 = instructionList0.isEmpty();
      assertEquals(1, instructionList0.getLength());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "8t");
      Instruction instruction0 = pUSH0.getInstruction();
      InstructionList instructionList0 = new InstructionList(instruction0);
      int int0 = instructionList0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      instructionList0.setPositions();
      instructionList0.getInstructionPositions();
      assertEquals(0, instructionList0.size());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      instructionList0.getInstructionPositions();
      assertEquals(0, instructionList0.getLength());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      instructionList0.addObserver((InstructionListObserver) null);
      // Undeclared exception!
      try { 
        instructionList0.update();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      instructionList0.update();
      assertEquals(0, instructionList0.size());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      instructionList0.addObserver((InstructionListObserver) null);
      instructionList0.removeObserver((InstructionListObserver) null);
      instructionList0.update();
      assertFalse(instructionList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      instructionList0.removeObserver((InstructionListObserver) null);
      assertFalse(instructionList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      instructionList0.addObserver((InstructionListObserver) null);
      instructionList0.addObserver((InstructionListObserver) null);
      assertEquals(7, instructionList0.size());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, (-90.900406F));
      InstructionList instructionList0 = pUSH0.getInstructionList();
      CodeExceptionGen[] codeExceptionGenArray0 = new CodeExceptionGen[4];
      ObjectType objectType0 = Type.THROWABLE;
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      CodeExceptionGen codeExceptionGen0 = new CodeExceptionGen(instructionHandle0, instructionHandle0, instructionHandle0, objectType0);
      codeExceptionGenArray0[0] = codeExceptionGen0;
      IF_ICMPEQ iF_ICMPEQ0 = new IF_ICMPEQ();
      BranchHandle branchHandle0 = BranchHandle.getBranchHandle(iF_ICMPEQ0);
      // Undeclared exception!
      try { 
        instructionList0.redirectExceptionHandlers(codeExceptionGenArray0, instructionHandle0, branchHandle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (-90.2001F));
      InstructionList instructionList0 = pUSH0.getInstructionList();
      CodeExceptionGen[] codeExceptionGenArray0 = new CodeExceptionGen[4];
      ObjectType objectType0 = Type.THROWABLE;
      MethodGen methodGen0 = new MethodGen(200, objectType0, objectType0.NO_ARGS, (String[]) null, "}T", "}T", instructionList0, constantPoolGen0);
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      CodeExceptionGen codeExceptionGen0 = methodGen0.addExceptionHandler(instructionHandle0, instructionHandle0, instructionHandle0, objectType0);
      codeExceptionGenArray0[0] = codeExceptionGen0;
      codeExceptionGenArray0[1] = codeExceptionGenArray0[0];
      codeExceptionGenArray0[2] = codeExceptionGenArray0[0];
      IF_ICMPEQ iF_ICMPEQ0 = new IF_ICMPEQ(instructionHandle0);
      BranchHandle branchHandle0 = BranchHandle.getBranchHandle(iF_ICMPEQ0);
      codeExceptionGenArray0[3] = codeExceptionGenArray0[1];
      instructionList0.redirectExceptionHandlers(codeExceptionGenArray0, branchHandle0, branchHandle0);
      assertEquals(1, instructionList0.size());
      assertFalse(branchHandle0.hasTargeters());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      DREM dREM0 = new DREM();
      InstructionList instructionList0 = new InstructionList(dREM0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, (long) 3495);
      instructionList0.insert((CompoundInstruction) pUSH0);
      instructionList0.replaceConstantPool(constantPoolGen0, constantPoolGen0);
      assertEquals(2, instructionList0.getLength());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "8t");
      Instruction instruction0 = pUSH0.getInstruction();
      InstructionList instructionList0 = new InstructionList(instruction0);
      int[] intArray0 = new int[6];
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[6];
      InstructionHandle instructionHandle0 = instructionList0.append(instruction0);
      SWITCH sWITCH0 = new SWITCH(intArray0, instructionHandleArray0, instructionHandle0);
      InstructionList instructionList1 = sWITCH0.getInstructionList();
      instructionList0.insert(instruction0, instructionList1);
      instructionList0.copy();
      assertEquals(3, instructionList0.getLength());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      InstructionHandle[] instructionHandleArray0 = instructionList0.getInstructionHandles();
      assertEquals(21, instructionHandleArray0.length);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSR jSR0 = new JSR((InstructionHandle) null);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) jSR0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instructionList0.forEach(consumer0);
      assertEquals(1, instructionList0.getLength());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      String string0 = instructionList0.toString(false);
      assertEquals("   0: nop\n   1: nop\n   2: nop\n   3: nop\n   4: nop\n   5: nop\n   6: nop\n   7: nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      Instruction[] instructionArray0 = instructionList0.getInstructions();
      assertEquals(4, instructionArray0.length);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      byte[] byteArray1 = instructionList0.getByteCode();
      assertEquals(8, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "8t");
      Instruction instruction0 = pUSH0.getInstruction();
      InstructionList instructionList0 = new InstructionList(instruction0);
      int[] intArray0 = new int[6];
      intArray0[4] = (-677);
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[6];
      InstructionHandle instructionHandle0 = instructionList0.append(instruction0);
      instructionHandleArray0[0] = instructionHandle0;
      instructionHandleArray0[1] = instructionHandle0;
      instructionHandleArray0[2] = instructionHandle0;
      instructionHandleArray0[3] = instructionHandle0;
      instructionHandleArray0[4] = instructionHandle0;
      instructionHandleArray0[5] = instructionHandle0;
      SWITCH sWITCH0 = new SWITCH(intArray0, instructionHandleArray0, instructionHandle0);
      InstructionList instructionList1 = sWITCH0.getInstructionList();
      instructionList0.insert(instruction0, instructionList1);
      instructionList0.setPositions(true);
      assertEquals(3, instructionList0.size());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[3] = (byte) (-87);
      InstructionList instructionList0 = new InstructionList(byteArray0);
      instructionList0.setPositions(true);
      assertEquals(8, instructionList0.getLength());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      ICONST iCONST0 = (ICONST)InstructionConstants.ICONST_5;
      InstructionList instructionList1 = new InstructionList(iCONST0);
      InstructionHandle instructionHandle0 = instructionList0.append(instructionList1);
      GOTO gOTO0 = new GOTO(instructionHandle0);
      instructionHandle0.swapInstruction(gOTO0);
      // Undeclared exception!
      try { 
        instructionList0.setPositions(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Branch instruction goto:goto[167](3) -> <points to itself> not contained in BranchHandle.
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      LDC lDC0 = new LDC();
      InstructionList instructionList0 = new InstructionList(lDC0);
      int[] intArray0 = new int[6];
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[6];
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) lDC0);
      instructionHandleArray0[3] = instructionHandle0;
      InstructionHandle instructionHandle1 = new InstructionHandle(lDC0);
      instructionList0.delete(instructionHandle0, instructionHandle1);
      SWITCH sWITCH0 = new SWITCH(intArray0, instructionHandleArray0, instructionHandle1);
      InstructionList instructionList1 = sWITCH0.getInstructionList();
      instructionList0.insert((Instruction) lDC0, instructionList1);
      // Undeclared exception!
      try { 
        instructionList0.setPositions(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Branch target of tableswitch:null not in instruction list
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "8t");
      Instruction instruction0 = pUSH0.getInstruction();
      InstructionList instructionList0 = new InstructionList(instruction0);
      int[] intArray0 = new int[6];
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[6];
      InstructionHandle instructionHandle0 = instructionList0.append(instruction0);
      instructionHandleArray0[3] = instructionHandle0;
      SWITCH sWITCH0 = new SWITCH(intArray0, instructionHandleArray0, instructionHandleArray0[3]);
      InstructionList instructionList1 = sWITCH0.getInstructionList();
      instructionList0.insert(instruction0, instructionList1);
      // Undeclared exception!
      try { 
        instructionList0.setPositions(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      ICONST iCONST0 = (ICONST)InstructionConstants.ICONST_5;
      InstructionList instructionList1 = new InstructionList(iCONST0);
      InstructionHandle instructionHandle0 = instructionList0.append(instructionList1);
      GOTO gOTO0 = new GOTO(instructionHandle0);
      instructionList0.append((BranchInstruction) gOTO0);
      instructionList0.setPositions(true);
      assertEquals(11, instructionList0.getLength());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      LDC lDC0 = new LDC();
      InstructionList instructionList0 = new InstructionList(lDC0);
      int[] intArray0 = new int[6];
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[6];
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) lDC0);
      instructionHandleArray0[0] = instructionHandle0;
      instructionHandleArray0[3] = instructionHandle0;
      instructionList0.delete(instructionHandle0, instructionHandleArray0[3]);
      SWITCH sWITCH0 = new SWITCH(intArray0, instructionHandleArray0, instructionHandleArray0[0]);
      InstructionList instructionList1 = sWITCH0.getInstructionList();
      instructionList0.insert((Instruction) lDC0, instructionList1);
      // Undeclared exception!
      try { 
        instructionList0.setPositions(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Branch target of tableswitch:null not in instruction list
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      F2L f2L0 = new F2L();
      InstructionList instructionList0 = new InstructionList(f2L0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 377L);
      InstructionList instructionList1 = pUSH0.getInstructionList();
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) f2L0, (CompoundInstruction) pUSH0);
      boolean boolean0 = instructionList1.contains(instructionHandle0);
      assertEquals(2, instructionList0.getLength());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      boolean boolean0 = instructionList0.contains((InstructionHandle) null);
      assertFalse(boolean0);
      assertEquals(0, instructionList0.getLength());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      F2L f2L0 = new F2L();
      InstructionList instructionList0 = new InstructionList(f2L0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 377L);
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) f2L0, (CompoundInstruction) pUSH0);
      boolean boolean0 = instructionList0.contains(instructionHandle0);
      assertEquals(2, instructionList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE();
      IfInstruction ifInstruction0 = iF_ICMPLE0.negate();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) ifInstruction0);
      instructionList0.delete((Instruction) ifInstruction0, (Instruction) ifInstruction0);
      assertEquals(0, instructionList0.size());
      
      instructionList0.append((BranchInstruction) ifInstruction0);
      assertEquals(1, instructionList0.getLength());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      ALOAD aLOAD0 = new ALOAD();
      // Undeclared exception!
      try { 
        instructionList0.delete((Instruction) aLOAD0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      F2D f2D0 = new F2D();
      instructionList0.append((Instruction) f2D0);
      instructionList0.delete((Instruction) f2D0);
      assertEquals(0, instructionList0.size());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "8t");
      Instruction instruction0 = pUSH0.getInstruction();
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionHandle instructionHandle0 = InstructionHandle.getInstructionHandle(instruction0);
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionHandle0, (CompoundInstruction) pUSH0);
      instructionList0.delete(instructionHandle1);
      assertEquals(1, instructionList0.size());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[4];
      InstructionList instructionList0 = new InstructionList();
      IFEQ iFEQ0 = new IFEQ();
      BranchHandle branchHandle0 = BranchHandle.getBranchHandle(iFEQ0);
      instructionList0.append((InstructionHandle) branchHandle0, (BranchInstruction) iFEQ0);
      instructionHandleArray0[1] = (InstructionHandle) branchHandle0;
      instructionList0.move(instructionHandleArray0[1], (InstructionHandle) branchHandle0, (InstructionHandle) null);
      assertEquals(1, instructionList0.size());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "8t");
      Instruction instruction0 = pUSH0.getInstruction();
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionHandle instructionHandle0 = InstructionHandle.getInstructionHandle(instruction0);
      instructionList0.move(instructionHandle0, instructionHandle0, (InstructionHandle) null);
      // Undeclared exception!
      try { 
        instructionList0.append(instruction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      ARRAYLENGTH aRRAYLENGTH0 = new ARRAYLENGTH();
      InstructionHandle instructionHandle0 = InstructionHandle.getInstructionHandle(aRRAYLENGTH0);
      IFEQ iFEQ0 = new IFEQ(instructionHandle0);
      IfInstruction ifInstruction0 = iFEQ0.negate();
      BranchHandle branchHandle0 = instructionList0.insert(instructionHandle0, (BranchInstruction) ifInstruction0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Character character0 = Character.valueOf('P');
      PUSH pUSH0 = new PUSH(constantPoolGen0, character0);
      InstructionHandle instructionHandle1 = instructionList0.insert((CompoundInstruction) pUSH0);
      instructionList0.move((InstructionHandle) branchHandle0, (InstructionHandle) branchHandle0, instructionHandle1);
      assertFalse(instructionList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      FCONST fCONST0 = (FCONST)InstructionConstants.FCONST_0;
      InstructionList instructionList0 = new InstructionList(fCONST0);
      PUSH pUSH0 = new PUSH((ConstantPoolGen) null, (String) null);
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) fCONST0, (CompoundInstruction) pUSH0);
      IF_ICMPLT iF_ICMPLT0 = new IF_ICMPLT(instructionHandle0);
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) iF_ICMPLT0);
      InstructionHandle instructionHandle1 = instructionList0.append((InstructionHandle) branchHandle0, (CompoundInstruction) pUSH0);
      instructionList0.insert(instructionHandle1, (BranchInstruction) iF_ICMPLT0);
      // Undeclared exception!
      try { 
        instructionList0.move(instructionHandle1, (InstructionHandle) branchHandle0, instructionHandle0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid range: From   -1: aconst_null[1](1) to   -1: if_icmplt[161](3) -> -1 contains target   -1: aconst_null[1](1)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      CASTORE cASTORE0 = (CASTORE)InstructionConstants.CASTORE;
      InstructionHandle instructionHandle0 = InstructionHandle.getInstructionHandle(cASTORE0);
      IFLT iFLT0 = new IFLT(instructionHandle0);
      InstructionList instructionList1 = new InstructionList((BranchInstruction) iFLT0);
      InstructionHandle instructionHandle1 = instructionList1.getStart();
      // Undeclared exception!
      try { 
        instructionList0.move(instructionHandle1, instructionHandle0, instructionHandle0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid range: From   -1: iflt[155](3) -> -1 to   -1: castore[85](1) contains target   -1: castore[85](1)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      // Undeclared exception!
      try { 
        instructionList0.move(instructionHandle0, (InstructionHandle) null, instructionHandle0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid null handle: From    0: nop[0](1) to null
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      // Undeclared exception!
      try { 
        instructionList0.move((InstructionHandle) null, (InstructionHandle) null, (InstructionHandle) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid null handle: From null to null
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "");
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionHandle instructionHandle0 = instructionList0.insert(instructionList0);
      // Undeclared exception!
      try { 
        instructionList0.insert(instructionHandle0, (InstructionList) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Inserting null InstructionList
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      InstructionHandle instructionHandle0 = instructionList0.append(instructionList0);
      assertNotNull(instructionHandle0);
      
      instructionList0.append(instructionList0);
      assertTrue(instructionList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      // Undeclared exception!
      try { 
        instructionList0.append((InstructionList) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Appending null InstructionList
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      ARRAYLENGTH aRRAYLENGTH0 = new ARRAYLENGTH();
      InstructionHandle instructionHandle0 = InstructionHandle.getInstructionHandle(aRRAYLENGTH0);
      InstructionList instructionList1 = new InstructionList(aRRAYLENGTH0);
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionHandle0, instructionList1);
      IFEQ iFEQ0 = new IFEQ(instructionHandle0);
      IfInstruction ifInstruction0 = iFEQ0.negate();
      BranchHandle branchHandle0 = instructionList0.insert(instructionHandle1, (BranchInstruction) ifInstruction0);
      instructionList0.append((InstructionHandle) branchHandle0, instructionList1);
      assertFalse(instructionList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      // Undeclared exception!
      try { 
        instructionList0.append((InstructionHandle) null, (InstructionList) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Appending null InstructionList
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-100);
      InstructionList instructionList0 = null;
      try {
        instructionList0 = new InstructionList(byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.EOFException
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      InstructionHandle instructionHandle0 = instructionList0.findHandle((int) (byte) (-58));
      assertNull(instructionHandle0);
      assertEquals(9, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte) (-98);
      byteArray0[2] = (byte) (-98);
      InstructionList instructionList0 = null;
      try {
        instructionList0 = new InstructionList(byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't find target for branch: ifle[158](3) -> null
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte) (-58);
      InstructionList instructionList0 = new InstructionList(byteArray0);
      InstructionList instructionList1 = instructionList0.copy();
      assertEquals(6, instructionList1.getLength());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      ARRAYLENGTH aRRAYLENGTH0 = new ARRAYLENGTH();
      InstructionHandle instructionHandle0 = InstructionHandle.getInstructionHandle(aRRAYLENGTH0);
      IFEQ iFEQ0 = new IFEQ(instructionHandle0);
      IfInstruction ifInstruction0 = iFEQ0.negate();
      BranchHandle branchHandle0 = instructionList0.insert(instructionHandle0, (BranchInstruction) ifInstruction0);
      instructionList0.move((InstructionHandle) branchHandle0, (InstructionHandle) branchHandle0, instructionHandle0);
      assertFalse(instructionList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Float float0 = new Float(794.03204F);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) float0);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      GOTO_W gOTO_W0 = new GOTO_W(instructionHandle0);
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) gOTO_W0);
      branchHandle0.addTargeter(gOTO_W0);
      try { 
        instructionList0.delete((InstructionHandle) branchHandle0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // {   -1: goto_w[200](5) -> null }
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "pQ'qMzngVl`j");
      InstructionList instructionList0 = pUSH0.getInstructionList();
      LSUB lSUB0 = new LSUB();
      // Undeclared exception!
      try { 
        instructionList0.append((Instruction) lSUB0, (CompoundInstruction) pUSH0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction lsub[101](1) is not contained in this list.
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      instructionList0.getInstructions();
      assertEquals(0, instructionList0.getLength());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      instructionList0.iterator();
      assertEquals(0, instructionList0.getLength());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE();
      IfInstruction ifInstruction0 = iF_ICMPLE0.negate();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) ifInstruction0);
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) ifInstruction0);
      // Undeclared exception!
      try { 
        instructionList0.move((InstructionHandle) branchHandle0, (InstructionHandle) branchHandle0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid range: From   -1: if_icmpgt[163](3) -> null to   -1: if_icmpgt[163](3) -> null contains target   -1: if_icmpgt[163](3) -> null
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      IF_ICMPEQ iF_ICMPEQ0 = new IF_ICMPEQ();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iF_ICMPEQ0);
      Character character0 = Character.valueOf('O');
      PUSH pUSH0 = new PUSH((ConstantPoolGen) null, character0);
      InstructionHandle instructionHandle0 = instructionList0.append((CompoundInstruction) pUSH0);
      // Undeclared exception!
      try { 
        instructionList0.append(instructionHandle0, (Instruction) iF_ICMPEQ0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      instructionList0.toString();
      assertEquals(0, instructionList0.size());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Boolean boolean0 = Boolean.valueOf(false);
      PUSH pUSH0 = new PUSH(constantPoolGen0, boolean0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      // Undeclared exception!
      try { 
        instructionList0.insert((Instruction) null, (CompoundInstruction) pUSH0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction null is not contained in this list.
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "8t");
      Instruction instruction0 = pUSH0.getInstruction();
      InstructionList instructionList0 = new InstructionList(instruction0);
      int int0 = instructionList0.getLength();
      assertEquals(1, int0);
  }
}
