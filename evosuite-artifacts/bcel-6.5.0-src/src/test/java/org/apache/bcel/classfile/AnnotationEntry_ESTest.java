/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 22:26:10 GMT 2022
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import org.apache.bcel.classfile.AnnotationEntry;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.ElementValuePair;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.EnumElementValue;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.SimpleElementValue;
import org.apache.bcel.classfile.Visitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AnnotationEntry_ESTest extends AnnotationEntry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      AnnotationEntry annotationEntry0 = AnnotationEntry.read(dataInputStream0, constantPool0, false);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue((-1), 104, constantPool0);
      ElementValuePair elementValuePair0 = new ElementValuePair((byte)1, simpleElementValue0, constantPool0);
      annotationEntry0.addElementNameValuePair(elementValuePair0);
      assertEquals(0, annotationEntry0.getTypeIndex());
      assertFalse(annotationEntry0.isRuntimeVisible());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      AnnotationEntry annotationEntry0 = AnnotationEntry.read(dataInputStream0, constantPool0, true);
      assertTrue(annotationEntry0.isRuntimeVisible());
      assertEquals(0, annotationEntry0.getAnnotationTypeIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)120;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      AnnotationEntry annotationEntry0 = AnnotationEntry.read(dataInputStream0, constantPool0, false);
      assertFalse(annotationEntry0.isRuntimeVisible());
      assertEquals(30720, annotationEntry0.getAnnotationTypeIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AnnotationEntry annotationEntry0 = new AnnotationEntry((-619), (ConstantPool) null, false);
      boolean boolean0 = annotationEntry0.isRuntimeVisible();
      assertEquals((-619), annotationEntry0.getTypeIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      AnnotationEntry annotationEntry0 = new AnnotationEntry(0, constantPool0, true);
      int int0 = annotationEntry0.getTypeIndex();
      assertEquals(0, int0);
      assertTrue(annotationEntry0.isRuntimeVisible());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AnnotationEntry annotationEntry0 = new AnnotationEntry(1333, (ConstantPool) null, true);
      int int0 = annotationEntry0.getTypeIndex();
      assertTrue(annotationEntry0.isRuntimeVisible());
      assertEquals(1333, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      AnnotationEntry annotationEntry0 = AnnotationEntry.read(dataInputStream0, constantPool0, false);
      annotationEntry0.getNumElementValuePairs();
      assertFalse(annotationEntry0.isRuntimeVisible());
      assertEquals(0, annotationEntry0.getTypeIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AnnotationEntry annotationEntry0 = new AnnotationEntry(5382, (ConstantPool) null, true);
      annotationEntry0.getConstantPool();
      assertEquals(5382, annotationEntry0.getTypeIndex());
      assertTrue(annotationEntry0.isRuntimeVisible());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      AnnotationEntry annotationEntry0 = new AnnotationEntry((-327), constantPool0, true);
      annotationEntry0.getConstantPool();
      assertTrue(annotationEntry0.isRuntimeVisible());
      assertEquals((-327), annotationEntry0.getTypeIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      AnnotationEntry annotationEntry0 = new AnnotationEntry(0, constantPool0, true);
      int int0 = annotationEntry0.getAnnotationTypeIndex();
      assertEquals(0, int0);
      assertTrue(annotationEntry0.isRuntimeVisible());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      AnnotationEntry annotationEntry0 = new AnnotationEntry((-664), constantPool0, true);
      int int0 = annotationEntry0.getAnnotationTypeIndex();
      assertEquals((-664), int0);
      assertTrue(annotationEntry0.isRuntimeVisible());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      AnnotationEntry annotationEntry0 = new AnnotationEntry(0, constantPool0, true);
      // Undeclared exception!
      try { 
        annotationEntry0.toString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 0. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      AnnotationEntry annotationEntry0 = new AnnotationEntry((-3), constantPool0, true);
      // Undeclared exception!
      try { 
        annotationEntry0.toShortString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -3. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AnnotationEntry annotationEntry0 = new AnnotationEntry((-1496), (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        annotationEntry0.toShortString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.AnnotationEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        AnnotationEntry.read((DataInput) null, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.AnnotationEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-125), (byte)49);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        AnnotationEntry.read(dataInputStream0, (ConstantPool) null, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        AnnotationEntry.read(dataInputStream0, constantPool0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 1073);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      try { 
        AnnotationEntry.read(dataInputStream0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AnnotationEntry annotationEntry0 = new AnnotationEntry(5382, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        annotationEntry0.getAnnotationType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.AnnotationEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      AnnotationEntry annotationEntry0 = new AnnotationEntry((-327), constantPool0, true);
      MockFile mockFile0 = new MockFile("/L?$+ZsH,C;{");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      // Undeclared exception!
      try { 
        annotationEntry0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.AnnotationEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AnnotationEntry annotationEntry0 = new AnnotationEntry((-619), (ConstantPool) null, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        annotationEntry0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        AnnotationEntry.createAnnotationEntries((Attribute[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.AnnotationEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      AnnotationEntry annotationEntry0 = new AnnotationEntry(621, constantPool0, false);
      // Undeclared exception!
      try { 
        annotationEntry0.accept((Visitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.AnnotationEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      AnnotationEntry annotationEntry0 = new AnnotationEntry(53249, constantPool0, false);
      // Undeclared exception!
      try { 
        annotationEntry0.getAnnotationType();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 53249. Constant pool size is: 9
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[12];
      AnnotationEntry[] annotationEntryArray0 = AnnotationEntry.createAnnotationEntries(attributeArray0);
      assertEquals(0, annotationEntryArray0.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      MockFile mockFile0 = new MockFile("/L?$+ZsH,C;?{j");
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      AnnotationEntry annotationEntry0 = AnnotationEntry.read(dataInputStream0, constantPool0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      annotationEntry0.dump(dataOutputStream0);
      assertFalse(annotationEntry0.isRuntimeVisible());
      assertEquals(0, annotationEntry0.getTypeIndex());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)39;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        AnnotationEntry.read(dataInputStream0, constantPool0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected element value kind in annotation: 0
         //
         verifyException("org.apache.bcel.classfile.ElementValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      AnnotationEntry annotationEntry0 = AnnotationEntry.read(dataInputStream0, constantPool0, false);
      annotationEntry0.getElementValuePairs();
      assertFalse(annotationEntry0.isRuntimeVisible());
      assertEquals(0, annotationEntry0.getTypeIndex());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      AnnotationEntry annotationEntry0 = new AnnotationEntry(53249, constantPool0, false);
      int int0 = annotationEntry0.getAnnotationTypeIndex();
      assertEquals(53249, int0);
      assertFalse(annotationEntry0.isRuntimeVisible());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      AnnotationEntry annotationEntry0 = new AnnotationEntry((-327), constantPool0, true);
      // Undeclared exception!
      try { 
        annotationEntry0.getElementValuePairs();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.AnnotationEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      AnnotationEntry annotationEntry0 = new AnnotationEntry(53249, constantPool0, false);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      annotationEntry0.accept(descendingVisitor0);
      assertEquals(53249, annotationEntry0.getAnnotationTypeIndex());
      assertFalse(annotationEntry0.isRuntimeVisible());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AnnotationEntry annotationEntry0 = new AnnotationEntry((-619), (ConstantPool) null, true);
      boolean boolean0 = annotationEntry0.isRuntimeVisible();
      assertTrue(boolean0);
      assertEquals((-619), annotationEntry0.getTypeIndex());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AnnotationEntry annotationEntry0 = new AnnotationEntry(4096, (ConstantPool) null, true);
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EnumElementValue enumElementValue0 = new EnumElementValue(101, (-3428), (-3428), constantPool0);
      ElementValuePair elementValuePair0 = new ElementValuePair((-3428), enumElementValue0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        annotationEntry0.addElementNameValuePair(elementValuePair0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.AnnotationEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AnnotationEntry annotationEntry0 = new AnnotationEntry(5382, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        annotationEntry0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.AnnotationEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      AnnotationEntry annotationEntry0 = new AnnotationEntry((-327), constantPool0, true);
      // Undeclared exception!
      try { 
        annotationEntry0.getNumElementValuePairs();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.AnnotationEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      AnnotationEntry annotationEntry0 = new AnnotationEntry((-327), constantPool0, true);
      annotationEntry0.getConstantPool();
      assertTrue(annotationEntry0.isRuntimeVisible());
      assertEquals((-327), annotationEntry0.getTypeIndex());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      AnnotationEntry annotationEntry0 = new AnnotationEntry((-327), constantPool0, true);
      int int0 = annotationEntry0.getTypeIndex();
      assertTrue(annotationEntry0.isRuntimeVisible());
      assertEquals((-327), int0);
  }
}
