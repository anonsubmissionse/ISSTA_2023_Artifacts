/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 22:34:47 GMT 2022
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.InnerClass;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.Visitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InnerClass_ESTest extends InnerClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass(437, 437, (-1379), 0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("XN*uCxrrCTegR*JV.]r");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      innerClass0.dump(dataOutputStream0);
      assertEquals(437, innerClass0.getOuterClassIndex());
      assertEquals(437, innerClass0.getInnerClassIndex());
      assertEquals((-1379), innerClass0.getInnerNameIndex());
      assertEquals(0, innerClass0.getInnerAccessFlags());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass((-1629), 0, 0, (-286));
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      innerClass0.accept(emptyVisitor0);
      assertEquals(0, innerClass0.getInnerNameIndex());
      assertEquals(0, innerClass0.getOuterClassIndex());
      assertEquals((-286), innerClass0.getInnerAccessFlags());
      assertEquals((-1629), innerClass0.getInnerClassIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass(354, 354, 2719, 2719);
      int int0 = innerClass0.getOuterClassIndex();
      assertEquals(2719, innerClass0.getInnerAccessFlags());
      assertEquals(354, int0);
      assertEquals(2719, innerClass0.getInnerNameIndex());
      assertEquals(354, innerClass0.getInnerClassIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass((-849), (-849), (-849), 0);
      int int0 = innerClass0.getOuterClassIndex();
      assertEquals((-849), innerClass0.getInnerClassIndex());
      assertEquals((-849), int0);
      assertEquals(0, innerClass0.getInnerAccessFlags());
      assertEquals((-849), innerClass0.getInnerNameIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass(57, (-854), 0, (-1301));
      int int0 = innerClass0.getInnerNameIndex();
      assertEquals((-854), innerClass0.getOuterClassIndex());
      assertEquals(0, int0);
      assertEquals((-1301), innerClass0.getInnerAccessFlags());
      assertEquals(57, innerClass0.getInnerClassIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass(2295, 0, 2295, 466);
      int int0 = innerClass0.getInnerNameIndex();
      assertEquals(0, innerClass0.getOuterClassIndex());
      assertEquals(2295, int0);
      assertEquals(466, innerClass0.getInnerAccessFlags());
      assertEquals(2295, innerClass0.getInnerClassIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass(0, 0, 0, (-1299));
      int int0 = innerClass0.getInnerClassIndex();
      assertEquals((-1299), innerClass0.getInnerAccessFlags());
      assertEquals(0, innerClass0.getOuterClassIndex());
      assertEquals(0, int0);
      assertEquals(0, innerClass0.getInnerNameIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass((-1629), 0, 0, (-286));
      int int0 = innerClass0.getInnerClassIndex();
      assertEquals(0, innerClass0.getOuterClassIndex());
      assertEquals((-1629), int0);
      assertEquals(0, innerClass0.getInnerNameIndex());
      assertEquals((-286), innerClass0.getInnerAccessFlags());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass(0, 181, 0, 0);
      assertEquals(0, innerClass0.getInnerAccessFlags());
      
      innerClass0.setInnerAccessFlags(181);
      int int0 = innerClass0.getInnerAccessFlags();
      assertEquals(181, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass((-849), (-849), (-849), 0);
      innerClass0.setInnerAccessFlags((-5195));
      int int0 = innerClass0.getInnerAccessFlags();
      assertEquals((-5195), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass(0, 181, 0, 0);
      InnerClass innerClass1 = innerClass0.copy();
      assertEquals(181, innerClass1.getOuterClassIndex());
      assertEquals(0, innerClass1.getInnerAccessFlags());
      assertEquals(0, innerClass1.getInnerNameIndex());
      assertEquals(0, innerClass1.getInnerClassIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass(0, 0, (-4556), 0);
      InnerClass innerClass1 = innerClass0.copy();
      assertEquals((-4556), innerClass1.getInnerNameIndex());
      assertEquals(0, innerClass1.getOuterClassIndex());
      assertEquals(0, innerClass1.getInnerAccessFlags());
      assertEquals(0, innerClass1.getInnerClassIndex());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass(1, 0, 1415, 0);
      InnerClass innerClass1 = innerClass0.copy();
      assertEquals(0, innerClass1.getOuterClassIndex());
      assertEquals(1, innerClass1.getInnerClassIndex());
      assertEquals(0, innerClass1.getInnerAccessFlags());
      assertEquals(1415, innerClass1.getInnerNameIndex());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass((-101), (-101), 0, 0);
      InnerClass innerClass1 = innerClass0.copy();
      assertEquals(0, innerClass1.getInnerAccessFlags());
      assertEquals((-101), innerClass1.getOuterClassIndex());
      assertEquals((-101), innerClass1.getInnerClassIndex());
      assertEquals(0, innerClass1.getInnerNameIndex());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass((-1629), 0, 0, (-286));
      InnerClass innerClass1 = innerClass0.copy();
      assertEquals(0, innerClass1.getInnerNameIndex());
      assertEquals(0, innerClass1.getOuterClassIndex());
      assertEquals((-286), innerClass1.getInnerAccessFlags());
      assertEquals((-1629), innerClass1.getInnerClassIndex());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass(1299, 0, 3770, 1299);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        innerClass0.toString(constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 1299. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass((-1541), (-1541), 1547, 1547);
      // Undeclared exception!
      try { 
        innerClass0.toString((ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.InnerClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass(0, 0, 0, 0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.bcel.classfile.StackMapEntry", true);
      mockFileOutputStream0.close();
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      try { 
        innerClass0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InnerClass innerClass0 = null;
      try {
        innerClass0 = new InnerClass((InnerClass) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.InnerClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      InnerClass innerClass0 = null;
      try {
        innerClass0 = new InnerClass(dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      InnerClass innerClass0 = null;
      try {
        innerClass0 = new InnerClass(dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass((-849), (-849), (-849), 0);
      int int0 = innerClass0.getInnerAccessFlags();
      assertEquals((-849), innerClass0.getInnerClassIndex());
      assertEquals(0, int0);
      assertEquals((-849), innerClass0.getInnerNameIndex());
      assertEquals((-849), innerClass0.getOuterClassIndex());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass((-63), (-63), (-63), 578);
      int int0 = innerClass0.getInnerNameIndex();
      assertEquals((-63), innerClass0.getInnerClassIndex());
      assertEquals(578, innerClass0.getInnerAccessFlags());
      assertEquals((-63), innerClass0.getOuterClassIndex());
      assertEquals((-63), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass(0, 0, 0, (-1299));
      int int0 = innerClass0.getOuterClassIndex();
      assertEquals(0, innerClass0.getInnerClassIndex());
      assertEquals(0, innerClass0.getInnerNameIndex());
      assertEquals((-1299), innerClass0.getInnerAccessFlags());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      InnerClass innerClass0 = new InnerClass(dataInputStream0);
      assertEquals(0, innerClass0.getOuterClassIndex());
      assertEquals(0, innerClass0.getInnerNameIndex());
      assertEquals(0, innerClass0.getInnerAccessFlags());
      assertEquals(0, innerClass0.getInnerClassIndex());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass(1, 0, 1415, 0);
      int int0 = innerClass0.getInnerClassIndex();
      assertEquals(1415, innerClass0.getInnerNameIndex());
      assertEquals(0, innerClass0.getInnerAccessFlags());
      assertEquals(1, int0);
      assertEquals(0, innerClass0.getOuterClassIndex());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass((-1550), (-1550), 1547, 1547);
      assertEquals((-1550), innerClass0.getOuterClassIndex());
      
      innerClass0.setOuterClassIndex(1547);
      assertEquals(1547, innerClass0.getInnerNameIndex());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass(0, 0, 0, 0);
      innerClass0.setInnerClassIndex(83);
      assertEquals(83, innerClass0.getInnerClassIndex());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      InnerClass innerClass0 = null;
      try {
        innerClass0 = new InnerClass(dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass(0, 0, 0, 0);
      String string0 = innerClass0.toString();
      assertEquals("InnerClass(0, 0, 0, 0)", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass((-726), (-726), (-726), 0);
      // Undeclared exception!
      try { 
        innerClass0.dump((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.InnerClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass(0, 0, 0, 0);
      innerClass0.setInnerNameIndex(83);
      assertEquals(83, innerClass0.getInnerNameIndex());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass(0, 0, 0, 0);
      InnerClass innerClass1 = new InnerClass(innerClass0);
      assertEquals(0, innerClass1.getInnerAccessFlags());
      assertEquals(0, innerClass1.getInnerClassIndex());
      assertEquals(0, innerClass1.getInnerNameIndex());
      assertEquals(0, innerClass1.getOuterClassIndex());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass((-1550), (-1550), 1547, 1547);
      InnerClass innerClass1 = innerClass0.copy();
      assertEquals((-1550), innerClass1.getInnerClassIndex());
      assertEquals(1547, innerClass1.getInnerNameIndex());
      assertEquals((-1550), innerClass1.getOuterClassIndex());
      assertEquals(1547, innerClass1.getInnerAccessFlags());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass(0, 0, 0, 0);
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, (Visitor) null);
      // Undeclared exception!
      try { 
        innerClass0.accept(descendingVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.InnerClass", e);
      }
  }
}
