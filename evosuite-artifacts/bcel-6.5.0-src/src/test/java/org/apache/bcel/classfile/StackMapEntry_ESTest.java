/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 20:45:10 GMT 2022
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.StackMapEntry;
import org.apache.bcel.classfile.StackMapType;
import org.apache.bcel.classfile.Visitor;
import org.apache.bcel.util.ClassLoaderRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StackMapEntry_ESTest extends StackMapEntry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-6);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      stackMapEntry0.setByteCodeOffset(2272);
      assertEquals(2272, stackMapEntry0.getByteCodeOffset());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 167, stackMapTypeArray0, 252, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setFrameType(127);
      stackMapEntry0.setByteCodeOffset(167);
      assertEquals(167, stackMapEntry0.getByteCodeOffset());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[1];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      StackMapEntry stackMapEntry0 = new StackMapEntry((byte)64, 247, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      stackMapEntry0.updateByteCodeOffset(252);
      assertEquals(247, stackMapEntry0.getFrameType());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)63;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      stackMapEntry0.setByteCodeOffset(2279);
      assertEquals(251, stackMapEntry0.getFrameType());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry(32767, 32767, stackMapTypeArray0, stackMapTypeArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        stackMapEntry0.setFrameType(32767);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid StackMap frameType
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[14];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      stackMapEntry0.setFrameType(250);
      assertEquals(250, stackMapEntry0.getFrameType());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 252, (StackMapType[]) null, (ConstantPool) null);
      stackMapEntry0.setFrameType(63);
      assertEquals(63, stackMapEntry0.getFrameType());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType[] stackMapTypeArray0 = new StackMapType[2];
      StackMapEntry stackMapEntry0 = new StackMapEntry(0, 3600, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      assertEquals(3600, stackMapEntry0.getByteCodeOffset());
      
      stackMapEntry0.setFrameType((byte)0);
      assertEquals(0, stackMapEntry0.getByteCodeOffset());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-2);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      int int0 = stackMapEntry0.getMapEntrySize();
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-6);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      int int0 = stackMapEntry0.getMapEntrySize();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 252, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setFrameType(126);
      stackMapEntry0.setByteCodeOffset(63);
      // Undeclared exception!
      try { 
        stackMapEntry0.getMapEntrySize();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType[] stackMapTypeArray0 = new StackMapType[2];
      StackMapEntry stackMapEntry0 = new StackMapEntry(0, (byte)0, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      stackMapEntry0.setFrameType((byte)84);
      stackMapEntry0.setByteCodeOffset(0);
      // Undeclared exception!
      try { 
        stackMapEntry0.getMapEntrySize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 252, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setByteCodeOffset(63);
      int int0 = stackMapEntry0.getMapEntrySize();
      assertEquals(63, stackMapEntry0.getByteCodeOffset());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 232, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setFrameType(254);
      stackMapEntry0.toString();
      assertEquals(254, stackMapEntry0.getFrameType());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-6);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      String string0 = stackMapEntry0.toString();
      assertEquals("(CHOP 1, offset delta=0)", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(127, 185, (StackMapType[]) null, (StackMapType[]) null, constantPool0);
      String string0 = stackMapEntry0.toString();
      assertEquals("(SAME_LOCALS_1_STACK, offset delta=185)", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType[] stackMapTypeArray0 = new StackMapType[2];
      StackMapEntry stackMapEntry0 = new StackMapEntry(0, (byte)0, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      stackMapEntry0.setFrameType((byte)84);
      stackMapEntry0.setByteCodeOffset(0);
      stackMapEntry0.toString();
      assertEquals(0, stackMapEntry0.getByteCodeOffset());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 252, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setByteCodeOffset(63);
      stackMapEntry0.toString();
      assertEquals(63, stackMapEntry0.getByteCodeOffset());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 232, stackMapTypeArray0, (ConstantPool) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("cTz^ 9-5'9f6VP14^2R");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      stackMapEntry0.setFrameType(254);
      stackMapEntry0.dump(dataOutputStream0);
      assertEquals(254, stackMapEntry0.getFrameType());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType[] stackMapTypeArray0 = new StackMapType[2];
      StackMapEntry stackMapEntry0 = new StackMapEntry(0, (byte)0, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      stackMapEntry0.setFrameType((byte)84);
      stackMapEntry0.setByteCodeOffset(0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      // Undeclared exception!
      try { 
        stackMapEntry0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)127;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      assertEquals(63, stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)63;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      stackMapEntry0.dump(dataOutputStream0);
      assertEquals("?", byteArrayOutputStream0.toString());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(247, 247, (StackMapType[]) null, 247, (StackMapType[]) null, constantPool0);
      stackMapEntry0.updateByteCodeOffset(247);
      assertEquals(251, stackMapEntry0.getFrameType());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      StackMapType[] stackMapTypeArray0 = stackMapEntry0.getTypesOfStackItems();
      assertEquals(0, stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapTypeArray0.length);
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry(1104, 255, stackMapTypeArray0, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.getTypesOfLocals();
      assertEquals(255, stackMapEntry0.getByteCodeOffset());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      StackMapEntry stackMapEntry0 = new StackMapEntry(0, 4, stackMapTypeArray0, 4, stackMapTypeArray0, constantPool0);
      stackMapEntry0.getNumberOfStackItems();
      assertEquals(0, stackMapEntry0.getByteCodeOffset());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[14];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      int int0 = stackMapEntry0.getNumberOfLocals();
      assertEquals(0, stackMapEntry0.getByteCodeOffset());
      assertEquals(0, int0);
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1921), (-1921), stackMapTypeArray0, (-1921), stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setFrameType(255);
      int int0 = stackMapEntry0.getFrameType();
      assertEquals(255, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StackMapEntry stackMapEntry0 = new StackMapEntry((-544), 121, (StackMapType[]) null, (StackMapType[]) null, (ConstantPool) null);
      int int0 = stackMapEntry0.getFrameType();
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(121, stackMapEntry0.getByteCodeOffset());
      assertEquals((-544), int0);
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[1];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      StackMapEntry stackMapEntry0 = new StackMapEntry((byte) (-10), (byte)64, stackMapTypeArray0, 1950, stackMapTypeArray0, constantPool0);
      stackMapEntry0.getConstantPool();
      assertEquals((-10), stackMapEntry0.getByteCodeOffset());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType[] stackMapTypeArray0 = new StackMapType[5];
      StackMapEntry stackMapEntry0 = new StackMapEntry(2120, (-7008), stackMapTypeArray0, (byte)0, stackMapTypeArray0, constantPool0);
      stackMapEntry0.getConstantPool();
      assertEquals(2120, stackMapEntry0.getByteCodeOffset());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 252, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setFrameType(64);
      int int0 = stackMapEntry0.getByteCodeOffset();
      assertEquals(64, stackMapEntry0.getFrameType());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 167, stackMapTypeArray0, 252, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setFrameType(127);
      int int0 = stackMapEntry0.getByteCodeOffset();
      assertEquals(127, stackMapEntry0.getFrameType());
      assertEquals(63, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType stackMapType0 = new StackMapType((byte)0, (byte) (-4), constantPool0);
      StackMapType[] stackMapTypeArray0 = new StackMapType[2];
      stackMapTypeArray0[0] = stackMapType0;
      stackMapTypeArray0[1] = stackMapType0;
      StackMapEntry stackMapEntry0 = new StackMapEntry(0, (byte)0, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      stackMapEntry0.setFrameType((byte)84);
      stackMapEntry0.copy();
      assertEquals(84, stackMapEntry0.getFrameType());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(247, 247, (StackMapType[]) null, 247, (StackMapType[]) null, constantPool0);
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      
      StackMapEntry stackMapEntry1 = stackMapEntry0.copy();
      assertNotSame(stackMapEntry1, stackMapEntry0);
      assertEquals(247, stackMapEntry1.getByteCodeOffset());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[4];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType stackMapType0 = new StackMapType((byte)7, 229, constantPool0);
      stackMapTypeArray0[0] = stackMapType0;
      StackMapEntry stackMapEntry0 = new StackMapEntry(0, (-3346), stackMapTypeArray0, (-407), stackMapTypeArray0, constantPool0);
      // Undeclared exception!
      try { 
        stackMapEntry0.toString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 229. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)7;
      byteArray0[0] = (byte) (-4);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      // Undeclared exception!
      try { 
        stackMapEntry0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), (-19), stackMapTypeArray0, 252, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setFrameType(127);
      MockPrintStream mockPrintStream0 = new MockPrintStream("cTz^ 9-5'9f6VP14^2R");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      // Undeclared exception!
      try { 
        stackMapEntry0.dump(dataOutputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 252, stackMapTypeArray0, (ConstantPool) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        stackMapEntry0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1959), 218, stackMapTypeArray0, 252, stackMapTypeArray0, (ConstantPool) null);
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, (Visitor) null);
      // Undeclared exception!
      try { 
        stackMapEntry0.accept(descendingVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      StackMapEntry stackMapEntry0 = null;
      try {
        stackMapEntry0 = new StackMapEntry(dataInputStream0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[3] = (byte) (-83);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, (byte)79);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapEntry stackMapEntry0 = null;
      try {
        stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      byteArray0[4] = (byte)84;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = null;
      try {
        stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal type for StackMapType: -1
         //
         verifyException("org.apache.bcel.classfile.StackMapType", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-3262), 63);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = null;
      try {
        stackMapEntry0 = new StackMapEntry(dataInputStream0, (ConstantPool) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      StackMapEntry stackMapEntry0 = null;
      try {
        stackMapEntry0 = new StackMapEntry(dataInputStream0, (ConstantPool) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StackMapEntry stackMapEntry0 = new StackMapEntry((-531), (-531), (StackMapType[]) null, (StackMapType[]) null, (ConstantPool) null);
      // Undeclared exception!
      try { 
        stackMapEntry0.setByteCodeOffset((byte)8);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Invalid StackMap frameType: -531
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 252, stackMapTypeArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        stackMapEntry0.setByteCodeOffset((-1157));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid StackMap offset: -1157
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = null;
      try {
        stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-6);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(949);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      stackMapEntry0.dump(dataOutputStream0);
      assertEquals(3, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\u0000\u0000", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)84;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(20, stackMapEntry0.getByteCodeOffset());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType stackMapType0 = new StackMapType((byte)0, (byte) (-4), constantPool0);
      StackMapType[] stackMapTypeArray0 = new StackMapType[2];
      stackMapTypeArray0[0] = stackMapType0;
      stackMapTypeArray0[1] = stackMapType0;
      StackMapEntry stackMapEntry0 = new StackMapEntry((byte) (-4), (byte)0, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      StackMapEntry stackMapEntry1 = stackMapEntry0.copy();
      assertNotSame(stackMapEntry1, stackMapEntry0);
      assertEquals(0, stackMapEntry1.getByteCodeOffset());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType[] stackMapTypeArray0 = new StackMapType[2];
      StackMapEntry stackMapEntry0 = new StackMapEntry((byte) (-4), (byte)0, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      // Undeclared exception!
      try { 
        stackMapEntry0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 252, stackMapTypeArray0, (ConstantPool) null);
      StackMapEntry stackMapEntry1 = stackMapEntry0.copy();
      assertNotSame(stackMapEntry1, stackMapEntry0);
      assertEquals((-1927), stackMapEntry1.getByteCodeOffset());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[7];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 0, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setTypesOfStackItems(stackMapTypeArray0);
      assertEquals(7, stackMapEntry0.getNumberOfLocals());
      assertEquals(7, stackMapEntry0.getNumberOfStackItems());
      assertEquals((-1927), stackMapEntry0.getByteCodeOffset());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[9];
      StackMapEntry stackMapEntry0 = new StackMapEntry(8, 8, stackMapTypeArray0, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setTypesOfStackItems((StackMapType[]) null);
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 252, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setTypesOfLocals(stackMapTypeArray0);
      assertEquals((-1927), stackMapEntry0.getByteCodeOffset());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[17];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), (-1927), stackMapTypeArray0, 252, (StackMapType[]) null, (ConstantPool) null);
      assertEquals(17, stackMapEntry0.getNumberOfLocals());
      
      stackMapEntry0.setTypesOfLocals((StackMapType[]) null);
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[1];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), (-1927), stackMapTypeArray0, 252, (StackMapType[]) null, (ConstantPool) null);
      stackMapEntry0.setFrameType(252);
      stackMapEntry0.setByteCodeOffset(63);
      assertEquals(63, stackMapEntry0.getByteCodeOffset());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-5);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      stackMapEntry0.setByteCodeOffset(2272);
      assertEquals(2272, stackMapEntry0.getByteCodeOffset());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 252, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setFrameType(248);
      stackMapEntry0.setByteCodeOffset(32767);
      assertEquals(248, stackMapEntry0.getFrameType());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 252, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setFrameType(255);
      stackMapEntry0.setByteCodeOffset(63);
      assertEquals(63, stackMapEntry0.getByteCodeOffset());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 252, stackMapTypeArray0, (ConstantPool) null);
      assertEquals((-1927), stackMapEntry0.getByteCodeOffset());
      
      stackMapEntry0.setByteCodeOffset(0);
      assertEquals(0, stackMapEntry0.getByteCodeOffset());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StackMapEntry stackMapEntry0 = new StackMapEntry((-544), 121, (StackMapType[]) null, (StackMapType[]) null, (ConstantPool) null);
      // Undeclared exception!
      try { 
        stackMapEntry0.updateByteCodeOffset(122);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Invalid StackMap frameType: -544
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 252, stackMapTypeArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        stackMapEntry0.setByteCodeOffset(32802);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid StackMap offset: 32802
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[1];
      StackMapEntry stackMapEntry0 = new StackMapEntry(8, 8, stackMapTypeArray0, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setFrameType(251);
      assertEquals(251, stackMapEntry0.getFrameType());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry(571, 248, stackMapTypeArray0, 248, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setFrameType(247);
      // Undeclared exception!
      try { 
        stackMapEntry0.getMapEntrySize();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1921), (-1921), stackMapTypeArray0, (-1921), stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setFrameType(255);
      int int0 = stackMapEntry0.getMapEntrySize();
      assertEquals(255, stackMapEntry0.getFrameType());
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[1];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 252, (StackMapType[]) null, (-1927), stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setFrameType(255);
      // Undeclared exception!
      try { 
        stackMapEntry0.getMapEntrySize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)7;
      byteArray0[0] = (byte) (-4);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      int int0 = stackMapEntry0.getMapEntrySize();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[1];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), (-1927), stackMapTypeArray0, 252, (StackMapType[]) null, (ConstantPool) null);
      stackMapEntry0.setFrameType(255);
      // Undeclared exception!
      try { 
        stackMapEntry0.getMapEntrySize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 252, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setFrameType(248);
      int int0 = stackMapEntry0.getMapEntrySize();
      assertEquals(248, stackMapEntry0.getFrameType());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType stackMapType0 = new StackMapType((byte)0, (byte) (-4), constantPool0);
      StackMapType[] stackMapTypeArray0 = new StackMapType[2];
      stackMapTypeArray0[0] = stackMapType0;
      StackMapEntry stackMapEntry0 = new StackMapEntry((byte) (-4), (byte)0, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      stackMapEntry0.setFrameType((byte)84);
      stackMapEntry0.setByteCodeOffset((byte)84);
      int int0 = stackMapEntry0.getMapEntrySize();
      assertEquals(247, stackMapEntry0.getFrameType());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType stackMapType0 = new StackMapType((byte)7, (byte) (-4), constantPool0);
      StackMapType[] stackMapTypeArray0 = new StackMapType[2];
      stackMapTypeArray0[0] = stackMapType0;
      StackMapEntry stackMapEntry0 = new StackMapEntry((byte) (-4), (byte)7, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      stackMapEntry0.setFrameType((byte)84);
      int int0 = stackMapEntry0.getMapEntrySize();
      assertEquals(84, stackMapEntry0.getFrameType());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType stackMapType0 = new StackMapType((byte)0, (byte) (-4), constantPool0);
      StackMapType[] stackMapTypeArray0 = new StackMapType[2];
      stackMapTypeArray0[0] = stackMapType0;
      StackMapEntry stackMapEntry0 = new StackMapEntry((byte) (-4), (byte)0, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      stackMapEntry0.setFrameType((byte)84);
      int int0 = stackMapEntry0.getMapEntrySize();
      assertEquals(84, stackMapEntry0.getFrameType());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[10];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      stackMapEntry0.setByteCodeOffset(2244);
      int int0 = stackMapEntry0.getMapEntrySize();
      assertEquals(251, stackMapEntry0.getFrameType());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[10];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      int int0 = stackMapEntry0.getMapEntrySize();
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(0, stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StackMapEntry stackMapEntry0 = new StackMapEntry((-569), (-569), (StackMapType[]) null, (StackMapType[]) null, (ConstantPool) null);
      // Undeclared exception!
      try { 
        stackMapEntry0.getMapEntrySize();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Invalid StackMap frameType: -569
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 252, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setFrameType(255);
      stackMapEntry0.toString();
      assertEquals(255, stackMapEntry0.getFrameType());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry(14, 0, stackMapTypeArray0, 0, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setFrameType(248);
      stackMapEntry0.toString();
      assertEquals(248, stackMapEntry0.getFrameType());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType[] stackMapTypeArray0 = new StackMapType[2];
      StackMapEntry stackMapEntry0 = new StackMapEntry((byte) (-4), (byte)0, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      stackMapEntry0.setFrameType((byte)84);
      stackMapEntry0.setByteCodeOffset((byte)84);
      stackMapEntry0.toString();
      assertEquals(247, stackMapEntry0.getFrameType());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[10];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      stackMapEntry0.setByteCodeOffset(2244);
      stackMapEntry0.toString();
      assertEquals(2244, stackMapEntry0.getByteCodeOffset());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StackMapEntry stackMapEntry0 = new StackMapEntry((-544), 121, (StackMapType[]) null, (StackMapType[]) null, (ConstantPool) null);
      String string0 = stackMapEntry0.toString();
      assertEquals("(UNKNOWN (-544), offset delta=121)", string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[1];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 252, (StackMapType[]) null, (-1927), stackMapTypeArray0, (ConstantPool) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("(APPEND 1, offset delta=-1927, locals={null})");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      stackMapEntry0.setFrameType(255);
      // Undeclared exception!
      try { 
        stackMapEntry0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[1];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 0, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setFrameType(255);
      MockPrintStream mockPrintStream0 = new MockPrintStream("cTz^ 9-5'9f6VP14^2R");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      // Undeclared exception!
      try { 
        stackMapEntry0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 252, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setFrameType(255);
      MockPrintStream mockPrintStream0 = new MockPrintStream("cTz^ 9-5'9f6VP14^2R");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      stackMapEntry0.dump(dataOutputStream0);
      assertEquals(255, stackMapEntry0.getFrameType());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[10];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      stackMapEntry0.setByteCodeOffset(2244);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2244);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      stackMapEntry0.dump(dataOutputStream0);
      assertEquals(2244, stackMapEntry0.getByteCodeOffset());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry(14, 0, stackMapTypeArray0, 0, stackMapTypeArray0, (ConstantPool) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("cTz^ 9-5'9f6VP14^2R");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      stackMapEntry0.setFrameType(248);
      stackMapEntry0.dump(dataOutputStream0);
      assertEquals(248, stackMapEntry0.getFrameType());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType[] stackMapTypeArray0 = new StackMapType[2];
      StackMapEntry stackMapEntry0 = new StackMapEntry((byte) (-4), (byte)0, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      stackMapEntry0.setFrameType((byte)84);
      stackMapEntry0.setByteCodeOffset((byte)84);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      // Undeclared exception!
      try { 
        stackMapEntry0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StackMapEntry stackMapEntry0 = new StackMapEntry((-530), (-530), (StackMapType[]) null, (StackMapType[]) null, (ConstantPool) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      // Undeclared exception!
      try { 
        stackMapEntry0.dump(dataOutputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid Stack map table tag: -530
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[17];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), (-1927), stackMapTypeArray0, 252, (StackMapType[]) null, (ConstantPool) null);
      // Undeclared exception!
      try { 
        stackMapEntry0.setFrameType((-1927));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid StackMap frameType
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-116);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = null;
      try {
        stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid frame type found while parsing stack map table: 140
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-9);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      stackMapEntry0.setByteCodeOffset(2272);
      assertEquals(2272, stackMapEntry0.getByteCodeOffset());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<ObjectInputStream> class0 = ObjectInputStream.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertTrue(javaClass0.isClass());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-4);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(949);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      stackMapEntry0.dump(dataOutputStream0);
      assertEquals("\uFFFD\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      assertEquals(4, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(949);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      stackMapEntry0.dump(dataOutputStream0);
      assertEquals("\u0000", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[1];
      StackMapEntry stackMapEntry0 = new StackMapEntry(8, 8, stackMapTypeArray0, stackMapTypeArray0, (ConstantPool) null);
      StackMapType[] stackMapTypeArray1 = stackMapEntry0.getTypesOfStackItems();
      assertEquals(8, stackMapEntry0.getFrameType());
      assertEquals(1, stackMapTypeArray1.length);
      assertEquals(8, stackMapEntry0.getByteCodeOffset());
      assertEquals(1, stackMapEntry0.getNumberOfLocals());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType[] stackMapTypeArray0 = new StackMapType[2];
      StackMapEntry stackMapEntry0 = new StackMapEntry((byte) (-4), (byte)7, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      int int0 = stackMapEntry0.getNumberOfLocals();
      assertEquals(2, int0);
      assertEquals(7, stackMapEntry0.getByteCodeOffset());
      assertEquals((-4), stackMapEntry0.getFrameType());
      assertEquals(2, stackMapEntry0.getNumberOfStackItems());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType[] stackMapTypeArray0 = new StackMapType[2];
      StackMapEntry stackMapEntry0 = new StackMapEntry((byte) (-4), (byte)0, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      int int0 = stackMapEntry0.getNumberOfStackItems();
      assertEquals((-4), stackMapEntry0.getFrameType());
      assertEquals(2, stackMapEntry0.getNumberOfLocals());
      assertEquals(2, int0);
      assertEquals(0, stackMapEntry0.getByteCodeOffset());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[1];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-2362), (-2362), stackMapTypeArray0, (-2362), stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setNumberOfLocals((-2362));
      assertEquals((-2362), stackMapEntry0.getByteCodeOffset());
      assertEquals(1, stackMapEntry0.getNumberOfLocals());
      assertEquals(1, stackMapEntry0.getNumberOfStackItems());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 252, stackMapTypeArray0, (ConstantPool) null);
      int int0 = stackMapEntry0.getFrameType();
      assertEquals(0, int0);
      assertEquals((-1927), stackMapEntry0.getByteCodeOffset());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType[] stackMapTypeArray0 = new StackMapType[2];
      StackMapEntry stackMapEntry0 = new StackMapEntry((byte) (-4), (byte)7, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      StackMapType[] stackMapTypeArray1 = stackMapEntry0.getTypesOfLocals();
      assertEquals(7, stackMapEntry0.getByteCodeOffset());
      assertEquals(2, stackMapTypeArray1.length);
      assertEquals(2, stackMapEntry0.getNumberOfStackItems());
      assertEquals((-4), stackMapEntry0.getFrameType());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 252, stackMapTypeArray0, (ConstantPool) null);
      int int0 = stackMapEntry0.getByteCodeOffset();
      assertEquals((-1927), int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 252, stackMapTypeArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        stackMapEntry0.updateByteCodeOffset((-1489));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid StackMap offset: -3416
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 252, stackMapTypeArray0, (ConstantPool) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      stackMapEntry0.accept(descendingVisitor0);
      assertEquals((-1927), stackMapEntry0.getByteCodeOffset());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 252, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setConstantPool((ConstantPool) null);
      assertEquals((-1927), stackMapEntry0.getByteCodeOffset());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1910), (-1910), stackMapTypeArray0, (-1910), stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setNumberOfStackItems(0);
      assertEquals((-1910), stackMapEntry0.getByteCodeOffset());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[1];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-2362), (-2362), stackMapTypeArray0, (-2362), stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.getConstantPool();
      assertEquals(1, stackMapEntry0.getNumberOfStackItems());
      assertEquals((-2362), stackMapEntry0.getByteCodeOffset());
      assertEquals(1, stackMapEntry0.getNumberOfLocals());
  }
}
